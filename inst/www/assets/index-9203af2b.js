(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const menus = "";
const toolbar = "";
const Zoom$1 = "";
function noop$2() {
}
function assign$3(tar, src2) {
  for (const k2 in src2)
    tar[k2] = src2[k2];
  return tar;
}
function run(fn3) {
  return fn3();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a2, b2) {
  return a2 != a2 ? b2 == b2 : a2 !== b2 || (a2 && typeof a2 === "object" || typeof a2 === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop$2;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_2) => value = _2)();
  return value;
}
function component_subscribe(component2, store, callback) {
  component2.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn3) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn3);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn3) {
  return definition[1] && fn3 ? assign$3($$scope.ctx.slice(), definition[1](fn3(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn3) {
  if (definition[2] && fn3) {
    const lets = definition[2](fn3(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i2 = 0; i2 < len; i2 += 1) {
        merged[i2] = $$scope.dirty[i2] | lets[i2];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i2 = 0; i2 < length; i2++) {
      dirty[i2] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i2 = 0; i2 < iterations.length; i2 += 1) {
    if (iterations[i2])
      iterations[i2].d(detaching);
  }
}
function element$1(name2) {
  return document.createElement(name2);
}
function text(data4) {
  return document.createTextNode(data4);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event3, handler, options2) {
  node.addEventListener(event3, handler, options2);
  return () => node.removeEventListener(event3, handler, options2);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function init_binding_group(group2) {
  let _inputs;
  return {
    /* push */
    p(...inputs) {
      _inputs = inputs;
      _inputs.forEach((input) => group2.push(input));
    },
    /* remove */
    r() {
      _inputs.forEach((input) => group2.splice(group2.indexOf(input), 1));
    }
  };
}
function to_number(value) {
  return value === "" ? null : +value;
}
function children(element3) {
  return Array.from(element3.childNodes);
}
function set_data(text2, data4) {
  data4 = "" + data4;
  if (text2.data === data4)
    return;
  text2.data = data4;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element3, name2, toggle) {
  element3.classList[toggle ? "add" : "remove"](name2);
}
let current_component;
function set_current_component(component2) {
  current_component = component2;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn3) {
  get_current_component().$$.on_mount.push(fn3);
}
const dirty_components = [];
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn3) {
  render_callbacks.push(fn3);
}
function add_flush_callback(fn3) {
  flush_callbacks.push(fn3);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component2 = dirty_components[flushidx];
        flushidx++;
        set_current_component(component2);
        update$1(component2.$$);
      }
    } catch (e2) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e2;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
      const callback = render_callbacks[i2];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update$1($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c2) => fns.indexOf(c2) === -1 ? filtered.push(c2) : targets.push(c2));
  targets.forEach((c2) => c2());
  render_callbacks = filtered;
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
function bind(component2, name2, callback) {
  const index = component2.$$.props[name2];
  if (index !== void 0) {
    component2.$$.bound[index] = callback;
    callback(component2.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component2, target, anchor, customElement) {
  const { fragment, after_update } = component2.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component2.$$.on_mount.map(run).filter(is_function);
      if (component2.$$.on_destroy) {
        component2.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component2.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component2, detaching) {
  const $$ = component2.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component2, i2) {
  if (component2.$$.dirty[0] === -1) {
    dirty_components.push(component2);
    schedule_update();
    component2.$$.dirty.fill(0);
  }
  component2.$$.dirty[i2 / 31 | 0] |= 1 << i2 % 31;
}
function init(component2, options2, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component2);
  const $$ = component2.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop$2,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options2.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options2.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready4 = false;
  $$.ctx = instance2 ? instance2(component2, options2.props || {}, (i2, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i2], $$.ctx[i2] = value)) {
      if (!$$.skip_bound && $$.bound[i2])
        $$.bound[i2](value);
      if (ready4)
        make_dirty(component2, i2);
    }
    return ret;
  }) : [];
  $$.update();
  ready4 = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options2.target) {
    if (options2.hydrate) {
      const nodes3 = children(options2.target);
      $$.fragment && $$.fragment.l(nodes3);
      nodes3.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options2.intro)
      transition_in(component2.$$.fragment);
    mount_component(component2, options2.target, options2.anchor, options2.customElement);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop$2;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop$2;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
}
const subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop$2) {
  let stop5;
  const subscribers = /* @__PURE__ */ new Set();
  function set2(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop5) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i2 = 0; i2 < subscriber_queue.length; i2 += 2) {
            subscriber_queue[i2][0](subscriber_queue[i2 + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn3) {
    set2(fn3(value));
  }
  function subscribe2(run2, invalidate = noop$2) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop5 = start(set2) || noop$2;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop5) {
        stop5();
        stop5 = null;
      }
    };
  }
  return { set: set2, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn3, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  const auto = fn3.length < 2;
  return readable(initial_value, (set2) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop$2;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn3(single ? values[0] : values, set2);
      if (auto) {
        set2(result);
      } else {
        cleanup = is_function(result) ? result : noop$2;
      }
    };
    const unsubscribers = stores_array.map((store, i2) => subscribe(store, (value) => {
      values[i2] = value;
      pending &= ~(1 << i2);
      if (started) {
        sync();
      }
    }, () => {
      pending |= 1 << i2;
    }));
    started = true;
    sync();
    return function stop5() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}
const cyStore = writable(null);
const ehStore = writable(null);
const ur = writable(null);
let modelOptions = writable({
  meanStruc: "default",
  intOvFree: true,
  intLvFree: false,
  estimator: "default",
  se: "default",
  missing: "listwise",
  n_boot: 1e3,
  fix_first: true,
  fix_single: true,
  auto_var: true,
  auto_cov_lv_x: true,
  auto_cov_y: true,
  fixed_x: true,
  mode: "user model"
});
let gridViewOptions = writable({
  gridShow: false,
  gridSpace: 26,
  gridColor: "#dedede",
  gridWidth: 1,
  gridMovePan: false,
  gridSnap: false,
  gridAlign: true,
  gridResize: false,
  showLav: true,
  showVar: true,
  showMean: true,
  std: false,
  view: "est",
  ci: 0.95,
  number_digits: 2
});
let fitCache = writable({
  lastFitModel: null,
  lastFitLavFit: null,
  lastFitData: null
});
let appState = writable({
  fitting: false,
  loadingMode: false,
  runCounter: 0,
  modelEmpty: true,
  dataAvail: false,
  columnNames: null,
  loadedFileName: null,
  ids: null,
  dragged: null,
  draggedName: null,
  full: true,
  ready: false,
  parsedModel: false,
  meansModelled: null,
  buttonDown: false,
  showServerErrors: true,
  everEdge: false,
  drawing: "none"
});
let dataInfo = writable(0);
derived(
  appState,
  ($appState) => $appState.columnNames
);
const alertStore = writable({
  type: "info",
  message: "",
  key: 0
  // this is used to force re-renders
});
function setAlert(type, message) {
  alertStore.update((currentAlert) => {
    return {
      type,
      message,
      key: currentAlert.key + 1
    };
  });
}
setAlert("info", "Greetings");
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function isObject$5(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$5;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$4 = freeGlobal || freeSelf || Function("return this")();
var _root = root$4;
var root$3 = _root;
var now$2 = function() {
  return root$3.Date.now();
};
var now_1 = now$2;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string3) {
  var index = string3.length;
  while (index-- && reWhitespace.test(string3.charAt(index))) {
  }
  return index;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string3) {
  return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
}
var _baseTrim = baseTrim$1;
var root$2 = _root;
var Symbol$4 = root$2.Symbol;
var _Symbol = Symbol$4;
var Symbol$3 = _Symbol;
var objectProto$5 = Object.prototype;
var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
var nativeObjectToString$1 = objectProto$5.toString;
var symToStringTag$1 = Symbol$3 ? Symbol$3.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$5.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto$4 = Object.prototype;
var nativeObjectToString = objectProto$4.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$1;
var Symbol$2 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
function baseGetTag$2(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
var _baseGetTag = baseGetTag$2;
function isObjectLike$1(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$1;
var baseGetTag$1 = _baseGetTag, isObjectLike = isObjectLike_1;
var symbolTag = "[object Symbol]";
function isSymbol$5(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag$1(value) == symbolTag;
}
var isSymbol_1 = isSymbol$5;
var baseTrim = _baseTrim, isObject$4 = isObject_1, isSymbol$4 = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$1(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol$4(value)) {
    return NAN;
  }
  if (isObject$4(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject$4(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber$1;
var isObject$3 = isObject_1, now$1 = now_1, toNumber = toNumber_1;
var FUNC_ERROR_TEXT$1 = "Expected a function";
var nativeMax = Math.max, nativeMin = Math.min;
function debounce$1(func, wait, options2) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject$3(options2)) {
    leading = !!options2.leading;
    maxing = "maxWait" in options2;
    maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options2 ? !!options2.trailing : trailing;
  }
  function invokeFunc(time2) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = now$1();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = setTimeout(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush2() {
    return timerId === void 0 ? result : trailingEdge(now$1());
  }
  function debounced() {
    var time2 = now$1(), isInvoking = shouldInvoke(time2);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush2;
  return debounced;
}
var debounce_1$1 = debounce$1;
var heap$1 = { exports: {} };
(function(module, exports) {
  (function() {
    var Heap2, defaultCmp, floor2, heapify, heappop, heappush, heappushpop, heapreplace, insort, min4, nlargest, nsmallest, updateItem, _siftdown, _siftup;
    floor2 = Math.floor, min4 = Math.min;
    defaultCmp = function(x2, y2) {
      if (x2 < y2) {
        return -1;
      }
      if (x2 > y2) {
        return 1;
      }
      return 0;
    };
    insort = function(a2, x2, lo, hi, cmp) {
      var mid;
      if (lo == null) {
        lo = 0;
      }
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (lo < 0) {
        throw new Error("lo must be non-negative");
      }
      if (hi == null) {
        hi = a2.length;
      }
      while (lo < hi) {
        mid = floor2((lo + hi) / 2);
        if (cmp(x2, a2[mid]) < 0) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return [].splice.apply(a2, [lo, lo - lo].concat(x2)), x2;
    };
    heappush = function(array3, item, cmp) {
      if (cmp == null) {
        cmp = defaultCmp;
      }
      array3.push(item);
      return _siftdown(array3, 0, array3.length - 1, cmp);
    };
    heappop = function(array3, cmp) {
      var lastelt, returnitem;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      lastelt = array3.pop();
      if (array3.length) {
        returnitem = array3[0];
        array3[0] = lastelt;
        _siftup(array3, 0, cmp);
      } else {
        returnitem = lastelt;
      }
      return returnitem;
    };
    heapreplace = function(array3, item, cmp) {
      var returnitem;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      returnitem = array3[0];
      array3[0] = item;
      _siftup(array3, 0, cmp);
      return returnitem;
    };
    heappushpop = function(array3, item, cmp) {
      var _ref;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (array3.length && cmp(array3[0], item) < 0) {
        _ref = [array3[0], item], item = _ref[0], array3[0] = _ref[1];
        _siftup(array3, 0, cmp);
      }
      return item;
    };
    heapify = function(array3, cmp) {
      var i2, _i, _len, _ref1, _results, _results1;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      _ref1 = (function() {
        _results1 = [];
        for (var _j = 0, _ref = floor2(array3.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--) {
          _results1.push(_j);
        }
        return _results1;
      }).apply(this).reverse();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i2 = _ref1[_i];
        _results.push(_siftup(array3, i2, cmp));
      }
      return _results;
    };
    updateItem = function(array3, item, cmp) {
      var pos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      pos = array3.indexOf(item);
      if (pos === -1) {
        return;
      }
      _siftdown(array3, 0, pos, cmp);
      return _siftup(array3, pos, cmp);
    };
    nlargest = function(array3, n2, cmp) {
      var elem, result, _i, _len, _ref;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      result = array3.slice(0, n2);
      if (!result.length) {
        return result;
      }
      heapify(result, cmp);
      _ref = array3.slice(n2);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        heappushpop(result, elem, cmp);
      }
      return result.sort(cmp).reverse();
    };
    nsmallest = function(array3, n2, cmp) {
      var elem, los, result, _i, _j, _len, _ref, _ref1, _results;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (n2 * 10 <= array3.length) {
        result = array3.slice(0, n2).sort(cmp);
        if (!result.length) {
          return result;
        }
        los = result[result.length - 1];
        _ref = array3.slice(n2);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if (cmp(elem, los) < 0) {
            insort(result, elem, 0, null, cmp);
            result.pop();
            los = result[result.length - 1];
          }
        }
        return result;
      }
      heapify(array3, cmp);
      _results = [];
      for (_j = 0, _ref1 = min4(n2, array3.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {
        _results.push(heappop(array3, cmp));
      }
      return _results;
    };
    _siftdown = function(array3, startpos, pos, cmp) {
      var newitem, parent4, parentpos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      newitem = array3[pos];
      while (pos > startpos) {
        parentpos = pos - 1 >> 1;
        parent4 = array3[parentpos];
        if (cmp(newitem, parent4) < 0) {
          array3[pos] = parent4;
          pos = parentpos;
          continue;
        }
        break;
      }
      return array3[pos] = newitem;
    };
    _siftup = function(array3, pos, cmp) {
      var childpos, endpos, newitem, rightpos, startpos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      endpos = array3.length;
      startpos = pos;
      newitem = array3[pos];
      childpos = 2 * pos + 1;
      while (childpos < endpos) {
        rightpos = childpos + 1;
        if (rightpos < endpos && !(cmp(array3[childpos], array3[rightpos]) < 0)) {
          childpos = rightpos;
        }
        array3[pos] = array3[childpos];
        pos = childpos;
        childpos = 2 * pos + 1;
      }
      array3[pos] = newitem;
      return _siftdown(array3, startpos, pos, cmp);
    };
    Heap2 = function() {
      Heap3.push = heappush;
      Heap3.pop = heappop;
      Heap3.replace = heapreplace;
      Heap3.pushpop = heappushpop;
      Heap3.heapify = heapify;
      Heap3.updateItem = updateItem;
      Heap3.nlargest = nlargest;
      Heap3.nsmallest = nsmallest;
      function Heap3(cmp) {
        this.cmp = cmp != null ? cmp : defaultCmp;
        this.nodes = [];
      }
      Heap3.prototype.push = function(x2) {
        return heappush(this.nodes, x2, this.cmp);
      };
      Heap3.prototype.pop = function() {
        return heappop(this.nodes, this.cmp);
      };
      Heap3.prototype.peek = function() {
        return this.nodes[0];
      };
      Heap3.prototype.contains = function(x2) {
        return this.nodes.indexOf(x2) !== -1;
      };
      Heap3.prototype.replace = function(x2) {
        return heapreplace(this.nodes, x2, this.cmp);
      };
      Heap3.prototype.pushpop = function(x2) {
        return heappushpop(this.nodes, x2, this.cmp);
      };
      Heap3.prototype.heapify = function() {
        return heapify(this.nodes, this.cmp);
      };
      Heap3.prototype.updateItem = function(x2) {
        return updateItem(this.nodes, x2, this.cmp);
      };
      Heap3.prototype.clear = function() {
        return this.nodes = [];
      };
      Heap3.prototype.empty = function() {
        return this.nodes.length === 0;
      };
      Heap3.prototype.size = function() {
        return this.nodes.length;
      };
      Heap3.prototype.clone = function() {
        var heap2;
        heap2 = new Heap3();
        heap2.nodes = this.nodes.slice(0);
        return heap2;
      };
      Heap3.prototype.toArray = function() {
        return this.nodes.slice(0);
      };
      Heap3.prototype.insert = Heap3.prototype.push;
      Heap3.prototype.top = Heap3.prototype.peek;
      Heap3.prototype.front = Heap3.prototype.peek;
      Heap3.prototype.has = Heap3.prototype.contains;
      Heap3.prototype.copy = Heap3.prototype.clone;
      return Heap3;
    }();
    (function(root2, factory) {
      {
        return module.exports = factory();
      }
    })(this, function() {
      return Heap2;
    });
  }).call(commonjsGlobal);
})(heap$1);
var heapExports = heap$1.exports;
var heap = heapExports;
var isArray$4 = Array.isArray;
var isArray_1 = isArray$4;
var isArray$3 = isArray_1, isSymbol$3 = isSymbol_1;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey$1(value, object3) {
  if (isArray$3(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$3(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object(object3);
}
var _isKey = isKey$1;
var baseGetTag = _baseGetTag, isObject$2 = isObject_1;
var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$1(value) {
  if (!isObject$2(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction$1;
var root$1 = _root;
var coreJsData$1 = root$1["__core-js_shared__"];
var _coreJsData = coreJsData$1;
var coreJsData = _coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$1(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked$1;
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource$1(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
var _toSource = toSource$1;
var isFunction = isFunction_1, isMasked = _isMasked, isObject$1 = isObject_1, toSource = _toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$3 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$4).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative$1(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
var _baseIsNative = baseIsNative$1;
function getValue$2(object3, key) {
  return object3 == null ? void 0 : object3[key];
}
var _getValue = getValue$2;
var baseIsNative = _baseIsNative, getValue$1 = _getValue;
function getNative$3(object3, key) {
  var value = getValue$1(object3, key);
  return baseIsNative(value) ? value : void 0;
}
var _getNative = getNative$3;
var getNative$2 = _getNative;
var nativeCreate$4 = getNative$2(Object, "create");
var _nativeCreate = nativeCreate$4;
var nativeCreate$3 = _nativeCreate;
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}
var _hashClear = hashClear$1;
function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete$1;
var nativeCreate$2 = _nativeCreate;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
var objectProto$2 = Object.prototype;
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
function hashGet$1(key) {
  var data4 = this.__data__;
  if (nativeCreate$2) {
    var result = data4[key];
    return result === HASH_UNDEFINED$1 ? void 0 : result;
  }
  return hasOwnProperty$3.call(data4, key) ? data4[key] : void 0;
}
var _hashGet = hashGet$1;
var nativeCreate$1 = _nativeCreate;
var objectProto$1 = Object.prototype;
var hasOwnProperty$2 = objectProto$1.hasOwnProperty;
function hashHas$1(key) {
  var data4 = this.__data__;
  return nativeCreate$1 ? data4[key] !== void 0 : hasOwnProperty$2.call(data4, key);
}
var _hashHas = hashHas$1;
var nativeCreate = _nativeCreate;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function hashSet$1(key, value) {
  var data4 = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data4[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
  return this;
}
var _hashSet = hashSet$1;
var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
function Hash$1(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash$1.prototype.clear = hashClear;
Hash$1.prototype["delete"] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;
var _Hash = Hash$1;
function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear$1;
function eq$2(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_1 = eq$2;
var eq$1 = eq_1;
function assocIndexOf$4(array3, key) {
  var length = array3.length;
  while (length--) {
    if (eq$1(array3[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf$4;
var assocIndexOf$3 = _assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete$1(key) {
  var data4 = this.__data__, index = assocIndexOf$3(data4, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data4.length - 1;
  if (index == lastIndex) {
    data4.pop();
  } else {
    splice.call(data4, index, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete$1;
var assocIndexOf$2 = _assocIndexOf;
function listCacheGet$1(key) {
  var data4 = this.__data__, index = assocIndexOf$2(data4, key);
  return index < 0 ? void 0 : data4[index][1];
}
var _listCacheGet = listCacheGet$1;
var assocIndexOf$1 = _assocIndexOf;
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
var _listCacheHas = listCacheHas$1;
var assocIndexOf = _assocIndexOf;
function listCacheSet$1(key, value) {
  var data4 = this.__data__, index = assocIndexOf(data4, key);
  if (index < 0) {
    ++this.size;
    data4.push([key, value]);
  } else {
    data4[index][1] = value;
  }
  return this;
}
var _listCacheSet = listCacheSet$1;
var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
function ListCache$1(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache$1.prototype.clear = listCacheClear;
ListCache$1.prototype["delete"] = listCacheDelete;
ListCache$1.prototype.get = listCacheGet;
ListCache$1.prototype.has = listCacheHas;
ListCache$1.prototype.set = listCacheSet;
var _ListCache = ListCache$1;
var getNative$1 = _getNative, root = _root;
var Map$3 = getNative$1(root, "Map");
var _Map = Map$3;
var Hash = _Hash, ListCache = _ListCache, Map$2 = _Map;
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$2 || ListCache)(),
    "string": new Hash()
  };
}
var _mapCacheClear = mapCacheClear$1;
function isKeyable$1(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var _isKeyable = isKeyable$1;
var isKeyable = _isKeyable;
function getMapData$4(map2, key) {
  var data4 = map2.__data__;
  return isKeyable(key) ? data4[typeof key == "string" ? "string" : "hash"] : data4.map;
}
var _getMapData = getMapData$4;
var getMapData$3 = _getMapData;
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete$1;
var getMapData$2 = _getMapData;
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}
var _mapCacheGet = mapCacheGet$1;
var getMapData$1 = _getMapData;
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
var _mapCacheHas = mapCacheHas$1;
var getMapData = _getMapData;
function mapCacheSet$1(key, value) {
  var data4 = getMapData(this, key), size3 = data4.size;
  data4.set(key, value);
  this.size += data4.size == size3 ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet$1;
var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
function MapCache$1(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache$1.prototype.clear = mapCacheClear;
MapCache$1.prototype["delete"] = mapCacheDelete;
MapCache$1.prototype.get = mapCacheGet;
MapCache$1.prototype.has = mapCacheHas;
MapCache$1.prototype.set = mapCacheSet;
var _MapCache = MapCache$1;
var MapCache = _MapCache;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize$2(func, resolver3) {
  if (typeof func != "function" || resolver3 != null && typeof resolver3 != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver3 ? resolver3.apply(this, args) : args[0], cache3 = memoized.cache;
    if (cache3.has(key)) {
      return cache3.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache3.set(key, result) || cache3;
    return result;
  };
  memoized.cache = new (memoize$2.Cache || MapCache)();
  return memoized;
}
memoize$2.Cache = MapCache;
var memoize_1 = memoize$2;
var memoize$1 = memoize_1;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped$1(func) {
  var result = memoize$1(func, function(key) {
    if (cache3.size === MAX_MEMOIZE_SIZE) {
      cache3.clear();
    }
    return key;
  });
  var cache3 = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped$1;
var memoizeCapped = _memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath$2 = memoizeCapped(function(string3) {
  var result = [];
  if (string3.charCodeAt(0) === 46) {
    result.push("");
  }
  string3.replace(rePropName, function(match2, number3, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
  });
  return result;
});
var _stringToPath = stringToPath$2;
function arrayMap$2(array3, iteratee) {
  var index = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array3[index], index, array3);
  }
  return result;
}
var _arrayMap = arrayMap$2;
var Symbol$1 = _Symbol, arrayMap$1 = _arrayMap, isArray$2 = isArray_1, isSymbol$2 = isSymbol_1;
var INFINITY$1 = 1 / 0;
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString$1(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray$2(value)) {
    return arrayMap$1(value, baseToString$1) + "";
  }
  if (isSymbol$2(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
var _baseToString = baseToString$1;
var baseToString = _baseToString;
function toString$3(value) {
  return value == null ? "" : baseToString(value);
}
var toString_1 = toString$3;
var isArray$1 = isArray_1, isKey = _isKey, stringToPath$1 = _stringToPath, toString$2 = toString_1;
function castPath$2(value, object3) {
  if (isArray$1(value)) {
    return value;
  }
  return isKey(value, object3) ? [value] : stringToPath$1(toString$2(value));
}
var _castPath = castPath$2;
var isSymbol$1 = isSymbol_1;
var INFINITY = 1 / 0;
function toKey$3(value) {
  if (typeof value == "string" || isSymbol$1(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var _toKey = toKey$3;
var castPath$1 = _castPath, toKey$2 = _toKey;
function baseGet$1(object3, path) {
  path = castPath$1(path, object3);
  var index = 0, length = path.length;
  while (object3 != null && index < length) {
    object3 = object3[toKey$2(path[index++])];
  }
  return index && index == length ? object3 : void 0;
}
var _baseGet = baseGet$1;
var baseGet = _baseGet;
function get$1(object3, path, defaultValue) {
  var result = object3 == null ? void 0 : baseGet(object3, path);
  return result === void 0 ? defaultValue : result;
}
var get_1 = get$1;
var getNative = _getNative;
var defineProperty$1 = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e2) {
  }
}();
var _defineProperty$1 = defineProperty$1;
var defineProperty = _defineProperty$1;
function baseAssignValue$1(object3, key, value) {
  if (key == "__proto__" && defineProperty) {
    defineProperty(object3, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object3[key] = value;
  }
}
var _baseAssignValue = baseAssignValue$1;
var baseAssignValue = _baseAssignValue, eq = eq_1;
var objectProto = Object.prototype;
var hasOwnProperty$1 = objectProto.hasOwnProperty;
function assignValue$1(object3, key, value) {
  var objValue = object3[key];
  if (!(hasOwnProperty$1.call(object3, key) && eq(objValue, value)) || value === void 0 && !(key in object3)) {
    baseAssignValue(object3, key, value);
  }
}
var _assignValue = assignValue$1;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex$1(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var _isIndex = isIndex$1;
var assignValue = _assignValue, castPath = _castPath, isIndex = _isIndex, isObject = isObject_1, toKey$1 = _toKey;
function baseSet$1(object3, path, value, customizer) {
  if (!isObject(object3)) {
    return object3;
  }
  path = castPath(path, object3);
  var index = -1, length = path.length, lastIndex = length - 1, nested = object3;
  while (nested != null && ++index < length) {
    var key = toKey$1(path[index]), newValue = value;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object3;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object3;
}
var _baseSet = baseSet$1;
var baseSet = _baseSet;
function set$1(object3, path, value) {
  return object3 == null ? object3 : baseSet(object3, path, value);
}
var set_1 = set$1;
function copyArray$2(source, array3) {
  var index = -1, length = source.length;
  array3 || (array3 = Array(length));
  while (++index < length) {
    array3[index] = source[index];
  }
  return array3;
}
var _copyArray = copyArray$2;
var arrayMap = _arrayMap, copyArray$1 = _copyArray, isArray = isArray_1, isSymbol = isSymbol_1, stringToPath = _stringToPath, toKey = _toKey, toString$1 = toString_1;
function toPath$1(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray$1(stringToPath(toString$1(value)));
}
var toPath_1 = toPath$1;
var debounce = debounce_1$1;
var Heap = heap;
var get = get_1;
var set = set_1;
var toPath = toPath_1;
function _interopDefaultLegacy(e2) {
  return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { "default": e2 };
}
var debounce__default = /* @__PURE__ */ _interopDefaultLegacy(debounce);
var Heap__default = /* @__PURE__ */ _interopDefaultLegacy(Heap);
var get__default = /* @__PURE__ */ _interopDefaultLegacy(get);
var set__default = /* @__PURE__ */ _interopDefaultLegacy(set);
var toPath__default = /* @__PURE__ */ _interopDefaultLegacy(toPath);
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var window$1 = typeof window === "undefined" ? null : window;
var navigator$1 = window$1 ? window$1.navigator : null;
window$1 ? window$1.document : null;
var typeofstr = _typeof$1("");
var typeofobj = _typeof$1({});
var typeoffn = _typeof$1(function() {
});
var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof$1(HTMLElement);
var instanceStr = function instanceStr2(obj) {
  return obj && obj.instanceString && fn$6(obj.instanceString) ? obj.instanceString() : null;
};
var string = function string2(obj) {
  return obj != null && _typeof$1(obj) == typeofstr;
};
var fn$6 = function fn(obj) {
  return obj != null && _typeof$1(obj) === typeoffn;
};
var array = function array2(obj) {
  return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);
};
var plainObject = function plainObject2(obj) {
  return obj != null && _typeof$1(obj) === typeofobj && !array(obj) && obj.constructor === Object;
};
var object$1 = function object(obj) {
  return obj != null && _typeof$1(obj) === typeofobj;
};
var number$1 = function number(obj) {
  return obj != null && _typeof$1(obj) === _typeof$1(1) && !isNaN(obj);
};
var integer = function integer2(obj) {
  return number$1(obj) && Math.floor(obj) === obj;
};
var htmlElement = function htmlElement2(obj) {
  if ("undefined" === typeofhtmlele) {
    return void 0;
  } else {
    return null != obj && obj instanceof HTMLElement;
  }
};
var elementOrCollection = function elementOrCollection2(obj) {
  return element(obj) || collection(obj);
};
var element = function element2(obj) {
  return instanceStr(obj) === "collection" && obj._private.single;
};
var collection = function collection2(obj) {
  return instanceStr(obj) === "collection" && !obj._private.single;
};
var core = function core2(obj) {
  return instanceStr(obj) === "core";
};
var stylesheet = function stylesheet2(obj) {
  return instanceStr(obj) === "stylesheet";
};
var event$1 = function event2(obj) {
  return instanceStr(obj) === "event";
};
var emptyString = function emptyString2(obj) {
  if (obj === void 0 || obj === null) {
    return true;
  } else if (obj === "" || obj.match(/^\s+$/)) {
    return true;
  }
  return false;
};
var domElement = function domElement2(obj) {
  if (typeof HTMLElement === "undefined") {
    return false;
  } else {
    return obj instanceof HTMLElement;
  }
};
var boundingBox = function boundingBox2(obj) {
  return plainObject(obj) && number$1(obj.x1) && number$1(obj.x2) && number$1(obj.y1) && number$1(obj.y2);
};
var promise = function promise2(obj) {
  return object$1(obj) && fn$6(obj.then);
};
var ms = function ms2() {
  return navigator$1 && navigator$1.userAgent.match(/msie|trident|edge/i);
};
var memoize = function memoize2(fn3, keyFn) {
  if (!keyFn) {
    keyFn = function keyFn2() {
      if (arguments.length === 1) {
        return arguments[0];
      } else if (arguments.length === 0) {
        return "undefined";
      }
      var args = [];
      for (var i2 = 0; i2 < arguments.length; i2++) {
        args.push(arguments[i2]);
      }
      return args.join("$");
    };
  }
  var memoizedFn = function memoizedFn2() {
    var self2 = this;
    var args = arguments;
    var ret;
    var k2 = keyFn.apply(self2, args);
    var cache3 = memoizedFn2.cache;
    if (!(ret = cache3[k2])) {
      ret = cache3[k2] = fn3.apply(self2, args);
    }
    return ret;
  };
  memoizedFn.cache = {};
  return memoizedFn;
};
var camel2dash = memoize(function(str) {
  return str.replace(/([A-Z])/g, function(v2) {
    return "-" + v2.toLowerCase();
  });
});
var dash2camel = memoize(function(str) {
  return str.replace(/(-\w)/g, function(v2) {
    return v2[1].toUpperCase();
  });
});
var prependCamel = memoize(function(prefix, str) {
  return prefix + str[0].toUpperCase() + str.substring(1);
}, function(prefix, str) {
  return prefix + "$" + str;
});
var capitalize = function capitalize2(str) {
  if (emptyString(str)) {
    return str;
  }
  return str.charAt(0).toUpperCase() + str.substring(1);
};
var number2 = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";
var rgba = "rgb[a]?\\((" + number2 + "[%]?)\\s*,\\s*(" + number2 + "[%]?)\\s*,\\s*(" + number2 + "[%]?)(?:\\s*,\\s*(" + number2 + "))?\\)";
var rgbaNoBackRefs = "rgb[a]?\\((?:" + number2 + "[%]?)\\s*,\\s*(?:" + number2 + "[%]?)\\s*,\\s*(?:" + number2 + "[%]?)(?:\\s*,\\s*(?:" + number2 + "))?\\)";
var hsla = "hsl[a]?\\((" + number2 + ")\\s*,\\s*(" + number2 + "[%])\\s*,\\s*(" + number2 + "[%])(?:\\s*,\\s*(" + number2 + "))?\\)";
var hslaNoBackRefs = "hsl[a]?\\((?:" + number2 + ")\\s*,\\s*(?:" + number2 + "[%])\\s*,\\s*(?:" + number2 + "[%])(?:\\s*,\\s*(?:" + number2 + "))?\\)";
var hex3 = "\\#[0-9a-fA-F]{3}";
var hex6 = "\\#[0-9a-fA-F]{6}";
var ascending = function ascending2(a2, b2) {
  if (a2 < b2) {
    return -1;
  } else if (a2 > b2) {
    return 1;
  } else {
    return 0;
  }
};
var descending = function descending2(a2, b2) {
  return -1 * ascending(a2, b2);
};
var extend$1 = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
  var args = arguments;
  for (var i2 = 1; i2 < args.length; i2++) {
    var obj = args[i2];
    if (obj == null) {
      continue;
    }
    var keys = Object.keys(obj);
    for (var j2 = 0; j2 < keys.length; j2++) {
      var k2 = keys[j2];
      tgt[k2] = obj[k2];
    }
  }
  return tgt;
};
var hex2tuple = function hex2tuple2(hex) {
  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== "#") {
    return;
  }
  var shortHex = hex.length === 4;
  var r2, g2, b2;
  var base = 16;
  if (shortHex) {
    r2 = parseInt(hex[1] + hex[1], base);
    g2 = parseInt(hex[2] + hex[2], base);
    b2 = parseInt(hex[3] + hex[3], base);
  } else {
    r2 = parseInt(hex[1] + hex[2], base);
    g2 = parseInt(hex[3] + hex[4], base);
    b2 = parseInt(hex[5] + hex[6], base);
  }
  return [r2, g2, b2];
};
var hsl2tuple = function hsl2tuple2(hsl) {
  var ret;
  var h2, s2, l2, a2, r2, g2, b2;
  function hue2rgb(p3, q3, t3) {
    if (t3 < 0)
      t3 += 1;
    if (t3 > 1)
      t3 -= 1;
    if (t3 < 1 / 6)
      return p3 + (q3 - p3) * 6 * t3;
    if (t3 < 1 / 2)
      return q3;
    if (t3 < 2 / 3)
      return p3 + (q3 - p3) * (2 / 3 - t3) * 6;
    return p3;
  }
  var m2 = new RegExp("^" + hsla + "$").exec(hsl);
  if (m2) {
    h2 = parseInt(m2[1]);
    if (h2 < 0) {
      h2 = (360 - -1 * h2 % 360) % 360;
    } else if (h2 > 360) {
      h2 = h2 % 360;
    }
    h2 /= 360;
    s2 = parseFloat(m2[2]);
    if (s2 < 0 || s2 > 100) {
      return;
    }
    s2 = s2 / 100;
    l2 = parseFloat(m2[3]);
    if (l2 < 0 || l2 > 100) {
      return;
    }
    l2 = l2 / 100;
    a2 = m2[4];
    if (a2 !== void 0) {
      a2 = parseFloat(a2);
      if (a2 < 0 || a2 > 1) {
        return;
      }
    }
    if (s2 === 0) {
      r2 = g2 = b2 = Math.round(l2 * 255);
    } else {
      var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      var p2 = 2 * l2 - q2;
      r2 = Math.round(255 * hue2rgb(p2, q2, h2 + 1 / 3));
      g2 = Math.round(255 * hue2rgb(p2, q2, h2));
      b2 = Math.round(255 * hue2rgb(p2, q2, h2 - 1 / 3));
    }
    ret = [r2, g2, b2, a2];
  }
  return ret;
};
var rgb2tuple = function rgb2tuple2(rgb) {
  var ret;
  var m2 = new RegExp("^" + rgba + "$").exec(rgb);
  if (m2) {
    ret = [];
    var isPct = [];
    for (var i2 = 1; i2 <= 3; i2++) {
      var channel = m2[i2];
      if (channel[channel.length - 1] === "%") {
        isPct[i2] = true;
      }
      channel = parseFloat(channel);
      if (isPct[i2]) {
        channel = channel / 100 * 255;
      }
      if (channel < 0 || channel > 255) {
        return;
      }
      ret.push(Math.floor(channel));
    }
    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
    var allArePct = isPct[1] && isPct[2] && isPct[3];
    if (atLeastOneIsPct && !allArePct) {
      return;
    }
    var alpha = m2[4];
    if (alpha !== void 0) {
      alpha = parseFloat(alpha);
      if (alpha < 0 || alpha > 1) {
        return;
      }
      ret.push(alpha);
    }
  }
  return ret;
};
var colorname2tuple = function colorname2tuple2(color) {
  return colors[color.toLowerCase()];
};
var color2tuple = function color2tuple2(color) {
  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
};
var colors = {
  // special colour names
  transparent: [0, 0, 0, 0],
  // NB alpha === 0
  // regular colours
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var setMap = function setMap2(options2) {
  var obj = options2.map;
  var keys = options2.keys;
  var l2 = keys.length;
  for (var i2 = 0; i2 < l2; i2++) {
    var key = keys[i2];
    if (plainObject(key)) {
      throw Error("Tried to set map with object key");
    }
    if (i2 < keys.length - 1) {
      if (obj[key] == null) {
        obj[key] = {};
      }
      obj = obj[key];
    } else {
      obj[key] = options2.value;
    }
  }
};
var getMap = function getMap2(options2) {
  var obj = options2.map;
  var keys = options2.keys;
  var l2 = keys.length;
  for (var i2 = 0; i2 < l2; i2++) {
    var key = keys[i2];
    if (plainObject(key)) {
      throw Error("Tried to get map with object key");
    }
    obj = obj[key];
    if (obj == null) {
      return obj;
    }
  }
  return obj;
};
var performance = window$1 ? window$1.performance : null;
var pnow = performance && performance.now ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
var raf = function() {
  if (window$1) {
    if (window$1.requestAnimationFrame) {
      return function(fn3) {
        window$1.requestAnimationFrame(fn3);
      };
    } else if (window$1.mozRequestAnimationFrame) {
      return function(fn3) {
        window$1.mozRequestAnimationFrame(fn3);
      };
    } else if (window$1.webkitRequestAnimationFrame) {
      return function(fn3) {
        window$1.webkitRequestAnimationFrame(fn3);
      };
    } else if (window$1.msRequestAnimationFrame) {
      return function(fn3) {
        window$1.msRequestAnimationFrame(fn3);
      };
    }
  }
  return function(fn3) {
    if (fn3) {
      setTimeout(function() {
        fn3(pnow());
      }, 1e3 / 60);
    }
  };
}();
var requestAnimationFrame$1 = function requestAnimationFrame2(fn3) {
  return raf(fn3);
};
var performanceNow = pnow;
var DEFAULT_HASH_SEED = 9261;
var K$2 = 65599;
var DEFAULT_HASH_SEED_ALT = 5381;
var hashIterableInts = function hashIterableInts2(iterator) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
  var hash = seed;
  var entry;
  for (; ; ) {
    entry = iterator.next();
    if (entry.done) {
      break;
    }
    hash = hash * K$2 + entry.value | 0;
  }
  return hash;
};
var hashInt = function hashInt2(num) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
  return seed * K$2 + num | 0;
};
var hashIntAlt = function hashIntAlt2(num) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED_ALT;
  return (seed << 5) + seed + num | 0;
};
var combineHashes = function combineHashes2(hash1, hash2) {
  return hash1 * 2097152 + hash2;
};
var combineHashesArray = function combineHashesArray2(hashes) {
  return hashes[0] * 2097152 + hashes[1];
};
var hashArrays = function hashArrays2(hashes1, hashes2) {
  return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
};
var hashIntsArray = function hashIntsArray2(ints, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i2 = 0;
  var length = ints.length;
  var iterator = {
    next: function next2() {
      if (i2 < length) {
        entry.value = ints[i2++];
      } else {
        entry.done = true;
      }
      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};
var hashString = function hashString2(str, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i2 = 0;
  var length = str.length;
  var iterator = {
    next: function next2() {
      if (i2 < length) {
        entry.value = str.charCodeAt(i2++);
      } else {
        entry.done = true;
      }
      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};
var hashStrings = function hashStrings2() {
  return hashStringsArray(arguments);
};
var hashStringsArray = function hashStringsArray2(strs) {
  var hash;
  for (var i2 = 0; i2 < strs.length; i2++) {
    var str = strs[i2];
    if (i2 === 0) {
      hash = hashString(str);
    } else {
      hash = hashString(str, hash);
    }
  }
  return hash;
};
var warningsEnabled = true;
var warnSupported = console.warn != null;
var traceSupported = console.trace != null;
var MAX_INT$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
var trueify = function trueify2() {
  return true;
};
var falsify = function falsify2() {
  return false;
};
var zeroify = function zeroify2() {
  return 0;
};
var noop$1 = function noop() {
};
var error = function error2(msg) {
  throw new Error(msg);
};
var warnings = function warnings2(enabled) {
  if (enabled !== void 0) {
    warningsEnabled = !!enabled;
  } else {
    return warningsEnabled;
  }
};
var warn = function warn2(msg) {
  if (!warnings()) {
    return;
  }
  if (warnSupported) {
    console.warn(msg);
  } else {
    console.log(msg);
    if (traceSupported) {
      console.trace();
    }
  }
};
var clone = function clone2(obj) {
  return extend$1({}, obj);
};
var copy = function copy2(obj) {
  if (obj == null) {
    return obj;
  }
  if (array(obj)) {
    return obj.slice();
  } else if (plainObject(obj)) {
    return clone(obj);
  } else {
    return obj;
  }
};
var copyArray = function copyArray2(arr) {
  return arr.slice();
};
var uuid = function uuid2(a2, b2) {
  for (
    // loop :)
    b2 = a2 = "";
    // b - result , a - numeric letiable
    a2++ < 36;
    //
    b2 += a2 * 51 & 52 ? (
      //  return a random number or 4
      (a2 ^ 15 ? (
        // generate a random number from 0 to 15
        8 ^ Math.random() * (a2 ^ 20 ? 16 : 4)
      ) : 4).toString(16)
    ) : "-"
  ) {
  }
  return b2;
};
var _staticEmptyObject = {};
var staticEmptyObject = function staticEmptyObject2() {
  return _staticEmptyObject;
};
var defaults$g = function defaults(_defaults) {
  var keys = Object.keys(_defaults);
  return function(opts) {
    var filledOpts = {};
    for (var i2 = 0; i2 < keys.length; i2++) {
      var key = keys[i2];
      var optVal = opts == null ? void 0 : opts[key];
      filledOpts[key] = optVal === void 0 ? _defaults[key] : optVal;
    }
    return filledOpts;
  };
};
var removeFromArray = function removeFromArray2(arr, ele, oneCopy) {
  for (var i2 = arr.length - 1; i2 >= 0; i2--) {
    if (arr[i2] === ele) {
      arr.splice(i2, 1);
      if (oneCopy) {
        break;
      }
    }
  }
};
var clearArray = function clearArray2(arr) {
  arr.splice(0, arr.length);
};
var push = function push2(arr, otherArr) {
  for (var i2 = 0; i2 < otherArr.length; i2++) {
    var el = otherArr[i2];
    arr.push(el);
  }
};
var getPrefixedProperty = function getPrefixedProperty2(obj, propName, prefix) {
  if (prefix) {
    propName = prependCamel(prefix, propName);
  }
  return obj[propName];
};
var setPrefixedProperty = function setPrefixedProperty2(obj, propName, prefix, value) {
  if (prefix) {
    propName = prependCamel(prefix, propName);
  }
  obj[propName] = value;
};
var ObjectMap = /* @__PURE__ */ function() {
  function ObjectMap2() {
    _classCallCheck(this, ObjectMap2);
    this._obj = {};
  }
  _createClass$1(ObjectMap2, [{
    key: "set",
    value: function set2(key, val) {
      this._obj[key] = val;
      return this;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this._obj[key] = void 0;
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = {};
    }
  }, {
    key: "has",
    value: function has(key) {
      return this._obj[key] !== void 0;
    }
  }, {
    key: "get",
    value: function get2(key) {
      return this._obj[key];
    }
  }]);
  return ObjectMap2;
}();
var Map$1 = typeof Map !== "undefined" ? Map : ObjectMap;
var undef = "undefined";
var ObjectSet = /* @__PURE__ */ function() {
  function ObjectSet2(arrayOrObjectSet) {
    _classCallCheck(this, ObjectSet2);
    this._obj = /* @__PURE__ */ Object.create(null);
    this.size = 0;
    if (arrayOrObjectSet != null) {
      var arr;
      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
        arr = arrayOrObjectSet.toArray();
      } else {
        arr = arrayOrObjectSet;
      }
      for (var i2 = 0; i2 < arr.length; i2++) {
        this.add(arr[i2]);
      }
    }
  }
  _createClass$1(ObjectSet2, [{
    key: "instanceString",
    value: function instanceString4() {
      return "set";
    }
  }, {
    key: "add",
    value: function add3(val) {
      var o2 = this._obj;
      if (o2[val] !== 1) {
        o2[val] = 1;
        this.size++;
      }
    }
  }, {
    key: "delete",
    value: function _delete(val) {
      var o2 = this._obj;
      if (o2[val] === 1) {
        o2[val] = 0;
        this.size--;
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = /* @__PURE__ */ Object.create(null);
    }
  }, {
    key: "has",
    value: function has(val) {
      return this._obj[val] === 1;
    }
  }, {
    key: "toArray",
    value: function toArray2() {
      var _this = this;
      return Object.keys(this._obj).filter(function(key) {
        return _this.has(key);
      });
    }
  }, {
    key: "forEach",
    value: function forEach2(callback, thisArg) {
      return this.toArray().forEach(callback, thisArg);
    }
  }]);
  return ObjectSet2;
}();
var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof$1(Set)) !== undef ? Set : ObjectSet;
var Element$1 = function Element2(cy2, params) {
  var restore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  if (cy2 === void 0 || params === void 0 || !core(cy2)) {
    error("An element must have a core reference and parameters set");
    return;
  }
  var group2 = params.group;
  if (group2 == null) {
    if (params.data && params.data.source != null && params.data.target != null) {
      group2 = "edges";
    } else {
      group2 = "nodes";
    }
  }
  if (group2 !== "nodes" && group2 !== "edges") {
    error("An element must be of type `nodes` or `edges`; you specified `" + group2 + "`");
    return;
  }
  this.length = 1;
  this[0] = this;
  var _p = this._private = {
    cy: cy2,
    single: true,
    // indicates this is an element
    data: params.data || {},
    // data object
    position: params.position || {
      x: 0,
      y: 0
    },
    // (x, y) position pair
    autoWidth: void 0,
    // width and height of nodes calculated by the renderer when set to special 'auto' value
    autoHeight: void 0,
    autoPadding: void 0,
    compoundBoundsClean: false,
    // whether the compound dimensions need to be recalculated the next time dimensions are read
    listeners: [],
    // array of bound listeners
    group: group2,
    // string; 'nodes' or 'edges'
    style: {},
    // properties as set by the style
    rstyle: {},
    // properties for style sent from the renderer to the core
    styleCxts: [],
    // applied style contexts from the styler
    styleKeys: {},
    // per-group keys of style property values
    removed: true,
    // whether it's inside the vis; true if removed (set true here since we call restore)
    selected: params.selected ? true : false,
    // whether it's selected
    selectable: params.selectable === void 0 ? true : params.selectable ? true : false,
    // whether it's selectable
    locked: params.locked ? true : false,
    // whether the element is locked (cannot be moved)
    grabbed: false,
    // whether the element is grabbed by the mouse; renderer sets this privately
    grabbable: params.grabbable === void 0 ? true : params.grabbable ? true : false,
    // whether the element can be grabbed
    pannable: params.pannable === void 0 ? group2 === "edges" ? true : false : params.pannable ? true : false,
    // whether the element has passthrough panning enabled
    active: false,
    // whether the element is active from user interaction
    classes: new Set$1(),
    // map ( className => true )
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    rscratch: {},
    // object in which the renderer can store information
    scratch: params.scratch || {},
    // scratch objects
    edges: [],
    // array of connected edges
    children: [],
    // array of children
    parent: params.parent && params.parent.isNode() ? params.parent : null,
    // parent ref
    traversalCache: {},
    // cache of output of traversal functions
    backgrounding: false,
    // whether background images are loading
    bbCache: null,
    // cache of the current bounding box
    bbCacheShift: {
      x: 0,
      y: 0
    },
    // shift applied to cached bb to be applied on next get
    bodyBounds: null,
    // bounds cache of element body, w/o overlay
    overlayBounds: null,
    // bounds cache of element body, including overlay
    labelBounds: {
      // bounds cache of labels
      all: null,
      source: null,
      target: null,
      main: null
    },
    arrowBounds: {
      // bounds cache of edge arrows
      source: null,
      target: null,
      "mid-source": null,
      "mid-target": null
    }
  };
  if (_p.position.x == null) {
    _p.position.x = 0;
  }
  if (_p.position.y == null) {
    _p.position.y = 0;
  }
  if (params.renderedPosition) {
    var rpos = params.renderedPosition;
    var pan2 = cy2.pan();
    var zoom2 = cy2.zoom();
    _p.position = {
      x: (rpos.x - pan2.x) / zoom2,
      y: (rpos.y - pan2.y) / zoom2
    };
  }
  var classes2 = [];
  if (array(params.classes)) {
    classes2 = params.classes;
  } else if (string(params.classes)) {
    classes2 = params.classes.split(/\s+/);
  }
  for (var i2 = 0, l2 = classes2.length; i2 < l2; i2++) {
    var cls = classes2[i2];
    if (!cls || cls === "") {
      continue;
    }
    _p.classes.add(cls);
  }
  this.createEmitter();
  var bypass = params.style || params.css;
  if (bypass) {
    warn("Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.");
    this.style(bypass);
  }
  if (restore === void 0 || restore) {
    this.restore();
  }
};
var defineSearch = function defineSearch2(params) {
  params = {
    bfs: params.bfs || !params.dfs,
    dfs: params.dfs || !params.bfs
  };
  return function searchFn(roots, fn3, directed) {
    var options2;
    if (plainObject(roots) && !elementOrCollection(roots)) {
      options2 = roots;
      roots = options2.roots || options2.root;
      fn3 = options2.visit;
      directed = options2.directed;
    }
    directed = arguments.length === 2 && !fn$6(fn3) ? fn3 : directed;
    fn3 = fn$6(fn3) ? fn3 : function() {
    };
    var cy2 = this._private.cy;
    var v2 = roots = string(roots) ? this.filter(roots) : roots;
    var Q2 = [];
    var connectedNodes = [];
    var connectedBy = {};
    var id2depth = {};
    var V2 = {};
    var j2 = 0;
    var found;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    for (var i2 = 0; i2 < v2.length; i2++) {
      var vi = v2[i2];
      var viId = vi.id();
      if (vi.isNode()) {
        Q2.unshift(vi);
        if (params.bfs) {
          V2[viId] = true;
          connectedNodes.push(vi);
        }
        id2depth[viId] = 0;
      }
    }
    var _loop = function _loop2() {
      var v3 = params.bfs ? Q2.shift() : Q2.pop();
      var vId = v3.id();
      if (params.dfs) {
        if (V2[vId]) {
          return "continue";
        }
        V2[vId] = true;
        connectedNodes.push(v3);
      }
      var depth = id2depth[vId];
      var prevEdge = connectedBy[vId];
      var src2 = prevEdge != null ? prevEdge.source() : null;
      var tgt = prevEdge != null ? prevEdge.target() : null;
      var prevNode = prevEdge == null ? void 0 : v3.same(src2) ? tgt[0] : src2[0];
      var ret = void 0;
      ret = fn3(v3, prevEdge, prevNode, j2++, depth);
      if (ret === true) {
        found = v3;
        return "break";
      }
      if (ret === false) {
        return "break";
      }
      var vwEdges = v3.connectedEdges().filter(function(e3) {
        return (!directed || e3.source().same(v3)) && edges3.has(e3);
      });
      for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
        var e2 = vwEdges[_i2];
        var w2 = e2.connectedNodes().filter(function(n2) {
          return !n2.same(v3) && nodes3.has(n2);
        });
        var wId = w2.id();
        if (w2.length !== 0 && !V2[wId]) {
          w2 = w2[0];
          Q2.push(w2);
          if (params.bfs) {
            V2[wId] = true;
            connectedNodes.push(w2);
          }
          connectedBy[wId] = e2;
          id2depth[wId] = id2depth[vId] + 1;
        }
      }
    };
    while (Q2.length !== 0) {
      var _ret = _loop();
      if (_ret === "continue")
        continue;
      if (_ret === "break")
        break;
    }
    var connectedEles = cy2.collection();
    for (var _i = 0; _i < connectedNodes.length; _i++) {
      var node = connectedNodes[_i];
      var edge = connectedBy[node.id()];
      if (edge != null) {
        connectedEles.push(edge);
      }
      connectedEles.push(node);
    }
    return {
      path: cy2.collection(connectedEles),
      found: cy2.collection(found)
    };
  };
};
var elesfn$v = {
  breadthFirstSearch: defineSearch({
    bfs: true
  }),
  depthFirstSearch: defineSearch({
    dfs: true
  })
};
elesfn$v.bfs = elesfn$v.breadthFirstSearch;
elesfn$v.dfs = elesfn$v.depthFirstSearch;
var dijkstraDefaults = defaults$g({
  root: null,
  weight: function weight(edge) {
    return 1;
  },
  directed: false
});
var elesfn$u = {
  dijkstra: function dijkstra(options2) {
    if (!plainObject(options2)) {
      var args = arguments;
      options2 = {
        root: args[0],
        weight: args[1],
        directed: args[2]
      };
    }
    var _dijkstraDefaults = dijkstraDefaults(options2), root2 = _dijkstraDefaults.root, weight8 = _dijkstraDefaults.weight, directed = _dijkstraDefaults.directed;
    var eles = this;
    var weightFn = weight8;
    var source = string(root2) ? this.filter(root2)[0] : root2[0];
    var dist4 = {};
    var prev = {};
    var knownDist = {};
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    edges3.unmergeBy(function(ele) {
      return ele.isLoop();
    });
    var getDist3 = function getDist4(node2) {
      return dist4[node2.id()];
    };
    var setDist = function setDist2(node2, d2) {
      dist4[node2.id()] = d2;
      Q2.updateItem(node2);
    };
    var Q2 = new Heap__default["default"](function(a2, b2) {
      return getDist3(a2) - getDist3(b2);
    });
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var node = nodes3[i2];
      dist4[node.id()] = node.same(source) ? 0 : Infinity;
      Q2.push(node);
    }
    var distBetween = function distBetween2(u3, v3) {
      var uvs = (directed ? u3.edgesTo(v3) : u3.edgesWith(v3)).intersect(edges3);
      var smallestDistance = Infinity;
      var smallestEdge;
      for (var _i = 0; _i < uvs.length; _i++) {
        var edge = uvs[_i];
        var _weight = weightFn(edge);
        if (_weight < smallestDistance || !smallestEdge) {
          smallestDistance = _weight;
          smallestEdge = edge;
        }
      }
      return {
        edge: smallestEdge,
        dist: smallestDistance
      };
    };
    while (Q2.size() > 0) {
      var u2 = Q2.pop();
      var smalletsDist = getDist3(u2);
      var uid = u2.id();
      knownDist[uid] = smalletsDist;
      if (smalletsDist === Infinity) {
        continue;
      }
      var neighbors = u2.neighborhood().intersect(nodes3);
      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
        var v2 = neighbors[_i2];
        var vid = v2.id();
        var vDist = distBetween(u2, v2);
        var alt = smalletsDist + vDist.dist;
        if (alt < getDist3(v2)) {
          setDist(v2, alt);
          prev[vid] = {
            node: u2,
            edge: vDist.edge
          };
        }
      }
    }
    return {
      distanceTo: function distanceTo(node2) {
        var target = string(node2) ? nodes3.filter(node2)[0] : node2[0];
        return knownDist[target.id()];
      },
      pathTo: function pathTo(node2) {
        var target = string(node2) ? nodes3.filter(node2)[0] : node2[0];
        var S2 = [];
        var u3 = target;
        var uid2 = u3.id();
        if (target.length > 0) {
          S2.unshift(target);
          while (prev[uid2]) {
            var p2 = prev[uid2];
            S2.unshift(p2.edge);
            S2.unshift(p2.node);
            u3 = p2.node;
            uid2 = u3.id();
          }
        }
        return eles.spawn(S2);
      }
    };
  }
};
var elesfn$t = {
  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
  // implemented from pseudocode from wikipedia
  kruskal: function kruskal(weightFn) {
    weightFn = weightFn || function(edge2) {
      return 1;
    };
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var numNodes = nodes3.length;
    var forest = new Array(numNodes);
    var A2 = nodes3;
    var findSetIndex = function findSetIndex2(ele) {
      for (var i3 = 0; i3 < forest.length; i3++) {
        var eles = forest[i3];
        if (eles.has(ele)) {
          return i3;
        }
      }
    };
    for (var i2 = 0; i2 < numNodes; i2++) {
      forest[i2] = this.spawn(nodes3[i2]);
    }
    var S2 = edges3.sort(function(a2, b2) {
      return weightFn(a2) - weightFn(b2);
    });
    for (var _i = 0; _i < S2.length; _i++) {
      var edge = S2[_i];
      var u2 = edge.source()[0];
      var v2 = edge.target()[0];
      var setUIndex = findSetIndex(u2);
      var setVIndex = findSetIndex(v2);
      var setU = forest[setUIndex];
      var setV = forest[setVIndex];
      if (setUIndex !== setVIndex) {
        A2.merge(edge);
        setU.merge(setV);
        forest.splice(setVIndex, 1);
      }
    }
    return A2;
  }
};
var aStarDefaults = defaults$g({
  root: null,
  goal: null,
  weight: function weight2(edge) {
    return 1;
  },
  heuristic: function heuristic(edge) {
    return 0;
  },
  directed: false
});
var elesfn$s = {
  // Implemented from pseudocode from wikipedia
  aStar: function aStar(options2) {
    var cy2 = this.cy();
    var _aStarDefaults = aStarDefaults(options2), root2 = _aStarDefaults.root, goal = _aStarDefaults.goal, heuristic2 = _aStarDefaults.heuristic, directed = _aStarDefaults.directed, weight8 = _aStarDefaults.weight;
    root2 = cy2.collection(root2)[0];
    goal = cy2.collection(goal)[0];
    var sid = root2.id();
    var tid = goal.id();
    var gScore = {};
    var fScore = {};
    var closedSetIds = {};
    var openSet = new Heap__default["default"](function(a2, b2) {
      return fScore[a2.id()] - fScore[b2.id()];
    });
    var openSetIds = new Set$1();
    var cameFrom = {};
    var cameFromEdge = {};
    var addToOpenSet = function addToOpenSet2(ele, id2) {
      openSet.push(ele);
      openSetIds.add(id2);
    };
    var cMin, cMinId;
    var popFromOpenSet = function popFromOpenSet2() {
      cMin = openSet.pop();
      cMinId = cMin.id();
      openSetIds["delete"](cMinId);
    };
    var isInOpenSet = function isInOpenSet2(id2) {
      return openSetIds.has(id2);
    };
    addToOpenSet(root2, sid);
    gScore[sid] = 0;
    fScore[sid] = heuristic2(root2);
    var steps = 0;
    while (openSet.size() > 0) {
      popFromOpenSet();
      steps++;
      if (cMinId === tid) {
        var path = [];
        var pathNode = goal;
        var pathNodeId = tid;
        var pathEdge = cameFromEdge[pathNodeId];
        for (; ; ) {
          path.unshift(pathNode);
          if (pathEdge != null) {
            path.unshift(pathEdge);
          }
          pathNode = cameFrom[pathNodeId];
          if (pathNode == null) {
            break;
          }
          pathNodeId = pathNode.id();
          pathEdge = cameFromEdge[pathNodeId];
        }
        return {
          found: true,
          distance: gScore[cMinId],
          path: this.spawn(path),
          steps
        };
      }
      closedSetIds[cMinId] = true;
      var vwEdges = cMin._private.edges;
      for (var i2 = 0; i2 < vwEdges.length; i2++) {
        var e2 = vwEdges[i2];
        if (!this.hasElementWithId(e2.id())) {
          continue;
        }
        if (directed && e2.data("source") !== cMinId) {
          continue;
        }
        var wSrc = e2.source();
        var wTgt = e2.target();
        var w2 = wSrc.id() !== cMinId ? wSrc : wTgt;
        var wid = w2.id();
        if (!this.hasElementWithId(wid)) {
          continue;
        }
        if (closedSetIds[wid]) {
          continue;
        }
        var tempScore = gScore[cMinId] + weight8(e2);
        if (!isInOpenSet(wid)) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic2(w2);
          addToOpenSet(w2, wid);
          cameFrom[wid] = cMin;
          cameFromEdge[wid] = e2;
          continue;
        }
        if (tempScore < gScore[wid]) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic2(w2);
          cameFrom[wid] = cMin;
          cameFromEdge[wid] = e2;
        }
      }
    }
    return {
      found: false,
      distance: void 0,
      path: void 0,
      steps
    };
  }
};
var floydWarshallDefaults = defaults$g({
  weight: function weight3(edge) {
    return 1;
  },
  directed: false
});
var elesfn$r = {
  // Implemented from pseudocode from wikipedia
  floydWarshall: function floydWarshall(options2) {
    var cy2 = this.cy();
    var _floydWarshallDefault = floydWarshallDefaults(options2), weight8 = _floydWarshallDefault.weight, directed = _floydWarshallDefault.directed;
    var weightFn = weight8;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var N2 = nodes3.length;
    var Nsq = N2 * N2;
    var indexOf = function indexOf2(node) {
      return nodes3.indexOf(node);
    };
    var atIndex = function atIndex2(i3) {
      return nodes3[i3];
    };
    var dist4 = new Array(Nsq);
    for (var n2 = 0; n2 < Nsq; n2++) {
      var j2 = n2 % N2;
      var i2 = (n2 - j2) / N2;
      if (i2 === j2) {
        dist4[n2] = 0;
      } else {
        dist4[n2] = Infinity;
      }
    }
    var next2 = new Array(Nsq);
    var edgeNext = new Array(Nsq);
    for (var _i = 0; _i < edges3.length; _i++) {
      var edge = edges3[_i];
      var src2 = edge.source()[0];
      var tgt = edge.target()[0];
      if (src2 === tgt) {
        continue;
      }
      var s2 = indexOf(src2);
      var t3 = indexOf(tgt);
      var st2 = s2 * N2 + t3;
      var _weight = weightFn(edge);
      if (dist4[st2] > _weight) {
        dist4[st2] = _weight;
        next2[st2] = t3;
        edgeNext[st2] = edge;
      }
      if (!directed) {
        var ts = t3 * N2 + s2;
        if (!directed && dist4[ts] > _weight) {
          dist4[ts] = _weight;
          next2[ts] = s2;
          edgeNext[ts] = edge;
        }
      }
    }
    for (var k2 = 0; k2 < N2; k2++) {
      for (var _i2 = 0; _i2 < N2; _i2++) {
        var ik = _i2 * N2 + k2;
        for (var _j = 0; _j < N2; _j++) {
          var ij = _i2 * N2 + _j;
          var kj = k2 * N2 + _j;
          if (dist4[ik] + dist4[kj] < dist4[ij]) {
            dist4[ij] = dist4[ik] + dist4[kj];
            next2[ij] = next2[ik];
          }
        }
      }
    }
    var getArgEle = function getArgEle2(ele) {
      return (string(ele) ? cy2.filter(ele) : ele)[0];
    };
    var indexOfArgEle = function indexOfArgEle2(ele) {
      return indexOf(getArgEle(ele));
    };
    var res = {
      distance: function distance(from, to) {
        var i3 = indexOfArgEle(from);
        var j3 = indexOfArgEle(to);
        return dist4[i3 * N2 + j3];
      },
      path: function path(from, to) {
        var i3 = indexOfArgEle(from);
        var j3 = indexOfArgEle(to);
        var fromNode = atIndex(i3);
        if (i3 === j3) {
          return fromNode.collection();
        }
        if (next2[i3 * N2 + j3] == null) {
          return cy2.collection();
        }
        var path2 = cy2.collection();
        var prev = i3;
        var edge2;
        path2.merge(fromNode);
        while (i3 !== j3) {
          prev = i3;
          i3 = next2[i3 * N2 + j3];
          edge2 = edgeNext[prev * N2 + i3];
          path2.merge(edge2);
          path2.merge(atIndex(i3));
        }
        return path2;
      }
    };
    return res;
  }
  // floydWarshall
};
var bellmanFordDefaults = defaults$g({
  weight: function weight4(edge) {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$q = {
  // Implemented from pseudocode from wikipedia
  bellmanFord: function bellmanFord(options2) {
    var _this = this;
    var _bellmanFordDefaults = bellmanFordDefaults(options2), weight8 = _bellmanFordDefaults.weight, directed = _bellmanFordDefaults.directed, root2 = _bellmanFordDefaults.root;
    var weightFn = weight8;
    var eles = this;
    var cy2 = this.cy();
    var _this$byGroup = this.byGroup(), edges3 = _this$byGroup.edges, nodes3 = _this$byGroup.nodes;
    var numNodes = nodes3.length;
    var infoMap = new Map$1();
    var hasNegativeWeightCycle = false;
    var negativeWeightCycles = [];
    root2 = cy2.collection(root2)[0];
    edges3.unmergeBy(function(edge2) {
      return edge2.isLoop();
    });
    var numEdges = edges3.length;
    var getInfo3 = function getInfo4(node2) {
      var obj = infoMap.get(node2.id());
      if (!obj) {
        obj = {};
        infoMap.set(node2.id(), obj);
      }
      return obj;
    };
    var getNodeFromTo = function getNodeFromTo2(to) {
      return (string(to) ? cy2.$(to) : to)[0];
    };
    var distanceTo = function distanceTo2(to) {
      return getInfo3(getNodeFromTo(to)).dist;
    };
    var pathTo = function pathTo2(to) {
      var thisStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : root2;
      var end = getNodeFromTo(to);
      var path = [];
      var node2 = end;
      for (; ; ) {
        if (node2 == null) {
          return _this.spawn();
        }
        var _getInfo = getInfo3(node2), edge2 = _getInfo.edge, pred = _getInfo.pred;
        path.unshift(node2[0]);
        if (node2.same(thisStart) && path.length > 0) {
          break;
        }
        if (edge2 != null) {
          path.unshift(edge2);
        }
        node2 = pred;
      }
      return eles.spawn(path);
    };
    for (var i2 = 0; i2 < numNodes; i2++) {
      var node = nodes3[i2];
      var info = getInfo3(node);
      if (node.same(root2)) {
        info.dist = 0;
      } else {
        info.dist = Infinity;
      }
      info.pred = null;
      info.edge = null;
    }
    var replacedEdge = false;
    var checkForEdgeReplacement = function checkForEdgeReplacement2(node1, node2, edge2, info1, info2, weight9) {
      var dist4 = info1.dist + weight9;
      if (dist4 < info2.dist && !edge2.same(info1.edge)) {
        info2.dist = dist4;
        info2.pred = node1;
        info2.edge = edge2;
        replacedEdge = true;
      }
    };
    for (var _i = 1; _i < numNodes; _i++) {
      replacedEdge = false;
      for (var e2 = 0; e2 < numEdges; e2++) {
        var edge = edges3[e2];
        var src2 = edge.source();
        var tgt = edge.target();
        var _weight = weightFn(edge);
        var srcInfo = getInfo3(src2);
        var tgtInfo = getInfo3(tgt);
        checkForEdgeReplacement(src2, tgt, edge, srcInfo, tgtInfo, _weight);
        if (!directed) {
          checkForEdgeReplacement(tgt, src2, edge, tgtInfo, srcInfo, _weight);
        }
      }
      if (!replacedEdge) {
        break;
      }
    }
    if (replacedEdge) {
      var negativeWeightCycleIds = [];
      for (var _e = 0; _e < numEdges; _e++) {
        var _edge = edges3[_e];
        var _src = _edge.source();
        var _tgt = _edge.target();
        var _weight2 = weightFn(_edge);
        var srcDist = getInfo3(_src).dist;
        var tgtDist = getInfo3(_tgt).dist;
        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
          if (!hasNegativeWeightCycle) {
            warn("Graph contains a negative weight cycle for Bellman-Ford");
            hasNegativeWeightCycle = true;
          }
          if (options2.findNegativeWeightCycles !== false) {
            var negativeNodes = [];
            if (srcDist + _weight2 < tgtDist) {
              negativeNodes.push(_src);
            }
            if (!directed && tgtDist + _weight2 < srcDist) {
              negativeNodes.push(_tgt);
            }
            var numNegativeNodes = negativeNodes.length;
            for (var n2 = 0; n2 < numNegativeNodes; n2++) {
              var start = negativeNodes[n2];
              var cycle = [start];
              cycle.push(getInfo3(start).edge);
              var _node = getInfo3(start).pred;
              while (cycle.indexOf(_node) === -1) {
                cycle.push(_node);
                cycle.push(getInfo3(_node).edge);
                _node = getInfo3(_node).pred;
              }
              cycle = cycle.slice(cycle.indexOf(_node));
              var smallestId = cycle[0].id();
              var smallestIndex = 0;
              for (var c2 = 2; c2 < cycle.length; c2 += 2) {
                if (cycle[c2].id() < smallestId) {
                  smallestId = cycle[c2].id();
                  smallestIndex = c2;
                }
              }
              cycle = cycle.slice(smallestIndex).concat(cycle.slice(0, smallestIndex));
              cycle.push(cycle[0]);
              var cycleId = cycle.map(function(el) {
                return el.id();
              }).join(",");
              if (negativeWeightCycleIds.indexOf(cycleId) === -1) {
                negativeWeightCycles.push(eles.spawn(cycle));
                negativeWeightCycleIds.push(cycleId);
              }
            }
          } else {
            break;
          }
        }
      }
    }
    return {
      distanceTo,
      pathTo,
      hasNegativeWeightCycle,
      negativeWeightCycles
    };
  }
  // bellmanFord
};
var sqrt2 = Math.sqrt(2);
var collapse = function collapse2(edgeIndex, nodeMap, remainingEdges) {
  if (remainingEdges.length === 0) {
    error("Karger-Stein must be run on a connected (sub)graph");
  }
  var edgeInfo = remainingEdges[edgeIndex];
  var sourceIn = edgeInfo[1];
  var targetIn = edgeInfo[2];
  var partition1 = nodeMap[sourceIn];
  var partition2 = nodeMap[targetIn];
  var newEdges = remainingEdges;
  for (var i2 = newEdges.length - 1; i2 >= 0; i2--) {
    var edge = newEdges[i2];
    var src2 = edge[1];
    var tgt = edge[2];
    if (nodeMap[src2] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src2] === partition2 && nodeMap[tgt] === partition1) {
      newEdges.splice(i2, 1);
    }
  }
  for (var _i = 0; _i < newEdges.length; _i++) {
    var _edge = newEdges[_i];
    if (_edge[1] === partition2) {
      newEdges[_i] = _edge.slice();
      newEdges[_i][1] = partition1;
    } else if (_edge[2] === partition2) {
      newEdges[_i] = _edge.slice();
      newEdges[_i][2] = partition1;
    }
  }
  for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
    if (nodeMap[_i2] === partition2) {
      nodeMap[_i2] = partition1;
    }
  }
  return newEdges;
};
var contractUntil = function contractUntil2(metaNodeMap, remainingEdges, size3, sizeLimit) {
  while (size3 > sizeLimit) {
    var edgeIndex = Math.floor(Math.random() * remainingEdges.length);
    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
    size3--;
  }
  return remainingEdges;
};
var elesfn$p = {
  // Computes the minimum cut of an undirected graph
  // Returns the correct answer with high probability
  kargerStein: function kargerStein() {
    var _this = this;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    edges3.unmergeBy(function(edge) {
      return edge.isLoop();
    });
    var numNodes = nodes3.length;
    var numEdges = edges3.length;
    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
    var stopSize = Math.floor(numNodes / sqrt2);
    if (numNodes < 2) {
      error("At least 2 nodes are required for Karger-Stein algorithm");
      return void 0;
    }
    var edgeIndexes = [];
    for (var i2 = 0; i2 < numEdges; i2++) {
      var e2 = edges3[i2];
      edgeIndexes.push([i2, nodes3.indexOf(e2.source()), nodes3.indexOf(e2.target())]);
    }
    var minCutSize = Infinity;
    var minCutEdgeIndexes = [];
    var minCutNodeMap = new Array(numNodes);
    var metaNodeMap = new Array(numNodes);
    var metaNodeMap2 = new Array(numNodes);
    var copyNodesMap = function copyNodesMap2(from, to) {
      for (var _i3 = 0; _i3 < numNodes; _i3++) {
        to[_i3] = from[_i3];
      }
    };
    for (var iter = 0; iter <= numIter; iter++) {
      for (var _i4 = 0; _i4 < numNodes; _i4++) {
        metaNodeMap[_i4] = _i4;
      }
      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
      var edgesState2 = edgesState.slice();
      copyNodesMap(metaNodeMap, metaNodeMap2);
      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2);
      if (res1.length <= res2.length && res1.length < minCutSize) {
        minCutSize = res1.length;
        minCutEdgeIndexes = res1;
        copyNodesMap(metaNodeMap, minCutNodeMap);
      } else if (res2.length <= res1.length && res2.length < minCutSize) {
        minCutSize = res2.length;
        minCutEdgeIndexes = res2;
        copyNodesMap(metaNodeMap2, minCutNodeMap);
      }
    }
    var cut = this.spawn(minCutEdgeIndexes.map(function(e3) {
      return edges3[e3[0]];
    }));
    var partition1 = this.spawn();
    var partition2 = this.spawn();
    var witnessNodePartition = minCutNodeMap[0];
    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
      var partitionId = minCutNodeMap[_i5];
      var node = nodes3[_i5];
      if (partitionId === witnessNodePartition) {
        partition1.merge(node);
      } else {
        partition2.merge(node);
      }
    }
    var constructComponent = function constructComponent2(subset) {
      var component2 = _this.spawn();
      subset.forEach(function(node2) {
        component2.merge(node2);
        node2.connectedEdges().forEach(function(edge) {
          if (_this.contains(edge) && !cut.contains(edge)) {
            component2.merge(edge);
          }
        });
      });
      return component2;
    };
    var components2 = [constructComponent(partition1), constructComponent(partition2)];
    var ret = {
      cut,
      components: components2,
      // n.b. partitions are included to be compatible with the old api spec
      // (could be removed in a future major version)
      partition1,
      partition2
    };
    return ret;
  }
};
var copyPosition = function copyPosition2(p2) {
  return {
    x: p2.x,
    y: p2.y
  };
};
var modelToRenderedPosition = function modelToRenderedPosition2(p2, zoom2, pan2) {
  return {
    x: p2.x * zoom2 + pan2.x,
    y: p2.y * zoom2 + pan2.y
  };
};
var renderedToModelPosition = function renderedToModelPosition2(p2, zoom2, pan2) {
  return {
    x: (p2.x - pan2.x) / zoom2,
    y: (p2.y - pan2.y) / zoom2
  };
};
var array2point = function array2point2(arr) {
  return {
    x: arr[0],
    y: arr[1]
  };
};
var min = function min2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var min4 = Infinity;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      min4 = Math.min(val, min4);
    }
  }
  return min4;
};
var max$1 = function max(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var max5 = -Infinity;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      max5 = Math.max(val, max5);
    }
  }
  return max5;
};
var mean = function mean2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var total = 0;
  var n2 = 0;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      total += val;
      n2++;
    }
  }
  return total / n2;
};
var median = function median2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var copy3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var sort2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var includeHoles = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  if (copy3) {
    arr = arr.slice(begin, end);
  } else {
    if (end < arr.length) {
      arr.splice(end, arr.length - end);
    }
    if (begin > 0) {
      arr.splice(0, begin);
    }
  }
  var off = 0;
  for (var i2 = arr.length - 1; i2 >= 0; i2--) {
    var v2 = arr[i2];
    if (includeHoles) {
      if (!isFinite(v2)) {
        arr[i2] = -Infinity;
        off++;
      }
    } else {
      arr.splice(i2, 1);
    }
  }
  if (sort2) {
    arr.sort(function(a2, b2) {
      return a2 - b2;
    });
  }
  var len = arr.length;
  var mid = Math.floor(len / 2);
  if (len % 2 !== 0) {
    return arr[mid + 1 + off];
  } else {
    return (arr[mid - 1 + off] + arr[mid + off]) / 2;
  }
};
var deg2rad = function deg2rad2(deg) {
  return Math.PI * deg / 180;
};
var getAngleFromDisp = function getAngleFromDisp2(dispX, dispY) {
  return Math.atan2(dispY, dispX) - Math.PI / 2;
};
var log2 = Math.log2 || function(n2) {
  return Math.log(n2) / Math.log(2);
};
var signum = function signum2(x2) {
  if (x2 > 0) {
    return 1;
  } else if (x2 < 0) {
    return -1;
  } else {
    return 0;
  }
};
var dist$2 = function dist(p1, p2) {
  return Math.sqrt(sqdist(p1, p2));
};
var sqdist = function sqdist2(p1, p2) {
  var dx = p2.x - p1.x;
  var dy = p2.y - p1.y;
  return dx * dx + dy * dy;
};
var inPlaceSumNormalize = function inPlaceSumNormalize2(v2) {
  var length = v2.length;
  var total = 0;
  for (var i2 = 0; i2 < length; i2++) {
    total += v2[i2];
  }
  for (var _i = 0; _i < length; _i++) {
    v2[_i] = v2[_i] / total;
  }
  return v2;
};
var qbezierAt = function qbezierAt2(p0, p1, p2, t3) {
  return (1 - t3) * (1 - t3) * p0 + 2 * (1 - t3) * t3 * p1 + t3 * t3 * p2;
};
var qbezierPtAt = function qbezierPtAt2(p0, p1, p2, t3) {
  return {
    x: qbezierAt(p0.x, p1.x, p2.x, t3),
    y: qbezierAt(p0.y, p1.y, p2.y, t3)
  };
};
var lineAt = function lineAt2(p0, p1, t3, d2) {
  var vec = {
    x: p1.x - p0.x,
    y: p1.y - p0.y
  };
  var vecDist = dist$2(p0, p1);
  var normVec = {
    x: vec.x / vecDist,
    y: vec.y / vecDist
  };
  t3 = t3 == null ? 0 : t3;
  d2 = d2 != null ? d2 : t3 * vecDist;
  return {
    x: p0.x + normVec.x * d2,
    y: p0.y + normVec.y * d2
  };
};
var bound = function bound2(min4, val, max5) {
  return Math.max(min4, Math.min(max5, val));
};
var makeBoundingBox = function makeBoundingBox2(bb) {
  if (bb == null) {
    return {
      x1: Infinity,
      y1: Infinity,
      x2: -Infinity,
      y2: -Infinity,
      w: 0,
      h: 0
    };
  } else if (bb.x1 != null && bb.y1 != null) {
    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x2,
        y2: bb.y2,
        w: bb.x2 - bb.x1,
        h: bb.y2 - bb.y1
      };
    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x1 + bb.w,
        y2: bb.y1 + bb.h,
        w: bb.w,
        h: bb.h
      };
    }
  }
};
var copyBoundingBox = function copyBoundingBox2(bb) {
  return {
    x1: bb.x1,
    x2: bb.x2,
    w: bb.w,
    y1: bb.y1,
    y2: bb.y2,
    h: bb.h
  };
};
var clearBoundingBox = function clearBoundingBox2(bb) {
  bb.x1 = Infinity;
  bb.y1 = Infinity;
  bb.x2 = -Infinity;
  bb.y2 = -Infinity;
  bb.w = 0;
  bb.h = 0;
};
var updateBoundingBox = function updateBoundingBox2(bb1, bb2) {
  bb1.x1 = Math.min(bb1.x1, bb2.x1);
  bb1.x2 = Math.max(bb1.x2, bb2.x2);
  bb1.w = bb1.x2 - bb1.x1;
  bb1.y1 = Math.min(bb1.y1, bb2.y1);
  bb1.y2 = Math.max(bb1.y2, bb2.y2);
  bb1.h = bb1.y2 - bb1.y1;
};
var expandBoundingBoxByPoint = function expandBoundingBoxByPoint2(bb, x2, y2) {
  bb.x1 = Math.min(bb.x1, x2);
  bb.x2 = Math.max(bb.x2, x2);
  bb.w = bb.x2 - bb.x1;
  bb.y1 = Math.min(bb.y1, y2);
  bb.y2 = Math.max(bb.y2, y2);
  bb.h = bb.y2 - bb.y1;
};
var expandBoundingBox = function expandBoundingBox2(bb) {
  var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  bb.x1 -= padding;
  bb.x2 += padding;
  bb.y1 -= padding;
  bb.y2 += padding;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;
  return bb;
};
var expandBoundingBoxSides = function expandBoundingBoxSides2(bb) {
  var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0];
  var top, right, bottom, left;
  if (padding.length === 1) {
    top = right = bottom = left = padding[0];
  } else if (padding.length === 2) {
    top = bottom = padding[0];
    left = right = padding[1];
  } else if (padding.length === 4) {
    var _padding = _slicedToArray(padding, 4);
    top = _padding[0];
    right = _padding[1];
    bottom = _padding[2];
    left = _padding[3];
  }
  bb.x1 -= left;
  bb.x2 += right;
  bb.y1 -= top;
  bb.y2 += bottom;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;
  return bb;
};
var assignBoundingBox = function assignBoundingBox2(bb1, bb2) {
  bb1.x1 = bb2.x1;
  bb1.y1 = bb2.y1;
  bb1.x2 = bb2.x2;
  bb1.y2 = bb2.y2;
  bb1.w = bb1.x2 - bb1.x1;
  bb1.h = bb1.y2 - bb1.y1;
};
var boundingBoxesIntersect = function boundingBoxesIntersect2(bb1, bb2) {
  if (bb1.x1 > bb2.x2) {
    return false;
  }
  if (bb2.x1 > bb1.x2) {
    return false;
  }
  if (bb1.x2 < bb2.x1) {
    return false;
  }
  if (bb2.x2 < bb1.x1) {
    return false;
  }
  if (bb1.y2 < bb2.y1) {
    return false;
  }
  if (bb2.y2 < bb1.y1) {
    return false;
  }
  if (bb1.y1 > bb2.y2) {
    return false;
  }
  if (bb2.y1 > bb1.y2) {
    return false;
  }
  return true;
};
var inBoundingBox = function inBoundingBox2(bb, x2, y2) {
  return bb.x1 <= x2 && x2 <= bb.x2 && bb.y1 <= y2 && y2 <= bb.y2;
};
var pointInBoundingBox = function pointInBoundingBox2(bb, pt2) {
  return inBoundingBox(bb, pt2.x, pt2.y);
};
var boundingBoxInBoundingBox = function boundingBoxInBoundingBox2(bb1, bb2) {
  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
};
var roundRectangleIntersectLine = function roundRectangleIntersectLine2(x2, y2, nodeX, nodeY, width2, height2, padding) {
  var cornerRadius = getRoundRectangleRadius(width2, height2);
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var straightLineIntersections;
  {
    var topStartX = nodeX - halfWidth + cornerRadius - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth - cornerRadius + padding;
    var topEndY = topStartY;
    straightLineIntersections = finiteLinesIntersect(x2, y2, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x2, y2, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;
    straightLineIntersections = finiteLinesIntersect(x2, y2, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x2, y2, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  var arcIntersections;
  {
    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x2, y2, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var topRightCenterX = nodeX + halfWidth - cornerRadius;
    var topRightCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x2, y2, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x2, y2, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x2, y2, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  return [];
};
var inLineVicinity = function inLineVicinity2(x2, y2, lx1, ly1, lx2, ly2, tolerance) {
  var t3 = tolerance;
  var x1 = Math.min(lx1, lx2);
  var x22 = Math.max(lx1, lx2);
  var y1 = Math.min(ly1, ly2);
  var y22 = Math.max(ly1, ly2);
  return x1 - t3 <= x2 && x2 <= x22 + t3 && y1 - t3 <= y2 && y2 <= y22 + t3;
};
var inBezierVicinity = function inBezierVicinity2(x2, y2, x1, y1, x22, y22, x3, y3, tolerance) {
  var bb = {
    x1: Math.min(x1, x3, x22) - tolerance,
    x2: Math.max(x1, x3, x22) + tolerance,
    y1: Math.min(y1, y3, y22) - tolerance,
    y2: Math.max(y1, y3, y22) + tolerance
  };
  if (x2 < bb.x1 || x2 > bb.x2 || y2 < bb.y1 || y2 > bb.y2) {
    return false;
  } else {
    return true;
  }
};
var solveQuadratic = function solveQuadratic2(a2, b2, c2, val) {
  c2 -= val;
  var r2 = b2 * b2 - 4 * a2 * c2;
  if (r2 < 0) {
    return [];
  }
  var sqrtR = Math.sqrt(r2);
  var denom = 2 * a2;
  var root1 = (-b2 + sqrtR) / denom;
  var root2 = (-b2 - sqrtR) / denom;
  return [root1, root2];
};
var solveCubic = function solveCubic2(a2, b2, c2, d2, result) {
  var epsilon2 = 1e-5;
  if (a2 === 0) {
    a2 = epsilon2;
  }
  b2 /= a2;
  c2 /= a2;
  d2 /= a2;
  var discriminant, q2, r2, dum1, s2, t3, term1, r13;
  q2 = (3 * c2 - b2 * b2) / 9;
  r2 = -(27 * d2) + b2 * (9 * c2 - 2 * (b2 * b2));
  r2 /= 54;
  discriminant = q2 * q2 * q2 + r2 * r2;
  result[1] = 0;
  term1 = b2 / 3;
  if (discriminant > 0) {
    s2 = r2 + Math.sqrt(discriminant);
    s2 = s2 < 0 ? -Math.pow(-s2, 1 / 3) : Math.pow(s2, 1 / 3);
    t3 = r2 - Math.sqrt(discriminant);
    t3 = t3 < 0 ? -Math.pow(-t3, 1 / 3) : Math.pow(t3, 1 / 3);
    result[0] = -term1 + s2 + t3;
    term1 += (s2 + t3) / 2;
    result[4] = result[2] = -term1;
    term1 = Math.sqrt(3) * (-t3 + s2) / 2;
    result[3] = term1;
    result[5] = -term1;
    return;
  }
  result[5] = result[3] = 0;
  if (discriminant === 0) {
    r13 = r2 < 0 ? -Math.pow(-r2, 1 / 3) : Math.pow(r2, 1 / 3);
    result[0] = -term1 + 2 * r13;
    result[4] = result[2] = -(r13 + term1);
    return;
  }
  q2 = -q2;
  dum1 = q2 * q2 * q2;
  dum1 = Math.acos(r2 / Math.sqrt(dum1));
  r13 = 2 * Math.sqrt(q2);
  result[0] = -term1 + r13 * Math.cos(dum1 / 3);
  result[2] = -term1 + r13 * Math.cos((dum1 + 2 * Math.PI) / 3);
  result[4] = -term1 + r13 * Math.cos((dum1 + 4 * Math.PI) / 3);
  return;
};
var sqdistToQuadraticBezier = function sqdistToQuadraticBezier2(x2, y2, x1, y1, x22, y22, x3, y3) {
  var a2 = 1 * x1 * x1 - 4 * x1 * x22 + 2 * x1 * x3 + 4 * x22 * x22 - 4 * x22 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y22 + 2 * y1 * y3 + 4 * y22 * y22 - 4 * y22 * y3 + y3 * y3;
  var b2 = 1 * 9 * x1 * x22 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x22 * x22 + 3 * x22 * x3 + 9 * y1 * y22 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y22 * y22 + 3 * y22 * y3;
  var c2 = 1 * 3 * x1 * x1 - 6 * x1 * x22 + x1 * x3 - x1 * x2 + 2 * x22 * x22 + 2 * x22 * x2 - x3 * x2 + 3 * y1 * y1 - 6 * y1 * y22 + y1 * y3 - y1 * y2 + 2 * y22 * y22 + 2 * y22 * y2 - y3 * y2;
  var d2 = 1 * x1 * x22 - x1 * x1 + x1 * x2 - x22 * x2 + y1 * y22 - y1 * y1 + y1 * y2 - y22 * y2;
  var roots = [];
  solveCubic(a2, b2, c2, d2, roots);
  var zeroThreshold = 1e-7;
  var params = [];
  for (var index = 0; index < 6; index += 2) {
    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1) {
      params.push(roots[index]);
    }
  }
  params.push(1);
  params.push(0);
  var minDistanceSquared = -1;
  var curX, curY, distSquared;
  for (var i2 = 0; i2 < params.length; i2++) {
    curX = Math.pow(1 - params[i2], 2) * x1 + 2 * (1 - params[i2]) * params[i2] * x22 + params[i2] * params[i2] * x3;
    curY = Math.pow(1 - params[i2], 2) * y1 + 2 * (1 - params[i2]) * params[i2] * y22 + params[i2] * params[i2] * y3;
    distSquared = Math.pow(curX - x2, 2) + Math.pow(curY - y2, 2);
    if (minDistanceSquared >= 0) {
      if (distSquared < minDistanceSquared) {
        minDistanceSquared = distSquared;
      }
    } else {
      minDistanceSquared = distSquared;
    }
  }
  return minDistanceSquared;
};
var sqdistToFiniteLine = function sqdistToFiniteLine2(x2, y2, x1, y1, x22, y22) {
  var offset = [x2 - x1, y2 - y1];
  var line = [x22 - x1, y22 - y1];
  var lineSq = line[0] * line[0] + line[1] * line[1];
  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
  var adjSq = dotProduct * dotProduct / lineSq;
  if (dotProduct < 0) {
    return hypSq;
  }
  if (adjSq > lineSq) {
    return (x2 - x22) * (x2 - x22) + (y2 - y22) * (y2 - y22);
  }
  return hypSq - adjSq;
};
var pointInsidePolygonPoints = function pointInsidePolygonPoints2(x2, y2, points) {
  var x1, y1, x22, y22;
  var y3;
  var up = 0;
  for (var i2 = 0; i2 < points.length / 2; i2++) {
    x1 = points[i2 * 2];
    y1 = points[i2 * 2 + 1];
    if (i2 + 1 < points.length / 2) {
      x22 = points[(i2 + 1) * 2];
      y22 = points[(i2 + 1) * 2 + 1];
    } else {
      x22 = points[(i2 + 1 - points.length / 2) * 2];
      y22 = points[(i2 + 1 - points.length / 2) * 2 + 1];
    }
    if (x1 == x2 && x22 == x2)
      ;
    else if (x1 >= x2 && x2 >= x22 || x1 <= x2 && x2 <= x22) {
      y3 = (x2 - x1) / (x22 - x1) * (y22 - y1) + y1;
      if (y3 > y2) {
        up++;
      }
    } else {
      continue;
    }
  }
  if (up % 2 === 0) {
    return false;
  } else {
    return true;
  }
};
var pointInsidePolygon = function pointInsidePolygon2(x2, y2, basePoints, centerX, centerY, width2, height2, direction, padding) {
  var transformedPoints = new Array(basePoints.length);
  var angle;
  if (direction[0] != null) {
    angle = Math.atan(direction[1] / direction[0]);
    if (direction[0] < 0) {
      angle = angle + Math.PI / 2;
    } else {
      angle = -angle - Math.PI / 2;
    }
  } else {
    angle = direction;
  }
  var cos2 = Math.cos(-angle);
  var sin2 = Math.sin(-angle);
  for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
    transformedPoints[i2 * 2] = width2 / 2 * (basePoints[i2 * 2] * cos2 - basePoints[i2 * 2 + 1] * sin2);
    transformedPoints[i2 * 2 + 1] = height2 / 2 * (basePoints[i2 * 2 + 1] * cos2 + basePoints[i2 * 2] * sin2);
    transformedPoints[i2 * 2] += centerX;
    transformedPoints[i2 * 2 + 1] += centerY;
  }
  var points;
  if (padding > 0) {
    var expandedLineSet = expandPolygon(transformedPoints, -padding);
    points = joinLines(expandedLineSet);
  } else {
    points = transformedPoints;
  }
  return pointInsidePolygonPoints(x2, y2, points);
};
var pointInsideRoundPolygon = function pointInsideRoundPolygon2(x2, y2, basePoints, centerX, centerY, width2, height2) {
  var cutPolygonPoints = new Array(basePoints.length);
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  var cornerRadius = getRoundPolygonRadius(width2, height2);
  var squaredCornerRadius = cornerRadius * cornerRadius;
  for (var i2 = 0; i2 < basePoints.length / 4; i2++) {
    var sourceUv = void 0, destUv = void 0;
    if (i2 === 0) {
      sourceUv = basePoints.length - 2;
    } else {
      sourceUv = i2 * 4 - 2;
    }
    destUv = i2 * 4 + 2;
    var px = centerX + halfW * basePoints[i2 * 4];
    var py = centerY + halfH * basePoints[i2 * 4 + 1];
    var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
    var cp0x = px - offset * basePoints[sourceUv];
    var cp0y = py - offset * basePoints[sourceUv + 1];
    var cp1x = px + offset * basePoints[destUv];
    var cp1y = py + offset * basePoints[destUv + 1];
    cutPolygonPoints[i2 * 4] = cp0x;
    cutPolygonPoints[i2 * 4 + 1] = cp0y;
    cutPolygonPoints[i2 * 4 + 2] = cp1x;
    cutPolygonPoints[i2 * 4 + 3] = cp1y;
    var orthx = basePoints[sourceUv + 1];
    var orthy = -basePoints[sourceUv];
    var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];
    if (cosAlpha < 0) {
      orthx *= -1;
      orthy *= -1;
    }
    var cx = cp0x + orthx * cornerRadius;
    var cy2 = cp0y + orthy * cornerRadius;
    var squaredDistance = Math.pow(cx - x2, 2) + Math.pow(cy2 - y2, 2);
    if (squaredDistance <= squaredCornerRadius) {
      return true;
    }
  }
  return pointInsidePolygonPoints(x2, y2, cutPolygonPoints);
};
var joinLines = function joinLines2(lineSet) {
  var vertices = new Array(lineSet.length / 2);
  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;
  for (var i2 = 0; i2 < lineSet.length / 4; i2++) {
    currentLineStartX = lineSet[i2 * 4];
    currentLineStartY = lineSet[i2 * 4 + 1];
    currentLineEndX = lineSet[i2 * 4 + 2];
    currentLineEndY = lineSet[i2 * 4 + 3];
    if (i2 < lineSet.length / 4 - 1) {
      nextLineStartX = lineSet[(i2 + 1) * 4];
      nextLineStartY = lineSet[(i2 + 1) * 4 + 1];
      nextLineEndX = lineSet[(i2 + 1) * 4 + 2];
      nextLineEndY = lineSet[(i2 + 1) * 4 + 3];
    } else {
      nextLineStartX = lineSet[0];
      nextLineStartY = lineSet[1];
      nextLineEndX = lineSet[2];
      nextLineEndY = lineSet[3];
    }
    var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
    vertices[i2 * 2] = intersection[0];
    vertices[i2 * 2 + 1] = intersection[1];
  }
  return vertices;
};
var expandPolygon = function expandPolygon2(points, pad) {
  var expandedLineSet = new Array(points.length * 2);
  var currentPointX, currentPointY, nextPointX, nextPointY;
  for (var i2 = 0; i2 < points.length / 2; i2++) {
    currentPointX = points[i2 * 2];
    currentPointY = points[i2 * 2 + 1];
    if (i2 < points.length / 2 - 1) {
      nextPointX = points[(i2 + 1) * 2];
      nextPointY = points[(i2 + 1) * 2 + 1];
    } else {
      nextPointX = points[0];
      nextPointY = points[1];
    }
    var offsetX = nextPointY - currentPointY;
    var offsetY = -(nextPointX - currentPointX);
    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
    var normalizedOffsetX = offsetX / offsetLength;
    var normalizedOffsetY = offsetY / offsetLength;
    expandedLineSet[i2 * 4] = currentPointX + normalizedOffsetX * pad;
    expandedLineSet[i2 * 4 + 1] = currentPointY + normalizedOffsetY * pad;
    expandedLineSet[i2 * 4 + 2] = nextPointX + normalizedOffsetX * pad;
    expandedLineSet[i2 * 4 + 3] = nextPointY + normalizedOffsetY * pad;
  }
  return expandedLineSet;
};
var intersectLineEllipse = function intersectLineEllipse2(x2, y2, centerX, centerY, ellipseWradius, ellipseHradius) {
  var dispX = centerX - x2;
  var dispY = centerY - y2;
  dispX /= ellipseWradius;
  dispY /= ellipseHradius;
  var len = Math.sqrt(dispX * dispX + dispY * dispY);
  var newLength = len - 1;
  if (newLength < 0) {
    return [];
  }
  var lenProportion = newLength / len;
  return [(centerX - x2) * lenProportion + x2, (centerY - y2) * lenProportion + y2];
};
var checkInEllipse = function checkInEllipse2(x2, y2, width2, height2, centerX, centerY, padding) {
  x2 -= centerX;
  y2 -= centerY;
  x2 /= width2 / 2 + padding;
  y2 /= height2 / 2 + padding;
  return x2 * x2 + y2 * y2 <= 1;
};
var intersectLineCircle = function intersectLineCircle2(x1, y1, x2, y2, centerX, centerY, radius) {
  var d2 = [x2 - x1, y2 - y1];
  var f2 = [x1 - centerX, y1 - centerY];
  var a2 = d2[0] * d2[0] + d2[1] * d2[1];
  var b2 = 2 * (f2[0] * d2[0] + f2[1] * d2[1]);
  var c2 = f2[0] * f2[0] + f2[1] * f2[1] - radius * radius;
  var discriminant = b2 * b2 - 4 * a2 * c2;
  if (discriminant < 0) {
    return [];
  }
  var t1 = (-b2 + Math.sqrt(discriminant)) / (2 * a2);
  var t22 = (-b2 - Math.sqrt(discriminant)) / (2 * a2);
  var tMin = Math.min(t1, t22);
  var tMax = Math.max(t1, t22);
  var inRangeParams = [];
  if (tMin >= 0 && tMin <= 1) {
    inRangeParams.push(tMin);
  }
  if (tMax >= 0 && tMax <= 1) {
    inRangeParams.push(tMax);
  }
  if (inRangeParams.length === 0) {
    return [];
  }
  var nearIntersectionX = inRangeParams[0] * d2[0] + x1;
  var nearIntersectionY = inRangeParams[0] * d2[1] + y1;
  if (inRangeParams.length > 1) {
    if (inRangeParams[0] == inRangeParams[1]) {
      return [nearIntersectionX, nearIntersectionY];
    } else {
      var farIntersectionX = inRangeParams[1] * d2[0] + x1;
      var farIntersectionY = inRangeParams[1] * d2[1] + y1;
      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
    }
  } else {
    return [nearIntersectionX, nearIntersectionY];
  }
};
var midOfThree = function midOfThree2(a2, b2, c2) {
  if (b2 <= a2 && a2 <= c2 || c2 <= a2 && a2 <= b2) {
    return a2;
  } else if (a2 <= b2 && b2 <= c2 || c2 <= b2 && b2 <= a2) {
    return b2;
  } else {
    return c2;
  }
};
var finiteLinesIntersect = function finiteLinesIntersect2(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
  var dx13 = x1 - x3;
  var dx21 = x2 - x1;
  var dx43 = x4 - x3;
  var dy13 = y1 - y3;
  var dy21 = y2 - y1;
  var dy43 = y4 - y3;
  var ua_t = dx43 * dy13 - dy43 * dx13;
  var ub_t = dx21 * dy13 - dy21 * dx13;
  var u_b = dy43 * dx21 - dx43 * dy21;
  if (u_b !== 0) {
    var ua = ua_t / u_b;
    var ub = ub_t / u_b;
    var flptThreshold = 1e-3;
    var _min = 0 - flptThreshold;
    var _max = 1 + flptThreshold;
    if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
      return [x1 + ua * dx21, y1 + ua * dy21];
    } else {
      if (!infiniteLines) {
        return [];
      } else {
        return [x1 + ua * dx21, y1 + ua * dy21];
      }
    }
  } else {
    if (ua_t === 0 || ub_t === 0) {
      if (midOfThree(x1, x2, x4) === x4) {
        return [x4, y4];
      }
      if (midOfThree(x1, x2, x3) === x3) {
        return [x3, y3];
      }
      if (midOfThree(x3, x4, x2) === x2) {
        return [x2, y2];
      }
      return [];
    } else {
      return [];
    }
  }
};
var polygonIntersectLine = function polygonIntersectLine2(x2, y2, basePoints, centerX, centerY, width2, height2, padding) {
  var intersections = [];
  var intersection;
  var transformedPoints = new Array(basePoints.length);
  var doTransform = true;
  if (width2 == null) {
    doTransform = false;
  }
  var points;
  if (doTransform) {
    for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
      transformedPoints[i2 * 2] = basePoints[i2 * 2] * width2 + centerX;
      transformedPoints[i2 * 2 + 1] = basePoints[i2 * 2 + 1] * height2 + centerY;
    }
    if (padding > 0) {
      var expandedLineSet = expandPolygon(transformedPoints, -padding);
      points = joinLines(expandedLineSet);
    } else {
      points = transformedPoints;
    }
  } else {
    points = basePoints;
  }
  var currentX, currentY, nextX, nextY;
  for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
    currentX = points[_i2 * 2];
    currentY = points[_i2 * 2 + 1];
    if (_i2 < points.length / 2 - 1) {
      nextX = points[(_i2 + 1) * 2];
      nextY = points[(_i2 + 1) * 2 + 1];
    } else {
      nextX = points[0];
      nextY = points[1];
    }
    intersection = finiteLinesIntersect(x2, y2, centerX, centerY, currentX, currentY, nextX, nextY);
    if (intersection.length !== 0) {
      intersections.push(intersection[0], intersection[1]);
    }
  }
  return intersections;
};
var roundPolygonIntersectLine = function roundPolygonIntersectLine2(x2, y2, basePoints, centerX, centerY, width2, height2, padding) {
  var intersections = [];
  var intersection;
  var lines = new Array(basePoints.length);
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  var cornerRadius = getRoundPolygonRadius(width2, height2);
  for (var i2 = 0; i2 < basePoints.length / 4; i2++) {
    var sourceUv = void 0, destUv = void 0;
    if (i2 === 0) {
      sourceUv = basePoints.length - 2;
    } else {
      sourceUv = i2 * 4 - 2;
    }
    destUv = i2 * 4 + 2;
    var px = centerX + halfW * basePoints[i2 * 4];
    var py = centerY + halfH * basePoints[i2 * 4 + 1];
    var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
    var cp0x = px - offset * basePoints[sourceUv];
    var cp0y = py - offset * basePoints[sourceUv + 1];
    var cp1x = px + offset * basePoints[destUv];
    var cp1y = py + offset * basePoints[destUv + 1];
    if (i2 === 0) {
      lines[basePoints.length - 2] = cp0x;
      lines[basePoints.length - 1] = cp0y;
    } else {
      lines[i2 * 4 - 2] = cp0x;
      lines[i2 * 4 - 1] = cp0y;
    }
    lines[i2 * 4] = cp1x;
    lines[i2 * 4 + 1] = cp1y;
    var orthx = basePoints[sourceUv + 1];
    var orthy = -basePoints[sourceUv];
    var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];
    if (cosAlpha < 0) {
      orthx *= -1;
      orthy *= -1;
    }
    var cx = cp0x + orthx * cornerRadius;
    var cy2 = cp0y + orthy * cornerRadius;
    intersection = intersectLineCircle(x2, y2, centerX, centerY, cx, cy2, cornerRadius);
    if (intersection.length !== 0) {
      intersections.push(intersection[0], intersection[1]);
    }
  }
  for (var _i3 = 0; _i3 < lines.length / 4; _i3++) {
    intersection = finiteLinesIntersect(x2, y2, centerX, centerY, lines[_i3 * 4], lines[_i3 * 4 + 1], lines[_i3 * 4 + 2], lines[_i3 * 4 + 3], false);
    if (intersection.length !== 0) {
      intersections.push(intersection[0], intersection[1]);
    }
  }
  if (intersections.length > 2) {
    var lowestIntersection = [intersections[0], intersections[1]];
    var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x2, 2) + Math.pow(lowestIntersection[1] - y2, 2);
    for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
      var squaredDistance = Math.pow(intersections[_i4 * 2] - x2, 2) + Math.pow(intersections[_i4 * 2 + 1] - y2, 2);
      if (squaredDistance <= lowestSquaredDistance) {
        lowestIntersection[0] = intersections[_i4 * 2];
        lowestIntersection[1] = intersections[_i4 * 2 + 1];
        lowestSquaredDistance = squaredDistance;
      }
    }
    return lowestIntersection;
  }
  return intersections;
};
var shortenIntersection = function shortenIntersection2(intersection, offset, amount) {
  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
  var lenRatio = (length - amount) / length;
  if (lenRatio < 0) {
    lenRatio = 1e-5;
  }
  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
};
var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare2(sides, rotationRadians) {
  var points = generateUnitNgonPoints(sides, rotationRadians);
  points = fitPolygonToSquare(points);
  return points;
};
var fitPolygonToSquare = function fitPolygonToSquare2(points) {
  var x2, y2;
  var sides = points.length / 2;
  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  for (var i2 = 0; i2 < sides; i2++) {
    x2 = points[2 * i2];
    y2 = points[2 * i2 + 1];
    minX = Math.min(minX, x2);
    maxX = Math.max(maxX, x2);
    minY = Math.min(minY, y2);
    maxY = Math.max(maxY, y2);
  }
  var sx = 2 / (maxX - minX);
  var sy = 2 / (maxY - minY);
  for (var _i5 = 0; _i5 < sides; _i5++) {
    x2 = points[2 * _i5] = points[2 * _i5] * sx;
    y2 = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
    minX = Math.min(minX, x2);
    maxX = Math.max(maxX, x2);
    minY = Math.min(minY, y2);
    maxY = Math.max(maxY, y2);
  }
  if (minY < -1) {
    for (var _i6 = 0; _i6 < sides; _i6++) {
      y2 = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
    }
  }
  return points;
};
var generateUnitNgonPoints = function generateUnitNgonPoints2(sides, rotationRadians) {
  var increment = 1 / sides * 2 * Math.PI;
  var startAngle = sides % 2 === 0 ? Math.PI / 2 + increment / 2 : Math.PI / 2;
  startAngle += rotationRadians;
  var points = new Array(sides * 2);
  var currentAngle;
  for (var i2 = 0; i2 < sides; i2++) {
    currentAngle = i2 * increment + startAngle;
    points[2 * i2] = Math.cos(currentAngle);
    points[2 * i2 + 1] = Math.sin(-currentAngle);
  }
  return points;
};
var getRoundRectangleRadius = function getRoundRectangleRadius2(width2, height2) {
  return Math.min(width2 / 4, height2 / 4, 8);
};
var getRoundPolygonRadius = function getRoundPolygonRadius2(width2, height2) {
  return Math.min(width2 / 10, height2 / 10, 8);
};
var getCutRectangleCornerLength = function getCutRectangleCornerLength2() {
  return 8;
};
var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff2(p0, p1, p2) {
  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
};
var getBarrelCurveConstants = function getBarrelCurveConstants2(width2, height2) {
  return {
    heightOffset: Math.min(15, 0.05 * height2),
    widthOffset: Math.min(100, 0.25 * width2),
    ctrlPtOffsetPct: 0.05
  };
};
var pageRankDefaults = defaults$g({
  dampingFactor: 0.8,
  precision: 1e-6,
  iterations: 200,
  weight: function weight5(edge) {
    return 1;
  }
});
var elesfn$o = {
  pageRank: function pageRank(options2) {
    var _pageRankDefaults = pageRankDefaults(options2), dampingFactor = _pageRankDefaults.dampingFactor, precision = _pageRankDefaults.precision, iterations = _pageRankDefaults.iterations, weight8 = _pageRankDefaults.weight;
    var cy2 = this._private.cy;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var numNodes = nodes3.length;
    var numNodesSqd = numNodes * numNodes;
    var numEdges = edges3.length;
    var matrix2 = new Array(numNodesSqd);
    var columnSum = new Array(numNodes);
    var additionalProb = (1 - dampingFactor) / numNodes;
    for (var i2 = 0; i2 < numNodes; i2++) {
      for (var j2 = 0; j2 < numNodes; j2++) {
        var n2 = i2 * numNodes + j2;
        matrix2[n2] = 0;
      }
      columnSum[i2] = 0;
    }
    for (var _i = 0; _i < numEdges; _i++) {
      var edge = edges3[_i];
      var srcId = edge.data("source");
      var tgtId = edge.data("target");
      if (srcId === tgtId) {
        continue;
      }
      var s2 = nodes3.indexOfId(srcId);
      var t3 = nodes3.indexOfId(tgtId);
      var w2 = weight8(edge);
      var _n = t3 * numNodes + s2;
      matrix2[_n] += w2;
      columnSum[s2] += w2;
    }
    var p2 = 1 / numNodes + additionalProb;
    for (var _j = 0; _j < numNodes; _j++) {
      if (columnSum[_j] === 0) {
        for (var _i2 = 0; _i2 < numNodes; _i2++) {
          var _n2 = _i2 * numNodes + _j;
          matrix2[_n2] = p2;
        }
      } else {
        for (var _i3 = 0; _i3 < numNodes; _i3++) {
          var _n3 = _i3 * numNodes + _j;
          matrix2[_n3] = matrix2[_n3] / columnSum[_j] + additionalProb;
        }
      }
    }
    var eigenvector = new Array(numNodes);
    var temp = new Array(numNodes);
    var previous;
    for (var _i4 = 0; _i4 < numNodes; _i4++) {
      eigenvector[_i4] = 1;
    }
    for (var iter = 0; iter < iterations; iter++) {
      for (var _i5 = 0; _i5 < numNodes; _i5++) {
        temp[_i5] = 0;
      }
      for (var _i6 = 0; _i6 < numNodes; _i6++) {
        for (var _j2 = 0; _j2 < numNodes; _j2++) {
          var _n4 = _i6 * numNodes + _j2;
          temp[_i6] += matrix2[_n4] * eigenvector[_j2];
        }
      }
      inPlaceSumNormalize(temp);
      previous = eigenvector;
      eigenvector = temp;
      temp = previous;
      var diff2 = 0;
      for (var _i7 = 0; _i7 < numNodes; _i7++) {
        var delta = previous[_i7] - eigenvector[_i7];
        diff2 += delta * delta;
      }
      if (diff2 < precision) {
        break;
      }
    }
    var res = {
      rank: function rank(node) {
        node = cy2.collection(node)[0];
        return eigenvector[nodes3.indexOf(node)];
      }
    };
    return res;
  }
  // pageRank
};
var defaults$f = defaults$g({
  root: null,
  weight: function weight6(edge) {
    return 1;
  },
  directed: false,
  alpha: 0
});
var elesfn$n = {
  degreeCentralityNormalized: function degreeCentralityNormalized(options2) {
    options2 = defaults$f(options2);
    var cy2 = this.cy();
    var nodes3 = this.nodes();
    var numNodes = nodes3.length;
    if (!options2.directed) {
      var degrees = {};
      var maxDegree = 0;
      for (var i2 = 0; i2 < numNodes; i2++) {
        var node = nodes3[i2];
        options2.root = node;
        var currDegree = this.degreeCentrality(options2);
        if (maxDegree < currDegree.degree) {
          maxDegree = currDegree.degree;
        }
        degrees[node.id()] = currDegree.degree;
      }
      return {
        degree: function degree(node2) {
          if (maxDegree === 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy2.filter(node2);
          }
          return degrees[node2.id()] / maxDegree;
        }
      };
    } else {
      var indegrees = {};
      var outdegrees = {};
      var maxIndegree = 0;
      var maxOutdegree = 0;
      for (var _i = 0; _i < numNodes; _i++) {
        var _node = nodes3[_i];
        var id2 = _node.id();
        options2.root = _node;
        var _currDegree = this.degreeCentrality(options2);
        if (maxIndegree < _currDegree.indegree)
          maxIndegree = _currDegree.indegree;
        if (maxOutdegree < _currDegree.outdegree)
          maxOutdegree = _currDegree.outdegree;
        indegrees[id2] = _currDegree.indegree;
        outdegrees[id2] = _currDegree.outdegree;
      }
      return {
        indegree: function indegree(node2) {
          if (maxIndegree == 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy2.filter(node2);
          }
          return indegrees[node2.id()] / maxIndegree;
        },
        outdegree: function outdegree(node2) {
          if (maxOutdegree === 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy2.filter(node2);
          }
          return outdegrees[node2.id()] / maxOutdegree;
        }
      };
    }
  },
  // degreeCentralityNormalized
  // Implemented from the algorithm in Opsahl's paper
  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
  // check the heading 2 "Degree"
  degreeCentrality: function degreeCentrality(options2) {
    options2 = defaults$f(options2);
    var cy2 = this.cy();
    var callingEles = this;
    var _options = options2, root2 = _options.root, weight8 = _options.weight, directed = _options.directed, alpha = _options.alpha;
    root2 = cy2.collection(root2)[0];
    if (!directed) {
      var connEdges = root2.connectedEdges().intersection(callingEles);
      var k2 = connEdges.length;
      var s2 = 0;
      for (var i2 = 0; i2 < connEdges.length; i2++) {
        s2 += weight8(connEdges[i2]);
      }
      return {
        degree: Math.pow(k2, 1 - alpha) * Math.pow(s2, alpha)
      };
    } else {
      var edges3 = root2.connectedEdges();
      var incoming = edges3.filter(function(edge) {
        return edge.target().same(root2) && callingEles.has(edge);
      });
      var outgoing = edges3.filter(function(edge) {
        return edge.source().same(root2) && callingEles.has(edge);
      });
      var k_in = incoming.length;
      var k_out = outgoing.length;
      var s_in = 0;
      var s_out = 0;
      for (var _i2 = 0; _i2 < incoming.length; _i2++) {
        s_in += weight8(incoming[_i2]);
      }
      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
        s_out += weight8(outgoing[_i3]);
      }
      return {
        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
      };
    }
  }
  // degreeCentrality
};
elesfn$n.dc = elesfn$n.degreeCentrality;
elesfn$n.dcn = elesfn$n.degreeCentralityNormalised = elesfn$n.degreeCentralityNormalized;
var defaults$e = defaults$g({
  harmonic: true,
  weight: function weight7() {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$m = {
  closenessCentralityNormalized: function closenessCentralityNormalized(options2) {
    var _defaults = defaults$e(options2), harmonic = _defaults.harmonic, weight8 = _defaults.weight, directed = _defaults.directed;
    var cy2 = this.cy();
    var closenesses = {};
    var maxCloseness = 0;
    var nodes3 = this.nodes();
    var fw = this.floydWarshall({
      weight: weight8,
      directed
    });
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var currCloseness = 0;
      var node_i = nodes3[i2];
      for (var j2 = 0; j2 < nodes3.length; j2++) {
        if (i2 !== j2) {
          var d2 = fw.distance(node_i, nodes3[j2]);
          if (harmonic) {
            currCloseness += 1 / d2;
          } else {
            currCloseness += d2;
          }
        }
      }
      if (!harmonic) {
        currCloseness = 1 / currCloseness;
      }
      if (maxCloseness < currCloseness) {
        maxCloseness = currCloseness;
      }
      closenesses[node_i.id()] = currCloseness;
    }
    return {
      closeness: function closeness(node) {
        if (maxCloseness == 0) {
          return 0;
        }
        if (string(node)) {
          node = cy2.filter(node)[0].id();
        } else {
          node = node.id();
        }
        return closenesses[node] / maxCloseness;
      }
    };
  },
  // Implemented from pseudocode from wikipedia
  closenessCentrality: function closenessCentrality(options2) {
    var _defaults2 = defaults$e(options2), root2 = _defaults2.root, weight8 = _defaults2.weight, directed = _defaults2.directed, harmonic = _defaults2.harmonic;
    root2 = this.filter(root2)[0];
    var dijkstra2 = this.dijkstra({
      root: root2,
      weight: weight8,
      directed
    });
    var totalDistance = 0;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var n2 = nodes3[i2];
      if (!n2.same(root2)) {
        var d2 = dijkstra2.distanceTo(n2);
        if (harmonic) {
          totalDistance += 1 / d2;
        } else {
          totalDistance += d2;
        }
      }
    }
    return harmonic ? totalDistance : 1 / totalDistance;
  }
  // closenessCentrality
};
elesfn$m.cc = elesfn$m.closenessCentrality;
elesfn$m.ccn = elesfn$m.closenessCentralityNormalised = elesfn$m.closenessCentralityNormalized;
var defaults$d = defaults$g({
  weight: null,
  directed: false
});
var elesfn$l = {
  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
  betweennessCentrality: function betweennessCentrality(options2) {
    var _defaults = defaults$d(options2), directed = _defaults.directed, weight8 = _defaults.weight;
    var weighted = weight8 != null;
    var cy2 = this.cy();
    var V2 = this.nodes();
    var A2 = {};
    var _C = {};
    var max5 = 0;
    var C2 = {
      set: function set2(key, val) {
        _C[key] = val;
        if (val > max5) {
          max5 = val;
        }
      },
      get: function get2(key) {
        return _C[key];
      }
    };
    for (var i2 = 0; i2 < V2.length; i2++) {
      var v2 = V2[i2];
      var vid = v2.id();
      if (directed) {
        A2[vid] = v2.outgoers().nodes();
      } else {
        A2[vid] = v2.openNeighborhood().nodes();
      }
      C2.set(vid, 0);
    }
    var _loop = function _loop2(s3) {
      var sid = V2[s3].id();
      var S2 = [];
      var P2 = {};
      var g2 = {};
      var d2 = {};
      var Q2 = new Heap__default["default"](function(a2, b2) {
        return d2[a2] - d2[b2];
      });
      for (var _i = 0; _i < V2.length; _i++) {
        var _vid = V2[_i].id();
        P2[_vid] = [];
        g2[_vid] = 0;
        d2[_vid] = Infinity;
      }
      g2[sid] = 1;
      d2[sid] = 0;
      Q2.push(sid);
      while (!Q2.empty()) {
        var _v = Q2.pop();
        S2.push(_v);
        if (weighted) {
          for (var j2 = 0; j2 < A2[_v].length; j2++) {
            var w2 = A2[_v][j2];
            var vEle = cy2.getElementById(_v);
            var edge = void 0;
            if (vEle.edgesTo(w2).length > 0) {
              edge = vEle.edgesTo(w2)[0];
            } else {
              edge = w2.edgesTo(vEle)[0];
            }
            var edgeWeight = weight8(edge);
            w2 = w2.id();
            if (d2[w2] > d2[_v] + edgeWeight) {
              d2[w2] = d2[_v] + edgeWeight;
              if (Q2.nodes.indexOf(w2) < 0) {
                Q2.push(w2);
              } else {
                Q2.updateItem(w2);
              }
              g2[w2] = 0;
              P2[w2] = [];
            }
            if (d2[w2] == d2[_v] + edgeWeight) {
              g2[w2] = g2[w2] + g2[_v];
              P2[w2].push(_v);
            }
          }
        } else {
          for (var _j = 0; _j < A2[_v].length; _j++) {
            var _w = A2[_v][_j].id();
            if (d2[_w] == Infinity) {
              Q2.push(_w);
              d2[_w] = d2[_v] + 1;
            }
            if (d2[_w] == d2[_v] + 1) {
              g2[_w] = g2[_w] + g2[_v];
              P2[_w].push(_v);
            }
          }
        }
      }
      var e2 = {};
      for (var _i2 = 0; _i2 < V2.length; _i2++) {
        e2[V2[_i2].id()] = 0;
      }
      while (S2.length > 0) {
        var _w2 = S2.pop();
        for (var _j2 = 0; _j2 < P2[_w2].length; _j2++) {
          var _v2 = P2[_w2][_j2];
          e2[_v2] = e2[_v2] + g2[_v2] / g2[_w2] * (1 + e2[_w2]);
        }
        if (_w2 != V2[s3].id()) {
          C2.set(_w2, C2.get(_w2) + e2[_w2]);
        }
      }
    };
    for (var s2 = 0; s2 < V2.length; s2++) {
      _loop(s2);
    }
    var ret = {
      betweenness: function betweenness(node) {
        var id2 = cy2.collection(node).id();
        return C2.get(id2);
      },
      betweennessNormalized: function betweennessNormalized(node) {
        if (max5 == 0) {
          return 0;
        }
        var id2 = cy2.collection(node).id();
        return C2.get(id2) / max5;
      }
    };
    ret.betweennessNormalised = ret.betweennessNormalized;
    return ret;
  }
  // betweennessCentrality
};
elesfn$l.bc = elesfn$l.betweennessCentrality;
var defaults$c = defaults$g({
  expandFactor: 2,
  // affects time of computation and cluster granularity to some extent: M * M
  inflateFactor: 2,
  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
  multFactor: 1,
  // optional self loops for each node. Use a neutral value to improve cluster computations.
  maxIterations: 20,
  // maximum number of iterations of the MCL algorithm in a single run
  attributes: [
    // attributes/features used to group nodes, ie. similarity values between nodes
    function(edge) {
      return 1;
    }
  ]
});
var setOptions$3 = function setOptions(options2) {
  return defaults$c(options2);
};
var getSimilarity$1 = function getSimilarity(edge, attributes) {
  var total = 0;
  for (var i2 = 0; i2 < attributes.length; i2++) {
    total += attributes[i2](edge);
  }
  return total;
};
var addLoops = function addLoops2(M2, n2, val) {
  for (var i2 = 0; i2 < n2; i2++) {
    M2[i2 * n2 + i2] = val;
  }
};
var normalize$1 = function normalize(M2, n2) {
  var sum;
  for (var col = 0; col < n2; col++) {
    sum = 0;
    for (var row = 0; row < n2; row++) {
      sum += M2[row * n2 + col];
    }
    for (var _row = 0; _row < n2; _row++) {
      M2[_row * n2 + col] = M2[_row * n2 + col] / sum;
    }
  }
};
var mmult = function mmult2(A2, B2, n2) {
  var C2 = new Array(n2 * n2);
  for (var i2 = 0; i2 < n2; i2++) {
    for (var j2 = 0; j2 < n2; j2++) {
      C2[i2 * n2 + j2] = 0;
    }
    for (var k2 = 0; k2 < n2; k2++) {
      for (var _j = 0; _j < n2; _j++) {
        C2[i2 * n2 + _j] += A2[i2 * n2 + k2] * B2[k2 * n2 + _j];
      }
    }
  }
  return C2;
};
var expand = function expand2(M2, n2, expandFactor) {
  var _M = M2.slice(0);
  for (var p2 = 1; p2 < expandFactor; p2++) {
    M2 = mmult(M2, _M, n2);
  }
  return M2;
};
var inflate = function inflate2(M2, n2, inflateFactor) {
  var _M = new Array(n2 * n2);
  for (var i2 = 0; i2 < n2 * n2; i2++) {
    _M[i2] = Math.pow(M2[i2], inflateFactor);
  }
  normalize$1(_M, n2);
  return _M;
};
var hasConverged = function hasConverged2(M2, _M, n2, roundFactor) {
  for (var i2 = 0; i2 < n2; i2++) {
    var v1 = Math.round(M2[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
    var v2 = Math.round(_M[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
    if (v1 !== v2) {
      return false;
    }
  }
  return true;
};
var assign$2 = function assign(M2, n2, nodes3, cy2) {
  var clusters = [];
  for (var i2 = 0; i2 < n2; i2++) {
    var cluster = [];
    for (var j2 = 0; j2 < n2; j2++) {
      if (Math.round(M2[i2 * n2 + j2] * 1e3) / 1e3 > 0) {
        cluster.push(nodes3[j2]);
      }
    }
    if (cluster.length !== 0) {
      clusters.push(cy2.collection(cluster));
    }
  }
  return clusters;
};
var isDuplicate = function isDuplicate2(c1, c2) {
  for (var i2 = 0; i2 < c1.length; i2++) {
    if (!c2[i2] || c1[i2].id() !== c2[i2].id()) {
      return false;
    }
  }
  return true;
};
var removeDuplicates = function removeDuplicates2(clusters) {
  for (var i2 = 0; i2 < clusters.length; i2++) {
    for (var j2 = 0; j2 < clusters.length; j2++) {
      if (i2 != j2 && isDuplicate(clusters[i2], clusters[j2])) {
        clusters.splice(j2, 1);
      }
    }
  }
  return clusters;
};
var markovClustering = function markovClustering2(options2) {
  var nodes3 = this.nodes();
  var edges3 = this.edges();
  var cy2 = this.cy();
  var opts = setOptions$3(options2);
  var id2position = {};
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    id2position[nodes3[i2].id()] = i2;
  }
  var n2 = nodes3.length, n22 = n2 * n2;
  var M2 = new Array(n22), _M;
  for (var _i = 0; _i < n22; _i++) {
    M2[_i] = 0;
  }
  for (var e2 = 0; e2 < edges3.length; e2++) {
    var edge = edges3[e2];
    var _i2 = id2position[edge.source().id()];
    var j2 = id2position[edge.target().id()];
    var sim = getSimilarity$1(edge, opts.attributes);
    M2[_i2 * n2 + j2] += sim;
    M2[j2 * n2 + _i2] += sim;
  }
  addLoops(M2, n2, opts.multFactor);
  normalize$1(M2, n2);
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false;
    _M = expand(M2, n2, opts.expandFactor);
    M2 = inflate(_M, n2, opts.inflateFactor);
    if (!hasConverged(M2, _M, n22, 4)) {
      isStillMoving = true;
    }
    iterations++;
  }
  var clusters = assign$2(M2, n2, nodes3, cy2);
  clusters = removeDuplicates(clusters);
  return clusters;
};
var markovClustering$1 = {
  markovClustering,
  mcl: markovClustering
};
var identity = function identity2(x2) {
  return x2;
};
var absDiff = function absDiff2(p2, q2) {
  return Math.abs(q2 - p2);
};
var addAbsDiff = function addAbsDiff2(total, p2, q2) {
  return total + absDiff(p2, q2);
};
var addSquaredDiff = function addSquaredDiff2(total, p2, q2) {
  return total + Math.pow(q2 - p2, 2);
};
var sqrt = function sqrt3(x2) {
  return Math.sqrt(x2);
};
var maxAbsDiff = function maxAbsDiff2(currentMax, p2, q2) {
  return Math.max(currentMax, absDiff(p2, q2));
};
var getDistance = function getDistance2(length, getP, getQ, init2, visit) {
  var post = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : identity;
  var ret = init2;
  var p2, q2;
  for (var dim = 0; dim < length; dim++) {
    p2 = getP(dim);
    q2 = getQ(dim);
    ret = visit(ret, p2, q2);
  }
  return post(ret);
};
var distances = {
  euclidean: function euclidean(length, getP, getQ) {
    if (length >= 2) {
      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
    } else {
      return getDistance(length, getP, getQ, 0, addAbsDiff);
    }
  },
  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addSquaredDiff);
  },
  manhattan: function manhattan(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addAbsDiff);
  },
  max: function max2(length, getP, getQ) {
    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
  }
};
distances["squared-euclidean"] = distances["squaredEuclidean"];
distances["squaredeuclidean"] = distances["squaredEuclidean"];
function clusteringDistance(method, length, getP, getQ, nodeP, nodeQ) {
  var impl2;
  if (fn$6(method)) {
    impl2 = method;
  } else {
    impl2 = distances[method] || distances.euclidean;
  }
  if (length === 0 && fn$6(method)) {
    return impl2(nodeP, nodeQ);
  } else {
    return impl2(length, getP, getQ, nodeP, nodeQ);
  }
}
var defaults$b = defaults$g({
  k: 2,
  m: 2,
  sensitivityThreshold: 1e-4,
  distance: "euclidean",
  maxIterations: 10,
  attributes: [],
  testMode: false,
  testCentroids: null
});
var setOptions$2 = function setOptions2(options2) {
  return defaults$b(options2);
};
var getDist = function getDist2(type, node, centroid, attributes, mode) {
  var noNodeP = mode !== "kMedoids";
  var getP = noNodeP ? function(i2) {
    return centroid[i2];
  } : function(i2) {
    return attributes[i2](centroid);
  };
  var getQ = function getQ2(i2) {
    return attributes[i2](node);
  };
  var nodeP = centroid;
  var nodeQ = node;
  return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
};
var randomCentroids = function randomCentroids2(nodes3, k2, attributes) {
  var ndim = attributes.length;
  var min4 = new Array(ndim);
  var max5 = new Array(ndim);
  var centroids = new Array(k2);
  var centroid = null;
  for (var i2 = 0; i2 < ndim; i2++) {
    min4[i2] = nodes3.min(attributes[i2]).value;
    max5[i2] = nodes3.max(attributes[i2]).value;
  }
  for (var c2 = 0; c2 < k2; c2++) {
    centroid = [];
    for (var _i = 0; _i < ndim; _i++) {
      centroid[_i] = Math.random() * (max5[_i] - min4[_i]) + min4[_i];
    }
    centroids[c2] = centroid;
  }
  return centroids;
};
var classify = function classify2(node, centroids, distance, attributes, type) {
  var min4 = Infinity;
  var index = 0;
  for (var i2 = 0; i2 < centroids.length; i2++) {
    var dist4 = getDist(distance, node, centroids[i2], attributes, type);
    if (dist4 < min4) {
      min4 = dist4;
      index = i2;
    }
  }
  return index;
};
var buildCluster = function buildCluster2(centroid, nodes3, assignment) {
  var cluster = [];
  var node = null;
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    node = nodes3[n2];
    if (assignment[node.id()] === centroid) {
      cluster.push(node);
    }
  }
  return cluster;
};
var haveValuesConverged = function haveValuesConverged2(v1, v2, sensitivityThreshold) {
  return Math.abs(v2 - v1) <= sensitivityThreshold;
};
var haveMatricesConverged = function haveMatricesConverged2(v1, v2, sensitivityThreshold) {
  for (var i2 = 0; i2 < v1.length; i2++) {
    for (var j2 = 0; j2 < v1[i2].length; j2++) {
      var diff2 = Math.abs(v1[i2][j2] - v2[i2][j2]);
      if (diff2 > sensitivityThreshold) {
        return false;
      }
    }
  }
  return true;
};
var seenBefore = function seenBefore2(node, medoids, n2) {
  for (var i2 = 0; i2 < n2; i2++) {
    if (node === medoids[i2])
      return true;
  }
  return false;
};
var randomMedoids = function randomMedoids2(nodes3, k2) {
  var medoids = new Array(k2);
  if (nodes3.length < 50) {
    for (var i2 = 0; i2 < k2; i2++) {
      var node = nodes3[Math.floor(Math.random() * nodes3.length)];
      while (seenBefore(node, medoids, i2)) {
        node = nodes3[Math.floor(Math.random() * nodes3.length)];
      }
      medoids[i2] = node;
    }
  } else {
    for (var _i2 = 0; _i2 < k2; _i2++) {
      medoids[_i2] = nodes3[Math.floor(Math.random() * nodes3.length)];
    }
  }
  return medoids;
};
var findCost = function findCost2(potentialNewMedoid, cluster, attributes) {
  var cost = 0;
  for (var n2 = 0; n2 < cluster.length; n2++) {
    cost += getDist("manhattan", cluster[n2], potentialNewMedoid, attributes, "kMedoids");
  }
  return cost;
};
var kMeans = function kMeans2(options2) {
  var cy2 = this.cy();
  var nodes3 = this.nodes();
  var node = null;
  var opts = setOptions$2(options2);
  var clusters = new Array(opts.k);
  var assignment = {};
  var centroids;
  if (opts.testMode) {
    if (typeof opts.testCentroids === "number") {
      opts.testCentroids;
      centroids = randomCentroids(nodes3, opts.k, opts.attributes);
    } else if (_typeof$1(opts.testCentroids) === "object") {
      centroids = opts.testCentroids;
    } else {
      centroids = randomCentroids(nodes3, opts.k, opts.attributes);
    }
  } else {
    centroids = randomCentroids(nodes3, opts.k, opts.attributes);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      node = nodes3[n2];
      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, "kMeans");
    }
    isStillMoving = false;
    for (var c2 = 0; c2 < opts.k; c2++) {
      var cluster = buildCluster(c2, nodes3, assignment);
      if (cluster.length === 0) {
        continue;
      }
      var ndim = opts.attributes.length;
      var centroid = centroids[c2];
      var newCentroid = new Array(ndim);
      var sum = new Array(ndim);
      for (var d2 = 0; d2 < ndim; d2++) {
        sum[d2] = 0;
        for (var i2 = 0; i2 < cluster.length; i2++) {
          node = cluster[i2];
          sum[d2] += opts.attributes[d2](node);
        }
        newCentroid[d2] = sum[d2] / cluster.length;
        if (!haveValuesConverged(newCentroid[d2], centroid[d2], opts.sensitivityThreshold)) {
          isStillMoving = true;
        }
      }
      centroids[c2] = newCentroid;
      clusters[c2] = cy2.collection(cluster);
    }
    iterations++;
  }
  return clusters;
};
var kMedoids = function kMedoids2(options2) {
  var cy2 = this.cy();
  var nodes3 = this.nodes();
  var node = null;
  var opts = setOptions$2(options2);
  var clusters = new Array(opts.k);
  var medoids;
  var assignment = {};
  var curCost;
  var minCosts = new Array(opts.k);
  if (opts.testMode) {
    if (typeof opts.testCentroids === "number")
      ;
    else if (_typeof$1(opts.testCentroids) === "object") {
      medoids = opts.testCentroids;
    } else {
      medoids = randomMedoids(nodes3, opts.k);
    }
  } else {
    medoids = randomMedoids(nodes3, opts.k);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      node = nodes3[n2];
      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, "kMedoids");
    }
    isStillMoving = false;
    for (var m2 = 0; m2 < medoids.length; m2++) {
      var cluster = buildCluster(m2, nodes3, assignment);
      if (cluster.length === 0) {
        continue;
      }
      minCosts[m2] = findCost(medoids[m2], cluster, opts.attributes);
      for (var _n = 0; _n < cluster.length; _n++) {
        curCost = findCost(cluster[_n], cluster, opts.attributes);
        if (curCost < minCosts[m2]) {
          minCosts[m2] = curCost;
          medoids[m2] = cluster[_n];
          isStillMoving = true;
        }
      }
      clusters[m2] = cy2.collection(cluster);
    }
    iterations++;
  }
  return clusters;
};
var updateCentroids = function updateCentroids2(centroids, nodes3, U2, weight8, opts) {
  var numerator, denominator;
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    for (var c2 = 0; c2 < centroids.length; c2++) {
      weight8[n2][c2] = Math.pow(U2[n2][c2], opts.m);
    }
  }
  for (var _c = 0; _c < centroids.length; _c++) {
    for (var dim = 0; dim < opts.attributes.length; dim++) {
      numerator = 0;
      denominator = 0;
      for (var _n2 = 0; _n2 < nodes3.length; _n2++) {
        numerator += weight8[_n2][_c] * opts.attributes[dim](nodes3[_n2]);
        denominator += weight8[_n2][_c];
      }
      centroids[_c][dim] = numerator / denominator;
    }
  }
};
var updateMembership = function updateMembership2(U2, _U, centroids, nodes3, opts) {
  for (var i2 = 0; i2 < U2.length; i2++) {
    _U[i2] = U2[i2].slice();
  }
  var sum, numerator, denominator;
  var pow = 2 / (opts.m - 1);
  for (var c2 = 0; c2 < centroids.length; c2++) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      sum = 0;
      for (var k2 = 0; k2 < centroids.length; k2++) {
        numerator = getDist(opts.distance, nodes3[n2], centroids[c2], opts.attributes, "cmeans");
        denominator = getDist(opts.distance, nodes3[n2], centroids[k2], opts.attributes, "cmeans");
        sum += Math.pow(numerator / denominator, pow);
      }
      U2[n2][c2] = 1 / sum;
    }
  }
};
var assign$1 = function assign2(nodes3, U2, opts, cy2) {
  var clusters = new Array(opts.k);
  for (var c2 = 0; c2 < clusters.length; c2++) {
    clusters[c2] = [];
  }
  var max5;
  var index;
  for (var n2 = 0; n2 < U2.length; n2++) {
    max5 = -Infinity;
    index = -1;
    for (var _c2 = 0; _c2 < U2[0].length; _c2++) {
      if (U2[n2][_c2] > max5) {
        max5 = U2[n2][_c2];
        index = _c2;
      }
    }
    clusters[index].push(nodes3[n2]);
  }
  for (var _c3 = 0; _c3 < clusters.length; _c3++) {
    clusters[_c3] = cy2.collection(clusters[_c3]);
  }
  return clusters;
};
var fuzzyCMeans = function fuzzyCMeans2(options2) {
  var cy2 = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions$2(options2);
  var clusters;
  var centroids;
  var U2;
  var _U;
  var weight8;
  _U = new Array(nodes3.length);
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    _U[i2] = new Array(opts.k);
  }
  U2 = new Array(nodes3.length);
  for (var _i3 = 0; _i3 < nodes3.length; _i3++) {
    U2[_i3] = new Array(opts.k);
  }
  for (var _i4 = 0; _i4 < nodes3.length; _i4++) {
    var total = 0;
    for (var j2 = 0; j2 < opts.k; j2++) {
      U2[_i4][j2] = Math.random();
      total += U2[_i4][j2];
    }
    for (var _j = 0; _j < opts.k; _j++) {
      U2[_i4][_j] = U2[_i4][_j] / total;
    }
  }
  centroids = new Array(opts.k);
  for (var _i5 = 0; _i5 < opts.k; _i5++) {
    centroids[_i5] = new Array(opts.attributes.length);
  }
  weight8 = new Array(nodes3.length);
  for (var _i6 = 0; _i6 < nodes3.length; _i6++) {
    weight8[_i6] = new Array(opts.k);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false;
    updateCentroids(centroids, nodes3, U2, weight8, opts);
    updateMembership(U2, _U, centroids, nodes3, opts);
    if (!haveMatricesConverged(U2, _U, opts.sensitivityThreshold)) {
      isStillMoving = true;
    }
    iterations++;
  }
  clusters = assign$1(nodes3, U2, opts, cy2);
  return {
    clusters,
    degreeOfMembership: U2
  };
};
var kClustering = {
  kMeans,
  kMedoids,
  fuzzyCMeans,
  fcm: fuzzyCMeans
};
var defaults$a = defaults$g({
  distance: "euclidean",
  // distance metric to compare nodes
  linkage: "min",
  // linkage criterion : how to determine the distance between clusters of nodes
  mode: "threshold",
  // mode:'threshold' => clusters must be threshold distance apart
  threshold: Infinity,
  // the distance threshold
  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
  addDendrogram: false,
  // whether to add the dendrogram to the graph for viz
  dendrogramDepth: 0,
  // depth at which dendrogram branches are merged into the returned clusters
  attributes: []
  // array of attr functions
});
var linkageAliases = {
  "single": "min",
  "complete": "max"
};
var setOptions$1 = function setOptions3(options2) {
  var opts = defaults$a(options2);
  var preferredAlias = linkageAliases[opts.linkage];
  if (preferredAlias != null) {
    opts.linkage = preferredAlias;
  }
  return opts;
};
var mergeClosest = function mergeClosest2(clusters, index, dists, mins, opts) {
  var minKey = 0;
  var min4 = Infinity;
  var dist4;
  var attrs = opts.attributes;
  var getDist3 = function getDist4(n1, n2) {
    return clusteringDistance(opts.distance, attrs.length, function(i3) {
      return attrs[i3](n1);
    }, function(i3) {
      return attrs[i3](n2);
    }, n1, n2);
  };
  for (var i2 = 0; i2 < clusters.length; i2++) {
    var key = clusters[i2].key;
    var _dist = dists[key][mins[key]];
    if (_dist < min4) {
      minKey = key;
      min4 = _dist;
    }
  }
  if (opts.mode === "threshold" && min4 >= opts.threshold || opts.mode === "dendrogram" && clusters.length === 1) {
    return false;
  }
  var c1 = index[minKey];
  var c2 = index[mins[minKey]];
  var merged;
  if (opts.mode === "dendrogram") {
    merged = {
      left: c1,
      right: c2,
      key: c1.key
    };
  } else {
    merged = {
      value: c1.value.concat(c2.value),
      key: c1.key
    };
  }
  clusters[c1.index] = merged;
  clusters.splice(c2.index, 1);
  index[c1.key] = merged;
  for (var _i = 0; _i < clusters.length; _i++) {
    var cur = clusters[_i];
    if (c1.key === cur.key) {
      dist4 = Infinity;
    } else if (opts.linkage === "min") {
      dist4 = dists[c1.key][cur.key];
      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
        dist4 = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === "max") {
      dist4 = dists[c1.key][cur.key];
      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
        dist4 = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === "mean") {
      dist4 = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
    } else {
      if (opts.mode === "dendrogram")
        dist4 = getDist3(cur.value, c1.value);
      else
        dist4 = getDist3(cur.value[0], c1.value[0]);
    }
    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist4;
  }
  for (var _i2 = 0; _i2 < clusters.length; _i2++) {
    var key1 = clusters[_i2].key;
    if (mins[key1] === c1.key || mins[key1] === c2.key) {
      var _min = key1;
      for (var j2 = 0; j2 < clusters.length; j2++) {
        var key2 = clusters[j2].key;
        if (dists[key1][key2] < dists[key1][_min]) {
          _min = key2;
        }
      }
      mins[key1] = _min;
    }
    clusters[_i2].index = _i2;
  }
  c1.key = c2.key = c1.index = c2.index = null;
  return true;
};
var getAllChildren = function getAllChildren2(root2, arr, cy2) {
  if (!root2)
    return;
  if (root2.value) {
    arr.push(root2.value);
  } else {
    if (root2.left)
      getAllChildren2(root2.left, arr);
    if (root2.right)
      getAllChildren2(root2.right, arr);
  }
};
var buildDendrogram = function buildDendrogram2(root2, cy2) {
  if (!root2)
    return "";
  if (root2.left && root2.right) {
    var leftStr = buildDendrogram2(root2.left, cy2);
    var rightStr = buildDendrogram2(root2.right, cy2);
    var node = cy2.add({
      group: "nodes",
      data: {
        id: leftStr + "," + rightStr
      }
    });
    cy2.add({
      group: "edges",
      data: {
        source: leftStr,
        target: node.id()
      }
    });
    cy2.add({
      group: "edges",
      data: {
        source: rightStr,
        target: node.id()
      }
    });
    return node.id();
  } else if (root2.value) {
    return root2.value.id();
  }
};
var buildClustersFromTree = function buildClustersFromTree2(root2, k2, cy2) {
  if (!root2)
    return [];
  var left = [], right = [], leaves = [];
  if (k2 === 0) {
    if (root2.left)
      getAllChildren(root2.left, left);
    if (root2.right)
      getAllChildren(root2.right, right);
    leaves = left.concat(right);
    return [cy2.collection(leaves)];
  } else if (k2 === 1) {
    if (root2.value) {
      return [cy2.collection(root2.value)];
    } else {
      if (root2.left)
        getAllChildren(root2.left, left);
      if (root2.right)
        getAllChildren(root2.right, right);
      return [cy2.collection(left), cy2.collection(right)];
    }
  } else {
    if (root2.value) {
      return [cy2.collection(root2.value)];
    } else {
      if (root2.left)
        left = buildClustersFromTree2(root2.left, k2 - 1, cy2);
      if (root2.right)
        right = buildClustersFromTree2(root2.right, k2 - 1, cy2);
      return left.concat(right);
    }
  }
};
var hierarchicalClustering = function hierarchicalClustering2(options2) {
  var cy2 = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions$1(options2);
  var attrs = opts.attributes;
  var getDist3 = function getDist4(n1, n22) {
    return clusteringDistance(opts.distance, attrs.length, function(i3) {
      return attrs[i3](n1);
    }, function(i3) {
      return attrs[i3](n22);
    }, n1, n22);
  };
  var clusters = [];
  var dists = [];
  var mins = [];
  var index = [];
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    var cluster = {
      value: opts.mode === "dendrogram" ? nodes3[n2] : [nodes3[n2]],
      key: n2,
      index: n2
    };
    clusters[n2] = cluster;
    index[n2] = cluster;
    dists[n2] = [];
    mins[n2] = 0;
  }
  for (var i2 = 0; i2 < clusters.length; i2++) {
    for (var j2 = 0; j2 <= i2; j2++) {
      var dist4 = void 0;
      if (opts.mode === "dendrogram") {
        dist4 = i2 === j2 ? Infinity : getDist3(clusters[i2].value, clusters[j2].value);
      } else {
        dist4 = i2 === j2 ? Infinity : getDist3(clusters[i2].value[0], clusters[j2].value[0]);
      }
      dists[i2][j2] = dist4;
      dists[j2][i2] = dist4;
      if (dist4 < dists[i2][mins[i2]]) {
        mins[i2] = j2;
      }
    }
  }
  var merged = mergeClosest(clusters, index, dists, mins, opts);
  while (merged) {
    merged = mergeClosest(clusters, index, dists, mins, opts);
  }
  var retClusters;
  if (opts.mode === "dendrogram") {
    retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy2);
    if (opts.addDendrogram)
      buildDendrogram(clusters[0], cy2);
  } else {
    retClusters = new Array(clusters.length);
    clusters.forEach(function(cluster2, i3) {
      cluster2.key = cluster2.index = null;
      retClusters[i3] = cy2.collection(cluster2.value);
    });
  }
  return retClusters;
};
var hierarchicalClustering$1 = {
  hierarchicalClustering,
  hca: hierarchicalClustering
};
var defaults$9 = defaults$g({
  distance: "euclidean",
  // distance metric to compare attributes between two nodes
  preference: "median",
  // suitability of a data point to serve as an exemplar
  damping: 0.8,
  // damping factor between [0.5, 1)
  maxIterations: 1e3,
  // max number of iterations to run
  minIterations: 100,
  // min number of iterations to run in order for clustering to stop
  attributes: [
    // functions to quantify the similarity between any two points
    // e.g. node => node.data('weight')
  ]
});
var setOptions4 = function setOptions5(options2) {
  var dmp = options2.damping;
  var pref = options2.preference;
  if (!(0.5 <= dmp && dmp < 1)) {
    error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
  }
  var validPrefs = ["median", "mean", "min", "max"];
  if (!(validPrefs.some(function(v2) {
    return v2 === pref;
  }) || number$1(pref))) {
    error("Preference must be one of [".concat(validPrefs.map(function(p2) {
      return "'".concat(p2, "'");
    }).join(", "), "] or a number.  Got: ").concat(pref));
  }
  return defaults$9(options2);
};
var getSimilarity2 = function getSimilarity3(type, n1, n2, attributes) {
  var attr2 = function attr3(n3, i2) {
    return attributes[i2](n3);
  };
  return -clusteringDistance(type, attributes.length, function(i2) {
    return attr2(n1, i2);
  }, function(i2) {
    return attr2(n2, i2);
  }, n1, n2);
};
var getPreference = function getPreference2(S2, preference) {
  var p2 = null;
  if (preference === "median") {
    p2 = median(S2);
  } else if (preference === "mean") {
    p2 = mean(S2);
  } else if (preference === "min") {
    p2 = min(S2);
  } else if (preference === "max") {
    p2 = max$1(S2);
  } else {
    p2 = preference;
  }
  return p2;
};
var findExemplars = function findExemplars2(n2, R2, A2) {
  var indices = [];
  for (var i2 = 0; i2 < n2; i2++) {
    if (R2[i2 * n2 + i2] + A2[i2 * n2 + i2] > 0) {
      indices.push(i2);
    }
  }
  return indices;
};
var assignClusters = function assignClusters2(n2, S2, exemplars) {
  var clusters = [];
  for (var i2 = 0; i2 < n2; i2++) {
    var index = -1;
    var max5 = -Infinity;
    for (var ei = 0; ei < exemplars.length; ei++) {
      var e2 = exemplars[ei];
      if (S2[i2 * n2 + e2] > max5) {
        index = e2;
        max5 = S2[i2 * n2 + e2];
      }
    }
    if (index > 0) {
      clusters.push(index);
    }
  }
  for (var _ei = 0; _ei < exemplars.length; _ei++) {
    clusters[exemplars[_ei]] = exemplars[_ei];
  }
  return clusters;
};
var assign3 = function assign4(n2, S2, exemplars) {
  var clusters = assignClusters(n2, S2, exemplars);
  for (var ei = 0; ei < exemplars.length; ei++) {
    var ii = [];
    for (var c2 = 0; c2 < clusters.length; c2++) {
      if (clusters[c2] === exemplars[ei]) {
        ii.push(c2);
      }
    }
    var maxI = -1;
    var maxSum = -Infinity;
    for (var i2 = 0; i2 < ii.length; i2++) {
      var sum = 0;
      for (var j2 = 0; j2 < ii.length; j2++) {
        sum += S2[ii[j2] * n2 + ii[i2]];
      }
      if (sum > maxSum) {
        maxI = i2;
        maxSum = sum;
      }
    }
    exemplars[ei] = ii[maxI];
  }
  clusters = assignClusters(n2, S2, exemplars);
  return clusters;
};
var affinityPropagation = function affinityPropagation2(options2) {
  var cy2 = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions4(options2);
  var id2position = {};
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    id2position[nodes3[i2].id()] = i2;
  }
  var n2;
  var n22;
  var S2;
  var p2;
  var R2;
  var A2;
  n2 = nodes3.length;
  n22 = n2 * n2;
  S2 = new Array(n22);
  for (var _i = 0; _i < n22; _i++) {
    S2[_i] = -Infinity;
  }
  for (var _i2 = 0; _i2 < n2; _i2++) {
    for (var j2 = 0; j2 < n2; j2++) {
      if (_i2 !== j2) {
        S2[_i2 * n2 + j2] = getSimilarity2(opts.distance, nodes3[_i2], nodes3[j2], opts.attributes);
      }
    }
  }
  p2 = getPreference(S2, opts.preference);
  for (var _i3 = 0; _i3 < n2; _i3++) {
    S2[_i3 * n2 + _i3] = p2;
  }
  R2 = new Array(n22);
  for (var _i4 = 0; _i4 < n22; _i4++) {
    R2[_i4] = 0;
  }
  A2 = new Array(n22);
  for (var _i5 = 0; _i5 < n22; _i5++) {
    A2[_i5] = 0;
  }
  var old = new Array(n2);
  var Rp = new Array(n2);
  var se2 = new Array(n2);
  for (var _i6 = 0; _i6 < n2; _i6++) {
    old[_i6] = 0;
    Rp[_i6] = 0;
    se2[_i6] = 0;
  }
  var e2 = new Array(n2 * opts.minIterations);
  for (var _i7 = 0; _i7 < e2.length; _i7++) {
    e2[_i7] = 0;
  }
  var iter;
  for (iter = 0; iter < opts.maxIterations; iter++) {
    for (var _i8 = 0; _i8 < n2; _i8++) {
      var max5 = -Infinity, max22 = -Infinity, maxI = -1, AS = 0;
      for (var _j = 0; _j < n2; _j++) {
        old[_j] = R2[_i8 * n2 + _j];
        AS = A2[_i8 * n2 + _j] + S2[_i8 * n2 + _j];
        if (AS >= max5) {
          max22 = max5;
          max5 = AS;
          maxI = _j;
        } else if (AS > max22) {
          max22 = AS;
        }
      }
      for (var _j2 = 0; _j2 < n2; _j2++) {
        R2[_i8 * n2 + _j2] = (1 - opts.damping) * (S2[_i8 * n2 + _j2] - max5) + opts.damping * old[_j2];
      }
      R2[_i8 * n2 + maxI] = (1 - opts.damping) * (S2[_i8 * n2 + maxI] - max22) + opts.damping * old[maxI];
    }
    for (var _i9 = 0; _i9 < n2; _i9++) {
      var sum = 0;
      for (var _j3 = 0; _j3 < n2; _j3++) {
        old[_j3] = A2[_j3 * n2 + _i9];
        Rp[_j3] = Math.max(0, R2[_j3 * n2 + _i9]);
        sum += Rp[_j3];
      }
      sum -= Rp[_i9];
      Rp[_i9] = R2[_i9 * n2 + _i9];
      sum += Rp[_i9];
      for (var _j4 = 0; _j4 < n2; _j4++) {
        A2[_j4 * n2 + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
      }
      A2[_i9 * n2 + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
    }
    var K2 = 0;
    for (var _i10 = 0; _i10 < n2; _i10++) {
      var E2 = A2[_i10 * n2 + _i10] + R2[_i10 * n2 + _i10] > 0 ? 1 : 0;
      e2[iter % opts.minIterations * n2 + _i10] = E2;
      K2 += E2;
    }
    if (K2 > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
      var _sum = 0;
      for (var _i11 = 0; _i11 < n2; _i11++) {
        se2[_i11] = 0;
        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
          se2[_i11] += e2[_j5 * n2 + _i11];
        }
        if (se2[_i11] === 0 || se2[_i11] === opts.minIterations) {
          _sum++;
        }
      }
      if (_sum === n2) {
        break;
      }
    }
  }
  var exemplarsIndices = findExemplars(n2, R2, A2);
  var clusterIndices = assign3(n2, S2, exemplarsIndices);
  var clusters = {};
  for (var c2 = 0; c2 < exemplarsIndices.length; c2++) {
    clusters[exemplarsIndices[c2]] = [];
  }
  for (var _i12 = 0; _i12 < nodes3.length; _i12++) {
    var pos = id2position[nodes3[_i12].id()];
    var clusterIndex = clusterIndices[pos];
    if (clusterIndex != null) {
      clusters[clusterIndex].push(nodes3[_i12]);
    }
  }
  var retClusters = new Array(exemplarsIndices.length);
  for (var _c = 0; _c < exemplarsIndices.length; _c++) {
    retClusters[_c] = cy2.collection(clusters[exemplarsIndices[_c]]);
  }
  return retClusters;
};
var affinityPropagation$1 = {
  affinityPropagation,
  ap: affinityPropagation
};
var hierholzerDefaults = defaults$g({
  root: void 0,
  directed: false
});
var elesfn$k = {
  hierholzer: function hierholzer(options2) {
    if (!plainObject(options2)) {
      var args = arguments;
      options2 = {
        root: args[0],
        directed: args[1]
      };
    }
    var _hierholzerDefaults = hierholzerDefaults(options2), root2 = _hierholzerDefaults.root, directed = _hierholzerDefaults.directed;
    var eles = this;
    var dflag = false;
    var oddIn;
    var oddOut;
    var startVertex;
    if (root2)
      startVertex = string(root2) ? this.filter(root2)[0].id() : root2[0].id();
    var nodes3 = {};
    var edges3 = {};
    if (directed) {
      eles.forEach(function(ele) {
        var id2 = ele.id();
        if (ele.isNode()) {
          var ind = ele.indegree(true);
          var outd = ele.outdegree(true);
          var d1 = ind - outd;
          var d22 = outd - ind;
          if (d1 == 1) {
            if (oddIn)
              dflag = true;
            else
              oddIn = id2;
          } else if (d22 == 1) {
            if (oddOut)
              dflag = true;
            else
              oddOut = id2;
          } else if (d22 > 1 || d1 > 1) {
            dflag = true;
          }
          nodes3[id2] = [];
          ele.outgoers().forEach(function(e2) {
            if (e2.isEdge())
              nodes3[id2].push(e2.id());
          });
        } else {
          edges3[id2] = [void 0, ele.target().id()];
        }
      });
    } else {
      eles.forEach(function(ele) {
        var id2 = ele.id();
        if (ele.isNode()) {
          var d4 = ele.degree(true);
          if (d4 % 2) {
            if (!oddIn)
              oddIn = id2;
            else if (!oddOut)
              oddOut = id2;
            else
              dflag = true;
          }
          nodes3[id2] = [];
          ele.connectedEdges().forEach(function(e2) {
            return nodes3[id2].push(e2.id());
          });
        } else {
          edges3[id2] = [ele.source().id(), ele.target().id()];
        }
      });
    }
    var result = {
      found: false,
      trail: void 0
    };
    if (dflag)
      return result;
    else if (oddOut && oddIn) {
      if (directed) {
        if (startVertex && oddOut != startVertex) {
          return result;
        }
        startVertex = oddOut;
      } else {
        if (startVertex && oddOut != startVertex && oddIn != startVertex) {
          return result;
        } else if (!startVertex) {
          startVertex = oddOut;
        }
      }
    } else {
      if (!startVertex)
        startVertex = eles[0].id();
    }
    var walk = function walk2(v2) {
      var currentNode = v2;
      var subtour2 = [v2];
      var adj, adjTail, adjHead;
      while (nodes3[currentNode].length) {
        adj = nodes3[currentNode].shift();
        adjTail = edges3[adj][0];
        adjHead = edges3[adj][1];
        if (currentNode != adjHead) {
          nodes3[adjHead] = nodes3[adjHead].filter(function(e2) {
            return e2 != adj;
          });
          currentNode = adjHead;
        } else if (!directed && currentNode != adjTail) {
          nodes3[adjTail] = nodes3[adjTail].filter(function(e2) {
            return e2 != adj;
          });
          currentNode = adjTail;
        }
        subtour2.unshift(adj);
        subtour2.unshift(currentNode);
      }
      return subtour2;
    };
    var trail = [];
    var subtour = [];
    subtour = walk(startVertex);
    while (subtour.length != 1) {
      if (nodes3[subtour[0]].length == 0) {
        trail.unshift(eles.getElementById(subtour.shift()));
        trail.unshift(eles.getElementById(subtour.shift()));
      } else {
        subtour = walk(subtour.shift()).concat(subtour);
      }
    }
    trail.unshift(eles.getElementById(subtour.shift()));
    for (var d2 in nodes3) {
      if (nodes3[d2].length) {
        return result;
      }
    }
    result.found = true;
    result.trail = this.spawn(trail, true);
    return result;
  }
};
var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected2() {
  var eles = this;
  var nodes3 = {};
  var id2 = 0;
  var edgeCount = 0;
  var components2 = [];
  var stack = [];
  var visitedEdges = {};
  var buildComponent = function buildComponent2(x2, y2) {
    var i2 = stack.length - 1;
    var cutset = [];
    var component2 = eles.spawn();
    while (stack[i2].x != x2 || stack[i2].y != y2) {
      cutset.push(stack.pop().edge);
      i2--;
    }
    cutset.push(stack.pop().edge);
    cutset.forEach(function(edge) {
      var connectedNodes = edge.connectedNodes().intersection(eles);
      component2.merge(edge);
      connectedNodes.forEach(function(node) {
        var nodeId = node.id();
        var connectedEdges = node.connectedEdges().intersection(eles);
        component2.merge(node);
        if (!nodes3[nodeId].cutVertex) {
          component2.merge(connectedEdges);
        } else {
          component2.merge(connectedEdges.filter(function(edge2) {
            return edge2.isLoop();
          }));
        }
      });
    });
    components2.push(component2);
  };
  var biconnectedSearch = function biconnectedSearch2(root2, currentNode, parent4) {
    if (root2 === parent4)
      edgeCount += 1;
    nodes3[currentNode] = {
      id: id2,
      low: id2++,
      cutVertex: false
    };
    var edges3 = eles.getElementById(currentNode).connectedEdges().intersection(eles);
    if (edges3.size() === 0) {
      components2.push(eles.spawn(eles.getElementById(currentNode)));
    } else {
      var sourceId, targetId, otherNodeId, edgeId;
      edges3.forEach(function(edge) {
        sourceId = edge.source().id();
        targetId = edge.target().id();
        otherNodeId = sourceId === currentNode ? targetId : sourceId;
        if (otherNodeId !== parent4) {
          edgeId = edge.id();
          if (!visitedEdges[edgeId]) {
            visitedEdges[edgeId] = true;
            stack.push({
              x: currentNode,
              y: otherNodeId,
              edge
            });
          }
          if (!(otherNodeId in nodes3)) {
            biconnectedSearch2(root2, otherNodeId, currentNode);
            nodes3[currentNode].low = Math.min(nodes3[currentNode].low, nodes3[otherNodeId].low);
            if (nodes3[currentNode].id <= nodes3[otherNodeId].low) {
              nodes3[currentNode].cutVertex = true;
              buildComponent(currentNode, otherNodeId);
            }
          } else {
            nodes3[currentNode].low = Math.min(nodes3[currentNode].low, nodes3[otherNodeId].id);
          }
        }
      });
    }
  };
  eles.forEach(function(ele) {
    if (ele.isNode()) {
      var nodeId = ele.id();
      if (!(nodeId in nodes3)) {
        edgeCount = 0;
        biconnectedSearch(nodeId, nodeId);
        nodes3[nodeId].cutVertex = edgeCount > 1;
      }
    }
  });
  var cutVertices = Object.keys(nodes3).filter(function(id3) {
    return nodes3[id3].cutVertex;
  }).map(function(id3) {
    return eles.getElementById(id3);
  });
  return {
    cut: eles.spawn(cutVertices),
    components: components2
  };
};
var hopcroftTarjanBiconnected$1 = {
  hopcroftTarjanBiconnected,
  htbc: hopcroftTarjanBiconnected,
  htb: hopcroftTarjanBiconnected,
  hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
};
var tarjanStronglyConnected = function tarjanStronglyConnected2() {
  var eles = this;
  var nodes3 = {};
  var index = 0;
  var components2 = [];
  var stack = [];
  var cut = eles.spawn(eles);
  var stronglyConnectedSearch = function stronglyConnectedSearch2(sourceNodeId) {
    stack.push(sourceNodeId);
    nodes3[sourceNodeId] = {
      index,
      low: index++,
      explored: false
    };
    var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
    connectedEdges.forEach(function(edge) {
      var targetNodeId = edge.target().id();
      if (targetNodeId !== sourceNodeId) {
        if (!(targetNodeId in nodes3)) {
          stronglyConnectedSearch2(targetNodeId);
        }
        if (!nodes3[targetNodeId].explored) {
          nodes3[sourceNodeId].low = Math.min(nodes3[sourceNodeId].low, nodes3[targetNodeId].low);
        }
      }
    });
    if (nodes3[sourceNodeId].index === nodes3[sourceNodeId].low) {
      var componentNodes = eles.spawn();
      for (; ; ) {
        var nodeId = stack.pop();
        componentNodes.merge(eles.getElementById(nodeId));
        nodes3[nodeId].low = nodes3[sourceNodeId].index;
        nodes3[nodeId].explored = true;
        if (nodeId === sourceNodeId) {
          break;
        }
      }
      var componentEdges = componentNodes.edgesWith(componentNodes);
      var component2 = componentNodes.merge(componentEdges);
      components2.push(component2);
      cut = cut.difference(component2);
    }
  };
  eles.forEach(function(ele) {
    if (ele.isNode()) {
      var nodeId = ele.id();
      if (!(nodeId in nodes3)) {
        stronglyConnectedSearch(nodeId);
      }
    }
  });
  return {
    cut,
    components: components2
  };
};
var tarjanStronglyConnected$1 = {
  tarjanStronglyConnected,
  tsc: tarjanStronglyConnected,
  tscc: tarjanStronglyConnected,
  tarjanStronglyConnectedComponents: tarjanStronglyConnected
};
var elesfn$j = {};
[elesfn$v, elesfn$u, elesfn$t, elesfn$s, elesfn$r, elesfn$q, elesfn$p, elesfn$o, elesfn$n, elesfn$m, elesfn$l, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$k, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function(props) {
  extend$1(elesfn$j, props);
});
/*!
Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
Licensed under The MIT License (http://opensource.org/licenses/MIT)
*/
var STATE_PENDING = 0;
var STATE_FULFILLED = 1;
var STATE_REJECTED = 2;
var api = function api2(executor) {
  if (!(this instanceof api2))
    return new api2(executor);
  this.id = "Thenable/1.0.7";
  this.state = STATE_PENDING;
  this.fulfillValue = void 0;
  this.rejectReason = void 0;
  this.onFulfilled = [];
  this.onRejected = [];
  this.proxy = {
    then: this.then.bind(this)
  };
  if (typeof executor === "function")
    executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
};
api.prototype = {
  /*  promise resolving methods  */
  fulfill: function fulfill(value) {
    return deliver(this, STATE_FULFILLED, "fulfillValue", value);
  },
  reject: function reject(value) {
    return deliver(this, STATE_REJECTED, "rejectReason", value);
  },
  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
  then: function then(onFulfilled, onRejected) {
    var curr = this;
    var next2 = new api();
    curr.onFulfilled.push(resolver(onFulfilled, next2, "fulfill"));
    curr.onRejected.push(resolver(onRejected, next2, "reject"));
    execute(curr);
    return next2.proxy;
  }
};
var deliver = function deliver2(curr, state, name2, value) {
  if (curr.state === STATE_PENDING) {
    curr.state = state;
    curr[name2] = value;
    execute(curr);
  }
  return curr;
};
var execute = function execute2(curr) {
  if (curr.state === STATE_FULFILLED)
    execute_handlers(curr, "onFulfilled", curr.fulfillValue);
  else if (curr.state === STATE_REJECTED)
    execute_handlers(curr, "onRejected", curr.rejectReason);
};
var execute_handlers = function execute_handlers2(curr, name2, value) {
  if (curr[name2].length === 0)
    return;
  var handlers = curr[name2];
  curr[name2] = [];
  var func = function func2() {
    for (var i2 = 0; i2 < handlers.length; i2++) {
      handlers[i2](value);
    }
  };
  if (typeof setImmediate === "function")
    setImmediate(func);
  else
    setTimeout(func, 0);
};
var resolver = function resolver2(cb, next2, method) {
  return function(value) {
    if (typeof cb !== "function")
      next2[method].call(next2, value);
    else {
      var result;
      try {
        result = cb(value);
      } catch (e2) {
        next2.reject(e2);
        return;
      }
      resolve(next2, result);
    }
  };
};
var resolve = function resolve2(promise4, x2) {
  if (promise4 === x2 || promise4.proxy === x2) {
    promise4.reject(new TypeError("cannot resolve promise with itself"));
    return;
  }
  var then2;
  if (_typeof$1(x2) === "object" && x2 !== null || typeof x2 === "function") {
    try {
      then2 = x2.then;
    } catch (e2) {
      promise4.reject(e2);
      return;
    }
  }
  if (typeof then2 === "function") {
    var resolved = false;
    try {
      then2.call(
        x2,
        /*  resolvePromise  */
        /*  [Promises/A+ 2.3.3.3.1]  */
        function(y2) {
          if (resolved)
            return;
          resolved = true;
          if (y2 === x2)
            promise4.reject(new TypeError("circular thenable chain"));
          else
            resolve2(promise4, y2);
        },
        /*  rejectPromise  */
        /*  [Promises/A+ 2.3.3.3.2]  */
        function(r2) {
          if (resolved)
            return;
          resolved = true;
          promise4.reject(r2);
        }
      );
    } catch (e2) {
      if (!resolved)
        promise4.reject(e2);
    }
    return;
  }
  promise4.fulfill(x2);
};
api.all = function(ps) {
  return new api(function(resolveAll, rejectAll) {
    var vals = new Array(ps.length);
    var doneCount = 0;
    var fulfill2 = function fulfill3(i3, val) {
      vals[i3] = val;
      doneCount++;
      if (doneCount === ps.length) {
        resolveAll(vals);
      }
    };
    for (var i2 = 0; i2 < ps.length; i2++) {
      (function(i3) {
        var p2 = ps[i3];
        var isPromise = p2 != null && p2.then != null;
        if (isPromise) {
          p2.then(function(val2) {
            fulfill2(i3, val2);
          }, function(err) {
            rejectAll(err);
          });
        } else {
          var val = p2;
          fulfill2(i3, val);
        }
      })(i2);
    }
  });
};
api.resolve = function(val) {
  return new api(function(resolve3, reject2) {
    resolve3(val);
  });
};
api.reject = function(val) {
  return new api(function(resolve3, reject2) {
    reject2(val);
  });
};
var Promise$1 = typeof Promise !== "undefined" ? Promise : api;
var Animation$2 = function Animation(target, opts, opts2) {
  var isCore = core(target);
  var isEle = !isCore;
  var _p = this._private = extend$1({
    duration: 1e3
  }, opts, opts2);
  _p.target = target;
  _p.style = _p.style || _p.css;
  _p.started = false;
  _p.playing = false;
  _p.hooked = false;
  _p.applying = false;
  _p.progress = 0;
  _p.completes = [];
  _p.frames = [];
  if (_p.complete && fn$6(_p.complete)) {
    _p.completes.push(_p.complete);
  }
  if (isEle) {
    var pos = target.position();
    _p.startPosition = _p.startPosition || {
      x: pos.x,
      y: pos.y
    };
    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
  }
  if (isCore) {
    var pan2 = target.pan();
    _p.startPan = {
      x: pan2.x,
      y: pan2.y
    };
    _p.startZoom = target.zoom();
  }
  this.length = 1;
  this[0] = this;
};
var anifn = Animation$2.prototype;
extend$1(anifn, {
  instanceString: function instanceString() {
    return "animation";
  },
  hook: function hook() {
    var _p = this._private;
    if (!_p.hooked) {
      var q2;
      var tAni = _p.target._private.animation;
      if (_p.queue) {
        q2 = tAni.queue;
      } else {
        q2 = tAni.current;
      }
      q2.push(this);
      if (elementOrCollection(_p.target)) {
        _p.target.cy().addToAnimationPool(_p.target);
      }
      _p.hooked = true;
    }
    return this;
  },
  play: function play() {
    var _p = this._private;
    if (_p.progress === 1) {
      _p.progress = 0;
    }
    _p.playing = true;
    _p.started = false;
    _p.stopped = false;
    this.hook();
    return this;
  },
  playing: function playing() {
    return this._private.playing;
  },
  apply: function apply() {
    var _p = this._private;
    _p.applying = true;
    _p.started = false;
    _p.stopped = false;
    this.hook();
    return this;
  },
  applying: function applying() {
    return this._private.applying;
  },
  pause: function pause() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    return this;
  },
  stop: function stop() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    _p.stopped = true;
    return this;
  },
  rewind: function rewind() {
    return this.progress(0);
  },
  fastforward: function fastforward() {
    return this.progress(1);
  },
  time: function time(t3) {
    var _p = this._private;
    if (t3 === void 0) {
      return _p.progress * _p.duration;
    } else {
      return this.progress(t3 / _p.duration);
    }
  },
  progress: function progress(p2) {
    var _p = this._private;
    var wasPlaying = _p.playing;
    if (p2 === void 0) {
      return _p.progress;
    } else {
      if (wasPlaying) {
        this.pause();
      }
      _p.progress = p2;
      _p.started = false;
      if (wasPlaying) {
        this.play();
      }
    }
    return this;
  },
  completed: function completed() {
    return this._private.progress === 1;
  },
  reverse: function reverse() {
    var _p = this._private;
    var wasPlaying = _p.playing;
    if (wasPlaying) {
      this.pause();
    }
    _p.progress = 1 - _p.progress;
    _p.started = false;
    var swap = function swap2(a2, b2) {
      var _pa = _p[a2];
      if (_pa == null) {
        return;
      }
      _p[a2] = _p[b2];
      _p[b2] = _pa;
    };
    swap("zoom", "startZoom");
    swap("pan", "startPan");
    swap("position", "startPosition");
    if (_p.style) {
      for (var i2 = 0; i2 < _p.style.length; i2++) {
        var prop = _p.style[i2];
        var name2 = prop.name;
        var startStyleProp = _p.startStyle[name2];
        _p.startStyle[name2] = prop;
        _p.style[i2] = startStyleProp;
      }
    }
    if (wasPlaying) {
      this.play();
    }
    return this;
  },
  promise: function promise3(type) {
    var _p = this._private;
    var arr;
    switch (type) {
      case "frame":
        arr = _p.frames;
        break;
      default:
      case "complete":
      case "completed":
        arr = _p.completes;
    }
    return new Promise$1(function(resolve3, reject2) {
      arr.push(function() {
        resolve3();
      });
    });
  }
});
anifn.complete = anifn.completed;
anifn.run = anifn.play;
anifn.running = anifn.playing;
var define$3 = {
  animated: function animated() {
    return function animatedImpl() {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return false;
      }
      var ele = all[0];
      if (ele) {
        return ele._private.animation.current.length > 0;
      }
    };
  },
  // animated
  clearQueue: function clearQueue() {
    return function clearQueueImpl() {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return this;
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        ele._private.animation.queue = [];
      }
      return this;
    };
  },
  // clearQueue
  delay: function delay() {
    return function delayImpl(time2, complete) {
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return this;
      }
      return this.animate({
        delay: time2,
        duration: time2,
        complete
      });
    };
  },
  // delay
  delayAnimation: function delayAnimation() {
    return function delayAnimationImpl(time2, complete) {
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return this;
      }
      return this.animation({
        delay: time2,
        duration: time2,
        complete
      });
    };
  },
  // delay
  animation: function animation() {
    return function animationImpl(properties, params) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy2 = this._private.cy || this;
      var isCore = !selfIsArrayLike;
      var isEles = !isCore;
      if (!cy2.styleEnabled()) {
        return this;
      }
      var style3 = cy2.style();
      properties = extend$1({}, properties, params);
      var propertiesEmpty = Object.keys(properties).length === 0;
      if (propertiesEmpty) {
        return new Animation$2(all[0], properties);
      }
      if (properties.duration === void 0) {
        properties.duration = 400;
      }
      switch (properties.duration) {
        case "slow":
          properties.duration = 600;
          break;
        case "fast":
          properties.duration = 200;
          break;
      }
      if (isEles) {
        properties.style = style3.getPropsList(properties.style || properties.css);
        properties.css = void 0;
      }
      if (isEles && properties.renderedPosition != null) {
        var rpos = properties.renderedPosition;
        var pan2 = cy2.pan();
        var zoom2 = cy2.zoom();
        properties.position = renderedToModelPosition(rpos, zoom2, pan2);
      }
      if (isCore && properties.panBy != null) {
        var panBy2 = properties.panBy;
        var cyPan = cy2.pan();
        properties.pan = {
          x: cyPan.x + panBy2.x,
          y: cyPan.y + panBy2.y
        };
      }
      var center2 = properties.center || properties.centre;
      if (isCore && center2 != null) {
        var centerPan = cy2.getCenterPan(center2.eles, properties.zoom);
        if (centerPan != null) {
          properties.pan = centerPan;
        }
      }
      if (isCore && properties.fit != null) {
        var fit2 = properties.fit;
        var fitVp = cy2.getFitViewport(fit2.eles || fit2.boundingBox, fit2.padding);
        if (fitVp != null) {
          properties.pan = fitVp.pan;
          properties.zoom = fitVp.zoom;
        }
      }
      if (isCore && plainObject(properties.zoom)) {
        var vp = cy2.getZoomedViewport(properties.zoom);
        if (vp != null) {
          if (vp.zoomed) {
            properties.zoom = vp.zoom;
          }
          if (vp.panned) {
            properties.pan = vp.pan;
          }
        } else {
          properties.zoom = null;
        }
      }
      return new Animation$2(all[0], properties);
    };
  },
  // animate
  animate: function animate() {
    return function animateImpl(properties, params) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return this;
      }
      if (params) {
        properties = extend$1({}, properties, params);
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        var queue = ele.animated() && (properties.queue === void 0 || properties.queue);
        var ani = ele.animation(properties, queue ? {
          queue: true
        } : void 0);
        ani.play();
      }
      return this;
    };
  },
  // animate
  stop: function stop2() {
    return function stopImpl(clearQueue2, jumpToEnd) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy2 = this._private.cy || this;
      if (!cy2.styleEnabled()) {
        return this;
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        var _p = ele._private;
        var anis = _p.animation.current;
        for (var j2 = 0; j2 < anis.length; j2++) {
          var ani = anis[j2];
          var ani_p = ani._private;
          if (jumpToEnd) {
            ani_p.duration = 0;
          }
        }
        if (clearQueue2) {
          _p.animation.queue = [];
        }
        if (!jumpToEnd) {
          _p.animation.current = [];
        }
      }
      cy2.notify("draw");
      return this;
    };
  }
  // stop
};
var define$2 = {
  // access data field
  data: function data(params) {
    var defaults3 = {
      field: "data",
      bindingEvent: "data",
      allowBinding: false,
      allowSetting: false,
      allowGetting: false,
      settingEvent: "data",
      settingTriggersEvent: false,
      triggerFnName: "trigger",
      immutableKeys: {},
      // key => true if immutable
      updateStyle: false,
      beforeGet: function beforeGet2(self2) {
      },
      beforeSet: function beforeSet3(self2, obj) {
      },
      onSet: function onSet3(self2) {
      },
      canSet: function canSet2(self2) {
        return true;
      }
    };
    params = extend$1({}, defaults3, params);
    return function dataImpl(name2, value) {
      var p2 = params;
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var single = selfIsArrayLike ? self2[0] : self2;
      if (string(name2)) {
        var isPathLike = name2.indexOf(".") !== -1;
        var path = isPathLike && toPath__default["default"](name2);
        if (p2.allowGetting && value === void 0) {
          var ret;
          if (single) {
            p2.beforeGet(single);
            if (path && single._private[p2.field][name2] === void 0) {
              ret = get__default["default"](single._private[p2.field], path);
            } else {
              ret = single._private[p2.field][name2];
            }
          }
          return ret;
        } else if (p2.allowSetting && value !== void 0) {
          var valid2 = !p2.immutableKeys[name2];
          if (valid2) {
            var change = _defineProperty({}, name2, value);
            p2.beforeSet(self2, change);
            for (var i2 = 0, l2 = all.length; i2 < l2; i2++) {
              var ele = all[i2];
              if (p2.canSet(ele)) {
                if (path && single._private[p2.field][name2] === void 0) {
                  set__default["default"](ele._private[p2.field], path, value);
                } else {
                  ele._private[p2.field][name2] = value;
                }
              }
            }
            if (p2.updateStyle) {
              self2.updateStyle();
            }
            p2.onSet(self2);
            if (p2.settingTriggersEvent) {
              self2[p2.triggerFnName](p2.settingEvent);
            }
          }
        }
      } else if (p2.allowSetting && plainObject(name2)) {
        var obj = name2;
        var k2, v2;
        var keys = Object.keys(obj);
        p2.beforeSet(self2, obj);
        for (var _i = 0; _i < keys.length; _i++) {
          k2 = keys[_i];
          v2 = obj[k2];
          var _valid = !p2.immutableKeys[k2];
          if (_valid) {
            for (var j2 = 0; j2 < all.length; j2++) {
              var _ele = all[j2];
              if (p2.canSet(_ele)) {
                _ele._private[p2.field][k2] = v2;
              }
            }
          }
        }
        if (p2.updateStyle) {
          self2.updateStyle();
        }
        p2.onSet(self2);
        if (p2.settingTriggersEvent) {
          self2[p2.triggerFnName](p2.settingEvent);
        }
      } else if (p2.allowBinding && fn$6(name2)) {
        var fn3 = name2;
        self2.on(p2.bindingEvent, fn3);
      } else if (p2.allowGetting && name2 === void 0) {
        var _ret;
        if (single) {
          p2.beforeGet(single);
          _ret = single._private[p2.field];
        }
        return _ret;
      }
      return self2;
    };
  },
  // data
  // remove data field
  removeData: function removeData(params) {
    var defaults3 = {
      field: "data",
      event: "data",
      triggerFnName: "trigger",
      triggerEvent: false,
      immutableKeys: {}
      // key => true if immutable
    };
    params = extend$1({}, defaults3, params);
    return function removeDataImpl(names) {
      var p2 = params;
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      if (string(names)) {
        var keys = names.split(/\s+/);
        var l2 = keys.length;
        for (var i2 = 0; i2 < l2; i2++) {
          var key = keys[i2];
          if (emptyString(key)) {
            continue;
          }
          var valid2 = !p2.immutableKeys[key];
          if (valid2) {
            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
              all[i_a]._private[p2.field][key] = void 0;
            }
          }
        }
        if (p2.triggerEvent) {
          self2[p2.triggerFnName](p2.event);
        }
      } else if (names === void 0) {
        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
          var _privateFields = all[_i_a]._private[p2.field];
          var _keys = Object.keys(_privateFields);
          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
            var _key = _keys[_i2];
            var validKeyToDelete = !p2.immutableKeys[_key];
            if (validKeyToDelete) {
              _privateFields[_key] = void 0;
            }
          }
        }
        if (p2.triggerEvent) {
          self2[p2.triggerFnName](p2.event);
        }
      }
      return self2;
    };
  }
  // removeData
};
var define$1 = {
  eventAliasesOn: function eventAliasesOn(proto) {
    var p2 = proto;
    p2.addListener = p2.listen = p2.bind = p2.on;
    p2.unlisten = p2.unbind = p2.off = p2.removeListener;
    p2.trigger = p2.emit;
    p2.pon = p2.promiseOn = function(events, selector) {
      var self2 = this;
      var args = Array.prototype.slice.call(arguments, 0);
      return new Promise$1(function(resolve3, reject2) {
        var callback = function callback2(e2) {
          self2.off.apply(self2, offArgs);
          resolve3(e2);
        };
        var onArgs = args.concat([callback]);
        var offArgs = onArgs.concat([]);
        self2.on.apply(self2, onArgs);
      });
    };
  }
};
var define = {};
[define$3, define$2, define$1].forEach(function(m2) {
  extend$1(define, m2);
});
var elesfn$i = {
  animate: define.animate(),
  animation: define.animation(),
  animated: define.animated(),
  clearQueue: define.clearQueue(),
  delay: define.delay(),
  delayAnimation: define.delayAnimation(),
  stop: define.stop()
};
var elesfn$h = {
  classes: function classes(_classes) {
    var self2 = this;
    if (_classes === void 0) {
      var ret = [];
      self2[0]._private.classes.forEach(function(cls2) {
        return ret.push(cls2);
      });
      return ret;
    } else if (!array(_classes)) {
      _classes = (_classes || "").match(/\S+/g) || [];
    }
    var changed = [];
    var classesSet = new Set$1(_classes);
    for (var j2 = 0; j2 < self2.length; j2++) {
      var ele = self2[j2];
      var _p = ele._private;
      var eleClasses = _p.classes;
      var changedEle = false;
      for (var i2 = 0; i2 < _classes.length; i2++) {
        var cls = _classes[i2];
        var eleHasClass = eleClasses.has(cls);
        if (!eleHasClass) {
          changedEle = true;
          break;
        }
      }
      if (!changedEle) {
        changedEle = eleClasses.size !== _classes.length;
      }
      if (changedEle) {
        _p.classes = classesSet;
        changed.push(ele);
      }
    }
    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit("class");
    }
    return self2;
  },
  addClass: function addClass(classes2) {
    return this.toggleClass(classes2, true);
  },
  hasClass: function hasClass(className) {
    var ele = this[0];
    return ele != null && ele._private.classes.has(className);
  },
  toggleClass: function toggleClass(classes2, toggle) {
    if (!array(classes2)) {
      classes2 = classes2.match(/\S+/g) || [];
    }
    var self2 = this;
    var toggleUndefd = toggle === void 0;
    var changed = [];
    for (var i2 = 0, il = self2.length; i2 < il; i2++) {
      var ele = self2[i2];
      var eleClasses = ele._private.classes;
      var changedEle = false;
      for (var j2 = 0; j2 < classes2.length; j2++) {
        var cls = classes2[j2];
        var hasClass2 = eleClasses.has(cls);
        var changedNow = false;
        if (toggle || toggleUndefd && !hasClass2) {
          eleClasses.add(cls);
          changedNow = true;
        } else if (!toggle || toggleUndefd && hasClass2) {
          eleClasses["delete"](cls);
          changedNow = true;
        }
        if (!changedEle && changedNow) {
          changed.push(ele);
          changedEle = true;
        }
      }
    }
    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit("class");
    }
    return self2;
  },
  removeClass: function removeClass(classes2) {
    return this.toggleClass(classes2, false);
  },
  flashClass: function flashClass(classes2, duration) {
    var self2 = this;
    if (duration == null) {
      duration = 250;
    } else if (duration === 0) {
      return self2;
    }
    self2.addClass(classes2);
    setTimeout(function() {
      self2.removeClass(classes2);
    }, duration);
    return self2;
  }
};
elesfn$h.className = elesfn$h.classNames = elesfn$h.classes;
var tokens = {
  metaChar: "[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]",
  // chars we need to escape in let names, etc
  comparatorOp: "=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=",
  // binary comparison op (used in data selectors)
  boolOp: "\\?|\\!|\\^",
  // boolean (unary) operators (used in data selectors)
  string: `"(?:\\\\"|[^"])*"|'(?:\\\\'|[^'])*'`,
  // string literals (used in data selectors) -- doublequotes | singlequotes
  number: number2,
  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
  meta: "degree|indegree|outdegree",
  // allowed metadata fields (i.e. allowed functions to use from Collection)
  separator: "\\s*,\\s*",
  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
  descendant: "\\s+",
  child: "\\s+>\\s+",
  subject: "\\$",
  group: "node|edge|\\*",
  directedEdge: "\\s+->\\s+",
  undirectedEdge: "\\s+<->\\s+"
};
tokens.variable = "(?:[\\w-.]|(?:\\\\" + tokens.metaChar + "))+";
tokens.className = "(?:[\\w-]|(?:\\\\" + tokens.metaChar + "))+";
tokens.value = tokens.string + "|" + tokens.number;
tokens.id = tokens.variable;
(function() {
  var ops, op, i2;
  ops = tokens.comparatorOp.split("|");
  for (i2 = 0; i2 < ops.length; i2++) {
    op = ops[i2];
    tokens.comparatorOp += "|@" + op;
  }
  ops = tokens.comparatorOp.split("|");
  for (i2 = 0; i2 < ops.length; i2++) {
    op = ops[i2];
    if (op.indexOf("!") >= 0) {
      continue;
    }
    if (op === "=") {
      continue;
    }
    tokens.comparatorOp += "|\\!" + op;
  }
})();
var newQuery = function newQuery2() {
  return {
    checks: []
  };
};
var Type = {
  /** E.g. node */
  GROUP: 0,
  /** A collection of elements */
  COLLECTION: 1,
  /** A filter(ele) function */
  FILTER: 2,
  /** E.g. [foo > 1] */
  DATA_COMPARE: 3,
  /** E.g. [foo] */
  DATA_EXIST: 4,
  /** E.g. [?foo] */
  DATA_BOOL: 5,
  /** E.g. [[degree > 2]] */
  META_COMPARE: 6,
  /** E.g. :selected */
  STATE: 7,
  /** E.g. #foo */
  ID: 8,
  /** E.g. .foo */
  CLASS: 9,
  /** E.g. #foo <-> #bar */
  UNDIRECTED_EDGE: 10,
  /** E.g. #foo -> #bar */
  DIRECTED_EDGE: 11,
  /** E.g. $#foo -> #bar */
  NODE_SOURCE: 12,
  /** E.g. #foo -> $#bar */
  NODE_TARGET: 13,
  /** E.g. $#foo <-> #bar */
  NODE_NEIGHBOR: 14,
  /** E.g. #foo > #bar */
  CHILD: 15,
  /** E.g. #foo #bar */
  DESCENDANT: 16,
  /** E.g. $#foo > #bar */
  PARENT: 17,
  /** E.g. $#foo #bar */
  ANCESTOR: 18,
  /** E.g. #foo > $bar > #baz */
  COMPOUND_SPLIT: 19,
  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
  TRUE: 20
};
var stateSelectors = [{
  selector: ":selected",
  matches: function matches(ele) {
    return ele.selected();
  }
}, {
  selector: ":unselected",
  matches: function matches2(ele) {
    return !ele.selected();
  }
}, {
  selector: ":selectable",
  matches: function matches3(ele) {
    return ele.selectable();
  }
}, {
  selector: ":unselectable",
  matches: function matches4(ele) {
    return !ele.selectable();
  }
}, {
  selector: ":locked",
  matches: function matches5(ele) {
    return ele.locked();
  }
}, {
  selector: ":unlocked",
  matches: function matches6(ele) {
    return !ele.locked();
  }
}, {
  selector: ":visible",
  matches: function matches7(ele) {
    return ele.visible();
  }
}, {
  selector: ":hidden",
  matches: function matches8(ele) {
    return !ele.visible();
  }
}, {
  selector: ":transparent",
  matches: function matches9(ele) {
    return ele.transparent();
  }
}, {
  selector: ":grabbed",
  matches: function matches10(ele) {
    return ele.grabbed();
  }
}, {
  selector: ":free",
  matches: function matches11(ele) {
    return !ele.grabbed();
  }
}, {
  selector: ":removed",
  matches: function matches12(ele) {
    return ele.removed();
  }
}, {
  selector: ":inside",
  matches: function matches13(ele) {
    return !ele.removed();
  }
}, {
  selector: ":grabbable",
  matches: function matches14(ele) {
    return ele.grabbable();
  }
}, {
  selector: ":ungrabbable",
  matches: function matches15(ele) {
    return !ele.grabbable();
  }
}, {
  selector: ":animated",
  matches: function matches16(ele) {
    return ele.animated();
  }
}, {
  selector: ":unanimated",
  matches: function matches17(ele) {
    return !ele.animated();
  }
}, {
  selector: ":parent",
  matches: function matches18(ele) {
    return ele.isParent();
  }
}, {
  selector: ":childless",
  matches: function matches19(ele) {
    return ele.isChildless();
  }
}, {
  selector: ":child",
  matches: function matches20(ele) {
    return ele.isChild();
  }
}, {
  selector: ":orphan",
  matches: function matches21(ele) {
    return ele.isOrphan();
  }
}, {
  selector: ":nonorphan",
  matches: function matches22(ele) {
    return ele.isChild();
  }
}, {
  selector: ":compound",
  matches: function matches23(ele) {
    if (ele.isNode()) {
      return ele.isParent();
    } else {
      return ele.source().isParent() || ele.target().isParent();
    }
  }
}, {
  selector: ":loop",
  matches: function matches24(ele) {
    return ele.isLoop();
  }
}, {
  selector: ":simple",
  matches: function matches25(ele) {
    return ele.isSimple();
  }
}, {
  selector: ":active",
  matches: function matches26(ele) {
    return ele.active();
  }
}, {
  selector: ":inactive",
  matches: function matches27(ele) {
    return !ele.active();
  }
}, {
  selector: ":backgrounding",
  matches: function matches28(ele) {
    return ele.backgrounding();
  }
}, {
  selector: ":nonbackgrounding",
  matches: function matches29(ele) {
    return !ele.backgrounding();
  }
}].sort(function(a2, b2) {
  return descending(a2.selector, b2.selector);
});
var lookup = function() {
  var selToFn = {};
  var s2;
  for (var i2 = 0; i2 < stateSelectors.length; i2++) {
    s2 = stateSelectors[i2];
    selToFn[s2.selector] = s2.matches;
  }
  return selToFn;
}();
var stateSelectorMatches = function stateSelectorMatches2(sel, ele) {
  return lookup[sel](ele);
};
var stateSelectorRegex = "(" + stateSelectors.map(function(s2) {
  return s2.selector;
}).join("|") + ")";
var cleanMetaChars = function cleanMetaChars2(str) {
  return str.replace(new RegExp("\\\\(" + tokens.metaChar + ")", "g"), function(match2, $1) {
    return $1;
  });
};
var replaceLastQuery = function replaceLastQuery2(selector, examiningQuery, replacementQuery) {
  selector[selector.length - 1] = replacementQuery;
};
var exprs = [{
  name: "group",
  // just used for identifying when debugging
  query: true,
  regex: "(" + tokens.group + ")",
  populate: function populate(selector, query, _ref) {
    var _ref2 = _slicedToArray(_ref, 1), group2 = _ref2[0];
    query.checks.push({
      type: Type.GROUP,
      value: group2 === "*" ? group2 : group2 + "s"
    });
  }
}, {
  name: "state",
  query: true,
  regex: stateSelectorRegex,
  populate: function populate2(selector, query, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 1), state = _ref4[0];
    query.checks.push({
      type: Type.STATE,
      value: state
    });
  }
}, {
  name: "id",
  query: true,
  regex: "\\#(" + tokens.id + ")",
  populate: function populate3(selector, query, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 1), id2 = _ref6[0];
    query.checks.push({
      type: Type.ID,
      value: cleanMetaChars(id2)
    });
  }
}, {
  name: "className",
  query: true,
  regex: "\\.(" + tokens.className + ")",
  populate: function populate4(selector, query, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 1), className = _ref8[0];
    query.checks.push({
      type: Type.CLASS,
      value: cleanMetaChars(className)
    });
  }
}, {
  name: "dataExists",
  query: true,
  regex: "\\[\\s*(" + tokens.variable + ")\\s*\\]",
  populate: function populate5(selector, query, _ref9) {
    var _ref10 = _slicedToArray(_ref9, 1), variable = _ref10[0];
    query.checks.push({
      type: Type.DATA_EXIST,
      field: cleanMetaChars(variable)
    });
  }
}, {
  name: "dataCompare",
  query: true,
  regex: "\\[\\s*(" + tokens.variable + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.value + ")\\s*\\]",
  populate: function populate6(selector, query, _ref11) {
    var _ref12 = _slicedToArray(_ref11, 3), variable = _ref12[0], comparatorOp = _ref12[1], value = _ref12[2];
    var valueIsString = new RegExp("^" + tokens.string + "$").exec(value) != null;
    if (valueIsString) {
      value = value.substring(1, value.length - 1);
    } else {
      value = parseFloat(value);
    }
    query.checks.push({
      type: Type.DATA_COMPARE,
      field: cleanMetaChars(variable),
      operator: comparatorOp,
      value
    });
  }
}, {
  name: "dataBool",
  query: true,
  regex: "\\[\\s*(" + tokens.boolOp + ")\\s*(" + tokens.variable + ")\\s*\\]",
  populate: function populate7(selector, query, _ref13) {
    var _ref14 = _slicedToArray(_ref13, 2), boolOp = _ref14[0], variable = _ref14[1];
    query.checks.push({
      type: Type.DATA_BOOL,
      field: cleanMetaChars(variable),
      operator: boolOp
    });
  }
}, {
  name: "metaCompare",
  query: true,
  regex: "\\[\\[\\s*(" + tokens.meta + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.number + ")\\s*\\]\\]",
  populate: function populate8(selector, query, _ref15) {
    var _ref16 = _slicedToArray(_ref15, 3), meta3 = _ref16[0], comparatorOp = _ref16[1], number3 = _ref16[2];
    query.checks.push({
      type: Type.META_COMPARE,
      field: cleanMetaChars(meta3),
      operator: comparatorOp,
      value: parseFloat(number3)
    });
  }
}, {
  name: "nextQuery",
  separator: true,
  regex: tokens.separator,
  populate: function populate9(selector, query) {
    var currentSubject = selector.currentSubject;
    var edgeCount = selector.edgeCount;
    var compoundCount = selector.compoundCount;
    var lastQ = selector[selector.length - 1];
    if (currentSubject != null) {
      lastQ.subject = currentSubject;
      selector.currentSubject = null;
    }
    lastQ.edgeCount = edgeCount;
    lastQ.compoundCount = compoundCount;
    selector.edgeCount = 0;
    selector.compoundCount = 0;
    var nextQuery = selector[selector.length++] = newQuery();
    return nextQuery;
  }
}, {
  name: "directedEdge",
  separator: true,
  regex: tokens.directedEdge,
  populate: function populate10(selector, query) {
    if (selector.currentSubject == null) {
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.DIRECTED_EDGE,
        source,
        target
      });
      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++;
      return target;
    } else {
      var srcTgtQ = newQuery();
      var _source = query;
      var _target = newQuery();
      srcTgtQ.checks.push({
        type: Type.NODE_SOURCE,
        source: _source,
        target: _target
      });
      replaceLastQuery(selector, query, srcTgtQ);
      selector.edgeCount++;
      return _target;
    }
  }
}, {
  name: "undirectedEdge",
  separator: true,
  regex: tokens.undirectedEdge,
  populate: function populate11(selector, query) {
    if (selector.currentSubject == null) {
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.UNDIRECTED_EDGE,
        nodes: [source, target]
      });
      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++;
      return target;
    } else {
      var nhoodQ = newQuery();
      var node = query;
      var neighbor = newQuery();
      nhoodQ.checks.push({
        type: Type.NODE_NEIGHBOR,
        node,
        neighbor
      });
      replaceLastQuery(selector, query, nhoodQ);
      return neighbor;
    }
  }
}, {
  name: "child",
  separator: true,
  regex: tokens.child,
  populate: function populate12(selector, query) {
    if (selector.currentSubject == null) {
      var parentChildQuery = newQuery();
      var child = newQuery();
      var parent4 = selector[selector.length - 1];
      parentChildQuery.checks.push({
        type: Type.CHILD,
        parent: parent4,
        child
      });
      replaceLastQuery(selector, query, parentChildQuery);
      selector.compoundCount++;
      return child;
    } else if (selector.currentSubject === query) {
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();
      var _child = newQuery();
      var _parent = newQuery();
      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left,
        right,
        subject
      });
      subject.checks = query.checks;
      query.checks = [{
        type: Type.TRUE
      }];
      _parent.checks.push({
        type: Type.TRUE
      });
      right.checks.push({
        type: Type.PARENT,
        // type is swapped on right side queries
        parent: _parent,
        child: _child
        // empty for now
      });
      replaceLastQuery(selector, left, compound);
      selector.currentSubject = subject;
      selector.compoundCount++;
      return _child;
    } else {
      var _parent2 = newQuery();
      var _child2 = newQuery();
      var pcQChecks = [{
        type: Type.PARENT,
        parent: _parent2,
        child: _child2
      }];
      _parent2.checks = query.checks;
      query.checks = pcQChecks;
      selector.compoundCount++;
      return _child2;
    }
  }
}, {
  name: "descendant",
  separator: true,
  regex: tokens.descendant,
  populate: function populate13(selector, query) {
    if (selector.currentSubject == null) {
      var ancChQuery = newQuery();
      var descendant = newQuery();
      var ancestor = selector[selector.length - 1];
      ancChQuery.checks.push({
        type: Type.DESCENDANT,
        ancestor,
        descendant
      });
      replaceLastQuery(selector, query, ancChQuery);
      selector.compoundCount++;
      return descendant;
    } else if (selector.currentSubject === query) {
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();
      var _descendant = newQuery();
      var _ancestor = newQuery();
      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left,
        right,
        subject
      });
      subject.checks = query.checks;
      query.checks = [{
        type: Type.TRUE
      }];
      _ancestor.checks.push({
        type: Type.TRUE
      });
      right.checks.push({
        type: Type.ANCESTOR,
        // type is swapped on right side queries
        ancestor: _ancestor,
        descendant: _descendant
        // empty for now
      });
      replaceLastQuery(selector, left, compound);
      selector.currentSubject = subject;
      selector.compoundCount++;
      return _descendant;
    } else {
      var _ancestor2 = newQuery();
      var _descendant2 = newQuery();
      var adQChecks = [{
        type: Type.ANCESTOR,
        ancestor: _ancestor2,
        descendant: _descendant2
      }];
      _ancestor2.checks = query.checks;
      query.checks = adQChecks;
      selector.compoundCount++;
      return _descendant2;
    }
  }
}, {
  name: "subject",
  modifier: true,
  regex: tokens.subject,
  populate: function populate14(selector, query) {
    if (selector.currentSubject != null && selector.currentSubject !== query) {
      warn("Redefinition of subject in selector `" + selector.toString() + "`");
      return false;
    }
    selector.currentSubject = query;
    var topQ = selector[selector.length - 1];
    var topChk = topQ.checks[0];
    var topType = topChk == null ? null : topChk.type;
    if (topType === Type.DIRECTED_EDGE) {
      topChk.type = Type.NODE_TARGET;
    } else if (topType === Type.UNDIRECTED_EDGE) {
      topChk.type = Type.NODE_NEIGHBOR;
      topChk.node = topChk.nodes[1];
      topChk.neighbor = topChk.nodes[0];
      topChk.nodes = null;
    }
  }
}];
exprs.forEach(function(e2) {
  return e2.regexObj = new RegExp("^" + e2.regex);
});
var consumeExpr = function consumeExpr2(remaining) {
  var expr;
  var match2;
  var name2;
  for (var j2 = 0; j2 < exprs.length; j2++) {
    var e2 = exprs[j2];
    var n2 = e2.name;
    var m2 = remaining.match(e2.regexObj);
    if (m2 != null) {
      match2 = m2;
      expr = e2;
      name2 = n2;
      var consumed = m2[0];
      remaining = remaining.substring(consumed.length);
      break;
    }
  }
  return {
    expr,
    match: match2,
    name: name2,
    remaining
  };
};
var consumeWhitespace = function consumeWhitespace2(remaining) {
  var match2 = remaining.match(/^\s+/);
  if (match2) {
    var consumed = match2[0];
    remaining = remaining.substring(consumed.length);
  }
  return remaining;
};
var parse$1 = function parse(selector) {
  var self2 = this;
  var remaining = self2.inputText = selector;
  var currentQuery = self2[0] = newQuery();
  self2.length = 1;
  remaining = consumeWhitespace(remaining);
  for (; ; ) {
    var exprInfo = consumeExpr(remaining);
    if (exprInfo.expr == null) {
      warn("The selector `" + selector + "`is invalid");
      return false;
    } else {
      var args = exprInfo.match.slice(1);
      var ret = exprInfo.expr.populate(self2, currentQuery, args);
      if (ret === false) {
        return false;
      } else if (ret != null) {
        currentQuery = ret;
      }
    }
    remaining = exprInfo.remaining;
    if (remaining.match(/^\s*$/)) {
      break;
    }
  }
  var lastQ = self2[self2.length - 1];
  if (self2.currentSubject != null) {
    lastQ.subject = self2.currentSubject;
  }
  lastQ.edgeCount = self2.edgeCount;
  lastQ.compoundCount = self2.compoundCount;
  for (var i2 = 0; i2 < self2.length; i2++) {
    var q2 = self2[i2];
    if (q2.compoundCount > 0 && q2.edgeCount > 0) {
      warn("The selector `" + selector + "` is invalid because it uses both a compound selector and an edge selector");
      return false;
    }
    if (q2.edgeCount > 1) {
      warn("The selector `" + selector + "` is invalid because it uses multiple edge selectors");
      return false;
    } else if (q2.edgeCount === 1) {
      warn("The selector `" + selector + "` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.");
    }
  }
  return true;
};
var toString = function toString2() {
  if (this.toStringCache != null) {
    return this.toStringCache;
  }
  var clean = function clean2(obj) {
    if (obj == null) {
      return "";
    } else {
      return obj;
    }
  };
  var cleanVal = function cleanVal2(val) {
    if (string(val)) {
      return '"' + val + '"';
    } else {
      return clean(val);
    }
  };
  var space2 = function space3(val) {
    return " " + val + " ";
  };
  var checkToString = function checkToString2(check, subject) {
    var type = check.type, value = check.value;
    switch (type) {
      case Type.GROUP: {
        var group2 = clean(value);
        return group2.substring(0, group2.length - 1);
      }
      case Type.DATA_COMPARE: {
        var field = check.field, operator = check.operator;
        return "[" + field + space2(clean(operator)) + cleanVal(value) + "]";
      }
      case Type.DATA_BOOL: {
        var _operator = check.operator, _field = check.field;
        return "[" + clean(_operator) + _field + "]";
      }
      case Type.DATA_EXIST: {
        var _field2 = check.field;
        return "[" + _field2 + "]";
      }
      case Type.META_COMPARE: {
        var _operator2 = check.operator, _field3 = check.field;
        return "[[" + _field3 + space2(clean(_operator2)) + cleanVal(value) + "]]";
      }
      case Type.STATE: {
        return value;
      }
      case Type.ID: {
        return "#" + value;
      }
      case Type.CLASS: {
        return "." + value;
      }
      case Type.PARENT:
      case Type.CHILD: {
        return queryToString(check.parent, subject) + space2(">") + queryToString(check.child, subject);
      }
      case Type.ANCESTOR:
      case Type.DESCENDANT: {
        return queryToString(check.ancestor, subject) + " " + queryToString(check.descendant, subject);
      }
      case Type.COMPOUND_SPLIT: {
        var lhs = queryToString(check.left, subject);
        var sub = queryToString(check.subject, subject);
        var rhs = queryToString(check.right, subject);
        return lhs + (lhs.length > 0 ? " " : "") + sub + rhs;
      }
      case Type.TRUE: {
        return "";
      }
    }
  };
  var queryToString = function queryToString2(query2, subject) {
    return query2.checks.reduce(function(str2, chk, i3) {
      return str2 + (subject === query2 && i3 === 0 ? "$" : "") + checkToString(chk, subject);
    }, "");
  };
  var str = "";
  for (var i2 = 0; i2 < this.length; i2++) {
    var query = this[i2];
    str += queryToString(query, query.subject);
    if (this.length > 1 && i2 < this.length - 1) {
      str += ", ";
    }
  }
  this.toStringCache = str;
  return str;
};
var parse$1$1 = {
  parse: parse$1,
  toString
};
var valCmp = function valCmp2(fieldVal, operator, value) {
  var matches33;
  var isFieldStr = string(fieldVal);
  var isFieldNum = number$1(fieldVal);
  var isValStr = string(value);
  var fieldStr, valStr;
  var caseInsensitive = false;
  var notExpr = false;
  var isIneqCmp = false;
  if (operator.indexOf("!") >= 0) {
    operator = operator.replace("!", "");
    notExpr = true;
  }
  if (operator.indexOf("@") >= 0) {
    operator = operator.replace("@", "");
    caseInsensitive = true;
  }
  if (isFieldStr || isValStr || caseInsensitive) {
    fieldStr = !isFieldStr && !isFieldNum ? "" : "" + fieldVal;
    valStr = "" + value;
  }
  if (caseInsensitive) {
    fieldVal = fieldStr = fieldStr.toLowerCase();
    value = valStr = valStr.toLowerCase();
  }
  switch (operator) {
    case "*=":
      matches33 = fieldStr.indexOf(valStr) >= 0;
      break;
    case "$=":
      matches33 = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
      break;
    case "^=":
      matches33 = fieldStr.indexOf(valStr) === 0;
      break;
    case "=":
      matches33 = fieldVal === value;
      break;
    case ">":
      isIneqCmp = true;
      matches33 = fieldVal > value;
      break;
    case ">=":
      isIneqCmp = true;
      matches33 = fieldVal >= value;
      break;
    case "<":
      isIneqCmp = true;
      matches33 = fieldVal < value;
      break;
    case "<=":
      isIneqCmp = true;
      matches33 = fieldVal <= value;
      break;
    default:
      matches33 = false;
      break;
  }
  if (notExpr && (fieldVal != null || !isIneqCmp)) {
    matches33 = !matches33;
  }
  return matches33;
};
var boolCmp = function boolCmp2(fieldVal, operator) {
  switch (operator) {
    case "?":
      return fieldVal ? true : false;
    case "!":
      return fieldVal ? false : true;
    case "^":
      return fieldVal === void 0;
  }
};
var existCmp = function existCmp2(fieldVal) {
  return fieldVal !== void 0;
};
var data$1 = function data2(ele, field) {
  return ele.data(field);
};
var meta = function meta2(ele, field) {
  return ele[field]();
};
var match = [];
var matches$1 = function matches30(query, ele) {
  return query.checks.every(function(chk) {
    return match[chk.type](chk, ele);
  });
};
match[Type.GROUP] = function(check, ele) {
  var group2 = check.value;
  return group2 === "*" || group2 === ele.group();
};
match[Type.STATE] = function(check, ele) {
  var stateSelector = check.value;
  return stateSelectorMatches(stateSelector, ele);
};
match[Type.ID] = function(check, ele) {
  var id2 = check.value;
  return ele.id() === id2;
};
match[Type.CLASS] = function(check, ele) {
  var cls = check.value;
  return ele.hasClass(cls);
};
match[Type.META_COMPARE] = function(check, ele) {
  var field = check.field, operator = check.operator, value = check.value;
  return valCmp(meta(ele, field), operator, value);
};
match[Type.DATA_COMPARE] = function(check, ele) {
  var field = check.field, operator = check.operator, value = check.value;
  return valCmp(data$1(ele, field), operator, value);
};
match[Type.DATA_BOOL] = function(check, ele) {
  var field = check.field, operator = check.operator;
  return boolCmp(data$1(ele, field), operator);
};
match[Type.DATA_EXIST] = function(check, ele) {
  var field = check.field;
  check.operator;
  return existCmp(data$1(ele, field));
};
match[Type.UNDIRECTED_EDGE] = function(check, ele) {
  var qA = check.nodes[0];
  var qB = check.nodes[1];
  var src2 = ele.source();
  var tgt = ele.target();
  return matches$1(qA, src2) && matches$1(qB, tgt) || matches$1(qB, src2) && matches$1(qA, tgt);
};
match[Type.NODE_NEIGHBOR] = function(check, ele) {
  return matches$1(check.node, ele) && ele.neighborhood().some(function(n2) {
    return n2.isNode() && matches$1(check.neighbor, n2);
  });
};
match[Type.DIRECTED_EDGE] = function(check, ele) {
  return matches$1(check.source, ele.source()) && matches$1(check.target, ele.target());
};
match[Type.NODE_SOURCE] = function(check, ele) {
  return matches$1(check.source, ele) && ele.outgoers().some(function(n2) {
    return n2.isNode() && matches$1(check.target, n2);
  });
};
match[Type.NODE_TARGET] = function(check, ele) {
  return matches$1(check.target, ele) && ele.incomers().some(function(n2) {
    return n2.isNode() && matches$1(check.source, n2);
  });
};
match[Type.CHILD] = function(check, ele) {
  return matches$1(check.child, ele) && matches$1(check.parent, ele.parent());
};
match[Type.PARENT] = function(check, ele) {
  return matches$1(check.parent, ele) && ele.children().some(function(c2) {
    return matches$1(check.child, c2);
  });
};
match[Type.DESCENDANT] = function(check, ele) {
  return matches$1(check.descendant, ele) && ele.ancestors().some(function(a2) {
    return matches$1(check.ancestor, a2);
  });
};
match[Type.ANCESTOR] = function(check, ele) {
  return matches$1(check.ancestor, ele) && ele.descendants().some(function(d2) {
    return matches$1(check.descendant, d2);
  });
};
match[Type.COMPOUND_SPLIT] = function(check, ele) {
  return matches$1(check.subject, ele) && matches$1(check.left, ele) && matches$1(check.right, ele);
};
match[Type.TRUE] = function() {
  return true;
};
match[Type.COLLECTION] = function(check, ele) {
  var collection4 = check.value;
  return collection4.has(ele);
};
match[Type.FILTER] = function(check, ele) {
  var filter4 = check.value;
  return filter4(ele);
};
var filter = function filter2(collection4) {
  var self2 = this;
  if (self2.length === 1 && self2[0].checks.length === 1 && self2[0].checks[0].type === Type.ID) {
    return collection4.getElementById(self2[0].checks[0].value).collection();
  }
  var selectorFunction = function selectorFunction2(element3) {
    for (var j2 = 0; j2 < self2.length; j2++) {
      var query = self2[j2];
      if (matches$1(query, element3)) {
        return true;
      }
    }
    return false;
  };
  if (self2.text() == null) {
    selectorFunction = function selectorFunction2() {
      return true;
    };
  }
  return collection4.filter(selectorFunction);
};
var matches31 = function matches32(ele) {
  var self2 = this;
  for (var j2 = 0; j2 < self2.length; j2++) {
    var query = self2[j2];
    if (matches$1(query, ele)) {
      return true;
    }
  }
  return false;
};
var matching = {
  matches: matches31,
  filter
};
var Selector = function Selector2(selector) {
  this.inputText = selector;
  this.currentSubject = null;
  this.compoundCount = 0;
  this.edgeCount = 0;
  this.length = 0;
  if (selector == null || string(selector) && selector.match(/^\s*$/))
    ;
  else if (elementOrCollection(selector)) {
    this.addQuery({
      checks: [{
        type: Type.COLLECTION,
        value: selector.collection()
      }]
    });
  } else if (fn$6(selector)) {
    this.addQuery({
      checks: [{
        type: Type.FILTER,
        value: selector
      }]
    });
  } else if (string(selector)) {
    if (!this.parse(selector)) {
      this.invalid = true;
    }
  } else {
    error("A selector must be created from a string; found ");
  }
};
var selfn = Selector.prototype;
[parse$1$1, matching].forEach(function(p2) {
  return extend$1(selfn, p2);
});
selfn.text = function() {
  return this.inputText;
};
selfn.size = function() {
  return this.length;
};
selfn.eq = function(i2) {
  return this[i2];
};
selfn.sameText = function(otherSel) {
  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
};
selfn.addQuery = function(q2) {
  this[this.length++] = q2;
};
selfn.selector = selfn.toString;
var elesfn$g = {
  allAre: function allAre(selector) {
    var selObj = new Selector(selector);
    return this.every(function(ele) {
      return selObj.matches(ele);
    });
  },
  is: function is(selector) {
    var selObj = new Selector(selector);
    return this.some(function(ele) {
      return selObj.matches(ele);
    });
  },
  some: function some(fn3, thisArg) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ret = !thisArg ? fn3(this[i2], i2, this) : fn3.apply(thisArg, [this[i2], i2, this]);
      if (ret) {
        return true;
      }
    }
    return false;
  },
  every: function every(fn3, thisArg) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ret = !thisArg ? fn3(this[i2], i2, this) : fn3.apply(thisArg, [this[i2], i2, this]);
      if (!ret) {
        return false;
      }
    }
    return true;
  },
  same: function same(collection4) {
    if (this === collection4) {
      return true;
    }
    collection4 = this.cy().collection(collection4);
    var thisLength = this.length;
    var collectionLength = collection4.length;
    if (thisLength !== collectionLength) {
      return false;
    }
    if (thisLength === 1) {
      return this[0] === collection4[0];
    }
    return this.every(function(ele) {
      return collection4.hasElementWithId(ele.id());
    });
  },
  anySame: function anySame(collection4) {
    collection4 = this.cy().collection(collection4);
    return this.some(function(ele) {
      return collection4.hasElementWithId(ele.id());
    });
  },
  allAreNeighbors: function allAreNeighbors(collection4) {
    collection4 = this.cy().collection(collection4);
    var nhood = this.neighborhood();
    return collection4.every(function(ele) {
      return nhood.hasElementWithId(ele.id());
    });
  },
  contains: function contains(collection4) {
    collection4 = this.cy().collection(collection4);
    var self2 = this;
    return collection4.every(function(ele) {
      return self2.hasElementWithId(ele.id());
    });
  }
};
elesfn$g.allAreNeighbours = elesfn$g.allAreNeighbors;
elesfn$g.has = elesfn$g.contains;
elesfn$g.equal = elesfn$g.equals = elesfn$g.same;
var cache = function cache2(fn3, name2) {
  return function traversalCache(arg1, arg2, arg3, arg4) {
    var selectorOrEles = arg1;
    var eles = this;
    var key;
    if (selectorOrEles == null) {
      key = "";
    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
      key = selectorOrEles.id();
    }
    if (eles.length === 1 && key) {
      var _p = eles[0]._private;
      var tch = _p.traversalCache = _p.traversalCache || {};
      var ch = tch[name2] = tch[name2] || [];
      var hash = hashString(key);
      var cacheHit = ch[hash];
      if (cacheHit) {
        return cacheHit;
      } else {
        return ch[hash] = fn3.call(eles, arg1, arg2, arg3, arg4);
      }
    } else {
      return fn3.call(eles, arg1, arg2, arg3, arg4);
    }
  };
};
var elesfn$f = {
  parent: function parent(selector) {
    var parents2 = [];
    if (this.length === 1) {
      var parent4 = this[0]._private.parent;
      if (parent4) {
        return parent4;
      }
    }
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var _parent = ele._private.parent;
      if (_parent) {
        parents2.push(_parent);
      }
    }
    return this.spawn(parents2, true).filter(selector);
  },
  parents: function parents(selector) {
    var parents2 = [];
    var eles = this.parent();
    while (eles.nonempty()) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        parents2.push(ele);
      }
      eles = eles.parent();
    }
    return this.spawn(parents2, true).filter(selector);
  },
  commonAncestors: function commonAncestors(selector) {
    var ancestors;
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var parents2 = ele.parents();
      ancestors = ancestors || parents2;
      ancestors = ancestors.intersect(parents2);
    }
    return ancestors.filter(selector);
  },
  orphans: function orphans(selector) {
    return this.stdFilter(function(ele) {
      return ele.isOrphan();
    }).filter(selector);
  },
  nonorphans: function nonorphans(selector) {
    return this.stdFilter(function(ele) {
      return ele.isChild();
    }).filter(selector);
  },
  children: cache(function(selector) {
    var children2 = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var eleChildren = ele._private.children;
      for (var j2 = 0; j2 < eleChildren.length; j2++) {
        children2.push(eleChildren[j2]);
      }
    }
    return this.spawn(children2, true).filter(selector);
  }, "children"),
  siblings: function siblings(selector) {
    return this.parent().children().not(this).filter(selector);
  },
  isParent: function isParent() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.children.length !== 0;
    }
  },
  isChildless: function isChildless() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.children.length === 0;
    }
  },
  isChild: function isChild() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.parent != null;
    }
  },
  isOrphan: function isOrphan() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.parent == null;
    }
  },
  descendants: function descendants(selector) {
    var elements = [];
    function add3(eles) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        elements.push(ele);
        if (ele.children().nonempty()) {
          add3(ele.children());
        }
      }
    }
    add3(this.children());
    return this.spawn(elements, true).filter(selector);
  }
};
function forEachCompound(eles, fn3, includeSelf, recursiveStep) {
  var q2 = [];
  var did = new Set$1();
  var cy2 = eles.cy();
  var hasCompounds = cy2.hasCompoundNodes();
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (includeSelf) {
      q2.push(ele);
    } else if (hasCompounds) {
      recursiveStep(q2, did, ele);
    }
  }
  while (q2.length > 0) {
    var _ele = q2.shift();
    fn3(_ele);
    did.add(_ele.id());
    if (hasCompounds) {
      recursiveStep(q2, did, _ele);
    }
  }
  return eles;
}
function addChildren(q2, did, ele) {
  if (ele.isParent()) {
    var children2 = ele._private.children;
    for (var i2 = 0; i2 < children2.length; i2++) {
      var child = children2[i2];
      if (!did.has(child.id())) {
        q2.push(child);
      }
    }
  }
}
elesfn$f.forEachDown = function(fn3) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn3, includeSelf, addChildren);
};
function addParent(q2, did, ele) {
  if (ele.isChild()) {
    var parent4 = ele._private.parent;
    if (!did.has(parent4.id())) {
      q2.push(parent4);
    }
  }
}
elesfn$f.forEachUp = function(fn3) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn3, includeSelf, addParent);
};
function addParentAndChildren(q2, did, ele) {
  addParent(q2, did, ele);
  addChildren(q2, did, ele);
}
elesfn$f.forEachUpAndDown = function(fn3) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn3, includeSelf, addParentAndChildren);
};
elesfn$f.ancestors = elesfn$f.parents;
var fn$5, elesfn$e;
fn$5 = elesfn$e = {
  data: define.data({
    field: "data",
    bindingEvent: "data",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "data",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    immutableKeys: {
      "id": true,
      "source": true,
      "target": true,
      "parent": true
    },
    updateStyle: true
  }),
  removeData: define.removeData({
    field: "data",
    event: "data",
    triggerFnName: "trigger",
    triggerEvent: true,
    immutableKeys: {
      "id": true,
      "source": true,
      "target": true,
      "parent": true
    },
    updateStyle: true
  }),
  scratch: define.data({
    field: "scratch",
    bindingEvent: "scratch",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "scratch",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeScratch: define.removeData({
    field: "scratch",
    event: "scratch",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  }),
  rscratch: define.data({
    field: "rscratch",
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: true
  }),
  removeRscratch: define.removeData({
    field: "rscratch",
    triggerEvent: false
  }),
  id: function id() {
    var ele = this[0];
    if (ele) {
      return ele._private.data.id;
    }
  }
};
fn$5.attr = fn$5.data;
fn$5.removeAttr = fn$5.removeData;
var data3 = elesfn$e;
var elesfn$d = {};
function defineDegreeFunction(callback) {
  return function(includeLoops) {
    var self2 = this;
    if (includeLoops === void 0) {
      includeLoops = true;
    }
    if (self2.length === 0) {
      return;
    }
    if (self2.isNode() && !self2.removed()) {
      var degree = 0;
      var node = self2[0];
      var connectedEdges = node._private.edges;
      for (var i2 = 0; i2 < connectedEdges.length; i2++) {
        var edge = connectedEdges[i2];
        if (!includeLoops && edge.isLoop()) {
          continue;
        }
        degree += callback(node, edge);
      }
      return degree;
    } else {
      return;
    }
  };
}
extend$1(elesfn$d, {
  degree: defineDegreeFunction(function(node, edge) {
    if (edge.source().same(edge.target())) {
      return 2;
    } else {
      return 1;
    }
  }),
  indegree: defineDegreeFunction(function(node, edge) {
    if (edge.target().same(node)) {
      return 1;
    } else {
      return 0;
    }
  }),
  outdegree: defineDegreeFunction(function(node, edge) {
    if (edge.source().same(node)) {
      return 1;
    } else {
      return 0;
    }
  })
});
function defineDegreeBoundsFunction(degreeFn, callback) {
  return function(includeLoops) {
    var ret;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var ele = nodes3[i2];
      var degree = ele[degreeFn](includeLoops);
      if (degree !== void 0 && (ret === void 0 || callback(degree, ret))) {
        ret = degree;
      }
    }
    return ret;
  };
}
extend$1(elesfn$d, {
  minDegree: defineDegreeBoundsFunction("degree", function(degree, min4) {
    return degree < min4;
  }),
  maxDegree: defineDegreeBoundsFunction("degree", function(degree, max5) {
    return degree > max5;
  }),
  minIndegree: defineDegreeBoundsFunction("indegree", function(degree, min4) {
    return degree < min4;
  }),
  maxIndegree: defineDegreeBoundsFunction("indegree", function(degree, max5) {
    return degree > max5;
  }),
  minOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, min4) {
    return degree < min4;
  }),
  maxOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, max5) {
    return degree > max5;
  })
});
extend$1(elesfn$d, {
  totalDegree: function totalDegree(includeLoops) {
    var total = 0;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      total += nodes3[i2].degree(includeLoops);
    }
    return total;
  }
});
var fn$4, elesfn$c;
var beforePositionSet = function beforePositionSet2(eles, newPos, silent) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (!ele.locked()) {
      var oldPos = ele._private.position;
      var delta = {
        x: newPos.x != null ? newPos.x - oldPos.x : 0,
        y: newPos.y != null ? newPos.y - oldPos.y : 0
      };
      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
        ele.children().shift(delta, silent);
      }
      ele.dirtyBoundingBoxCache();
    }
  }
};
var positionDef = {
  field: "position",
  bindingEvent: "position",
  allowBinding: true,
  allowSetting: true,
  settingEvent: "position",
  settingTriggersEvent: true,
  triggerFnName: "emitAndNotify",
  allowGetting: true,
  validKeys: ["x", "y"],
  beforeGet: function beforeGet(ele) {
    ele.updateCompoundBounds();
  },
  beforeSet: function beforeSet(eles, newPos) {
    beforePositionSet(eles, newPos, false);
  },
  onSet: function onSet(eles) {
    eles.dirtyCompoundBoundsCache();
  },
  canSet: function canSet(ele) {
    return !ele.locked();
  }
};
fn$4 = elesfn$c = {
  position: define.data(positionDef),
  // position but no notification to renderer
  silentPosition: define.data(extend$1({}, positionDef, {
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: false,
    beforeSet: function beforeSet2(eles, newPos) {
      beforePositionSet(eles, newPos, true);
    },
    onSet: function onSet2(eles) {
      eles.dirtyCompoundBoundsCache();
    }
  })),
  positions: function positions(pos, silent) {
    if (plainObject(pos)) {
      if (silent) {
        this.silentPosition(pos);
      } else {
        this.position(pos);
      }
    } else if (fn$6(pos)) {
      var _fn = pos;
      var cy2 = this.cy();
      cy2.startBatch();
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var _pos = void 0;
        if (_pos = _fn(ele, i2)) {
          if (silent) {
            ele.silentPosition(_pos);
          } else {
            ele.position(_pos);
          }
        }
      }
      cy2.endBatch();
    }
    return this;
  },
  silentPositions: function silentPositions(pos) {
    return this.positions(pos, true);
  },
  shift: function shift(dim, val, silent) {
    var delta;
    if (plainObject(dim)) {
      delta = {
        x: number$1(dim.x) ? dim.x : 0,
        y: number$1(dim.y) ? dim.y : 0
      };
      silent = val;
    } else if (string(dim) && number$1(val)) {
      delta = {
        x: 0,
        y: 0
      };
      delta[dim] = val;
    }
    if (delta != null) {
      var cy2 = this.cy();
      cy2.startBatch();
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        if (cy2.hasCompoundNodes() && ele.isChild() && ele.ancestors().anySame(this)) {
          continue;
        }
        var pos = ele.position();
        var newPos = {
          x: pos.x + delta.x,
          y: pos.y + delta.y
        };
        if (silent) {
          ele.silentPosition(newPos);
        } else {
          ele.position(newPos);
        }
      }
      cy2.endBatch();
    }
    return this;
  },
  silentShift: function silentShift(dim, val) {
    if (plainObject(dim)) {
      this.shift(dim, true);
    } else if (string(dim) && number$1(val)) {
      this.shift(dim, val, true);
    }
    return this;
  },
  // get/set the rendered (i.e. on screen) positon of the element
  renderedPosition: function renderedPosition(dim, val) {
    var ele = this[0];
    var cy2 = this.cy();
    var zoom2 = cy2.zoom();
    var pan2 = cy2.pan();
    var rpos = plainObject(dim) ? dim : void 0;
    var setting = rpos !== void 0 || val !== void 0 && string(dim);
    if (ele && ele.isNode()) {
      if (setting) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var _ele = this[i2];
          if (val !== void 0) {
            _ele.position(dim, (val - pan2[dim]) / zoom2);
          } else if (rpos !== void 0) {
            _ele.position(renderedToModelPosition(rpos, zoom2, pan2));
          }
        }
      } else {
        var pos = ele.position();
        rpos = modelToRenderedPosition(pos, zoom2, pan2);
        if (dim === void 0) {
          return rpos;
        } else {
          return rpos[dim];
        }
      }
    } else if (!setting) {
      return void 0;
    }
    return this;
  },
  // get/set the position relative to the parent
  relativePosition: function relativePosition(dim, val) {
    var ele = this[0];
    var cy2 = this.cy();
    var ppos = plainObject(dim) ? dim : void 0;
    var setting = ppos !== void 0 || val !== void 0 && string(dim);
    var hasCompoundNodes2 = cy2.hasCompoundNodes();
    if (ele && ele.isNode()) {
      if (setting) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var _ele2 = this[i2];
          var parent4 = hasCompoundNodes2 ? _ele2.parent() : null;
          var hasParent = parent4 && parent4.length > 0;
          var relativeToParent = hasParent;
          if (hasParent) {
            parent4 = parent4[0];
          }
          var origin = relativeToParent ? parent4.position() : {
            x: 0,
            y: 0
          };
          if (val !== void 0) {
            _ele2.position(dim, val + origin[dim]);
          } else if (ppos !== void 0) {
            _ele2.position({
              x: ppos.x + origin.x,
              y: ppos.y + origin.y
            });
          }
        }
      } else {
        var pos = ele.position();
        var _parent = hasCompoundNodes2 ? ele.parent() : null;
        var _hasParent = _parent && _parent.length > 0;
        var _relativeToParent = _hasParent;
        if (_hasParent) {
          _parent = _parent[0];
        }
        var _origin = _relativeToParent ? _parent.position() : {
          x: 0,
          y: 0
        };
        ppos = {
          x: pos.x - _origin.x,
          y: pos.y - _origin.y
        };
        if (dim === void 0) {
          return ppos;
        } else {
          return ppos[dim];
        }
      }
    } else if (!setting) {
      return void 0;
    }
    return this;
  }
};
fn$4.modelPosition = fn$4.point = fn$4.position;
fn$4.modelPositions = fn$4.points = fn$4.positions;
fn$4.renderedPoint = fn$4.renderedPosition;
fn$4.relativePoint = fn$4.relativePosition;
var position = elesfn$c;
var fn$3, elesfn$b;
fn$3 = elesfn$b = {};
elesfn$b.renderedBoundingBox = function(options2) {
  var bb = this.boundingBox(options2);
  var cy2 = this.cy();
  var zoom2 = cy2.zoom();
  var pan2 = cy2.pan();
  var x1 = bb.x1 * zoom2 + pan2.x;
  var x2 = bb.x2 * zoom2 + pan2.x;
  var y1 = bb.y1 * zoom2 + pan2.y;
  var y2 = bb.y2 * zoom2 + pan2.y;
  return {
    x1,
    x2,
    y1,
    y2,
    w: x2 - x1,
    h: y2 - y1
  };
};
elesfn$b.dirtyCompoundBoundsCache = function() {
  var silent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var cy2 = this.cy();
  if (!cy2.styleEnabled() || !cy2.hasCompoundNodes()) {
    return this;
  }
  this.forEachUp(function(ele) {
    if (ele.isParent()) {
      var _p = ele._private;
      _p.compoundBoundsClean = false;
      _p.bbCache = null;
      if (!silent) {
        ele.emitAndNotify("bounds");
      }
    }
  });
  return this;
};
elesfn$b.updateCompoundBounds = function() {
  var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var cy2 = this.cy();
  if (!cy2.styleEnabled() || !cy2.hasCompoundNodes()) {
    return this;
  }
  if (!force && cy2.batching()) {
    return this;
  }
  function update2(parent4) {
    if (!parent4.isParent()) {
      return;
    }
    var _p2 = parent4._private;
    var children2 = parent4.children();
    var includeLabels = parent4.pstyle("compound-sizing-wrt-labels").value === "include";
    var min4 = {
      width: {
        val: parent4.pstyle("min-width").pfValue,
        left: parent4.pstyle("min-width-bias-left"),
        right: parent4.pstyle("min-width-bias-right")
      },
      height: {
        val: parent4.pstyle("min-height").pfValue,
        top: parent4.pstyle("min-height-bias-top"),
        bottom: parent4.pstyle("min-height-bias-bottom")
      }
    };
    var bb = children2.boundingBox({
      includeLabels,
      includeOverlays: false,
      // updating the compound bounds happens outside of the regular
      // cache cycle (i.e. before fired events)
      useCache: false
    });
    var pos = _p2.position;
    if (bb.w === 0 || bb.h === 0) {
      bb = {
        w: parent4.pstyle("width").pfValue,
        h: parent4.pstyle("height").pfValue
      };
      bb.x1 = pos.x - bb.w / 2;
      bb.x2 = pos.x + bb.w / 2;
      bb.y1 = pos.y - bb.h / 2;
      bb.y2 = pos.y + bb.h / 2;
    }
    function computeBiasValues(propDiff, propBias, propBiasComplement) {
      var biasDiff = 0;
      var biasComplementDiff = 0;
      var biasTotal = propBias + propBiasComplement;
      if (propDiff > 0 && biasTotal > 0) {
        biasDiff = propBias / biasTotal * propDiff;
        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
      }
      return {
        biasDiff,
        biasComplementDiff
      };
    }
    function computePaddingValues(width2, height2, paddingObject, relativeTo) {
      if (paddingObject.units === "%") {
        switch (relativeTo) {
          case "width":
            return width2 > 0 ? paddingObject.pfValue * width2 : 0;
          case "height":
            return height2 > 0 ? paddingObject.pfValue * height2 : 0;
          case "average":
            return width2 > 0 && height2 > 0 ? paddingObject.pfValue * (width2 + height2) / 2 : 0;
          case "min":
            return width2 > 0 && height2 > 0 ? width2 > height2 ? paddingObject.pfValue * height2 : paddingObject.pfValue * width2 : 0;
          case "max":
            return width2 > 0 && height2 > 0 ? width2 > height2 ? paddingObject.pfValue * width2 : paddingObject.pfValue * height2 : 0;
          default:
            return 0;
        }
      } else if (paddingObject.units === "px") {
        return paddingObject.pfValue;
      } else {
        return 0;
      }
    }
    var leftVal = min4.width.left.value;
    if (min4.width.left.units === "px" && min4.width.val > 0) {
      leftVal = leftVal * 100 / min4.width.val;
    }
    var rightVal = min4.width.right.value;
    if (min4.width.right.units === "px" && min4.width.val > 0) {
      rightVal = rightVal * 100 / min4.width.val;
    }
    var topVal = min4.height.top.value;
    if (min4.height.top.units === "px" && min4.height.val > 0) {
      topVal = topVal * 100 / min4.height.val;
    }
    var bottomVal = min4.height.bottom.value;
    if (min4.height.bottom.units === "px" && min4.height.val > 0) {
      bottomVal = bottomVal * 100 / min4.height.val;
    }
    var widthBiasDiffs = computeBiasValues(min4.width.val - bb.w, leftVal, rightVal);
    var diffLeft = widthBiasDiffs.biasDiff;
    var diffRight = widthBiasDiffs.biasComplementDiff;
    var heightBiasDiffs = computeBiasValues(min4.height.val - bb.h, topVal, bottomVal);
    var diffTop = heightBiasDiffs.biasDiff;
    var diffBottom = heightBiasDiffs.biasComplementDiff;
    _p2.autoPadding = computePaddingValues(bb.w, bb.h, parent4.pstyle("padding"), parent4.pstyle("padding-relative-to").value);
    _p2.autoWidth = Math.max(bb.w, min4.width.val);
    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
    _p2.autoHeight = Math.max(bb.h, min4.height.val);
    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
  }
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var _p = ele._private;
    if (!_p.compoundBoundsClean || force) {
      update2(ele);
      if (!cy2.batching()) {
        _p.compoundBoundsClean = true;
      }
    }
  }
  return this;
};
var noninf = function noninf2(x2) {
  if (x2 === Infinity || x2 === -Infinity) {
    return 0;
  }
  return x2;
};
var updateBounds = function updateBounds2(b2, x1, y1, x2, y2) {
  if (x2 - x1 === 0 || y2 - y1 === 0) {
    return;
  }
  if (x1 == null || y1 == null || x2 == null || y2 == null) {
    return;
  }
  b2.x1 = x1 < b2.x1 ? x1 : b2.x1;
  b2.x2 = x2 > b2.x2 ? x2 : b2.x2;
  b2.y1 = y1 < b2.y1 ? y1 : b2.y1;
  b2.y2 = y2 > b2.y2 ? y2 : b2.y2;
  b2.w = b2.x2 - b2.x1;
  b2.h = b2.y2 - b2.y1;
};
var updateBoundsFromBox = function updateBoundsFromBox2(b2, b22) {
  if (b22 == null) {
    return b2;
  }
  return updateBounds(b2, b22.x1, b22.y1, b22.x2, b22.y2);
};
var prefixedProperty = function prefixedProperty2(obj, field, prefix) {
  return getPrefixedProperty(obj, field, prefix);
};
var updateBoundsFromArrow = function updateBoundsFromArrow2(bounds2, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }
  var _p = ele._private;
  var rstyle = _p.rstyle;
  var halfArW = rstyle.arrowWidth / 2;
  var arrowType = ele.pstyle(prefix + "-arrow-shape").value;
  var x2;
  var y2;
  if (arrowType !== "none") {
    if (prefix === "source") {
      x2 = rstyle.srcX;
      y2 = rstyle.srcY;
    } else if (prefix === "target") {
      x2 = rstyle.tgtX;
      y2 = rstyle.tgtY;
    } else {
      x2 = rstyle.midX;
      y2 = rstyle.midY;
    }
    var bbs = _p.arrowBounds = _p.arrowBounds || {};
    var bb = bbs[prefix] = bbs[prefix] || {};
    bb.x1 = x2 - halfArW;
    bb.y1 = y2 - halfArW;
    bb.x2 = x2 + halfArW;
    bb.y2 = y2 + halfArW;
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
    expandBoundingBox(bb, 1);
    updateBounds(bounds2, bb.x1, bb.y1, bb.x2, bb.y2);
  }
};
var updateBoundsFromLabel = function updateBoundsFromLabel2(bounds2, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }
  var prefixDash;
  if (prefix) {
    prefixDash = prefix + "-";
  } else {
    prefixDash = "";
  }
  var _p = ele._private;
  var rstyle = _p.rstyle;
  var label = ele.pstyle(prefixDash + "label").strValue;
  if (label) {
    var halign = ele.pstyle("text-halign");
    var valign = ele.pstyle("text-valign");
    var labelWidth = prefixedProperty(rstyle, "labelWidth", prefix);
    var labelHeight = prefixedProperty(rstyle, "labelHeight", prefix);
    var labelX = prefixedProperty(rstyle, "labelX", prefix);
    var labelY = prefixedProperty(rstyle, "labelY", prefix);
    var marginX = ele.pstyle(prefixDash + "text-margin-x").pfValue;
    var marginY = ele.pstyle(prefixDash + "text-margin-y").pfValue;
    var isEdge2 = ele.isEdge();
    var rotation = ele.pstyle(prefixDash + "text-rotation");
    var outlineWidth = ele.pstyle("text-outline-width").pfValue;
    var borderWidth = ele.pstyle("text-border-width").pfValue;
    var halfBorderWidth = borderWidth / 2;
    var padding = ele.pstyle("text-background-padding").pfValue;
    var marginOfError = 2;
    var lh = labelHeight;
    var lw = labelWidth;
    var lw_2 = lw / 2;
    var lh_2 = lh / 2;
    var lx1, lx2, ly1, ly2;
    if (isEdge2) {
      lx1 = labelX - lw_2;
      lx2 = labelX + lw_2;
      ly1 = labelY - lh_2;
      ly2 = labelY + lh_2;
    } else {
      switch (halign.value) {
        case "left":
          lx1 = labelX - lw;
          lx2 = labelX;
          break;
        case "center":
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          break;
        case "right":
          lx1 = labelX;
          lx2 = labelX + lw;
          break;
      }
      switch (valign.value) {
        case "top":
          ly1 = labelY - lh;
          ly2 = labelY;
          break;
        case "center":
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
          break;
        case "bottom":
          ly1 = labelY;
          ly2 = labelY + lh;
          break;
      }
    }
    lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
    lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
    ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
    ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
    var bbPrefix = prefix || "main";
    var bbs = _p.labelBounds;
    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
    bb.x1 = lx1;
    bb.y1 = ly1;
    bb.x2 = lx2;
    bb.y2 = ly2;
    bb.w = lx2 - lx1;
    bb.h = ly2 - ly1;
    var isAutorotate = isEdge2 && rotation.strValue === "autorotate";
    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;
    if (isAutorotate || isPfValue) {
      var theta = isAutorotate ? prefixedProperty(_p.rstyle, "labelAngle", prefix) : rotation.pfValue;
      var cos2 = Math.cos(theta);
      var sin2 = Math.sin(theta);
      var xo = (lx1 + lx2) / 2;
      var yo = (ly1 + ly2) / 2;
      if (!isEdge2) {
        switch (halign.value) {
          case "left":
            xo = lx2;
            break;
          case "right":
            xo = lx1;
            break;
        }
        switch (valign.value) {
          case "top":
            yo = ly2;
            break;
          case "bottom":
            yo = ly1;
            break;
        }
      }
      var rotate = function rotate2(x2, y2) {
        x2 = x2 - xo;
        y2 = y2 - yo;
        return {
          x: x2 * cos2 - y2 * sin2 + xo,
          y: x2 * sin2 + y2 * cos2 + yo
        };
      };
      var px1y1 = rotate(lx1, ly1);
      var px1y2 = rotate(lx1, ly2);
      var px2y1 = rotate(lx2, ly1);
      var px2y2 = rotate(lx2, ly2);
      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
    }
    var bbPrefixRot = bbPrefix + "Rot";
    var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
    bbRot.x1 = lx1;
    bbRot.y1 = ly1;
    bbRot.x2 = lx2;
    bbRot.y2 = ly2;
    bbRot.w = lx2 - lx1;
    bbRot.h = ly2 - ly1;
    updateBounds(bounds2, lx1, ly1, lx2, ly2);
    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
  }
  return bounds2;
};
var boundingBoxImpl = function boundingBoxImpl2(ele, options2) {
  var cy2 = ele._private.cy;
  var styleEnabled2 = cy2.styleEnabled();
  var headless2 = cy2.headless();
  var bounds2 = makeBoundingBox();
  var _p = ele._private;
  var isNode2 = ele.isNode();
  var isEdge2 = ele.isEdge();
  var ex1, ex2, ey1, ey2;
  var x2, y2;
  var rstyle = _p.rstyle;
  var manualExpansion = isNode2 && styleEnabled2 ? ele.pstyle("bounds-expansion").pfValue : [0];
  var isDisplayed = function isDisplayed2(ele2) {
    return ele2.pstyle("display").value !== "none";
  };
  var displayed = !styleEnabled2 || isDisplayed(ele) && (!isEdge2 || isDisplayed(ele.source()) && isDisplayed(ele.target()));
  if (displayed) {
    var overlayOpacity = 0;
    var overlayPadding = 0;
    if (styleEnabled2 && options2.includeOverlays) {
      overlayOpacity = ele.pstyle("overlay-opacity").value;
      if (overlayOpacity !== 0) {
        overlayPadding = ele.pstyle("overlay-padding").value;
      }
    }
    var underlayOpacity = 0;
    var underlayPadding = 0;
    if (styleEnabled2 && options2.includeUnderlays) {
      underlayOpacity = ele.pstyle("underlay-opacity").value;
      if (underlayOpacity !== 0) {
        underlayPadding = ele.pstyle("underlay-padding").value;
      }
    }
    var padding = Math.max(overlayPadding, underlayPadding);
    var w2 = 0;
    var wHalf = 0;
    if (styleEnabled2) {
      w2 = ele.pstyle("width").pfValue;
      wHalf = w2 / 2;
    }
    if (isNode2 && options2.includeNodes) {
      var pos = ele.position();
      x2 = pos.x;
      y2 = pos.y;
      var _w = ele.outerWidth();
      var halfW = _w / 2;
      var h2 = ele.outerHeight();
      var halfH = h2 / 2;
      ex1 = x2 - halfW;
      ex2 = x2 + halfW;
      ey1 = y2 - halfH;
      ey2 = y2 + halfH;
      updateBounds(bounds2, ex1, ey1, ex2, ey2);
    } else if (isEdge2 && options2.includeEdges) {
      if (styleEnabled2 && !headless2) {
        var curveStyle = ele.pstyle("curve-style").strValue;
        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);
        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;
        updateBounds(bounds2, ex1, ey1, ex2, ey2);
        if (curveStyle === "haystack") {
          var hpts = rstyle.haystackPts;
          if (hpts && hpts.length === 2) {
            ex1 = hpts[0].x;
            ey1 = hpts[0].y;
            ex2 = hpts[1].x;
            ey2 = hpts[1].y;
            if (ex1 > ex2) {
              var temp = ex1;
              ex1 = ex2;
              ex2 = temp;
            }
            if (ey1 > ey2) {
              var _temp = ey1;
              ey1 = ey2;
              ey2 = _temp;
            }
            updateBounds(bounds2, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
          }
        } else if (curveStyle === "bezier" || curveStyle === "unbundled-bezier" || curveStyle === "segments" || curveStyle === "taxi") {
          var pts2;
          switch (curveStyle) {
            case "bezier":
            case "unbundled-bezier":
              pts2 = rstyle.bezierPts;
              break;
            case "segments":
            case "taxi":
              pts2 = rstyle.linePts;
              break;
          }
          if (pts2 != null) {
            for (var j2 = 0; j2 < pts2.length; j2++) {
              var pt2 = pts2[j2];
              ex1 = pt2.x - wHalf;
              ex2 = pt2.x + wHalf;
              ey1 = pt2.y - wHalf;
              ey2 = pt2.y + wHalf;
              updateBounds(bounds2, ex1, ey1, ex2, ey2);
            }
          }
        }
      } else {
        var n1 = ele.source();
        var n1pos = n1.position();
        var n2 = ele.target();
        var n2pos = n2.position();
        ex1 = n1pos.x;
        ex2 = n2pos.x;
        ey1 = n1pos.y;
        ey2 = n2pos.y;
        if (ex1 > ex2) {
          var _temp2 = ex1;
          ex1 = ex2;
          ex2 = _temp2;
        }
        if (ey1 > ey2) {
          var _temp3 = ey1;
          ey1 = ey2;
          ey2 = _temp3;
        }
        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;
        updateBounds(bounds2, ex1, ey1, ex2, ey2);
      }
    }
    if (styleEnabled2 && options2.includeEdges && isEdge2) {
      updateBoundsFromArrow(bounds2, ele, "mid-source");
      updateBoundsFromArrow(bounds2, ele, "mid-target");
      updateBoundsFromArrow(bounds2, ele, "source");
      updateBoundsFromArrow(bounds2, ele, "target");
    }
    if (styleEnabled2) {
      var ghost = ele.pstyle("ghost").value === "yes";
      if (ghost) {
        var gx = ele.pstyle("ghost-offset-x").pfValue;
        var gy = ele.pstyle("ghost-offset-y").pfValue;
        updateBounds(bounds2, bounds2.x1 + gx, bounds2.y1 + gy, bounds2.x2 + gx, bounds2.y2 + gy);
      }
    }
    var bbBody = _p.bodyBounds = _p.bodyBounds || {};
    assignBoundingBox(bbBody, bounds2);
    expandBoundingBoxSides(bbBody, manualExpansion);
    expandBoundingBox(bbBody, 1);
    if (styleEnabled2) {
      ex1 = bounds2.x1;
      ex2 = bounds2.x2;
      ey1 = bounds2.y1;
      ey2 = bounds2.y2;
      updateBounds(bounds2, ex1 - padding, ey1 - padding, ex2 + padding, ey2 + padding);
    }
    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
    assignBoundingBox(bbOverlay, bounds2);
    expandBoundingBoxSides(bbOverlay, manualExpansion);
    expandBoundingBox(bbOverlay, 1);
    var bbLabels = _p.labelBounds = _p.labelBounds || {};
    if (bbLabels.all != null) {
      clearBoundingBox(bbLabels.all);
    } else {
      bbLabels.all = makeBoundingBox();
    }
    if (styleEnabled2 && options2.includeLabels) {
      if (options2.includeMainLabels) {
        updateBoundsFromLabel(bounds2, ele, null);
      }
      if (isEdge2) {
        if (options2.includeSourceLabels) {
          updateBoundsFromLabel(bounds2, ele, "source");
        }
        if (options2.includeTargetLabels) {
          updateBoundsFromLabel(bounds2, ele, "target");
        }
      }
    }
  }
  bounds2.x1 = noninf(bounds2.x1);
  bounds2.y1 = noninf(bounds2.y1);
  bounds2.x2 = noninf(bounds2.x2);
  bounds2.y2 = noninf(bounds2.y2);
  bounds2.w = noninf(bounds2.x2 - bounds2.x1);
  bounds2.h = noninf(bounds2.y2 - bounds2.y1);
  if (bounds2.w > 0 && bounds2.h > 0 && displayed) {
    expandBoundingBoxSides(bounds2, manualExpansion);
    expandBoundingBox(bounds2, 1);
  }
  return bounds2;
};
var getKey = function getKey2(opts) {
  var i2 = 0;
  var tf = function tf2(val) {
    return (val ? 1 : 0) << i2++;
  };
  var key = 0;
  key += tf(opts.incudeNodes);
  key += tf(opts.includeEdges);
  key += tf(opts.includeLabels);
  key += tf(opts.includeMainLabels);
  key += tf(opts.includeSourceLabels);
  key += tf(opts.includeTargetLabels);
  key += tf(opts.includeOverlays);
  return key;
};
var getBoundingBoxPosKey = function getBoundingBoxPosKey2(ele) {
  if (ele.isEdge()) {
    var p1 = ele.source().position();
    var p2 = ele.target().position();
    var r2 = function r3(x2) {
      return Math.round(x2);
    };
    return hashIntsArray([r2(p1.x), r2(p1.y), r2(p2.x), r2(p2.y)]);
  } else {
    return 0;
  }
};
var cachedBoundingBoxImpl = function cachedBoundingBoxImpl2(ele, opts) {
  var _p = ele._private;
  var bb;
  var isEdge2 = ele.isEdge();
  var key = opts == null ? defBbOptsKey : getKey(opts);
  var usingDefOpts = key === defBbOptsKey;
  var currPosKey = getBoundingBoxPosKey(ele);
  var isPosKeySame = _p.bbCachePosKey === currPosKey;
  var useCache = opts.useCache && isPosKeySame;
  var isDirty = function isDirty2(ele2) {
    return ele2._private.bbCache == null || ele2._private.styleDirty;
  };
  var needRecalc = !useCache || isDirty(ele) || isEdge2 && isDirty(ele.source()) || isDirty(ele.target());
  if (needRecalc) {
    if (!isPosKeySame) {
      ele.recalculateRenderedStyle(useCache);
    }
    bb = boundingBoxImpl(ele, defBbOpts);
    _p.bbCache = bb;
    _p.bbCachePosKey = currPosKey;
  } else {
    bb = _p.bbCache;
  }
  if (!usingDefOpts) {
    var isNode2 = ele.isNode();
    bb = makeBoundingBox();
    if (opts.includeNodes && isNode2 || opts.includeEdges && !isNode2) {
      if (opts.includeOverlays) {
        updateBoundsFromBox(bb, _p.overlayBounds);
      } else {
        updateBoundsFromBox(bb, _p.bodyBounds);
      }
    }
    if (opts.includeLabels) {
      if (opts.includeMainLabels && (!isEdge2 || opts.includeSourceLabels && opts.includeTargetLabels)) {
        updateBoundsFromBox(bb, _p.labelBounds.all);
      } else {
        if (opts.includeMainLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.mainRot);
        }
        if (opts.includeSourceLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
        }
        if (opts.includeTargetLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.targetRot);
        }
      }
    }
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
  }
  return bb;
};
var defBbOpts = {
  includeNodes: true,
  includeEdges: true,
  includeLabels: true,
  includeMainLabels: true,
  includeSourceLabels: true,
  includeTargetLabels: true,
  includeOverlays: true,
  includeUnderlays: true,
  useCache: true
};
var defBbOptsKey = getKey(defBbOpts);
var filledBbOpts = defaults$g(defBbOpts);
elesfn$b.boundingBox = function(options2) {
  var bounds2;
  if (this.length === 1 && this[0]._private.bbCache != null && !this[0]._private.styleDirty && (options2 === void 0 || options2.useCache === void 0 || options2.useCache === true)) {
    if (options2 === void 0) {
      options2 = defBbOpts;
    } else {
      options2 = filledBbOpts(options2);
    }
    bounds2 = cachedBoundingBoxImpl(this[0], options2);
  } else {
    bounds2 = makeBoundingBox();
    options2 = options2 || defBbOpts;
    var opts = filledBbOpts(options2);
    var eles = this;
    var cy2 = eles.cy();
    var styleEnabled2 = cy2.styleEnabled();
    if (styleEnabled2) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var _p = ele._private;
        var currPosKey = getBoundingBoxPosKey(ele);
        var isPosKeySame = _p.bbCachePosKey === currPosKey;
        var useCache = opts.useCache && isPosKeySame && !_p.styleDirty;
        ele.recalculateRenderedStyle(useCache);
      }
    }
    this.updateCompoundBounds(!options2.useCache);
    for (var _i = 0; _i < eles.length; _i++) {
      var _ele = eles[_i];
      updateBoundsFromBox(bounds2, cachedBoundingBoxImpl(_ele, opts));
    }
  }
  bounds2.x1 = noninf(bounds2.x1);
  bounds2.y1 = noninf(bounds2.y1);
  bounds2.x2 = noninf(bounds2.x2);
  bounds2.y2 = noninf(bounds2.y2);
  bounds2.w = noninf(bounds2.x2 - bounds2.x1);
  bounds2.h = noninf(bounds2.y2 - bounds2.y1);
  return bounds2;
};
elesfn$b.dirtyBoundingBoxCache = function() {
  for (var i2 = 0; i2 < this.length; i2++) {
    var _p = this[i2]._private;
    _p.bbCache = null;
    _p.bbCachePosKey = null;
    _p.bodyBounds = null;
    _p.overlayBounds = null;
    _p.labelBounds.all = null;
    _p.labelBounds.source = null;
    _p.labelBounds.target = null;
    _p.labelBounds.main = null;
    _p.labelBounds.sourceRot = null;
    _p.labelBounds.targetRot = null;
    _p.labelBounds.mainRot = null;
    _p.arrowBounds.source = null;
    _p.arrowBounds.target = null;
    _p.arrowBounds["mid-source"] = null;
    _p.arrowBounds["mid-target"] = null;
  }
  this.emitAndNotify("bounds");
  return this;
};
elesfn$b.boundingBoxAt = function(fn3) {
  var nodes3 = this.nodes();
  var cy2 = this.cy();
  var hasCompoundNodes2 = cy2.hasCompoundNodes();
  var parents2 = cy2.collection();
  if (hasCompoundNodes2) {
    parents2 = nodes3.filter(function(node) {
      return node.isParent();
    });
    nodes3 = nodes3.not(parents2);
  }
  if (plainObject(fn3)) {
    var obj = fn3;
    fn3 = function fn4() {
      return obj;
    };
  }
  var storeOldPos = function storeOldPos2(node, i2) {
    return node._private.bbAtOldPos = fn3(node, i2);
  };
  var getOldPos = function getOldPos2(node) {
    return node._private.bbAtOldPos;
  };
  cy2.startBatch();
  nodes3.forEach(storeOldPos).silentPositions(fn3);
  if (hasCompoundNodes2) {
    parents2.dirtyCompoundBoundsCache();
    parents2.dirtyBoundingBoxCache();
    parents2.updateCompoundBounds(true);
  }
  var bb = copyBoundingBox(this.boundingBox({
    useCache: false
  }));
  nodes3.silentPositions(getOldPos);
  if (hasCompoundNodes2) {
    parents2.dirtyCompoundBoundsCache();
    parents2.dirtyBoundingBoxCache();
    parents2.updateCompoundBounds(true);
  }
  cy2.endBatch();
  return bb;
};
fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
var bounds = elesfn$b;
var fn$2, elesfn$a;
fn$2 = elesfn$a = {};
var defineDimFns = function defineDimFns2(opts) {
  opts.uppercaseName = capitalize(opts.name);
  opts.autoName = "auto" + opts.uppercaseName;
  opts.labelName = "label" + opts.uppercaseName;
  opts.outerName = "outer" + opts.uppercaseName;
  opts.uppercaseOuterName = capitalize(opts.outerName);
  fn$2[opts.name] = function dimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy2 = _p.cy;
    var styleEnabled2 = cy2._private.styleEnabled;
    if (ele) {
      if (styleEnabled2) {
        if (ele.isParent()) {
          ele.updateCompoundBounds();
          return _p[opts.autoName] || 0;
        }
        var d2 = ele.pstyle(opts.name);
        switch (d2.strValue) {
          case "label":
            ele.recalculateRenderedStyle();
            return _p.rstyle[opts.labelName] || 0;
          default:
            return d2.pfValue;
        }
      } else {
        return 1;
      }
    }
  };
  fn$2["outer" + opts.uppercaseName] = function outerDimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy2 = _p.cy;
    var styleEnabled2 = cy2._private.styleEnabled;
    if (ele) {
      if (styleEnabled2) {
        var dim = ele[opts.name]();
        var border = ele.pstyle("border-width").pfValue;
        var padding = 2 * ele.padding();
        return dim + border + padding;
      } else {
        return 1;
      }
    }
  };
  fn$2["rendered" + opts.uppercaseName] = function renderedDimImpl() {
    var ele = this[0];
    if (ele) {
      var d2 = ele[opts.name]();
      return d2 * this.cy().zoom();
    }
  };
  fn$2["rendered" + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
    var ele = this[0];
    if (ele) {
      var od = ele[opts.outerName]();
      return od * this.cy().zoom();
    }
  };
};
defineDimFns({
  name: "width"
});
defineDimFns({
  name: "height"
});
elesfn$a.padding = function() {
  var ele = this[0];
  var _p = ele._private;
  if (ele.isParent()) {
    ele.updateCompoundBounds();
    if (_p.autoPadding !== void 0) {
      return _p.autoPadding;
    } else {
      return ele.pstyle("padding").pfValue;
    }
  } else {
    return ele.pstyle("padding").pfValue;
  }
};
elesfn$a.paddedHeight = function() {
  var ele = this[0];
  return ele.height() + 2 * ele.padding();
};
elesfn$a.paddedWidth = function() {
  var ele = this[0];
  return ele.width() + 2 * ele.padding();
};
var widthHeight = elesfn$a;
var ifEdge = function ifEdge2(ele, getValue2) {
  if (ele.isEdge()) {
    return getValue2(ele);
  }
};
var ifEdgeRenderedPosition = function ifEdgeRenderedPosition2(ele, getPoint) {
  if (ele.isEdge()) {
    var cy2 = ele.cy();
    return modelToRenderedPosition(getPoint(ele), cy2.zoom(), cy2.pan());
  }
};
var ifEdgeRenderedPositions = function ifEdgeRenderedPositions2(ele, getPoints) {
  if (ele.isEdge()) {
    var cy2 = ele.cy();
    var pan2 = cy2.pan();
    var zoom2 = cy2.zoom();
    return getPoints(ele).map(function(p2) {
      return modelToRenderedPosition(p2, zoom2, pan2);
    });
  }
};
var controlPoints = function controlPoints2(ele) {
  return ele.renderer().getControlPoints(ele);
};
var segmentPoints = function segmentPoints2(ele) {
  return ele.renderer().getSegmentPoints(ele);
};
var sourceEndpoint = function sourceEndpoint2(ele) {
  return ele.renderer().getSourceEndpoint(ele);
};
var targetEndpoint = function targetEndpoint2(ele) {
  return ele.renderer().getTargetEndpoint(ele);
};
var midpoint = function midpoint2(ele) {
  return ele.renderer().getEdgeMidpoint(ele);
};
var pts = {
  controlPoints: {
    get: controlPoints,
    mult: true
  },
  segmentPoints: {
    get: segmentPoints,
    mult: true
  },
  sourceEndpoint: {
    get: sourceEndpoint
  },
  targetEndpoint: {
    get: targetEndpoint
  },
  midpoint: {
    get: midpoint
  }
};
var renderedName = function renderedName2(name2) {
  return "rendered" + name2[0].toUpperCase() + name2.substr(1);
};
var edgePoints = Object.keys(pts).reduce(function(obj, name2) {
  var spec = pts[name2];
  var rName = renderedName(name2);
  obj[name2] = function() {
    return ifEdge(this, spec.get);
  };
  if (spec.mult) {
    obj[rName] = function() {
      return ifEdgeRenderedPositions(this, spec.get);
    };
  } else {
    obj[rName] = function() {
      return ifEdgeRenderedPosition(this, spec.get);
    };
  }
  return obj;
}, {});
var dimensions = extend$1({}, position, bounds, widthHeight, edgePoints);
/*!
Event object based on jQuery events, MIT license

https://jquery.org/license/
https://tldrlegal.com/license/mit-license
https://github.com/jquery/jquery/blob/master/src/event.js
*/
var Event$1 = function Event2(src2, props) {
  this.recycle(src2, props);
};
function returnFalse() {
  return false;
}
function returnTrue() {
  return true;
}
Event$1.prototype = {
  instanceString: function instanceString2() {
    return "event";
  },
  recycle: function recycle(src2, props) {
    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;
    if (src2 != null && src2.preventDefault) {
      this.type = src2.type;
      this.isDefaultPrevented = src2.defaultPrevented ? returnTrue : returnFalse;
    } else if (src2 != null && src2.type) {
      props = src2;
    } else {
      this.type = src2;
    }
    if (props != null) {
      this.originalEvent = props.originalEvent;
      this.type = props.type != null ? props.type : this.type;
      this.cy = props.cy;
      this.target = props.target;
      this.position = props.position;
      this.renderedPosition = props.renderedPosition;
      this.namespace = props.namespace;
      this.layout = props.layout;
    }
    if (this.cy != null && this.position != null && this.renderedPosition == null) {
      var pos = this.position;
      var zoom2 = this.cy.zoom();
      var pan2 = this.cy.pan();
      this.renderedPosition = {
        x: pos.x * zoom2 + pan2.x,
        y: pos.y * zoom2 + pan2.y
      };
    }
    this.timeStamp = src2 && src2.timeStamp || Date.now();
  },
  preventDefault: function preventDefault() {
    this.isDefaultPrevented = returnTrue;
    var e2 = this.originalEvent;
    if (!e2) {
      return;
    }
    if (e2.preventDefault) {
      e2.preventDefault();
    }
  },
  stopPropagation: function stopPropagation() {
    this.isPropagationStopped = returnTrue;
    var e2 = this.originalEvent;
    if (!e2) {
      return;
    }
    if (e2.stopPropagation) {
      e2.stopPropagation();
    }
  },
  stopImmediatePropagation: function stopImmediatePropagation() {
    this.isImmediatePropagationStopped = returnTrue;
    this.stopPropagation();
  },
  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse
};
var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/;
var universalNamespace = ".*";
var defaults$8 = {
  qualifierCompare: function qualifierCompare(q1, q2) {
    return q1 === q2;
  },
  eventMatches: function eventMatches() {
    return true;
  },
  addEventFields: function addEventFields() {
  },
  callbackContext: function callbackContext(context) {
    return context;
  },
  beforeEmit: function beforeEmit() {
  },
  afterEmit: function afterEmit() {
  },
  bubble: function bubble() {
    return false;
  },
  parent: function parent2() {
    return null;
  },
  context: null
};
var defaultsKeys = Object.keys(defaults$8);
var emptyOpts = {};
function Emitter() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyOpts;
  var context = arguments.length > 1 ? arguments[1] : void 0;
  for (var i2 = 0; i2 < defaultsKeys.length; i2++) {
    var key = defaultsKeys[i2];
    this[key] = opts[key] || defaults$8[key];
  }
  this.context = context || this.context;
  this.listeners = [];
  this.emitting = 0;
}
var p$2 = Emitter.prototype;
var forEachEvent = function forEachEvent2(self2, handler, events, qualifier, callback, conf, confOverrides) {
  if (fn$6(qualifier)) {
    callback = qualifier;
    qualifier = null;
  }
  if (confOverrides) {
    if (conf == null) {
      conf = confOverrides;
    } else {
      conf = extend$1({}, conf, confOverrides);
    }
  }
  var eventList = array(events) ? events : events.split(/\s+/);
  for (var i2 = 0; i2 < eventList.length; i2++) {
    var evt = eventList[i2];
    if (emptyString(evt)) {
      continue;
    }
    var match2 = evt.match(eventRegex);
    if (match2) {
      var type = match2[1];
      var namespace = match2[2] ? match2[2] : null;
      var ret = handler(self2, evt, type, namespace, qualifier, callback, conf);
      if (ret === false) {
        break;
      }
    }
  }
};
var makeEventObj = function makeEventObj2(self2, obj) {
  self2.addEventFields(self2.context, obj);
  return new Event$1(obj.type, obj);
};
var forEachEventObj = function forEachEventObj2(self2, handler, events) {
  if (event$1(events)) {
    handler(self2, events);
    return;
  } else if (plainObject(events)) {
    handler(self2, makeEventObj(self2, events));
    return;
  }
  var eventList = array(events) ? events : events.split(/\s+/);
  for (var i2 = 0; i2 < eventList.length; i2++) {
    var evt = eventList[i2];
    if (emptyString(evt)) {
      continue;
    }
    var match2 = evt.match(eventRegex);
    if (match2) {
      var type = match2[1];
      var namespace = match2[2] ? match2[2] : null;
      var eventObj = makeEventObj(self2, {
        type,
        namespace,
        target: self2.context
      });
      handler(self2, eventObj);
    }
  }
};
p$2.on = p$2.addListener = function(events, qualifier, callback, conf, confOverrides) {
  forEachEvent(this, function(self2, event3, type, namespace, qualifier2, callback2, conf2) {
    if (fn$6(callback2)) {
      self2.listeners.push({
        event: event3,
        // full event string
        callback: callback2,
        // callback to run
        type,
        // the event type (e.g. 'click')
        namespace,
        // the event namespace (e.g. ".foo")
        qualifier: qualifier2,
        // a restriction on whether to match this emitter
        conf: conf2
        // additional configuration
      });
    }
  }, events, qualifier, callback, conf, confOverrides);
  return this;
};
p$2.one = function(events, qualifier, callback, conf) {
  return this.on(events, qualifier, callback, conf, {
    one: true
  });
};
p$2.removeListener = p$2.off = function(events, qualifier, callback, conf) {
  var _this = this;
  if (this.emitting !== 0) {
    this.listeners = copyArray(this.listeners);
  }
  var listeners = this.listeners;
  var _loop = function _loop2(i3) {
    var listener = listeners[i3];
    forEachEvent(_this, function(self2, event3, type, namespace, qualifier2, callback2) {
      if ((listener.type === type || events === "*") && (!namespace && listener.namespace !== ".*" || listener.namespace === namespace) && (!qualifier2 || self2.qualifierCompare(listener.qualifier, qualifier2)) && (!callback2 || listener.callback === callback2)) {
        listeners.splice(i3, 1);
        return false;
      }
    }, events, qualifier, callback, conf);
  };
  for (var i2 = listeners.length - 1; i2 >= 0; i2--) {
    _loop(i2);
  }
  return this;
};
p$2.removeAllListeners = function() {
  return this.removeListener("*");
};
p$2.emit = p$2.trigger = function(events, extraParams, manualCallback) {
  var listeners = this.listeners;
  var numListenersBeforeEmit = listeners.length;
  this.emitting++;
  if (!array(extraParams)) {
    extraParams = [extraParams];
  }
  forEachEventObj(this, function(self2, eventObj) {
    if (manualCallback != null) {
      listeners = [{
        event: eventObj.event,
        type: eventObj.type,
        namespace: eventObj.namespace,
        callback: manualCallback
      }];
      numListenersBeforeEmit = listeners.length;
    }
    var _loop2 = function _loop22(i3) {
      var listener = listeners[i3];
      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self2.eventMatches(self2.context, listener, eventObj)) {
        var args = [eventObj];
        if (extraParams != null) {
          push(args, extraParams);
        }
        self2.beforeEmit(self2.context, listener, eventObj);
        if (listener.conf && listener.conf.one) {
          self2.listeners = self2.listeners.filter(function(l2) {
            return l2 !== listener;
          });
        }
        var context = self2.callbackContext(self2.context, listener, eventObj);
        var ret = listener.callback.apply(context, args);
        self2.afterEmit(self2.context, listener, eventObj);
        if (ret === false) {
          eventObj.stopPropagation();
          eventObj.preventDefault();
        }
      }
    };
    for (var i2 = 0; i2 < numListenersBeforeEmit; i2++) {
      _loop2(i2);
    }
    if (self2.bubble(self2.context) && !eventObj.isPropagationStopped()) {
      self2.parent(self2.context).emit(eventObj, extraParams);
    }
  }, events);
  this.emitting--;
  return this;
};
var emitterOptions$1 = {
  qualifierCompare: function qualifierCompare2(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches2(ele, listener, eventObj) {
    var selector = listener.qualifier;
    if (selector != null) {
      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }
    return true;
  },
  addEventFields: function addEventFields2(ele, evt) {
    evt.cy = ele.cy();
    evt.target = ele;
  },
  callbackContext: function callbackContext2(ele, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : ele;
  },
  beforeEmit: function beforeEmit2(context, listener) {
    if (listener.conf && listener.conf.once) {
      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
    }
  },
  bubble: function bubble2() {
    return true;
  },
  parent: function parent3(ele) {
    return ele.isChild() ? ele.parent() : ele.cy();
  }
};
var argSelector$1 = function argSelector(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};
var elesfn$9 = {
  createEmitter: function createEmitter() {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var _p = ele._private;
      if (!_p.emitter) {
        _p.emitter = new Emitter(emitterOptions$1, ele);
      }
    }
    return this;
  },
  emitter: function emitter() {
    return this._private.emitter;
  },
  on: function on(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().on(events, argSel, callback);
    }
    return this;
  },
  removeListener: function removeListener(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().removeListener(events, argSel, callback);
    }
    return this;
  },
  removeAllListeners: function removeAllListeners() {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().removeAllListeners();
    }
    return this;
  },
  one: function one(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().one(events, argSel, callback);
    }
    return this;
  },
  once: function once(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().on(events, argSel, callback, {
        once: true,
        onceCollection: this
      });
    }
  },
  emit: function emit(events, extraParams) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().emit(events, extraParams);
    }
    return this;
  },
  emitAndNotify: function emitAndNotify(event3, extraParams) {
    if (this.length === 0) {
      return;
    }
    this.cy().notify(event3, this);
    this.emit(event3, extraParams);
    return this;
  }
};
define.eventAliasesOn(elesfn$9);
var elesfn$8 = {
  nodes: function nodes(selector) {
    return this.filter(function(ele) {
      return ele.isNode();
    }).filter(selector);
  },
  edges: function edges(selector) {
    return this.filter(function(ele) {
      return ele.isEdge();
    }).filter(selector);
  },
  // internal helper to get nodes and edges as separate collections with single iteration over elements
  byGroup: function byGroup() {
    var nodes3 = this.spawn();
    var edges3 = this.spawn();
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      if (ele.isNode()) {
        nodes3.push(ele);
      } else {
        edges3.push(ele);
      }
    }
    return {
      nodes: nodes3,
      edges: edges3
    };
  },
  filter: function filter3(_filter, thisArg) {
    if (_filter === void 0) {
      return this;
    } else if (string(_filter) || elementOrCollection(_filter)) {
      return new Selector(_filter).filter(this);
    } else if (fn$6(_filter)) {
      var filterEles = this.spawn();
      var eles = this;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var include = thisArg ? _filter.apply(thisArg, [ele, i2, eles]) : _filter(ele, i2, eles);
        if (include) {
          filterEles.push(ele);
        }
      }
      return filterEles;
    }
    return this.spawn();
  },
  not: function not(toRemove) {
    if (!toRemove) {
      return this;
    } else {
      if (string(toRemove)) {
        toRemove = this.filter(toRemove);
      }
      var elements = this.spawn();
      for (var i2 = 0; i2 < this.length; i2++) {
        var element3 = this[i2];
        var remove2 = toRemove.has(element3);
        if (!remove2) {
          elements.push(element3);
        }
      }
      return elements;
    }
  },
  absoluteComplement: function absoluteComplement() {
    var cy2 = this.cy();
    return cy2.mutableElements().not(this);
  },
  intersect: function intersect(other) {
    if (string(other)) {
      var selector = other;
      return this.filter(selector);
    }
    var elements = this.spawn();
    var col1 = this;
    var col2 = other;
    var col1Smaller = this.length < other.length;
    var colS = col1Smaller ? col1 : col2;
    var colL = col1Smaller ? col2 : col1;
    for (var i2 = 0; i2 < colS.length; i2++) {
      var ele = colS[i2];
      if (colL.has(ele)) {
        elements.push(ele);
      }
    }
    return elements;
  },
  xor: function xor(other) {
    var cy2 = this._private.cy;
    if (string(other)) {
      other = cy2.$(other);
    }
    var elements = this.spawn();
    var col1 = this;
    var col2 = other;
    var add3 = function add4(col, other2) {
      for (var i2 = 0; i2 < col.length; i2++) {
        var ele = col[i2];
        var id2 = ele._private.data.id;
        var inOther = other2.hasElementWithId(id2);
        if (!inOther) {
          elements.push(ele);
        }
      }
    };
    add3(col1, col2);
    add3(col2, col1);
    return elements;
  },
  diff: function diff(other) {
    var cy2 = this._private.cy;
    if (string(other)) {
      other = cy2.$(other);
    }
    var left = this.spawn();
    var right = this.spawn();
    var both = this.spawn();
    var col1 = this;
    var col2 = other;
    var add3 = function add4(col, other2, retEles) {
      for (var i2 = 0; i2 < col.length; i2++) {
        var ele = col[i2];
        var id2 = ele._private.data.id;
        var inOther = other2.hasElementWithId(id2);
        if (inOther) {
          both.merge(ele);
        } else {
          retEles.push(ele);
        }
      }
    };
    add3(col1, col2, left);
    add3(col2, col1, right);
    return {
      left,
      right,
      both
    };
  },
  add: function add(toAdd) {
    var cy2 = this._private.cy;
    if (!toAdd) {
      return this;
    }
    if (string(toAdd)) {
      var selector = toAdd;
      toAdd = cy2.mutableElements().filter(selector);
    }
    var elements = this.spawnSelf();
    for (var i2 = 0; i2 < toAdd.length; i2++) {
      var ele = toAdd[i2];
      var add3 = !this.has(ele);
      if (add3) {
        elements.push(ele);
      }
    }
    return elements;
  },
  // in place merge on calling collection
  merge: function merge(toAdd) {
    var _p = this._private;
    var cy2 = _p.cy;
    if (!toAdd) {
      return this;
    }
    if (toAdd && string(toAdd)) {
      var selector = toAdd;
      toAdd = cy2.mutableElements().filter(selector);
    }
    var map2 = _p.map;
    for (var i2 = 0; i2 < toAdd.length; i2++) {
      var toAddEle = toAdd[i2];
      var id2 = toAddEle._private.data.id;
      var add3 = !map2.has(id2);
      if (add3) {
        var index = this.length++;
        this[index] = toAddEle;
        map2.set(id2, {
          ele: toAddEle,
          index
        });
      }
    }
    return this;
  },
  unmergeAt: function unmergeAt(i2) {
    var ele = this[i2];
    var id2 = ele.id();
    var _p = this._private;
    var map2 = _p.map;
    this[i2] = void 0;
    map2["delete"](id2);
    var unmergedLastEle = i2 === this.length - 1;
    if (this.length > 1 && !unmergedLastEle) {
      var lastEleI = this.length - 1;
      var lastEle = this[lastEleI];
      var lastEleId = lastEle._private.data.id;
      this[lastEleI] = void 0;
      this[i2] = lastEle;
      map2.set(lastEleId, {
        ele: lastEle,
        index: i2
      });
    }
    this.length--;
    return this;
  },
  // remove single ele in place in calling collection
  unmergeOne: function unmergeOne(ele) {
    ele = ele[0];
    var _p = this._private;
    var id2 = ele._private.data.id;
    var map2 = _p.map;
    var entry = map2.get(id2);
    if (!entry) {
      return this;
    }
    var i2 = entry.index;
    this.unmergeAt(i2);
    return this;
  },
  // remove eles in place on calling collection
  unmerge: function unmerge(toRemove) {
    var cy2 = this._private.cy;
    if (!toRemove) {
      return this;
    }
    if (toRemove && string(toRemove)) {
      var selector = toRemove;
      toRemove = cy2.mutableElements().filter(selector);
    }
    for (var i2 = 0; i2 < toRemove.length; i2++) {
      this.unmergeOne(toRemove[i2]);
    }
    return this;
  },
  unmergeBy: function unmergeBy(toRmFn) {
    for (var i2 = this.length - 1; i2 >= 0; i2--) {
      var ele = this[i2];
      if (toRmFn(ele)) {
        this.unmergeAt(i2);
      }
    }
    return this;
  },
  map: function map(mapFn, thisArg) {
    var arr = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var ret = thisArg ? mapFn.apply(thisArg, [ele, i2, eles]) : mapFn(ele, i2, eles);
      arr.push(ret);
    }
    return arr;
  },
  reduce: function reduce(fn3, initialValue) {
    var val = initialValue;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      val = fn3(val, eles[i2], i2, eles);
    }
    return val;
  },
  max: function max3(valFn, thisArg) {
    var max5 = -Infinity;
    var maxEle;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
      if (val > max5) {
        max5 = val;
        maxEle = ele;
      }
    }
    return {
      value: max5,
      ele: maxEle
    };
  },
  min: function min3(valFn, thisArg) {
    var min4 = Infinity;
    var minEle;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
      if (val < min4) {
        min4 = val;
        minEle = ele;
      }
    }
    return {
      value: min4,
      ele: minEle
    };
  }
};
var fn$1 = elesfn$8;
fn$1["u"] = fn$1["|"] = fn$1["+"] = fn$1.union = fn$1.or = fn$1.add;
fn$1["\\"] = fn$1["!"] = fn$1["-"] = fn$1.difference = fn$1.relativeComplement = fn$1.subtract = fn$1.not;
fn$1["n"] = fn$1["&"] = fn$1["."] = fn$1.and = fn$1.intersection = fn$1.intersect;
fn$1["^"] = fn$1["(+)"] = fn$1["(-)"] = fn$1.symmetricDifference = fn$1.symdiff = fn$1.xor;
fn$1.fnFilter = fn$1.filterFn = fn$1.stdFilter = fn$1.filter;
fn$1.complement = fn$1.abscomp = fn$1.absoluteComplement;
var elesfn$7 = {
  isNode: function isNode() {
    return this.group() === "nodes";
  },
  isEdge: function isEdge() {
    return this.group() === "edges";
  },
  isLoop: function isLoop() {
    return this.isEdge() && this.source()[0] === this.target()[0];
  },
  isSimple: function isSimple() {
    return this.isEdge() && this.source()[0] !== this.target()[0];
  },
  group: function group() {
    var ele = this[0];
    if (ele) {
      return ele._private.group;
    }
  }
};
var zIndexSort = function zIndexSort2(a2, b2) {
  var cy2 = a2.cy();
  var hasCompoundNodes2 = cy2.hasCompoundNodes();
  function getDepth(ele) {
    var style3 = ele.pstyle("z-compound-depth");
    if (style3.value === "auto") {
      return hasCompoundNodes2 ? ele.zDepth() : 0;
    } else if (style3.value === "bottom") {
      return -1;
    } else if (style3.value === "top") {
      return MAX_INT$1;
    }
    return 0;
  }
  var depthDiff = getDepth(a2) - getDepth(b2);
  if (depthDiff !== 0) {
    return depthDiff;
  }
  function getEleDepth(ele) {
    var style3 = ele.pstyle("z-index-compare");
    if (style3.value === "auto") {
      return ele.isNode() ? 1 : 0;
    }
    return 0;
  }
  var eleDiff = getEleDepth(a2) - getEleDepth(b2);
  if (eleDiff !== 0) {
    return eleDiff;
  }
  var zDiff = a2.pstyle("z-index").value - b2.pstyle("z-index").value;
  if (zDiff !== 0) {
    return zDiff;
  }
  return a2.poolIndex() - b2.poolIndex();
};
var elesfn$6 = {
  forEach: function forEach(fn3, thisArg) {
    if (fn$6(fn3)) {
      var N2 = this.length;
      for (var i2 = 0; i2 < N2; i2++) {
        var ele = this[i2];
        var ret = thisArg ? fn3.apply(thisArg, [ele, i2, this]) : fn3(ele, i2, this);
        if (ret === false) {
          break;
        }
      }
    }
    return this;
  },
  toArray: function toArray() {
    var array3 = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      array3.push(this[i2]);
    }
    return array3;
  },
  slice: function slice(start, end) {
    var array3 = [];
    var thisSize = this.length;
    if (end == null) {
      end = thisSize;
    }
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start = thisSize + start;
    }
    if (end < 0) {
      end = thisSize + end;
    }
    for (var i2 = start; i2 >= 0 && i2 < end && i2 < thisSize; i2++) {
      array3.push(this[i2]);
    }
    return this.spawn(array3);
  },
  size: function size() {
    return this.length;
  },
  eq: function eq2(i2) {
    return this[i2] || this.spawn();
  },
  first: function first() {
    return this[0] || this.spawn();
  },
  last: function last() {
    return this[this.length - 1] || this.spawn();
  },
  empty: function empty2() {
    return this.length === 0;
  },
  nonempty: function nonempty() {
    return !this.empty();
  },
  sort: function sort(sortFn) {
    if (!fn$6(sortFn)) {
      return this;
    }
    var sorted = this.toArray().sort(sortFn);
    return this.spawn(sorted);
  },
  sortByZIndex: function sortByZIndex() {
    return this.sort(zIndexSort);
  },
  zDepth: function zDepth() {
    var ele = this[0];
    if (!ele) {
      return void 0;
    }
    var _p = ele._private;
    var group2 = _p.group;
    if (group2 === "nodes") {
      var depth = _p.data.parent ? ele.parents().size() : 0;
      if (!ele.isParent()) {
        return MAX_INT$1 - 1;
      }
      return depth;
    } else {
      var src2 = _p.source;
      var tgt = _p.target;
      var srcDepth = src2.zDepth();
      var tgtDepth = tgt.zDepth();
      return Math.max(srcDepth, tgtDepth, 0);
    }
  }
};
elesfn$6.each = elesfn$6.forEach;
var defineSymbolIterator = function defineSymbolIterator2() {
  var typeofUndef = "undefined";
  var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof$1(Symbol)) != typeofUndef && _typeof$1(Symbol.iterator) != typeofUndef;
  if (isIteratorSupported) {
    elesfn$6[Symbol.iterator] = function() {
      var _this = this;
      var entry = {
        value: void 0,
        done: false
      };
      var i2 = 0;
      var length = this.length;
      return _defineProperty({
        next: function next2() {
          if (i2 < length) {
            entry.value = _this[i2++];
          } else {
            entry.value = void 0;
            entry.done = true;
          }
          return entry;
        }
      }, Symbol.iterator, function() {
        return this;
      });
    };
  }
};
defineSymbolIterator();
var getLayoutDimensionOptions = defaults$g({
  nodeDimensionsIncludeLabels: false
});
var elesfn$5 = {
  // Calculates and returns node dimensions { x, y } based on options given
  layoutDimensions: function layoutDimensions(options2) {
    options2 = getLayoutDimensionOptions(options2);
    var dims;
    if (!this.takesUpSpace()) {
      dims = {
        w: 0,
        h: 0
      };
    } else if (options2.nodeDimensionsIncludeLabels) {
      var bbDim = this.boundingBox();
      dims = {
        w: bbDim.w,
        h: bbDim.h
      };
    } else {
      dims = {
        w: this.outerWidth(),
        h: this.outerHeight()
      };
    }
    if (dims.w === 0 || dims.h === 0) {
      dims.w = dims.h = 1;
    }
    return dims;
  },
  // using standard layout options, apply position function (w/ or w/o animation)
  layoutPositions: function layoutPositions(layout4, options2, fn3) {
    var nodes3 = this.nodes().filter(function(n2) {
      return !n2.isParent();
    });
    var cy2 = this.cy();
    var layoutEles = options2.eles;
    var getMemoizeKey = function getMemoizeKey2(node2) {
      return node2.id();
    };
    var fnMem = memoize(fn3, getMemoizeKey);
    layout4.emit({
      type: "layoutstart",
      layout: layout4
    });
    layout4.animations = [];
    var calculateSpacing = function calculateSpacing2(spacing, nodesBb, pos) {
      var center2 = {
        x: nodesBb.x1 + nodesBb.w / 2,
        y: nodesBb.y1 + nodesBb.h / 2
      };
      var spacingVector = {
        // scale from center of bounding box (not necessarily 0,0)
        x: (pos.x - center2.x) * spacing,
        y: (pos.y - center2.y) * spacing
      };
      return {
        x: center2.x + spacingVector.x,
        y: center2.y + spacingVector.y
      };
    };
    var useSpacingFactor = options2.spacingFactor && options2.spacingFactor !== 1;
    var spacingBb = function spacingBb2() {
      if (!useSpacingFactor) {
        return null;
      }
      var bb2 = makeBoundingBox();
      for (var i3 = 0; i3 < nodes3.length; i3++) {
        var node2 = nodes3[i3];
        var pos = fnMem(node2, i3);
        expandBoundingBoxByPoint(bb2, pos.x, pos.y);
      }
      return bb2;
    };
    var bb = spacingBb();
    var getFinalPos = memoize(function(node2, i3) {
      var newPos2 = fnMem(node2, i3);
      if (useSpacingFactor) {
        var spacing = Math.abs(options2.spacingFactor);
        newPos2 = calculateSpacing(spacing, bb, newPos2);
      }
      if (options2.transform != null) {
        newPos2 = options2.transform(node2, newPos2);
      }
      return newPos2;
    }, getMemoizeKey);
    if (options2.animate) {
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        var node = nodes3[i2];
        var newPos = getFinalPos(node, i2);
        var animateNode = options2.animateFilter == null || options2.animateFilter(node, i2);
        if (animateNode) {
          var ani = node.animation({
            position: newPos,
            duration: options2.animationDuration,
            easing: options2.animationEasing
          });
          layout4.animations.push(ani);
        } else {
          node.position(newPos);
        }
      }
      if (options2.fit) {
        var fitAni = cy2.animation({
          fit: {
            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
            padding: options2.padding
          },
          duration: options2.animationDuration,
          easing: options2.animationEasing
        });
        layout4.animations.push(fitAni);
      } else if (options2.zoom !== void 0 && options2.pan !== void 0) {
        var zoomPanAni = cy2.animation({
          zoom: options2.zoom,
          pan: options2.pan,
          duration: options2.animationDuration,
          easing: options2.animationEasing
        });
        layout4.animations.push(zoomPanAni);
      }
      layout4.animations.forEach(function(ani2) {
        return ani2.play();
      });
      layout4.one("layoutready", options2.ready);
      layout4.emit({
        type: "layoutready",
        layout: layout4
      });
      Promise$1.all(layout4.animations.map(function(ani2) {
        return ani2.promise();
      })).then(function() {
        layout4.one("layoutstop", options2.stop);
        layout4.emit({
          type: "layoutstop",
          layout: layout4
        });
      });
    } else {
      nodes3.positions(getFinalPos);
      if (options2.fit) {
        cy2.fit(options2.eles, options2.padding);
      }
      if (options2.zoom != null) {
        cy2.zoom(options2.zoom);
      }
      if (options2.pan) {
        cy2.pan(options2.pan);
      }
      layout4.one("layoutready", options2.ready);
      layout4.emit({
        type: "layoutready",
        layout: layout4
      });
      layout4.one("layoutstop", options2.stop);
      layout4.emit({
        type: "layoutstop",
        layout: layout4
      });
    }
    return this;
  },
  layout: function layout(options2) {
    var cy2 = this.cy();
    return cy2.makeLayout(extend$1({}, options2, {
      eles: this
    }));
  }
};
elesfn$5.createLayout = elesfn$5.makeLayout = elesfn$5.layout;
function styleCache(key, fn3, ele) {
  var _p = ele._private;
  var cache3 = _p.styleCache = _p.styleCache || [];
  var val;
  if ((val = cache3[key]) != null) {
    return val;
  } else {
    val = cache3[key] = fn3(ele);
    return val;
  }
}
function cacheStyleFunction(key, fn3) {
  key = hashString(key);
  return function cachedStyleFunction(ele) {
    return styleCache(key, fn3, ele);
  };
}
function cachePrototypeStyleFunction(key, fn3) {
  key = hashString(key);
  var selfFn = function selfFn2(ele) {
    return fn3.call(ele);
  };
  return function cachedPrototypeStyleFunction() {
    var ele = this[0];
    if (ele) {
      return styleCache(key, selfFn, ele);
    }
  };
}
var elesfn$4 = {
  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
    var cy2 = this.cy();
    var renderer3 = cy2.renderer();
    var styleEnabled2 = cy2.styleEnabled();
    if (renderer3 && styleEnabled2) {
      renderer3.recalculateRenderedStyle(this, useCache);
    }
    return this;
  },
  dirtyStyleCache: function dirtyStyleCache() {
    var cy2 = this.cy();
    var dirty = function dirty2(ele) {
      return ele._private.styleCache = null;
    };
    if (cy2.hasCompoundNodes()) {
      var eles;
      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
      eles.merge(eles.connectedEdges());
      eles.forEach(dirty);
    } else {
      this.forEach(function(ele) {
        dirty(ele);
        ele.connectedEdges().forEach(dirty);
      });
    }
    return this;
  },
  // fully updates (recalculates) the style for the elements
  updateStyle: function updateStyle(notifyRenderer) {
    var cy2 = this._private.cy;
    if (!cy2.styleEnabled()) {
      return this;
    }
    if (cy2.batching()) {
      var bEles = cy2._private.batchStyleEles;
      bEles.merge(this);
      return this;
    }
    var hasCompounds = cy2.hasCompoundNodes();
    var updatedEles = this;
    notifyRenderer = notifyRenderer || notifyRenderer === void 0 ? true : false;
    if (hasCompounds) {
      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
    }
    var changedEles = updatedEles;
    if (notifyRenderer) {
      changedEles.emitAndNotify("style");
    } else {
      changedEles.emit("style");
    }
    updatedEles.forEach(function(ele) {
      return ele._private.styleDirty = true;
    });
    return this;
  },
  // private: clears dirty flag and recalculates style
  cleanStyle: function cleanStyle() {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return;
    }
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      if (ele._private.styleDirty) {
        ele._private.styleDirty = false;
        cy2.style().apply(ele);
      }
    }
  },
  // get the internal parsed style object for the specified property
  parsedStyle: function parsedStyle(property) {
    var includeNonDefault = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var ele = this[0];
    var cy2 = ele.cy();
    if (!cy2.styleEnabled()) {
      return;
    }
    if (ele) {
      this.cleanStyle();
      var overriddenStyle = ele._private.style[property];
      if (overriddenStyle != null) {
        return overriddenStyle;
      } else if (includeNonDefault) {
        return cy2.style().getDefaultProperty(property);
      } else {
        return null;
      }
    }
  },
  numericStyle: function numericStyle(property) {
    var ele = this[0];
    if (!ele.cy().styleEnabled()) {
      return;
    }
    if (ele) {
      var pstyle = ele.pstyle(property);
      return pstyle.pfValue !== void 0 ? pstyle.pfValue : pstyle.value;
    }
  },
  numericStyleUnits: function numericStyleUnits(property) {
    var ele = this[0];
    if (!ele.cy().styleEnabled()) {
      return;
    }
    if (ele) {
      return ele.pstyle(property).units;
    }
  },
  // get the specified css property as a rendered value (i.e. on-screen value)
  // or get the whole rendered style if no property specified (NB doesn't allow setting)
  renderedStyle: function renderedStyle(property) {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return this;
    }
    var ele = this[0];
    if (ele) {
      return cy2.style().getRenderedStyle(ele, property);
    }
  },
  // read the calculated css style of the element or override the style (via a bypass)
  style: function style(name2, value) {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return this;
    }
    var updateTransitions = false;
    var style3 = cy2.style();
    if (plainObject(name2)) {
      var props = name2;
      style3.applyBypass(this, props, updateTransitions);
      this.emitAndNotify("style");
    } else if (string(name2)) {
      if (value === void 0) {
        var ele = this[0];
        if (ele) {
          return style3.getStylePropertyValue(ele, name2);
        } else {
          return;
        }
      } else {
        style3.applyBypass(this, name2, value, updateTransitions);
        this.emitAndNotify("style");
      }
    } else if (name2 === void 0) {
      var _ele = this[0];
      if (_ele) {
        return style3.getRawStyle(_ele);
      } else {
        return;
      }
    }
    return this;
  },
  removeStyle: function removeStyle(names) {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return this;
    }
    var updateTransitions = false;
    var style3 = cy2.style();
    var eles = this;
    if (names === void 0) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        style3.removeAllBypasses(ele, updateTransitions);
      }
    } else {
      names = names.split(/\s+/);
      for (var _i = 0; _i < eles.length; _i++) {
        var _ele2 = eles[_i];
        style3.removeBypasses(_ele2, names, updateTransitions);
      }
    }
    this.emitAndNotify("style");
    return this;
  },
  show: function show() {
    this.css("display", "element");
    return this;
  },
  hide: function hide() {
    this.css("display", "none");
    return this;
  },
  effectiveOpacity: function effectiveOpacity() {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return 1;
    }
    var hasCompoundNodes2 = cy2.hasCompoundNodes();
    var ele = this[0];
    if (ele) {
      var _p = ele._private;
      var parentOpacity = ele.pstyle("opacity").value;
      if (!hasCompoundNodes2) {
        return parentOpacity;
      }
      var parents2 = !_p.data.parent ? null : ele.parents();
      if (parents2) {
        for (var i2 = 0; i2 < parents2.length; i2++) {
          var parent4 = parents2[i2];
          var opacity = parent4.pstyle("opacity").value;
          parentOpacity = opacity * parentOpacity;
        }
      }
      return parentOpacity;
    }
  },
  transparent: function transparent() {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return false;
    }
    var ele = this[0];
    var hasCompoundNodes2 = ele.cy().hasCompoundNodes();
    if (ele) {
      if (!hasCompoundNodes2) {
        return ele.pstyle("opacity").value === 0;
      } else {
        return ele.effectiveOpacity() === 0;
      }
    }
  },
  backgrounding: function backgrounding() {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return false;
    }
    var ele = this[0];
    return ele._private.backgrounding ? true : false;
  }
};
function checkCompound(ele, parentOk) {
  var _p = ele._private;
  var parents2 = _p.data.parent ? ele.parents() : null;
  if (parents2) {
    for (var i2 = 0; i2 < parents2.length; i2++) {
      var parent4 = parents2[i2];
      if (!parentOk(parent4)) {
        return false;
      }
    }
  }
  return true;
}
function defineDerivedStateFunction(specs) {
  var ok = specs.ok;
  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
  var parentOk = specs.parentOk || specs.ok;
  return function() {
    var cy2 = this.cy();
    if (!cy2.styleEnabled()) {
      return true;
    }
    var ele = this[0];
    var hasCompoundNodes2 = cy2.hasCompoundNodes();
    if (ele) {
      var _p = ele._private;
      if (!ok(ele)) {
        return false;
      }
      if (ele.isNode()) {
        return !hasCompoundNodes2 || checkCompound(ele, parentOk);
      } else {
        var src2 = _p.source;
        var tgt = _p.target;
        return edgeOkViaNode(src2) && (!hasCompoundNodes2 || checkCompound(src2, edgeOkViaNode)) && (src2 === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes2 || checkCompound(tgt, edgeOkViaNode)));
      }
    }
  };
}
var eleTakesUpSpace = cacheStyleFunction("eleTakesUpSpace", function(ele) {
  return ele.pstyle("display").value === "element" && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
});
elesfn$4.takesUpSpace = cachePrototypeStyleFunction("takesUpSpace", defineDerivedStateFunction({
  ok: eleTakesUpSpace
}));
var eleInteractive = cacheStyleFunction("eleInteractive", function(ele) {
  return ele.pstyle("events").value === "yes" && ele.pstyle("visibility").value === "visible" && eleTakesUpSpace(ele);
});
var parentInteractive = cacheStyleFunction("parentInteractive", function(parent4) {
  return parent4.pstyle("visibility").value === "visible" && eleTakesUpSpace(parent4);
});
elesfn$4.interactive = cachePrototypeStyleFunction("interactive", defineDerivedStateFunction({
  ok: eleInteractive,
  parentOk: parentInteractive,
  edgeOkViaNode: eleTakesUpSpace
}));
elesfn$4.noninteractive = function() {
  var ele = this[0];
  if (ele) {
    return !ele.interactive();
  }
};
var eleVisible = cacheStyleFunction("eleVisible", function(ele) {
  return ele.pstyle("visibility").value === "visible" && ele.pstyle("opacity").pfValue !== 0 && eleTakesUpSpace(ele);
});
var edgeVisibleViaNode = eleTakesUpSpace;
elesfn$4.visible = cachePrototypeStyleFunction("visible", defineDerivedStateFunction({
  ok: eleVisible,
  edgeOkViaNode: edgeVisibleViaNode
}));
elesfn$4.hidden = function() {
  var ele = this[0];
  if (ele) {
    return !ele.visible();
  }
};
elesfn$4.isBundledBezier = cachePrototypeStyleFunction("isBundledBezier", function() {
  if (!this.cy().styleEnabled()) {
    return false;
  }
  return !this.removed() && this.pstyle("curve-style").value === "bezier" && this.takesUpSpace();
});
elesfn$4.bypass = elesfn$4.css = elesfn$4.style;
elesfn$4.renderedCss = elesfn$4.renderedStyle;
elesfn$4.removeBypass = elesfn$4.removeCss = elesfn$4.removeStyle;
elesfn$4.pstyle = elesfn$4.parsedStyle;
var elesfn$3 = {};
function defineSwitchFunction(params) {
  return function() {
    var args = arguments;
    var changedEles = [];
    if (args.length === 2) {
      var data4 = args[0];
      var handler = args[1];
      this.on(params.event, data4, handler);
    } else if (args.length === 1 && fn$6(args[0])) {
      var _handler = args[0];
      this.on(params.event, _handler);
    } else if (args.length === 0 || args.length === 1 && array(args[0])) {
      var addlEvents = args.length === 1 ? args[0] : null;
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var able = !params.ableField || ele._private[params.ableField];
        var changed = ele._private[params.field] != params.value;
        if (params.overrideAble) {
          var overrideAble2 = params.overrideAble(ele);
          if (overrideAble2 !== void 0) {
            able = overrideAble2;
            if (!overrideAble2) {
              return this;
            }
          }
        }
        if (able) {
          ele._private[params.field] = params.value;
          if (changed) {
            changedEles.push(ele);
          }
        }
      }
      var changedColl = this.spawn(changedEles);
      changedColl.updateStyle();
      changedColl.emit(params.event);
      if (addlEvents) {
        changedColl.emit(addlEvents);
      }
    }
    return this;
  };
}
function defineSwitchSet(params) {
  elesfn$3[params.field] = function() {
    var ele = this[0];
    if (ele) {
      if (params.overrideField) {
        var val = params.overrideField(ele);
        if (val !== void 0) {
          return val;
        }
      }
      return ele._private[params.field];
    }
  };
  elesfn$3[params.on] = defineSwitchFunction({
    event: params.on,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: true
  });
  elesfn$3[params.off] = defineSwitchFunction({
    event: params.off,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: false
  });
}
defineSwitchSet({
  field: "locked",
  overrideField: function overrideField(ele) {
    return ele.cy().autolock() ? true : void 0;
  },
  on: "lock",
  off: "unlock"
});
defineSwitchSet({
  field: "grabbable",
  overrideField: function overrideField2(ele) {
    return ele.cy().autoungrabify() || ele.pannable() ? false : void 0;
  },
  on: "grabify",
  off: "ungrabify"
});
defineSwitchSet({
  field: "selected",
  ableField: "selectable",
  overrideAble: function overrideAble(ele) {
    return ele.cy().autounselectify() ? false : void 0;
  },
  on: "select",
  off: "unselect"
});
defineSwitchSet({
  field: "selectable",
  overrideField: function overrideField3(ele) {
    return ele.cy().autounselectify() ? false : void 0;
  },
  on: "selectify",
  off: "unselectify"
});
elesfn$3.deselect = elesfn$3.unselect;
elesfn$3.grabbed = function() {
  var ele = this[0];
  if (ele) {
    return ele._private.grabbed;
  }
};
defineSwitchSet({
  field: "active",
  on: "activate",
  off: "unactivate"
});
defineSwitchSet({
  field: "pannable",
  on: "panify",
  off: "unpanify"
});
elesfn$3.inactive = function() {
  var ele = this[0];
  if (ele) {
    return !ele._private.active;
  }
};
var elesfn$2 = {};
var defineDagExtremity = function defineDagExtremity2(params) {
  return function dagExtremityImpl(selector) {
    var eles = this;
    var ret = [];
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      if (!ele.isNode()) {
        continue;
      }
      var disqualified = false;
      var edges3 = ele.connectedEdges();
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        var src2 = edge.source();
        var tgt = edge.target();
        if (params.noIncomingEdges && tgt === ele && src2 !== ele || params.noOutgoingEdges && src2 === ele && tgt !== ele) {
          disqualified = true;
          break;
        }
      }
      if (!disqualified) {
        ret.push(ele);
      }
    }
    return this.spawn(ret, true).filter(selector);
  };
};
var defineDagOneHop = function defineDagOneHop2(params) {
  return function(selector) {
    var eles = this;
    var oEles = [];
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      if (!ele.isNode()) {
        continue;
      }
      var edges3 = ele.connectedEdges();
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        var src2 = edge.source();
        var tgt = edge.target();
        if (params.outgoing && src2 === ele) {
          oEles.push(edge);
          oEles.push(tgt);
        } else if (params.incoming && tgt === ele) {
          oEles.push(edge);
          oEles.push(src2);
        }
      }
    }
    return this.spawn(oEles, true).filter(selector);
  };
};
var defineDagAllHops = function defineDagAllHops2(params) {
  return function(selector) {
    var eles = this;
    var sEles = [];
    var sElesIds = {};
    for (; ; ) {
      var next2 = params.outgoing ? eles.outgoers() : eles.incomers();
      if (next2.length === 0) {
        break;
      }
      var newNext = false;
      for (var i2 = 0; i2 < next2.length; i2++) {
        var n2 = next2[i2];
        var nid = n2.id();
        if (!sElesIds[nid]) {
          sElesIds[nid] = true;
          sEles.push(n2);
          newNext = true;
        }
      }
      if (!newNext) {
        break;
      }
      eles = next2;
    }
    return this.spawn(sEles, true).filter(selector);
  };
};
elesfn$2.clearTraversalCache = function() {
  for (var i2 = 0; i2 < this.length; i2++) {
    this[i2]._private.traversalCache = null;
  }
};
extend$1(elesfn$2, {
  // get the root nodes in the DAG
  roots: defineDagExtremity({
    noIncomingEdges: true
  }),
  // get the leaf nodes in the DAG
  leaves: defineDagExtremity({
    noOutgoingEdges: true
  }),
  // normally called children in graph theory
  // these nodes =edges=> outgoing nodes
  outgoers: cache(defineDagOneHop({
    outgoing: true
  }), "outgoers"),
  // aka DAG descendants
  successors: defineDagAllHops({
    outgoing: true
  }),
  // normally called parents in graph theory
  // these nodes <=edges= incoming nodes
  incomers: cache(defineDagOneHop({
    incoming: true
  }), "incomers"),
  // aka DAG ancestors
  predecessors: defineDagAllHops({
    incoming: true
  })
});
extend$1(elesfn$2, {
  neighborhood: cache(function(selector) {
    var elements = [];
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var node = nodes3[i2];
      var connectedEdges = node.connectedEdges();
      for (var j2 = 0; j2 < connectedEdges.length; j2++) {
        var edge = connectedEdges[j2];
        var src2 = edge.source();
        var tgt = edge.target();
        var otherNode = node === src2 ? tgt : src2;
        if (otherNode.length > 0) {
          elements.push(otherNode[0]);
        }
        elements.push(edge[0]);
      }
    }
    return this.spawn(elements, true).filter(selector);
  }, "neighborhood"),
  closedNeighborhood: function closedNeighborhood(selector) {
    return this.neighborhood().add(this).filter(selector);
  },
  openNeighborhood: function openNeighborhood(selector) {
    return this.neighborhood(selector);
  }
});
elesfn$2.neighbourhood = elesfn$2.neighborhood;
elesfn$2.closedNeighbourhood = elesfn$2.closedNeighborhood;
elesfn$2.openNeighbourhood = elesfn$2.openNeighborhood;
extend$1(elesfn$2, {
  source: cache(function sourceImpl(selector) {
    var ele = this[0];
    var src2;
    if (ele) {
      src2 = ele._private.source || ele.cy().collection();
    }
    return src2 && selector ? src2.filter(selector) : src2;
  }, "source"),
  target: cache(function targetImpl(selector) {
    var ele = this[0];
    var tgt;
    if (ele) {
      tgt = ele._private.target || ele.cy().collection();
    }
    return tgt && selector ? tgt.filter(selector) : tgt;
  }, "target"),
  sources: defineSourceFunction({
    attr: "source"
  }),
  targets: defineSourceFunction({
    attr: "target"
  })
});
function defineSourceFunction(params) {
  return function sourceImpl2(selector) {
    var sources = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var src2 = ele._private[params.attr];
      if (src2) {
        sources.push(src2);
      }
    }
    return this.spawn(sources, true).filter(selector);
  };
}
extend$1(elesfn$2, {
  edgesWith: cache(defineEdgesWithFunction(), "edgesWith"),
  edgesTo: cache(defineEdgesWithFunction({
    thisIsSrc: true
  }), "edgesTo")
});
function defineEdgesWithFunction(params) {
  return function edgesWithImpl(otherNodes) {
    var elements = [];
    var cy2 = this._private.cy;
    var p2 = params || {};
    if (string(otherNodes)) {
      otherNodes = cy2.$(otherNodes);
    }
    for (var h2 = 0; h2 < otherNodes.length; h2++) {
      var edges3 = otherNodes[h2]._private.edges;
      for (var i2 = 0; i2 < edges3.length; i2++) {
        var edge = edges3[i2];
        var edgeData = edge._private.data;
        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
        var edgeConnectsThisAndOther = thisToOther || otherToThis;
        if (!edgeConnectsThisAndOther) {
          continue;
        }
        if (p2.thisIsSrc || p2.thisIsTgt) {
          if (p2.thisIsSrc && !thisToOther) {
            continue;
          }
          if (p2.thisIsTgt && !otherToThis) {
            continue;
          }
        }
        elements.push(edge);
      }
    }
    return this.spawn(elements, true);
  };
}
extend$1(elesfn$2, {
  connectedEdges: cache(function(selector) {
    var retEles = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var node = eles[i2];
      if (!node.isNode()) {
        continue;
      }
      var edges3 = node._private.edges;
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        retEles.push(edge);
      }
    }
    return this.spawn(retEles, true).filter(selector);
  }, "connectedEdges"),
  connectedNodes: cache(function(selector) {
    var retEles = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var edge = eles[i2];
      if (!edge.isEdge()) {
        continue;
      }
      retEles.push(edge.source()[0]);
      retEles.push(edge.target()[0]);
    }
    return this.spawn(retEles, true).filter(selector);
  }, "connectedNodes"),
  parallelEdges: cache(defineParallelEdgesFunction(), "parallelEdges"),
  codirectedEdges: cache(defineParallelEdgesFunction({
    codirected: true
  }), "codirectedEdges")
});
function defineParallelEdgesFunction(params) {
  var defaults3 = {
    codirected: false
  };
  params = extend$1({}, defaults3, params);
  return function parallelEdgesImpl(selector) {
    var elements = [];
    var edges3 = this.edges();
    var p2 = params;
    for (var i2 = 0; i2 < edges3.length; i2++) {
      var edge1 = edges3[i2];
      var edge1_p = edge1._private;
      var src1 = edge1_p.source;
      var srcid1 = src1._private.data.id;
      var tgtid1 = edge1_p.data.target;
      var srcEdges1 = src1._private.edges;
      for (var j2 = 0; j2 < srcEdges1.length; j2++) {
        var edge2 = srcEdges1[j2];
        var edge2data = edge2._private.data;
        var tgtid2 = edge2data.target;
        var srcid2 = edge2data.source;
        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;
        if (p2.codirected && codirected || !p2.codirected && (codirected || oppdirected)) {
          elements.push(edge2);
        }
      }
    }
    return this.spawn(elements, true).filter(selector);
  };
}
extend$1(elesfn$2, {
  components: function components(root2) {
    var self2 = this;
    var cy2 = self2.cy();
    var visited = cy2.collection();
    var unvisited = root2 == null ? self2.nodes() : root2.nodes();
    var components2 = [];
    if (root2 != null && unvisited.empty()) {
      unvisited = root2.sources();
    }
    var visitInComponent = function visitInComponent2(node, component2) {
      visited.merge(node);
      unvisited.unmerge(node);
      component2.merge(node);
    };
    if (unvisited.empty()) {
      return self2.spawn();
    }
    var _loop = function _loop2() {
      var cmpt = cy2.collection();
      components2.push(cmpt);
      var root3 = unvisited[0];
      visitInComponent(root3, cmpt);
      self2.bfs({
        directed: false,
        roots: root3,
        visit: function visit(v2) {
          return visitInComponent(v2, cmpt);
        }
      });
      cmpt.forEach(function(node) {
        node.connectedEdges().forEach(function(e2) {
          if (self2.has(e2) && cmpt.has(e2.source()) && cmpt.has(e2.target())) {
            cmpt.merge(e2);
          }
        });
      });
    };
    do {
      _loop();
    } while (unvisited.length > 0);
    return components2;
  },
  component: function component() {
    var ele = this[0];
    return ele.cy().mutableElements().components(ele)[0];
  }
});
elesfn$2.componentsOf = elesfn$2.components;
var Collection = function Collection2(cy2, elements) {
  var unique = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var removed = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (cy2 === void 0) {
    error("A collection must have a reference to the core");
    return;
  }
  var map2 = new Map$1();
  var createdElements = false;
  if (!elements) {
    elements = [];
  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
    createdElements = true;
    var eles = [];
    var elesIds = new Set$1();
    for (var i2 = 0, l2 = elements.length; i2 < l2; i2++) {
      var json3 = elements[i2];
      if (json3.data == null) {
        json3.data = {};
      }
      var _data = json3.data;
      if (_data.id == null) {
        _data.id = uuid();
      } else if (cy2.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
        continue;
      }
      var ele = new Element$1(cy2, json3, false);
      eles.push(ele);
      elesIds.add(_data.id);
    }
    elements = eles;
  }
  this.length = 0;
  for (var _i = 0, _l = elements.length; _i < _l; _i++) {
    var element$12 = elements[_i][0];
    if (element$12 == null) {
      continue;
    }
    var id2 = element$12._private.data.id;
    if (!unique || !map2.has(id2)) {
      if (unique) {
        map2.set(id2, {
          index: this.length,
          ele: element$12
        });
      }
      this[this.length] = element$12;
      this.length++;
    }
  }
  this._private = {
    eles: this,
    cy: cy2,
    get map() {
      if (this.lazyMap == null) {
        this.rebuildMap();
      }
      return this.lazyMap;
    },
    set map(m2) {
      this.lazyMap = m2;
    },
    rebuildMap: function rebuildMap() {
      var m2 = this.lazyMap = new Map$1();
      var eles2 = this.eles;
      for (var _i2 = 0; _i2 < eles2.length; _i2++) {
        var _ele = eles2[_i2];
        m2.set(_ele.id(), {
          index: _i2,
          ele: _ele
        });
      }
    }
  };
  if (unique) {
    this._private.map = map2;
  }
  if (createdElements && !removed) {
    this.restore();
  }
};
var elesfn$1 = Element$1.prototype = Collection.prototype = Object.create(Array.prototype);
elesfn$1.instanceString = function() {
  return "collection";
};
elesfn$1.spawn = function(eles, unique) {
  return new Collection(this.cy(), eles, unique);
};
elesfn$1.spawnSelf = function() {
  return this.spawn(this);
};
elesfn$1.cy = function() {
  return this._private.cy;
};
elesfn$1.renderer = function() {
  return this._private.cy.renderer();
};
elesfn$1.element = function() {
  return this[0];
};
elesfn$1.collection = function() {
  if (collection(this)) {
    return this;
  } else {
    return new Collection(this._private.cy, [this]);
  }
};
elesfn$1.unique = function() {
  return new Collection(this._private.cy, this, true);
};
elesfn$1.hasElementWithId = function(id2) {
  id2 = "" + id2;
  return this._private.map.has(id2);
};
elesfn$1.getElementById = function(id2) {
  id2 = "" + id2;
  var cy2 = this._private.cy;
  var entry = this._private.map.get(id2);
  return entry ? entry.ele : new Collection(cy2);
};
elesfn$1.$id = elesfn$1.getElementById;
elesfn$1.poolIndex = function() {
  var cy2 = this._private.cy;
  var eles = cy2._private.elements;
  var id2 = this[0]._private.data.id;
  return eles._private.map.get(id2).index;
};
elesfn$1.indexOf = function(ele) {
  var id2 = ele[0]._private.data.id;
  return this._private.map.get(id2).index;
};
elesfn$1.indexOfId = function(id2) {
  id2 = "" + id2;
  return this._private.map.get(id2).index;
};
elesfn$1.json = function(obj) {
  var ele = this.element();
  var cy2 = this.cy();
  if (ele == null && obj) {
    return this;
  }
  if (ele == null) {
    return void 0;
  }
  var p2 = ele._private;
  if (plainObject(obj)) {
    cy2.startBatch();
    if (obj.data) {
      ele.data(obj.data);
      var _data2 = p2.data;
      if (ele.isEdge()) {
        var move = false;
        var spec = {};
        var src2 = obj.data.source;
        var tgt = obj.data.target;
        if (src2 != null && src2 != _data2.source) {
          spec.source = "" + src2;
          move = true;
        }
        if (tgt != null && tgt != _data2.target) {
          spec.target = "" + tgt;
          move = true;
        }
        if (move) {
          ele = ele.move(spec);
        }
      } else {
        var newParentValSpecd = "parent" in obj.data;
        var parent4 = obj.data.parent;
        if (newParentValSpecd && (parent4 != null || _data2.parent != null) && parent4 != _data2.parent) {
          if (parent4 === void 0) {
            parent4 = null;
          }
          if (parent4 != null) {
            parent4 = "" + parent4;
          }
          ele = ele.move({
            parent: parent4
          });
        }
      }
    }
    if (obj.position) {
      ele.position(obj.position);
    }
    var checkSwitch = function checkSwitch2(k2, trueFnName, falseFnName) {
      var obj_k = obj[k2];
      if (obj_k != null && obj_k !== p2[k2]) {
        if (obj_k) {
          ele[trueFnName]();
        } else {
          ele[falseFnName]();
        }
      }
    };
    checkSwitch("removed", "remove", "restore");
    checkSwitch("selected", "select", "unselect");
    checkSwitch("selectable", "selectify", "unselectify");
    checkSwitch("locked", "lock", "unlock");
    checkSwitch("grabbable", "grabify", "ungrabify");
    checkSwitch("pannable", "panify", "unpanify");
    if (obj.classes != null) {
      ele.classes(obj.classes);
    }
    cy2.endBatch();
    return this;
  } else if (obj === void 0) {
    var json3 = {
      data: copy(p2.data),
      position: copy(p2.position),
      group: p2.group,
      removed: p2.removed,
      selected: p2.selected,
      selectable: p2.selectable,
      locked: p2.locked,
      grabbable: p2.grabbable,
      pannable: p2.pannable,
      classes: null
    };
    json3.classes = "";
    var i2 = 0;
    p2.classes.forEach(function(cls) {
      return json3.classes += i2++ === 0 ? cls : " " + cls;
    });
    return json3;
  }
};
elesfn$1.jsons = function() {
  var jsons = [];
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var json3 = ele.json();
    jsons.push(json3);
  }
  return jsons;
};
elesfn$1.clone = function() {
  var cy2 = this.cy();
  var elesArr = [];
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var json3 = ele.json();
    var clone3 = new Element$1(cy2, json3, false);
    elesArr.push(clone3);
  }
  return new Collection(cy2, elesArr);
};
elesfn$1.copy = elesfn$1.clone;
elesfn$1.restore = function() {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  var addToPool2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var self2 = this;
  var cy2 = self2.cy();
  var cy_p = cy2._private;
  var nodes3 = [];
  var edges3 = [];
  var elements;
  for (var _i3 = 0, l2 = self2.length; _i3 < l2; _i3++) {
    var ele = self2[_i3];
    if (addToPool2 && !ele.removed()) {
      continue;
    }
    if (ele.isNode()) {
      nodes3.push(ele);
    } else {
      edges3.push(ele);
    }
  }
  elements = nodes3.concat(edges3);
  var i2;
  var removeFromElements = function removeFromElements2() {
    elements.splice(i2, 1);
    i2--;
  };
  for (i2 = 0; i2 < elements.length; i2++) {
    var _ele2 = elements[i2];
    var _private = _ele2._private;
    var _data3 = _private.data;
    _ele2.clearTraversalCache();
    if (!addToPool2 && !_private.removed)
      ;
    else if (_data3.id === void 0) {
      _data3.id = uuid();
    } else if (number$1(_data3.id)) {
      _data3.id = "" + _data3.id;
    } else if (emptyString(_data3.id) || !string(_data3.id)) {
      error("Can not create element with invalid string ID `" + _data3.id + "`");
      removeFromElements();
      continue;
    } else if (cy2.hasElementWithId(_data3.id)) {
      error("Can not create second element with ID `" + _data3.id + "`");
      removeFromElements();
      continue;
    }
    var id2 = _data3.id;
    if (_ele2.isNode()) {
      var pos = _private.position;
      if (pos.x == null) {
        pos.x = 0;
      }
      if (pos.y == null) {
        pos.y = 0;
      }
    }
    if (_ele2.isEdge()) {
      var edge = _ele2;
      var fields = ["source", "target"];
      var fieldsLength = fields.length;
      var badSourceOrTarget = false;
      for (var j2 = 0; j2 < fieldsLength; j2++) {
        var field = fields[j2];
        var val = _data3[field];
        if (number$1(val)) {
          val = _data3[field] = "" + _data3[field];
        }
        if (val == null || val === "") {
          error("Can not create edge `" + id2 + "` with unspecified " + field);
          badSourceOrTarget = true;
        } else if (!cy2.hasElementWithId(val)) {
          error("Can not create edge `" + id2 + "` with nonexistant " + field + " `" + val + "`");
          badSourceOrTarget = true;
        }
      }
      if (badSourceOrTarget) {
        removeFromElements();
        continue;
      }
      var src2 = cy2.getElementById(_data3.source);
      var tgt = cy2.getElementById(_data3.target);
      if (src2.same(tgt)) {
        src2._private.edges.push(edge);
      } else {
        src2._private.edges.push(edge);
        tgt._private.edges.push(edge);
      }
      edge._private.source = src2;
      edge._private.target = tgt;
    }
    _private.map = new Map$1();
    _private.map.set(id2, {
      ele: _ele2,
      index: 0
    });
    _private.removed = false;
    if (addToPool2) {
      cy2.addToPool(_ele2);
    }
  }
  for (var _i4 = 0; _i4 < nodes3.length; _i4++) {
    var node = nodes3[_i4];
    var _data4 = node._private.data;
    if (number$1(_data4.parent)) {
      _data4.parent = "" + _data4.parent;
    }
    var parentId = _data4.parent;
    var specifiedParent = parentId != null;
    if (specifiedParent || node._private.parent) {
      var parent4 = node._private.parent ? cy2.collection().merge(node._private.parent) : cy2.getElementById(parentId);
      if (parent4.empty()) {
        _data4.parent = void 0;
      } else if (parent4[0].removed()) {
        warn("Node added with missing parent, reference to parent removed");
        _data4.parent = void 0;
        node._private.parent = null;
      } else {
        var selfAsParent = false;
        var ancestor = parent4;
        while (!ancestor.empty()) {
          if (node.same(ancestor)) {
            selfAsParent = true;
            _data4.parent = void 0;
            break;
          }
          ancestor = ancestor.parent();
        }
        if (!selfAsParent) {
          parent4[0]._private.children.push(node);
          node._private.parent = parent4[0];
          cy_p.hasCompoundNodes = true;
        }
      }
    }
  }
  if (elements.length > 0) {
    var restored = elements.length === self2.length ? self2 : new Collection(cy2, elements);
    for (var _i5 = 0; _i5 < restored.length; _i5++) {
      var _ele3 = restored[_i5];
      if (_ele3.isNode()) {
        continue;
      }
      _ele3.parallelEdges().clearTraversalCache();
      _ele3.source().clearTraversalCache();
      _ele3.target().clearTraversalCache();
    }
    var toUpdateStyle;
    if (cy_p.hasCompoundNodes) {
      toUpdateStyle = cy2.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
    } else {
      toUpdateStyle = restored;
    }
    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);
    if (notifyRenderer) {
      restored.emitAndNotify("add");
    } else if (addToPool2) {
      restored.emit("add");
    }
  }
  return self2;
};
elesfn$1.removed = function() {
  var ele = this[0];
  return ele && ele._private.removed;
};
elesfn$1.inside = function() {
  var ele = this[0];
  return ele && !ele._private.removed;
};
elesfn$1.remove = function() {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  var removeFromPool2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var self2 = this;
  var elesToRemove = [];
  var elesToRemoveIds = {};
  var cy2 = self2._private.cy;
  function addConnectedEdges(node) {
    var edges3 = node._private.edges;
    for (var i3 = 0; i3 < edges3.length; i3++) {
      add3(edges3[i3]);
    }
  }
  function addChildren2(node) {
    var children2 = node._private.children;
    for (var i3 = 0; i3 < children2.length; i3++) {
      add3(children2[i3]);
    }
  }
  function add3(ele2) {
    var alreadyAdded = elesToRemoveIds[ele2.id()];
    if (removeFromPool2 && ele2.removed() || alreadyAdded) {
      return;
    } else {
      elesToRemoveIds[ele2.id()] = true;
    }
    if (ele2.isNode()) {
      elesToRemove.push(ele2);
      addConnectedEdges(ele2);
      addChildren2(ele2);
    } else {
      elesToRemove.unshift(ele2);
    }
  }
  for (var i2 = 0, l2 = self2.length; i2 < l2; i2++) {
    var ele = self2[i2];
    add3(ele);
  }
  function removeEdgeRef(node, edge) {
    var connectedEdges = node._private.edges;
    removeFromArray(connectedEdges, edge);
    node.clearTraversalCache();
  }
  function removeParallelRef(pllEdge2) {
    pllEdge2.clearTraversalCache();
  }
  var alteredParents = [];
  alteredParents.ids = {};
  function removeChildRef(parent5, ele2) {
    ele2 = ele2[0];
    parent5 = parent5[0];
    var children2 = parent5._private.children;
    var pid = parent5.id();
    removeFromArray(children2, ele2);
    ele2._private.parent = null;
    if (!alteredParents.ids[pid]) {
      alteredParents.ids[pid] = true;
      alteredParents.push(parent5);
    }
  }
  self2.dirtyCompoundBoundsCache();
  if (removeFromPool2) {
    cy2.removeFromPool(elesToRemove);
  }
  for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {
    var _ele4 = elesToRemove[_i6];
    if (_ele4.isEdge()) {
      var src2 = _ele4.source()[0];
      var tgt = _ele4.target()[0];
      removeEdgeRef(src2, _ele4);
      removeEdgeRef(tgt, _ele4);
      var pllEdges = _ele4.parallelEdges();
      for (var j2 = 0; j2 < pllEdges.length; j2++) {
        var pllEdge = pllEdges[j2];
        removeParallelRef(pllEdge);
        if (pllEdge.isBundledBezier()) {
          pllEdge.dirtyBoundingBoxCache();
        }
      }
    } else {
      var parent4 = _ele4.parent();
      if (parent4.length !== 0) {
        removeChildRef(parent4, _ele4);
      }
    }
    if (removeFromPool2) {
      _ele4._private.removed = true;
    }
  }
  var elesStillInside = cy2._private.elements;
  cy2._private.hasCompoundNodes = false;
  for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {
    var _ele5 = elesStillInside[_i7];
    if (_ele5.isParent()) {
      cy2._private.hasCompoundNodes = true;
      break;
    }
  }
  var removedElements = new Collection(this.cy(), elesToRemove);
  if (removedElements.size() > 0) {
    if (notifyRenderer) {
      removedElements.emitAndNotify("remove");
    } else if (removeFromPool2) {
      removedElements.emit("remove");
    }
  }
  for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {
    var _ele6 = alteredParents[_i8];
    if (!removeFromPool2 || !_ele6.removed()) {
      _ele6.updateStyle();
    }
  }
  return removedElements;
};
elesfn$1.move = function(struct) {
  var cy2 = this._private.cy;
  var eles = this;
  var notifyRenderer = false;
  var modifyPool = false;
  var toString3 = function toString4(id2) {
    return id2 == null ? id2 : "" + id2;
  };
  if (struct.source !== void 0 || struct.target !== void 0) {
    var srcId = toString3(struct.source);
    var tgtId = toString3(struct.target);
    var srcExists = srcId != null && cy2.hasElementWithId(srcId);
    var tgtExists = tgtId != null && cy2.hasElementWithId(tgtId);
    if (srcExists || tgtExists) {
      cy2.batch(function() {
        eles.remove(notifyRenderer, modifyPool);
        eles.emitAndNotify("moveout");
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var _data5 = ele._private.data;
          if (ele.isEdge()) {
            if (srcExists) {
              _data5.source = srcId;
            }
            if (tgtExists) {
              _data5.target = tgtId;
            }
          }
        }
        eles.restore(notifyRenderer, modifyPool);
      });
      eles.emitAndNotify("move");
    }
  } else if (struct.parent !== void 0) {
    var parentId = toString3(struct.parent);
    var parentExists = parentId === null || cy2.hasElementWithId(parentId);
    if (parentExists) {
      var pidToAssign = parentId === null ? void 0 : parentId;
      cy2.batch(function() {
        var updated = eles.remove(notifyRenderer, modifyPool);
        updated.emitAndNotify("moveout");
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var _data6 = ele._private.data;
          if (ele.isNode()) {
            _data6.parent = pidToAssign;
          }
        }
        updated.restore(notifyRenderer, modifyPool);
      });
      eles.emitAndNotify("move");
    }
  }
  return this;
};
[elesfn$j, elesfn$i, elesfn$h, elesfn$g, elesfn$f, data3, elesfn$d, dimensions, elesfn$9, elesfn$8, elesfn$7, elesfn$6, elesfn$5, elesfn$4, elesfn$3, elesfn$2].forEach(function(props) {
  extend$1(elesfn$1, props);
});
var corefn$9 = {
  add: function add2(opts) {
    var elements;
    var cy2 = this;
    if (elementOrCollection(opts)) {
      var eles = opts;
      if (eles._private.cy === cy2) {
        elements = eles.restore();
      } else {
        var jsons = [];
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          jsons.push(ele.json());
        }
        elements = new Collection(cy2, jsons);
      }
    } else if (array(opts)) {
      var _jsons = opts;
      elements = new Collection(cy2, _jsons);
    } else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
      var elesByGroup = opts;
      var _jsons2 = [];
      var grs = ["nodes", "edges"];
      for (var _i = 0, il = grs.length; _i < il; _i++) {
        var group2 = grs[_i];
        var elesArray = elesByGroup[group2];
        if (array(elesArray)) {
          for (var j2 = 0, jl = elesArray.length; j2 < jl; j2++) {
            var json3 = extend$1({
              group: group2
            }, elesArray[j2]);
            _jsons2.push(json3);
          }
        }
      }
      elements = new Collection(cy2, _jsons2);
    } else {
      var _json = opts;
      elements = new Element$1(cy2, _json).collection();
    }
    return elements;
  },
  remove: function remove(collection4) {
    if (elementOrCollection(collection4))
      ;
    else if (string(collection4)) {
      var selector = collection4;
      collection4 = this.$(selector);
    }
    return collection4.remove();
  }
};
/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
function generateCubicBezier(mX1, mY1, mX2, mY2) {
  var NEWTON_ITERATIONS = 4, NEWTON_MIN_SLOPE = 1e-3, SUBDIVISION_PRECISION = 1e-7, SUBDIVISION_MAX_ITERATIONS = 10, kSplineTableSize = 11, kSampleStepSize = 1 / (kSplineTableSize - 1), float32ArraySupported = typeof Float32Array !== "undefined";
  if (arguments.length !== 4) {
    return false;
  }
  for (var i2 = 0; i2 < 4; ++i2) {
    if (typeof arguments[i2] !== "number" || isNaN(arguments[i2]) || !isFinite(arguments[i2])) {
      return false;
    }
  }
  mX1 = Math.min(mX1, 1);
  mX2 = Math.min(mX2, 1);
  mX1 = Math.max(mX1, 0);
  mX2 = Math.max(mX2, 0);
  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  function A2(aA1, aA2) {
    return 1 - 3 * aA2 + 3 * aA1;
  }
  function B2(aA1, aA2) {
    return 3 * aA2 - 6 * aA1;
  }
  function C2(aA1) {
    return 3 * aA1;
  }
  function calcBezier(aT, aA1, aA2) {
    return ((A2(aA1, aA2) * aT + B2(aA1, aA2)) * aT + C2(aA1)) * aT;
  }
  function getSlope(aT, aA1, aA2) {
    return 3 * A2(aA1, aA2) * aT * aT + 2 * B2(aA1, aA2) * aT + C2(aA1);
  }
  function newtonRaphsonIterate(aX, aGuessT) {
    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  function calcSampleValues() {
    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
    }
  }
  function binarySubdivide(aX, aA, aB) {
    var currentX, currentT, i3 = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i3 < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }
  function getTForX(aX) {
    var intervalStart = 0, currentSample = 1, lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist4 = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]), guessForT = intervalStart + dist4 * kSampleStepSize, initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
    }
  }
  var _precomputed = false;
  function precompute() {
    _precomputed = true;
    if (mX1 !== mY1 || mX2 !== mY2) {
      calcSampleValues();
    }
  }
  var f2 = function f3(aX) {
    if (!_precomputed) {
      precompute();
    }
    if (mX1 === mY1 && mX2 === mY2) {
      return aX;
    }
    if (aX === 0) {
      return 0;
    }
    if (aX === 1) {
      return 1;
    }
    return calcBezier(getTForX(aX), mY1, mY2);
  };
  f2.getControlPoints = function() {
    return [{
      x: mX1,
      y: mY1
    }, {
      x: mX2,
      y: mY2
    }];
  };
  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
  f2.toString = function() {
    return str;
  };
  return f2;
}
/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
var generateSpringRK4 = function() {
  function springAccelerationForState(state) {
    return -state.tension * state.x - state.friction * state.v;
  }
  function springEvaluateStateWithDerivative(initialState, dt2, derivative) {
    var state = {
      x: initialState.x + derivative.dx * dt2,
      v: initialState.v + derivative.dv * dt2,
      tension: initialState.tension,
      friction: initialState.friction
    };
    return {
      dx: state.v,
      dv: springAccelerationForState(state)
    };
  }
  function springIntegrateState(state, dt2) {
    var a2 = {
      dx: state.v,
      dv: springAccelerationForState(state)
    }, b2 = springEvaluateStateWithDerivative(state, dt2 * 0.5, a2), c2 = springEvaluateStateWithDerivative(state, dt2 * 0.5, b2), d2 = springEvaluateStateWithDerivative(state, dt2, c2), dxdt = 1 / 6 * (a2.dx + 2 * (b2.dx + c2.dx) + d2.dx), dvdt = 1 / 6 * (a2.dv + 2 * (b2.dv + c2.dv) + d2.dv);
    state.x = state.x + dxdt * dt2;
    state.v = state.v + dvdt * dt2;
    return state;
  }
  return function springRK4Factory(tension, friction, duration) {
    var initState = {
      x: -1,
      v: 0,
      tension: null,
      friction: null
    }, path = [0], time_lapsed = 0, tolerance = 1 / 1e4, DT = 16 / 1e3, have_duration, dt2, last_state;
    tension = parseFloat(tension) || 500;
    friction = parseFloat(friction) || 20;
    duration = duration || null;
    initState.tension = tension;
    initState.friction = friction;
    have_duration = duration !== null;
    if (have_duration) {
      time_lapsed = springRK4Factory(tension, friction);
      dt2 = time_lapsed / duration * DT;
    } else {
      dt2 = DT;
    }
    for (; ; ) {
      last_state = springIntegrateState(last_state || initState, dt2);
      path.push(1 + last_state.x);
      time_lapsed += 16;
      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
        break;
      }
    }
    return !have_duration ? time_lapsed : function(percentComplete) {
      return path[percentComplete * (path.length - 1) | 0];
    };
  };
}();
var cubicBezier = function cubicBezier2(t1, p1, t22, p2) {
  var bezier = generateCubicBezier(t1, p1, t22, p2);
  return function(start, end, percent) {
    return start + (end - start) * bezier(percent);
  };
};
var easings = {
  "linear": function linear(start, end, percent) {
    return start + (end - start) * percent;
  },
  // default easings
  "ease": cubicBezier(0.25, 0.1, 0.25, 1),
  "ease-in": cubicBezier(0.42, 0, 1, 1),
  "ease-out": cubicBezier(0, 0, 0.58, 1),
  "ease-in-out": cubicBezier(0.42, 0, 0.58, 1),
  // sine
  "ease-in-sine": cubicBezier(0.47, 0, 0.745, 0.715),
  "ease-out-sine": cubicBezier(0.39, 0.575, 0.565, 1),
  "ease-in-out-sine": cubicBezier(0.445, 0.05, 0.55, 0.95),
  // quad
  "ease-in-quad": cubicBezier(0.55, 0.085, 0.68, 0.53),
  "ease-out-quad": cubicBezier(0.25, 0.46, 0.45, 0.94),
  "ease-in-out-quad": cubicBezier(0.455, 0.03, 0.515, 0.955),
  // cubic
  "ease-in-cubic": cubicBezier(0.55, 0.055, 0.675, 0.19),
  "ease-out-cubic": cubicBezier(0.215, 0.61, 0.355, 1),
  "ease-in-out-cubic": cubicBezier(0.645, 0.045, 0.355, 1),
  // quart
  "ease-in-quart": cubicBezier(0.895, 0.03, 0.685, 0.22),
  "ease-out-quart": cubicBezier(0.165, 0.84, 0.44, 1),
  "ease-in-out-quart": cubicBezier(0.77, 0, 0.175, 1),
  // quint
  "ease-in-quint": cubicBezier(0.755, 0.05, 0.855, 0.06),
  "ease-out-quint": cubicBezier(0.23, 1, 0.32, 1),
  "ease-in-out-quint": cubicBezier(0.86, 0, 0.07, 1),
  // expo
  "ease-in-expo": cubicBezier(0.95, 0.05, 0.795, 0.035),
  "ease-out-expo": cubicBezier(0.19, 1, 0.22, 1),
  "ease-in-out-expo": cubicBezier(1, 0, 0, 1),
  // circ
  "ease-in-circ": cubicBezier(0.6, 0.04, 0.98, 0.335),
  "ease-out-circ": cubicBezier(0.075, 0.82, 0.165, 1),
  "ease-in-out-circ": cubicBezier(0.785, 0.135, 0.15, 0.86),
  // user param easings...
  "spring": function spring(tension, friction, duration) {
    if (duration === 0) {
      return easings.linear;
    }
    var spring2 = generateSpringRK4(tension, friction, duration);
    return function(start, end, percent) {
      return start + (end - start) * spring2(percent);
    };
  },
  "cubic-bezier": cubicBezier
};
function getEasedValue(type, start, end, percent, easingFn) {
  if (percent === 1) {
    return end;
  }
  if (start === end) {
    return end;
  }
  var val = easingFn(start, end, percent);
  if (type == null) {
    return val;
  }
  if (type.roundValue || type.color) {
    val = Math.round(val);
  }
  if (type.min !== void 0) {
    val = Math.max(val, type.min);
  }
  if (type.max !== void 0) {
    val = Math.min(val, type.max);
  }
  return val;
}
function getValue(prop, spec) {
  if (prop.pfValue != null || prop.value != null) {
    if (prop.pfValue != null && (spec == null || spec.type.units !== "%")) {
      return prop.pfValue;
    } else {
      return prop.value;
    }
  } else {
    return prop;
  }
}
function ease(startProp, endProp, percent, easingFn, propSpec) {
  var type = propSpec != null ? propSpec.type : null;
  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }
  var start = getValue(startProp, propSpec);
  var end = getValue(endProp, propSpec);
  if (number$1(start) && number$1(end)) {
    return getEasedValue(type, start, end, percent, easingFn);
  } else if (array(start) && array(end)) {
    var easedArr = [];
    for (var i2 = 0; i2 < end.length; i2++) {
      var si = start[i2];
      var ei = end[i2];
      if (si != null && ei != null) {
        var val = getEasedValue(type, si, ei, percent, easingFn);
        easedArr.push(val);
      } else {
        easedArr.push(ei);
      }
    }
    return easedArr;
  }
  return void 0;
}
function step$1(self2, ani, now2, isCore) {
  var isEles = !isCore;
  var _p = self2._private;
  var ani_p = ani._private;
  var pEasing = ani_p.easing;
  var startTime = ani_p.startTime;
  var cy2 = isCore ? self2 : self2.cy();
  var style3 = cy2.style();
  if (!ani_p.easingImpl) {
    if (pEasing == null) {
      ani_p.easingImpl = easings["linear"];
    } else {
      var easingVals;
      if (string(pEasing)) {
        var easingProp = style3.parse("transition-timing-function", pEasing);
        easingVals = easingProp.value;
      } else {
        easingVals = pEasing;
      }
      var name2, args;
      if (string(easingVals)) {
        name2 = easingVals;
        args = [];
      } else {
        name2 = easingVals[1];
        args = easingVals.slice(2).map(function(n2) {
          return +n2;
        });
      }
      if (args.length > 0) {
        if (name2 === "spring") {
          args.push(ani_p.duration);
        }
        ani_p.easingImpl = easings[name2].apply(null, args);
      } else {
        ani_p.easingImpl = easings[name2];
      }
    }
  }
  var easing = ani_p.easingImpl;
  var percent;
  if (ani_p.duration === 0) {
    percent = 1;
  } else {
    percent = (now2 - startTime) / ani_p.duration;
  }
  if (ani_p.applying) {
    percent = ani_p.progress;
  }
  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }
  if (ani_p.delay == null) {
    var startPos = ani_p.startPosition;
    var endPos = ani_p.position;
    if (endPos && isEles && !self2.locked()) {
      var newPos = {};
      if (valid(startPos.x, endPos.x)) {
        newPos.x = ease(startPos.x, endPos.x, percent, easing);
      }
      if (valid(startPos.y, endPos.y)) {
        newPos.y = ease(startPos.y, endPos.y, percent, easing);
      }
      self2.position(newPos);
    }
    var startPan = ani_p.startPan;
    var endPan = ani_p.pan;
    var pan2 = _p.pan;
    var animatingPan = endPan != null && isCore;
    if (animatingPan) {
      if (valid(startPan.x, endPan.x)) {
        pan2.x = ease(startPan.x, endPan.x, percent, easing);
      }
      if (valid(startPan.y, endPan.y)) {
        pan2.y = ease(startPan.y, endPan.y, percent, easing);
      }
      self2.emit("pan");
    }
    var startZoom = ani_p.startZoom;
    var endZoom = ani_p.zoom;
    var animatingZoom = endZoom != null && isCore;
    if (animatingZoom) {
      if (valid(startZoom, endZoom)) {
        _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
      }
      self2.emit("zoom");
    }
    if (animatingPan || animatingZoom) {
      self2.emit("viewport");
    }
    var props = ani_p.style;
    if (props && props.length > 0 && isEles) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var prop = props[i2];
        var _name = prop.name;
        var end = prop;
        var start = ani_p.startStyle[_name];
        var propSpec = style3.properties[start.name];
        var easedVal = ease(start, end, percent, easing, propSpec);
        style3.overrideBypass(self2, _name, easedVal);
      }
      self2.emit("style");
    }
  }
  ani_p.progress = percent;
  return percent;
}
function valid(start, end) {
  if (start == null || end == null) {
    return false;
  }
  if (number$1(start) && number$1(end)) {
    return true;
  } else if (start && end) {
    return true;
  }
  return false;
}
function startAnimation(self2, ani, now2, isCore) {
  var ani_p = ani._private;
  ani_p.started = true;
  ani_p.startTime = now2 - ani_p.progress * ani_p.duration;
}
function stepAll(now2, cy2) {
  var eles = cy2._private.aniEles;
  var doneEles = [];
  function stepOne(ele2, isCore) {
    var _p = ele2._private;
    var current = _p.animation.current;
    var queue = _p.animation.queue;
    var ranAnis = false;
    if (current.length === 0) {
      var next2 = queue.shift();
      if (next2) {
        current.push(next2);
      }
    }
    var callbacks = function callbacks2(_callbacks) {
      for (var j2 = _callbacks.length - 1; j2 >= 0; j2--) {
        var cb = _callbacks[j2];
        cb();
      }
      _callbacks.splice(0, _callbacks.length);
    };
    for (var i2 = current.length - 1; i2 >= 0; i2--) {
      var ani = current[i2];
      var ani_p = ani._private;
      if (ani_p.stopped) {
        current.splice(i2, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.frames);
        continue;
      }
      if (!ani_p.playing && !ani_p.applying) {
        continue;
      }
      if (ani_p.playing && ani_p.applying) {
        ani_p.applying = false;
      }
      if (!ani_p.started) {
        startAnimation(ele2, ani, now2);
      }
      step$1(ele2, ani, now2, isCore);
      if (ani_p.applying) {
        ani_p.applying = false;
      }
      callbacks(ani_p.frames);
      if (ani_p.step != null) {
        ani_p.step(now2);
      }
      if (ani.completed()) {
        current.splice(i2, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.completes);
      }
      ranAnis = true;
    }
    if (!isCore && current.length === 0 && queue.length === 0) {
      doneEles.push(ele2);
    }
    return ranAnis;
  }
  var ranEleAni = false;
  for (var e2 = 0; e2 < eles.length; e2++) {
    var ele = eles[e2];
    var handledThisEle = stepOne(ele);
    ranEleAni = ranEleAni || handledThisEle;
  }
  var ranCoreAni = stepOne(cy2, true);
  if (ranEleAni || ranCoreAni) {
    if (eles.length > 0) {
      cy2.notify("draw", eles);
    } else {
      cy2.notify("draw");
    }
  }
  eles.unmerge(doneEles);
  cy2.emit("step");
}
var corefn$8 = {
  // pull in animation functions
  animate: define.animate(),
  animation: define.animation(),
  animated: define.animated(),
  clearQueue: define.clearQueue(),
  delay: define.delay(),
  delayAnimation: define.delayAnimation(),
  stop: define.stop(),
  addToAnimationPool: function addToAnimationPool(eles) {
    var cy2 = this;
    if (!cy2.styleEnabled()) {
      return;
    }
    cy2._private.aniEles.merge(eles);
  },
  stopAnimationLoop: function stopAnimationLoop() {
    this._private.animationsRunning = false;
  },
  startAnimationLoop: function startAnimationLoop() {
    var cy2 = this;
    cy2._private.animationsRunning = true;
    if (!cy2.styleEnabled()) {
      return;
    }
    function headlessStep() {
      if (!cy2._private.animationsRunning) {
        return;
      }
      requestAnimationFrame$1(function animationStep(now2) {
        stepAll(now2, cy2);
        headlessStep();
      });
    }
    var renderer3 = cy2.renderer();
    if (renderer3 && renderer3.beforeRender) {
      renderer3.beforeRender(function rendererAnimationStep(willDraw, now2) {
        stepAll(now2, cy2);
      }, renderer3.beforeRenderPriorities.animations);
    } else {
      headlessStep();
    }
  }
};
var emitterOptions = {
  qualifierCompare: function qualifierCompare3(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches3(cy2, listener, eventObj) {
    var selector = listener.qualifier;
    if (selector != null) {
      return cy2 !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }
    return true;
  },
  addEventFields: function addEventFields3(cy2, evt) {
    evt.cy = cy2;
    evt.target = cy2;
  },
  callbackContext: function callbackContext3(cy2, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : cy2;
  }
};
var argSelector2 = function argSelector3(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};
var elesfn = {
  createEmitter: function createEmitter2() {
    var _p = this._private;
    if (!_p.emitter) {
      _p.emitter = new Emitter(emitterOptions, this);
    }
    return this;
  },
  emitter: function emitter2() {
    return this._private.emitter;
  },
  on: function on2(events, selector, callback) {
    this.emitter().on(events, argSelector2(selector), callback);
    return this;
  },
  removeListener: function removeListener2(events, selector, callback) {
    this.emitter().removeListener(events, argSelector2(selector), callback);
    return this;
  },
  removeAllListeners: function removeAllListeners2() {
    this.emitter().removeAllListeners();
    return this;
  },
  one: function one2(events, selector, callback) {
    this.emitter().one(events, argSelector2(selector), callback);
    return this;
  },
  once: function once2(events, selector, callback) {
    this.emitter().one(events, argSelector2(selector), callback);
    return this;
  },
  emit: function emit2(events, extraParams) {
    this.emitter().emit(events, extraParams);
    return this;
  },
  emitAndNotify: function emitAndNotify2(event3, eles) {
    this.emit(event3);
    this.notify(event3, eles);
    return this;
  }
};
define.eventAliasesOn(elesfn);
var corefn$7 = {
  png: function png(options2) {
    var renderer3 = this._private.renderer;
    options2 = options2 || {};
    return renderer3.png(options2);
  },
  jpg: function jpg(options2) {
    var renderer3 = this._private.renderer;
    options2 = options2 || {};
    options2.bg = options2.bg || "#fff";
    return renderer3.jpg(options2);
  }
};
corefn$7.jpeg = corefn$7.jpg;
var corefn$6 = {
  layout: function layout2(options2) {
    var cy2 = this;
    if (options2 == null) {
      error("Layout options must be specified to make a layout");
      return;
    }
    if (options2.name == null) {
      error("A `name` must be specified to make a layout");
      return;
    }
    var name2 = options2.name;
    var Layout2 = cy2.extension("layout", name2);
    if (Layout2 == null) {
      error("No such layout `" + name2 + "` found.  Did you forget to import it and `cytoscape.use()` it?");
      return;
    }
    var eles;
    if (string(options2.eles)) {
      eles = cy2.$(options2.eles);
    } else {
      eles = options2.eles != null ? options2.eles : cy2.$();
    }
    var layout4 = new Layout2(extend$1({}, options2, {
      cy: cy2,
      eles
    }));
    return layout4;
  }
};
corefn$6.createLayout = corefn$6.makeLayout = corefn$6.layout;
var corefn$5 = {
  notify: function notify(eventName, eventEles) {
    var _p = this._private;
    if (this.batching()) {
      _p.batchNotifications = _p.batchNotifications || {};
      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();
      if (eventEles != null) {
        eles.merge(eventEles);
      }
      return;
    }
    if (!_p.notificationsEnabled) {
      return;
    }
    var renderer3 = this.renderer();
    if (this.destroyed() || !renderer3) {
      return;
    }
    renderer3.notify(eventName, eventEles);
  },
  notifications: function notifications(bool) {
    var p2 = this._private;
    if (bool === void 0) {
      return p2.notificationsEnabled;
    } else {
      p2.notificationsEnabled = bool ? true : false;
    }
    return this;
  },
  noNotifications: function noNotifications(callback) {
    this.notifications(false);
    callback();
    this.notifications(true);
  },
  batching: function batching() {
    return this._private.batchCount > 0;
  },
  startBatch: function startBatch() {
    var _p = this._private;
    if (_p.batchCount == null) {
      _p.batchCount = 0;
    }
    if (_p.batchCount === 0) {
      _p.batchStyleEles = this.collection();
      _p.batchNotifications = {};
    }
    _p.batchCount++;
    return this;
  },
  endBatch: function endBatch() {
    var _p = this._private;
    if (_p.batchCount === 0) {
      return this;
    }
    _p.batchCount--;
    if (_p.batchCount === 0) {
      _p.batchStyleEles.updateStyle();
      var renderer3 = this.renderer();
      Object.keys(_p.batchNotifications).forEach(function(eventName) {
        var eles = _p.batchNotifications[eventName];
        if (eles.empty()) {
          renderer3.notify(eventName);
        } else {
          renderer3.notify(eventName, eles);
        }
      });
    }
    return this;
  },
  batch: function batch(callback) {
    this.startBatch();
    callback();
    this.endBatch();
    return this;
  },
  // for backwards compatibility
  batchData: function batchData(map2) {
    var cy2 = this;
    return this.batch(function() {
      var ids = Object.keys(map2);
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        var data4 = map2[id2];
        var ele = cy2.getElementById(id2);
        ele.data(data4);
      }
    });
  }
};
var rendererDefaults = defaults$g({
  hideEdgesOnViewport: false,
  textureOnViewport: false,
  motionBlur: false,
  motionBlurOpacity: 0.05,
  pixelRatio: void 0,
  desktopTapThreshold: 4,
  touchTapThreshold: 8,
  wheelSensitivity: 1,
  debug: false,
  showFps: false
});
var corefn$4 = {
  renderTo: function renderTo(context, zoom2, pan2, pxRatio) {
    var r2 = this._private.renderer;
    r2.renderTo(context, zoom2, pan2, pxRatio);
    return this;
  },
  renderer: function renderer() {
    return this._private.renderer;
  },
  forceRender: function forceRender() {
    this.notify("draw");
    return this;
  },
  resize: function resize() {
    this.invalidateSize();
    this.emitAndNotify("resize");
    return this;
  },
  initRenderer: function initRenderer(options2) {
    var cy2 = this;
    var RendererProto = cy2.extension("renderer", options2.name);
    if (RendererProto == null) {
      error("Can not initialise: No such renderer `".concat(options2.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
      return;
    }
    if (options2.wheelSensitivity !== void 0) {
      warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
    }
    var rOpts = rendererDefaults(options2);
    rOpts.cy = cy2;
    cy2._private.renderer = new RendererProto(rOpts);
    this.notify("init");
  },
  destroyRenderer: function destroyRenderer() {
    var cy2 = this;
    cy2.notify("destroy");
    var domEle = cy2.container();
    if (domEle) {
      domEle._cyreg = null;
      while (domEle.childNodes.length > 0) {
        domEle.removeChild(domEle.childNodes[0]);
      }
    }
    cy2._private.renderer = null;
    cy2.mutableElements().forEach(function(ele) {
      var _p = ele._private;
      _p.rscratch = {};
      _p.rstyle = {};
      _p.animation.current = [];
      _p.animation.queue = [];
    });
  },
  onRender: function onRender(fn3) {
    return this.on("render", fn3);
  },
  offRender: function offRender(fn3) {
    return this.off("render", fn3);
  }
};
corefn$4.invalidateDimensions = corefn$4.resize;
var corefn$3 = {
  // get a collection
  // - empty collection on no args
  // - collection of elements in the graph on selector arg
  // - guarantee a returned collection when elements or collection specified
  collection: function collection3(eles, opts) {
    if (string(eles)) {
      return this.$(eles);
    } else if (elementOrCollection(eles)) {
      return eles.collection();
    } else if (array(eles)) {
      if (!opts) {
        opts = {};
      }
      return new Collection(this, eles, opts.unique, opts.removed);
    }
    return new Collection(this);
  },
  nodes: function nodes2(selector) {
    var nodes3 = this.$(function(ele) {
      return ele.isNode();
    });
    if (selector) {
      return nodes3.filter(selector);
    }
    return nodes3;
  },
  edges: function edges2(selector) {
    var edges3 = this.$(function(ele) {
      return ele.isEdge();
    });
    if (selector) {
      return edges3.filter(selector);
    }
    return edges3;
  },
  // search the graph like jQuery
  $: function $2(selector) {
    var eles = this._private.elements;
    if (selector) {
      return eles.filter(selector);
    } else {
      return eles.spawnSelf();
    }
  },
  mutableElements: function mutableElements() {
    return this._private.elements;
  }
};
corefn$3.elements = corefn$3.filter = corefn$3.$;
var styfn$8 = {};
var TRUE = "t";
var FALSE = "f";
styfn$8.apply = function(eles) {
  var self2 = this;
  var _p = self2._private;
  var cy2 = _p.cy;
  var updatedEles = cy2.collection();
  for (var ie2 = 0; ie2 < eles.length; ie2++) {
    var ele = eles[ie2];
    var cxtMeta = self2.getContextMeta(ele);
    if (cxtMeta.empty) {
      continue;
    }
    var cxtStyle = self2.getContextStyle(cxtMeta);
    var app = self2.applyContextStyle(cxtMeta, cxtStyle, ele);
    if (ele._private.appliedInitStyle) {
      self2.updateTransitions(ele, app.diffProps);
    } else {
      ele._private.appliedInitStyle = true;
    }
    var hintsDiff = self2.updateStyleHints(ele);
    if (hintsDiff) {
      updatedEles.push(ele);
    }
  }
  return updatedEles;
};
styfn$8.getPropertiesDiff = function(oldCxtKey, newCxtKey) {
  var self2 = this;
  var cache3 = self2._private.propDiffs = self2._private.propDiffs || {};
  var dualCxtKey = oldCxtKey + "-" + newCxtKey;
  var cachedVal = cache3[dualCxtKey];
  if (cachedVal) {
    return cachedVal;
  }
  var diffProps = [];
  var addedProp = {};
  for (var i2 = 0; i2 < self2.length; i2++) {
    var cxt = self2[i2];
    var oldHasCxt = oldCxtKey[i2] === TRUE;
    var newHasCxt = newCxtKey[i2] === TRUE;
    var cxtHasDiffed = oldHasCxt !== newHasCxt;
    var cxtHasMappedProps = cxt.mappedProperties.length > 0;
    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
      var props = void 0;
      if (cxtHasDiffed && cxtHasMappedProps) {
        props = cxt.properties;
      } else if (cxtHasDiffed) {
        props = cxt.properties;
      } else if (cxtHasMappedProps) {
        props = cxt.mappedProperties;
      }
      for (var j2 = 0; j2 < props.length; j2++) {
        var prop = props[j2];
        var name2 = prop.name;
        var laterCxtOverrides = false;
        for (var k2 = i2 + 1; k2 < self2.length; k2++) {
          var laterCxt = self2[k2];
          var hasLaterCxt = newCxtKey[k2] === TRUE;
          if (!hasLaterCxt) {
            continue;
          }
          laterCxtOverrides = laterCxt.properties[prop.name] != null;
          if (laterCxtOverrides) {
            break;
          }
        }
        if (!addedProp[name2] && !laterCxtOverrides) {
          addedProp[name2] = true;
          diffProps.push(name2);
        }
      }
    }
  }
  cache3[dualCxtKey] = diffProps;
  return diffProps;
};
styfn$8.getContextMeta = function(ele) {
  var self2 = this;
  var cxtKey = "";
  var diffProps;
  var prevKey = ele._private.styleCxtKey || "";
  for (var i2 = 0; i2 < self2.length; i2++) {
    var context = self2[i2];
    var contextSelectorMatches = context.selector && context.selector.matches(ele);
    if (contextSelectorMatches) {
      cxtKey += TRUE;
    } else {
      cxtKey += FALSE;
    }
  }
  diffProps = self2.getPropertiesDiff(prevKey, cxtKey);
  ele._private.styleCxtKey = cxtKey;
  return {
    key: cxtKey,
    diffPropNames: diffProps,
    empty: diffProps.length === 0
  };
};
styfn$8.getContextStyle = function(cxtMeta) {
  var cxtKey = cxtMeta.key;
  var self2 = this;
  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};
  if (cxtStyles[cxtKey]) {
    return cxtStyles[cxtKey];
  }
  var style3 = {
    _private: {
      key: cxtKey
    }
  };
  for (var i2 = 0; i2 < self2.length; i2++) {
    var cxt = self2[i2];
    var hasCxt = cxtKey[i2] === TRUE;
    if (!hasCxt) {
      continue;
    }
    for (var j2 = 0; j2 < cxt.properties.length; j2++) {
      var prop = cxt.properties[j2];
      style3[prop.name] = prop;
    }
  }
  cxtStyles[cxtKey] = style3;
  return style3;
};
styfn$8.applyContextStyle = function(cxtMeta, cxtStyle, ele) {
  var self2 = this;
  var diffProps = cxtMeta.diffPropNames;
  var retDiffProps = {};
  var types = self2.types;
  for (var i2 = 0; i2 < diffProps.length; i2++) {
    var diffPropName = diffProps[i2];
    var cxtProp = cxtStyle[diffPropName];
    var eleProp = ele.pstyle(diffPropName);
    if (!cxtProp) {
      if (!eleProp) {
        continue;
      } else if (eleProp.bypass) {
        cxtProp = {
          name: diffPropName,
          deleteBypassed: true
        };
      } else {
        cxtProp = {
          name: diffPropName,
          "delete": true
        };
      }
    }
    if (eleProp === cxtProp) {
      continue;
    }
    if (cxtProp.mapped === types.fn && eleProp != null && eleProp.mapping != null && eleProp.mapping.value === cxtProp.value) {
      var mapping = eleProp.mapping;
      var fnValue = mapping.fnValue = cxtProp.value(ele);
      if (fnValue === mapping.prevFnValue) {
        continue;
      }
    }
    var retDiffProp = retDiffProps[diffPropName] = {
      prev: eleProp
    };
    self2.applyParsedProperty(ele, cxtProp);
    retDiffProp.next = ele.pstyle(diffPropName);
    if (retDiffProp.next && retDiffProp.next.bypass) {
      retDiffProp.next = retDiffProp.next.bypassed;
    }
  }
  return {
    diffProps: retDiffProps
  };
};
styfn$8.updateStyleHints = function(ele) {
  var _p = ele._private;
  var self2 = this;
  var propNames = self2.propertyGroupNames;
  var propGrKeys = self2.propertyGroupKeys;
  var propHash = function propHash2(ele2, propNames2, seedKey) {
    return self2.getPropertiesHash(ele2, propNames2, seedKey);
  };
  var oldStyleKey = _p.styleKey;
  if (ele.removed()) {
    return false;
  }
  var isNode2 = _p.group === "nodes";
  var overriddenStyles = ele._private.style;
  propNames = Object.keys(overriddenStyles);
  for (var i2 = 0; i2 < propGrKeys.length; i2++) {
    var grKey = propGrKeys[i2];
    _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
  }
  var updateGrKey1 = function updateGrKey12(val, grKey2) {
    return _p.styleKeys[grKey2][0] = hashInt(val, _p.styleKeys[grKey2][0]);
  };
  var updateGrKey2 = function updateGrKey22(val, grKey2) {
    return _p.styleKeys[grKey2][1] = hashIntAlt(val, _p.styleKeys[grKey2][1]);
  };
  var updateGrKey = function updateGrKey3(val, grKey2) {
    updateGrKey1(val, grKey2);
    updateGrKey2(val, grKey2);
  };
  var updateGrKeyWStr = function updateGrKeyWStr2(strVal, grKey2) {
    for (var j2 = 0; j2 < strVal.length; j2++) {
      var ch = strVal.charCodeAt(j2);
      updateGrKey1(ch, grKey2);
      updateGrKey2(ch, grKey2);
    }
  };
  var N2 = 2e9;
  var cleanNum = function cleanNum2(val) {
    return -128 < val && val < 128 && Math.floor(val) !== val ? N2 - (val * 1024 | 0) : val;
  };
  for (var _i = 0; _i < propNames.length; _i++) {
    var name2 = propNames[_i];
    var parsedProp = overriddenStyles[name2];
    if (parsedProp == null) {
      continue;
    }
    var propInfo = this.properties[name2];
    var type = propInfo.type;
    var _grKey = propInfo.groupKey;
    var normalizedNumberVal = void 0;
    if (propInfo.hashOverride != null) {
      normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
    } else if (parsedProp.pfValue != null) {
      normalizedNumberVal = parsedProp.pfValue;
    }
    var numberVal = propInfo.enums == null ? parsedProp.value : null;
    var haveNormNum = normalizedNumberVal != null;
    var haveUnitedNum = numberVal != null;
    var haveNum = haveNormNum || haveUnitedNum;
    var units = parsedProp.units;
    if (type.number && haveNum && !type.multiple) {
      var v2 = haveNormNum ? normalizedNumberVal : numberVal;
      updateGrKey(cleanNum(v2), _grKey);
      if (!haveNormNum && units != null) {
        updateGrKeyWStr(units, _grKey);
      }
    } else {
      updateGrKeyWStr(parsedProp.strValue, _grKey);
    }
  }
  var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
  for (var _i2 = 0; _i2 < propGrKeys.length; _i2++) {
    var _grKey2 = propGrKeys[_i2];
    var grHash = _p.styleKeys[_grKey2];
    hash[0] = hashInt(grHash[0], hash[0]);
    hash[1] = hashIntAlt(grHash[1], hash[1]);
  }
  _p.styleKey = combineHashes(hash[0], hash[1]);
  var sk = _p.styleKeys;
  _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
  var labelKeys = propHash(ele, ["label"], sk.labelDimensions);
  _p.labelKey = combineHashesArray(labelKeys);
  _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));
  if (!isNode2) {
    var sourceLabelKeys = propHash(ele, ["source-label"], sk.labelDimensions);
    _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
    _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
    var targetLabelKeys = propHash(ele, ["target-label"], sk.labelDimensions);
    _p.targetLabelKey = combineHashesArray(targetLabelKeys);
    _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
  }
  if (isNode2) {
    var _p$styleKeys = _p.styleKeys, nodeBody = _p$styleKeys.nodeBody, nodeBorder = _p$styleKeys.nodeBorder, backgroundImage = _p$styleKeys.backgroundImage, compound = _p$styleKeys.compound, pie = _p$styleKeys.pie;
    var nodeKeys = [nodeBody, nodeBorder, backgroundImage, compound, pie].filter(function(k2) {
      return k2 != null;
    }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);
    _p.nodeKey = combineHashesArray(nodeKeys);
    _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
  }
  return oldStyleKey !== _p.styleKey;
};
styfn$8.clearStyleHints = function(ele) {
  var _p = ele._private;
  _p.styleCxtKey = "";
  _p.styleKeys = {};
  _p.styleKey = null;
  _p.labelKey = null;
  _p.labelStyleKey = null;
  _p.sourceLabelKey = null;
  _p.sourceLabelStyleKey = null;
  _p.targetLabelKey = null;
  _p.targetLabelStyleKey = null;
  _p.nodeKey = null;
  _p.hasPie = null;
};
styfn$8.applyParsedProperty = function(ele, parsedProp) {
  var self2 = this;
  var prop = parsedProp;
  var style3 = ele._private.style;
  var flatProp;
  var types = self2.types;
  var type = self2.properties[prop.name].type;
  var propIsBypass = prop.bypass;
  var origProp = style3[prop.name];
  var origPropIsBypass = origProp && origProp.bypass;
  var _p = ele._private;
  var flatPropMapping = "mapping";
  var getVal = function getVal2(p2) {
    if (p2 == null) {
      return null;
    } else if (p2.pfValue != null) {
      return p2.pfValue;
    } else {
      return p2.value;
    }
  };
  var checkTriggers = function checkTriggers2() {
    var fromVal = getVal(origProp);
    var toVal = getVal(prop);
    self2.checkTriggers(ele, prop.name, fromVal, toVal);
  };
  if (prop && prop.name.substr(0, 3) === "pie") {
    warn("The pie style properties are deprecated.  Create charts using background images instead.");
  }
  if (parsedProp.name === "curve-style" && ele.isEdge() && // loops must be bundled beziers
  (parsedProp.value !== "bezier" && ele.isLoop() || // edges connected to compound nodes can not be haystacks
  parsedProp.value === "haystack" && (ele.source().isParent() || ele.target().isParent()))) {
    prop = parsedProp = this.parse(parsedProp.name, "bezier", propIsBypass);
  }
  if (prop["delete"]) {
    style3[prop.name] = void 0;
    checkTriggers();
    return true;
  }
  if (prop.deleteBypassed) {
    if (!origProp) {
      checkTriggers();
      return true;
    } else if (origProp.bypass) {
      origProp.bypassed = void 0;
      checkTriggers();
      return true;
    } else {
      return false;
    }
  }
  if (prop.deleteBypass) {
    if (!origProp) {
      checkTriggers();
      return true;
    } else if (origProp.bypass) {
      style3[prop.name] = origProp.bypassed;
      checkTriggers();
      return true;
    } else {
      return false;
    }
  }
  var printMappingErr = function printMappingErr2() {
    warn("Do not assign mappings to elements without corresponding data (i.e. ele `" + ele.id() + "` has no mapping for property `" + prop.name + "` with data field `" + prop.field + "`); try a `[" + prop.field + "]` selector to limit scope to elements with `" + prop.field + "` defined");
  };
  switch (prop.mapped) {
    case types.mapData: {
      var fields = prop.field.split(".");
      var fieldVal = _p.data;
      for (var i2 = 0; i2 < fields.length && fieldVal; i2++) {
        var field = fields[i2];
        fieldVal = fieldVal[field];
      }
      if (fieldVal == null) {
        printMappingErr();
        return false;
      }
      var percent;
      if (!number$1(fieldVal)) {
        warn("Do not use continuous mappers without specifying numeric data (i.e. `" + prop.field + ": " + fieldVal + "` for `" + ele.id() + "` is non-numeric)");
        return false;
      } else {
        var fieldWidth = prop.fieldMax - prop.fieldMin;
        if (fieldWidth === 0) {
          percent = 0;
        } else {
          percent = (fieldVal - prop.fieldMin) / fieldWidth;
        }
      }
      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }
      if (type.color) {
        var r1 = prop.valueMin[0];
        var r2 = prop.valueMax[0];
        var g1 = prop.valueMin[1];
        var g2 = prop.valueMax[1];
        var b1 = prop.valueMin[2];
        var b2 = prop.valueMax[2];
        var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
        var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
        var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
        flatProp = {
          // colours are simple, so just create the flat property instead of expensive string parsing
          bypass: prop.bypass,
          // we're a bypass if the mapping property is a bypass
          name: prop.name,
          value: clr,
          strValue: "rgb(" + clr[0] + ", " + clr[1] + ", " + clr[2] + ")"
        };
      } else if (type.number) {
        var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
        flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
      } else {
        return false;
      }
      if (!flatProp) {
        printMappingErr();
        return false;
      }
      flatProp.mapping = prop;
      prop = flatProp;
      break;
    }
    case types.data: {
      var _fields = prop.field.split(".");
      var _fieldVal = _p.data;
      for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {
        var _field = _fields[_i3];
        _fieldVal = _fieldVal[_field];
      }
      if (_fieldVal != null) {
        flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
      }
      if (!flatProp) {
        printMappingErr();
        return false;
      }
      flatProp.mapping = prop;
      prop = flatProp;
      break;
    }
    case types.fn: {
      var fn3 = prop.value;
      var fnRetVal = prop.fnValue != null ? prop.fnValue : fn3(ele);
      prop.prevFnValue = fnRetVal;
      if (fnRetVal == null) {
        warn("Custom function mappers may not return null (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is null)");
        return false;
      }
      flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
      if (!flatProp) {
        warn("Custom function mappers may not return invalid values for the property type (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is invalid)");
        return false;
      }
      flatProp.mapping = copy(prop);
      prop = flatProp;
      break;
    }
    case void 0:
      break;
    default:
      return false;
  }
  if (propIsBypass) {
    if (origPropIsBypass) {
      prop.bypassed = origProp.bypassed;
    } else {
      prop.bypassed = origProp;
    }
    style3[prop.name] = prop;
  } else {
    if (origPropIsBypass) {
      origProp.bypassed = prop;
    } else {
      style3[prop.name] = prop;
    }
  }
  checkTriggers();
  return true;
};
styfn$8.cleanElements = function(eles, keepBypasses) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    this.clearStyleHints(ele);
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();
    if (!keepBypasses) {
      ele._private.style = {};
    } else {
      var style3 = ele._private.style;
      var propNames = Object.keys(style3);
      for (var j2 = 0; j2 < propNames.length; j2++) {
        var propName = propNames[j2];
        var eleProp = style3[propName];
        if (eleProp != null) {
          if (eleProp.bypass) {
            eleProp.bypassed = null;
          } else {
            style3[propName] = null;
          }
        }
      }
    }
  }
};
styfn$8.update = function() {
  var cy2 = this._private.cy;
  var eles = cy2.mutableElements();
  eles.updateStyle();
};
styfn$8.updateTransitions = function(ele, diffProps) {
  var self2 = this;
  var _p = ele._private;
  var props = ele.pstyle("transition-property").value;
  var duration = ele.pstyle("transition-duration").pfValue;
  var delay2 = ele.pstyle("transition-delay").pfValue;
  if (props.length > 0 && duration > 0) {
    var style3 = {};
    var anyPrev = false;
    for (var i2 = 0; i2 < props.length; i2++) {
      var prop = props[i2];
      var styProp = ele.pstyle(prop);
      var diffProp = diffProps[prop];
      if (!diffProp) {
        continue;
      }
      var prevProp = diffProp.prev;
      var fromProp = prevProp;
      var toProp = diffProp.next != null ? diffProp.next : styProp;
      var diff2 = false;
      var initVal = void 0;
      var initDt = 1e-6;
      if (!fromProp) {
        continue;
      }
      if (number$1(fromProp.pfValue) && number$1(toProp.pfValue)) {
        diff2 = toProp.pfValue - fromProp.pfValue;
        initVal = fromProp.pfValue + initDt * diff2;
      } else if (number$1(fromProp.value) && number$1(toProp.value)) {
        diff2 = toProp.value - fromProp.value;
        initVal = fromProp.value + initDt * diff2;
      } else if (array(fromProp.value) && array(toProp.value)) {
        diff2 = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
        initVal = fromProp.strValue;
      }
      if (diff2) {
        style3[prop] = toProp.strValue;
        this.applyBypass(ele, prop, initVal);
        anyPrev = true;
      }
    }
    if (!anyPrev) {
      return;
    }
    _p.transitioning = true;
    new Promise$1(function(resolve3) {
      if (delay2 > 0) {
        ele.delayAnimation(delay2).play().promise().then(resolve3);
      } else {
        resolve3();
      }
    }).then(function() {
      return ele.animation({
        style: style3,
        duration,
        easing: ele.pstyle("transition-timing-function").value,
        queue: false
      }).play().promise();
    }).then(function() {
      self2.removeBypasses(ele, props);
      ele.emitAndNotify("style");
      _p.transitioning = false;
    });
  } else if (_p.transitioning) {
    this.removeBypasses(ele, props);
    ele.emitAndNotify("style");
    _p.transitioning = false;
  }
};
styfn$8.checkTrigger = function(ele, name2, fromValue, toValue, getTrigger, onTrigger) {
  var prop = this.properties[name2];
  var triggerCheck = getTrigger(prop);
  if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
    onTrigger(prop);
  }
};
styfn$8.checkZOrderTrigger = function(ele, name2, fromValue, toValue) {
  var _this = this;
  this.checkTrigger(ele, name2, fromValue, toValue, function(prop) {
    return prop.triggersZOrder;
  }, function() {
    _this._private.cy.notify("zorder", ele);
  });
};
styfn$8.checkBoundsTrigger = function(ele, name2, fromValue, toValue) {
  this.checkTrigger(ele, name2, fromValue, toValue, function(prop) {
    return prop.triggersBounds;
  }, function(prop) {
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();
    if (
      // only for beziers -- so performance of other edges isn't affected
      prop.triggersBoundsOfParallelBeziers && (name2 === "curve-style" && (fromValue === "bezier" || toValue === "bezier") || name2 === "display" && (fromValue === "none" || toValue === "none"))
    ) {
      ele.parallelEdges().forEach(function(pllEdge) {
        if (pllEdge.isBundledBezier()) {
          pllEdge.dirtyBoundingBoxCache();
        }
      });
    }
  });
};
styfn$8.checkTriggers = function(ele, name2, fromValue, toValue) {
  ele.dirtyStyleCache();
  this.checkZOrderTrigger(ele, name2, fromValue, toValue);
  this.checkBoundsTrigger(ele, name2, fromValue, toValue);
};
var styfn$7 = {};
styfn$7.applyBypass = function(eles, name2, value, updateTransitions) {
  var self2 = this;
  var props = [];
  var isBypass = true;
  if (name2 === "*" || name2 === "**") {
    if (value !== void 0) {
      for (var i2 = 0; i2 < self2.properties.length; i2++) {
        var prop = self2.properties[i2];
        var _name = prop.name;
        var parsedProp = this.parse(_name, value, true);
        if (parsedProp) {
          props.push(parsedProp);
        }
      }
    }
  } else if (string(name2)) {
    var _parsedProp = this.parse(name2, value, true);
    if (_parsedProp) {
      props.push(_parsedProp);
    }
  } else if (plainObject(name2)) {
    var specifiedProps = name2;
    updateTransitions = value;
    var names = Object.keys(specifiedProps);
    for (var _i = 0; _i < names.length; _i++) {
      var _name2 = names[_i];
      var _value = specifiedProps[_name2];
      if (_value === void 0) {
        _value = specifiedProps[dash2camel(_name2)];
      }
      if (_value !== void 0) {
        var _parsedProp2 = this.parse(_name2, _value, true);
        if (_parsedProp2) {
          props.push(_parsedProp2);
        }
      }
    }
  } else {
    return false;
  }
  if (props.length === 0) {
    return false;
  }
  var ret = false;
  for (var _i2 = 0; _i2 < eles.length; _i2++) {
    var ele = eles[_i2];
    var diffProps = {};
    var diffProp = void 0;
    for (var j2 = 0; j2 < props.length; j2++) {
      var _prop = props[j2];
      if (updateTransitions) {
        var prevProp = ele.pstyle(_prop.name);
        diffProp = diffProps[_prop.name] = {
          prev: prevProp
        };
      }
      ret = this.applyParsedProperty(ele, copy(_prop)) || ret;
      if (updateTransitions) {
        diffProp.next = ele.pstyle(_prop.name);
      }
    }
    if (ret) {
      this.updateStyleHints(ele);
    }
    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  }
  return ret;
};
styfn$7.overrideBypass = function(eles, name2, value) {
  name2 = camel2dash(name2);
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var prop = ele._private.style[name2];
    var type = this.properties[name2].type;
    var isColor = type.color;
    var isMulti = type.mutiple;
    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;
    if (!prop || !prop.bypass) {
      this.applyBypass(ele, name2, value);
    } else {
      prop.value = value;
      if (prop.pfValue != null) {
        prop.pfValue = value;
      }
      if (isColor) {
        prop.strValue = "rgb(" + value.join(",") + ")";
      } else if (isMulti) {
        prop.strValue = value.join(" ");
      } else {
        prop.strValue = "" + value;
      }
      this.updateStyleHints(ele);
    }
    this.checkTriggers(ele, name2, oldValue, value);
  }
};
styfn$7.removeAllBypasses = function(eles, updateTransitions) {
  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
};
styfn$7.removeBypasses = function(eles, props, updateTransitions) {
  var isBypass = true;
  for (var j2 = 0; j2 < eles.length; j2++) {
    var ele = eles[j2];
    var diffProps = {};
    for (var i2 = 0; i2 < props.length; i2++) {
      var name2 = props[i2];
      var prop = this.properties[name2];
      var prevProp = ele.pstyle(prop.name);
      if (!prevProp || !prevProp.bypass) {
        continue;
      }
      var value = "";
      var parsedProp = this.parse(name2, value, true);
      var diffProp = diffProps[prop.name] = {
        prev: prevProp
      };
      this.applyParsedProperty(ele, parsedProp);
      diffProp.next = ele.pstyle(prop.name);
    }
    this.updateStyleHints(ele);
    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  }
};
var styfn$6 = {};
styfn$6.getEmSizeInPixels = function() {
  var px = this.containerCss("font-size");
  if (px != null) {
    return parseFloat(px);
  } else {
    return 1;
  }
};
styfn$6.containerCss = function(propName) {
  var cy2 = this._private.cy;
  var domElement3 = cy2.container();
  if (window$1 && domElement3 && window$1.getComputedStyle) {
    return window$1.getComputedStyle(domElement3).getPropertyValue(propName);
  }
};
var styfn$5 = {};
styfn$5.getRenderedStyle = function(ele, prop) {
  if (prop) {
    return this.getStylePropertyValue(ele, prop, true);
  } else {
    return this.getRawStyle(ele, true);
  }
};
styfn$5.getRawStyle = function(ele, isRenderedVal) {
  var self2 = this;
  ele = ele[0];
  if (ele) {
    var rstyle = {};
    for (var i2 = 0; i2 < self2.properties.length; i2++) {
      var prop = self2.properties[i2];
      var val = self2.getStylePropertyValue(ele, prop.name, isRenderedVal);
      if (val != null) {
        rstyle[prop.name] = val;
        rstyle[dash2camel(prop.name)] = val;
      }
    }
    return rstyle;
  }
};
styfn$5.getIndexedStyle = function(ele, property, subproperty, index) {
  var pstyle = ele.pstyle(property)[subproperty][index];
  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
};
styfn$5.getStylePropertyValue = function(ele, propName, isRenderedVal) {
  var self2 = this;
  ele = ele[0];
  if (ele) {
    var prop = self2.properties[propName];
    if (prop.alias) {
      prop = prop.pointsTo;
    }
    var type = prop.type;
    var styleProp = ele.pstyle(prop.name);
    if (styleProp) {
      var value = styleProp.value, units = styleProp.units, strValue = styleProp.strValue;
      if (isRenderedVal && type.number && value != null && number$1(value)) {
        var zoom2 = ele.cy().zoom();
        var getRenderedValue = function getRenderedValue2(val) {
          return val * zoom2;
        };
        var getValueStringWithUnits = function getValueStringWithUnits2(val, units2) {
          return getRenderedValue(val) + units2;
        };
        var isArrayValue = array(value);
        var haveUnits = isArrayValue ? units.every(function(u2) {
          return u2 != null;
        }) : units != null;
        if (haveUnits) {
          if (isArrayValue) {
            return value.map(function(v2, i2) {
              return getValueStringWithUnits(v2, units[i2]);
            }).join(" ");
          } else {
            return getValueStringWithUnits(value, units);
          }
        } else {
          if (isArrayValue) {
            return value.map(function(v2) {
              return string(v2) ? v2 : "" + getRenderedValue(v2);
            }).join(" ");
          } else {
            return "" + getRenderedValue(value);
          }
        }
      } else if (strValue != null) {
        return strValue;
      }
    }
    return null;
  }
};
styfn$5.getAnimationStartStyle = function(ele, aniProps) {
  var rstyle = {};
  for (var i2 = 0; i2 < aniProps.length; i2++) {
    var aniProp = aniProps[i2];
    var name2 = aniProp.name;
    var styleProp = ele.pstyle(name2);
    if (styleProp !== void 0) {
      if (plainObject(styleProp)) {
        styleProp = this.parse(name2, styleProp.strValue);
      } else {
        styleProp = this.parse(name2, styleProp);
      }
    }
    if (styleProp) {
      rstyle[name2] = styleProp;
    }
  }
  return rstyle;
};
styfn$5.getPropsList = function(propsObj) {
  var self2 = this;
  var rstyle = [];
  var style3 = propsObj;
  var props = self2.properties;
  if (style3) {
    var names = Object.keys(style3);
    for (var i2 = 0; i2 < names.length; i2++) {
      var name2 = names[i2];
      var val = style3[name2];
      var prop = props[name2] || props[camel2dash(name2)];
      var styleProp = this.parse(prop.name, val);
      if (styleProp) {
        rstyle.push(styleProp);
      }
    }
  }
  return rstyle;
};
styfn$5.getNonDefaultPropertiesHash = function(ele, propNames, seed) {
  var hash = seed.slice();
  var name2, val, strVal, chVal;
  var i2, j2;
  for (i2 = 0; i2 < propNames.length; i2++) {
    name2 = propNames[i2];
    val = ele.pstyle(name2, false);
    if (val == null) {
      continue;
    } else if (val.pfValue != null) {
      hash[0] = hashInt(chVal, hash[0]);
      hash[1] = hashIntAlt(chVal, hash[1]);
    } else {
      strVal = val.strValue;
      for (j2 = 0; j2 < strVal.length; j2++) {
        chVal = strVal.charCodeAt(j2);
        hash[0] = hashInt(chVal, hash[0]);
        hash[1] = hashIntAlt(chVal, hash[1]);
      }
    }
  }
  return hash;
};
styfn$5.getPropertiesHash = styfn$5.getNonDefaultPropertiesHash;
var styfn$4 = {};
styfn$4.appendFromJson = function(json3) {
  var style3 = this;
  for (var i2 = 0; i2 < json3.length; i2++) {
    var context = json3[i2];
    var selector = context.selector;
    var props = context.style || context.css;
    var names = Object.keys(props);
    style3.selector(selector);
    for (var j2 = 0; j2 < names.length; j2++) {
      var name2 = names[j2];
      var value = props[name2];
      style3.css(name2, value);
    }
  }
  return style3;
};
styfn$4.fromJson = function(json3) {
  var style3 = this;
  style3.resetToDefault();
  style3.appendFromJson(json3);
  return style3;
};
styfn$4.json = function() {
  var json3 = [];
  for (var i2 = this.defaultLength; i2 < this.length; i2++) {
    var cxt = this[i2];
    var selector = cxt.selector;
    var props = cxt.properties;
    var css = {};
    for (var j2 = 0; j2 < props.length; j2++) {
      var prop = props[j2];
      css[prop.name] = prop.strValue;
    }
    json3.push({
      selector: !selector ? "core" : selector.toString(),
      style: css
    });
  }
  return json3;
};
var styfn$3 = {};
styfn$3.appendFromString = function(string3) {
  var self2 = this;
  var style3 = this;
  var remaining = "" + string3;
  var selAndBlockStr;
  var blockRem;
  var propAndValStr;
  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, "");
  function removeSelAndBlockFromRemaining() {
    if (remaining.length > selAndBlockStr.length) {
      remaining = remaining.substr(selAndBlockStr.length);
    } else {
      remaining = "";
    }
  }
  function removePropAndValFromRem() {
    if (blockRem.length > propAndValStr.length) {
      blockRem = blockRem.substr(propAndValStr.length);
    } else {
      blockRem = "";
    }
  }
  for (; ; ) {
    var nothingLeftToParse = remaining.match(/^\s*$/);
    if (nothingLeftToParse) {
      break;
    }
    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);
    if (!selAndBlock) {
      warn("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: " + remaining);
      break;
    }
    selAndBlockStr = selAndBlock[0];
    var selectorStr = selAndBlock[1];
    if (selectorStr !== "core") {
      var selector = new Selector(selectorStr);
      if (selector.invalid) {
        warn("Skipping parsing of block: Invalid selector found in string stylesheet: " + selectorStr);
        removeSelAndBlockFromRemaining();
        continue;
      }
    }
    var blockStr = selAndBlock[2];
    var invalidBlock = false;
    blockRem = blockStr;
    var props = [];
    for (; ; ) {
      var _nothingLeftToParse = blockRem.match(/^\s*$/);
      if (_nothingLeftToParse) {
        break;
      }
      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)(?:\s*;|\s*$)/);
      if (!propAndVal) {
        warn("Skipping parsing of block: Invalid formatting of style property and value definitions found in:" + blockStr);
        invalidBlock = true;
        break;
      }
      propAndValStr = propAndVal[0];
      var propStr = propAndVal[1];
      var valStr = propAndVal[2];
      var prop = self2.properties[propStr];
      if (!prop) {
        warn("Skipping property: Invalid property name in: " + propAndValStr);
        removePropAndValFromRem();
        continue;
      }
      var parsedProp = style3.parse(propStr, valStr);
      if (!parsedProp) {
        warn("Skipping property: Invalid property definition in: " + propAndValStr);
        removePropAndValFromRem();
        continue;
      }
      props.push({
        name: propStr,
        val: valStr
      });
      removePropAndValFromRem();
    }
    if (invalidBlock) {
      removeSelAndBlockFromRemaining();
      break;
    }
    style3.selector(selectorStr);
    for (var i2 = 0; i2 < props.length; i2++) {
      var _prop = props[i2];
      style3.css(_prop.name, _prop.val);
    }
    removeSelAndBlockFromRemaining();
  }
  return style3;
};
styfn$3.fromString = function(string3) {
  var style3 = this;
  style3.resetToDefault();
  style3.appendFromString(string3);
  return style3;
};
var styfn$2 = {};
(function() {
  var number$12 = number2;
  var rgba2 = rgbaNoBackRefs;
  var hsla2 = hslaNoBackRefs;
  var hex3$1 = hex3;
  var hex6$1 = hex6;
  var data4 = function data5(prefix) {
    return "^" + prefix + "\\s*\\(\\s*([\\w\\.]+)\\s*\\)$";
  };
  var mapData = function mapData2(prefix) {
    var mapArg = number$12 + "|\\w+|" + rgba2 + "|" + hsla2 + "|" + hex3$1 + "|" + hex6$1;
    return "^" + prefix + "\\s*\\(([\\w\\.]+)\\s*\\,\\s*(" + number$12 + ")\\s*\\,\\s*(" + number$12 + ")\\s*,\\s*(" + mapArg + ")\\s*\\,\\s*(" + mapArg + ")\\)$";
  };
  var urlRegexes = [`^url\\s*\\(\\s*['"]?(.+?)['"]?\\s*\\)$`, "^(none)$", "^(.+)$"];
  styfn$2.types = {
    time: {
      number: true,
      min: 0,
      units: "s|ms",
      implicitUnits: "ms"
    },
    percent: {
      number: true,
      min: 0,
      max: 100,
      units: "%",
      implicitUnits: "%"
    },
    percentages: {
      number: true,
      min: 0,
      max: 100,
      units: "%",
      implicitUnits: "%",
      multiple: true
    },
    zeroOneNumber: {
      number: true,
      min: 0,
      max: 1,
      unitless: true
    },
    zeroOneNumbers: {
      number: true,
      min: 0,
      max: 1,
      unitless: true,
      multiple: true
    },
    nOneOneNumber: {
      number: true,
      min: -1,
      max: 1,
      unitless: true
    },
    nonNegativeInt: {
      number: true,
      min: 0,
      integer: true,
      unitless: true
    },
    position: {
      enums: ["parent", "origin"]
    },
    nodeSize: {
      number: true,
      min: 0,
      enums: ["label"]
    },
    number: {
      number: true,
      unitless: true
    },
    numbers: {
      number: true,
      unitless: true,
      multiple: true
    },
    positiveNumber: {
      number: true,
      unitless: true,
      min: 0,
      strictMin: true
    },
    size: {
      number: true,
      min: 0
    },
    bidirectionalSize: {
      number: true
    },
    // allows negative
    bidirectionalSizeMaybePercent: {
      number: true,
      allowPercent: true
    },
    // allows negative
    bidirectionalSizes: {
      number: true,
      multiple: true
    },
    // allows negative
    sizeMaybePercent: {
      number: true,
      min: 0,
      allowPercent: true
    },
    axisDirection: {
      enums: ["horizontal", "leftward", "rightward", "vertical", "upward", "downward", "auto"]
    },
    paddingRelativeTo: {
      enums: ["width", "height", "average", "min", "max"]
    },
    bgWH: {
      number: true,
      min: 0,
      allowPercent: true,
      enums: ["auto"],
      multiple: true
    },
    bgPos: {
      number: true,
      allowPercent: true,
      multiple: true
    },
    bgRelativeTo: {
      enums: ["inner", "include-padding"],
      multiple: true
    },
    bgRepeat: {
      enums: ["repeat", "repeat-x", "repeat-y", "no-repeat"],
      multiple: true
    },
    bgFit: {
      enums: ["none", "contain", "cover"],
      multiple: true
    },
    bgCrossOrigin: {
      enums: ["anonymous", "use-credentials", "null"],
      multiple: true
    },
    bgClip: {
      enums: ["none", "node"],
      multiple: true
    },
    bgContainment: {
      enums: ["inside", "over"],
      multiple: true
    },
    color: {
      color: true
    },
    colors: {
      color: true,
      multiple: true
    },
    fill: {
      enums: ["solid", "linear-gradient", "radial-gradient"]
    },
    bool: {
      enums: ["yes", "no"]
    },
    bools: {
      enums: ["yes", "no"],
      multiple: true
    },
    lineStyle: {
      enums: ["solid", "dotted", "dashed"]
    },
    lineCap: {
      enums: ["butt", "round", "square"]
    },
    borderStyle: {
      enums: ["solid", "dotted", "dashed", "double"]
    },
    curveStyle: {
      enums: ["bezier", "unbundled-bezier", "haystack", "segments", "straight", "straight-triangle", "taxi"]
    },
    fontFamily: {
      regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
    },
    fontStyle: {
      enums: ["italic", "normal", "oblique"]
    },
    fontWeight: {
      enums: ["normal", "bold", "bolder", "lighter", "100", "200", "300", "400", "500", "600", "800", "900", 100, 200, 300, 400, 500, 600, 700, 800, 900]
    },
    textDecoration: {
      enums: ["none", "underline", "overline", "line-through"]
    },
    textTransform: {
      enums: ["none", "uppercase", "lowercase"]
    },
    textWrap: {
      enums: ["none", "wrap", "ellipsis"]
    },
    textOverflowWrap: {
      enums: ["whitespace", "anywhere"]
    },
    textBackgroundShape: {
      enums: ["rectangle", "roundrectangle", "round-rectangle"]
    },
    nodeShape: {
      enums: ["rectangle", "roundrectangle", "round-rectangle", "cutrectangle", "cut-rectangle", "bottomroundrectangle", "bottom-round-rectangle", "barrel", "ellipse", "triangle", "round-triangle", "square", "pentagon", "round-pentagon", "hexagon", "round-hexagon", "concavehexagon", "concave-hexagon", "heptagon", "round-heptagon", "octagon", "round-octagon", "tag", "round-tag", "star", "diamond", "round-diamond", "vee", "rhomboid", "right-rhomboid", "polygon"]
    },
    overlayShape: {
      enums: ["roundrectangle", "round-rectangle", "ellipse"]
    },
    compoundIncludeLabels: {
      enums: ["include", "exclude"]
    },
    arrowShape: {
      enums: ["tee", "triangle", "triangle-tee", "circle-triangle", "triangle-cross", "triangle-backcurve", "vee", "square", "circle", "diamond", "chevron", "none"]
    },
    arrowFill: {
      enums: ["filled", "hollow"]
    },
    display: {
      enums: ["element", "none"]
    },
    visibility: {
      enums: ["hidden", "visible"]
    },
    zCompoundDepth: {
      enums: ["bottom", "orphan", "auto", "top"]
    },
    zIndexCompare: {
      enums: ["auto", "manual"]
    },
    valign: {
      enums: ["top", "center", "bottom"]
    },
    halign: {
      enums: ["left", "center", "right"]
    },
    justification: {
      enums: ["left", "center", "right", "auto"]
    },
    text: {
      string: true
    },
    data: {
      mapping: true,
      regex: data4("data")
    },
    layoutData: {
      mapping: true,
      regex: data4("layoutData")
    },
    scratch: {
      mapping: true,
      regex: data4("scratch")
    },
    mapData: {
      mapping: true,
      regex: mapData("mapData")
    },
    mapLayoutData: {
      mapping: true,
      regex: mapData("mapLayoutData")
    },
    mapScratch: {
      mapping: true,
      regex: mapData("mapScratch")
    },
    fn: {
      mapping: true,
      fn: true
    },
    url: {
      regexes: urlRegexes,
      singleRegexMatchValue: true
    },
    urls: {
      regexes: urlRegexes,
      singleRegexMatchValue: true,
      multiple: true
    },
    propList: {
      propList: true
    },
    angle: {
      number: true,
      units: "deg|rad",
      implicitUnits: "rad"
    },
    textRotation: {
      number: true,
      units: "deg|rad",
      implicitUnits: "rad",
      enums: ["none", "autorotate"]
    },
    polygonPointList: {
      number: true,
      multiple: true,
      evenMultiple: true,
      min: -1,
      max: 1,
      unitless: true
    },
    edgeDistances: {
      enums: ["intersection", "node-position"]
    },
    edgeEndpoint: {
      number: true,
      multiple: true,
      units: "%|px|em|deg|rad",
      implicitUnits: "px",
      enums: ["inside-to-node", "outside-to-node", "outside-to-node-or-label", "outside-to-line", "outside-to-line-or-label"],
      singleEnum: true,
      validate: function validate(valArr, unitsArr) {
        switch (valArr.length) {
          case 2:
            return unitsArr[0] !== "deg" && unitsArr[0] !== "rad" && unitsArr[1] !== "deg" && unitsArr[1] !== "rad";
          case 1:
            return string(valArr[0]) || unitsArr[0] === "deg" || unitsArr[0] === "rad";
          default:
            return false;
        }
      }
    },
    easing: {
      regexes: ["^(spring)\\s*\\(\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*\\)$", "^(cubic-bezier)\\s*\\(\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*\\)$"],
      enums: ["linear", "ease", "ease-in", "ease-out", "ease-in-out", "ease-in-sine", "ease-out-sine", "ease-in-out-sine", "ease-in-quad", "ease-out-quad", "ease-in-out-quad", "ease-in-cubic", "ease-out-cubic", "ease-in-out-cubic", "ease-in-quart", "ease-out-quart", "ease-in-out-quart", "ease-in-quint", "ease-out-quint", "ease-in-out-quint", "ease-in-expo", "ease-out-expo", "ease-in-out-expo", "ease-in-circ", "ease-out-circ", "ease-in-out-circ"]
    },
    gradientDirection: {
      enums: [
        "to-bottom",
        "to-top",
        "to-left",
        "to-right",
        "to-bottom-right",
        "to-bottom-left",
        "to-top-right",
        "to-top-left",
        "to-right-bottom",
        "to-left-bottom",
        "to-right-top",
        "to-left-top"
        // different order
      ]
    },
    boundsExpansion: {
      number: true,
      multiple: true,
      min: 0,
      validate: function validate(valArr) {
        var length = valArr.length;
        return length === 1 || length === 2 || length === 4;
      }
    }
  };
  var diff2 = {
    zeroNonZero: function zeroNonZero(val1, val2) {
      if ((val1 == null || val2 == null) && val1 !== val2) {
        return true;
      }
      if (val1 == 0 && val2 != 0) {
        return true;
      } else if (val1 != 0 && val2 == 0) {
        return true;
      } else {
        return false;
      }
    },
    any: function any(val1, val2) {
      return val1 != val2;
    },
    emptyNonEmpty: function emptyNonEmpty(str1, str2) {
      var empty1 = emptyString(str1);
      var empty22 = emptyString(str2);
      return empty1 && !empty22 || !empty1 && empty22;
    }
  };
  var t3 = styfn$2.types;
  var mainLabel = [{
    name: "label",
    type: t3.text,
    triggersBounds: diff2.any,
    triggersZOrder: diff2.emptyNonEmpty
  }, {
    name: "text-rotation",
    type: t3.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "text-margin-x",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "text-margin-y",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }];
  var sourceLabel = [{
    name: "source-label",
    type: t3.text,
    triggersBounds: diff2.any
  }, {
    name: "source-text-rotation",
    type: t3.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "source-text-margin-x",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "source-text-margin-y",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "source-text-offset",
    type: t3.size,
    triggersBounds: diff2.any
  }];
  var targetLabel = [{
    name: "target-label",
    type: t3.text,
    triggersBounds: diff2.any
  }, {
    name: "target-text-rotation",
    type: t3.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "target-text-margin-x",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "target-text-margin-y",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "target-text-offset",
    type: t3.size,
    triggersBounds: diff2.any
  }];
  var labelDimensions = [{
    name: "font-family",
    type: t3.fontFamily,
    triggersBounds: diff2.any
  }, {
    name: "font-style",
    type: t3.fontStyle,
    triggersBounds: diff2.any
  }, {
    name: "font-weight",
    type: t3.fontWeight,
    triggersBounds: diff2.any
  }, {
    name: "font-size",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "text-transform",
    type: t3.textTransform,
    triggersBounds: diff2.any
  }, {
    name: "text-wrap",
    type: t3.textWrap,
    triggersBounds: diff2.any
  }, {
    name: "text-overflow-wrap",
    type: t3.textOverflowWrap,
    triggersBounds: diff2.any
  }, {
    name: "text-max-width",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "text-outline-width",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "line-height",
    type: t3.positiveNumber,
    triggersBounds: diff2.any
  }];
  var commonLabel = [{
    name: "text-valign",
    type: t3.valign,
    triggersBounds: diff2.any
  }, {
    name: "text-halign",
    type: t3.halign,
    triggersBounds: diff2.any
  }, {
    name: "color",
    type: t3.color
  }, {
    name: "text-outline-color",
    type: t3.color
  }, {
    name: "text-outline-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "text-background-color",
    type: t3.color
  }, {
    name: "text-background-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "text-background-padding",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "text-border-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "text-border-color",
    type: t3.color
  }, {
    name: "text-border-width",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "text-border-style",
    type: t3.borderStyle,
    triggersBounds: diff2.any
  }, {
    name: "text-background-shape",
    type: t3.textBackgroundShape,
    triggersBounds: diff2.any
  }, {
    name: "text-justification",
    type: t3.justification
  }];
  var behavior = [{
    name: "events",
    type: t3.bool
  }, {
    name: "text-events",
    type: t3.bool
  }];
  var visibility = [{
    name: "display",
    type: t3.display,
    triggersZOrder: diff2.any,
    triggersBounds: diff2.any,
    triggersBoundsOfParallelBeziers: true
  }, {
    name: "visibility",
    type: t3.visibility,
    triggersZOrder: diff2.any
  }, {
    name: "opacity",
    type: t3.zeroOneNumber,
    triggersZOrder: diff2.zeroNonZero
  }, {
    name: "text-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "min-zoomed-font-size",
    type: t3.size
  }, {
    name: "z-compound-depth",
    type: t3.zCompoundDepth,
    triggersZOrder: diff2.any
  }, {
    name: "z-index-compare",
    type: t3.zIndexCompare,
    triggersZOrder: diff2.any
  }, {
    name: "z-index",
    type: t3.nonNegativeInt,
    triggersZOrder: diff2.any
  }];
  var overlay = [{
    name: "overlay-padding",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "overlay-color",
    type: t3.color
  }, {
    name: "overlay-opacity",
    type: t3.zeroOneNumber,
    triggersBounds: diff2.zeroNonZero
  }, {
    name: "overlay-shape",
    type: t3.overlayShape,
    triggersBounds: diff2.any
  }];
  var underlay = [{
    name: "underlay-padding",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "underlay-color",
    type: t3.color
  }, {
    name: "underlay-opacity",
    type: t3.zeroOneNumber,
    triggersBounds: diff2.zeroNonZero
  }, {
    name: "underlay-shape",
    type: t3.overlayShape,
    triggersBounds: diff2.any
  }];
  var transition = [{
    name: "transition-property",
    type: t3.propList
  }, {
    name: "transition-duration",
    type: t3.time
  }, {
    name: "transition-delay",
    type: t3.time
  }, {
    name: "transition-timing-function",
    type: t3.easing
  }];
  var nodeSizeHashOverride = function nodeSizeHashOverride2(ele, parsedProp) {
    if (parsedProp.value === "label") {
      return -ele.poolIndex();
    } else {
      return parsedProp.pfValue;
    }
  };
  var nodeBody = [{
    name: "height",
    type: t3.nodeSize,
    triggersBounds: diff2.any,
    hashOverride: nodeSizeHashOverride
  }, {
    name: "width",
    type: t3.nodeSize,
    triggersBounds: diff2.any,
    hashOverride: nodeSizeHashOverride
  }, {
    name: "shape",
    type: t3.nodeShape,
    triggersBounds: diff2.any
  }, {
    name: "shape-polygon-points",
    type: t3.polygonPointList,
    triggersBounds: diff2.any
  }, {
    name: "background-color",
    type: t3.color
  }, {
    name: "background-fill",
    type: t3.fill
  }, {
    name: "background-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "background-blacken",
    type: t3.nOneOneNumber
  }, {
    name: "background-gradient-stop-colors",
    type: t3.colors
  }, {
    name: "background-gradient-stop-positions",
    type: t3.percentages
  }, {
    name: "background-gradient-direction",
    type: t3.gradientDirection
  }, {
    name: "padding",
    type: t3.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "padding-relative-to",
    type: t3.paddingRelativeTo,
    triggersBounds: diff2.any
  }, {
    name: "bounds-expansion",
    type: t3.boundsExpansion,
    triggersBounds: diff2.any
  }];
  var nodeBorder = [{
    name: "border-color",
    type: t3.color
  }, {
    name: "border-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "border-width",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "border-style",
    type: t3.borderStyle
  }];
  var backgroundImage = [{
    name: "background-image",
    type: t3.urls
  }, {
    name: "background-image-crossorigin",
    type: t3.bgCrossOrigin
  }, {
    name: "background-image-opacity",
    type: t3.zeroOneNumbers
  }, {
    name: "background-image-containment",
    type: t3.bgContainment
  }, {
    name: "background-image-smoothing",
    type: t3.bools
  }, {
    name: "background-position-x",
    type: t3.bgPos
  }, {
    name: "background-position-y",
    type: t3.bgPos
  }, {
    name: "background-width-relative-to",
    type: t3.bgRelativeTo
  }, {
    name: "background-height-relative-to",
    type: t3.bgRelativeTo
  }, {
    name: "background-repeat",
    type: t3.bgRepeat
  }, {
    name: "background-fit",
    type: t3.bgFit
  }, {
    name: "background-clip",
    type: t3.bgClip
  }, {
    name: "background-width",
    type: t3.bgWH
  }, {
    name: "background-height",
    type: t3.bgWH
  }, {
    name: "background-offset-x",
    type: t3.bgPos
  }, {
    name: "background-offset-y",
    type: t3.bgPos
  }];
  var compound = [{
    name: "position",
    type: t3.position,
    triggersBounds: diff2.any
  }, {
    name: "compound-sizing-wrt-labels",
    type: t3.compoundIncludeLabels,
    triggersBounds: diff2.any
  }, {
    name: "min-width",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "min-width-bias-left",
    type: t3.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-width-bias-right",
    type: t3.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-height",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "min-height-bias-top",
    type: t3.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-height-bias-bottom",
    type: t3.sizeMaybePercent,
    triggersBounds: diff2.any
  }];
  var edgeLine = [{
    name: "line-style",
    type: t3.lineStyle
  }, {
    name: "line-color",
    type: t3.color
  }, {
    name: "line-fill",
    type: t3.fill
  }, {
    name: "line-cap",
    type: t3.lineCap
  }, {
    name: "line-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "line-dash-pattern",
    type: t3.numbers
  }, {
    name: "line-dash-offset",
    type: t3.number
  }, {
    name: "line-gradient-stop-colors",
    type: t3.colors
  }, {
    name: "line-gradient-stop-positions",
    type: t3.percentages
  }, {
    name: "curve-style",
    type: t3.curveStyle,
    triggersBounds: diff2.any,
    triggersBoundsOfParallelBeziers: true
  }, {
    name: "haystack-radius",
    type: t3.zeroOneNumber,
    triggersBounds: diff2.any
  }, {
    name: "source-endpoint",
    type: t3.edgeEndpoint,
    triggersBounds: diff2.any
  }, {
    name: "target-endpoint",
    type: t3.edgeEndpoint,
    triggersBounds: diff2.any
  }, {
    name: "control-point-step-size",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "control-point-distances",
    type: t3.bidirectionalSizes,
    triggersBounds: diff2.any
  }, {
    name: "control-point-weights",
    type: t3.numbers,
    triggersBounds: diff2.any
  }, {
    name: "segment-distances",
    type: t3.bidirectionalSizes,
    triggersBounds: diff2.any
  }, {
    name: "segment-weights",
    type: t3.numbers,
    triggersBounds: diff2.any
  }, {
    name: "taxi-turn",
    type: t3.bidirectionalSizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "taxi-turn-min-distance",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "taxi-direction",
    type: t3.axisDirection,
    triggersBounds: diff2.any
  }, {
    name: "edge-distances",
    type: t3.edgeDistances,
    triggersBounds: diff2.any
  }, {
    name: "arrow-scale",
    type: t3.positiveNumber,
    triggersBounds: diff2.any
  }, {
    name: "loop-direction",
    type: t3.angle,
    triggersBounds: diff2.any
  }, {
    name: "loop-sweep",
    type: t3.angle,
    triggersBounds: diff2.any
  }, {
    name: "source-distance-from-node",
    type: t3.size,
    triggersBounds: diff2.any
  }, {
    name: "target-distance-from-node",
    type: t3.size,
    triggersBounds: diff2.any
  }];
  var ghost = [{
    name: "ghost",
    type: t3.bool,
    triggersBounds: diff2.any
  }, {
    name: "ghost-offset-x",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "ghost-offset-y",
    type: t3.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "ghost-opacity",
    type: t3.zeroOneNumber
  }];
  var core3 = [{
    name: "selection-box-color",
    type: t3.color
  }, {
    name: "selection-box-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "selection-box-border-color",
    type: t3.color
  }, {
    name: "selection-box-border-width",
    type: t3.size
  }, {
    name: "active-bg-color",
    type: t3.color
  }, {
    name: "active-bg-opacity",
    type: t3.zeroOneNumber
  }, {
    name: "active-bg-size",
    type: t3.size
  }, {
    name: "outside-texture-bg-color",
    type: t3.color
  }, {
    name: "outside-texture-bg-opacity",
    type: t3.zeroOneNumber
  }];
  var pie = [];
  styfn$2.pieBackgroundN = 16;
  pie.push({
    name: "pie-size",
    type: t3.sizeMaybePercent
  });
  for (var i2 = 1; i2 <= styfn$2.pieBackgroundN; i2++) {
    pie.push({
      name: "pie-" + i2 + "-background-color",
      type: t3.color
    });
    pie.push({
      name: "pie-" + i2 + "-background-size",
      type: t3.percent
    });
    pie.push({
      name: "pie-" + i2 + "-background-opacity",
      type: t3.zeroOneNumber
    });
  }
  var edgeArrow = [];
  var arrowPrefixes = styfn$2.arrowPrefixes = ["source", "mid-source", "target", "mid-target"];
  [{
    name: "arrow-shape",
    type: t3.arrowShape,
    triggersBounds: diff2.any
  }, {
    name: "arrow-color",
    type: t3.color
  }, {
    name: "arrow-fill",
    type: t3.arrowFill
  }].forEach(function(prop2) {
    arrowPrefixes.forEach(function(prefix) {
      var name2 = prefix + "-" + prop2.name;
      var type = prop2.type, triggersBounds = prop2.triggersBounds;
      edgeArrow.push({
        name: name2,
        type,
        triggersBounds
      });
    });
  }, {});
  var props = styfn$2.properties = [].concat(behavior, transition, visibility, overlay, underlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core3);
  var propGroups = styfn$2.propertyGroups = {
    // common to all eles
    behavior,
    transition,
    visibility,
    overlay,
    underlay,
    ghost,
    // labels
    commonLabel,
    labelDimensions,
    mainLabel,
    sourceLabel,
    targetLabel,
    // node props
    nodeBody,
    nodeBorder,
    backgroundImage,
    pie,
    compound,
    // edge props
    edgeLine,
    edgeArrow,
    core: core3
  };
  var propGroupNames = styfn$2.propertyGroupNames = {};
  var propGroupKeys = styfn$2.propertyGroupKeys = Object.keys(propGroups);
  propGroupKeys.forEach(function(key) {
    propGroupNames[key] = propGroups[key].map(function(prop2) {
      return prop2.name;
    });
    propGroups[key].forEach(function(prop2) {
      return prop2.groupKey = key;
    });
  });
  var aliases = styfn$2.aliases = [{
    name: "content",
    pointsTo: "label"
  }, {
    name: "control-point-distance",
    pointsTo: "control-point-distances"
  }, {
    name: "control-point-weight",
    pointsTo: "control-point-weights"
  }, {
    name: "edge-text-rotation",
    pointsTo: "text-rotation"
  }, {
    name: "padding-left",
    pointsTo: "padding"
  }, {
    name: "padding-right",
    pointsTo: "padding"
  }, {
    name: "padding-top",
    pointsTo: "padding"
  }, {
    name: "padding-bottom",
    pointsTo: "padding"
  }];
  styfn$2.propertyNames = props.map(function(p2) {
    return p2.name;
  });
  for (var _i = 0; _i < props.length; _i++) {
    var prop = props[_i];
    props[prop.name] = prop;
  }
  for (var _i2 = 0; _i2 < aliases.length; _i2++) {
    var alias = aliases[_i2];
    var pointsToProp = props[alias.pointsTo];
    var aliasProp = {
      name: alias.name,
      alias: true,
      pointsTo: pointsToProp
    };
    props.push(aliasProp);
    props[alias.name] = aliasProp;
  }
})();
styfn$2.getDefaultProperty = function(name2) {
  return this.getDefaultProperties()[name2];
};
styfn$2.getDefaultProperties = function() {
  var _p = this._private;
  if (_p.defaultProperties != null) {
    return _p.defaultProperties;
  }
  var rawProps = extend$1({
    // core props
    "selection-box-color": "#ddd",
    "selection-box-opacity": 0.65,
    "selection-box-border-color": "#aaa",
    "selection-box-border-width": 1,
    "active-bg-color": "black",
    "active-bg-opacity": 0.15,
    "active-bg-size": 30,
    "outside-texture-bg-color": "#000",
    "outside-texture-bg-opacity": 0.125,
    // common node/edge props
    "events": "yes",
    "text-events": "no",
    "text-valign": "top",
    "text-halign": "center",
    "text-justification": "auto",
    "line-height": 1,
    "color": "#000",
    "text-outline-color": "#000",
    "text-outline-width": 0,
    "text-outline-opacity": 1,
    "text-opacity": 1,
    "text-decoration": "none",
    "text-transform": "none",
    "text-wrap": "none",
    "text-overflow-wrap": "whitespace",
    "text-max-width": 9999,
    "text-background-color": "#000",
    "text-background-opacity": 0,
    "text-background-shape": "rectangle",
    "text-background-padding": 0,
    "text-border-opacity": 0,
    "text-border-width": 0,
    "text-border-style": "solid",
    "text-border-color": "#000",
    "font-family": "Helvetica Neue, Helvetica, sans-serif",
    "font-style": "normal",
    "font-weight": "normal",
    "font-size": 16,
    "min-zoomed-font-size": 0,
    "text-rotation": "none",
    "source-text-rotation": "none",
    "target-text-rotation": "none",
    "visibility": "visible",
    "display": "element",
    "opacity": 1,
    "z-compound-depth": "auto",
    "z-index-compare": "auto",
    "z-index": 0,
    "label": "",
    "text-margin-x": 0,
    "text-margin-y": 0,
    "source-label": "",
    "source-text-offset": 0,
    "source-text-margin-x": 0,
    "source-text-margin-y": 0,
    "target-label": "",
    "target-text-offset": 0,
    "target-text-margin-x": 0,
    "target-text-margin-y": 0,
    "overlay-opacity": 0,
    "overlay-color": "#000",
    "overlay-padding": 10,
    "overlay-shape": "round-rectangle",
    "underlay-opacity": 0,
    "underlay-color": "#000",
    "underlay-padding": 10,
    "underlay-shape": "round-rectangle",
    "transition-property": "none",
    "transition-duration": 0,
    "transition-delay": 0,
    "transition-timing-function": "linear",
    // node props
    "background-blacken": 0,
    "background-color": "#999",
    "background-fill": "solid",
    "background-opacity": 1,
    "background-image": "none",
    "background-image-crossorigin": "anonymous",
    "background-image-opacity": 1,
    "background-image-containment": "inside",
    "background-image-smoothing": "yes",
    "background-position-x": "50%",
    "background-position-y": "50%",
    "background-offset-x": 0,
    "background-offset-y": 0,
    "background-width-relative-to": "include-padding",
    "background-height-relative-to": "include-padding",
    "background-repeat": "no-repeat",
    "background-fit": "none",
    "background-clip": "node",
    "background-width": "auto",
    "background-height": "auto",
    "border-color": "#000",
    "border-opacity": 1,
    "border-width": 0,
    "border-style": "solid",
    "height": 30,
    "width": 30,
    "shape": "ellipse",
    "shape-polygon-points": "-1, -1,   1, -1,   1, 1,   -1, 1",
    "bounds-expansion": 0,
    // node gradient
    "background-gradient-direction": "to-bottom",
    "background-gradient-stop-colors": "#999",
    "background-gradient-stop-positions": "0%",
    // ghost props
    "ghost": "no",
    "ghost-offset-y": 0,
    "ghost-offset-x": 0,
    "ghost-opacity": 0,
    // compound props
    "padding": 0,
    "padding-relative-to": "width",
    "position": "origin",
    "compound-sizing-wrt-labels": "include",
    "min-width": 0,
    "min-width-bias-left": 0,
    "min-width-bias-right": 0,
    "min-height": 0,
    "min-height-bias-top": 0,
    "min-height-bias-bottom": 0
  }, {
    // node pie bg
    "pie-size": "100%"
  }, [{
    name: "pie-{{i}}-background-color",
    value: "black"
  }, {
    name: "pie-{{i}}-background-size",
    value: "0%"
  }, {
    name: "pie-{{i}}-background-opacity",
    value: 1
  }].reduce(function(css, prop2) {
    for (var i3 = 1; i3 <= styfn$2.pieBackgroundN; i3++) {
      var name3 = prop2.name.replace("{{i}}", i3);
      var val2 = prop2.value;
      css[name3] = val2;
    }
    return css;
  }, {}), {
    // edge props
    "line-style": "solid",
    "line-color": "#999",
    "line-fill": "solid",
    "line-cap": "butt",
    "line-opacity": 1,
    "line-gradient-stop-colors": "#999",
    "line-gradient-stop-positions": "0%",
    "control-point-step-size": 40,
    "control-point-weights": 0.5,
    "segment-weights": 0.5,
    "segment-distances": 20,
    "taxi-turn": "50%",
    "taxi-turn-min-distance": 10,
    "taxi-direction": "auto",
    "edge-distances": "intersection",
    "curve-style": "haystack",
    "haystack-radius": 0,
    "arrow-scale": 1,
    "loop-direction": "-45deg",
    "loop-sweep": "-90deg",
    "source-distance-from-node": 0,
    "target-distance-from-node": 0,
    "source-endpoint": "outside-to-node",
    "target-endpoint": "outside-to-node",
    "line-dash-pattern": [6, 3],
    "line-dash-offset": 0
  }, [{
    name: "arrow-shape",
    value: "none"
  }, {
    name: "arrow-color",
    value: "#999"
  }, {
    name: "arrow-fill",
    value: "filled"
  }].reduce(function(css, prop2) {
    styfn$2.arrowPrefixes.forEach(function(prefix) {
      var name3 = prefix + "-" + prop2.name;
      var val2 = prop2.value;
      css[name3] = val2;
    });
    return css;
  }, {}));
  var parsedProps = {};
  for (var i2 = 0; i2 < this.properties.length; i2++) {
    var prop = this.properties[i2];
    if (prop.pointsTo) {
      continue;
    }
    var name2 = prop.name;
    var val = rawProps[name2];
    var parsedProp = this.parse(name2, val);
    parsedProps[name2] = parsedProp;
  }
  _p.defaultProperties = parsedProps;
  return _p.defaultProperties;
};
styfn$2.addDefaultStylesheet = function() {
  this.selector(":parent").css({
    "shape": "rectangle",
    "padding": 10,
    "background-color": "#eee",
    "border-color": "#ccc",
    "border-width": 1
  }).selector("edge").css({
    "width": 3
  }).selector(":loop").css({
    "curve-style": "bezier"
  }).selector("edge:compound").css({
    "curve-style": "bezier",
    "source-endpoint": "outside-to-line",
    "target-endpoint": "outside-to-line"
  }).selector(":selected").css({
    "background-color": "#0169D9",
    "line-color": "#0169D9",
    "source-arrow-color": "#0169D9",
    "target-arrow-color": "#0169D9",
    "mid-source-arrow-color": "#0169D9",
    "mid-target-arrow-color": "#0169D9"
  }).selector(":parent:selected").css({
    "background-color": "#CCE1F9",
    "border-color": "#aec8e5"
  }).selector(":active").css({
    "overlay-color": "black",
    "overlay-padding": 10,
    "overlay-opacity": 0.25
  });
  this.defaultLength = this.length;
};
var styfn$1 = {};
styfn$1.parse = function(name2, value, propIsBypass, propIsFlat) {
  var self2 = this;
  if (fn$6(value)) {
    return self2.parseImplWarn(name2, value, propIsBypass, propIsFlat);
  }
  var flatKey = propIsFlat === "mapping" || propIsFlat === true || propIsFlat === false || propIsFlat == null ? "dontcare" : propIsFlat;
  var bypassKey = propIsBypass ? "t" : "f";
  var valueKey = "" + value;
  var argHash = hashStrings(name2, valueKey, bypassKey, flatKey);
  var propCache = self2.propCache = self2.propCache || [];
  var ret;
  if (!(ret = propCache[argHash])) {
    ret = propCache[argHash] = self2.parseImplWarn(name2, value, propIsBypass, propIsFlat);
  }
  if (propIsBypass || propIsFlat === "mapping") {
    ret = copy(ret);
    if (ret) {
      ret.value = copy(ret.value);
    }
  }
  return ret;
};
styfn$1.parseImplWarn = function(name2, value, propIsBypass, propIsFlat) {
  var prop = this.parseImpl(name2, value, propIsBypass, propIsFlat);
  if (!prop && value != null) {
    warn("The style property `".concat(name2, ": ").concat(value, "` is invalid"));
  }
  if (prop && (prop.name === "width" || prop.name === "height") && value === "label") {
    warn("The style value of `label` is deprecated for `" + prop.name + "`");
  }
  return prop;
};
styfn$1.parseImpl = function(name2, value, propIsBypass, propIsFlat) {
  var self2 = this;
  name2 = camel2dash(name2);
  var property = self2.properties[name2];
  var passedValue = value;
  var types = self2.types;
  if (!property) {
    return null;
  }
  if (value === void 0) {
    return null;
  }
  if (property.alias) {
    property = property.pointsTo;
    name2 = property.name;
  }
  var valueIsString = string(value);
  if (valueIsString) {
    value = value.trim();
  }
  var type = property.type;
  if (!type) {
    return null;
  }
  if (propIsBypass && (value === "" || value === null)) {
    return {
      name: name2,
      value,
      bypass: true,
      deleteBypass: true
    };
  }
  if (fn$6(value)) {
    return {
      name: name2,
      value,
      strValue: "fn",
      mapped: types.fn,
      bypass: propIsBypass
    };
  }
  var data4, mapData;
  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== "a")
    ;
  else if (value.length >= 7 && value[0] === "d" && (data4 = new RegExp(types.data.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    }
    var mapped = types.data;
    return {
      name: name2,
      value: data4,
      strValue: "" + value,
      mapped,
      field: data4[1],
      bypass: propIsBypass
    };
  } else if (value.length >= 10 && value[0] === "m" && (mapData = new RegExp(types.mapData.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    }
    if (type.multiple) {
      return false;
    }
    var _mapped = types.mapData;
    if (!(type.color || type.number)) {
      return false;
    }
    var valueMin = this.parse(name2, mapData[4]);
    if (!valueMin || valueMin.mapped) {
      return false;
    }
    var valueMax = this.parse(name2, mapData[5]);
    if (!valueMax || valueMax.mapped) {
      return false;
    }
    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
      warn("`" + name2 + ": " + value + "` is not a valid mapper because the output range is zero; converting to `" + name2 + ": " + valueMin.strValue + "`");
      return this.parse(name2, valueMin.strValue);
    } else if (type.color) {
      var c1 = valueMin.value;
      var c2 = valueMax.value;
      var same2 = c1[0] === c2[0] && c1[1] === c2[1] && c1[2] === c2[2] && // optional alpha
      (c1[3] === c2[3] || (c1[3] == null || c1[3] === 1) && (c2[3] == null || c2[3] === 1));
      if (same2) {
        return false;
      }
    }
    return {
      name: name2,
      value: mapData,
      strValue: "" + value,
      mapped: _mapped,
      field: mapData[1],
      fieldMin: parseFloat(mapData[2]),
      // min & max are numeric
      fieldMax: parseFloat(mapData[3]),
      valueMin: valueMin.value,
      valueMax: valueMax.value,
      bypass: propIsBypass
    };
  }
  if (type.multiple && propIsFlat !== "multiple") {
    var vals;
    if (valueIsString) {
      vals = value.split(/\s+/);
    } else if (array(value)) {
      vals = value;
    } else {
      vals = [value];
    }
    if (type.evenMultiple && vals.length % 2 !== 0) {
      return null;
    }
    var valArr = [];
    var unitsArr = [];
    var pfValArr = [];
    var strVal = "";
    var hasEnum = false;
    for (var i2 = 0; i2 < vals.length; i2++) {
      var p2 = self2.parse(name2, vals[i2], propIsBypass, "multiple");
      hasEnum = hasEnum || string(p2.value);
      valArr.push(p2.value);
      pfValArr.push(p2.pfValue != null ? p2.pfValue : p2.value);
      unitsArr.push(p2.units);
      strVal += (i2 > 0 ? " " : "") + p2.strValue;
    }
    if (type.validate && !type.validate(valArr, unitsArr)) {
      return null;
    }
    if (type.singleEnum && hasEnum) {
      if (valArr.length === 1 && string(valArr[0])) {
        return {
          name: name2,
          value: valArr[0],
          strValue: valArr[0],
          bypass: propIsBypass
        };
      } else {
        return null;
      }
    }
    return {
      name: name2,
      value: valArr,
      pfValue: pfValArr,
      strValue: strVal,
      bypass: propIsBypass,
      units: unitsArr
    };
  }
  var checkEnums = function checkEnums2() {
    for (var _i = 0; _i < type.enums.length; _i++) {
      var en = type.enums[_i];
      if (en === value) {
        return {
          name: name2,
          value,
          strValue: "" + value,
          bypass: propIsBypass
        };
      }
    }
    return null;
  };
  if (type.number) {
    var units;
    var implicitUnits = "px";
    if (type.units) {
      units = type.units;
    }
    if (type.implicitUnits) {
      implicitUnits = type.implicitUnits;
    }
    if (!type.unitless) {
      if (valueIsString) {
        var unitsRegex = "px|em" + (type.allowPercent ? "|\\%" : "");
        if (units) {
          unitsRegex = units;
        }
        var match2 = value.match("^(" + number2 + ")(" + unitsRegex + ")?$");
        if (match2) {
          value = match2[1];
          units = match2[2] || implicitUnits;
        }
      } else if (!units || type.implicitUnits) {
        units = implicitUnits;
      }
    }
    value = parseFloat(value);
    if (isNaN(value) && type.enums === void 0) {
      return null;
    }
    if (isNaN(value) && type.enums !== void 0) {
      value = passedValue;
      return checkEnums();
    }
    if (type.integer && !integer(value)) {
      return null;
    }
    if (type.min !== void 0 && (value < type.min || type.strictMin && value === type.min) || type.max !== void 0 && (value > type.max || type.strictMax && value === type.max)) {
      return null;
    }
    var ret = {
      name: name2,
      value,
      strValue: "" + value + (units ? units : ""),
      units,
      bypass: propIsBypass
    };
    if (type.unitless || units !== "px" && units !== "em") {
      ret.pfValue = value;
    } else {
      ret.pfValue = units === "px" || !units ? value : this.getEmSizeInPixels() * value;
    }
    if (units === "ms" || units === "s") {
      ret.pfValue = units === "ms" ? value : 1e3 * value;
    }
    if (units === "deg" || units === "rad") {
      ret.pfValue = units === "rad" ? value : deg2rad(value);
    }
    if (units === "%") {
      ret.pfValue = value / 100;
    }
    return ret;
  } else if (type.propList) {
    var props = [];
    var propsStr = "" + value;
    if (propsStr === "none")
      ;
    else {
      var propsSplit = propsStr.split(/\s*,\s*|\s+/);
      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
        var propName = propsSplit[_i2].trim();
        if (self2.properties[propName]) {
          props.push(propName);
        } else {
          warn("`" + propName + "` is not a valid property name");
        }
      }
      if (props.length === 0) {
        return null;
      }
    }
    return {
      name: name2,
      value: props,
      strValue: props.length === 0 ? "none" : props.join(" "),
      bypass: propIsBypass
    };
  } else if (type.color) {
    var tuple = color2tuple(value);
    if (!tuple) {
      return null;
    }
    return {
      name: name2,
      value: tuple,
      pfValue: tuple,
      strValue: "rgb(" + tuple[0] + "," + tuple[1] + "," + tuple[2] + ")",
      // n.b. no spaces b/c of multiple support
      bypass: propIsBypass
    };
  } else if (type.regex || type.regexes) {
    if (type.enums) {
      var enumProp = checkEnums();
      if (enumProp) {
        return enumProp;
      }
    }
    var regexes = type.regexes ? type.regexes : [type.regex];
    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
      var regex = new RegExp(regexes[_i3]);
      var m2 = regex.exec(value);
      if (m2) {
        return {
          name: name2,
          value: type.singleRegexMatchValue ? m2[1] : m2,
          strValue: "" + value,
          bypass: propIsBypass
        };
      }
    }
    return null;
  } else if (type.string) {
    return {
      name: name2,
      value: "" + value,
      strValue: "" + value,
      bypass: propIsBypass
    };
  } else if (type.enums) {
    return checkEnums();
  } else {
    return null;
  }
};
var Style = function Style2(cy2) {
  if (!(this instanceof Style2)) {
    return new Style2(cy2);
  }
  if (!core(cy2)) {
    error("A style must have a core reference");
    return;
  }
  this._private = {
    cy: cy2,
    coreStyle: {}
  };
  this.length = 0;
  this.resetToDefault();
};
var styfn = Style.prototype;
styfn.instanceString = function() {
  return "style";
};
styfn.clear = function() {
  var _p = this._private;
  var cy2 = _p.cy;
  var eles = cy2.elements();
  for (var i2 = 0; i2 < this.length; i2++) {
    this[i2] = void 0;
  }
  this.length = 0;
  _p.contextStyles = {};
  _p.propDiffs = {};
  this.cleanElements(eles, true);
  eles.forEach(function(ele) {
    var ele_p = ele[0]._private;
    ele_p.styleDirty = true;
    ele_p.appliedInitStyle = false;
  });
  return this;
};
styfn.resetToDefault = function() {
  this.clear();
  this.addDefaultStylesheet();
  return this;
};
styfn.core = function(propName) {
  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
};
styfn.selector = function(selectorStr) {
  var selector = selectorStr === "core" ? null : new Selector(selectorStr);
  var i2 = this.length++;
  this[i2] = {
    selector,
    properties: [],
    mappedProperties: [],
    index: i2
  };
  return this;
};
styfn.css = function() {
  var self2 = this;
  var args = arguments;
  if (args.length === 1) {
    var map2 = args[0];
    for (var i2 = 0; i2 < self2.properties.length; i2++) {
      var prop = self2.properties[i2];
      var mapVal = map2[prop.name];
      if (mapVal === void 0) {
        mapVal = map2[dash2camel(prop.name)];
      }
      if (mapVal !== void 0) {
        this.cssRule(prop.name, mapVal);
      }
    }
  } else if (args.length === 2) {
    this.cssRule(args[0], args[1]);
  }
  return this;
};
styfn.style = styfn.css;
styfn.cssRule = function(name2, value) {
  var property = this.parse(name2, value);
  if (property) {
    var i2 = this.length - 1;
    this[i2].properties.push(property);
    this[i2].properties[property.name] = property;
    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
      this._private.hasPie = true;
    }
    if (property.mapped) {
      this[i2].mappedProperties.push(property);
    }
    var currentSelectorIsCore = !this[i2].selector;
    if (currentSelectorIsCore) {
      this._private.coreStyle[property.name] = property;
    }
  }
  return this;
};
styfn.append = function(style3) {
  if (stylesheet(style3)) {
    style3.appendToStyle(this);
  } else if (array(style3)) {
    this.appendFromJson(style3);
  } else if (string(style3)) {
    this.appendFromString(style3);
  }
  return this;
};
Style.fromJson = function(cy2, json3) {
  var style3 = new Style(cy2);
  style3.fromJson(json3);
  return style3;
};
Style.fromString = function(cy2, string3) {
  return new Style(cy2).fromString(string3);
};
[styfn$8, styfn$7, styfn$6, styfn$5, styfn$4, styfn$3, styfn$2, styfn$1].forEach(function(props) {
  extend$1(styfn, props);
});
Style.types = styfn.types;
Style.properties = styfn.properties;
Style.propertyGroups = styfn.propertyGroups;
Style.propertyGroupNames = styfn.propertyGroupNames;
Style.propertyGroupKeys = styfn.propertyGroupKeys;
var corefn$2 = {
  style: function style2(newStyle) {
    if (newStyle) {
      var s2 = this.setStyle(newStyle);
      s2.update();
    }
    return this._private.style;
  },
  setStyle: function setStyle(style3) {
    var _p = this._private;
    if (stylesheet(style3)) {
      _p.style = style3.generateStyle(this);
    } else if (array(style3)) {
      _p.style = Style.fromJson(this, style3);
    } else if (string(style3)) {
      _p.style = Style.fromString(this, style3);
    } else {
      _p.style = Style(this);
    }
    return _p.style;
  },
  // e.g. cy.data() changed => recalc ele mappers
  updateStyle: function updateStyle2() {
    this.mutableElements().updateStyle();
  }
};
var defaultSelectionType = "single";
var corefn$1 = {
  autolock: function autolock(bool) {
    if (bool !== void 0) {
      this._private.autolock = bool ? true : false;
    } else {
      return this._private.autolock;
    }
    return this;
  },
  autoungrabify: function autoungrabify(bool) {
    if (bool !== void 0) {
      this._private.autoungrabify = bool ? true : false;
    } else {
      return this._private.autoungrabify;
    }
    return this;
  },
  autounselectify: function autounselectify(bool) {
    if (bool !== void 0) {
      this._private.autounselectify = bool ? true : false;
    } else {
      return this._private.autounselectify;
    }
    return this;
  },
  selectionType: function selectionType(selType) {
    var _p = this._private;
    if (_p.selectionType == null) {
      _p.selectionType = defaultSelectionType;
    }
    if (selType !== void 0) {
      if (selType === "additive" || selType === "single") {
        _p.selectionType = selType;
      }
    } else {
      return _p.selectionType;
    }
    return this;
  },
  panningEnabled: function panningEnabled(bool) {
    if (bool !== void 0) {
      this._private.panningEnabled = bool ? true : false;
    } else {
      return this._private.panningEnabled;
    }
    return this;
  },
  userPanningEnabled: function userPanningEnabled(bool) {
    if (bool !== void 0) {
      this._private.userPanningEnabled = bool ? true : false;
    } else {
      return this._private.userPanningEnabled;
    }
    return this;
  },
  zoomingEnabled: function zoomingEnabled(bool) {
    if (bool !== void 0) {
      this._private.zoomingEnabled = bool ? true : false;
    } else {
      return this._private.zoomingEnabled;
    }
    return this;
  },
  userZoomingEnabled: function userZoomingEnabled(bool) {
    if (bool !== void 0) {
      this._private.userZoomingEnabled = bool ? true : false;
    } else {
      return this._private.userZoomingEnabled;
    }
    return this;
  },
  boxSelectionEnabled: function boxSelectionEnabled(bool) {
    if (bool !== void 0) {
      this._private.boxSelectionEnabled = bool ? true : false;
    } else {
      return this._private.boxSelectionEnabled;
    }
    return this;
  },
  pan: function pan() {
    var args = arguments;
    var pan2 = this._private.pan;
    var dim, val, dims, x2, y2;
    switch (args.length) {
      case 0:
        return pan2;
      case 1:
        if (string(args[0])) {
          dim = args[0];
          return pan2[dim];
        } else if (plainObject(args[0])) {
          if (!this._private.panningEnabled) {
            return this;
          }
          dims = args[0];
          x2 = dims.x;
          y2 = dims.y;
          if (number$1(x2)) {
            pan2.x = x2;
          }
          if (number$1(y2)) {
            pan2.y = y2;
          }
          this.emit("pan viewport");
        }
        break;
      case 2:
        if (!this._private.panningEnabled) {
          return this;
        }
        dim = args[0];
        val = args[1];
        if ((dim === "x" || dim === "y") && number$1(val)) {
          pan2[dim] = val;
        }
        this.emit("pan viewport");
        break;
    }
    this.notify("viewport");
    return this;
  },
  panBy: function panBy(arg0, arg1) {
    var args = arguments;
    var pan2 = this._private.pan;
    var dim, val, dims, x2, y2;
    if (!this._private.panningEnabled) {
      return this;
    }
    switch (args.length) {
      case 1:
        if (plainObject(arg0)) {
          dims = args[0];
          x2 = dims.x;
          y2 = dims.y;
          if (number$1(x2)) {
            pan2.x += x2;
          }
          if (number$1(y2)) {
            pan2.y += y2;
          }
          this.emit("pan viewport");
        }
        break;
      case 2:
        dim = arg0;
        val = arg1;
        if ((dim === "x" || dim === "y") && number$1(val)) {
          pan2[dim] += val;
        }
        this.emit("pan viewport");
        break;
    }
    this.notify("viewport");
    return this;
  },
  fit: function fit(elements, padding) {
    var viewportState = this.getFitViewport(elements, padding);
    if (viewportState) {
      var _p = this._private;
      _p.zoom = viewportState.zoom;
      _p.pan = viewportState.pan;
      this.emit("pan zoom viewport");
      this.notify("viewport");
    }
    return this;
  },
  getFitViewport: function getFitViewport(elements, padding) {
    if (number$1(elements) && padding === void 0) {
      padding = elements;
      elements = void 0;
    }
    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return;
    }
    var bb;
    if (string(elements)) {
      var sel = elements;
      elements = this.$(sel);
    } else if (boundingBox(elements)) {
      var bbe = elements;
      bb = {
        x1: bbe.x1,
        y1: bbe.y1,
        x2: bbe.x2,
        y2: bbe.y2
      };
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }
    if (elementOrCollection(elements) && elements.empty()) {
      return;
    }
    bb = bb || elements.boundingBox();
    var w2 = this.width();
    var h2 = this.height();
    var zoom2;
    padding = number$1(padding) ? padding : 0;
    if (!isNaN(w2) && !isNaN(h2) && w2 > 0 && h2 > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
      zoom2 = Math.min((w2 - 2 * padding) / bb.w, (h2 - 2 * padding) / bb.h);
      zoom2 = zoom2 > this._private.maxZoom ? this._private.maxZoom : zoom2;
      zoom2 = zoom2 < this._private.minZoom ? this._private.minZoom : zoom2;
      var pan2 = {
        // now pan to middle
        x: (w2 - zoom2 * (bb.x1 + bb.x2)) / 2,
        y: (h2 - zoom2 * (bb.y1 + bb.y2)) / 2
      };
      return {
        zoom: zoom2,
        pan: pan2
      };
    }
    return;
  },
  zoomRange: function zoomRange(min4, max5) {
    var _p = this._private;
    if (max5 == null) {
      var opts = min4;
      min4 = opts.min;
      max5 = opts.max;
    }
    if (number$1(min4) && number$1(max5) && min4 <= max5) {
      _p.minZoom = min4;
      _p.maxZoom = max5;
    } else if (number$1(min4) && max5 === void 0 && min4 <= _p.maxZoom) {
      _p.minZoom = min4;
    } else if (number$1(max5) && min4 === void 0 && max5 >= _p.minZoom) {
      _p.maxZoom = max5;
    }
    return this;
  },
  minZoom: function minZoom(zoom2) {
    if (zoom2 === void 0) {
      return this._private.minZoom;
    } else {
      return this.zoomRange({
        min: zoom2
      });
    }
  },
  maxZoom: function maxZoom(zoom2) {
    if (zoom2 === void 0) {
      return this._private.maxZoom;
    } else {
      return this.zoomRange({
        max: zoom2
      });
    }
  },
  getZoomedViewport: function getZoomedViewport(params) {
    var _p = this._private;
    var currentPan = _p.pan;
    var currentZoom = _p.zoom;
    var pos;
    var zoom2;
    var bail = false;
    if (!_p.zoomingEnabled) {
      bail = true;
    }
    if (number$1(params)) {
      zoom2 = params;
    } else if (plainObject(params)) {
      zoom2 = params.level;
      if (params.position != null) {
        pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
      } else if (params.renderedPosition != null) {
        pos = params.renderedPosition;
      }
      if (pos != null && !_p.panningEnabled) {
        bail = true;
      }
    }
    zoom2 = zoom2 > _p.maxZoom ? _p.maxZoom : zoom2;
    zoom2 = zoom2 < _p.minZoom ? _p.minZoom : zoom2;
    if (bail || !number$1(zoom2) || zoom2 === currentZoom || pos != null && (!number$1(pos.x) || !number$1(pos.y))) {
      return null;
    }
    if (pos != null) {
      var pan1 = currentPan;
      var zoom1 = currentZoom;
      var zoom22 = zoom2;
      var pan2 = {
        x: -zoom22 / zoom1 * (pos.x - pan1.x) + pos.x,
        y: -zoom22 / zoom1 * (pos.y - pan1.y) + pos.y
      };
      return {
        zoomed: true,
        panned: true,
        zoom: zoom22,
        pan: pan2
      };
    } else {
      return {
        zoomed: true,
        panned: false,
        zoom: zoom2,
        pan: currentPan
      };
    }
  },
  zoom: function zoom(params) {
    if (params === void 0) {
      return this._private.zoom;
    } else {
      var vp = this.getZoomedViewport(params);
      var _p = this._private;
      if (vp == null || !vp.zoomed) {
        return this;
      }
      _p.zoom = vp.zoom;
      if (vp.panned) {
        _p.pan.x = vp.pan.x;
        _p.pan.y = vp.pan.y;
      }
      this.emit("zoom" + (vp.panned ? " pan" : "") + " viewport");
      this.notify("viewport");
      return this;
    }
  },
  viewport: function viewport(opts) {
    var _p = this._private;
    var zoomDefd = true;
    var panDefd = true;
    var events = [];
    var zoomFailed = false;
    var panFailed = false;
    if (!opts) {
      return this;
    }
    if (!number$1(opts.zoom)) {
      zoomDefd = false;
    }
    if (!plainObject(opts.pan)) {
      panDefd = false;
    }
    if (!zoomDefd && !panDefd) {
      return this;
    }
    if (zoomDefd) {
      var z2 = opts.zoom;
      if (z2 < _p.minZoom || z2 > _p.maxZoom || !_p.zoomingEnabled) {
        zoomFailed = true;
      } else {
        _p.zoom = z2;
        events.push("zoom");
      }
    }
    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
      var p2 = opts.pan;
      if (number$1(p2.x)) {
        _p.pan.x = p2.x;
        panFailed = false;
      }
      if (number$1(p2.y)) {
        _p.pan.y = p2.y;
        panFailed = false;
      }
      if (!panFailed) {
        events.push("pan");
      }
    }
    if (events.length > 0) {
      events.push("viewport");
      this.emit(events.join(" "));
      this.notify("viewport");
    }
    return this;
  },
  center: function center(elements) {
    var pan2 = this.getCenterPan(elements);
    if (pan2) {
      this._private.pan = pan2;
      this.emit("pan viewport");
      this.notify("viewport");
    }
    return this;
  },
  getCenterPan: function getCenterPan(elements, zoom2) {
    if (!this._private.panningEnabled) {
      return;
    }
    if (string(elements)) {
      var selector = elements;
      elements = this.mutableElements().filter(selector);
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }
    if (elements.length === 0) {
      return;
    }
    var bb = elements.boundingBox();
    var w2 = this.width();
    var h2 = this.height();
    zoom2 = zoom2 === void 0 ? this._private.zoom : zoom2;
    var pan2 = {
      // middle
      x: (w2 - zoom2 * (bb.x1 + bb.x2)) / 2,
      y: (h2 - zoom2 * (bb.y1 + bb.y2)) / 2
    };
    return pan2;
  },
  reset: function reset() {
    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return this;
    }
    this.viewport({
      pan: {
        x: 0,
        y: 0
      },
      zoom: 1
    });
    return this;
  },
  invalidateSize: function invalidateSize() {
    this._private.sizeCache = null;
  },
  size: function size2() {
    var _p = this._private;
    var container2 = _p.container;
    return _p.sizeCache = _p.sizeCache || (container2 ? function() {
      var style3 = window$1.getComputedStyle(container2);
      var val = function val2(name2) {
        return parseFloat(style3.getPropertyValue(name2));
      };
      return {
        width: container2.clientWidth - val("padding-left") - val("padding-right"),
        height: container2.clientHeight - val("padding-top") - val("padding-bottom")
      };
    }() : {
      // fallback if no container (not 0 b/c can be used for dividing etc)
      width: 1,
      height: 1
    });
  },
  width: function width() {
    return this.size().width;
  },
  height: function height() {
    return this.size().height;
  },
  extent: function extent() {
    var pan2 = this._private.pan;
    var zoom2 = this._private.zoom;
    var rb = this.renderedExtent();
    var b2 = {
      x1: (rb.x1 - pan2.x) / zoom2,
      x2: (rb.x2 - pan2.x) / zoom2,
      y1: (rb.y1 - pan2.y) / zoom2,
      y2: (rb.y2 - pan2.y) / zoom2
    };
    b2.w = b2.x2 - b2.x1;
    b2.h = b2.y2 - b2.y1;
    return b2;
  },
  renderedExtent: function renderedExtent() {
    var width2 = this.width();
    var height2 = this.height();
    return {
      x1: 0,
      y1: 0,
      x2: width2,
      y2: height2,
      w: width2,
      h: height2
    };
  },
  multiClickDebounceTime: function multiClickDebounceTime(_int) {
    if (_int)
      this._private.multiClickDebounceTime = _int;
    else
      return this._private.multiClickDebounceTime;
    return this;
  }
};
corefn$1.centre = corefn$1.center;
corefn$1.autolockNodes = corefn$1.autolock;
corefn$1.autoungrabifyNodes = corefn$1.autoungrabify;
var fn2 = {
  data: define.data({
    field: "data",
    bindingEvent: "data",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "data",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeData: define.removeData({
    field: "data",
    event: "data",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  }),
  scratch: define.data({
    field: "scratch",
    bindingEvent: "scratch",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "scratch",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeScratch: define.removeData({
    field: "scratch",
    event: "scratch",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  })
};
fn2.attr = fn2.data;
fn2.removeAttr = fn2.removeData;
var Core = function Core2(opts) {
  var cy2 = this;
  opts = extend$1({}, opts);
  var container2 = opts.container;
  if (container2 && !htmlElement(container2) && htmlElement(container2[0])) {
    container2 = container2[0];
  }
  var reg = container2 ? container2._cyreg : null;
  reg = reg || {};
  if (reg && reg.cy) {
    reg.cy.destroy();
    reg = {};
  }
  var readies = reg.readies = reg.readies || [];
  if (container2) {
    container2._cyreg = reg;
  }
  reg.cy = cy2;
  var head = window$1 !== void 0 && container2 !== void 0 && !opts.headless;
  var options2 = opts;
  options2.layout = extend$1({
    name: head ? "grid" : "null"
  }, options2.layout);
  options2.renderer = extend$1({
    name: head ? "canvas" : "null"
  }, options2.renderer);
  var defVal = function defVal2(def, val, altVal) {
    if (val !== void 0) {
      return val;
    } else if (altVal !== void 0) {
      return altVal;
    } else {
      return def;
    }
  };
  var _p = this._private = {
    container: container2,
    // html dom ele container
    ready: false,
    // whether ready has been triggered
    options: options2,
    // cached options
    elements: new Collection(this),
    // elements in the graph
    listeners: [],
    // list of listeners
    aniEles: new Collection(this),
    // elements being animated
    data: options2.data || {},
    // data for the core
    scratch: {},
    // scratch object for core
    layout: null,
    renderer: null,
    destroyed: false,
    // whether destroy was called
    notificationsEnabled: true,
    // whether notifications are sent to the renderer
    minZoom: 1e-50,
    maxZoom: 1e50,
    zoomingEnabled: defVal(true, options2.zoomingEnabled),
    userZoomingEnabled: defVal(true, options2.userZoomingEnabled),
    panningEnabled: defVal(true, options2.panningEnabled),
    userPanningEnabled: defVal(true, options2.userPanningEnabled),
    boxSelectionEnabled: defVal(true, options2.boxSelectionEnabled),
    autolock: defVal(false, options2.autolock, options2.autolockNodes),
    autoungrabify: defVal(false, options2.autoungrabify, options2.autoungrabifyNodes),
    autounselectify: defVal(false, options2.autounselectify),
    styleEnabled: options2.styleEnabled === void 0 ? head : options2.styleEnabled,
    zoom: number$1(options2.zoom) ? options2.zoom : 1,
    pan: {
      x: plainObject(options2.pan) && number$1(options2.pan.x) ? options2.pan.x : 0,
      y: plainObject(options2.pan) && number$1(options2.pan.y) ? options2.pan.y : 0
    },
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    hasCompoundNodes: false,
    multiClickDebounceTime: defVal(250, options2.multiClickDebounceTime)
  };
  this.createEmitter();
  this.selectionType(options2.selectionType);
  this.zoomRange({
    min: options2.minZoom,
    max: options2.maxZoom
  });
  var loadExtData = function loadExtData2(extData, next2) {
    var anyIsPromise = extData.some(promise);
    if (anyIsPromise) {
      return Promise$1.all(extData).then(next2);
    } else {
      next2(extData);
    }
  };
  if (_p.styleEnabled) {
    cy2.setStyle([]);
  }
  var rendererOptions = extend$1({}, options2, options2.renderer);
  cy2.initRenderer(rendererOptions);
  var setElesAndLayout = function setElesAndLayout2(elements, onload, ondone) {
    cy2.notifications(false);
    var oldEles = cy2.mutableElements();
    if (oldEles.length > 0) {
      oldEles.remove();
    }
    if (elements != null) {
      if (plainObject(elements) || array(elements)) {
        cy2.add(elements);
      }
    }
    cy2.one("layoutready", function(e2) {
      cy2.notifications(true);
      cy2.emit(e2);
      cy2.one("load", onload);
      cy2.emitAndNotify("load");
    }).one("layoutstop", function() {
      cy2.one("done", ondone);
      cy2.emit("done");
    });
    var layoutOpts = extend$1({}, cy2._private.options.layout);
    layoutOpts.eles = cy2.elements();
    cy2.layout(layoutOpts).run();
  };
  loadExtData([options2.style, options2.elements], function(thens) {
    var initStyle = thens[0];
    var initEles = thens[1];
    if (_p.styleEnabled) {
      cy2.style().append(initStyle);
    }
    setElesAndLayout(initEles, function() {
      cy2.startAnimationLoop();
      _p.ready = true;
      if (fn$6(options2.ready)) {
        cy2.on("ready", options2.ready);
      }
      for (var i2 = 0; i2 < readies.length; i2++) {
        var fn3 = readies[i2];
        cy2.on("ready", fn3);
      }
      if (reg) {
        reg.readies = [];
      }
      cy2.emit("ready");
    }, options2.done);
  });
};
var corefn = Core.prototype;
extend$1(corefn, {
  instanceString: function instanceString3() {
    return "core";
  },
  isReady: function isReady() {
    return this._private.ready;
  },
  destroyed: function destroyed() {
    return this._private.destroyed;
  },
  ready: function ready(fn3) {
    if (this.isReady()) {
      this.emitter().emit("ready", [], fn3);
    } else {
      this.on("ready", fn3);
    }
    return this;
  },
  destroy: function destroy() {
    var cy2 = this;
    if (cy2.destroyed())
      return;
    cy2.stopAnimationLoop();
    cy2.destroyRenderer();
    this.emit("destroy");
    cy2._private.destroyed = true;
    return cy2;
  },
  hasElementWithId: function hasElementWithId(id2) {
    return this._private.elements.hasElementWithId(id2);
  },
  getElementById: function getElementById(id2) {
    return this._private.elements.getElementById(id2);
  },
  hasCompoundNodes: function hasCompoundNodes() {
    return this._private.hasCompoundNodes;
  },
  headless: function headless() {
    return this._private.renderer.isHeadless();
  },
  styleEnabled: function styleEnabled() {
    return this._private.styleEnabled;
  },
  addToPool: function addToPool(eles) {
    this._private.elements.merge(eles);
    return this;
  },
  removeFromPool: function removeFromPool(eles) {
    this._private.elements.unmerge(eles);
    return this;
  },
  container: function container() {
    return this._private.container || null;
  },
  mount: function mount(container2) {
    if (container2 == null) {
      return;
    }
    var cy2 = this;
    var _p = cy2._private;
    var options2 = _p.options;
    if (!htmlElement(container2) && htmlElement(container2[0])) {
      container2 = container2[0];
    }
    cy2.stopAnimationLoop();
    cy2.destroyRenderer();
    _p.container = container2;
    _p.styleEnabled = true;
    cy2.invalidateSize();
    cy2.initRenderer(extend$1({}, options2, options2.renderer, {
      // allow custom renderer name to be re-used, otherwise use canvas
      name: options2.renderer.name === "null" ? "canvas" : options2.renderer.name
    }));
    cy2.startAnimationLoop();
    cy2.style(options2.style);
    cy2.emit("mount");
    return cy2;
  },
  unmount: function unmount() {
    var cy2 = this;
    cy2.stopAnimationLoop();
    cy2.destroyRenderer();
    cy2.initRenderer({
      name: "null"
    });
    cy2.emit("unmount");
    return cy2;
  },
  options: function options() {
    return copy(this._private.options);
  },
  json: function json(obj) {
    var cy2 = this;
    var _p = cy2._private;
    var eles = cy2.mutableElements();
    var getFreshRef = function getFreshRef2(ele) {
      return cy2.getElementById(ele.id());
    };
    if (plainObject(obj)) {
      cy2.startBatch();
      if (obj.elements) {
        var idInJson = {};
        var updateEles = function updateEles2(jsons, gr2) {
          var toAdd = [];
          var toMod = [];
          for (var i3 = 0; i3 < jsons.length; i3++) {
            var json4 = jsons[i3];
            if (!json4.data.id) {
              warn("cy.json() cannot handle elements without an ID attribute");
              continue;
            }
            var id2 = "" + json4.data.id;
            var ele = cy2.getElementById(id2);
            idInJson[id2] = true;
            if (ele.length !== 0) {
              toMod.push({
                ele,
                json: json4
              });
            } else {
              if (gr2) {
                json4.group = gr2;
                toAdd.push(json4);
              } else {
                toAdd.push(json4);
              }
            }
          }
          cy2.add(toAdd);
          for (var _i = 0; _i < toMod.length; _i++) {
            var _toMod$_i = toMod[_i], _ele = _toMod$_i.ele, _json = _toMod$_i.json;
            _ele.json(_json);
          }
        };
        if (array(obj.elements)) {
          updateEles(obj.elements);
        } else {
          var grs = ["nodes", "edges"];
          for (var i2 = 0; i2 < grs.length; i2++) {
            var gr = grs[i2];
            var elements = obj.elements[gr];
            if (array(elements)) {
              updateEles(elements, gr);
            }
          }
        }
        var parentsToRemove = cy2.collection();
        eles.filter(function(ele) {
          return !idInJson[ele.id()];
        }).forEach(function(ele) {
          if (ele.isParent()) {
            parentsToRemove.merge(ele);
          } else {
            ele.remove();
          }
        });
        parentsToRemove.forEach(function(ele) {
          return ele.children().move({
            parent: null
          });
        });
        parentsToRemove.forEach(function(ele) {
          return getFreshRef(ele).remove();
        });
      }
      if (obj.style) {
        cy2.style(obj.style);
      }
      if (obj.zoom != null && obj.zoom !== _p.zoom) {
        cy2.zoom(obj.zoom);
      }
      if (obj.pan) {
        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
          cy2.pan(obj.pan);
        }
      }
      if (obj.data) {
        cy2.data(obj.data);
      }
      var fields = ["minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "panningEnabled", "userPanningEnabled", "boxSelectionEnabled", "autolock", "autoungrabify", "autounselectify", "multiClickDebounceTime"];
      for (var _i2 = 0; _i2 < fields.length; _i2++) {
        var f2 = fields[_i2];
        if (obj[f2] != null) {
          cy2[f2](obj[f2]);
        }
      }
      cy2.endBatch();
      return this;
    } else {
      var flat = !!obj;
      var json3 = {};
      if (flat) {
        json3.elements = this.elements().map(function(ele) {
          return ele.json();
        });
      } else {
        json3.elements = {};
        eles.forEach(function(ele) {
          var group2 = ele.group();
          if (!json3.elements[group2]) {
            json3.elements[group2] = [];
          }
          json3.elements[group2].push(ele.json());
        });
      }
      if (this._private.styleEnabled) {
        json3.style = cy2.style().json();
      }
      json3.data = copy(cy2.data());
      var options2 = _p.options;
      json3.zoomingEnabled = _p.zoomingEnabled;
      json3.userZoomingEnabled = _p.userZoomingEnabled;
      json3.zoom = _p.zoom;
      json3.minZoom = _p.minZoom;
      json3.maxZoom = _p.maxZoom;
      json3.panningEnabled = _p.panningEnabled;
      json3.userPanningEnabled = _p.userPanningEnabled;
      json3.pan = copy(_p.pan);
      json3.boxSelectionEnabled = _p.boxSelectionEnabled;
      json3.renderer = copy(options2.renderer);
      json3.hideEdgesOnViewport = options2.hideEdgesOnViewport;
      json3.textureOnViewport = options2.textureOnViewport;
      json3.wheelSensitivity = options2.wheelSensitivity;
      json3.motionBlur = options2.motionBlur;
      json3.multiClickDebounceTime = options2.multiClickDebounceTime;
      return json3;
    }
  }
});
corefn.$id = corefn.getElementById;
[corefn$9, corefn$8, elesfn, corefn$7, corefn$6, corefn$5, corefn$4, corefn$3, corefn$2, corefn$1, fn2].forEach(function(props) {
  extend$1(corefn, props);
});
var defaults$7 = {
  fit: true,
  // whether to fit the viewport to the graph
  directed: false,
  // whether the tree is directed downwards (or edges can point in any direction if false)
  padding: 30,
  // padding on fit
  circle: false,
  // put depths in concentric circles if true, put depths top down if false
  grid: false,
  // whether to create an even grid into which the DAG is placed (circle:false only)
  spacingFactor: 1.75,
  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  roots: void 0,
  // the roots of the trees
  depthSort: void 0,
  // a sorting function to order nodes at equal depth. e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled,
  animateFilter: function animateFilter(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
var deprecatedOptionDefaults = {
  maximal: false,
  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only); setting acyclic to true sets maximal to true also
  acyclic: false
  // whether the tree is acyclic and thus a node could be shifted (due to the maximal option) multiple times without causing an infinite loop; setting to true sets maximal to true also; if you are uncertain whether a tree is acyclic, set to false to avoid potential infinite loops
};
var getInfo = function getInfo2(ele) {
  return ele.scratch("breadthfirst");
};
var setInfo = function setInfo2(ele, obj) {
  return ele.scratch("breadthfirst", obj);
};
function BreadthFirstLayout(options2) {
  this.options = extend$1({}, defaults$7, deprecatedOptionDefaults, options2);
}
BreadthFirstLayout.prototype.run = function() {
  var params = this.options;
  var options2 = params;
  var cy2 = params.cy;
  var eles = options2.eles;
  var nodes3 = eles.nodes().filter(function(n3) {
    return !n3.isParent();
  });
  var graph2 = eles;
  var directed = options2.directed;
  var maximal = options2.acyclic || options2.maximal || options2.maximalAdjustments > 0;
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  var roots;
  if (elementOrCollection(options2.roots)) {
    roots = options2.roots;
  } else if (array(options2.roots)) {
    var rootsArray = [];
    for (var i2 = 0; i2 < options2.roots.length; i2++) {
      var id2 = options2.roots[i2];
      var ele = cy2.getElementById(id2);
      rootsArray.push(ele);
    }
    roots = cy2.collection(rootsArray);
  } else if (string(options2.roots)) {
    roots = cy2.$(options2.roots);
  } else {
    if (directed) {
      roots = nodes3.roots();
    } else {
      var components2 = eles.components();
      roots = cy2.collection();
      var _loop = function _loop2(_i3) {
        var comp = components2[_i3];
        var maxDegree = comp.maxDegree(false);
        var compRoots = comp.filter(function(ele2) {
          return ele2.degree(false) === maxDegree;
        });
        roots = roots.add(compRoots);
      };
      for (var _i = 0; _i < components2.length; _i++) {
        _loop(_i);
      }
    }
  }
  var depths = [];
  var foundByBfs = {};
  var addToDepth = function addToDepth2(ele2, d2) {
    if (depths[d2] == null) {
      depths[d2] = [];
    }
    var i3 = depths[d2].length;
    depths[d2].push(ele2);
    setInfo(ele2, {
      index: i3,
      depth: d2
    });
  };
  var changeDepth = function changeDepth2(ele2, newDepth) {
    var _getInfo = getInfo(ele2), depth = _getInfo.depth, index = _getInfo.index;
    depths[depth][index] = null;
    addToDepth(ele2, newDepth);
  };
  graph2.bfs({
    roots,
    directed: options2.directed,
    visit: function visit(node, edge, pNode, i3, depth) {
      var ele2 = node[0];
      var id3 = ele2.id();
      addToDepth(ele2, depth);
      foundByBfs[id3] = true;
    }
  });
  var orphanNodes = [];
  for (var _i2 = 0; _i2 < nodes3.length; _i2++) {
    var _ele = nodes3[_i2];
    if (foundByBfs[_ele.id()]) {
      continue;
    } else {
      orphanNodes.push(_ele);
    }
  }
  var assignDepthsAt = function assignDepthsAt2(i3) {
    var eles2 = depths[i3];
    for (var j2 = 0; j2 < eles2.length; j2++) {
      var _ele2 = eles2[j2];
      if (_ele2 == null) {
        eles2.splice(j2, 1);
        j2--;
        continue;
      }
      setInfo(_ele2, {
        depth: i3,
        index: j2
      });
    }
  };
  var assignDepths = function assignDepths2() {
    for (var _i3 = 0; _i3 < depths.length; _i3++) {
      assignDepthsAt(_i3);
    }
  };
  var adjustMaximally = function adjustMaximally2(ele2, shifted2) {
    var eInfo = getInfo(ele2);
    var incomers = ele2.incomers().filter(function(el) {
      return el.isNode() && eles.has(el);
    });
    var maxDepth = -1;
    var id3 = ele2.id();
    for (var k2 = 0; k2 < incomers.length; k2++) {
      var incmr = incomers[k2];
      var iInfo = getInfo(incmr);
      maxDepth = Math.max(maxDepth, iInfo.depth);
    }
    if (eInfo.depth <= maxDepth) {
      if (!options2.acyclic && shifted2[id3]) {
        return null;
      }
      var newDepth = maxDepth + 1;
      changeDepth(ele2, newDepth);
      shifted2[id3] = newDepth;
      return true;
    }
    return false;
  };
  if (directed && maximal) {
    var Q2 = [];
    var shifted = {};
    var enqueue = function enqueue2(n3) {
      return Q2.push(n3);
    };
    var dequeue = function dequeue2() {
      return Q2.shift();
    };
    nodes3.forEach(function(n3) {
      return Q2.push(n3);
    });
    while (Q2.length > 0) {
      var _ele3 = dequeue();
      var didShift = adjustMaximally(_ele3, shifted);
      if (didShift) {
        _ele3.outgoers().filter(function(el) {
          return el.isNode() && eles.has(el);
        }).forEach(enqueue);
      } else if (didShift === null) {
        warn("Detected double maximal shift for node `" + _ele3.id() + "`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.");
        break;
      }
    }
  }
  assignDepths();
  var minDistance = 0;
  if (options2.avoidOverlap) {
    for (var _i4 = 0; _i4 < nodes3.length; _i4++) {
      var n2 = nodes3[_i4];
      var nbb = n2.layoutDimensions(options2);
      var w2 = nbb.w;
      var h2 = nbb.h;
      minDistance = Math.max(minDistance, w2, h2);
    }
  }
  var cachedWeightedPercent = {};
  var getWeightedPercent = function getWeightedPercent2(ele2) {
    if (cachedWeightedPercent[ele2.id()]) {
      return cachedWeightedPercent[ele2.id()];
    }
    var eleDepth = getInfo(ele2).depth;
    var neighbors = ele2.neighborhood();
    var percent = 0;
    var samples = 0;
    for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
      var neighbor = neighbors[_i5];
      if (neighbor.isEdge() || neighbor.isParent() || !nodes3.has(neighbor)) {
        continue;
      }
      var bf = getInfo(neighbor);
      if (bf == null) {
        continue;
      }
      var index = bf.index;
      var depth = bf.depth;
      if (index == null || depth == null) {
        continue;
      }
      var nDepth = depths[depth].length;
      if (depth < eleDepth) {
        percent += index / nDepth;
        samples++;
      }
    }
    samples = Math.max(1, samples);
    percent = percent / samples;
    if (samples === 0) {
      percent = 0;
    }
    cachedWeightedPercent[ele2.id()] = percent;
    return percent;
  };
  var sortFn = function sortFn2(a2, b2) {
    var apct = getWeightedPercent(a2);
    var bpct = getWeightedPercent(b2);
    var diff2 = apct - bpct;
    if (diff2 === 0) {
      return ascending(a2.id(), b2.id());
    } else {
      return diff2;
    }
  };
  if (options2.depthSort !== void 0) {
    sortFn = options2.depthSort;
  }
  for (var _i6 = 0; _i6 < depths.length; _i6++) {
    depths[_i6].sort(sortFn);
    assignDepthsAt(_i6);
  }
  var orphanDepth = [];
  for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
    orphanDepth.push(orphanNodes[_i7]);
  }
  depths.unshift(orphanDepth);
  assignDepths();
  var biggestDepthSize = 0;
  for (var _i8 = 0; _i8 < depths.length; _i8++) {
    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
  }
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.x1 + bb.h / 2
  };
  var maxDepthSize = depths.reduce(function(max5, eles2) {
    return Math.max(max5, eles2.length);
  }, 0);
  var getPosition = function getPosition2(ele2) {
    var _getInfo2 = getInfo(ele2), depth = _getInfo2.depth, index = _getInfo2.index;
    var depthSize = depths[depth].length;
    var distanceX = Math.max(bb.w / ((options2.grid ? maxDepthSize : depthSize) + 1), minDistance);
    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
    radiusStepSize = Math.max(radiusStepSize, minDistance);
    if (!options2.circle) {
      var epos = {
        x: center2.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
        y: (depth + 1) * distanceY
      };
      return epos;
    } else {
      var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
      var theta = 2 * Math.PI / depths[depth].length * index;
      if (depth === 0 && depths[0].length === 1) {
        radius = 1;
      }
      return {
        x: center2.x + radius * Math.cos(theta),
        y: center2.y + radius * Math.sin(theta)
      };
    }
  };
  eles.nodes().layoutPositions(this, options2, getPosition);
  return this;
};
var defaults$6 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox and radius if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  radius: void 0,
  // the radius of the circle
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: void 0,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  sort: void 0,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter2(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform2(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function CircleLayout(options2) {
  this.options = extend$1({}, defaults$6, options2);
}
CircleLayout.prototype.run = function() {
  var params = this.options;
  var options2 = params;
  var cy2 = params.cy;
  var eles = options2.eles;
  var clockwise = options2.counterclockwise !== void 0 ? !options2.counterclockwise : options2.clockwise;
  var nodes3 = eles.nodes().not(":parent");
  if (options2.sort) {
    nodes3 = nodes3.sort(options2.sort);
  }
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var sweep = options2.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / nodes3.length : options2.sweep;
  var dTheta = sweep / Math.max(1, nodes3.length - 1);
  var r2;
  var minDistance = 0;
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var n2 = nodes3[i2];
    var nbb = n2.layoutDimensions(options2);
    var w2 = nbb.w;
    var h2 = nbb.h;
    minDistance = Math.max(minDistance, w2, h2);
  }
  if (number$1(options2.radius)) {
    r2 = options2.radius;
  } else if (nodes3.length <= 1) {
    r2 = 0;
  } else {
    r2 = Math.min(bb.h, bb.w) / 2 - minDistance;
  }
  if (nodes3.length > 1 && options2.avoidOverlap) {
    minDistance *= 1.75;
    var dcos = Math.cos(dTheta) - Math.cos(0);
    var dsin = Math.sin(dTheta) - Math.sin(0);
    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin));
    r2 = Math.max(rMin, r2);
  }
  var getPos = function getPos2(ele, i3) {
    var theta = options2.startAngle + i3 * dTheta * (clockwise ? 1 : -1);
    var rx = r2 * Math.cos(theta);
    var ry = r2 * Math.sin(theta);
    var pos = {
      x: center2.x + rx,
      y: center2.y + ry
    };
    return pos;
  };
  eles.nodes().layoutPositions(this, options2, getPos);
  return this;
};
var defaults$5 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: void 0,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  equidistant: false,
  // whether levels have an equal radial distance betwen them, may cause bounding box overflow
  minNodeSpacing: 10,
  // min spacing between outside of nodes (used for radius adjustment)
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  height: void 0,
  // height of layout area (overrides container height)
  width: void 0,
  // width of layout area (overrides container width)
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  concentric: function concentric(node) {
    return node.degree();
  },
  levelWidth: function levelWidth(nodes3) {
    return nodes3.maxDegree() / 4;
  },
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter3(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform3(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
function ConcentricLayout(options2) {
  this.options = extend$1({}, defaults$5, options2);
}
ConcentricLayout.prototype.run = function() {
  var params = this.options;
  var options2 = params;
  var clockwise = options2.counterclockwise !== void 0 ? !options2.counterclockwise : options2.clockwise;
  var cy2 = params.cy;
  var eles = options2.eles;
  var nodes3 = eles.nodes().not(":parent");
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var nodeValues = [];
  var maxNodeSize = 0;
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var node = nodes3[i2];
    var value = void 0;
    value = options2.concentric(node);
    nodeValues.push({
      value,
      node
    });
    node._private.scratch.concentric = value;
  }
  nodes3.updateStyle();
  for (var _i = 0; _i < nodes3.length; _i++) {
    var _node = nodes3[_i];
    var nbb = _node.layoutDimensions(options2);
    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
  }
  nodeValues.sort(function(a2, b2) {
    return b2.value - a2.value;
  });
  var levelWidth2 = options2.levelWidth(nodes3);
  var levels = [[]];
  var currentLevel = levels[0];
  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
    var val = nodeValues[_i2];
    if (currentLevel.length > 0) {
      var diff2 = Math.abs(currentLevel[0].value - val.value);
      if (diff2 >= levelWidth2) {
        currentLevel = [];
        levels.push(currentLevel);
      }
    }
    currentLevel.push(val);
  }
  var minDist = maxNodeSize + options2.minNodeSpacing;
  if (!options2.avoidOverlap) {
    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
    minDist = Math.min(minDist, rStep);
  }
  var r2 = 0;
  for (var _i3 = 0; _i3 < levels.length; _i3++) {
    var level = levels[_i3];
    var sweep = options2.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / level.length : options2.sweep;
    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);
    if (level.length > 1 && options2.avoidOverlap) {
      var dcos = Math.cos(dTheta) - Math.cos(0);
      var dsin = Math.sin(dTheta) - Math.sin(0);
      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin));
      r2 = Math.max(rMin, r2);
    }
    level.r = r2;
    r2 += minDist;
  }
  if (options2.equidistant) {
    var rDeltaMax = 0;
    var _r = 0;
    for (var _i4 = 0; _i4 < levels.length; _i4++) {
      var _level = levels[_i4];
      var rDelta = _level.r - _r;
      rDeltaMax = Math.max(rDeltaMax, rDelta);
    }
    _r = 0;
    for (var _i5 = 0; _i5 < levels.length; _i5++) {
      var _level2 = levels[_i5];
      if (_i5 === 0) {
        _r = _level2.r;
      }
      _level2.r = _r;
      _r += rDeltaMax;
    }
  }
  var pos = {};
  for (var _i6 = 0; _i6 < levels.length; _i6++) {
    var _level3 = levels[_i6];
    var _dTheta = _level3.dTheta;
    var _r2 = _level3.r;
    for (var j2 = 0; j2 < _level3.length; j2++) {
      var _val = _level3[j2];
      var theta = options2.startAngle + (clockwise ? 1 : -1) * _dTheta * j2;
      var p2 = {
        x: center2.x + _r2 * Math.cos(theta),
        y: center2.y + _r2 * Math.sin(theta)
      };
      pos[_val.node.id()] = p2;
    }
  }
  eles.nodes().layoutPositions(this, options2, function(ele) {
    var id2 = ele.id();
    return pos[id2];
  });
  return this;
};
var DEBUG;
var defaults$4 = {
  // Called on `layoutready`
  ready: function ready2() {
  },
  // Called on `layoutstop`
  stop: function stop3() {
  },
  // Whether to animate while running the layout
  // true : Animate continuously as the layout is running
  // false : Just show the end result
  // 'end' : Animate with the end result, from the initial positions to the end positions
  animate: true,
  // Easing of the animation for animate:'end'
  animationEasing: void 0,
  // The duration of the animation for animate:'end'
  animationDuration: void 0,
  // A function that determines whether the node should be animated
  // All nodes animated by default on animate enabled
  // Non-animated nodes are positioned immediately when the layout starts
  animateFilter: function animateFilter4(node, i2) {
    return true;
  },
  // The layout animates only after this many milliseconds for animate:true
  // (prevents flashing on fast runs)
  animationThreshold: 250,
  // Number of iterations between consecutive screen positions update
  refresh: 20,
  // Whether to fit the network view after when done
  fit: true,
  // Padding on fit
  padding: 30,
  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  boundingBox: void 0,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  nodeDimensionsIncludeLabels: false,
  // Randomize the initial positions of the nodes (true) or use existing positions (false)
  randomize: false,
  // Extra spacing between components in non-compound graphs
  componentSpacing: 40,
  // Node repulsion (non overlapping) multiplier
  nodeRepulsion: function nodeRepulsion(node) {
    return 2048;
  },
  // Node repulsion (overlapping) multiplier
  nodeOverlap: 4,
  // Ideal edge (non nested) length
  idealEdgeLength: function idealEdgeLength(edge) {
    return 32;
  },
  // Divisor to compute edge forces
  edgeElasticity: function edgeElasticity(edge) {
    return 32;
  },
  // Nesting factor (multiplier) to compute ideal edge length for nested edges
  nestingFactor: 1.2,
  // Gravity force (constant)
  gravity: 1,
  // Maximum number of iterations to perform
  numIter: 1e3,
  // Initial temperature (maximum node displacement)
  initialTemp: 1e3,
  // Cooling factor (how the temperature is reduced between consecutive iterations
  coolingFactor: 0.99,
  // Lower temperature threshold (below this point the layout will end)
  minTemp: 1
};
function CoseLayout(options2) {
  this.options = extend$1({}, defaults$4, options2);
  this.options.layout = this;
}
CoseLayout.prototype.run = function() {
  var options2 = this.options;
  var cy2 = options2.cy;
  var layout4 = this;
  layout4.stopped = false;
  if (options2.animate === true || options2.animate === false) {
    layout4.emit({
      type: "layoutstart",
      layout: layout4
    });
  }
  if (true === options2.debug) {
    DEBUG = true;
  } else {
    DEBUG = false;
  }
  var layoutInfo = createLayoutInfo(cy2, layout4, options2);
  if (DEBUG) {
    printLayoutInfo(layoutInfo);
  }
  if (options2.randomize) {
    randomizePositions(layoutInfo);
  }
  var startTime = performanceNow();
  var refresh = function refresh2() {
    refreshPositions(layoutInfo, cy2, options2);
    if (true === options2.fit) {
      cy2.fit(options2.padding);
    }
  };
  var mainLoop = function mainLoop2(i3) {
    if (layout4.stopped || i3 >= options2.numIter) {
      return false;
    }
    step(layoutInfo, options2);
    layoutInfo.temperature = layoutInfo.temperature * options2.coolingFactor;
    if (layoutInfo.temperature < options2.minTemp) {
      return false;
    }
    return true;
  };
  var done = function done2() {
    if (options2.animate === true || options2.animate === false) {
      refresh();
      layout4.one("layoutstop", options2.stop);
      layout4.emit({
        type: "layoutstop",
        layout: layout4
      });
    } else {
      var nodes3 = options2.eles.nodes();
      var getScaledPos = getScaleInBoundsFn(layoutInfo, options2, nodes3);
      nodes3.layoutPositions(layout4, options2, getScaledPos);
    }
  };
  var i2 = 0;
  var loopRet = true;
  if (options2.animate === true) {
    var frame = function frame2() {
      var f2 = 0;
      while (loopRet && f2 < options2.refresh) {
        loopRet = mainLoop(i2);
        i2++;
        f2++;
      }
      if (!loopRet) {
        separateComponents(layoutInfo, options2);
        done();
      } else {
        var now2 = performanceNow();
        if (now2 - startTime >= options2.animationThreshold) {
          refresh();
        }
        requestAnimationFrame$1(frame2);
      }
    };
    frame();
  } else {
    while (loopRet) {
      loopRet = mainLoop(i2);
      i2++;
    }
    separateComponents(layoutInfo, options2);
    done();
  }
  return this;
};
CoseLayout.prototype.stop = function() {
  this.stopped = true;
  if (this.thread) {
    this.thread.stop();
  }
  this.emit("layoutstop");
  return this;
};
CoseLayout.prototype.destroy = function() {
  if (this.thread) {
    this.thread.stop();
  }
  return this;
};
var createLayoutInfo = function createLayoutInfo2(cy2, layout4, options2) {
  var edges3 = options2.eles.edges();
  var nodes3 = options2.eles.nodes();
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  var layoutInfo = {
    isCompound: cy2.hasCompoundNodes(),
    layoutNodes: [],
    idToIndex: {},
    nodeSize: nodes3.size(),
    graphSet: [],
    indexToGraph: [],
    layoutEdges: [],
    edgeSize: edges3.size(),
    temperature: options2.initialTemp,
    clientWidth: bb.w,
    clientHeight: bb.h,
    boundingBox: bb
  };
  var components2 = options2.eles.components();
  var id2cmptId = {};
  for (var i2 = 0; i2 < components2.length; i2++) {
    var component2 = components2[i2];
    for (var j2 = 0; j2 < component2.length; j2++) {
      var node = component2[j2];
      id2cmptId[node.id()] = i2;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = nodes3[i2];
    var nbb = n2.layoutDimensions(options2);
    var tempNode = {};
    tempNode.isLocked = n2.locked();
    tempNode.id = n2.data("id");
    tempNode.parentId = n2.data("parent");
    tempNode.cmptId = id2cmptId[n2.id()];
    tempNode.children = [];
    tempNode.positionX = n2.position("x");
    tempNode.positionY = n2.position("y");
    tempNode.offsetX = 0;
    tempNode.offsetY = 0;
    tempNode.height = nbb.w;
    tempNode.width = nbb.h;
    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
    tempNode.minX = tempNode.positionX - tempNode.width / 2;
    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
    tempNode.minY = tempNode.positionY - tempNode.height / 2;
    tempNode.padLeft = parseFloat(n2.style("padding"));
    tempNode.padRight = parseFloat(n2.style("padding"));
    tempNode.padTop = parseFloat(n2.style("padding"));
    tempNode.padBottom = parseFloat(n2.style("padding"));
    tempNode.nodeRepulsion = fn$6(options2.nodeRepulsion) ? options2.nodeRepulsion(n2) : options2.nodeRepulsion;
    layoutInfo.layoutNodes.push(tempNode);
    layoutInfo.idToIndex[tempNode.id] = i2;
  }
  var queue = [];
  var start = 0;
  var end = -1;
  var tempGraph = [];
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    var p_id = n2.parentId;
    if (null != p_id) {
      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n2.id);
    } else {
      queue[++end] = n2.id;
      tempGraph.push(n2.id);
    }
  }
  layoutInfo.graphSet.push(tempGraph);
  while (start <= end) {
    var node_id = queue[start++];
    var node_ix = layoutInfo.idToIndex[node_id];
    var node = layoutInfo.layoutNodes[node_ix];
    var children2 = node.children;
    if (children2.length > 0) {
      layoutInfo.graphSet.push(children2);
      for (var i2 = 0; i2 < children2.length; i2++) {
        queue[++end] = children2[i2];
      }
    }
  }
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph2 = layoutInfo.graphSet[i2];
    for (var j2 = 0; j2 < graph2.length; j2++) {
      var index = layoutInfo.idToIndex[graph2[j2]];
      layoutInfo.indexToGraph[index] = i2;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
    var e2 = edges3[i2];
    var tempEdge = {};
    tempEdge.id = e2.data("id");
    tempEdge.sourceId = e2.data("source");
    tempEdge.targetId = e2.data("target");
    var idealLength = fn$6(options2.idealEdgeLength) ? options2.idealEdgeLength(e2) : options2.idealEdgeLength;
    var elasticity = fn$6(options2.edgeElasticity) ? options2.edgeElasticity(e2) : options2.edgeElasticity;
    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
    var targetGraph = layoutInfo.indexToGraph[targetIx];
    if (sourceGraph != targetGraph) {
      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);
      var lcaGraph = layoutInfo.graphSet[lca];
      var depth = 0;
      var tempNode = layoutInfo.layoutNodes[sourceIx];
      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      }
      tempNode = layoutInfo.layoutNodes[targetIx];
      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      }
      idealLength *= depth * options2.nestingFactor;
    }
    tempEdge.idealLength = idealLength;
    tempEdge.elasticity = elasticity;
    layoutInfo.layoutEdges.push(tempEdge);
  }
  return layoutInfo;
};
var findLCA = function findLCA2(node1, node2, layoutInfo) {
  var res = findLCA_aux(node1, node2, 0, layoutInfo);
  if (2 > res.count) {
    return 0;
  } else {
    return res.graph;
  }
};
var findLCA_aux = function findLCA_aux2(node1, node2, graphIx, layoutInfo) {
  var graph2 = layoutInfo.graphSet[graphIx];
  if (-1 < graph2.indexOf(node1) && -1 < graph2.indexOf(node2)) {
    return {
      count: 2,
      graph: graphIx
    };
  }
  var c2 = 0;
  for (var i2 = 0; i2 < graph2.length; i2++) {
    var nodeId = graph2[i2];
    var nodeIx = layoutInfo.idToIndex[nodeId];
    var children2 = layoutInfo.layoutNodes[nodeIx].children;
    if (0 === children2.length) {
      continue;
    }
    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children2[0]]];
    var result = findLCA_aux2(node1, node2, childGraphIx, layoutInfo);
    if (0 === result.count) {
      continue;
    } else if (1 === result.count) {
      c2++;
      if (2 === c2) {
        break;
      }
    } else {
      return result;
    }
  }
  return {
    count: c2,
    graph: graphIx
  };
};
var printLayoutInfo;
var randomizePositions = function randomizePositions2(layoutInfo, cy2) {
  var width2 = layoutInfo.clientWidth;
  var height2 = layoutInfo.clientHeight;
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 === n2.children.length && !n2.isLocked) {
      n2.positionX = Math.random() * width2;
      n2.positionY = Math.random() * height2;
    }
  }
};
var getScaleInBoundsFn = function getScaleInBoundsFn2(layoutInfo, options2, nodes3) {
  var bb = layoutInfo.boundingBox;
  var coseBB = {
    x1: Infinity,
    x2: -Infinity,
    y1: Infinity,
    y2: -Infinity
  };
  if (options2.boundingBox) {
    nodes3.forEach(function(node) {
      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data("id")]];
      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
    });
    coseBB.w = coseBB.x2 - coseBB.x1;
    coseBB.h = coseBB.y2 - coseBB.y1;
  }
  return function(ele, i2) {
    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data("id")]];
    if (options2.boundingBox) {
      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
      return {
        x: bb.x1 + pctX * bb.w,
        y: bb.y1 + pctY * bb.h
      };
    } else {
      return {
        x: lnode.positionX,
        y: lnode.positionY
      };
    }
  };
};
var refreshPositions = function refreshPositions2(layoutInfo, cy2, options2) {
  var layout4 = options2.layout;
  var nodes3 = options2.eles.nodes();
  var getScaledPos = getScaleInBoundsFn(layoutInfo, options2, nodes3);
  nodes3.positions(getScaledPos);
  if (true !== layoutInfo.ready) {
    layoutInfo.ready = true;
    layout4.one("layoutready", options2.ready);
    layout4.emit({
      type: "layoutready",
      layout: this
    });
  }
};
var step = function step2(layoutInfo, options2, _step) {
  calculateNodeForces(layoutInfo, options2);
  calculateEdgeForces(layoutInfo);
  calculateGravityForces(layoutInfo, options2);
  propagateForces(layoutInfo);
  updatePositions(layoutInfo);
};
var calculateNodeForces = function calculateNodeForces2(layoutInfo, options2) {
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph2 = layoutInfo.graphSet[i2];
    var numNodes = graph2.length;
    for (var j2 = 0; j2 < numNodes; j2++) {
      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph2[j2]]];
      for (var k2 = j2 + 1; k2 < numNodes; k2++) {
        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph2[k2]]];
        nodeRepulsion2(node1, node2, layoutInfo, options2);
      }
    }
  }
};
var randomDistance = function randomDistance2(max5) {
  return -max5 + 2 * max5 * Math.random();
};
var nodeRepulsion2 = function nodeRepulsion3(node1, node2, layoutInfo, options2) {
  var cmptId1 = node1.cmptId;
  var cmptId2 = node2.cmptId;
  if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
    return;
  }
  var directionX = node2.positionX - node1.positionX;
  var directionY = node2.positionY - node1.positionY;
  var maxRandDist = 1;
  if (0 === directionX && 0 === directionY) {
    directionX = randomDistance(maxRandDist);
    directionY = randomDistance(maxRandDist);
  }
  var overlap = nodesOverlap(node1, node2, directionX, directionY);
  if (overlap > 0) {
    var force = options2.nodeOverlap * overlap;
    var distance = Math.sqrt(directionX * directionX + directionY * directionY);
    var forceX = force * directionX / distance;
    var forceY = force * directionY / distance;
  } else {
    var point1 = findClippingPoint(node1, directionX, directionY);
    var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);
    var distanceX = point2.x - point1.x;
    var distanceY = point2.y - point1.y;
    var distanceSqr = distanceX * distanceX + distanceY * distanceY;
    var distance = Math.sqrt(distanceSqr);
    var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
    var forceX = force * distanceX / distance;
    var forceY = force * distanceY / distance;
  }
  if (!node1.isLocked) {
    node1.offsetX -= forceX;
    node1.offsetY -= forceY;
  }
  if (!node2.isLocked) {
    node2.offsetX += forceX;
    node2.offsetY += forceY;
  }
  return;
};
var nodesOverlap = function nodesOverlap2(node1, node2, dX, dY) {
  if (dX > 0) {
    var overlapX = node1.maxX - node2.minX;
  } else {
    var overlapX = node2.maxX - node1.minX;
  }
  if (dY > 0) {
    var overlapY = node1.maxY - node2.minY;
  } else {
    var overlapY = node2.maxY - node1.minY;
  }
  if (overlapX >= 0 && overlapY >= 0) {
    return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
  } else {
    return 0;
  }
};
var findClippingPoint = function findClippingPoint2(node, dX, dY) {
  var X2 = node.positionX;
  var Y2 = node.positionY;
  var H2 = node.height || 1;
  var W2 = node.width || 1;
  var dirSlope = dY / dX;
  var nodeSlope = H2 / W2;
  var res = {};
  if (0 === dX && 0 < dY) {
    res.x = X2;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 === dX && 0 > dY) {
    res.x = X2;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
    res.x = X2 + W2 / 2;
    res.y = Y2 + W2 * dY / 2 / dX;
    return res;
  }
  if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
    res.x = X2 - W2 / 2;
    res.y = Y2 - W2 * dY / 2 / dX;
    return res;
  }
  if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
    res.x = X2 + H2 * dX / 2 / dY;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
    res.x = X2 - H2 * dX / 2 / dY;
    res.y = Y2 - H2 / 2;
    return res;
  }
  return res;
};
var calculateEdgeForces = function calculateEdgeForces2(layoutInfo, options2) {
  for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
    var edge = layoutInfo.layoutEdges[i2];
    var sourceIx = layoutInfo.idToIndex[edge.sourceId];
    var source = layoutInfo.layoutNodes[sourceIx];
    var targetIx = layoutInfo.idToIndex[edge.targetId];
    var target = layoutInfo.layoutNodes[targetIx];
    var directionX = target.positionX - source.positionX;
    var directionY = target.positionY - source.positionY;
    if (0 === directionX && 0 === directionY) {
      continue;
    }
    var point1 = findClippingPoint(source, directionX, directionY);
    var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
    var lx = point2.x - point1.x;
    var ly = point2.y - point1.y;
    var l2 = Math.sqrt(lx * lx + ly * ly);
    var force = Math.pow(edge.idealLength - l2, 2) / edge.elasticity;
    if (0 !== l2) {
      var forceX = force * lx / l2;
      var forceY = force * ly / l2;
    } else {
      var forceX = 0;
      var forceY = 0;
    }
    if (!source.isLocked) {
      source.offsetX += forceX;
      source.offsetY += forceY;
    }
    if (!target.isLocked) {
      target.offsetX -= forceX;
      target.offsetY -= forceY;
    }
  }
};
var calculateGravityForces = function calculateGravityForces2(layoutInfo, options2) {
  if (options2.gravity === 0) {
    return;
  }
  var distThreshold = 1;
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph2 = layoutInfo.graphSet[i2];
    var numNodes = graph2.length;
    if (0 === i2) {
      var centerX = layoutInfo.clientHeight / 2;
      var centerY = layoutInfo.clientWidth / 2;
    } else {
      var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph2[0]]];
      var parent4 = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
      var centerX = parent4.positionX;
      var centerY = parent4.positionY;
    }
    for (var j2 = 0; j2 < numNodes; j2++) {
      var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph2[j2]]];
      if (node.isLocked) {
        continue;
      }
      var dx = centerX - node.positionX;
      var dy = centerY - node.positionY;
      var d2 = Math.sqrt(dx * dx + dy * dy);
      if (d2 > distThreshold) {
        var fx = options2.gravity * dx / d2;
        var fy = options2.gravity * dy / d2;
        node.offsetX += fx;
        node.offsetY += fy;
      }
    }
  }
};
var propagateForces = function propagateForces2(layoutInfo, options2) {
  var queue = [];
  var start = 0;
  var end = -1;
  queue.push.apply(queue, layoutInfo.graphSet[0]);
  end += layoutInfo.graphSet[0].length;
  while (start <= end) {
    var nodeId = queue[start++];
    var nodeIndex = layoutInfo.idToIndex[nodeId];
    var node = layoutInfo.layoutNodes[nodeIndex];
    var children2 = node.children;
    if (0 < children2.length && !node.isLocked) {
      var offX = node.offsetX;
      var offY = node.offsetY;
      for (var i2 = 0; i2 < children2.length; i2++) {
        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children2[i2]]];
        childNode.offsetX += offX;
        childNode.offsetY += offY;
        queue[++end] = children2[i2];
      }
      node.offsetX = 0;
      node.offsetY = 0;
    }
  }
};
var updatePositions = function updatePositions2(layoutInfo, options2) {
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length) {
      n2.maxX = void 0;
      n2.minX = void 0;
      n2.maxY = void 0;
      n2.minY = void 0;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length || n2.isLocked) {
      continue;
    }
    var tempForce = limitForce(n2.offsetX, n2.offsetY, layoutInfo.temperature);
    n2.positionX += tempForce.x;
    n2.positionY += tempForce.y;
    n2.offsetX = 0;
    n2.offsetY = 0;
    n2.minX = n2.positionX - n2.width;
    n2.maxX = n2.positionX + n2.width;
    n2.minY = n2.positionY - n2.height;
    n2.maxY = n2.positionY + n2.height;
    updateAncestryBoundaries(n2, layoutInfo);
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length && !n2.isLocked) {
      n2.positionX = (n2.maxX + n2.minX) / 2;
      n2.positionY = (n2.maxY + n2.minY) / 2;
      n2.width = n2.maxX - n2.minX;
      n2.height = n2.maxY - n2.minY;
    }
  }
};
var limitForce = function limitForce2(forceX, forceY, max5) {
  var force = Math.sqrt(forceX * forceX + forceY * forceY);
  if (force > max5) {
    var res = {
      x: max5 * forceX / force,
      y: max5 * forceY / force
    };
  } else {
    var res = {
      x: forceX,
      y: forceY
    };
  }
  return res;
};
var updateAncestryBoundaries = function updateAncestryBoundaries2(node, layoutInfo) {
  var parentId = node.parentId;
  if (null == parentId) {
    return;
  }
  var p2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
  var flag = false;
  if (null == p2.maxX || node.maxX + p2.padRight > p2.maxX) {
    p2.maxX = node.maxX + p2.padRight;
    flag = true;
  }
  if (null == p2.minX || node.minX - p2.padLeft < p2.minX) {
    p2.minX = node.minX - p2.padLeft;
    flag = true;
  }
  if (null == p2.maxY || node.maxY + p2.padBottom > p2.maxY) {
    p2.maxY = node.maxY + p2.padBottom;
    flag = true;
  }
  if (null == p2.minY || node.minY - p2.padTop < p2.minY) {
    p2.minY = node.minY - p2.padTop;
    flag = true;
  }
  if (flag) {
    return updateAncestryBoundaries2(p2, layoutInfo);
  }
  return;
};
var separateComponents = function separateComponents2(layoutInfo, options2) {
  var nodes3 = layoutInfo.layoutNodes;
  var components2 = [];
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var node = nodes3[i2];
    var cid = node.cmptId;
    var component2 = components2[cid] = components2[cid] || [];
    component2.push(node);
  }
  var totalA = 0;
  for (var i2 = 0; i2 < components2.length; i2++) {
    var c2 = components2[i2];
    if (!c2) {
      continue;
    }
    c2.x1 = Infinity;
    c2.x2 = -Infinity;
    c2.y1 = Infinity;
    c2.y2 = -Infinity;
    for (var j2 = 0; j2 < c2.length; j2++) {
      var n2 = c2[j2];
      c2.x1 = Math.min(c2.x1, n2.positionX - n2.width / 2);
      c2.x2 = Math.max(c2.x2, n2.positionX + n2.width / 2);
      c2.y1 = Math.min(c2.y1, n2.positionY - n2.height / 2);
      c2.y2 = Math.max(c2.y2, n2.positionY + n2.height / 2);
    }
    c2.w = c2.x2 - c2.x1;
    c2.h = c2.y2 - c2.y1;
    totalA += c2.w * c2.h;
  }
  components2.sort(function(c1, c22) {
    return c22.w * c22.h - c1.w * c1.h;
  });
  var x2 = 0;
  var y2 = 0;
  var usedW = 0;
  var rowH = 0;
  var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;
  for (var i2 = 0; i2 < components2.length; i2++) {
    var c2 = components2[i2];
    if (!c2) {
      continue;
    }
    for (var j2 = 0; j2 < c2.length; j2++) {
      var n2 = c2[j2];
      if (!n2.isLocked) {
        n2.positionX += x2 - c2.x1;
        n2.positionY += y2 - c2.y1;
      }
    }
    x2 += c2.w + options2.componentSpacing;
    usedW += c2.w + options2.componentSpacing;
    rowH = Math.max(rowH, c2.h);
    if (usedW > maxRowW) {
      y2 += rowH + options2.componentSpacing;
      x2 = 0;
      usedW = 0;
      rowH = 0;
    }
  }
};
var defaults$3 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // padding used on fit
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  avoidOverlapPadding: 10,
  // extra spacing around nodes when avoidOverlap: true
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  condense: false,
  // uses all available space on false, uses minimal space on true
  rows: void 0,
  // force num of rows in the grid
  cols: void 0,
  // force num of columns in the grid
  position: function position2(node) {
  },
  // returns { row, col } for element
  sort: void 0,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter5(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform4(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function GridLayout(options2) {
  this.options = extend$1({}, defaults$3, options2);
}
GridLayout.prototype.run = function() {
  var params = this.options;
  var options2 = params;
  var cy2 = params.cy;
  var eles = options2.eles;
  var nodes3 = eles.nodes().not(":parent");
  if (options2.sort) {
    nodes3 = nodes3.sort(options2.sort);
  }
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  if (bb.h === 0 || bb.w === 0) {
    eles.nodes().layoutPositions(this, options2, function(ele) {
      return {
        x: bb.x1,
        y: bb.y1
      };
    });
  } else {
    var cells = nodes3.size();
    var splits = Math.sqrt(cells * bb.h / bb.w);
    var rows = Math.round(splits);
    var cols = Math.round(bb.w / bb.h * splits);
    var small = function small2(val) {
      if (val == null) {
        return Math.min(rows, cols);
      } else {
        var min4 = Math.min(rows, cols);
        if (min4 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };
    var large = function large2(val) {
      if (val == null) {
        return Math.max(rows, cols);
      } else {
        var max5 = Math.max(rows, cols);
        if (max5 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };
    var oRows = options2.rows;
    var oCols = options2.cols != null ? options2.cols : options2.columns;
    if (oRows != null && oCols != null) {
      rows = oRows;
      cols = oCols;
    } else if (oRows != null && oCols == null) {
      rows = oRows;
      cols = Math.ceil(cells / rows);
    } else if (oRows == null && oCols != null) {
      cols = oCols;
      rows = Math.ceil(cells / cols);
    } else if (cols * rows > cells) {
      var sm = small();
      var lg = large();
      if ((sm - 1) * lg >= cells) {
        small(sm - 1);
      } else if ((lg - 1) * sm >= cells) {
        large(lg - 1);
      }
    } else {
      while (cols * rows < cells) {
        var _sm = small();
        var _lg = large();
        if ((_lg + 1) * _sm >= cells) {
          large(_lg + 1);
        } else {
          small(_sm + 1);
        }
      }
    }
    var cellWidth = bb.w / cols;
    var cellHeight = bb.h / rows;
    if (options2.condense) {
      cellWidth = 0;
      cellHeight = 0;
    }
    if (options2.avoidOverlap) {
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        var node = nodes3[i2];
        var pos = node._private.position;
        if (pos.x == null || pos.y == null) {
          pos.x = 0;
          pos.y = 0;
        }
        var nbb = node.layoutDimensions(options2);
        var p2 = options2.avoidOverlapPadding;
        var w2 = nbb.w + p2;
        var h2 = nbb.h + p2;
        cellWidth = Math.max(cellWidth, w2);
        cellHeight = Math.max(cellHeight, h2);
      }
    }
    var cellUsed = {};
    var used = function used2(row2, col2) {
      return cellUsed["c-" + row2 + "-" + col2] ? true : false;
    };
    var use = function use2(row2, col2) {
      cellUsed["c-" + row2 + "-" + col2] = true;
    };
    var row = 0;
    var col = 0;
    var moveToNextCell = function moveToNextCell2() {
      col++;
      if (col >= cols) {
        col = 0;
        row++;
      }
    };
    var id2manPos = {};
    for (var _i = 0; _i < nodes3.length; _i++) {
      var _node = nodes3[_i];
      var rcPos = options2.position(_node);
      if (rcPos && (rcPos.row !== void 0 || rcPos.col !== void 0)) {
        var _pos = {
          row: rcPos.row,
          col: rcPos.col
        };
        if (_pos.col === void 0) {
          _pos.col = 0;
          while (used(_pos.row, _pos.col)) {
            _pos.col++;
          }
        } else if (_pos.row === void 0) {
          _pos.row = 0;
          while (used(_pos.row, _pos.col)) {
            _pos.row++;
          }
        }
        id2manPos[_node.id()] = _pos;
        use(_pos.row, _pos.col);
      }
    }
    var getPos = function getPos2(element3, i3) {
      var x2, y2;
      if (element3.locked() || element3.isParent()) {
        return false;
      }
      var rcPos2 = id2manPos[element3.id()];
      if (rcPos2) {
        x2 = rcPos2.col * cellWidth + cellWidth / 2 + bb.x1;
        y2 = rcPos2.row * cellHeight + cellHeight / 2 + bb.y1;
      } else {
        while (used(row, col)) {
          moveToNextCell();
        }
        x2 = col * cellWidth + cellWidth / 2 + bb.x1;
        y2 = row * cellHeight + cellHeight / 2 + bb.y1;
        use(row, col);
        moveToNextCell();
      }
      return {
        x: x2,
        y: y2
      };
    };
    nodes3.layoutPositions(this, options2, getPos);
  }
  return this;
};
var defaults$2 = {
  ready: function ready3() {
  },
  // on layoutready
  stop: function stop4() {
  }
  // on layoutstop
};
function NullLayout(options2) {
  this.options = extend$1({}, defaults$2, options2);
}
NullLayout.prototype.run = function() {
  var options2 = this.options;
  var eles = options2.eles;
  var layout4 = this;
  options2.cy;
  layout4.emit("layoutstart");
  eles.nodes().positions(function() {
    return {
      x: 0,
      y: 0
    };
  });
  layout4.one("layoutready", options2.ready);
  layout4.emit("layoutready");
  layout4.one("layoutstop", options2.stop);
  layout4.emit("layoutstop");
  return this;
};
NullLayout.prototype.stop = function() {
  return this;
};
var defaults$1 = {
  positions: void 0,
  // map of (node id) => (position obj); or function(node){ return somPos; }
  zoom: void 0,
  // the zoom level to set (prob want fit = false if set)
  pan: void 0,
  // the pan level to set (prob want fit = false if set)
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // padding on fit
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter6(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform5(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
function PresetLayout(options2) {
  this.options = extend$1({}, defaults$1, options2);
}
PresetLayout.prototype.run = function() {
  var options2 = this.options;
  var eles = options2.eles;
  var nodes3 = eles.nodes();
  var posIsFn = fn$6(options2.positions);
  function getPosition(node) {
    if (options2.positions == null) {
      return copyPosition(node.position());
    }
    if (posIsFn) {
      return options2.positions(node);
    }
    var pos = options2.positions[node._private.data.id];
    if (pos == null) {
      return null;
    }
    return pos;
  }
  nodes3.layoutPositions(this, options2, function(node, i2) {
    var position3 = getPosition(node);
    if (node.locked() || position3 == null) {
      return false;
    }
    return position3;
  });
  return this;
};
var defaults2 = {
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // fit padding
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter7(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform6(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function RandomLayout(options2) {
  this.options = extend$1({}, defaults2, options2);
}
RandomLayout.prototype.run = function() {
  var options2 = this.options;
  var cy2 = options2.cy;
  var eles = options2.eles;
  var bb = makeBoundingBox(options2.boundingBox ? options2.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy2.width(),
    h: cy2.height()
  });
  var getPos = function getPos2(node, i2) {
    return {
      x: bb.x1 + Math.round(Math.random() * bb.w),
      y: bb.y1 + Math.round(Math.random() * bb.h)
    };
  };
  eles.nodes().layoutPositions(this, options2, getPos);
  return this;
};
var layout$1 = [{
  name: "breadthfirst",
  impl: BreadthFirstLayout
}, {
  name: "circle",
  impl: CircleLayout
}, {
  name: "concentric",
  impl: ConcentricLayout
}, {
  name: "cose",
  impl: CoseLayout
}, {
  name: "grid",
  impl: GridLayout
}, {
  name: "null",
  impl: NullLayout
}, {
  name: "preset",
  impl: PresetLayout
}, {
  name: "random",
  impl: RandomLayout
}];
function NullRenderer(options2) {
  this.options = options2;
  this.notifications = 0;
}
var noop2 = function noop3() {
};
var throwImgErr = function throwImgErr2() {
  throw new Error("A headless instance can not render images");
};
NullRenderer.prototype = {
  recalculateRenderedStyle: noop2,
  notify: function notify2() {
    this.notifications++;
  },
  init: noop2,
  isHeadless: function isHeadless() {
    return true;
  },
  png: throwImgErr,
  jpg: throwImgErr
};
var BRp$f = {};
BRp$f.arrowShapeWidth = 0.3;
BRp$f.registerArrowShapes = function() {
  var arrowShapes = this.arrowShapes = {};
  var renderer3 = this;
  var bbCollide = function bbCollide2(x2, y2, size3, angle, translation, edgeWidth, padding) {
    var x1 = translation.x - size3 / 2 - padding;
    var x22 = translation.x + size3 / 2 + padding;
    var y1 = translation.y - size3 / 2 - padding;
    var y22 = translation.y + size3 / 2 + padding;
    var inside = x1 <= x2 && x2 <= x22 && y1 <= y2 && y2 <= y22;
    return inside;
  };
  var transform7 = function transform8(x2, y2, size3, angle, translation) {
    var xRotated = x2 * Math.cos(angle) - y2 * Math.sin(angle);
    var yRotated = x2 * Math.sin(angle) + y2 * Math.cos(angle);
    var xScaled = xRotated * size3;
    var yScaled = yRotated * size3;
    var xTranslated = xScaled + translation.x;
    var yTranslated = yScaled + translation.y;
    return {
      x: xTranslated,
      y: yTranslated
    };
  };
  var transformPoints = function transformPoints2(pts2, size3, angle, translation) {
    var retPts = [];
    for (var i2 = 0; i2 < pts2.length; i2 += 2) {
      var x2 = pts2[i2];
      var y2 = pts2[i2 + 1];
      retPts.push(transform7(x2, y2, size3, angle, translation));
    }
    return retPts;
  };
  var pointsToArr = function pointsToArr2(pts2) {
    var ret = [];
    for (var i2 = 0; i2 < pts2.length; i2++) {
      var p2 = pts2[i2];
      ret.push(p2.x, p2.y);
    }
    return ret;
  };
  var standardGap = function standardGap2(edge) {
    return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").pfValue * 2;
  };
  var defineArrowShape = function defineArrowShape2(name2, defn) {
    if (string(defn)) {
      defn = arrowShapes[defn];
    }
    arrowShapes[name2] = extend$1({
      name: name2,
      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
      collide: function collide(x2, y2, size3, angle, translation, padding) {
        var points = pointsToArr(transformPoints(this.points, size3 + 2 * padding, angle, translation));
        var inside = pointInsidePolygonPoints(x2, y2, points);
        return inside;
      },
      roughCollide: bbCollide,
      draw: function draw(context, size3, angle, translation) {
        var points = transformPoints(this.points, size3, angle, translation);
        renderer3.arrowShapeImpl("polygon")(context, points);
      },
      spacing: function spacing(edge) {
        return 0;
      },
      gap: standardGap
    }, defn);
  };
  defineArrowShape("none", {
    collide: falsify,
    roughCollide: falsify,
    draw: noop$1,
    spacing: zeroify,
    gap: zeroify
  });
  defineArrowShape("triangle", {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
  });
  defineArrowShape("arrow", "triangle");
  defineArrowShape("triangle-backcurve", {
    points: arrowShapes["triangle"].points,
    controlPoint: [0, -0.15],
    roughCollide: bbCollide,
    draw: function draw(context, size3, angle, translation, edgeWidth) {
      var ptsTrans = transformPoints(this.points, size3, angle, translation);
      var ctrlPt = this.controlPoint;
      var ctrlPtTrans = transform7(ctrlPt[0], ctrlPt[1], size3, angle, translation);
      renderer3.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
    },
    gap: function gap(edge) {
      return standardGap(edge) * 0.8;
    }
  });
  defineArrowShape("triangle-tee", {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
    collide: function collide(x2, y2, size3, angle, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints(this.points, size3 + 2 * padding, angle, translation));
      var teePts = pointsToArr(transformPoints(this.pointsTee, size3 + 2 * padding, angle, translation));
      var inside = pointInsidePolygonPoints(x2, y2, triPts) || pointInsidePolygonPoints(x2, y2, teePts);
      return inside;
    },
    draw: function draw(context, size3, angle, translation, edgeWidth) {
      var triPts = transformPoints(this.points, size3, angle, translation);
      var teePts = transformPoints(this.pointsTee, size3, angle, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, teePts);
    }
  });
  defineArrowShape("circle-triangle", {
    radius: 0.15,
    pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
    collide: function collide(x2, y2, size3, angle, translation, edgeWidth, padding) {
      var t3 = translation;
      var circleInside = Math.pow(t3.x - x2, 2) + Math.pow(t3.y - y2, 2) <= Math.pow((size3 + 2 * padding) * this.radius, 2);
      var triPts = pointsToArr(transformPoints(this.points, size3 + 2 * padding, angle, translation));
      return pointInsidePolygonPoints(x2, y2, triPts) || circleInside;
    },
    draw: function draw(context, size3, angle, translation, edgeWidth) {
      var triPts = transformPoints(this.pointsTr, size3, angle, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size3);
    },
    spacing: function spacing(edge) {
      return renderer3.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
    }
  });
  defineArrowShape("triangle-cross", {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    baseCrossLinePts: [
      -0.15,
      -0.4,
      // first half of the rectangle
      -0.15,
      -0.4,
      0.15,
      -0.4,
      // second half of the rectangle
      0.15,
      -0.4
    ],
    crossLinePts: function crossLinePts(size3, edgeWidth) {
      var p2 = this.baseCrossLinePts.slice();
      var shiftFactor = edgeWidth / size3;
      var y0 = 3;
      var y1 = 5;
      p2[y0] = p2[y0] - shiftFactor;
      p2[y1] = p2[y1] - shiftFactor;
      return p2;
    },
    collide: function collide(x2, y2, size3, angle, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints(this.points, size3 + 2 * padding, angle, translation));
      var teePts = pointsToArr(transformPoints(this.crossLinePts(size3, edgeWidth), size3 + 2 * padding, angle, translation));
      var inside = pointInsidePolygonPoints(x2, y2, triPts) || pointInsidePolygonPoints(x2, y2, teePts);
      return inside;
    },
    draw: function draw(context, size3, angle, translation, edgeWidth) {
      var triPts = transformPoints(this.points, size3, angle, translation);
      var crossLinePts = transformPoints(this.crossLinePts(size3, edgeWidth), size3, angle, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
    }
  });
  defineArrowShape("vee", {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
    gap: function gap(edge) {
      return standardGap(edge) * 0.525;
    }
  });
  defineArrowShape("circle", {
    radius: 0.15,
    collide: function collide(x2, y2, size3, angle, translation, edgeWidth, padding) {
      var t3 = translation;
      var inside = Math.pow(t3.x - x2, 2) + Math.pow(t3.y - y2, 2) <= Math.pow((size3 + 2 * padding) * this.radius, 2);
      return inside;
    },
    draw: function draw(context, size3, angle, translation, edgeWidth) {
      renderer3.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size3);
    },
    spacing: function spacing(edge) {
      return renderer3.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
    }
  });
  defineArrowShape("tee", {
    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
    spacing: function spacing(edge) {
      return 1;
    },
    gap: function gap(edge) {
      return 1;
    }
  });
  defineArrowShape("square", {
    points: [-0.15, 0, 0.15, 0, 0.15, -0.3, -0.15, -0.3]
  });
  defineArrowShape("diamond", {
    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
    gap: function gap(edge) {
      return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
    }
  });
  defineArrowShape("chevron", {
    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
    gap: function gap(edge) {
      return 0.95 * edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
    }
  });
};
var BRp$e = {};
BRp$e.projectIntoViewport = function(clientX, clientY) {
  var cy2 = this.cy;
  var offsets = this.findContainerClientCoords();
  var offsetLeft = offsets[0];
  var offsetTop = offsets[1];
  var scale = offsets[4];
  var pan2 = cy2.pan();
  var zoom2 = cy2.zoom();
  var x2 = ((clientX - offsetLeft) / scale - pan2.x) / zoom2;
  var y2 = ((clientY - offsetTop) / scale - pan2.y) / zoom2;
  return [x2, y2];
};
BRp$e.findContainerClientCoords = function() {
  if (this.containerBB) {
    return this.containerBB;
  }
  var container2 = this.container;
  var rect = container2.getBoundingClientRect();
  var style3 = window$1.getComputedStyle(container2);
  var styleValue = function styleValue2(name2) {
    return parseFloat(style3.getPropertyValue(name2));
  };
  var padding = {
    left: styleValue("padding-left"),
    right: styleValue("padding-right"),
    top: styleValue("padding-top"),
    bottom: styleValue("padding-bottom")
  };
  var border = {
    left: styleValue("border-left-width"),
    right: styleValue("border-right-width"),
    top: styleValue("border-top-width"),
    bottom: styleValue("border-bottom-width")
  };
  var clientWidth = container2.clientWidth;
  var clientHeight = container2.clientHeight;
  var paddingHor = padding.left + padding.right;
  var paddingVer = padding.top + padding.bottom;
  var borderHor = border.left + border.right;
  var scale = rect.width / (clientWidth + borderHor);
  var unscaledW = clientWidth - paddingHor;
  var unscaledH = clientHeight - paddingVer;
  var left = rect.left + padding.left + border.left;
  var top = rect.top + padding.top + border.top;
  return this.containerBB = [left, top, unscaledW, unscaledH, scale];
};
BRp$e.invalidateContainerClientCoordsCache = function() {
  this.containerBB = null;
};
BRp$e.findNearestElement = function(x2, y2, interactiveElementsOnly, isTouch) {
  return this.findNearestElements(x2, y2, interactiveElementsOnly, isTouch)[0];
};
BRp$e.findNearestElements = function(x2, y2, interactiveElementsOnly, isTouch) {
  var self2 = this;
  var r2 = this;
  var eles = r2.getCachedZSortedEles();
  var near = [];
  var zoom2 = r2.cy.zoom();
  var hasCompounds = r2.cy.hasCompoundNodes();
  var edgeThreshold = (isTouch ? 24 : 8) / zoom2;
  var nodeThreshold = (isTouch ? 8 : 2) / zoom2;
  var labelThreshold = (isTouch ? 8 : 2) / zoom2;
  var minSqDist = Infinity;
  var nearEdge;
  var nearNode;
  if (interactiveElementsOnly) {
    eles = eles.interactive;
  }
  function addEle(ele2, sqDist) {
    if (ele2.isNode()) {
      if (nearNode) {
        return;
      } else {
        nearNode = ele2;
        near.push(ele2);
      }
    }
    if (ele2.isEdge() && (sqDist == null || sqDist < minSqDist)) {
      if (nearEdge) {
        if (nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value && nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value) {
          for (var i3 = 0; i3 < near.length; i3++) {
            if (near[i3].isEdge()) {
              near[i3] = ele2;
              nearEdge = ele2;
              minSqDist = sqDist != null ? sqDist : minSqDist;
              break;
            }
          }
        }
      } else {
        near.push(ele2);
        nearEdge = ele2;
        minSqDist = sqDist != null ? sqDist : minSqDist;
      }
    }
  }
  function checkNode(node) {
    var width2 = node.outerWidth() + 2 * nodeThreshold;
    var height2 = node.outerHeight() + 2 * nodeThreshold;
    var hw = width2 / 2;
    var hh = height2 / 2;
    var pos = node.position();
    if (pos.x - hw <= x2 && x2 <= pos.x + hw && pos.y - hh <= y2 && y2 <= pos.y + hh) {
      var shape = r2.nodeShapes[self2.getNodeShape(node)];
      if (shape.checkPoint(x2, y2, 0, width2, height2, pos.x, pos.y)) {
        addEle(node, 0);
        return true;
      }
    }
  }
  function checkEdge(edge) {
    var _p = edge._private;
    var rs = _p.rscratch;
    var styleWidth = edge.pstyle("width").pfValue;
    var scale = edge.pstyle("arrow-scale").value;
    var width2 = styleWidth / 2 + edgeThreshold;
    var widthSq = width2 * width2;
    var width22 = width2 * 2;
    var src2 = _p.source;
    var tgt = _p.target;
    var sqDist;
    if (rs.edgeType === "segments" || rs.edgeType === "straight" || rs.edgeType === "haystack") {
      var pts2 = rs.allpts;
      for (var i3 = 0; i3 + 3 < pts2.length; i3 += 2) {
        if (inLineVicinity(x2, y2, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], width22) && widthSq > (sqDist = sqdistToFiniteLine(x2, y2, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    } else if (rs.edgeType === "bezier" || rs.edgeType === "multibezier" || rs.edgeType === "self" || rs.edgeType === "compound") {
      var pts2 = rs.allpts;
      for (var i3 = 0; i3 + 5 < rs.allpts.length; i3 += 4) {
        if (inBezierVicinity(x2, y2, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5], width22) && widthSq > (sqDist = sqdistToQuadraticBezier(x2, y2, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    }
    var src2 = src2 || _p.source;
    var tgt = tgt || _p.target;
    var arSize = self2.getArrowWidth(styleWidth, scale);
    var arrows = [{
      name: "source",
      x: rs.arrowStartX,
      y: rs.arrowStartY,
      angle: rs.srcArrowAngle
    }, {
      name: "target",
      x: rs.arrowEndX,
      y: rs.arrowEndY,
      angle: rs.tgtArrowAngle
    }, {
      name: "mid-source",
      x: rs.midX,
      y: rs.midY,
      angle: rs.midsrcArrowAngle
    }, {
      name: "mid-target",
      x: rs.midX,
      y: rs.midY,
      angle: rs.midtgtArrowAngle
    }];
    for (var i3 = 0; i3 < arrows.length; i3++) {
      var ar = arrows[i3];
      var shape = r2.arrowShapes[edge.pstyle(ar.name + "-arrow-shape").value];
      var edgeWidth = edge.pstyle("width").pfValue;
      if (shape.roughCollide(x2, y2, arSize, ar.angle, {
        x: ar.x,
        y: ar.y
      }, edgeWidth, edgeThreshold) && shape.collide(x2, y2, arSize, ar.angle, {
        x: ar.x,
        y: ar.y
      }, edgeWidth, edgeThreshold)) {
        addEle(edge);
        return true;
      }
    }
    if (hasCompounds && near.length > 0) {
      checkNode(src2);
      checkNode(tgt);
    }
  }
  function preprop(obj, name2, pre) {
    return getPrefixedProperty(obj, name2, pre);
  }
  function checkLabel(ele2, prefix) {
    var _p = ele2._private;
    var th = labelThreshold;
    var prefixDash;
    if (prefix) {
      prefixDash = prefix + "-";
    } else {
      prefixDash = "";
    }
    ele2.boundingBox();
    var bb = _p.labelBounds[prefix || "main"];
    var text2 = ele2.pstyle(prefixDash + "label").value;
    var eventsEnabled = ele2.pstyle("text-events").strValue === "yes";
    if (!eventsEnabled || !text2) {
      return;
    }
    var lx = preprop(_p.rscratch, "labelX", prefix);
    var ly = preprop(_p.rscratch, "labelY", prefix);
    var theta = preprop(_p.rscratch, "labelAngle", prefix);
    var ox = ele2.pstyle(prefixDash + "text-margin-x").pfValue;
    var oy = ele2.pstyle(prefixDash + "text-margin-y").pfValue;
    var lx1 = bb.x1 - th - ox;
    var lx2 = bb.x2 + th - ox;
    var ly1 = bb.y1 - th - oy;
    var ly2 = bb.y2 + th - oy;
    if (theta) {
      var cos2 = Math.cos(theta);
      var sin2 = Math.sin(theta);
      var rotate = function rotate2(x3, y3) {
        x3 = x3 - lx;
        y3 = y3 - ly;
        return {
          x: x3 * cos2 - y3 * sin2 + lx,
          y: x3 * sin2 + y3 * cos2 + ly
        };
      };
      var px1y1 = rotate(lx1, ly1);
      var px1y2 = rotate(lx1, ly2);
      var px2y1 = rotate(lx2, ly1);
      var px2y2 = rotate(lx2, ly2);
      var points = [
        // with the margin added after the rotation is applied
        px1y1.x + ox,
        px1y1.y + oy,
        px2y1.x + ox,
        px2y1.y + oy,
        px2y2.x + ox,
        px2y2.y + oy,
        px1y2.x + ox,
        px1y2.y + oy
      ];
      if (pointInsidePolygonPoints(x2, y2, points)) {
        addEle(ele2);
        return true;
      }
    } else {
      if (inBoundingBox(bb, x2, y2)) {
        addEle(ele2);
        return true;
      }
    }
  }
  for (var i2 = eles.length - 1; i2 >= 0; i2--) {
    var ele = eles[i2];
    if (ele.isNode()) {
      checkNode(ele) || checkLabel(ele);
    } else {
      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, "source") || checkLabel(ele, "target");
    }
  }
  return near;
};
BRp$e.getAllInBox = function(x1, y1, x2, y2) {
  var eles = this.getCachedZSortedEles().interactive;
  var box = [];
  var x1c = Math.min(x1, x2);
  var x2c = Math.max(x1, x2);
  var y1c = Math.min(y1, y2);
  var y2c = Math.max(y1, y2);
  x1 = x1c;
  x2 = x2c;
  y1 = y1c;
  y2 = y2c;
  var boxBb = makeBoundingBox({
    x1,
    y1,
    x2,
    y2
  });
  for (var e2 = 0; e2 < eles.length; e2++) {
    var ele = eles[e2];
    if (ele.isNode()) {
      var node = ele;
      var nodeBb = node.boundingBox({
        includeNodes: true,
        includeEdges: false,
        includeLabels: false
      });
      if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
        box.push(node);
      }
    } else {
      var edge = ele;
      var _p = edge._private;
      var rs = _p.rscratch;
      if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
        continue;
      }
      if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
        continue;
      }
      if (rs.edgeType === "bezier" || rs.edgeType === "multibezier" || rs.edgeType === "self" || rs.edgeType === "compound" || rs.edgeType === "segments" || rs.edgeType === "haystack") {
        var pts2 = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
        var allInside = true;
        for (var i2 = 0; i2 < pts2.length; i2++) {
          if (!pointInBoundingBox(boxBb, pts2[i2])) {
            allInside = false;
            break;
          }
        }
        if (allInside) {
          box.push(edge);
        }
      } else if (rs.edgeType === "haystack" || rs.edgeType === "straight") {
        box.push(edge);
      }
    }
  }
  return box;
};
var BRp$d = {};
BRp$d.calculateArrowAngles = function(edge) {
  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === "haystack";
  var isBezier = rs.edgeType === "bezier";
  var isMultibezier = rs.edgeType === "multibezier";
  var isSegments = rs.edgeType === "segments";
  var isCompound = rs.edgeType === "compound";
  var isSelf = rs.edgeType === "self";
  var dispX, dispY;
  var startX, startY, endX, endY, midX, midY;
  if (isHaystack) {
    startX = rs.haystackPts[0];
    startY = rs.haystackPts[1];
    endX = rs.haystackPts[2];
    endY = rs.haystackPts[3];
  } else {
    startX = rs.arrowStartX;
    startY = rs.arrowStartY;
    endX = rs.arrowEndX;
    endY = rs.arrowEndY;
  }
  midX = rs.midX;
  midY = rs.midY;
  if (isSegments) {
    dispX = startX - rs.segpts[0];
    dispY = startY - rs.segpts[1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts2 = rs.allpts;
    var bX = qbezierAt(pts2[0], pts2[2], pts2[4], 0.1);
    var bY = qbezierAt(pts2[1], pts2[3], pts2[5], 0.1);
    dispX = startX - bX;
    dispY = startY - bY;
  } else {
    dispX = startX - midX;
    dispY = startY - midY;
  }
  rs.srcArrowAngle = getAngleFromDisp(dispX, dispY);
  var midX = rs.midX;
  var midY = rs.midY;
  if (isHaystack) {
    midX = (startX + endX) / 2;
    midY = (startY + endY) / 2;
  }
  dispX = endX - startX;
  dispY = endY - startY;
  if (isSegments) {
    var pts2 = rs.allpts;
    if (pts2.length / 2 % 2 === 0) {
      var i2 = pts2.length / 2;
      var i1 = i2 - 2;
      dispX = pts2[i2] - pts2[i1];
      dispY = pts2[i2 + 1] - pts2[i1 + 1];
    } else {
      var i2 = pts2.length / 2 - 1;
      var i1 = i2 - 2;
      var i3 = i2 + 2;
      dispX = pts2[i2] - pts2[i1];
      dispY = pts2[i2 + 1] - pts2[i1 + 1];
    }
  } else if (isMultibezier || isCompound || isSelf) {
    var pts2 = rs.allpts;
    var cpts = rs.ctrlpts;
    var bp0x, bp0y;
    var bp1x, bp1y;
    if (cpts.length / 2 % 2 === 0) {
      var p0 = pts2.length / 2 - 1;
      var ic = p0 + 2;
      var p1 = ic + 2;
      bp0x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0);
      bp0y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0);
      bp1x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 1e-4);
      bp1y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 1e-4);
    } else {
      var ic = pts2.length / 2 - 1;
      var p0 = ic - 2;
      var p1 = ic + 2;
      bp0x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0.4999);
      bp0y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0.4999);
      bp1x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0.5);
      bp1y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0.5);
    }
    dispX = bp1x - bp0x;
    dispY = bp1y - bp0y;
  }
  rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
  rs.midDispX = dispX;
  rs.midDispY = dispY;
  dispX *= -1;
  dispY *= -1;
  if (isSegments) {
    var pts2 = rs.allpts;
    if (pts2.length / 2 % 2 === 0)
      ;
    else {
      var i2 = pts2.length / 2 - 1;
      var i3 = i2 + 2;
      dispX = -(pts2[i3] - pts2[i2]);
      dispY = -(pts2[i3 + 1] - pts2[i2 + 1]);
    }
  }
  rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY);
  if (isSegments) {
    dispX = endX - rs.segpts[rs.segpts.length - 2];
    dispY = endY - rs.segpts[rs.segpts.length - 1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts2 = rs.allpts;
    var l2 = pts2.length;
    var bX = qbezierAt(pts2[l2 - 6], pts2[l2 - 4], pts2[l2 - 2], 0.9);
    var bY = qbezierAt(pts2[l2 - 5], pts2[l2 - 3], pts2[l2 - 1], 0.9);
    dispX = endX - bX;
    dispY = endY - bY;
  } else {
    dispX = endX - midX;
    dispY = endY - midY;
  }
  rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
};
BRp$d.getArrowWidth = BRp$d.getArrowHeight = function(edgeWidth, scale) {
  var cache3 = this.arrowWidthCache = this.arrowWidthCache || {};
  var cachedVal = cache3[edgeWidth + ", " + scale];
  if (cachedVal) {
    return cachedVal;
  }
  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
  cache3[edgeWidth + ", " + scale] = cachedVal;
  return cachedVal;
};
var BRp$c = {};
BRp$c.findHaystackPoints = function(edges3) {
  for (var i2 = 0; i2 < edges3.length; i2++) {
    var edge = edges3[i2];
    var _p = edge._private;
    var rs = _p.rscratch;
    if (!rs.haystack) {
      var angle = Math.random() * 2 * Math.PI;
      rs.source = {
        x: Math.cos(angle),
        y: Math.sin(angle)
      };
      angle = Math.random() * 2 * Math.PI;
      rs.target = {
        x: Math.cos(angle),
        y: Math.sin(angle)
      };
    }
    var src2 = _p.source;
    var tgt = _p.target;
    var srcPos = src2.position();
    var tgtPos = tgt.position();
    var srcW = src2.width();
    var tgtW = tgt.width();
    var srcH = src2.height();
    var tgtH = tgt.height();
    var radius = edge.pstyle("haystack-radius").value;
    var halfRadius = radius / 2;
    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;
    rs.edgeType = "haystack";
    rs.haystack = true;
    this.storeEdgeProjections(edge);
    this.calculateArrowAngles(edge);
    this.recalculateEdgeLabelProjections(edge);
    this.calculateLabelAngles(edge);
  }
};
BRp$c.findSegmentsPoints = function(edge, pairInfo) {
  var rs = edge._private.rscratch;
  var posPts = pairInfo.posPts, intersectionPts = pairInfo.intersectionPts, vectorNormInverse = pairInfo.vectorNormInverse;
  var edgeDistances = edge.pstyle("edge-distances").value;
  var segmentWs = edge.pstyle("segment-weights");
  var segmentDs = edge.pstyle("segment-distances");
  var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
  rs.edgeType = "segments";
  rs.segpts = [];
  for (var s2 = 0; s2 < segmentsN; s2++) {
    var w2 = segmentWs.pfValue[s2];
    var d2 = segmentDs.pfValue[s2];
    var w1 = 1 - w2;
    var w22 = w2;
    var midptPts = edgeDistances === "node-position" ? posPts : intersectionPts;
    var adjustedMidpt = {
      x: midptPts.x1 * w1 + midptPts.x2 * w22,
      y: midptPts.y1 * w1 + midptPts.y2 * w22
    };
    rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d2, adjustedMidpt.y + vectorNormInverse.y * d2);
  }
};
BRp$c.findLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
  var rs = edge._private.rscratch;
  var dirCounts = pairInfo.dirCounts, srcPos = pairInfo.srcPos;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var loopDir = edge.pstyle("loop-direction").pfValue;
  var loopSwp = edge.pstyle("loop-sweep").pfValue;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  rs.edgeType = "self";
  var j2 = i2;
  var loopDist = stepSize;
  if (edgeIsUnbundled) {
    j2 = 0;
    loopDist = ctrlptDist;
  }
  var loopAngle = loopDir - Math.PI / 2;
  var outAngle = loopAngle - loopSwp / 2;
  var inAngle = loopAngle + loopSwp / 2;
  var dc = String(loopDir + "_" + loopSwp);
  j2 = dirCounts[dc] === void 0 ? dirCounts[dc] = 0 : ++dirCounts[dc];
  rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j2 / 3 + 1)];
};
BRp$c.findCompoundLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
  var rs = edge._private.rscratch;
  rs.edgeType = "compound";
  var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var j2 = i2;
  var loopDist = stepSize;
  if (edgeIsUnbundled) {
    j2 = 0;
    loopDist = ctrlptDist;
  }
  var loopW = 50;
  var loopaPos = {
    x: srcPos.x - srcW / 2,
    y: srcPos.y - srcH / 2
  };
  var loopbPos = {
    x: tgtPos.x - tgtW / 2,
    y: tgtPos.y - tgtH / 2
  };
  var loopPos = {
    x: Math.min(loopaPos.x, loopbPos.x),
    y: Math.min(loopaPos.y, loopbPos.y)
  };
  var minCompoundStretch = 0.5;
  var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
  var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
  rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j2 / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j2 / 3 + 1) * compoundStretchB, loopPos.y];
};
BRp$c.findStraightEdgePoints = function(edge) {
  edge._private.rscratch.edgeType = "straight";
};
BRp$c.findBezierPoints = function(edge, pairInfo, i2, edgeIsUnbundled, edgeIsSwapped) {
  var rs = edge._private.rscratch;
  var vectorNormInverse = pairInfo.vectorNormInverse, posPts = pairInfo.posPts, intersectionPts = pairInfo.intersectionPts;
  var edgeDistances = edge.pstyle("edge-distances").value;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptWs = edge.pstyle("control-point-weights");
  var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var ctrlptWeight = ctrlptWs.value[0];
  var multi = edgeIsUnbundled;
  rs.edgeType = multi ? "multibezier" : "bezier";
  rs.ctrlpts = [];
  for (var b2 = 0; b2 < bezierN; b2++) {
    var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i2) * stepSize * (edgeIsSwapped ? -1 : 1);
    var manctrlptDist = void 0;
    var sign = signum(normctrlptDist);
    if (multi) {
      ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b2] : stepSize;
      ctrlptWeight = ctrlptWs.value[b2];
    }
    if (edgeIsUnbundled) {
      manctrlptDist = ctrlptDist;
    } else {
      manctrlptDist = ctrlptDist !== void 0 ? sign * ctrlptDist : void 0;
    }
    var distanceFromMidpoint = manctrlptDist !== void 0 ? manctrlptDist : normctrlptDist;
    var w1 = 1 - ctrlptWeight;
    var w2 = ctrlptWeight;
    var midptPts = edgeDistances === "node-position" ? posPts : intersectionPts;
    var adjustedMidpt = {
      x: midptPts.x1 * w1 + midptPts.x2 * w2,
      y: midptPts.y1 * w1 + midptPts.y2 * w2
    };
    rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
  }
};
BRp$c.findTaxiPoints = function(edge, pairInfo) {
  var rs = edge._private.rscratch;
  rs.edgeType = "segments";
  var VERTICAL = "vertical";
  var HORIZONTAL = "horizontal";
  var LEFTWARD = "leftward";
  var RIGHTWARD = "rightward";
  var DOWNWARD = "downward";
  var UPWARD = "upward";
  var AUTO2 = "auto";
  var posPts = pairInfo.posPts, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
  var edgeDistances = edge.pstyle("edge-distances").value;
  var dIncludesNodeBody = edgeDistances !== "node-position";
  var taxiDir = edge.pstyle("taxi-direction").value;
  var rawTaxiDir = taxiDir;
  var taxiTurn = edge.pstyle("taxi-turn");
  var turnIsPercent = taxiTurn.units === "%";
  var taxiTurnPfVal = taxiTurn.pfValue;
  var turnIsNegative = taxiTurnPfVal < 0;
  var minD = edge.pstyle("taxi-turn-min-distance").pfValue;
  var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
  var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
  var pdx = posPts.x2 - posPts.x1;
  var pdy = posPts.y2 - posPts.y1;
  var subDWH = function subDWH2(dxy, dwh) {
    if (dxy > 0) {
      return Math.max(dxy - dwh, 0);
    } else {
      return Math.min(dxy + dwh, 0);
    }
  };
  var dx = subDWH(pdx, dw);
  var dy = subDWH(pdy, dh);
  var isExplicitDir = false;
  if (rawTaxiDir === AUTO2) {
    taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
  } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {
    taxiDir = VERTICAL;
    isExplicitDir = true;
  } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {
    taxiDir = HORIZONTAL;
    isExplicitDir = true;
  }
  var isVert = taxiDir === VERTICAL;
  var l2 = isVert ? dy : dx;
  var pl = isVert ? pdy : pdx;
  var sgnL = signum(pl);
  var forcedDir = false;
  if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
    sgnL *= -1;
    l2 = sgnL * Math.abs(l2);
    forcedDir = true;
  }
  var d2;
  if (turnIsPercent) {
    var p2 = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;
    d2 = p2 * l2;
  } else {
    var k2 = taxiTurnPfVal < 0 ? l2 : 0;
    d2 = k2 + taxiTurnPfVal * sgnL;
  }
  var getIsTooClose = function getIsTooClose2(d4) {
    return Math.abs(d4) < minD || Math.abs(d4) >= Math.abs(l2);
  };
  var isTooCloseSrc = getIsTooClose(d2);
  var isTooCloseTgt = getIsTooClose(Math.abs(l2) - Math.abs(d2));
  var isTooClose = isTooCloseSrc || isTooCloseTgt;
  if (isTooClose && !forcedDir) {
    if (isVert) {
      var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
      var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;
      if (lShapeInsideSrc) {
        var x2 = (posPts.x1 + posPts.x2) / 2;
        var y1 = posPts.y1, y2 = posPts.y2;
        rs.segpts = [x2, y1, x2, y2];
      } else if (lShapeInsideTgt) {
        var y3 = (posPts.y1 + posPts.y2) / 2;
        var x1 = posPts.x1, x22 = posPts.x2;
        rs.segpts = [x1, y3, x22, y3];
      } else {
        rs.segpts = [posPts.x1, posPts.y2];
      }
    } else {
      var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;
      var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;
      if (_lShapeInsideSrc) {
        var _y = (posPts.y1 + posPts.y2) / 2;
        var _x = posPts.x1, _x2 = posPts.x2;
        rs.segpts = [_x, _y, _x2, _y];
      } else if (_lShapeInsideTgt) {
        var _x3 = (posPts.x1 + posPts.x2) / 2;
        var _y2 = posPts.y1, _y3 = posPts.y2;
        rs.segpts = [_x3, _y2, _x3, _y3];
      } else {
        rs.segpts = [posPts.x2, posPts.y1];
      }
    }
  } else {
    if (isVert) {
      var _y4 = posPts.y1 + d2 + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);
      var _x4 = posPts.x1, _x5 = posPts.x2;
      rs.segpts = [_x4, _y4, _x5, _y4];
    } else {
      var _x6 = posPts.x1 + d2 + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);
      var _y5 = posPts.y1, _y6 = posPts.y2;
      rs.segpts = [_x6, _y5, _x6, _y6];
    }
  }
};
BRp$c.tryToCorrectInvalidPoints = function(edge, pairInfo) {
  var rs = edge._private.rscratch;
  if (rs.edgeType === "bezier") {
    var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH, srcShape = pairInfo.srcShape, tgtShape = pairInfo.tgtShape;
    var badStart = !number$1(rs.startX) || !number$1(rs.startY);
    var badAStart = !number$1(rs.arrowStartX) || !number$1(rs.arrowStartY);
    var badEnd = !number$1(rs.endX) || !number$1(rs.endY);
    var badAEnd = !number$1(rs.arrowEndX) || !number$1(rs.arrowEndY);
    var minCpADistFactor = 3;
    var arrowW = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
    var minCpADist = minCpADistFactor * arrowW;
    var startACpDist = dist$2({
      x: rs.ctrlpts[0],
      y: rs.ctrlpts[1]
    }, {
      x: rs.startX,
      y: rs.startY
    });
    var closeStartACp = startACpDist < minCpADist;
    var endACpDist = dist$2({
      x: rs.ctrlpts[0],
      y: rs.ctrlpts[1]
    }, {
      x: rs.endX,
      y: rs.endY
    });
    var closeEndACp = endACpDist < minCpADist;
    var overlapping = false;
    if (badStart || badAStart || closeStartACp) {
      overlapping = true;
      var cpD = {
        // delta
        x: rs.ctrlpts[0] - srcPos.x,
        y: rs.ctrlpts[1] - srcPos.y
      };
      var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y);
      var cpM = {
        // normalised delta
        x: cpD.x / cpL,
        y: cpD.y / cpL
      };
      var radius = Math.max(srcW, srcH);
      var cpProj = {
        // *2 radius guarantees outside shape
        x: rs.ctrlpts[0] + cpM.x * 2 * radius,
        y: rs.ctrlpts[1] + cpM.y * 2 * radius
      };
      var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);
      if (closeStartACp) {
        rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
        rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
      } else {
        rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
        rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
      }
    }
    if (badEnd || badAEnd || closeEndACp) {
      overlapping = true;
      var _cpD = {
        // delta
        x: rs.ctrlpts[0] - tgtPos.x,
        y: rs.ctrlpts[1] - tgtPos.y
      };
      var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y);
      var _cpM = {
        // normalised delta
        x: _cpD.x / _cpL,
        y: _cpD.y / _cpL
      };
      var _radius = Math.max(srcW, srcH);
      var _cpProj = {
        // *2 radius guarantees outside shape
        x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
        y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
      };
      var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);
      if (closeEndACp) {
        rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
        rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
      } else {
        rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
        rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
      }
    }
    if (overlapping) {
      this.findEndpoints(edge);
    }
  }
};
BRp$c.storeAllpts = function(edge) {
  var rs = edge._private.rscratch;
  if (rs.edgeType === "multibezier" || rs.edgeType === "bezier" || rs.edgeType === "self" || rs.edgeType === "compound") {
    rs.allpts = [];
    rs.allpts.push(rs.startX, rs.startY);
    for (var b2 = 0; b2 + 1 < rs.ctrlpts.length; b2 += 2) {
      rs.allpts.push(rs.ctrlpts[b2], rs.ctrlpts[b2 + 1]);
      if (b2 + 3 < rs.ctrlpts.length) {
        rs.allpts.push((rs.ctrlpts[b2] + rs.ctrlpts[b2 + 2]) / 2, (rs.ctrlpts[b2 + 1] + rs.ctrlpts[b2 + 3]) / 2);
      }
    }
    rs.allpts.push(rs.endX, rs.endY);
    var m2, mt2;
    if (rs.ctrlpts.length / 2 % 2 === 0) {
      m2 = rs.allpts.length / 2 - 1;
      rs.midX = rs.allpts[m2];
      rs.midY = rs.allpts[m2 + 1];
    } else {
      m2 = rs.allpts.length / 2 - 3;
      mt2 = 0.5;
      rs.midX = qbezierAt(rs.allpts[m2], rs.allpts[m2 + 2], rs.allpts[m2 + 4], mt2);
      rs.midY = qbezierAt(rs.allpts[m2 + 1], rs.allpts[m2 + 3], rs.allpts[m2 + 5], mt2);
    }
  } else if (rs.edgeType === "straight") {
    rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];
    rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
    rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
  } else if (rs.edgeType === "segments") {
    rs.allpts = [];
    rs.allpts.push(rs.startX, rs.startY);
    rs.allpts.push.apply(rs.allpts, rs.segpts);
    rs.allpts.push(rs.endX, rs.endY);
    if (rs.segpts.length % 4 === 0) {
      var i2 = rs.segpts.length / 2;
      var i1 = i2 - 2;
      rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
      rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
    } else {
      var _i = rs.segpts.length / 2 - 1;
      rs.midX = rs.segpts[_i];
      rs.midY = rs.segpts[_i + 1];
    }
  }
};
BRp$c.checkForInvalidEdgeWarning = function(edge) {
  var rs = edge[0]._private.rscratch;
  if (rs.nodesOverlap || number$1(rs.startX) && number$1(rs.startY) && number$1(rs.endX) && number$1(rs.endY)) {
    rs.loggedErr = false;
  } else {
    if (!rs.loggedErr) {
      rs.loggedErr = true;
      warn("Edge `" + edge.id() + "` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.");
    }
  }
};
BRp$c.findEdgeControlPoints = function(edges3) {
  var _this = this;
  if (!edges3 || edges3.length === 0) {
    return;
  }
  var r2 = this;
  var cy2 = r2.cy;
  var hasCompounds = cy2.hasCompoundNodes();
  var hashTable = {
    map: new Map$1(),
    get: function get2(pairId2) {
      var map2 = this.map.get(pairId2[0]);
      if (map2 != null) {
        return map2.get(pairId2[1]);
      } else {
        return null;
      }
    },
    set: function set2(pairId2, val) {
      var map2 = this.map.get(pairId2[0]);
      if (map2 == null) {
        map2 = new Map$1();
        this.map.set(pairId2[0], map2);
      }
      map2.set(pairId2[1], val);
    }
  };
  var pairIds = [];
  var haystackEdges = [];
  for (var i2 = 0; i2 < edges3.length; i2++) {
    var edge = edges3[i2];
    var _p = edge._private;
    var curveStyle = edge.pstyle("curve-style").value;
    if (edge.removed() || !edge.takesUpSpace()) {
      continue;
    }
    if (curveStyle === "haystack") {
      haystackEdges.push(edge);
      continue;
    }
    var edgeIsUnbundled = curveStyle === "unbundled-bezier" || curveStyle === "segments" || curveStyle === "straight" || curveStyle === "straight-triangle" || curveStyle === "taxi";
    var edgeIsBezier = curveStyle === "unbundled-bezier" || curveStyle === "bezier";
    var src2 = _p.source;
    var tgt = _p.target;
    var srcIndex = src2.poolIndex();
    var tgtIndex = tgt.poolIndex();
    var pairId = [srcIndex, tgtIndex].sort();
    var tableEntry = hashTable.get(pairId);
    if (tableEntry == null) {
      tableEntry = {
        eles: []
      };
      hashTable.set(pairId, tableEntry);
      pairIds.push(pairId);
    }
    tableEntry.eles.push(edge);
    if (edgeIsUnbundled) {
      tableEntry.hasUnbundled = true;
    }
    if (edgeIsBezier) {
      tableEntry.hasBezier = true;
    }
  }
  var _loop = function _loop2(p3) {
    var pairId2 = pairIds[p3];
    var pairInfo = hashTable.get(pairId2);
    var swappedpairInfo = void 0;
    if (!pairInfo.hasUnbundled) {
      var pllEdges = pairInfo.eles[0].parallelEdges().filter(function(e2) {
        return e2.isBundledBezier();
      });
      clearArray(pairInfo.eles);
      pllEdges.forEach(function(edge2) {
        return pairInfo.eles.push(edge2);
      });
      pairInfo.eles.sort(function(edge1, edge2) {
        return edge1.poolIndex() - edge2.poolIndex();
      });
    }
    var firstEdge = pairInfo.eles[0];
    var src3 = firstEdge.source();
    var tgt2 = firstEdge.target();
    if (src3.poolIndex() > tgt2.poolIndex()) {
      var temp = src3;
      src3 = tgt2;
      tgt2 = temp;
    }
    var srcPos = pairInfo.srcPos = src3.position();
    var tgtPos = pairInfo.tgtPos = tgt2.position();
    var srcW = pairInfo.srcW = src3.outerWidth();
    var srcH = pairInfo.srcH = src3.outerHeight();
    var tgtW = pairInfo.tgtW = tgt2.outerWidth();
    var tgtH = pairInfo.tgtH = tgt2.outerHeight();
    var srcShape = pairInfo.srcShape = r2.nodeShapes[_this.getNodeShape(src3)];
    var tgtShape = pairInfo.tgtShape = r2.nodeShapes[_this.getNodeShape(tgt2)];
    pairInfo.dirCounts = {
      "north": 0,
      "west": 0,
      "south": 0,
      "east": 0,
      "northwest": 0,
      "southwest": 0,
      "northeast": 0,
      "southeast": 0
    };
    for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
      var _edge = pairInfo.eles[_i2];
      var rs = _edge[0]._private.rscratch;
      var _curveStyle = _edge.pstyle("curve-style").value;
      var _edgeIsUnbundled = _curveStyle === "unbundled-bezier" || _curveStyle === "segments" || _curveStyle === "taxi";
      var edgeIsSwapped = !src3.same(_edge.source());
      if (!pairInfo.calculatedIntersection && src3 !== tgt2 && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
        pairInfo.calculatedIntersection = true;
        var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
        var srcIntn = pairInfo.srcIntn = srcOutside;
        var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
        var tgtIntn = pairInfo.tgtIntn = tgtOutside;
        var intersectionPts = pairInfo.intersectionPts = {
          x1: srcOutside[0],
          x2: tgtOutside[0],
          y1: srcOutside[1],
          y2: tgtOutside[1]
        };
        var posPts = pairInfo.posPts = {
          x1: srcPos.x,
          x2: tgtPos.x,
          y1: srcPos.y,
          y2: tgtPos.y
        };
        var dy = tgtOutside[1] - srcOutside[1];
        var dx = tgtOutside[0] - srcOutside[0];
        var l2 = Math.sqrt(dx * dx + dy * dy);
        var vector = pairInfo.vector = {
          x: dx,
          y: dy
        };
        var vectorNorm = pairInfo.vectorNorm = {
          x: vector.x / l2,
          y: vector.y / l2
        };
        var vectorNormInverse = {
          x: -vectorNorm.y,
          y: vectorNorm.x
        };
        pairInfo.nodesOverlap = !number$1(l2) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
        pairInfo.vectorNormInverse = vectorNormInverse;
        swappedpairInfo = {
          nodesOverlap: pairInfo.nodesOverlap,
          dirCounts: pairInfo.dirCounts,
          calculatedIntersection: true,
          hasBezier: pairInfo.hasBezier,
          hasUnbundled: pairInfo.hasUnbundled,
          eles: pairInfo.eles,
          srcPos: tgtPos,
          tgtPos: srcPos,
          srcW: tgtW,
          srcH: tgtH,
          tgtW: srcW,
          tgtH: srcH,
          srcIntn: tgtIntn,
          tgtIntn: srcIntn,
          srcShape: tgtShape,
          tgtShape: srcShape,
          posPts: {
            x1: posPts.x2,
            y1: posPts.y2,
            x2: posPts.x1,
            y2: posPts.y1
          },
          intersectionPts: {
            x1: intersectionPts.x2,
            y1: intersectionPts.y2,
            x2: intersectionPts.x1,
            y2: intersectionPts.y1
          },
          vector: {
            x: -vector.x,
            y: -vector.y
          },
          vectorNorm: {
            x: -vectorNorm.x,
            y: -vectorNorm.y
          },
          vectorNormInverse: {
            x: -vectorNormInverse.x,
            y: -vectorNormInverse.y
          }
        };
      }
      var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
      rs.nodesOverlap = passedPairInfo.nodesOverlap;
      rs.srcIntn = passedPairInfo.srcIntn;
      rs.tgtIntn = passedPairInfo.tgtIntn;
      if (hasCompounds && (src3.isParent() || src3.isChild() || tgt2.isParent() || tgt2.isChild()) && (src3.parents().anySame(tgt2) || tgt2.parents().anySame(src3) || src3.same(tgt2) && src3.isParent())) {
        _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
      } else if (src3 === tgt2) {
        _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
      } else if (_curveStyle === "segments") {
        _this.findSegmentsPoints(_edge, passedPairInfo);
      } else if (_curveStyle === "taxi") {
        _this.findTaxiPoints(_edge, passedPairInfo);
      } else if (_curveStyle === "straight" || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
        _this.findStraightEdgePoints(_edge);
      } else {
        _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
      }
      _this.findEndpoints(_edge);
      _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);
      _this.checkForInvalidEdgeWarning(_edge);
      _this.storeAllpts(_edge);
      _this.storeEdgeProjections(_edge);
      _this.calculateArrowAngles(_edge);
      _this.recalculateEdgeLabelProjections(_edge);
      _this.calculateLabelAngles(_edge);
    }
  };
  for (var p2 = 0; p2 < pairIds.length; p2++) {
    _loop(p2);
  }
  this.findHaystackPoints(haystackEdges);
};
function getPts(pts2) {
  var retPts = [];
  if (pts2 == null) {
    return;
  }
  for (var i2 = 0; i2 < pts2.length; i2 += 2) {
    var x2 = pts2[i2];
    var y2 = pts2[i2 + 1];
    retPts.push({
      x: x2,
      y: y2
    });
  }
  return retPts;
}
BRp$c.getSegmentPoints = function(edge) {
  var rs = edge[0]._private.rscratch;
  var type = rs.edgeType;
  if (type === "segments") {
    this.recalculateRenderedStyle(edge);
    return getPts(rs.segpts);
  }
};
BRp$c.getControlPoints = function(edge) {
  var rs = edge[0]._private.rscratch;
  var type = rs.edgeType;
  if (type === "bezier" || type === "multibezier" || type === "self" || type === "compound") {
    this.recalculateRenderedStyle(edge);
    return getPts(rs.ctrlpts);
  }
};
BRp$c.getEdgeMidpoint = function(edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  return {
    x: rs.midX,
    y: rs.midY
  };
};
var BRp$b = {};
BRp$b.manualEndptToPx = function(node, prop) {
  var r2 = this;
  var npos = node.position();
  var w2 = node.outerWidth();
  var h2 = node.outerHeight();
  if (prop.value.length === 2) {
    var p2 = [prop.pfValue[0], prop.pfValue[1]];
    if (prop.units[0] === "%") {
      p2[0] = p2[0] * w2;
    }
    if (prop.units[1] === "%") {
      p2[1] = p2[1] * h2;
    }
    p2[0] += npos.x;
    p2[1] += npos.y;
    return p2;
  } else {
    var angle = prop.pfValue[0];
    angle = -Math.PI / 2 + angle;
    var l2 = 2 * Math.max(w2, h2);
    var _p = [npos.x + Math.cos(angle) * l2, npos.y + Math.sin(angle) * l2];
    return r2.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w2, h2, _p[0], _p[1], 0);
  }
};
BRp$b.findEndpoints = function(edge) {
  var r2 = this;
  var intersect2;
  var source = edge.source()[0];
  var target = edge.target()[0];
  var srcPos = source.position();
  var tgtPos = target.position();
  var tgtArShape = edge.pstyle("target-arrow-shape").value;
  var srcArShape = edge.pstyle("source-arrow-shape").value;
  var tgtDist = edge.pstyle("target-distance-from-node").pfValue;
  var srcDist = edge.pstyle("source-distance-from-node").pfValue;
  var curveStyle = edge.pstyle("curve-style").value;
  var rs = edge._private.rscratch;
  var et2 = rs.edgeType;
  var taxi = curveStyle === "taxi";
  var self2 = et2 === "self" || et2 === "compound";
  var bezier = et2 === "bezier" || et2 === "multibezier" || self2;
  var multi = et2 !== "bezier";
  var lines = et2 === "straight" || et2 === "segments";
  var segments = et2 === "segments";
  var hasEndpts = bezier || multi || lines;
  var overrideEndpts = self2 || taxi;
  var srcManEndpt = edge.pstyle("source-endpoint");
  var srcManEndptVal = overrideEndpts ? "outside-to-node" : srcManEndpt.value;
  var tgtManEndpt = edge.pstyle("target-endpoint");
  var tgtManEndptVal = overrideEndpts ? "outside-to-node" : tgtManEndpt.value;
  rs.srcManEndpt = srcManEndpt;
  rs.tgtManEndpt = tgtManEndpt;
  var p1;
  var p2;
  var p1_i;
  var p2_i;
  if (bezier) {
    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
    p1 = cpEnd;
    p2 = cpStart;
  } else if (lines) {
    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
    p1 = tgtArrowFromPt;
    p2 = srcArrowFromPt;
  }
  if (tgtManEndptVal === "inside-to-node") {
    intersect2 = [tgtPos.x, tgtPos.y];
  } else if (tgtManEndpt.units) {
    intersect2 = this.manualEndptToPx(target, tgtManEndpt);
  } else if (tgtManEndptVal === "outside-to-line") {
    intersect2 = rs.tgtIntn;
  } else {
    if (tgtManEndptVal === "outside-to-node" || tgtManEndptVal === "outside-to-node-or-label") {
      p1_i = p1;
    } else if (tgtManEndptVal === "outside-to-line" || tgtManEndptVal === "outside-to-line-or-label") {
      p1_i = [srcPos.x, srcPos.y];
    }
    intersect2 = r2.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);
    if (tgtManEndptVal === "outside-to-node-or-label" || tgtManEndptVal === "outside-to-line-or-label") {
      var trs = target._private.rscratch;
      var lw = trs.labelWidth;
      var lh = trs.labelHeight;
      var lx = trs.labelX;
      var ly = trs.labelY;
      var lw2 = lw / 2;
      var lh2 = lh / 2;
      var va = target.pstyle("text-valign").value;
      if (va === "top") {
        ly -= lh2;
      } else if (va === "bottom") {
        ly += lh2;
      }
      var ha = target.pstyle("text-halign").value;
      if (ha === "left") {
        lx -= lw2;
      } else if (ha === "right") {
        lx += lw2;
      }
      var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);
      if (labelIntersect.length > 0) {
        var refPt = srcPos;
        var intSqdist = sqdist(refPt, array2point(intersect2));
        var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
        var minSqDist = intSqdist;
        if (labIntSqdist < intSqdist) {
          intersect2 = labelIntersect;
          minSqDist = labIntSqdist;
        }
        if (labelIntersect.length > 2) {
          var labInt2SqDist = sqdist(refPt, {
            x: labelIntersect[2],
            y: labelIntersect[3]
          });
          if (labInt2SqDist < minSqDist) {
            intersect2 = [labelIntersect[2], labelIntersect[3]];
          }
        }
      }
    }
  }
  var arrowEnd = shortenIntersection(intersect2, p1, r2.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
  var edgeEnd = shortenIntersection(intersect2, p1, r2.arrowShapes[tgtArShape].gap(edge) + tgtDist);
  rs.endX = edgeEnd[0];
  rs.endY = edgeEnd[1];
  rs.arrowEndX = arrowEnd[0];
  rs.arrowEndY = arrowEnd[1];
  if (srcManEndptVal === "inside-to-node") {
    intersect2 = [srcPos.x, srcPos.y];
  } else if (srcManEndpt.units) {
    intersect2 = this.manualEndptToPx(source, srcManEndpt);
  } else if (srcManEndptVal === "outside-to-line") {
    intersect2 = rs.srcIntn;
  } else {
    if (srcManEndptVal === "outside-to-node" || srcManEndptVal === "outside-to-node-or-label") {
      p2_i = p2;
    } else if (srcManEndptVal === "outside-to-line" || srcManEndptVal === "outside-to-line-or-label") {
      p2_i = [tgtPos.x, tgtPos.y];
    }
    intersect2 = r2.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);
    if (srcManEndptVal === "outside-to-node-or-label" || srcManEndptVal === "outside-to-line-or-label") {
      var srs = source._private.rscratch;
      var _lw = srs.labelWidth;
      var _lh = srs.labelHeight;
      var _lx = srs.labelX;
      var _ly = srs.labelY;
      var _lw2 = _lw / 2;
      var _lh2 = _lh / 2;
      var _va = source.pstyle("text-valign").value;
      if (_va === "top") {
        _ly -= _lh2;
      } else if (_va === "bottom") {
        _ly += _lh2;
      }
      var _ha = source.pstyle("text-halign").value;
      if (_ha === "left") {
        _lx -= _lw2;
      } else if (_ha === "right") {
        _lx += _lw2;
      }
      var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);
      if (_labelIntersect.length > 0) {
        var _refPt = tgtPos;
        var _intSqdist = sqdist(_refPt, array2point(intersect2));
        var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));
        var _minSqDist = _intSqdist;
        if (_labIntSqdist < _intSqdist) {
          intersect2 = [_labelIntersect[0], _labelIntersect[1]];
          _minSqDist = _labIntSqdist;
        }
        if (_labelIntersect.length > 2) {
          var _labInt2SqDist = sqdist(_refPt, {
            x: _labelIntersect[2],
            y: _labelIntersect[3]
          });
          if (_labInt2SqDist < _minSqDist) {
            intersect2 = [_labelIntersect[2], _labelIntersect[3]];
          }
        }
      }
    }
  }
  var arrowStart = shortenIntersection(intersect2, p2, r2.arrowShapes[srcArShape].spacing(edge) + srcDist);
  var edgeStart = shortenIntersection(intersect2, p2, r2.arrowShapes[srcArShape].gap(edge) + srcDist);
  rs.startX = edgeStart[0];
  rs.startY = edgeStart[1];
  rs.arrowStartX = arrowStart[0];
  rs.arrowStartY = arrowStart[1];
  if (hasEndpts) {
    if (!number$1(rs.startX) || !number$1(rs.startY) || !number$1(rs.endX) || !number$1(rs.endY)) {
      rs.badLine = true;
    } else {
      rs.badLine = false;
    }
  }
};
BRp$b.getSourceEndpoint = function(edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  switch (rs.edgeType) {
    case "haystack":
      return {
        x: rs.haystackPts[0],
        y: rs.haystackPts[1]
      };
    default:
      return {
        x: rs.arrowStartX,
        y: rs.arrowStartY
      };
  }
};
BRp$b.getTargetEndpoint = function(edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  switch (rs.edgeType) {
    case "haystack":
      return {
        x: rs.haystackPts[2],
        y: rs.haystackPts[3]
      };
    default:
      return {
        x: rs.arrowEndX,
        y: rs.arrowEndY
      };
  }
};
var BRp$a = {};
function pushBezierPts(r2, edge, pts2) {
  var qbezierAt$1 = function qbezierAt$12(p1, p22, p3, t3) {
    return qbezierAt(p1, p22, p3, t3);
  };
  var _p = edge._private;
  var bpts = _p.rstyle.bezierPts;
  for (var i2 = 0; i2 < r2.bezierProjPcts.length; i2++) {
    var p2 = r2.bezierProjPcts[i2];
    bpts.push({
      x: qbezierAt$1(pts2[0], pts2[2], pts2[4], p2),
      y: qbezierAt$1(pts2[1], pts2[3], pts2[5], p2)
    });
  }
}
BRp$a.storeEdgeProjections = function(edge) {
  var _p = edge._private;
  var rs = _p.rscratch;
  var et2 = rs.edgeType;
  _p.rstyle.bezierPts = null;
  _p.rstyle.linePts = null;
  _p.rstyle.haystackPts = null;
  if (et2 === "multibezier" || et2 === "bezier" || et2 === "self" || et2 === "compound") {
    _p.rstyle.bezierPts = [];
    for (var i2 = 0; i2 + 5 < rs.allpts.length; i2 += 4) {
      pushBezierPts(this, edge, rs.allpts.slice(i2, i2 + 6));
    }
  } else if (et2 === "segments") {
    var lpts = _p.rstyle.linePts = [];
    for (var i2 = 0; i2 + 1 < rs.allpts.length; i2 += 2) {
      lpts.push({
        x: rs.allpts[i2],
        y: rs.allpts[i2 + 1]
      });
    }
  } else if (et2 === "haystack") {
    var hpts = rs.haystackPts;
    _p.rstyle.haystackPts = [{
      x: hpts[0],
      y: hpts[1]
    }, {
      x: hpts[2],
      y: hpts[3]
    }];
  }
  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
};
BRp$a.recalculateEdgeProjections = function(edges3) {
  this.findEdgeControlPoints(edges3);
};
var BRp$9 = {};
BRp$9.recalculateNodeLabelProjection = function(node) {
  var content = node.pstyle("label").strValue;
  if (emptyString(content)) {
    return;
  }
  var textX, textY;
  var _p = node._private;
  var nodeWidth = node.width();
  var nodeHeight = node.height();
  var padding = node.padding();
  var nodePos = node.position();
  var textHalign = node.pstyle("text-halign").strValue;
  var textValign = node.pstyle("text-valign").strValue;
  var rs = _p.rscratch;
  var rstyle = _p.rstyle;
  switch (textHalign) {
    case "left":
      textX = nodePos.x - nodeWidth / 2 - padding;
      break;
    case "right":
      textX = nodePos.x + nodeWidth / 2 + padding;
      break;
    default:
      textX = nodePos.x;
  }
  switch (textValign) {
    case "top":
      textY = nodePos.y - nodeHeight / 2 - padding;
      break;
    case "bottom":
      textY = nodePos.y + nodeHeight / 2 + padding;
      break;
    default:
      textY = nodePos.y;
  }
  rs.labelX = textX;
  rs.labelY = textY;
  rstyle.labelX = textX;
  rstyle.labelY = textY;
  this.calculateLabelAngles(node);
  this.applyLabelDimensions(node);
};
var lineAngleFromDelta = function lineAngleFromDelta2(dx, dy) {
  var angle = Math.atan(dy / dx);
  if (dx === 0 && angle < 0) {
    angle = angle * -1;
  }
  return angle;
};
var lineAngle = function lineAngle2(p0, p1) {
  var dx = p1.x - p0.x;
  var dy = p1.y - p0.y;
  return lineAngleFromDelta(dx, dy);
};
var bezierAngle = function bezierAngle2(p0, p1, p2, t3) {
  var t0 = bound(0, t3 - 1e-3, 1);
  var t1 = bound(0, t3 + 1e-3, 1);
  var lp0 = qbezierPtAt(p0, p1, p2, t0);
  var lp1 = qbezierPtAt(p0, p1, p2, t1);
  return lineAngle(lp0, lp1);
};
BRp$9.recalculateEdgeLabelProjections = function(edge) {
  var p2;
  var _p = edge._private;
  var rs = _p.rscratch;
  var r2 = this;
  var content = {
    mid: edge.pstyle("label").strValue,
    source: edge.pstyle("source-label").strValue,
    target: edge.pstyle("target-label").strValue
  };
  if (content.mid || content.source || content.target)
    ;
  else {
    return;
  }
  p2 = {
    x: rs.midX,
    y: rs.midY
  };
  var setRs = function setRs2(propName, prefix, value) {
    setPrefixedProperty(_p.rscratch, propName, prefix, value);
    setPrefixedProperty(_p.rstyle, propName, prefix, value);
  };
  setRs("labelX", null, p2.x);
  setRs("labelY", null, p2.y);
  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
  setRs("labelAutoAngle", null, midAngle);
  var createControlPointInfo = function createControlPointInfo2() {
    if (createControlPointInfo2.cache) {
      return createControlPointInfo2.cache;
    }
    var ctrlpts = [];
    for (var i2 = 0; i2 + 5 < rs.allpts.length; i2 += 4) {
      var p0 = {
        x: rs.allpts[i2],
        y: rs.allpts[i2 + 1]
      };
      var p1 = {
        x: rs.allpts[i2 + 2],
        y: rs.allpts[i2 + 3]
      };
      var p22 = {
        x: rs.allpts[i2 + 4],
        y: rs.allpts[i2 + 5]
      };
      ctrlpts.push({
        p0,
        p1,
        p2: p22,
        startDist: 0,
        length: 0,
        segments: []
      });
    }
    var bpts = _p.rstyle.bezierPts;
    var nProjs = r2.bezierProjPcts.length;
    function addSegment(cp2, p02, p12, t0, t1) {
      var length = dist$2(p02, p12);
      var prevSegment = cp2.segments[cp2.segments.length - 1];
      var segment = {
        p0: p02,
        p1: p12,
        t0,
        t1,
        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
        length
      };
      cp2.segments.push(segment);
      cp2.length += length;
    }
    for (var _i = 0; _i < ctrlpts.length; _i++) {
      var cp = ctrlpts[_i];
      var prevCp = ctrlpts[_i - 1];
      if (prevCp) {
        cp.startDist = prevCp.startDist + prevCp.length;
      }
      addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r2.bezierProjPcts[0]);
      for (var j2 = 0; j2 < nProjs - 1; j2++) {
        addSegment(cp, bpts[_i * nProjs + j2], bpts[_i * nProjs + j2 + 1], r2.bezierProjPcts[j2], r2.bezierProjPcts[j2 + 1]);
      }
      addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r2.bezierProjPcts[nProjs - 1], 1);
    }
    return createControlPointInfo2.cache = ctrlpts;
  };
  var calculateEndProjection = function calculateEndProjection2(prefix) {
    var angle;
    var isSrc = prefix === "source";
    if (!content[prefix]) {
      return;
    }
    var offset = edge.pstyle(prefix + "-text-offset").pfValue;
    switch (rs.edgeType) {
      case "self":
      case "compound":
      case "bezier":
      case "multibezier": {
        var cps = createControlPointInfo();
        var selected;
        var startDist = 0;
        var totalDist = 0;
        for (var i2 = 0; i2 < cps.length; i2++) {
          var _cp = cps[isSrc ? i2 : cps.length - 1 - i2];
          for (var j2 = 0; j2 < _cp.segments.length; j2++) {
            var _seg = _cp.segments[isSrc ? j2 : _cp.segments.length - 1 - j2];
            var lastSeg = i2 === cps.length - 1 && j2 === _cp.segments.length - 1;
            startDist = totalDist;
            totalDist += _seg.length;
            if (totalDist >= offset || lastSeg) {
              selected = {
                cp: _cp,
                segment: _seg
              };
              break;
            }
          }
          if (selected) {
            break;
          }
        }
        var cp = selected.cp;
        var seg = selected.segment;
        var tSegment = (offset - startDist) / seg.length;
        var segDt = seg.t1 - seg.t0;
        var t3 = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
        t3 = bound(0, t3, 1);
        p2 = qbezierPtAt(cp.p0, cp.p1, cp.p2, t3);
        angle = bezierAngle(cp.p0, cp.p1, cp.p2, t3);
        break;
      }
      case "straight":
      case "segments":
      case "haystack": {
        var d2 = 0, di, d0;
        var p0, p1;
        var l2 = rs.allpts.length;
        for (var _i2 = 0; _i2 + 3 < l2; _i2 += 2) {
          if (isSrc) {
            p0 = {
              x: rs.allpts[_i2],
              y: rs.allpts[_i2 + 1]
            };
            p1 = {
              x: rs.allpts[_i2 + 2],
              y: rs.allpts[_i2 + 3]
            };
          } else {
            p0 = {
              x: rs.allpts[l2 - 2 - _i2],
              y: rs.allpts[l2 - 1 - _i2]
            };
            p1 = {
              x: rs.allpts[l2 - 4 - _i2],
              y: rs.allpts[l2 - 3 - _i2]
            };
          }
          di = dist$2(p0, p1);
          d0 = d2;
          d2 += di;
          if (d2 >= offset) {
            break;
          }
        }
        var pD = offset - d0;
        var _t2 = pD / di;
        _t2 = bound(0, _t2, 1);
        p2 = lineAt(p0, p1, _t2);
        angle = lineAngle(p0, p1);
        break;
      }
    }
    setRs("labelX", prefix, p2.x);
    setRs("labelY", prefix, p2.y);
    setRs("labelAutoAngle", prefix, angle);
  };
  calculateEndProjection("source");
  calculateEndProjection("target");
  this.applyLabelDimensions(edge);
};
BRp$9.applyLabelDimensions = function(ele) {
  this.applyPrefixedLabelDimensions(ele);
  if (ele.isEdge()) {
    this.applyPrefixedLabelDimensions(ele, "source");
    this.applyPrefixedLabelDimensions(ele, "target");
  }
};
BRp$9.applyPrefixedLabelDimensions = function(ele, prefix) {
  var _p = ele._private;
  var text2 = this.getLabelText(ele, prefix);
  var labelDims = this.calculateLabelDimensions(ele, text2);
  var lineHeight = ele.pstyle("line-height").pfValue;
  var textWrap = ele.pstyle("text-wrap").strValue;
  var lines = getPrefixedProperty(_p.rscratch, "labelWrapCachedLines", prefix) || [];
  var numLines = textWrap !== "wrap" ? 1 : Math.max(lines.length, 1);
  var normPerLineHeight = labelDims.height / numLines;
  var labelLineHeight = normPerLineHeight * lineHeight;
  var width2 = labelDims.width;
  var height2 = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
  setPrefixedProperty(_p.rstyle, "labelWidth", prefix, width2);
  setPrefixedProperty(_p.rscratch, "labelWidth", prefix, width2);
  setPrefixedProperty(_p.rstyle, "labelHeight", prefix, height2);
  setPrefixedProperty(_p.rscratch, "labelHeight", prefix, height2);
  setPrefixedProperty(_p.rscratch, "labelLineHeight", prefix, labelLineHeight);
};
BRp$9.getLabelText = function(ele, prefix) {
  var _p = ele._private;
  var pfd = prefix ? prefix + "-" : "";
  var text2 = ele.pstyle(pfd + "label").strValue;
  var textTransform = ele.pstyle("text-transform").value;
  var rscratch = function rscratch2(propName, value) {
    if (value) {
      setPrefixedProperty(_p.rscratch, propName, prefix, value);
      return value;
    } else {
      return getPrefixedProperty(_p.rscratch, propName, prefix);
    }
  };
  if (!text2) {
    return "";
  }
  if (textTransform == "none")
    ;
  else if (textTransform == "uppercase") {
    text2 = text2.toUpperCase();
  } else if (textTransform == "lowercase") {
    text2 = text2.toLowerCase();
  }
  var wrapStyle = ele.pstyle("text-wrap").value;
  if (wrapStyle === "wrap") {
    var labelKey = rscratch("labelKey");
    if (labelKey != null && rscratch("labelWrapKey") === labelKey) {
      return rscratch("labelWrapCachedText");
    }
    var zwsp = "​";
    var lines = text2.split("\n");
    var maxW = ele.pstyle("text-max-width").pfValue;
    var overflow = ele.pstyle("text-overflow-wrap").value;
    var overflowAny = overflow === "anywhere";
    var wrappedLines = [];
    var wordsRegex = /[\s\u200b]+/;
    var wordSeparator = overflowAny ? "" : " ";
    for (var l2 = 0; l2 < lines.length; l2++) {
      var line = lines[l2];
      var lineDims = this.calculateLabelDimensions(ele, line);
      var lineW = lineDims.width;
      if (overflowAny) {
        var processedLine = line.split("").join(zwsp);
        line = processedLine;
      }
      if (lineW > maxW) {
        var words = line.split(wordsRegex);
        var subline = "";
        for (var w2 = 0; w2 < words.length; w2++) {
          var word = words[w2];
          var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
          var testDims = this.calculateLabelDimensions(ele, testLine);
          var testW = testDims.width;
          if (testW <= maxW) {
            subline += word + wordSeparator;
          } else {
            if (subline) {
              wrappedLines.push(subline);
            }
            subline = word + wordSeparator;
          }
        }
        if (!subline.match(/^[\s\u200b]+$/)) {
          wrappedLines.push(subline);
        }
      } else {
        wrappedLines.push(line);
      }
    }
    rscratch("labelWrapCachedLines", wrappedLines);
    text2 = rscratch("labelWrapCachedText", wrappedLines.join("\n"));
    rscratch("labelWrapKey", labelKey);
  } else if (wrapStyle === "ellipsis") {
    var _maxW = ele.pstyle("text-max-width").pfValue;
    var ellipsized = "";
    var ellipsis = "…";
    var incLastCh = false;
    if (this.calculateLabelDimensions(ele, text2).width < _maxW) {
      return text2;
    }
    for (var i2 = 0; i2 < text2.length; i2++) {
      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text2[i2] + ellipsis).width;
      if (widthWithNextCh > _maxW) {
        break;
      }
      ellipsized += text2[i2];
      if (i2 === text2.length - 1) {
        incLastCh = true;
      }
    }
    if (!incLastCh) {
      ellipsized += ellipsis;
    }
    return ellipsized;
  }
  return text2;
};
BRp$9.getLabelJustification = function(ele) {
  var justification = ele.pstyle("text-justification").strValue;
  var textHalign = ele.pstyle("text-halign").strValue;
  if (justification === "auto") {
    if (ele.isNode()) {
      switch (textHalign) {
        case "left":
          return "right";
        case "right":
          return "left";
        default:
          return "center";
      }
    } else {
      return "center";
    }
  } else {
    return justification;
  }
};
BRp$9.calculateLabelDimensions = function(ele, text2) {
  var r2 = this;
  var cacheKey = hashString(text2, ele._private.labelDimsKey);
  var cache3 = r2.labelDimCache || (r2.labelDimCache = []);
  var existingVal = cache3[cacheKey];
  if (existingVal != null) {
    return existingVal;
  }
  var padding = 0;
  var fStyle = ele.pstyle("font-style").strValue;
  var size3 = ele.pstyle("font-size").pfValue;
  var family = ele.pstyle("font-family").strValue;
  var weight8 = ele.pstyle("font-weight").strValue;
  var canvas = this.labelCalcCanvas;
  var c2d = this.labelCalcCanvasContext;
  if (!canvas) {
    canvas = this.labelCalcCanvas = document.createElement("canvas");
    c2d = this.labelCalcCanvasContext = canvas.getContext("2d");
    var ds = canvas.style;
    ds.position = "absolute";
    ds.left = "-9999px";
    ds.top = "-9999px";
    ds.zIndex = "-1";
    ds.visibility = "hidden";
    ds.pointerEvents = "none";
  }
  c2d.font = "".concat(fStyle, " ").concat(weight8, " ").concat(size3, "px ").concat(family);
  var width2 = 0;
  var height2 = 0;
  var lines = text2.split("\n");
  for (var i2 = 0; i2 < lines.length; i2++) {
    var line = lines[i2];
    var metrics = c2d.measureText(line);
    var w2 = Math.ceil(metrics.width);
    var h2 = size3;
    width2 = Math.max(w2, width2);
    height2 += h2;
  }
  width2 += padding;
  height2 += padding;
  return cache3[cacheKey] = {
    width: width2,
    height: height2
  };
};
BRp$9.calculateLabelAngle = function(ele, prefix) {
  var _p = ele._private;
  var rs = _p.rscratch;
  var isEdge2 = ele.isEdge();
  var prefixDash = prefix ? prefix + "-" : "";
  var rot = ele.pstyle(prefixDash + "text-rotation");
  var rotStr = rot.strValue;
  if (rotStr === "none") {
    return 0;
  } else if (isEdge2 && rotStr === "autorotate") {
    return rs.labelAutoAngle;
  } else if (rotStr === "autorotate") {
    return 0;
  } else {
    return rot.pfValue;
  }
};
BRp$9.calculateLabelAngles = function(ele) {
  var r2 = this;
  var isEdge2 = ele.isEdge();
  var _p = ele._private;
  var rs = _p.rscratch;
  rs.labelAngle = r2.calculateLabelAngle(ele);
  if (isEdge2) {
    rs.sourceLabelAngle = r2.calculateLabelAngle(ele, "source");
    rs.targetLabelAngle = r2.calculateLabelAngle(ele, "target");
  }
};
var BRp$8 = {};
var TOO_SMALL_CUT_RECT = 28;
var warnedCutRect = false;
BRp$8.getNodeShape = function(node) {
  var r2 = this;
  var shape = node.pstyle("shape").value;
  if (shape === "cutrectangle" && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
    if (!warnedCutRect) {
      warn("The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead");
      warnedCutRect = true;
    }
    return "rectangle";
  }
  if (node.isParent()) {
    if (shape === "rectangle" || shape === "roundrectangle" || shape === "round-rectangle" || shape === "cutrectangle" || shape === "cut-rectangle" || shape === "barrel") {
      return shape;
    } else {
      return "rectangle";
    }
  }
  if (shape === "polygon") {
    var points = node.pstyle("shape-polygon-points").value;
    return r2.nodeShapes.makePolygon(points).name;
  }
  return shape;
};
var BRp$7 = {};
BRp$7.registerCalculationListeners = function() {
  var cy2 = this.cy;
  var elesToUpdate = cy2.collection();
  var r2 = this;
  var enqueue = function enqueue2(eles) {
    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    elesToUpdate.merge(eles);
    if (dirtyStyleCaches) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        rstyle.clean = false;
        rstyle.cleanConnected = false;
      }
    }
  };
  r2.binder(cy2).on("bounds.* dirty.*", function onDirtyBounds(e2) {
    var ele = e2.target;
    enqueue(ele);
  }).on("style.* background.*", function onDirtyStyle(e2) {
    var ele = e2.target;
    enqueue(ele, false);
  });
  var updateEleCalcs = function updateEleCalcs2(willDraw) {
    if (willDraw) {
      var fns = r2.onUpdateEleCalcsFns;
      elesToUpdate.cleanStyle();
      for (var i2 = 0; i2 < elesToUpdate.length; i2++) {
        var ele = elesToUpdate[i2];
        var rstyle = ele._private.rstyle;
        if (ele.isNode() && !rstyle.cleanConnected) {
          enqueue(ele.connectedEdges());
          rstyle.cleanConnected = true;
        }
      }
      if (fns) {
        for (var _i = 0; _i < fns.length; _i++) {
          var fn3 = fns[_i];
          fn3(willDraw, elesToUpdate);
        }
      }
      r2.recalculateRenderedStyle(elesToUpdate);
      elesToUpdate = cy2.collection();
    }
  };
  r2.flushRenderedStyleQueue = function() {
    updateEleCalcs(true);
  };
  r2.beforeRender(updateEleCalcs, r2.beforeRenderPriorities.eleCalcs);
};
BRp$7.onUpdateEleCalcs = function(fn3) {
  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
  fns.push(fn3);
};
BRp$7.recalculateRenderedStyle = function(eles, useCache) {
  var isCleanConnected = function isCleanConnected2(ele2) {
    return ele2._private.rstyle.cleanConnected;
  };
  var edges3 = [];
  var nodes3 = [];
  if (this.destroyed) {
    return;
  }
  if (useCache === void 0) {
    useCache = true;
  }
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
      rstyle.clean = false;
    }
    if (useCache && rstyle.clean || ele.removed()) {
      continue;
    }
    if (ele.pstyle("display").value === "none") {
      continue;
    }
    if (_p.group === "nodes") {
      nodes3.push(ele);
    } else {
      edges3.push(ele);
    }
    rstyle.clean = true;
  }
  for (var _i2 = 0; _i2 < nodes3.length; _i2++) {
    var _ele = nodes3[_i2];
    var _p2 = _ele._private;
    var _rstyle = _p2.rstyle;
    var pos = _ele.position();
    this.recalculateNodeLabelProjection(_ele);
    _rstyle.nodeX = pos.x;
    _rstyle.nodeY = pos.y;
    _rstyle.nodeW = _ele.pstyle("width").pfValue;
    _rstyle.nodeH = _ele.pstyle("height").pfValue;
  }
  this.recalculateEdgeProjections(edges3);
  for (var _i3 = 0; _i3 < edges3.length; _i3++) {
    var _ele2 = edges3[_i3];
    var _p3 = _ele2._private;
    var _rstyle2 = _p3.rstyle;
    var rs = _p3.rscratch;
    _rstyle2.srcX = rs.arrowStartX;
    _rstyle2.srcY = rs.arrowStartY;
    _rstyle2.tgtX = rs.arrowEndX;
    _rstyle2.tgtY = rs.arrowEndY;
    _rstyle2.midX = rs.midX;
    _rstyle2.midY = rs.midY;
    _rstyle2.labelAngle = rs.labelAngle;
    _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
    _rstyle2.targetLabelAngle = rs.targetLabelAngle;
  }
};
var BRp$6 = {};
BRp$6.updateCachedGrabbedEles = function() {
  var eles = this.cachedZSortedEles;
  if (!eles) {
    return;
  }
  eles.drag = [];
  eles.nondrag = [];
  var grabTargets = [];
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var rs = ele._private.rscratch;
    if (ele.grabbed() && !ele.isParent()) {
      grabTargets.push(ele);
    } else if (rs.inDragLayer) {
      eles.drag.push(ele);
    } else {
      eles.nondrag.push(ele);
    }
  }
  for (var i2 = 0; i2 < grabTargets.length; i2++) {
    var ele = grabTargets[i2];
    eles.drag.push(ele);
  }
};
BRp$6.invalidateCachedZSortedEles = function() {
  this.cachedZSortedEles = null;
};
BRp$6.getCachedZSortedEles = function(forceRecalc) {
  if (forceRecalc || !this.cachedZSortedEles) {
    var eles = this.cy.mutableElements().toArray();
    eles.sort(zIndexSort);
    eles.interactive = eles.filter(function(ele) {
      return ele.interactive();
    });
    this.cachedZSortedEles = eles;
    this.updateCachedGrabbedEles();
  } else {
    eles = this.cachedZSortedEles;
  }
  return eles;
};
var BRp$5 = {};
[BRp$e, BRp$d, BRp$c, BRp$b, BRp$a, BRp$9, BRp$8, BRp$7, BRp$6].forEach(function(props) {
  extend$1(BRp$5, props);
});
var BRp$4 = {};
BRp$4.getCachedImage = function(url, crossOrigin, onLoad) {
  var r2 = this;
  var imageCache = r2.imageCache = r2.imageCache || {};
  var cache3 = imageCache[url];
  if (cache3) {
    if (!cache3.image.complete) {
      cache3.image.addEventListener("load", onLoad);
    }
    return cache3.image;
  } else {
    cache3 = imageCache[url] = imageCache[url] || {};
    var image = cache3.image = new Image();
    image.addEventListener("load", onLoad);
    image.addEventListener("error", function() {
      image.error = true;
    });
    var dataUriPrefix = "data:";
    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
    if (!isDataUri) {
      crossOrigin = crossOrigin === "null" ? null : crossOrigin;
      image.crossOrigin = crossOrigin;
    }
    image.src = url;
    return image;
  }
};
var BRp$3 = {};
BRp$3.registerBinding = function(target, event3, handler, useCapture) {
  var args = Array.prototype.slice.apply(arguments, [1]);
  var b2 = this.binder(target);
  return b2.on.apply(b2, args);
};
BRp$3.binder = function(tgt) {
  var r2 = this;
  var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);
  if (r2.supportsPassiveEvents == null) {
    var supportsPassive = false;
    try {
      var opts = Object.defineProperty({}, "passive", {
        get: function get2() {
          supportsPassive = true;
          return true;
        }
      });
      window.addEventListener("test", null, opts);
    } catch (err) {
    }
    r2.supportsPassiveEvents = supportsPassive;
  }
  var on3 = function on4(event3, handler, useCapture) {
    var args = Array.prototype.slice.call(arguments);
    if (tgtIsDom && r2.supportsPassiveEvents) {
      args[2] = {
        capture: useCapture != null ? useCapture : false,
        passive: false,
        once: false
      };
    }
    r2.bindings.push({
      target: tgt,
      args
    });
    (tgt.addEventListener || tgt.on).apply(tgt, args);
    return this;
  };
  return {
    on: on3,
    addEventListener: on3,
    addListener: on3,
    bind: on3
  };
};
BRp$3.nodeIsDraggable = function(node) {
  return node && node.isNode() && !node.locked() && node.grabbable();
};
BRp$3.nodeIsGrabbable = function(node) {
  return this.nodeIsDraggable(node) && node.interactive();
};
BRp$3.load = function() {
  var r2 = this;
  var isSelected = function isSelected2(ele) {
    return ele.selected();
  };
  var triggerEvents = function triggerEvents2(target, names, e2, position3) {
    if (target == null) {
      target = r2.cy;
    }
    for (var i2 = 0; i2 < names.length; i2++) {
      var name2 = names[i2];
      target.emit({
        originalEvent: e2,
        type: name2,
        position: position3
      });
    }
  };
  var isMultSelKeyDown = function isMultSelKeyDown2(e2) {
    return e2.shiftKey || e2.metaKey || e2.ctrlKey;
  };
  var allowPanningPassthrough = function allowPanningPassthrough2(down, downs) {
    var allowPassthrough = true;
    if (r2.cy.hasCompoundNodes() && down && down.pannable()) {
      for (var i2 = 0; downs && i2 < downs.length; i2++) {
        var down = downs[i2];
        if (down.isNode() && down.isParent() && !down.pannable()) {
          allowPassthrough = false;
          break;
        }
      }
    } else {
      allowPassthrough = true;
    }
    return allowPassthrough;
  };
  var setGrabbed = function setGrabbed2(ele) {
    ele[0]._private.grabbed = true;
  };
  var setFreed = function setFreed2(ele) {
    ele[0]._private.grabbed = false;
  };
  var setInDragLayer = function setInDragLayer2(ele) {
    ele[0]._private.rscratch.inDragLayer = true;
  };
  var setOutDragLayer = function setOutDragLayer2(ele) {
    ele[0]._private.rscratch.inDragLayer = false;
  };
  var setGrabTarget = function setGrabTarget2(ele) {
    ele[0]._private.rscratch.isGrabTarget = true;
  };
  var removeGrabTarget = function removeGrabTarget2(ele) {
    ele[0]._private.rscratch.isGrabTarget = false;
  };
  var addToDragList = function addToDragList2(ele, opts) {
    var list2 = opts.addToList;
    var listHasEle = list2.has(ele);
    if (!listHasEle && ele.grabbable() && !ele.locked()) {
      list2.merge(ele);
      setGrabbed(ele);
    }
  };
  var addDescendantsToDrag = function addDescendantsToDrag2(node, opts) {
    if (!node.cy().hasCompoundNodes()) {
      return;
    }
    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    }
    var innerNodes = node.descendants();
    if (opts.inDragLayer) {
      innerNodes.forEach(setInDragLayer);
      innerNodes.connectedEdges().forEach(setInDragLayer);
    }
    if (opts.addToList) {
      addToDragList(innerNodes, opts);
    }
  };
  var addNodesToDrag = function addNodesToDrag2(nodes3, opts) {
    opts = opts || {};
    var hasCompoundNodes2 = nodes3.cy().hasCompoundNodes();
    if (opts.inDragLayer) {
      nodes3.forEach(setInDragLayer);
      nodes3.neighborhood().stdFilter(function(ele) {
        return !hasCompoundNodes2 || ele.isEdge();
      }).forEach(setInDragLayer);
    }
    if (opts.addToList) {
      nodes3.forEach(function(ele) {
        addToDragList(ele, opts);
      });
    }
    addDescendantsToDrag(nodes3, opts);
    updateAncestorsInDragLayer(nodes3, {
      inDragLayer: opts.inDragLayer
    });
    r2.updateCachedGrabbedEles();
  };
  var addNodeToDrag = addNodesToDrag;
  var freeDraggedElements = function freeDraggedElements2(grabbedEles) {
    if (!grabbedEles) {
      return;
    }
    r2.getCachedZSortedEles().forEach(function(ele) {
      setFreed(ele);
      setOutDragLayer(ele);
      removeGrabTarget(ele);
    });
    r2.updateCachedGrabbedEles();
  };
  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer2(node, opts) {
    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    }
    if (!node.cy().hasCompoundNodes()) {
      return;
    }
    var parent4 = node.ancestors().orphans();
    if (parent4.same(node)) {
      return;
    }
    var nodes3 = parent4.descendants().spawnSelf().merge(parent4).unmerge(node).unmerge(node.descendants());
    var edges3 = nodes3.connectedEdges();
    if (opts.inDragLayer) {
      edges3.forEach(setInDragLayer);
      nodes3.forEach(setInDragLayer);
    }
    if (opts.addToList) {
      nodes3.forEach(function(ele) {
        addToDragList(ele, opts);
      });
    }
  };
  var blurActiveDomElement = function blurActiveDomElement2() {
    if (document.activeElement != null && document.activeElement.blur != null) {
      document.activeElement.blur();
    }
  };
  var haveMutationsApi = typeof MutationObserver !== "undefined";
  var haveResizeObserverApi = typeof ResizeObserver !== "undefined";
  if (haveMutationsApi) {
    r2.removeObserver = new MutationObserver(function(mutns) {
      for (var i2 = 0; i2 < mutns.length; i2++) {
        var mutn = mutns[i2];
        var rNodes = mutn.removedNodes;
        if (rNodes) {
          for (var j2 = 0; j2 < rNodes.length; j2++) {
            var rNode = rNodes[j2];
            if (rNode === r2.container) {
              r2.destroy();
              break;
            }
          }
        }
      }
    });
    if (r2.container.parentNode) {
      r2.removeObserver.observe(r2.container.parentNode, {
        childList: true
      });
    }
  } else {
    r2.registerBinding(r2.container, "DOMNodeRemoved", function(e2) {
      r2.destroy();
    });
  }
  var onResize = debounce__default["default"](function() {
    r2.cy.resize();
  }, 100);
  if (haveMutationsApi) {
    r2.styleObserver = new MutationObserver(onResize);
    r2.styleObserver.observe(r2.container, {
      attributes: true
    });
  }
  r2.registerBinding(window, "resize", onResize);
  if (haveResizeObserverApi) {
    r2.resizeObserver = new ResizeObserver(onResize);
    r2.resizeObserver.observe(r2.container);
  }
  var forEachUp = function forEachUp2(domEle, fn3) {
    while (domEle != null) {
      fn3(domEle);
      domEle = domEle.parentNode;
    }
  };
  var invalidateCoords = function invalidateCoords2() {
    r2.invalidateContainerClientCoordsCache();
  };
  forEachUp(r2.container, function(domEle) {
    r2.registerBinding(domEle, "transitionend", invalidateCoords);
    r2.registerBinding(domEle, "animationend", invalidateCoords);
    r2.registerBinding(domEle, "scroll", invalidateCoords);
  });
  r2.registerBinding(r2.container, "contextmenu", function(e2) {
    e2.preventDefault();
  });
  var inBoxSelection = function inBoxSelection2() {
    return r2.selection[4] !== 0;
  };
  var eventInContainer = function eventInContainer2(e2) {
    var containerPageCoords = r2.findContainerClientCoords();
    var x2 = containerPageCoords[0];
    var y2 = containerPageCoords[1];
    var width2 = containerPageCoords[2];
    var height2 = containerPageCoords[3];
    var positions2 = e2.touches ? e2.touches : [e2];
    var atLeastOnePosInside = false;
    for (var i2 = 0; i2 < positions2.length; i2++) {
      var p2 = positions2[i2];
      if (x2 <= p2.clientX && p2.clientX <= x2 + width2 && y2 <= p2.clientY && p2.clientY <= y2 + height2) {
        atLeastOnePosInside = true;
        break;
      }
    }
    if (!atLeastOnePosInside) {
      return false;
    }
    var container2 = r2.container;
    var target = e2.target;
    var tParent = target.parentNode;
    var containerIsTarget = false;
    while (tParent) {
      if (tParent === container2) {
        containerIsTarget = true;
        break;
      }
      tParent = tParent.parentNode;
    }
    if (!containerIsTarget) {
      return false;
    }
    return true;
  };
  r2.registerBinding(r2.container, "mousedown", function mousedownHandler(e2) {
    if (!eventInContainer(e2)) {
      return;
    }
    e2.preventDefault();
    blurActiveDomElement();
    r2.hoverData.capture = true;
    r2.hoverData.which = e2.which;
    var cy2 = r2.cy;
    var gpos = [e2.clientX, e2.clientY];
    var pos = r2.projectIntoViewport(gpos[0], gpos[1]);
    var select = r2.selection;
    var nears = r2.findNearestElements(pos[0], pos[1], true, false);
    var near = nears[0];
    var draggedElements = r2.dragData.possibleDragElements;
    r2.hoverData.mdownPos = pos;
    r2.hoverData.mdownGPos = gpos;
    var checkForTaphold = function checkForTaphold2() {
      r2.hoverData.tapholdCancelled = false;
      clearTimeout(r2.hoverData.tapholdTimeout);
      r2.hoverData.tapholdTimeout = setTimeout(function() {
        if (r2.hoverData.tapholdCancelled) {
          return;
        } else {
          var ele = r2.hoverData.down;
          if (ele) {
            ele.emit({
              originalEvent: e2,
              type: "taphold",
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          } else {
            cy2.emit({
              originalEvent: e2,
              type: "taphold",
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
        }
      }, r2.tapholdDuration);
    };
    if (e2.which == 3) {
      r2.hoverData.cxtStarted = true;
      var cxtEvt = {
        originalEvent: e2,
        type: "cxttapstart",
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
      if (near) {
        near.activate();
        near.emit(cxtEvt);
        r2.hoverData.down = near;
      } else {
        cy2.emit(cxtEvt);
      }
      r2.hoverData.downTime = (/* @__PURE__ */ new Date()).getTime();
      r2.hoverData.cxtDragged = false;
    } else if (e2.which == 1) {
      if (near) {
        near.activate();
      }
      {
        if (near != null) {
          if (r2.nodeIsGrabbable(near)) {
            var makeEvent = function makeEvent2(type) {
              return {
                originalEvent: e2,
                type,
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              };
            };
            var triggerGrab = function triggerGrab2(ele) {
              ele.emit(makeEvent("grab"));
            };
            setGrabTarget(near);
            if (!near.selected()) {
              draggedElements = r2.dragData.possibleDragElements = cy2.collection();
              addNodeToDrag(near, {
                addToList: draggedElements
              });
              near.emit(makeEvent("grabon")).emit(makeEvent("grab"));
            } else {
              draggedElements = r2.dragData.possibleDragElements = cy2.collection();
              var selectedNodes = cy2.$(function(ele) {
                return ele.isNode() && ele.selected() && r2.nodeIsGrabbable(ele);
              });
              addNodesToDrag(selectedNodes, {
                addToList: draggedElements
              });
              near.emit(makeEvent("grabon"));
              selectedNodes.forEach(triggerGrab);
            }
            r2.redrawHint("eles", true);
            r2.redrawHint("drag", true);
          }
        }
        r2.hoverData.down = near;
        r2.hoverData.downs = nears;
        r2.hoverData.downTime = (/* @__PURE__ */ new Date()).getTime();
      }
      triggerEvents(near, ["mousedown", "tapstart", "vmousedown"], e2, {
        x: pos[0],
        y: pos[1]
      });
      if (near == null) {
        select[4] = 1;
        r2.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r2.redrawHint("select", true);
        r2.redraw();
      } else if (near.pannable()) {
        select[4] = 1;
      }
      checkForTaphold();
    }
    select[0] = select[2] = pos[0];
    select[1] = select[3] = pos[1];
  }, false);
  r2.registerBinding(window, "mousemove", function mousemoveHandler(e2) {
    var capture = r2.hoverData.capture;
    if (!capture && !eventInContainer(e2)) {
      return;
    }
    var preventDefault2 = false;
    var cy2 = r2.cy;
    var zoom2 = cy2.zoom();
    var gpos = [e2.clientX, e2.clientY];
    var pos = r2.projectIntoViewport(gpos[0], gpos[1]);
    var mdownPos = r2.hoverData.mdownPos;
    var mdownGPos = r2.hoverData.mdownGPos;
    var select = r2.selection;
    var near = null;
    if (!r2.hoverData.draggingEles && !r2.hoverData.dragging && !r2.hoverData.selecting) {
      near = r2.findNearestElement(pos[0], pos[1], true, false);
    }
    var last2 = r2.hoverData.last;
    var down = r2.hoverData.down;
    var disp = [pos[0] - select[2], pos[1] - select[3]];
    var draggedElements = r2.dragData.possibleDragElements;
    var isOverThresholdDrag;
    if (mdownGPos) {
      var dx = gpos[0] - mdownGPos[0];
      var dx2 = dx * dx;
      var dy = gpos[1] - mdownGPos[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      r2.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist22 >= r2.desktopTapThreshold2;
    }
    var multSelKeyDown = isMultSelKeyDown(e2);
    if (isOverThresholdDrag) {
      r2.hoverData.tapholdCancelled = true;
    }
    var updateDragDelta = function updateDragDelta2() {
      var dragDelta2 = r2.hoverData.dragDelta = r2.hoverData.dragDelta || [];
      if (dragDelta2.length === 0) {
        dragDelta2.push(disp[0]);
        dragDelta2.push(disp[1]);
      } else {
        dragDelta2[0] += disp[0];
        dragDelta2[1] += disp[1];
      }
    };
    preventDefault2 = true;
    triggerEvents(near, ["mousemove", "vmousemove", "tapdrag"], e2, {
      x: pos[0],
      y: pos[1]
    });
    var goIntoBoxMode = function goIntoBoxMode2() {
      r2.data.bgActivePosistion = void 0;
      if (!r2.hoverData.selecting) {
        cy2.emit({
          originalEvent: e2,
          type: "boxstart",
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }
      select[4] = 1;
      r2.hoverData.selecting = true;
      r2.redrawHint("select", true);
      r2.redraw();
    };
    if (r2.hoverData.which === 3) {
      if (isOverThresholdDrag) {
        var cxtEvt = {
          originalEvent: e2,
          type: "cxtdrag",
          position: {
            x: pos[0],
            y: pos[1]
          }
        };
        if (down) {
          down.emit(cxtEvt);
        } else {
          cy2.emit(cxtEvt);
        }
        r2.hoverData.cxtDragged = true;
        if (!r2.hoverData.cxtOver || near !== r2.hoverData.cxtOver) {
          if (r2.hoverData.cxtOver) {
            r2.hoverData.cxtOver.emit({
              originalEvent: e2,
              type: "cxtdragout",
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
          r2.hoverData.cxtOver = near;
          if (near) {
            near.emit({
              originalEvent: e2,
              type: "cxtdragover",
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
        }
      }
    } else if (r2.hoverData.dragging) {
      preventDefault2 = true;
      if (cy2.panningEnabled() && cy2.userPanningEnabled()) {
        var deltaP;
        if (r2.hoverData.justStartedPan) {
          var mdPos = r2.hoverData.mdownPos;
          deltaP = {
            x: (pos[0] - mdPos[0]) * zoom2,
            y: (pos[1] - mdPos[1]) * zoom2
          };
          r2.hoverData.justStartedPan = false;
        } else {
          deltaP = {
            x: disp[0] * zoom2,
            y: disp[1] * zoom2
          };
        }
        cy2.panBy(deltaP);
        cy2.emit("dragpan");
        r2.hoverData.dragged = true;
      }
      pos = r2.projectIntoViewport(e2.clientX, e2.clientY);
    } else if (select[4] == 1 && (down == null || down.pannable())) {
      if (isOverThresholdDrag) {
        if (!r2.hoverData.dragging && cy2.boxSelectionEnabled() && (multSelKeyDown || !cy2.panningEnabled() || !cy2.userPanningEnabled())) {
          goIntoBoxMode();
        } else if (!r2.hoverData.selecting && cy2.panningEnabled() && cy2.userPanningEnabled()) {
          var allowPassthrough = allowPanningPassthrough(down, r2.hoverData.downs);
          if (allowPassthrough) {
            r2.hoverData.dragging = true;
            r2.hoverData.justStartedPan = true;
            select[4] = 0;
            r2.data.bgActivePosistion = array2point(mdownPos);
            r2.redrawHint("select", true);
            r2.redraw();
          }
        }
        if (down && down.pannable() && down.active()) {
          down.unactivate();
        }
      }
    } else {
      if (down && down.pannable() && down.active()) {
        down.unactivate();
      }
      if ((!down || !down.grabbed()) && near != last2) {
        if (last2) {
          triggerEvents(last2, ["mouseout", "tapdragout"], e2, {
            x: pos[0],
            y: pos[1]
          });
        }
        if (near) {
          triggerEvents(near, ["mouseover", "tapdragover"], e2, {
            x: pos[0],
            y: pos[1]
          });
        }
        r2.hoverData.last = near;
      }
      if (down) {
        if (isOverThresholdDrag) {
          if (cy2.boxSelectionEnabled() && multSelKeyDown) {
            if (down && down.grabbed()) {
              freeDraggedElements(draggedElements);
              down.emit("freeon");
              draggedElements.emit("free");
              if (r2.dragData.didDrag) {
                down.emit("dragfreeon");
                draggedElements.emit("dragfree");
              }
            }
            goIntoBoxMode();
          } else if (down && down.grabbed() && r2.nodeIsDraggable(down)) {
            var justStartedDrag = !r2.dragData.didDrag;
            if (justStartedDrag) {
              r2.redrawHint("eles", true);
            }
            r2.dragData.didDrag = true;
            if (!r2.hoverData.draggingEles) {
              addNodesToDrag(draggedElements, {
                inDragLayer: true
              });
            }
            var totalShift = {
              x: 0,
              y: 0
            };
            if (number$1(disp[0]) && number$1(disp[1])) {
              totalShift.x += disp[0];
              totalShift.y += disp[1];
              if (justStartedDrag) {
                var dragDelta = r2.hoverData.dragDelta;
                if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
                  totalShift.x += dragDelta[0];
                  totalShift.y += dragDelta[1];
                }
              }
            }
            r2.hoverData.draggingEles = true;
            draggedElements.silentShift(totalShift).emit("position drag");
            r2.redrawHint("drag", true);
            r2.redraw();
          }
        } else {
          updateDragDelta();
        }
      }
      preventDefault2 = true;
    }
    select[2] = pos[0];
    select[3] = pos[1];
    if (preventDefault2) {
      if (e2.stopPropagation)
        e2.stopPropagation();
      if (e2.preventDefault)
        e2.preventDefault();
      return false;
    }
  }, false);
  var clickTimeout, didDoubleClick, prevClickTimeStamp;
  r2.registerBinding(window, "mouseup", function mouseupHandler(e2) {
    var capture = r2.hoverData.capture;
    if (!capture) {
      return;
    }
    r2.hoverData.capture = false;
    var cy2 = r2.cy;
    var pos = r2.projectIntoViewport(e2.clientX, e2.clientY);
    var select = r2.selection;
    var near = r2.findNearestElement(pos[0], pos[1], true, false);
    var draggedElements = r2.dragData.possibleDragElements;
    var down = r2.hoverData.down;
    var multSelKeyDown = isMultSelKeyDown(e2);
    if (r2.data.bgActivePosistion) {
      r2.redrawHint("select", true);
      r2.redraw();
    }
    r2.hoverData.tapholdCancelled = true;
    r2.data.bgActivePosistion = void 0;
    if (down) {
      down.unactivate();
    }
    if (r2.hoverData.which === 3) {
      var cxtEvt = {
        originalEvent: e2,
        type: "cxttapend",
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
      if (down) {
        down.emit(cxtEvt);
      } else {
        cy2.emit(cxtEvt);
      }
      if (!r2.hoverData.cxtDragged) {
        var cxtTap = {
          originalEvent: e2,
          type: "cxttap",
          position: {
            x: pos[0],
            y: pos[1]
          }
        };
        if (down) {
          down.emit(cxtTap);
        } else {
          cy2.emit(cxtTap);
        }
      }
      r2.hoverData.cxtDragged = false;
      r2.hoverData.which = null;
    } else if (r2.hoverData.which === 1) {
      triggerEvents(near, ["mouseup", "tapend", "vmouseup"], e2, {
        x: pos[0],
        y: pos[1]
      });
      if (!r2.dragData.didDrag && // didn't move a node around
      !r2.hoverData.dragged && // didn't pan
      !r2.hoverData.selecting && // not box selection
      !r2.hoverData.isOverThresholdDrag) {
        triggerEvents(down, ["click", "tap", "vclick"], e2, {
          x: pos[0],
          y: pos[1]
        });
        didDoubleClick = false;
        if (e2.timeStamp - prevClickTimeStamp <= cy2.multiClickDebounceTime()) {
          clickTimeout && clearTimeout(clickTimeout);
          didDoubleClick = true;
          prevClickTimeStamp = null;
          triggerEvents(down, ["dblclick", "dbltap", "vdblclick"], e2, {
            x: pos[0],
            y: pos[1]
          });
        } else {
          clickTimeout = setTimeout(function() {
            if (didDoubleClick)
              return;
            triggerEvents(down, ["oneclick", "onetap", "voneclick"], e2, {
              x: pos[0],
              y: pos[1]
            });
          }, cy2.multiClickDebounceTime());
          prevClickTimeStamp = e2.timeStamp;
        }
      }
      if (down == null && !r2.dragData.didDrag && !r2.hoverData.selecting && !r2.hoverData.dragged && !isMultSelKeyDown(e2)) {
        cy2.$(isSelected).unselect(["tapunselect"]);
        if (draggedElements.length > 0) {
          r2.redrawHint("eles", true);
        }
        r2.dragData.possibleDragElements = draggedElements = cy2.collection();
      }
      if (near == down && !r2.dragData.didDrag && !r2.hoverData.selecting) {
        if (near != null && near._private.selectable) {
          if (r2.hoverData.dragging)
            ;
          else if (cy2.selectionType() === "additive" || multSelKeyDown) {
            if (near.selected()) {
              near.unselect(["tapunselect"]);
            } else {
              near.select(["tapselect"]);
            }
          } else {
            if (!multSelKeyDown) {
              cy2.$(isSelected).unmerge(near).unselect(["tapunselect"]);
              near.select(["tapselect"]);
            }
          }
          r2.redrawHint("eles", true);
        }
      }
      if (r2.hoverData.selecting) {
        var box = cy2.collection(r2.getAllInBox(select[0], select[1], select[2], select[3]));
        r2.redrawHint("select", true);
        if (box.length > 0) {
          r2.redrawHint("eles", true);
        }
        cy2.emit({
          type: "boxend",
          originalEvent: e2,
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
        var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
          return ele.selectable() && !ele.selected();
        };
        if (cy2.selectionType() === "additive") {
          box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
        } else {
          if (!multSelKeyDown) {
            cy2.$(isSelected).unmerge(box).unselect();
          }
          box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
        }
        r2.redraw();
      }
      if (r2.hoverData.dragging) {
        r2.hoverData.dragging = false;
        r2.redrawHint("select", true);
        r2.redrawHint("eles", true);
        r2.redraw();
      }
      if (!select[4]) {
        r2.redrawHint("drag", true);
        r2.redrawHint("eles", true);
        var downWasGrabbed = down && down.grabbed();
        freeDraggedElements(draggedElements);
        if (downWasGrabbed) {
          down.emit("freeon");
          draggedElements.emit("free");
          if (r2.dragData.didDrag) {
            down.emit("dragfreeon");
            draggedElements.emit("dragfree");
          }
        }
      }
    }
    select[4] = 0;
    r2.hoverData.down = null;
    r2.hoverData.cxtStarted = false;
    r2.hoverData.draggingEles = false;
    r2.hoverData.selecting = false;
    r2.hoverData.isOverThresholdDrag = false;
    r2.dragData.didDrag = false;
    r2.hoverData.dragged = false;
    r2.hoverData.dragDelta = [];
    r2.hoverData.mdownPos = null;
    r2.hoverData.mdownGPos = null;
  }, false);
  var wheelHandler = function wheelHandler2(e2) {
    if (r2.scrollingPage) {
      return;
    }
    var cy2 = r2.cy;
    var zoom2 = cy2.zoom();
    var pan2 = cy2.pan();
    var pos = r2.projectIntoViewport(e2.clientX, e2.clientY);
    var rpos = [pos[0] * zoom2 + pan2.x, pos[1] * zoom2 + pan2.y];
    if (r2.hoverData.draggingEles || r2.hoverData.dragging || r2.hoverData.cxtStarted || inBoxSelection()) {
      e2.preventDefault();
      return;
    }
    if (cy2.panningEnabled() && cy2.userPanningEnabled() && cy2.zoomingEnabled() && cy2.userZoomingEnabled()) {
      e2.preventDefault();
      r2.data.wheelZooming = true;
      clearTimeout(r2.data.wheelTimeout);
      r2.data.wheelTimeout = setTimeout(function() {
        r2.data.wheelZooming = false;
        r2.redrawHint("eles", true);
        r2.redraw();
      }, 150);
      var diff2;
      if (e2.deltaY != null) {
        diff2 = e2.deltaY / -250;
      } else if (e2.wheelDeltaY != null) {
        diff2 = e2.wheelDeltaY / 1e3;
      } else {
        diff2 = e2.wheelDelta / 1e3;
      }
      diff2 = diff2 * r2.wheelSensitivity;
      var needsWheelFix = e2.deltaMode === 1;
      if (needsWheelFix) {
        diff2 *= 33;
      }
      var newZoom = cy2.zoom() * Math.pow(10, diff2);
      if (e2.type === "gesturechange") {
        newZoom = r2.gestureStartZoom * e2.scale;
      }
      cy2.zoom({
        level: newZoom,
        renderedPosition: {
          x: rpos[0],
          y: rpos[1]
        }
      });
      cy2.emit(e2.type === "gesturechange" ? "pinchzoom" : "scrollzoom");
    }
  };
  r2.registerBinding(r2.container, "wheel", wheelHandler, true);
  r2.registerBinding(window, "scroll", function scrollHandler(e2) {
    r2.scrollingPage = true;
    clearTimeout(r2.scrollingPageTimeout);
    r2.scrollingPageTimeout = setTimeout(function() {
      r2.scrollingPage = false;
    }, 250);
  }, true);
  r2.registerBinding(r2.container, "gesturestart", function gestureStartHandler(e2) {
    r2.gestureStartZoom = r2.cy.zoom();
    if (!r2.hasTouchStarted) {
      e2.preventDefault();
    }
  }, true);
  r2.registerBinding(r2.container, "gesturechange", function(e2) {
    if (!r2.hasTouchStarted) {
      wheelHandler(e2);
    }
  }, true);
  r2.registerBinding(r2.container, "mouseout", function mouseOutHandler(e2) {
    var pos = r2.projectIntoViewport(e2.clientX, e2.clientY);
    r2.cy.emit({
      originalEvent: e2,
      type: "mouseout",
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  r2.registerBinding(r2.container, "mouseover", function mouseOverHandler(e2) {
    var pos = r2.projectIntoViewport(e2.clientX, e2.clientY);
    r2.cy.emit({
      originalEvent: e2,
      type: "mouseover",
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  var f1x1, f1y1, f2x1, f2y1;
  var distance1, distance1Sq;
  var center1, modelCenter1;
  var offsetLeft, offsetTop;
  var containerWidth, containerHeight;
  var twoFingersStartInside;
  var distance = function distance2(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  };
  var distanceSq = function distanceSq2(x1, y1, x2, y2) {
    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
  };
  var touchstartHandler;
  r2.registerBinding(r2.container, "touchstart", touchstartHandler = function touchstartHandler2(e2) {
    r2.hasTouchStarted = true;
    if (!eventInContainer(e2)) {
      return;
    }
    blurActiveDomElement();
    r2.touchData.capture = true;
    r2.data.bgActivePosistion = void 0;
    var cy2 = r2.cy;
    var now2 = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    if (e2.touches[0]) {
      var pos = r2.projectIntoViewport(e2.touches[0].clientX, e2.touches[0].clientY);
      now2[0] = pos[0];
      now2[1] = pos[1];
    }
    if (e2.touches[1]) {
      var pos = r2.projectIntoViewport(e2.touches[1].clientX, e2.touches[1].clientY);
      now2[2] = pos[0];
      now2[3] = pos[1];
    }
    if (e2.touches[2]) {
      var pos = r2.projectIntoViewport(e2.touches[2].clientX, e2.touches[2].clientY);
      now2[4] = pos[0];
      now2[5] = pos[1];
    }
    if (e2.touches[1]) {
      r2.touchData.singleTouchMoved = true;
      freeDraggedElements(r2.dragData.touchDragEles);
      var offsets = r2.findContainerClientCoords();
      offsetLeft = offsets[0];
      offsetTop = offsets[1];
      containerWidth = offsets[2];
      containerHeight = offsets[3];
      f1x1 = e2.touches[0].clientX - offsetLeft;
      f1y1 = e2.touches[0].clientY - offsetTop;
      f2x1 = e2.touches[1].clientX - offsetLeft;
      f2y1 = e2.touches[1].clientY - offsetTop;
      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
      var pan2 = cy2.pan();
      var zoom2 = cy2.zoom();
      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
      modelCenter1 = [(center1[0] - pan2.x) / zoom2, (center1[1] - pan2.y) / zoom2];
      var cxtDistThreshold = 200;
      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
      if (distance1Sq < cxtDistThresholdSq && !e2.touches[2]) {
        var near1 = r2.findNearestElement(now2[0], now2[1], true, true);
        var near2 = r2.findNearestElement(now2[2], now2[3], true, true);
        if (near1 && near1.isNode()) {
          near1.activate().emit({
            originalEvent: e2,
            type: "cxttapstart",
            position: {
              x: now2[0],
              y: now2[1]
            }
          });
          r2.touchData.start = near1;
        } else if (near2 && near2.isNode()) {
          near2.activate().emit({
            originalEvent: e2,
            type: "cxttapstart",
            position: {
              x: now2[0],
              y: now2[1]
            }
          });
          r2.touchData.start = near2;
        } else {
          cy2.emit({
            originalEvent: e2,
            type: "cxttapstart",
            position: {
              x: now2[0],
              y: now2[1]
            }
          });
        }
        if (r2.touchData.start) {
          r2.touchData.start._private.grabbed = false;
        }
        r2.touchData.cxt = true;
        r2.touchData.cxtDragged = false;
        r2.data.bgActivePosistion = void 0;
        r2.redraw();
        return;
      }
    }
    if (e2.touches[2]) {
      if (cy2.boxSelectionEnabled()) {
        e2.preventDefault();
      }
    } else if (e2.touches[1])
      ;
    else if (e2.touches[0]) {
      var nears = r2.findNearestElements(now2[0], now2[1], true, true);
      var near = nears[0];
      if (near != null) {
        near.activate();
        r2.touchData.start = near;
        r2.touchData.starts = nears;
        if (r2.nodeIsGrabbable(near)) {
          var draggedEles = r2.dragData.touchDragEles = cy2.collection();
          var selectedNodes = null;
          r2.redrawHint("eles", true);
          r2.redrawHint("drag", true);
          if (near.selected()) {
            selectedNodes = cy2.$(function(ele) {
              return ele.selected() && r2.nodeIsGrabbable(ele);
            });
            addNodesToDrag(selectedNodes, {
              addToList: draggedEles
            });
          } else {
            addNodeToDrag(near, {
              addToList: draggedEles
            });
          }
          setGrabTarget(near);
          var makeEvent = function makeEvent2(type) {
            return {
              originalEvent: e2,
              type,
              position: {
                x: now2[0],
                y: now2[1]
              }
            };
          };
          near.emit(makeEvent("grabon"));
          if (selectedNodes) {
            selectedNodes.forEach(function(n2) {
              n2.emit(makeEvent("grab"));
            });
          } else {
            near.emit(makeEvent("grab"));
          }
        }
      }
      triggerEvents(near, ["touchstart", "tapstart", "vmousedown"], e2, {
        x: now2[0],
        y: now2[1]
      });
      if (near == null) {
        r2.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r2.redrawHint("select", true);
        r2.redraw();
      }
      r2.touchData.singleTouchMoved = false;
      r2.touchData.singleTouchStartTime = +/* @__PURE__ */ new Date();
      clearTimeout(r2.touchData.tapholdTimeout);
      r2.touchData.tapholdTimeout = setTimeout(function() {
        if (r2.touchData.singleTouchMoved === false && !r2.pinching && !r2.touchData.selecting) {
          triggerEvents(r2.touchData.start, ["taphold"], e2, {
            x: now2[0],
            y: now2[1]
          });
        }
      }, r2.tapholdDuration);
    }
    if (e2.touches.length >= 1) {
      var sPos = r2.touchData.startPosition = [];
      for (var i2 = 0; i2 < now2.length; i2++) {
        sPos[i2] = earlier[i2] = now2[i2];
      }
      var touch0 = e2.touches[0];
      r2.touchData.startGPosition = [touch0.clientX, touch0.clientY];
    }
  }, false);
  var touchmoveHandler;
  r2.registerBinding(window, "touchmove", touchmoveHandler = function touchmoveHandler2(e2) {
    var capture = r2.touchData.capture;
    if (!capture && !eventInContainer(e2)) {
      return;
    }
    var select = r2.selection;
    var cy2 = r2.cy;
    var now2 = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    var zoom2 = cy2.zoom();
    if (e2.touches[0]) {
      var pos = r2.projectIntoViewport(e2.touches[0].clientX, e2.touches[0].clientY);
      now2[0] = pos[0];
      now2[1] = pos[1];
    }
    if (e2.touches[1]) {
      var pos = r2.projectIntoViewport(e2.touches[1].clientX, e2.touches[1].clientY);
      now2[2] = pos[0];
      now2[3] = pos[1];
    }
    if (e2.touches[2]) {
      var pos = r2.projectIntoViewport(e2.touches[2].clientX, e2.touches[2].clientY);
      now2[4] = pos[0];
      now2[5] = pos[1];
    }
    var startGPos = r2.touchData.startGPosition;
    var isOverThresholdDrag;
    if (capture && e2.touches[0] && startGPos) {
      var disp = [];
      for (var j2 = 0; j2 < now2.length; j2++) {
        disp[j2] = now2[j2] - earlier[j2];
      }
      var dx = e2.touches[0].clientX - startGPos[0];
      var dx2 = dx * dx;
      var dy = e2.touches[0].clientY - startGPos[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      isOverThresholdDrag = dist22 >= r2.touchTapThreshold2;
    }
    if (capture && r2.touchData.cxt) {
      e2.preventDefault();
      var f1x2 = e2.touches[0].clientX - offsetLeft, f1y2 = e2.touches[0].clientY - offsetTop;
      var f2x2 = e2.touches[1].clientX - offsetLeft, f2y2 = e2.touches[1].clientY - offsetTop;
      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
      var factorSq = distance2Sq / distance1Sq;
      var distThreshold = 150;
      var distThresholdSq = distThreshold * distThreshold;
      var factorThreshold = 1.5;
      var factorThresholdSq = factorThreshold * factorThreshold;
      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
        r2.touchData.cxt = false;
        r2.data.bgActivePosistion = void 0;
        r2.redrawHint("select", true);
        var cxtEvt = {
          originalEvent: e2,
          type: "cxttapend",
          position: {
            x: now2[0],
            y: now2[1]
          }
        };
        if (r2.touchData.start) {
          r2.touchData.start.unactivate().emit(cxtEvt);
          r2.touchData.start = null;
        } else {
          cy2.emit(cxtEvt);
        }
      }
    }
    if (capture && r2.touchData.cxt) {
      var cxtEvt = {
        originalEvent: e2,
        type: "cxtdrag",
        position: {
          x: now2[0],
          y: now2[1]
        }
      };
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      if (r2.touchData.start) {
        r2.touchData.start.emit(cxtEvt);
      } else {
        cy2.emit(cxtEvt);
      }
      if (r2.touchData.start) {
        r2.touchData.start._private.grabbed = false;
      }
      r2.touchData.cxtDragged = true;
      var near = r2.findNearestElement(now2[0], now2[1], true, true);
      if (!r2.touchData.cxtOver || near !== r2.touchData.cxtOver) {
        if (r2.touchData.cxtOver) {
          r2.touchData.cxtOver.emit({
            originalEvent: e2,
            type: "cxtdragout",
            position: {
              x: now2[0],
              y: now2[1]
            }
          });
        }
        r2.touchData.cxtOver = near;
        if (near) {
          near.emit({
            originalEvent: e2,
            type: "cxtdragover",
            position: {
              x: now2[0],
              y: now2[1]
            }
          });
        }
      }
    } else if (capture && e2.touches[2] && cy2.boxSelectionEnabled()) {
      e2.preventDefault();
      r2.data.bgActivePosistion = void 0;
      this.lastThreeTouch = +/* @__PURE__ */ new Date();
      if (!r2.touchData.selecting) {
        cy2.emit({
          originalEvent: e2,
          type: "boxstart",
          position: {
            x: now2[0],
            y: now2[1]
          }
        });
      }
      r2.touchData.selecting = true;
      r2.touchData.didSelect = true;
      select[4] = 1;
      if (!select || select.length === 0 || select[0] === void 0) {
        select[0] = (now2[0] + now2[2] + now2[4]) / 3;
        select[1] = (now2[1] + now2[3] + now2[5]) / 3;
        select[2] = (now2[0] + now2[2] + now2[4]) / 3 + 1;
        select[3] = (now2[1] + now2[3] + now2[5]) / 3 + 1;
      } else {
        select[2] = (now2[0] + now2[2] + now2[4]) / 3;
        select[3] = (now2[1] + now2[3] + now2[5]) / 3;
      }
      r2.redrawHint("select", true);
      r2.redraw();
    } else if (capture && e2.touches[1] && !r2.touchData.didSelect && cy2.zoomingEnabled() && cy2.panningEnabled() && cy2.userZoomingEnabled() && cy2.userPanningEnabled()) {
      e2.preventDefault();
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      var draggedEles = r2.dragData.touchDragEles;
      if (draggedEles) {
        r2.redrawHint("drag", true);
        for (var i2 = 0; i2 < draggedEles.length; i2++) {
          var de_p = draggedEles[i2]._private;
          de_p.grabbed = false;
          de_p.rscratch.inDragLayer = false;
        }
      }
      var _start = r2.touchData.start;
      var f1x2 = e2.touches[0].clientX - offsetLeft, f1y2 = e2.touches[0].clientY - offsetTop;
      var f2x2 = e2.touches[1].clientX - offsetLeft, f2y2 = e2.touches[1].clientY - offsetTop;
      var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
      var factor = distance2 / distance1;
      if (twoFingersStartInside) {
        var df1x = f1x2 - f1x1;
        var df1y = f1y2 - f1y1;
        var df2x = f2x2 - f2x1;
        var df2y = f2y2 - f2y1;
        var tx = (df1x + df2x) / 2;
        var ty = (df1y + df2y) / 2;
        var zoom1 = cy2.zoom();
        var zoom22 = zoom1 * factor;
        var pan1 = cy2.pan();
        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
        var ctry = modelCenter1[1] * zoom1 + pan1.y;
        var pan2 = {
          x: -zoom22 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
          y: -zoom22 / zoom1 * (ctry - pan1.y - ty) + ctry
        };
        if (_start && _start.active()) {
          var draggedEles = r2.dragData.touchDragEles;
          freeDraggedElements(draggedEles);
          r2.redrawHint("drag", true);
          r2.redrawHint("eles", true);
          _start.unactivate().emit("freeon");
          draggedEles.emit("free");
          if (r2.dragData.didDrag) {
            _start.emit("dragfreeon");
            draggedEles.emit("dragfree");
          }
        }
        cy2.viewport({
          zoom: zoom22,
          pan: pan2,
          cancelOnFailedZoom: true
        });
        cy2.emit("pinchzoom");
        distance1 = distance2;
        f1x1 = f1x2;
        f1y1 = f1y2;
        f2x1 = f2x2;
        f2y1 = f2y2;
        r2.pinching = true;
      }
      if (e2.touches[0]) {
        var pos = r2.projectIntoViewport(e2.touches[0].clientX, e2.touches[0].clientY);
        now2[0] = pos[0];
        now2[1] = pos[1];
      }
      if (e2.touches[1]) {
        var pos = r2.projectIntoViewport(e2.touches[1].clientX, e2.touches[1].clientY);
        now2[2] = pos[0];
        now2[3] = pos[1];
      }
      if (e2.touches[2]) {
        var pos = r2.projectIntoViewport(e2.touches[2].clientX, e2.touches[2].clientY);
        now2[4] = pos[0];
        now2[5] = pos[1];
      }
    } else if (e2.touches[0] && !r2.touchData.didSelect) {
      var start = r2.touchData.start;
      var last2 = r2.touchData.last;
      var near;
      if (!r2.hoverData.draggingEles && !r2.swipePanning) {
        near = r2.findNearestElement(now2[0], now2[1], true, true);
      }
      if (capture && start != null) {
        e2.preventDefault();
      }
      if (capture && start != null && r2.nodeIsDraggable(start)) {
        if (isOverThresholdDrag) {
          var draggedEles = r2.dragData.touchDragEles;
          var justStartedDrag = !r2.dragData.didDrag;
          if (justStartedDrag) {
            addNodesToDrag(draggedEles, {
              inDragLayer: true
            });
          }
          r2.dragData.didDrag = true;
          var totalShift = {
            x: 0,
            y: 0
          };
          if (number$1(disp[0]) && number$1(disp[1])) {
            totalShift.x += disp[0];
            totalShift.y += disp[1];
            if (justStartedDrag) {
              r2.redrawHint("eles", true);
              var dragDelta = r2.touchData.dragDelta;
              if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
                totalShift.x += dragDelta[0];
                totalShift.y += dragDelta[1];
              }
            }
          }
          r2.hoverData.draggingEles = true;
          draggedEles.silentShift(totalShift).emit("position drag");
          r2.redrawHint("drag", true);
          if (r2.touchData.startPosition[0] == earlier[0] && r2.touchData.startPosition[1] == earlier[1]) {
            r2.redrawHint("eles", true);
          }
          r2.redraw();
        } else {
          var dragDelta = r2.touchData.dragDelta = r2.touchData.dragDelta || [];
          if (dragDelta.length === 0) {
            dragDelta.push(disp[0]);
            dragDelta.push(disp[1]);
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        }
      }
      {
        triggerEvents(start || near, ["touchmove", "tapdrag", "vmousemove"], e2, {
          x: now2[0],
          y: now2[1]
        });
        if ((!start || !start.grabbed()) && near != last2) {
          if (last2) {
            last2.emit({
              originalEvent: e2,
              type: "tapdragout",
              position: {
                x: now2[0],
                y: now2[1]
              }
            });
          }
          if (near) {
            near.emit({
              originalEvent: e2,
              type: "tapdragover",
              position: {
                x: now2[0],
                y: now2[1]
              }
            });
          }
        }
        r2.touchData.last = near;
      }
      if (capture) {
        for (var i2 = 0; i2 < now2.length; i2++) {
          if (now2[i2] && r2.touchData.startPosition[i2] && isOverThresholdDrag) {
            r2.touchData.singleTouchMoved = true;
          }
        }
      }
      if (capture && (start == null || start.pannable()) && cy2.panningEnabled() && cy2.userPanningEnabled()) {
        var allowPassthrough = allowPanningPassthrough(start, r2.touchData.starts);
        if (allowPassthrough) {
          e2.preventDefault();
          if (!r2.data.bgActivePosistion) {
            r2.data.bgActivePosistion = array2point(r2.touchData.startPosition);
          }
          if (r2.swipePanning) {
            cy2.panBy({
              x: disp[0] * zoom2,
              y: disp[1] * zoom2
            });
            cy2.emit("dragpan");
          } else if (isOverThresholdDrag) {
            r2.swipePanning = true;
            cy2.panBy({
              x: dx * zoom2,
              y: dy * zoom2
            });
            cy2.emit("dragpan");
            if (start) {
              start.unactivate();
              r2.redrawHint("select", true);
              r2.touchData.start = null;
            }
          }
        }
        var pos = r2.projectIntoViewport(e2.touches[0].clientX, e2.touches[0].clientY);
        now2[0] = pos[0];
        now2[1] = pos[1];
      }
    }
    for (var j2 = 0; j2 < now2.length; j2++) {
      earlier[j2] = now2[j2];
    }
    if (capture && e2.touches.length > 0 && !r2.hoverData.draggingEles && !r2.swipePanning && r2.data.bgActivePosistion != null) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      r2.redraw();
    }
  }, false);
  var touchcancelHandler;
  r2.registerBinding(window, "touchcancel", touchcancelHandler = function touchcancelHandler2(e2) {
    var start = r2.touchData.start;
    r2.touchData.capture = false;
    if (start) {
      start.unactivate();
    }
  });
  var touchendHandler, didDoubleTouch, touchTimeout, prevTouchTimeStamp;
  r2.registerBinding(window, "touchend", touchendHandler = function touchendHandler2(e2) {
    var start = r2.touchData.start;
    var capture = r2.touchData.capture;
    if (capture) {
      if (e2.touches.length === 0) {
        r2.touchData.capture = false;
      }
      e2.preventDefault();
    } else {
      return;
    }
    var select = r2.selection;
    r2.swipePanning = false;
    r2.hoverData.draggingEles = false;
    var cy2 = r2.cy;
    var zoom2 = cy2.zoom();
    var now2 = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    if (e2.touches[0]) {
      var pos = r2.projectIntoViewport(e2.touches[0].clientX, e2.touches[0].clientY);
      now2[0] = pos[0];
      now2[1] = pos[1];
    }
    if (e2.touches[1]) {
      var pos = r2.projectIntoViewport(e2.touches[1].clientX, e2.touches[1].clientY);
      now2[2] = pos[0];
      now2[3] = pos[1];
    }
    if (e2.touches[2]) {
      var pos = r2.projectIntoViewport(e2.touches[2].clientX, e2.touches[2].clientY);
      now2[4] = pos[0];
      now2[5] = pos[1];
    }
    if (start) {
      start.unactivate();
    }
    var ctxTapend;
    if (r2.touchData.cxt) {
      ctxTapend = {
        originalEvent: e2,
        type: "cxttapend",
        position: {
          x: now2[0],
          y: now2[1]
        }
      };
      if (start) {
        start.emit(ctxTapend);
      } else {
        cy2.emit(ctxTapend);
      }
      if (!r2.touchData.cxtDragged) {
        var ctxTap = {
          originalEvent: e2,
          type: "cxttap",
          position: {
            x: now2[0],
            y: now2[1]
          }
        };
        if (start) {
          start.emit(ctxTap);
        } else {
          cy2.emit(ctxTap);
        }
      }
      if (r2.touchData.start) {
        r2.touchData.start._private.grabbed = false;
      }
      r2.touchData.cxt = false;
      r2.touchData.start = null;
      r2.redraw();
      return;
    }
    if (!e2.touches[2] && cy2.boxSelectionEnabled() && r2.touchData.selecting) {
      r2.touchData.selecting = false;
      var box = cy2.collection(r2.getAllInBox(select[0], select[1], select[2], select[3]));
      select[0] = void 0;
      select[1] = void 0;
      select[2] = void 0;
      select[3] = void 0;
      select[4] = 0;
      r2.redrawHint("select", true);
      cy2.emit({
        type: "boxend",
        originalEvent: e2,
        position: {
          x: now2[0],
          y: now2[1]
        }
      });
      var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
        return ele.selectable() && !ele.selected();
      };
      box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
      if (box.nonempty()) {
        r2.redrawHint("eles", true);
      }
      r2.redraw();
    }
    if (start != null) {
      start.unactivate();
    }
    if (e2.touches[2]) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
    } else if (e2.touches[1])
      ;
    else if (e2.touches[0])
      ;
    else if (!e2.touches[0]) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      var draggedEles = r2.dragData.touchDragEles;
      if (start != null) {
        var startWasGrabbed = start._private.grabbed;
        freeDraggedElements(draggedEles);
        r2.redrawHint("drag", true);
        r2.redrawHint("eles", true);
        if (startWasGrabbed) {
          start.emit("freeon");
          draggedEles.emit("free");
          if (r2.dragData.didDrag) {
            start.emit("dragfreeon");
            draggedEles.emit("dragfree");
          }
        }
        triggerEvents(start, ["touchend", "tapend", "vmouseup", "tapdragout"], e2, {
          x: now2[0],
          y: now2[1]
        });
        start.unactivate();
        r2.touchData.start = null;
      } else {
        var near = r2.findNearestElement(now2[0], now2[1], true, true);
        triggerEvents(near, ["touchend", "tapend", "vmouseup", "tapdragout"], e2, {
          x: now2[0],
          y: now2[1]
        });
      }
      var dx = r2.touchData.startPosition[0] - now2[0];
      var dx2 = dx * dx;
      var dy = r2.touchData.startPosition[1] - now2[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      var rdist2 = dist22 * zoom2 * zoom2;
      if (!r2.touchData.singleTouchMoved) {
        if (!start) {
          cy2.$(":selected").unselect(["tapunselect"]);
        }
        triggerEvents(start, ["tap", "vclick"], e2, {
          x: now2[0],
          y: now2[1]
        });
        didDoubleTouch = false;
        if (e2.timeStamp - prevTouchTimeStamp <= cy2.multiClickDebounceTime()) {
          touchTimeout && clearTimeout(touchTimeout);
          didDoubleTouch = true;
          prevTouchTimeStamp = null;
          triggerEvents(start, ["dbltap", "vdblclick"], e2, {
            x: now2[0],
            y: now2[1]
          });
        } else {
          touchTimeout = setTimeout(function() {
            if (didDoubleTouch)
              return;
            triggerEvents(start, ["onetap", "voneclick"], e2, {
              x: now2[0],
              y: now2[1]
            });
          }, cy2.multiClickDebounceTime());
          prevTouchTimeStamp = e2.timeStamp;
        }
      }
      if (start != null && !r2.dragData.didDrag && start._private.selectable && rdist2 < r2.touchTapThreshold2 && !r2.pinching) {
        if (cy2.selectionType() === "single") {
          cy2.$(isSelected).unmerge(start).unselect(["tapunselect"]);
          start.select(["tapselect"]);
        } else {
          if (start.selected()) {
            start.unselect(["tapunselect"]);
          } else {
            start.select(["tapselect"]);
          }
        }
        r2.redrawHint("eles", true);
      }
      r2.touchData.singleTouchMoved = true;
    }
    for (var j2 = 0; j2 < now2.length; j2++) {
      earlier[j2] = now2[j2];
    }
    r2.dragData.didDrag = false;
    if (e2.touches.length === 0) {
      r2.touchData.dragDelta = [];
      r2.touchData.startPosition = null;
      r2.touchData.startGPosition = null;
      r2.touchData.didSelect = false;
    }
    if (e2.touches.length < 2) {
      if (e2.touches.length === 1) {
        r2.touchData.startGPosition = [e2.touches[0].clientX, e2.touches[0].clientY];
      }
      r2.pinching = false;
      r2.redrawHint("eles", true);
      r2.redraw();
    }
  }, false);
  if (typeof TouchEvent === "undefined") {
    var pointers = [];
    var makeTouch = function makeTouch2(e2) {
      return {
        clientX: e2.clientX,
        clientY: e2.clientY,
        force: 1,
        identifier: e2.pointerId,
        pageX: e2.pageX,
        pageY: e2.pageY,
        radiusX: e2.width / 2,
        radiusY: e2.height / 2,
        screenX: e2.screenX,
        screenY: e2.screenY,
        target: e2.target
      };
    };
    var makePointer = function makePointer2(e2) {
      return {
        event: e2,
        touch: makeTouch(e2)
      };
    };
    var addPointer = function addPointer2(e2) {
      pointers.push(makePointer(e2));
    };
    var removePointer = function removePointer2(e2) {
      for (var i2 = 0; i2 < pointers.length; i2++) {
        var p2 = pointers[i2];
        if (p2.event.pointerId === e2.pointerId) {
          pointers.splice(i2, 1);
          return;
        }
      }
    };
    var updatePointer = function updatePointer2(e2) {
      var p2 = pointers.filter(function(p3) {
        return p3.event.pointerId === e2.pointerId;
      })[0];
      p2.event = e2;
      p2.touch = makeTouch(e2);
    };
    var addTouchesToEvent = function addTouchesToEvent2(e2) {
      e2.touches = pointers.map(function(p2) {
        return p2.touch;
      });
    };
    var pointerIsMouse = function pointerIsMouse2(e2) {
      return e2.pointerType === "mouse" || e2.pointerType === 4;
    };
    r2.registerBinding(r2.container, "pointerdown", function(e2) {
      if (pointerIsMouse(e2)) {
        return;
      }
      e2.preventDefault();
      addPointer(e2);
      addTouchesToEvent(e2);
      touchstartHandler(e2);
    });
    r2.registerBinding(r2.container, "pointerup", function(e2) {
      if (pointerIsMouse(e2)) {
        return;
      }
      removePointer(e2);
      addTouchesToEvent(e2);
      touchendHandler(e2);
    });
    r2.registerBinding(r2.container, "pointercancel", function(e2) {
      if (pointerIsMouse(e2)) {
        return;
      }
      removePointer(e2);
      addTouchesToEvent(e2);
      touchcancelHandler(e2);
    });
    r2.registerBinding(r2.container, "pointermove", function(e2) {
      if (pointerIsMouse(e2)) {
        return;
      }
      e2.preventDefault();
      updatePointer(e2);
      addTouchesToEvent(e2);
      touchmoveHandler(e2);
    });
  }
};
var BRp$2 = {};
BRp$2.generatePolygon = function(name2, points) {
  return this.nodeShapes[name2] = {
    renderer: this,
    name: name2,
    points,
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl("polygon", context, centerX, centerY, width2, height2, this.points);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      return polygonIntersectLine(x2, y2, this.points, nodeX, nodeY, width2 / 2, height2 / 2, padding);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      return pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2, height2, [0, -1], padding);
    }
  };
};
BRp$2.generateEllipse = function() {
  return this.nodeShapes["ellipse"] = {
    renderer: this,
    name: "ellipse",
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      return intersectLineEllipse(x2, y2, nodeX, nodeY, width2 / 2 + padding, height2 / 2 + padding);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      return checkInEllipse(x2, y2, width2, height2, centerX, centerY, padding);
    }
  };
};
BRp$2.generateRoundPolygon = function(name2, points) {
  var allPoints = new Array(points.length * 2);
  for (var i2 = 0; i2 < points.length / 2; i2++) {
    var sourceIndex = i2 * 2;
    var destIndex = void 0;
    if (i2 < points.length / 2 - 1) {
      destIndex = (i2 + 1) * 2;
    } else {
      destIndex = 0;
    }
    allPoints[i2 * 4] = points[sourceIndex];
    allPoints[i2 * 4 + 1] = points[sourceIndex + 1];
    var xDest = points[destIndex] - points[sourceIndex];
    var yDest = points[destIndex + 1] - points[sourceIndex + 1];
    var norm = Math.sqrt(xDest * xDest + yDest * yDest);
    allPoints[i2 * 4 + 2] = xDest / norm;
    allPoints[i2 * 4 + 3] = yDest / norm;
  }
  return this.nodeShapes[name2] = {
    renderer: this,
    name: name2,
    points: allPoints,
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl("round-polygon", context, centerX, centerY, width2, height2, this.points);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      return roundPolygonIntersectLine(x2, y2, this.points, nodeX, nodeY, width2, height2);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      return pointInsideRoundPolygon(x2, y2, this.points, centerX, centerY, width2, height2);
    }
  };
};
BRp$2.generateRoundRectangle = function() {
  return this.nodeShapes["round-rectangle"] = this.nodeShapes["roundrectangle"] = {
    renderer: this,
    name: "round-rectangle",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      return roundRectangleIntersectLine(x2, y2, nodeX, nodeY, width2, height2, padding);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      var cornerRadius = getRoundRectangleRadius(width2, height2);
      var diam = cornerRadius * 2;
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2, height2 - diam, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2 - diam, height2, [0, -1], padding)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX - width2 / 2 + cornerRadius, centerY - height2 / 2 + cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX + width2 / 2 - cornerRadius, centerY - height2 / 2 + cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX + width2 / 2 - cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX - width2 / 2 + cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      return false;
    }
  };
};
BRp$2.generateCutRectangle = function() {
  return this.nodeShapes["cut-rectangle"] = this.nodeShapes["cutrectangle"] = {
    renderer: this,
    name: "cut-rectangle",
    cornerLength: getCutRectangleCornerLength(),
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    generateCutTrianglePts: function generateCutTrianglePts(width2, height2, centerX, centerY) {
      var cl = this.cornerLength;
      var hh = height2 / 2;
      var hw = width2 / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh;
      var yEnd = centerY + hh;
      return {
        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
      };
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      var cPts = this.generateCutTrianglePts(width2 + 2 * padding, height2 + 2 * padding, nodeX, nodeY);
      var pts2 = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
      return polygonIntersectLine(x2, y2, pts2, nodeX, nodeY);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2, height2 - 2 * this.cornerLength, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2 - 2 * this.cornerLength, height2, [0, -1], padding)) {
        return true;
      }
      var cutTrianglePts = this.generateCutTrianglePts(width2, height2, centerX, centerY);
      return pointInsidePolygonPoints(x2, y2, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x2, y2, cutTrianglePts.topRight) || pointInsidePolygonPoints(x2, y2, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x2, y2, cutTrianglePts.bottomLeft);
    }
  };
};
BRp$2.generateBarrel = function() {
  return this.nodeShapes["barrel"] = {
    renderer: this,
    name: "barrel",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      var t0 = 0.15;
      var t1 = 0.5;
      var t22 = 0.85;
      var bPts = this.generateBarrelBezierPts(width2 + 2 * padding, height2 + 2 * padding, nodeX, nodeY);
      var approximateBarrelCurvePts = function approximateBarrelCurvePts2(pts3) {
        var m0 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t0);
        var m1 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t1);
        var m2 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t22);
        return [pts3[0], pts3[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts3[4], pts3[5]];
      };
      var pts2 = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
      return polygonIntersectLine(x2, y2, pts2, nodeX, nodeY);
    },
    generateBarrelBezierPts: function generateBarrelBezierPts(width2, height2, centerX, centerY) {
      var hh = height2 / 2;
      var hw = width2 / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh;
      var yEnd = centerY + hh;
      var curveConstants = getBarrelCurveConstants(width2, height2);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset;
      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width2;
      var pts2 = {
        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
      };
      pts2.topLeft.isTop = true;
      pts2.topRight.isTop = true;
      pts2.bottomLeft.isBottom = true;
      pts2.bottomRight.isBottom = true;
      return pts2;
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      var curveConstants = getBarrelCurveConstants(width2, height2);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset;
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2, height2 - 2 * hOffset, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2 - 2 * wOffset, height2, [0, -1], padding)) {
        return true;
      }
      var barrelCurvePts = this.generateBarrelBezierPts(width2, height2, centerX, centerY);
      var getCurveT = function getCurveT2(x3, y3, curvePts) {
        var x0 = curvePts[4];
        var x1 = curvePts[2];
        var x22 = curvePts[0];
        var y02 = curvePts[5];
        var y23 = curvePts[1];
        var xMin = Math.min(x0, x22);
        var xMax = Math.max(x0, x22);
        var yMin = Math.min(y02, y23);
        var yMax = Math.max(y02, y23);
        if (xMin <= x3 && x3 <= xMax && yMin <= y3 && y3 <= yMax) {
          var coeff = bezierPtsToQuadCoeff(x0, x1, x22);
          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x3);
          var validRoots = roots.filter(function(r2) {
            return 0 <= r2 && r2 <= 1;
          });
          if (validRoots.length > 0) {
            return validRoots[0];
          }
        }
        return null;
      };
      var curveRegions = Object.keys(barrelCurvePts);
      for (var i2 = 0; i2 < curveRegions.length; i2++) {
        var corner = curveRegions[i2];
        var cornerPts = barrelCurvePts[corner];
        var t3 = getCurveT(x2, y2, cornerPts);
        if (t3 == null) {
          continue;
        }
        var y0 = cornerPts[5];
        var y1 = cornerPts[3];
        var y22 = cornerPts[1];
        var bezY = qbezierAt(y0, y1, y22, t3);
        if (cornerPts.isTop && bezY <= y2) {
          return true;
        }
        if (cornerPts.isBottom && y2 <= bezY) {
          return true;
        }
      }
      return false;
    }
  };
};
BRp$2.generateBottomRoundrectangle = function() {
  return this.nodeShapes["bottom-round-rectangle"] = this.nodeShapes["bottomroundrectangle"] = {
    renderer: this,
    name: "bottom-round-rectangle",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x2, y2, padding) {
      var topStartX = nodeX - (width2 / 2 + padding);
      var topStartY = nodeY - (height2 / 2 + padding);
      var topEndY = topStartY;
      var topEndX = nodeX + (width2 / 2 + padding);
      var topIntersections = finiteLinesIntersect(x2, y2, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
      if (topIntersections.length > 0) {
        return topIntersections;
      }
      return roundRectangleIntersectLine(x2, y2, nodeX, nodeY, width2, height2, padding);
    },
    checkPoint: function checkPoint(x2, y2, padding, width2, height2, centerX, centerY) {
      var cornerRadius = getRoundRectangleRadius(width2, height2);
      var diam = 2 * cornerRadius;
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2, height2 - diam, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x2, y2, this.points, centerX, centerY, width2 - diam, height2, [0, -1], padding)) {
        return true;
      }
      var outerWidth = width2 / 2 + 2 * padding;
      var outerHeight = height2 / 2 + 2 * padding;
      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
      if (pointInsidePolygonPoints(x2, y2, points)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX + width2 / 2 - cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x2, y2, diam, diam, centerX - width2 / 2 + cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      return false;
    }
  };
};
BRp$2.registerNodeShapes = function() {
  var nodeShapes = this.nodeShapes = {};
  var renderer3 = this;
  this.generateEllipse();
  this.generatePolygon("triangle", generateUnitNgonPointsFitToSquare(3, 0));
  this.generateRoundPolygon("round-triangle", generateUnitNgonPointsFitToSquare(3, 0));
  this.generatePolygon("rectangle", generateUnitNgonPointsFitToSquare(4, 0));
  nodeShapes["square"] = nodeShapes["rectangle"];
  this.generateRoundRectangle();
  this.generateCutRectangle();
  this.generateBarrel();
  this.generateBottomRoundrectangle();
  {
    var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
    this.generatePolygon("diamond", diamondPoints);
    this.generateRoundPolygon("round-diamond", diamondPoints);
  }
  this.generatePolygon("pentagon", generateUnitNgonPointsFitToSquare(5, 0));
  this.generateRoundPolygon("round-pentagon", generateUnitNgonPointsFitToSquare(5, 0));
  this.generatePolygon("hexagon", generateUnitNgonPointsFitToSquare(6, 0));
  this.generateRoundPolygon("round-hexagon", generateUnitNgonPointsFitToSquare(6, 0));
  this.generatePolygon("heptagon", generateUnitNgonPointsFitToSquare(7, 0));
  this.generateRoundPolygon("round-heptagon", generateUnitNgonPointsFitToSquare(7, 0));
  this.generatePolygon("octagon", generateUnitNgonPointsFitToSquare(8, 0));
  this.generateRoundPolygon("round-octagon", generateUnitNgonPointsFitToSquare(8, 0));
  var star5Points = new Array(20);
  {
    var outerPoints = generateUnitNgonPoints(5, 0);
    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5);
    var innerRadius = 0.5 * (3 - Math.sqrt(5));
    innerRadius *= 1.57;
    for (var i2 = 0; i2 < innerPoints.length / 2; i2++) {
      innerPoints[i2 * 2] *= innerRadius;
      innerPoints[i2 * 2 + 1] *= innerRadius;
    }
    for (var i2 = 0; i2 < 20 / 4; i2++) {
      star5Points[i2 * 4] = outerPoints[i2 * 2];
      star5Points[i2 * 4 + 1] = outerPoints[i2 * 2 + 1];
      star5Points[i2 * 4 + 2] = innerPoints[i2 * 2];
      star5Points[i2 * 4 + 3] = innerPoints[i2 * 2 + 1];
    }
  }
  star5Points = fitPolygonToSquare(star5Points);
  this.generatePolygon("star", star5Points);
  this.generatePolygon("vee", [-1, -1, 0, -0.333, 1, -1, 0, 1]);
  this.generatePolygon("rhomboid", [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
  this.generatePolygon("right-rhomboid", [-0.333, -1, 1, -1, 0.333, 1, -1, 1]);
  this.nodeShapes["concavehexagon"] = this.generatePolygon("concave-hexagon", [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
  {
    var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
    this.generatePolygon("tag", tagPoints);
    this.generateRoundPolygon("round-tag", tagPoints);
  }
  nodeShapes.makePolygon = function(points) {
    var key = points.join("$");
    var name2 = "polygon-" + key;
    var shape;
    if (shape = this[name2]) {
      return shape;
    }
    return renderer3.generatePolygon(name2, points);
  };
};
var BRp$1 = {};
BRp$1.timeToRender = function() {
  return this.redrawTotalTime / this.redrawCount;
};
BRp$1.redraw = function(options2) {
  options2 = options2 || staticEmptyObject();
  var r2 = this;
  if (r2.averageRedrawTime === void 0) {
    r2.averageRedrawTime = 0;
  }
  if (r2.lastRedrawTime === void 0) {
    r2.lastRedrawTime = 0;
  }
  if (r2.lastDrawTime === void 0) {
    r2.lastDrawTime = 0;
  }
  r2.requestedFrame = true;
  r2.renderOptions = options2;
};
BRp$1.beforeRender = function(fn3, priority3) {
  if (this.destroyed) {
    return;
  }
  if (priority3 == null) {
    error("Priority is not optional for beforeRender");
  }
  var cbs = this.beforeRenderCallbacks;
  cbs.push({
    fn: fn3,
    priority: priority3
  });
  cbs.sort(function(a2, b2) {
    return b2.priority - a2.priority;
  });
};
var beforeRenderCallbacks = function beforeRenderCallbacks2(r2, willDraw, startTime) {
  var cbs = r2.beforeRenderCallbacks;
  for (var i2 = 0; i2 < cbs.length; i2++) {
    cbs[i2].fn(willDraw, startTime);
  }
};
BRp$1.startRenderLoop = function() {
  var r2 = this;
  var cy2 = r2.cy;
  if (r2.renderLoopStarted) {
    return;
  } else {
    r2.renderLoopStarted = true;
  }
  var renderFn = function renderFn2(requestTime) {
    if (r2.destroyed) {
      return;
    }
    if (cy2.batching())
      ;
    else if (r2.requestedFrame && !r2.skipFrame) {
      beforeRenderCallbacks(r2, true, requestTime);
      var startTime = performanceNow();
      r2.render(r2.renderOptions);
      var endTime = r2.lastDrawTime = performanceNow();
      if (r2.averageRedrawTime === void 0) {
        r2.averageRedrawTime = endTime - startTime;
      }
      if (r2.redrawCount === void 0) {
        r2.redrawCount = 0;
      }
      r2.redrawCount++;
      if (r2.redrawTotalTime === void 0) {
        r2.redrawTotalTime = 0;
      }
      var duration = endTime - startTime;
      r2.redrawTotalTime += duration;
      r2.lastRedrawTime = duration;
      r2.averageRedrawTime = r2.averageRedrawTime / 2 + duration / 2;
      r2.requestedFrame = false;
    } else {
      beforeRenderCallbacks(r2, false, requestTime);
    }
    r2.skipFrame = false;
    requestAnimationFrame$1(renderFn2);
  };
  requestAnimationFrame$1(renderFn);
};
var BaseRenderer = function BaseRenderer2(options2) {
  this.init(options2);
};
var BR = BaseRenderer;
var BRp = BR.prototype;
BRp.clientFunctions = ["redrawHint", "render", "renderTo", "matchCanvasSize", "nodeShapeImpl", "arrowShapeImpl"];
BRp.init = function(options2) {
  var r2 = this;
  r2.options = options2;
  r2.cy = options2.cy;
  var ctr = r2.container = options2.cy.container();
  if (window$1) {
    var document2 = window$1.document;
    var head = document2.head;
    var stylesheetId = "__________cytoscape_stylesheet";
    var className = "__________cytoscape_container";
    var stylesheetAlreadyExists = document2.getElementById(stylesheetId) != null;
    if (ctr.className.indexOf(className) < 0) {
      ctr.className = (ctr.className || "") + " " + className;
    }
    if (!stylesheetAlreadyExists) {
      var stylesheet3 = document2.createElement("style");
      stylesheet3.id = stylesheetId;
      stylesheet3.textContent = "." + className + " { position: relative; }";
      head.insertBefore(stylesheet3, head.children[0]);
    }
    var computedStyle = window$1.getComputedStyle(ctr);
    var position3 = computedStyle.getPropertyValue("position");
    if (position3 === "static") {
      warn("A Cytoscape container has style position:static and so can not use UI extensions properly");
    }
  }
  r2.selection = [void 0, void 0, void 0, void 0, 0];
  r2.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];
  r2.hoverData = {
    down: null,
    last: null,
    downTime: null,
    triggerMode: null,
    dragging: false,
    initialPan: [null, null],
    capture: false
  };
  r2.dragData = {
    possibleDragElements: []
  };
  r2.touchData = {
    start: null,
    capture: false,
    // These 3 fields related to tap, taphold events
    startPosition: [null, null, null, null, null, null],
    singleTouchStartTime: null,
    singleTouchMoved: true,
    now: [null, null, null, null, null, null],
    earlier: [null, null, null, null, null, null]
  };
  r2.redraws = 0;
  r2.showFps = options2.showFps;
  r2.debug = options2.debug;
  r2.hideEdgesOnViewport = options2.hideEdgesOnViewport;
  r2.textureOnViewport = options2.textureOnViewport;
  r2.wheelSensitivity = options2.wheelSensitivity;
  r2.motionBlurEnabled = options2.motionBlur;
  r2.forcedPixelRatio = number$1(options2.pixelRatio) ? options2.pixelRatio : null;
  r2.motionBlur = options2.motionBlur;
  r2.motionBlurOpacity = options2.motionBlurOpacity;
  r2.motionBlurTransparency = 1 - r2.motionBlurOpacity;
  r2.motionBlurPxRatio = 1;
  r2.mbPxRBlurry = 1;
  r2.minMbLowQualFrames = 4;
  r2.fullQualityMb = false;
  r2.clearedForMotionBlur = [];
  r2.desktopTapThreshold = options2.desktopTapThreshold;
  r2.desktopTapThreshold2 = options2.desktopTapThreshold * options2.desktopTapThreshold;
  r2.touchTapThreshold = options2.touchTapThreshold;
  r2.touchTapThreshold2 = options2.touchTapThreshold * options2.touchTapThreshold;
  r2.tapholdDuration = 500;
  r2.bindings = [];
  r2.beforeRenderCallbacks = [];
  r2.beforeRenderPriorities = {
    // higher priority execs before lower one
    animations: 400,
    eleCalcs: 300,
    eleTxrDeq: 200,
    lyrTxrDeq: 150,
    lyrTxrSkip: 100
  };
  r2.registerNodeShapes();
  r2.registerArrowShapes();
  r2.registerCalculationListeners();
};
BRp.notify = function(eventName, eles) {
  var r2 = this;
  var cy2 = r2.cy;
  if (this.destroyed) {
    return;
  }
  if (eventName === "init") {
    r2.load();
    return;
  }
  if (eventName === "destroy") {
    r2.destroy();
    return;
  }
  if (eventName === "add" || eventName === "remove" || eventName === "move" && cy2.hasCompoundNodes() || eventName === "load" || eventName === "zorder" || eventName === "mount") {
    r2.invalidateCachedZSortedEles();
  }
  if (eventName === "viewport") {
    r2.redrawHint("select", true);
  }
  if (eventName === "load" || eventName === "resize" || eventName === "mount") {
    r2.invalidateContainerClientCoordsCache();
    r2.matchCanvasSize(r2.container);
  }
  r2.redrawHint("eles", true);
  r2.redrawHint("drag", true);
  this.startRenderLoop();
  this.redraw();
};
BRp.destroy = function() {
  var r2 = this;
  r2.destroyed = true;
  r2.cy.stopAnimationLoop();
  for (var i2 = 0; i2 < r2.bindings.length; i2++) {
    var binding = r2.bindings[i2];
    var b2 = binding;
    var tgt = b2.target;
    (tgt.off || tgt.removeEventListener).apply(tgt, b2.args);
  }
  r2.bindings = [];
  r2.beforeRenderCallbacks = [];
  r2.onUpdateEleCalcsFns = [];
  if (r2.removeObserver) {
    r2.removeObserver.disconnect();
  }
  if (r2.styleObserver) {
    r2.styleObserver.disconnect();
  }
  if (r2.resizeObserver) {
    r2.resizeObserver.disconnect();
  }
  if (r2.labelCalcDiv) {
    try {
      document.body.removeChild(r2.labelCalcDiv);
    } catch (e2) {
    }
  }
};
BRp.isHeadless = function() {
  return false;
};
[BRp$f, BRp$5, BRp$4, BRp$3, BRp$2, BRp$1].forEach(function(props) {
  extend$1(BRp, props);
});
var fullFpsTime = 1e3 / 60;
var defs = {
  setupDequeueing: function setupDequeueing(opts) {
    return function setupDequeueingImpl() {
      var self2 = this;
      var r2 = this.renderer;
      if (self2.dequeueingSetup) {
        return;
      } else {
        self2.dequeueingSetup = true;
      }
      var queueRedraw = debounce__default["default"](function() {
        r2.redrawHint("eles", true);
        r2.redrawHint("drag", true);
        r2.redraw();
      }, opts.deqRedrawThreshold);
      var dequeue = function dequeue2(willDraw, frameStartTime) {
        var startTime = performanceNow();
        var avgRenderTime = r2.averageRedrawTime;
        var renderTime = r2.lastRedrawTime;
        var deqd = [];
        var extent2 = r2.cy.extent();
        var pixelRatio = r2.getPixelRatio();
        if (!willDraw) {
          r2.flushRenderedStyleQueue();
        }
        while (true) {
          var now2 = performanceNow();
          var duration = now2 - startTime;
          var frameDuration = now2 - frameStartTime;
          if (renderTime < fullFpsTime) {
            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);
            if (frameDuration >= opts.deqFastCost * timeAvailable) {
              break;
            }
          } else {
            if (willDraw) {
              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                break;
              }
            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
              break;
            }
          }
          var thisDeqd = opts.deq(self2, pixelRatio, extent2);
          if (thisDeqd.length > 0) {
            for (var i2 = 0; i2 < thisDeqd.length; i2++) {
              deqd.push(thisDeqd[i2]);
            }
          } else {
            break;
          }
        }
        if (deqd.length > 0) {
          opts.onDeqd(self2, deqd);
          if (!willDraw && opts.shouldRedraw(self2, deqd, pixelRatio, extent2)) {
            queueRedraw();
          }
        }
      };
      var priority3 = opts.priority || noop$1;
      r2.beforeRender(dequeue, priority3(self2));
    };
  }
};
var ElementTextureCacheLookup = /* @__PURE__ */ function() {
  function ElementTextureCacheLookup2(getKey3) {
    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : falsify;
    _classCallCheck(this, ElementTextureCacheLookup2);
    this.idsByKey = new Map$1();
    this.keyForId = new Map$1();
    this.cachesByLvl = new Map$1();
    this.lvls = [];
    this.getKey = getKey3;
    this.doesEleInvalidateKey = doesEleInvalidateKey;
  }
  _createClass$1(ElementTextureCacheLookup2, [{
    key: "getIdsFor",
    value: function getIdsFor(key) {
      if (key == null) {
        error("Can not get id list for null key");
      }
      var idsByKey = this.idsByKey;
      var ids = this.idsByKey.get(key);
      if (!ids) {
        ids = new Set$1();
        idsByKey.set(key, ids);
      }
      return ids;
    }
  }, {
    key: "addIdForKey",
    value: function addIdForKey(key, id2) {
      if (key != null) {
        this.getIdsFor(key).add(id2);
      }
    }
  }, {
    key: "deleteIdForKey",
    value: function deleteIdForKey(key, id2) {
      if (key != null) {
        this.getIdsFor(key)["delete"](id2);
      }
    }
  }, {
    key: "getNumberOfIdsForKey",
    value: function getNumberOfIdsForKey(key) {
      if (key == null) {
        return 0;
      } else {
        return this.getIdsFor(key).size;
      }
    }
  }, {
    key: "updateKeyMappingFor",
    value: function updateKeyMappingFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      var currKey = this.getKey(ele);
      this.deleteIdForKey(prevKey, id2);
      this.addIdForKey(currKey, id2);
      this.keyForId.set(id2, currKey);
    }
  }, {
    key: "deleteKeyMappingFor",
    value: function deleteKeyMappingFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      this.deleteIdForKey(prevKey, id2);
      this.keyForId["delete"](id2);
    }
  }, {
    key: "keyHasChangedFor",
    value: function keyHasChangedFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      var newKey = this.getKey(ele);
      return prevKey !== newKey;
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(ele) {
      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
    }
  }, {
    key: "getCachesAt",
    value: function getCachesAt(lvl) {
      var cachesByLvl = this.cachesByLvl, lvls = this.lvls;
      var caches = cachesByLvl.get(lvl);
      if (!caches) {
        caches = new Map$1();
        cachesByLvl.set(lvl, caches);
        lvls.push(lvl);
      }
      return caches;
    }
  }, {
    key: "getCache",
    value: function getCache(key, lvl) {
      return this.getCachesAt(lvl).get(key);
    }
  }, {
    key: "get",
    value: function get2(ele, lvl) {
      var key = this.getKey(ele);
      var cache3 = this.getCache(key, lvl);
      if (cache3 != null) {
        this.updateKeyMappingFor(ele);
      }
      return cache3;
    }
  }, {
    key: "getForCachedKey",
    value: function getForCachedKey(ele, lvl) {
      var key = this.keyForId.get(ele.id());
      var cache3 = this.getCache(key, lvl);
      return cache3;
    }
  }, {
    key: "hasCache",
    value: function hasCache(key, lvl) {
      return this.getCachesAt(lvl).has(key);
    }
  }, {
    key: "has",
    value: function has(ele, lvl) {
      var key = this.getKey(ele);
      return this.hasCache(key, lvl);
    }
  }, {
    key: "setCache",
    value: function setCache(key, lvl, cache3) {
      cache3.key = key;
      this.getCachesAt(lvl).set(key, cache3);
    }
  }, {
    key: "set",
    value: function set2(ele, lvl, cache3) {
      var key = this.getKey(ele);
      this.setCache(key, lvl, cache3);
      this.updateKeyMappingFor(ele);
    }
  }, {
    key: "deleteCache",
    value: function deleteCache(key, lvl) {
      this.getCachesAt(lvl)["delete"](key);
    }
  }, {
    key: "delete",
    value: function _delete(ele, lvl) {
      var key = this.getKey(ele);
      this.deleteCache(key, lvl);
    }
  }, {
    key: "invalidateKey",
    value: function invalidateKey(key) {
      var _this = this;
      this.lvls.forEach(function(lvl) {
        return _this.deleteCache(key, lvl);
      });
    }
    // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)
  }, {
    key: "invalidate",
    value: function invalidate(ele) {
      var id2 = ele.id();
      var key = this.keyForId.get(id2);
      this.deleteKeyMappingFor(ele);
      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);
      if (entireKeyInvalidated) {
        this.invalidateKey(key);
      }
      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
    }
  }]);
  return ElementTextureCacheLookup2;
}();
var minTxrH = 25;
var txrStepH = 50;
var minLvl$1 = -4;
var maxLvl$1 = 3;
var maxZoom$1 = 7.99;
var eleTxrSpacing = 8;
var defTxrWidth = 1024;
var maxTxrW = 1024;
var maxTxrH = 1024;
var minUtility = 0.2;
var maxFullness = 0.8;
var maxFullnessChecks = 10;
var deqCost$1 = 0.15;
var deqAvgCost$1 = 0.1;
var deqNoDrawCost$1 = 0.9;
var deqFastCost$1 = 0.9;
var deqRedrawThreshold$1 = 100;
var maxDeqSize$1 = 1;
var getTxrReasons = {
  dequeue: "dequeue",
  downscale: "downscale",
  highQuality: "highQuality"
};
var initDefaults = defaults$g({
  getKey: null,
  doesEleInvalidateKey: falsify,
  drawElement: null,
  getBoundingBox: null,
  getRotationPoint: null,
  getRotationOffset: null,
  isVisible: trueify,
  allowEdgeTxrCaching: true,
  allowParentTxrCaching: true
});
var ElementTextureCache = function ElementTextureCache2(renderer3, initOptions) {
  var self2 = this;
  self2.renderer = renderer3;
  self2.onDequeues = [];
  var opts = initDefaults(initOptions);
  extend$1(self2, opts);
  self2.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
  self2.setupDequeueing();
};
var ETCp = ElementTextureCache.prototype;
ETCp.reasons = getTxrReasons;
ETCp.getTextureQueue = function(txrH) {
  var self2 = this;
  self2.eleImgCaches = self2.eleImgCaches || {};
  return self2.eleImgCaches[txrH] = self2.eleImgCaches[txrH] || [];
};
ETCp.getRetiredTextureQueue = function(txrH) {
  var self2 = this;
  var rtxtrQs = self2.eleImgCaches.retired = self2.eleImgCaches.retired || {};
  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
  return rtxtrQ;
};
ETCp.getElementQueue = function() {
  var self2 = this;
  var q2 = self2.eleCacheQueue = self2.eleCacheQueue || new Heap__default["default"](function(a2, b2) {
    return b2.reqs - a2.reqs;
  });
  return q2;
};
ETCp.getElementKeyToQueue = function() {
  var self2 = this;
  var k2q = self2.eleKeyToCacheQueue = self2.eleKeyToCacheQueue || {};
  return k2q;
};
ETCp.getElement = function(ele, bb, pxRatio, lvl, reason) {
  var self2 = this;
  var r2 = this.renderer;
  var zoom2 = r2.cy.zoom();
  var lookup2 = this.lookup;
  if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {
    return null;
  }
  if (!self2.allowEdgeTxrCaching && ele.isEdge() || !self2.allowParentTxrCaching && ele.isParent()) {
    return null;
  }
  if (lvl == null) {
    lvl = Math.ceil(log2(zoom2 * pxRatio));
  }
  if (lvl < minLvl$1) {
    lvl = minLvl$1;
  } else if (zoom2 >= maxZoom$1 || lvl > maxLvl$1) {
    return null;
  }
  var scale = Math.pow(2, lvl);
  var eleScaledH = bb.h * scale;
  var eleScaledW = bb.w * scale;
  var scaledLabelShown = r2.eleTextBiggerThanMin(ele, scale);
  if (!this.isVisible(ele, scaledLabelShown)) {
    return null;
  }
  var eleCache = lookup2.get(ele, lvl);
  if (eleCache && eleCache.invalidated) {
    eleCache.invalidated = false;
    eleCache.texture.invalidatedWidth -= eleCache.width;
  }
  if (eleCache) {
    return eleCache;
  }
  var txrH;
  if (eleScaledH <= minTxrH) {
    txrH = minTxrH;
  } else if (eleScaledH <= txrStepH) {
    txrH = txrStepH;
  } else {
    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
  }
  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
    return null;
  }
  var txrQ = self2.getTextureQueue(txrH);
  var txr = txrQ[txrQ.length - 2];
  var addNewTxr = function addNewTxr2() {
    return self2.recycleTexture(txrH, eleScaledW) || self2.addTexture(txrH, eleScaledW);
  };
  if (!txr) {
    txr = txrQ[txrQ.length - 1];
  }
  if (!txr) {
    txr = addNewTxr();
  }
  if (txr.width - txr.usedWidth < eleScaledW) {
    txr = addNewTxr();
  }
  var scalableFrom = function scalableFrom2(otherCache) {
    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
  };
  var deqing = reason && reason === getTxrReasons.dequeue;
  var highQualityReq = reason && reason === getTxrReasons.highQuality;
  var downscaleReq = reason && reason === getTxrReasons.downscale;
  var higherCache;
  for (var l2 = lvl + 1; l2 <= maxLvl$1; l2++) {
    var c2 = lookup2.get(ele, l2);
    if (c2) {
      higherCache = c2;
      break;
    }
  }
  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;
  var downscale = function downscale2() {
    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
  };
  txr.context.setTransform(1, 0, 0, 1, 0, 0);
  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);
  if (scalableFrom(oneUpCache)) {
    downscale();
  } else if (scalableFrom(higherCache)) {
    if (highQualityReq) {
      for (var _l = higherCache.level; _l > lvl; _l--) {
        oneUpCache = self2.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
      }
      downscale();
    } else {
      self2.queueElement(ele, higherCache.level - 1);
      return higherCache;
    }
  } else {
    var lowerCache;
    if (!deqing && !highQualityReq && !downscaleReq) {
      for (var _l2 = lvl - 1; _l2 >= minLvl$1; _l2--) {
        var _c = lookup2.get(ele, _l2);
        if (_c) {
          lowerCache = _c;
          break;
        }
      }
    }
    if (scalableFrom(lowerCache)) {
      self2.queueElement(ele, lvl);
      return lowerCache;
    }
    txr.context.translate(txr.usedWidth, 0);
    txr.context.scale(scale, scale);
    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
    txr.context.scale(1 / scale, 1 / scale);
    txr.context.translate(-txr.usedWidth, 0);
  }
  eleCache = {
    x: txr.usedWidth,
    texture: txr,
    level: lvl,
    scale,
    width: eleScaledW,
    height: eleScaledH,
    scaledLabelShown
  };
  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
  txr.eleCaches.push(eleCache);
  lookup2.set(ele, lvl, eleCache);
  self2.checkTextureFullness(txr);
  return eleCache;
};
ETCp.invalidateElements = function(eles) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    this.invalidateElement(eles[i2]);
  }
};
ETCp.invalidateElement = function(ele) {
  var self2 = this;
  var lookup2 = self2.lookup;
  var caches = [];
  var invalid = lookup2.isInvalid(ele);
  if (!invalid) {
    return;
  }
  for (var lvl = minLvl$1; lvl <= maxLvl$1; lvl++) {
    var cache3 = lookup2.getForCachedKey(ele, lvl);
    if (cache3) {
      caches.push(cache3);
    }
  }
  var noOtherElesUseCache = lookup2.invalidate(ele);
  if (noOtherElesUseCache) {
    for (var i2 = 0; i2 < caches.length; i2++) {
      var _cache = caches[i2];
      var txr = _cache.texture;
      txr.invalidatedWidth += _cache.width;
      _cache.invalidated = true;
      self2.checkTextureUtility(txr);
    }
  }
  self2.removeFromQueue(ele);
};
ETCp.checkTextureUtility = function(txr) {
  if (txr.invalidatedWidth >= minUtility * txr.width) {
    this.retireTexture(txr);
  }
};
ETCp.checkTextureFullness = function(txr) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txr.height);
  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
    removeFromArray(txrQ, txr);
  } else {
    txr.fullnessChecks++;
  }
};
ETCp.retireTexture = function(txr) {
  var self2 = this;
  var txrH = txr.height;
  var txrQ = self2.getTextureQueue(txrH);
  var lookup2 = this.lookup;
  removeFromArray(txrQ, txr);
  txr.retired = true;
  var eleCaches = txr.eleCaches;
  for (var i2 = 0; i2 < eleCaches.length; i2++) {
    var eleCache = eleCaches[i2];
    lookup2.deleteCache(eleCache.key, eleCache.level);
  }
  clearArray(eleCaches);
  var rtxtrQ = self2.getRetiredTextureQueue(txrH);
  rtxtrQ.push(txr);
};
ETCp.addTexture = function(txrH, minW) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txrH);
  var txr = {};
  txrQ.push(txr);
  txr.eleCaches = [];
  txr.height = txrH;
  txr.width = Math.max(defTxrWidth, minW);
  txr.usedWidth = 0;
  txr.invalidatedWidth = 0;
  txr.fullnessChecks = 0;
  txr.canvas = self2.renderer.makeOffscreenCanvas(txr.width, txr.height);
  txr.context = txr.canvas.getContext("2d");
  return txr;
};
ETCp.recycleTexture = function(txrH, minW) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txrH);
  var rtxtrQ = self2.getRetiredTextureQueue(txrH);
  for (var i2 = 0; i2 < rtxtrQ.length; i2++) {
    var txr = rtxtrQ[i2];
    if (txr.width >= minW) {
      txr.retired = false;
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      clearArray(txr.eleCaches);
      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(0, 0, txr.width, txr.height);
      removeFromArray(rtxtrQ, txr);
      txrQ.push(txr);
      return txr;
    }
  }
};
ETCp.queueElement = function(ele, lvl) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var key = this.getKey(ele);
  var existingReq = k2q[key];
  if (existingReq) {
    existingReq.level = Math.max(existingReq.level, lvl);
    existingReq.eles.merge(ele);
    existingReq.reqs++;
    q2.updateItem(existingReq);
  } else {
    var req = {
      eles: ele.spawn().merge(ele),
      level: lvl,
      reqs: 1,
      key
    };
    q2.push(req);
    k2q[key] = req;
  }
};
ETCp.dequeue = function(pxRatio) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var dequeued = [];
  var lookup2 = self2.lookup;
  for (var i2 = 0; i2 < maxDeqSize$1; i2++) {
    if (q2.size() > 0) {
      var req = q2.pop();
      var key = req.key;
      var ele = req.eles[0];
      var cacheExists = lookup2.hasCache(ele, req.level);
      k2q[key] = null;
      if (cacheExists) {
        continue;
      }
      dequeued.push(req);
      var bb = self2.getBoundingBox(ele);
      self2.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
    } else {
      break;
    }
  }
  return dequeued;
};
ETCp.removeFromQueue = function(ele) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var key = this.getKey(ele);
  var req = k2q[key];
  if (req != null) {
    if (req.eles.length === 1) {
      req.reqs = MAX_INT$1;
      q2.updateItem(req);
      q2.pop();
      k2q[key] = null;
    } else {
      req.eles.unmerge(ele);
    }
  }
};
ETCp.onDequeue = function(fn3) {
  this.onDequeues.push(fn3);
};
ETCp.offDequeue = function(fn3) {
  removeFromArray(this.onDequeues, fn3);
};
ETCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold$1,
  deqCost: deqCost$1,
  deqAvgCost: deqAvgCost$1,
  deqNoDrawCost: deqNoDrawCost$1,
  deqFastCost: deqFastCost$1,
  deq: function deq(self2, pxRatio, extent2) {
    return self2.dequeue(pxRatio, extent2);
  },
  onDeqd: function onDeqd(self2, deqd) {
    for (var i2 = 0; i2 < self2.onDequeues.length; i2++) {
      var fn3 = self2.onDequeues[i2];
      fn3(deqd);
    }
  },
  shouldRedraw: function shouldRedraw(self2, deqd, pxRatio, extent2) {
    for (var i2 = 0; i2 < deqd.length; i2++) {
      var eles = deqd[i2].eles;
      for (var j2 = 0; j2 < eles.length; j2++) {
        var bb = eles[j2].boundingBox();
        if (boundingBoxesIntersect(bb, extent2)) {
          return true;
        }
      }
    }
    return false;
  },
  priority: function priority(self2) {
    return self2.renderer.beforeRenderPriorities.eleTxrDeq;
  }
});
var defNumLayers = 1;
var minLvl = -4;
var maxLvl = 2;
var maxZoom2 = 3.99;
var deqRedrawThreshold = 50;
var refineEleDebounceTime = 50;
var deqCost = 0.15;
var deqAvgCost = 0.1;
var deqNoDrawCost = 0.9;
var deqFastCost = 0.9;
var maxDeqSize = 1;
var invalidThreshold = 250;
var maxLayerArea = 4e3 * 4e3;
var useHighQualityEleTxrReqs = true;
var LayeredTextureCache = function LayeredTextureCache2(renderer3) {
  var self2 = this;
  var r2 = self2.renderer = renderer3;
  var cy2 = r2.cy;
  self2.layersByLevel = {};
  self2.firstGet = true;
  self2.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
  self2.skipping = false;
  self2.eleTxrDeqs = cy2.collection();
  self2.scheduleElementRefinement = debounce__default["default"](function() {
    self2.refineElementTextures(self2.eleTxrDeqs);
    self2.eleTxrDeqs.unmerge(self2.eleTxrDeqs);
  }, refineEleDebounceTime);
  r2.beforeRender(function(willDraw, now2) {
    if (now2 - self2.lastInvalidationTime <= invalidThreshold) {
      self2.skipping = true;
    } else {
      self2.skipping = false;
    }
  }, r2.beforeRenderPriorities.lyrTxrSkip);
  var qSort = function qSort2(a2, b2) {
    return b2.reqs - a2.reqs;
  };
  self2.layersQueue = new Heap__default["default"](qSort);
  self2.setupDequeueing();
};
var LTCp = LayeredTextureCache.prototype;
var layerIdPool = 0;
var MAX_INT = Math.pow(2, 53) - 1;
LTCp.makeLayer = function(bb, lvl) {
  var scale = Math.pow(2, lvl);
  var w2 = Math.ceil(bb.w * scale);
  var h2 = Math.ceil(bb.h * scale);
  var canvas = this.renderer.makeOffscreenCanvas(w2, h2);
  var layer = {
    id: layerIdPool = ++layerIdPool % MAX_INT,
    bb,
    level: lvl,
    width: w2,
    height: h2,
    canvas,
    context: canvas.getContext("2d"),
    eles: [],
    elesQueue: [],
    reqs: 0
  };
  var cxt = layer.context;
  var dx = -layer.bb.x1;
  var dy = -layer.bb.y1;
  cxt.scale(scale, scale);
  cxt.translate(dx, dy);
  return layer;
};
LTCp.getLayers = function(eles, pxRatio, lvl) {
  var self2 = this;
  var r2 = self2.renderer;
  var cy2 = r2.cy;
  var zoom2 = cy2.zoom();
  var firstGet = self2.firstGet;
  self2.firstGet = false;
  if (lvl == null) {
    lvl = Math.ceil(log2(zoom2 * pxRatio));
    if (lvl < minLvl) {
      lvl = minLvl;
    } else if (zoom2 >= maxZoom2 || lvl > maxLvl) {
      return null;
    }
  }
  self2.validateLayersElesOrdering(lvl, eles);
  var layersByLvl = self2.layersByLevel;
  var scale = Math.pow(2, lvl);
  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
  var bb;
  var lvlComplete = self2.levelIsComplete(lvl, eles);
  var tmpLayers;
  var checkTempLevels = function checkTempLevels2() {
    var canUseAsTmpLvl = function canUseAsTmpLvl2(l2) {
      self2.validateLayersElesOrdering(l2, eles);
      if (self2.levelIsComplete(l2, eles)) {
        tmpLayers = layersByLvl[l2];
        return true;
      }
    };
    var checkLvls = function checkLvls2(dir) {
      if (tmpLayers) {
        return;
      }
      for (var l2 = lvl + dir; minLvl <= l2 && l2 <= maxLvl; l2 += dir) {
        if (canUseAsTmpLvl(l2)) {
          break;
        }
      }
    };
    checkLvls(1);
    checkLvls(-1);
    for (var i3 = layers.length - 1; i3 >= 0; i3--) {
      var layer2 = layers[i3];
      if (layer2.invalid) {
        removeFromArray(layers, layer2);
      }
    }
  };
  if (!lvlComplete) {
    checkTempLevels();
  } else {
    return layers;
  }
  var getBb = function getBb2() {
    if (!bb) {
      bb = makeBoundingBox();
      for (var i3 = 0; i3 < eles.length; i3++) {
        updateBoundingBox(bb, eles[i3].boundingBox());
      }
    }
    return bb;
  };
  var makeLayer = function makeLayer2(opts) {
    opts = opts || {};
    var after = opts.after;
    getBb();
    var area = bb.w * scale * (bb.h * scale);
    if (area > maxLayerArea) {
      return null;
    }
    var layer2 = self2.makeLayer(bb, lvl);
    if (after != null) {
      var index = layers.indexOf(after) + 1;
      layers.splice(index, 0, layer2);
    } else if (opts.insert === void 0 || opts.insert) {
      layers.unshift(layer2);
    }
    return layer2;
  };
  if (self2.skipping && !firstGet) {
    return null;
  }
  var layer = null;
  var maxElesPerLayer = eles.length / defNumLayers;
  var allowLazyQueueing = !firstGet;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};
    var existingLayer = caches[lvl];
    if (existingLayer) {
      layer = existingLayer;
      continue;
    }
    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
      layer = makeLayer({
        insert: true,
        after: layer
      });
      if (!layer) {
        return null;
      }
    }
    if (tmpLayers || allowLazyQueueing) {
      self2.queueLayer(layer, ele);
    } else {
      self2.drawEleInLayer(layer, ele, lvl, pxRatio);
    }
    layer.eles.push(ele);
    caches[lvl] = layer;
  }
  if (tmpLayers) {
    return tmpLayers;
  }
  if (allowLazyQueueing) {
    return null;
  }
  return layers;
};
LTCp.getEleLevelForLayerLevel = function(lvl, pxRatio) {
  return lvl;
};
LTCp.drawEleInLayer = function(layer, ele, lvl, pxRatio) {
  var self2 = this;
  var r2 = this.renderer;
  var context = layer.context;
  var bb = ele.boundingBox();
  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }
  lvl = self2.getEleLevelForLayerLevel(lvl, pxRatio);
  {
    r2.setImgSmoothing(context, false);
  }
  {
    r2.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
  }
  {
    r2.setImgSmoothing(context, true);
  }
};
LTCp.levelIsComplete = function(lvl, eles) {
  var self2 = this;
  var layers = self2.layersByLevel[lvl];
  if (!layers || layers.length === 0) {
    return false;
  }
  var numElesInLayers = 0;
  for (var i2 = 0; i2 < layers.length; i2++) {
    var layer = layers[i2];
    if (layer.reqs > 0) {
      return false;
    }
    if (layer.invalid) {
      return false;
    }
    numElesInLayers += layer.eles.length;
  }
  if (numElesInLayers !== eles.length) {
    return false;
  }
  return true;
};
LTCp.validateLayersElesOrdering = function(lvl, eles) {
  var layers = this.layersByLevel[lvl];
  if (!layers) {
    return;
  }
  for (var i2 = 0; i2 < layers.length; i2++) {
    var layer = layers[i2];
    var offset = -1;
    for (var j2 = 0; j2 < eles.length; j2++) {
      if (layer.eles[0] === eles[j2]) {
        offset = j2;
        break;
      }
    }
    if (offset < 0) {
      this.invalidateLayer(layer);
      continue;
    }
    var o2 = offset;
    for (var j2 = 0; j2 < layer.eles.length; j2++) {
      if (layer.eles[j2] !== eles[o2 + j2]) {
        this.invalidateLayer(layer);
        break;
      }
    }
  }
};
LTCp.updateElementsInLayers = function(eles, update2) {
  var self2 = this;
  var isEles = element(eles[0]);
  for (var i2 = 0; i2 < eles.length; i2++) {
    var req = isEles ? null : eles[i2];
    var ele = isEles ? eles[i2] : eles[i2].ele;
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};
    for (var l2 = minLvl; l2 <= maxLvl; l2++) {
      var layer = caches[l2];
      if (!layer) {
        continue;
      }
      if (req && self2.getEleLevelForLayerLevel(layer.level) !== req.level) {
        continue;
      }
      update2(layer, ele, req);
    }
  }
};
LTCp.haveLayers = function() {
  var self2 = this;
  var haveLayers = false;
  for (var l2 = minLvl; l2 <= maxLvl; l2++) {
    var layers = self2.layersByLevel[l2];
    if (layers && layers.length > 0) {
      haveLayers = true;
      break;
    }
  }
  return haveLayers;
};
LTCp.invalidateElements = function(eles) {
  var self2 = this;
  if (eles.length === 0) {
    return;
  }
  self2.lastInvalidationTime = performanceNow();
  if (eles.length === 0 || !self2.haveLayers()) {
    return;
  }
  self2.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
    self2.invalidateLayer(layer);
  });
};
LTCp.invalidateLayer = function(layer) {
  this.lastInvalidationTime = performanceNow();
  if (layer.invalid) {
    return;
  }
  var lvl = layer.level;
  var eles = layer.eles;
  var layers = this.layersByLevel[lvl];
  removeFromArray(layers, layer);
  layer.elesQueue = [];
  layer.invalid = true;
  if (layer.replacement) {
    layer.replacement.invalid = true;
  }
  for (var i2 = 0; i2 < eles.length; i2++) {
    var caches = eles[i2]._private.rscratch.imgLayerCaches;
    if (caches) {
      caches[lvl] = null;
    }
  }
};
LTCp.refineElementTextures = function(eles) {
  var self2 = this;
  self2.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
    var rLyr = layer.replacement;
    if (!rLyr) {
      rLyr = layer.replacement = self2.makeLayer(layer.bb, layer.level);
      rLyr.replaces = layer;
      rLyr.eles = layer.eles;
    }
    if (!rLyr.reqs) {
      for (var i2 = 0; i2 < rLyr.eles.length; i2++) {
        self2.queueLayer(rLyr, rLyr.eles[i2]);
      }
    }
  });
};
LTCp.enqueueElementRefinement = function(ele) {
  this.eleTxrDeqs.merge(ele);
  this.scheduleElementRefinement();
};
LTCp.queueLayer = function(layer, ele) {
  var self2 = this;
  var q2 = self2.layersQueue;
  var elesQ = layer.elesQueue;
  var hasId = elesQ.hasId = elesQ.hasId || {};
  if (layer.replacement) {
    return;
  }
  if (ele) {
    if (hasId[ele.id()]) {
      return;
    }
    elesQ.push(ele);
    hasId[ele.id()] = true;
  }
  if (layer.reqs) {
    layer.reqs++;
    q2.updateItem(layer);
  } else {
    layer.reqs = 1;
    q2.push(layer);
  }
};
LTCp.dequeue = function(pxRatio) {
  var self2 = this;
  var q2 = self2.layersQueue;
  var deqd = [];
  var eleDeqs = 0;
  while (eleDeqs < maxDeqSize) {
    if (q2.size() === 0) {
      break;
    }
    var layer = q2.peek();
    if (layer.replacement) {
      q2.pop();
      continue;
    }
    if (layer.replaces && layer !== layer.replaces.replacement) {
      q2.pop();
      continue;
    }
    if (layer.invalid) {
      q2.pop();
      continue;
    }
    var ele = layer.elesQueue.shift();
    if (ele) {
      self2.drawEleInLayer(layer, ele, layer.level, pxRatio);
      eleDeqs++;
    }
    if (deqd.length === 0) {
      deqd.push(true);
    }
    if (layer.elesQueue.length === 0) {
      q2.pop();
      layer.reqs = 0;
      if (layer.replaces) {
        self2.applyLayerReplacement(layer);
      }
      self2.requestRedraw();
    }
  }
  return deqd;
};
LTCp.applyLayerReplacement = function(layer) {
  var self2 = this;
  var layersInLevel = self2.layersByLevel[layer.level];
  var replaced = layer.replaces;
  var index = layersInLevel.indexOf(replaced);
  if (index < 0 || replaced.invalid) {
    return;
  }
  layersInLevel[index] = layer;
  for (var i2 = 0; i2 < layer.eles.length; i2++) {
    var _p = layer.eles[i2]._private;
    var cache3 = _p.imgLayerCaches = _p.imgLayerCaches || {};
    if (cache3) {
      cache3[layer.level] = layer;
    }
  }
  self2.requestRedraw();
};
LTCp.requestRedraw = debounce__default["default"](function() {
  var r2 = this.renderer;
  r2.redrawHint("eles", true);
  r2.redrawHint("drag", true);
  r2.redraw();
}, 100);
LTCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold,
  deqCost,
  deqAvgCost,
  deqNoDrawCost,
  deqFastCost,
  deq: function deq2(self2, pxRatio) {
    return self2.dequeue(pxRatio);
  },
  onDeqd: noop$1,
  shouldRedraw: trueify,
  priority: function priority2(self2) {
    return self2.renderer.beforeRenderPriorities.lyrTxrDeq;
  }
});
var CRp$a = {};
var impl;
function polygon(context, points) {
  for (var i2 = 0; i2 < points.length; i2++) {
    var pt2 = points[i2];
    context.lineTo(pt2.x, pt2.y);
  }
}
function triangleBackcurve(context, points, controlPoint) {
  var firstPt;
  for (var i2 = 0; i2 < points.length; i2++) {
    var pt2 = points[i2];
    if (i2 === 0) {
      firstPt = pt2;
    }
    context.lineTo(pt2.x, pt2.y);
  }
  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
}
function triangleTee(context, trianglePoints, teePoints) {
  if (context.beginPath) {
    context.beginPath();
  }
  var triPts = trianglePoints;
  for (var i2 = 0; i2 < triPts.length; i2++) {
    var pt2 = triPts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  var teePts = teePoints;
  var firstTeePt = teePoints[0];
  context.moveTo(firstTeePt.x, firstTeePt.y);
  for (var i2 = 1; i2 < teePts.length; i2++) {
    var pt2 = teePts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  if (context.closePath) {
    context.closePath();
  }
}
function circleTriangle(context, trianglePoints, rx, ry, r2) {
  if (context.beginPath) {
    context.beginPath();
  }
  context.arc(rx, ry, r2, 0, Math.PI * 2, false);
  var triPts = trianglePoints;
  var firstTrPt = triPts[0];
  context.moveTo(firstTrPt.x, firstTrPt.y);
  for (var i2 = 0; i2 < triPts.length; i2++) {
    var pt2 = triPts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  if (context.closePath) {
    context.closePath();
  }
}
function circle(context, rx, ry, r2) {
  context.arc(rx, ry, r2, 0, Math.PI * 2, false);
}
CRp$a.arrowShapeImpl = function(name2) {
  return (impl || (impl = {
    "polygon": polygon,
    "triangle-backcurve": triangleBackcurve,
    "triangle-tee": triangleTee,
    "circle-triangle": circleTriangle,
    "triangle-cross": triangleTee,
    "circle": circle
  }))[name2];
};
var CRp$9 = {};
CRp$9.drawElement = function(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  } else {
    r2.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  }
};
CRp$9.drawElementOverlay = function(context, ele) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNodeOverlay(context, ele);
  } else {
    r2.drawEdgeOverlay(context, ele);
  }
};
CRp$9.drawElementUnderlay = function(context, ele) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNodeUnderlay(context, ele);
  } else {
    r2.drawEdgeUnderlay(context, ele);
  }
};
CRp$9.drawCachedElementPortion = function(context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity3) {
  var r2 = this;
  var bb = eleTxrCache.getBoundingBox(ele);
  if (bb.w === 0 || bb.h === 0) {
    return;
  }
  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);
  if (eleCache != null) {
    var opacity = getOpacity3(r2, ele);
    if (opacity === 0) {
      return;
    }
    var theta = getRotation(r2, ele);
    var x1 = bb.x1, y1 = bb.y1, w2 = bb.w, h2 = bb.h;
    var x2, y2, sx, sy, smooth;
    if (theta !== 0) {
      var rotPt = eleTxrCache.getRotationPoint(ele);
      sx = rotPt.x;
      sy = rotPt.y;
      context.translate(sx, sy);
      context.rotate(theta);
      smooth = r2.getImgSmoothing(context);
      if (!smooth) {
        r2.setImgSmoothing(context, true);
      }
      var off = eleTxrCache.getRotationOffset(ele);
      x2 = off.x;
      y2 = off.y;
    } else {
      x2 = x1;
      y2 = y1;
    }
    var oldGlobalAlpha;
    if (opacity !== 1) {
      oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = oldGlobalAlpha * opacity;
    }
    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x2, y2, w2, h2);
    if (opacity !== 1) {
      context.globalAlpha = oldGlobalAlpha;
    }
    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-sx, -sy);
      if (!smooth) {
        r2.setImgSmoothing(context, false);
      }
    }
  } else {
    eleTxrCache.drawElement(context, ele);
  }
};
var getZeroRotation = function getZeroRotation2() {
  return 0;
};
var getLabelRotation = function getLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, null);
};
var getSourceLabelRotation = function getSourceLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, "source");
};
var getTargetLabelRotation = function getTargetLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, "target");
};
var getOpacity = function getOpacity2(r2, ele) {
  return ele.effectiveOpacity();
};
var getTextOpacity = function getTextOpacity2(e2, ele) {
  return ele.pstyle("text-opacity").pfValue * ele.effectiveOpacity();
};
CRp$9.drawCachedElement = function(context, ele, pxRatio, extent2, lvl, requestHighQuality) {
  var r2 = this;
  var _r$data = r2.data, eleTxrCache = _r$data.eleTxrCache, lblTxrCache = _r$data.lblTxrCache, slbTxrCache = _r$data.slbTxrCache, tlbTxrCache = _r$data.tlbTxrCache;
  var bb = ele.boundingBox();
  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;
  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }
  if (!extent2 || boundingBoxesIntersect(bb, extent2)) {
    var isEdge2 = ele.isEdge();
    var badLine = ele.element()._private.rscratch.badLine;
    r2.drawElementUnderlay(context, ele);
    r2.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);
    if (!isEdge2 || !badLine) {
      r2.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
    }
    if (isEdge2 && !badLine) {
      r2.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
      r2.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
    }
    r2.drawElementOverlay(context, ele);
  }
};
CRp$9.drawElements = function(context, eles) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    r2.drawElement(context, ele);
  }
};
CRp$9.drawCachedElements = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    r2.drawCachedElement(context, ele, pxRatio, extent2);
  }
};
CRp$9.drawCachedNodes = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (!ele.isNode()) {
      continue;
    }
    r2.drawCachedElement(context, ele, pxRatio, extent2);
  }
};
CRp$9.drawLayeredElements = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  var layers = r2.data.lyrTxrCache.getLayers(eles, pxRatio);
  if (layers) {
    for (var i2 = 0; i2 < layers.length; i2++) {
      var layer = layers[i2];
      var bb = layer.bb;
      if (bb.w === 0 || bb.h === 0) {
        continue;
      }
      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
    }
  } else {
    r2.drawCachedElements(context, eles, pxRatio, extent2);
  }
};
var CRp$8 = {};
CRp$8.drawEdge = function(context, edge, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  var rs = edge._private.rscratch;
  if (shouldDrawOpacity && !edge.visible()) {
    return;
  }
  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
    return;
  }
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  var opacity = shouldDrawOpacity ? edge.pstyle("opacity").value : 1;
  var lineOpacity = shouldDrawOpacity ? edge.pstyle("line-opacity").value : 1;
  var curveStyle = edge.pstyle("curve-style").value;
  var lineStyle = edge.pstyle("line-style").value;
  var edgeWidth = edge.pstyle("width").pfValue;
  var lineCap = edge.pstyle("line-cap").value;
  var effectiveLineOpacity = opacity * lineOpacity;
  var effectiveArrowOpacity = opacity * lineOpacity;
  var drawLine = function drawLine2() {
    var strokeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveLineOpacity;
    if (curveStyle === "straight-triangle") {
      r2.eleStrokeStyle(context, edge, strokeOpacity);
      r2.drawEdgeTrianglePath(edge, context, rs.allpts);
    } else {
      context.lineWidth = edgeWidth;
      context.lineCap = lineCap;
      r2.eleStrokeStyle(context, edge, strokeOpacity);
      r2.drawEdgePath(edge, context, rs.allpts, lineStyle);
      context.lineCap = "butt";
    }
  };
  var drawOverlay = function drawOverlay2() {
    if (!shouldDrawOverlay) {
      return;
    }
    r2.drawEdgeOverlay(context, edge);
  };
  var drawUnderlay = function drawUnderlay2() {
    if (!shouldDrawOverlay) {
      return;
    }
    r2.drawEdgeUnderlay(context, edge);
  };
  var drawArrows = function drawArrows2() {
    var arrowOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveArrowOpacity;
    r2.drawArrowheads(context, edge, arrowOpacity);
  };
  var drawText = function drawText2() {
    r2.drawElementText(context, edge, null, drawLabel);
  };
  context.lineJoin = "round";
  var ghost = edge.pstyle("ghost").value === "yes";
  if (ghost) {
    var gx = edge.pstyle("ghost-offset-x").pfValue;
    var gy = edge.pstyle("ghost-offset-y").pfValue;
    var ghostOpacity = edge.pstyle("ghost-opacity").value;
    var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;
    context.translate(gx, gy);
    drawLine(effectiveGhostOpacity);
    drawArrows(effectiveGhostOpacity);
    context.translate(-gx, -gy);
  }
  drawUnderlay();
  drawLine();
  drawArrows();
  drawOverlay();
  drawText();
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
var drawEdgeOverlayUnderlay = function drawEdgeOverlayUnderlay2(overlayOrUnderlay) {
  if (!["overlay", "underlay"].includes(overlayOrUnderlay)) {
    throw new Error("Invalid state");
  }
  return function(context, edge) {
    if (!edge.visible()) {
      return;
    }
    var opacity = edge.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
    if (opacity === 0) {
      return;
    }
    var r2 = this;
    var usePaths = r2.usePaths();
    var rs = edge._private.rscratch;
    var padding = edge.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
    var width2 = 2 * padding;
    var color = edge.pstyle("".concat(overlayOrUnderlay, "-color")).value;
    context.lineWidth = width2;
    if (rs.edgeType === "self" && !usePaths) {
      context.lineCap = "butt";
    } else {
      context.lineCap = "round";
    }
    r2.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
    r2.drawEdgePath(edge, context, rs.allpts, "solid");
  };
};
CRp$8.drawEdgeOverlay = drawEdgeOverlayUnderlay("overlay");
CRp$8.drawEdgeUnderlay = drawEdgeOverlayUnderlay("underlay");
CRp$8.drawEdgePath = function(edge, context, pts2, type) {
  var rs = edge._private.rscratch;
  var canvasCxt = context;
  var path;
  var pathCacheHit = false;
  var usePaths = this.usePaths();
  var lineDashPattern = edge.pstyle("line-dash-pattern").pfValue;
  var lineDashOffset = edge.pstyle("line-dash-offset").pfValue;
  if (usePaths) {
    var pathCacheKey = pts2.join("$");
    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;
    if (keyMatches) {
      path = context = rs.pathCache;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      rs.pathCacheKey = pathCacheKey;
      rs.pathCache = path;
    }
  }
  if (canvasCxt.setLineDash) {
    switch (type) {
      case "dotted":
        canvasCxt.setLineDash([1, 1]);
        break;
      case "dashed":
        canvasCxt.setLineDash(lineDashPattern);
        canvasCxt.lineDashOffset = lineDashOffset;
        break;
      case "solid":
        canvasCxt.setLineDash([]);
        break;
    }
  }
  if (!pathCacheHit && !rs.badLine) {
    if (context.beginPath) {
      context.beginPath();
    }
    context.moveTo(pts2[0], pts2[1]);
    switch (rs.edgeType) {
      case "bezier":
      case "self":
      case "compound":
      case "multibezier":
        for (var i2 = 2; i2 + 3 < pts2.length; i2 += 4) {
          context.quadraticCurveTo(pts2[i2], pts2[i2 + 1], pts2[i2 + 2], pts2[i2 + 3]);
        }
        break;
      case "straight":
      case "segments":
      case "haystack":
        for (var _i = 2; _i + 1 < pts2.length; _i += 2) {
          context.lineTo(pts2[_i], pts2[_i + 1]);
        }
        break;
    }
  }
  context = canvasCxt;
  if (usePaths) {
    context.stroke(path);
  } else {
    context.stroke();
  }
  if (context.setLineDash) {
    context.setLineDash([]);
  }
};
CRp$8.drawEdgeTrianglePath = function(edge, context, pts2) {
  context.fillStyle = context.strokeStyle;
  var edgeWidth = edge.pstyle("width").pfValue;
  for (var i2 = 0; i2 + 1 < pts2.length; i2 += 2) {
    var vector = [pts2[i2 + 2] - pts2[i2], pts2[i2 + 3] - pts2[i2 + 1]];
    var length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
    var normal = [vector[1] / length, -vector[0] / length];
    var triangleHead = [normal[0] * edgeWidth / 2, normal[1] * edgeWidth / 2];
    context.beginPath();
    context.moveTo(pts2[i2] - triangleHead[0], pts2[i2 + 1] - triangleHead[1]);
    context.lineTo(pts2[i2] + triangleHead[0], pts2[i2 + 1] + triangleHead[1]);
    context.lineTo(pts2[i2 + 2], pts2[i2 + 3]);
    context.closePath();
    context.fill();
  }
};
CRp$8.drawArrowheads = function(context, edge, opacity) {
  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === "haystack";
  if (!isHaystack) {
    this.drawArrowhead(context, edge, "source", rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
  }
  this.drawArrowhead(context, edge, "mid-target", rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
  this.drawArrowhead(context, edge, "mid-source", rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);
  if (!isHaystack) {
    this.drawArrowhead(context, edge, "target", rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
  }
};
CRp$8.drawArrowhead = function(context, edge, prefix, x2, y2, angle, opacity) {
  if (isNaN(x2) || x2 == null || isNaN(y2) || y2 == null || isNaN(angle) || angle == null) {
    return;
  }
  var self2 = this;
  var arrowShape = edge.pstyle(prefix + "-arrow-shape").value;
  if (arrowShape === "none") {
    return;
  }
  var arrowClearFill = edge.pstyle(prefix + "-arrow-fill").value === "hollow" ? "both" : "filled";
  var arrowFill = edge.pstyle(prefix + "-arrow-fill").value;
  var edgeWidth = edge.pstyle("width").pfValue;
  var edgeOpacity = edge.pstyle("opacity").value;
  if (opacity === void 0) {
    opacity = edgeOpacity;
  }
  var gco = context.globalCompositeOperation;
  if (opacity !== 1 || arrowFill === "hollow") {
    context.globalCompositeOperation = "destination-out";
    self2.colorFillStyle(context, 255, 255, 255, 1);
    self2.colorStrokeStyle(context, 255, 255, 255, 1);
    self2.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x2, y2, angle);
    context.globalCompositeOperation = gco;
  }
  var color = edge.pstyle(prefix + "-arrow-color").value;
  self2.colorFillStyle(context, color[0], color[1], color[2], opacity);
  self2.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
  self2.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x2, y2, angle);
};
CRp$8.drawArrowShape = function(edge, context, fill, edgeWidth, shape, x2, y2, angle) {
  var r2 = this;
  var usePaths = this.usePaths() && shape !== "triangle-cross";
  var pathCacheHit = false;
  var path;
  var canvasContext = context;
  var translation = {
    x: x2,
    y: y2
  };
  var scale = edge.pstyle("arrow-scale").value;
  var size3 = this.getArrowWidth(edgeWidth, scale);
  var shapeImpl = r2.arrowShapes[shape];
  if (usePaths) {
    var cache3 = r2.arrowPathCache = r2.arrowPathCache || [];
    var key = hashString(shape);
    var cachedPath = cache3[key];
    if (cachedPath != null) {
      path = context = cachedPath;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      cache3[key] = path;
    }
  }
  if (!pathCacheHit) {
    if (context.beginPath) {
      context.beginPath();
    }
    if (usePaths) {
      shapeImpl.draw(context, 1, 0, {
        x: 0,
        y: 0
      }, 1);
    } else {
      shapeImpl.draw(context, size3, angle, translation, edgeWidth);
    }
    if (context.closePath) {
      context.closePath();
    }
  }
  context = canvasContext;
  if (usePaths) {
    context.translate(x2, y2);
    context.rotate(angle);
    context.scale(size3, size3);
  }
  if (fill === "filled" || fill === "both") {
    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  }
  if (fill === "hollow" || fill === "both") {
    context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size3 : 1);
    context.lineJoin = "miter";
    if (usePaths) {
      context.stroke(path);
    } else {
      context.stroke();
    }
  }
  if (usePaths) {
    context.scale(1 / size3, 1 / size3);
    context.rotate(-angle);
    context.translate(-x2, -y2);
  }
};
var CRp$7 = {};
CRp$7.safeDrawImage = function(context, img, ix, iy, iw, ih, x2, y2, w2, h2) {
  if (iw <= 0 || ih <= 0 || w2 <= 0 || h2 <= 0) {
    return;
  }
  try {
    context.drawImage(img, ix, iy, iw, ih, x2, y2, w2, h2);
  } catch (e2) {
    warn(e2);
  }
};
CRp$7.drawInscribedImage = function(context, img, node, index, nodeOpacity) {
  var r2 = this;
  var pos = node.position();
  var nodeX = pos.x;
  var nodeY = pos.y;
  var styleObj = node.cy().style();
  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
  var fit2 = getIndexedStyle(node, "background-fit", "value", index);
  var repeat = getIndexedStyle(node, "background-repeat", "value", index);
  var nodeW = node.width();
  var nodeH = node.height();
  var paddingX2 = node.padding() * 2;
  var nodeTW = nodeW + (getIndexedStyle(node, "background-width-relative-to", "value", index) === "inner" ? 0 : paddingX2);
  var nodeTH = nodeH + (getIndexedStyle(node, "background-height-relative-to", "value", index) === "inner" ? 0 : paddingX2);
  var rs = node._private.rscratch;
  var clip = getIndexedStyle(node, "background-clip", "value", index);
  var shouldClip = clip === "node";
  var imgOpacity = getIndexedStyle(node, "background-image-opacity", "value", index) * nodeOpacity;
  var smooth = getIndexedStyle(node, "background-image-smoothing", "value", index);
  var imgW = img.width || img.cachedW;
  var imgH = img.height || img.cachedH;
  if (null == imgW || null == imgH) {
    document.body.appendChild(img);
    imgW = img.cachedW = img.width || img.offsetWidth;
    imgH = img.cachedH = img.height || img.offsetHeight;
    document.body.removeChild(img);
  }
  var w2 = imgW;
  var h2 = imgH;
  if (getIndexedStyle(node, "background-width", "value", index) !== "auto") {
    if (getIndexedStyle(node, "background-width", "units", index) === "%") {
      w2 = getIndexedStyle(node, "background-width", "pfValue", index) * nodeTW;
    } else {
      w2 = getIndexedStyle(node, "background-width", "pfValue", index);
    }
  }
  if (getIndexedStyle(node, "background-height", "value", index) !== "auto") {
    if (getIndexedStyle(node, "background-height", "units", index) === "%") {
      h2 = getIndexedStyle(node, "background-height", "pfValue", index) * nodeTH;
    } else {
      h2 = getIndexedStyle(node, "background-height", "pfValue", index);
    }
  }
  if (w2 === 0 || h2 === 0) {
    return;
  }
  if (fit2 === "contain") {
    var scale = Math.min(nodeTW / w2, nodeTH / h2);
    w2 *= scale;
    h2 *= scale;
  } else if (fit2 === "cover") {
    var scale = Math.max(nodeTW / w2, nodeTH / h2);
    w2 *= scale;
    h2 *= scale;
  }
  var x2 = nodeX - nodeTW / 2;
  var posXUnits = getIndexedStyle(node, "background-position-x", "units", index);
  var posXPfVal = getIndexedStyle(node, "background-position-x", "pfValue", index);
  if (posXUnits === "%") {
    x2 += (nodeTW - w2) * posXPfVal;
  } else {
    x2 += posXPfVal;
  }
  var offXUnits = getIndexedStyle(node, "background-offset-x", "units", index);
  var offXPfVal = getIndexedStyle(node, "background-offset-x", "pfValue", index);
  if (offXUnits === "%") {
    x2 += (nodeTW - w2) * offXPfVal;
  } else {
    x2 += offXPfVal;
  }
  var y2 = nodeY - nodeTH / 2;
  var posYUnits = getIndexedStyle(node, "background-position-y", "units", index);
  var posYPfVal = getIndexedStyle(node, "background-position-y", "pfValue", index);
  if (posYUnits === "%") {
    y2 += (nodeTH - h2) * posYPfVal;
  } else {
    y2 += posYPfVal;
  }
  var offYUnits = getIndexedStyle(node, "background-offset-y", "units", index);
  var offYPfVal = getIndexedStyle(node, "background-offset-y", "pfValue", index);
  if (offYUnits === "%") {
    y2 += (nodeTH - h2) * offYPfVal;
  } else {
    y2 += offYPfVal;
  }
  if (rs.pathCache) {
    x2 -= nodeX;
    y2 -= nodeY;
    nodeX = 0;
    nodeY = 0;
  }
  var gAlpha = context.globalAlpha;
  context.globalAlpha = imgOpacity;
  var smoothingEnabled = r2.getImgSmoothing(context);
  var isSmoothingSwitched = false;
  if (smooth === "no" && smoothingEnabled) {
    r2.setImgSmoothing(context, false);
    isSmoothingSwitched = true;
  } else if (smooth === "yes" && !smoothingEnabled) {
    r2.setImgSmoothing(context, true);
    isSmoothingSwitched = true;
  }
  if (repeat === "no-repeat") {
    if (shouldClip) {
      context.save();
      if (rs.pathCache) {
        context.clip(rs.pathCache);
      } else {
        r2.nodeShapes[r2.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
        context.clip();
      }
    }
    r2.safeDrawImage(context, img, 0, 0, imgW, imgH, x2, y2, w2, h2);
    if (shouldClip) {
      context.restore();
    }
  } else {
    var pattern = context.createPattern(img, repeat);
    context.fillStyle = pattern;
    r2.nodeShapes[r2.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
    context.translate(x2, y2);
    context.fill();
    context.translate(-x2, -y2);
  }
  context.globalAlpha = gAlpha;
  if (isSmoothingSwitched) {
    r2.setImgSmoothing(context, smoothingEnabled);
  }
};
var CRp$6 = {};
CRp$6.eleTextBiggerThanMin = function(ele, scale) {
  if (!scale) {
    var zoom2 = ele.cy().zoom();
    var pxRatio = this.getPixelRatio();
    var lvl = Math.ceil(log2(zoom2 * pxRatio));
    scale = Math.pow(2, lvl);
  }
  var computedSize = ele.pstyle("font-size").pfValue * scale;
  var minSize = ele.pstyle("min-zoomed-font-size").pfValue;
  if (computedSize < minSize) {
    return false;
  }
  return true;
};
CRp$6.drawElementText = function(context, ele, shiftToOriginWithBb, force, prefix) {
  var useEleOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  if (force == null) {
    if (useEleOpacity && !r2.eleTextBiggerThanMin(ele)) {
      return;
    }
  } else if (force === false) {
    return;
  }
  if (ele.isNode()) {
    var label = ele.pstyle("label");
    if (!label || !label.value) {
      return;
    }
    var justification = r2.getLabelJustification(ele);
    context.textAlign = justification;
    context.textBaseline = "bottom";
  } else {
    var badLine = ele.element()._private.rscratch.badLine;
    var _label = ele.pstyle("label");
    var srcLabel = ele.pstyle("source-label");
    var tgtLabel = ele.pstyle("target-label");
    if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
      return;
    }
    context.textAlign = "center";
    context.textBaseline = "bottom";
  }
  var applyRotation = !shiftToOriginWithBb;
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  if (prefix == null) {
    r2.drawText(context, ele, null, applyRotation, useEleOpacity);
    if (ele.isEdge()) {
      r2.drawText(context, ele, "source", applyRotation, useEleOpacity);
      r2.drawText(context, ele, "target", applyRotation, useEleOpacity);
    }
  } else {
    r2.drawText(context, ele, prefix, applyRotation, useEleOpacity);
  }
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
CRp$6.getFontCache = function(context) {
  var cache3;
  this.fontCaches = this.fontCaches || [];
  for (var i2 = 0; i2 < this.fontCaches.length; i2++) {
    cache3 = this.fontCaches[i2];
    if (cache3.context === context) {
      return cache3;
    }
  }
  cache3 = {
    context
  };
  this.fontCaches.push(cache3);
  return cache3;
};
CRp$6.setupTextStyle = function(context, ele) {
  var useEleOpacity = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var labelStyle = ele.pstyle("font-style").strValue;
  var labelSize = ele.pstyle("font-size").pfValue + "px";
  var labelFamily = ele.pstyle("font-family").strValue;
  var labelWeight = ele.pstyle("font-weight").strValue;
  var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle("text-opacity").value : 1;
  var outlineOpacity = ele.pstyle("text-outline-opacity").value * opacity;
  var color = ele.pstyle("color").value;
  var outlineColor = ele.pstyle("text-outline-color").value;
  context.font = labelStyle + " " + labelWeight + " " + labelSize + " " + labelFamily;
  context.lineJoin = "round";
  this.colorFillStyle(context, color[0], color[1], color[2], opacity);
  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
};
function roundRect(ctx, x2, y2, width2, height2) {
  var radius = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 5;
  ctx.beginPath();
  ctx.moveTo(x2 + radius, y2);
  ctx.lineTo(x2 + width2 - radius, y2);
  ctx.quadraticCurveTo(x2 + width2, y2, x2 + width2, y2 + radius);
  ctx.lineTo(x2 + width2, y2 + height2 - radius);
  ctx.quadraticCurveTo(x2 + width2, y2 + height2, x2 + width2 - radius, y2 + height2);
  ctx.lineTo(x2 + radius, y2 + height2);
  ctx.quadraticCurveTo(x2, y2 + height2, x2, y2 + height2 - radius);
  ctx.lineTo(x2, y2 + radius);
  ctx.quadraticCurveTo(x2, y2, x2 + radius, y2);
  ctx.closePath();
  ctx.fill();
}
CRp$6.getTextAngle = function(ele, prefix) {
  var theta;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var pdash = prefix ? prefix + "-" : "";
  var rotation = ele.pstyle(pdash + "text-rotation");
  var textAngle = getPrefixedProperty(rscratch, "labelAngle", prefix);
  if (rotation.strValue === "autorotate") {
    theta = ele.isEdge() ? textAngle : 0;
  } else if (rotation.strValue === "none") {
    theta = 0;
  } else {
    theta = rotation.pfValue;
  }
  return theta;
};
CRp$6.drawText = function(context, ele, prefix) {
  var applyRotation = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var useEleOpacity = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;
  if (useEleOpacity && (parentOpacity === 0 || ele.pstyle("text-opacity").value === 0)) {
    return;
  }
  if (prefix === "main") {
    prefix = null;
  }
  var textX = getPrefixedProperty(rscratch, "labelX", prefix);
  var textY = getPrefixedProperty(rscratch, "labelY", prefix);
  var orgTextX, orgTextY;
  var text2 = this.getLabelText(ele, prefix);
  if (text2 != null && text2 !== "" && !isNaN(textX) && !isNaN(textY)) {
    this.setupTextStyle(context, ele, useEleOpacity);
    var pdash = prefix ? prefix + "-" : "";
    var textW = getPrefixedProperty(rscratch, "labelWidth", prefix);
    var textH = getPrefixedProperty(rscratch, "labelHeight", prefix);
    var marginX = ele.pstyle(pdash + "text-margin-x").pfValue;
    var marginY = ele.pstyle(pdash + "text-margin-y").pfValue;
    var isEdge2 = ele.isEdge();
    var halign = ele.pstyle("text-halign").value;
    var valign = ele.pstyle("text-valign").value;
    if (isEdge2) {
      halign = "center";
      valign = "center";
    }
    textX += marginX;
    textY += marginY;
    var theta;
    if (!applyRotation) {
      theta = 0;
    } else {
      theta = this.getTextAngle(ele, prefix);
    }
    if (theta !== 0) {
      orgTextX = textX;
      orgTextY = textY;
      context.translate(orgTextX, orgTextY);
      context.rotate(theta);
      textX = 0;
      textY = 0;
    }
    switch (valign) {
      case "top":
        break;
      case "center":
        textY += textH / 2;
        break;
      case "bottom":
        textY += textH;
        break;
    }
    var backgroundOpacity = ele.pstyle("text-background-opacity").value;
    var borderOpacity = ele.pstyle("text-border-opacity").value;
    var textBorderWidth = ele.pstyle("text-border-width").pfValue;
    var backgroundPadding = ele.pstyle("text-background-padding").pfValue;
    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
      var bgX = textX - backgroundPadding;
      switch (halign) {
        case "left":
          bgX -= textW;
          break;
        case "center":
          bgX -= textW / 2;
          break;
      }
      var bgY = textY - textH - backgroundPadding;
      var bgW = textW + 2 * backgroundPadding;
      var bgH = textH + 2 * backgroundPadding;
      if (backgroundOpacity > 0) {
        var textFill = context.fillStyle;
        var textBackgroundColor = ele.pstyle("text-background-color").value;
        context.fillStyle = "rgba(" + textBackgroundColor[0] + "," + textBackgroundColor[1] + "," + textBackgroundColor[2] + "," + backgroundOpacity * parentOpacity + ")";
        var styleShape = ele.pstyle("text-background-shape").strValue;
        if (styleShape.indexOf("round") === 0) {
          roundRect(context, bgX, bgY, bgW, bgH, 2);
        } else {
          context.fillRect(bgX, bgY, bgW, bgH);
        }
        context.fillStyle = textFill;
      }
      if (textBorderWidth > 0 && borderOpacity > 0) {
        var textStroke = context.strokeStyle;
        var textLineWidth = context.lineWidth;
        var textBorderColor = ele.pstyle("text-border-color").value;
        var textBorderStyle = ele.pstyle("text-border-style").value;
        context.strokeStyle = "rgba(" + textBorderColor[0] + "," + textBorderColor[1] + "," + textBorderColor[2] + "," + borderOpacity * parentOpacity + ")";
        context.lineWidth = textBorderWidth;
        if (context.setLineDash) {
          switch (textBorderStyle) {
            case "dotted":
              context.setLineDash([1, 1]);
              break;
            case "dashed":
              context.setLineDash([4, 2]);
              break;
            case "double":
              context.lineWidth = textBorderWidth / 4;
              context.setLineDash([]);
              break;
            case "solid":
              context.setLineDash([]);
              break;
          }
        }
        context.strokeRect(bgX, bgY, bgW, bgH);
        if (textBorderStyle === "double") {
          var whiteWidth = textBorderWidth / 2;
          context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
        }
        if (context.setLineDash) {
          context.setLineDash([]);
        }
        context.lineWidth = textLineWidth;
        context.strokeStyle = textStroke;
      }
    }
    var lineWidth = 2 * ele.pstyle("text-outline-width").pfValue;
    if (lineWidth > 0) {
      context.lineWidth = lineWidth;
    }
    if (ele.pstyle("text-wrap").value === "wrap") {
      var lines = getPrefixedProperty(rscratch, "labelWrapCachedLines", prefix);
      var lineHeight = getPrefixedProperty(rscratch, "labelLineHeight", prefix);
      var halfTextW = textW / 2;
      var justification = this.getLabelJustification(ele);
      if (justification === "auto")
        ;
      else if (halign === "left") {
        if (justification === "left") {
          textX += -textW;
        } else if (justification === "center") {
          textX += -halfTextW;
        }
      } else if (halign === "center") {
        if (justification === "left") {
          textX += -halfTextW;
        } else if (justification === "right") {
          textX += halfTextW;
        }
      } else if (halign === "right") {
        if (justification === "center") {
          textX += halfTextW;
        } else if (justification === "right") {
          textX += textW;
        }
      }
      switch (valign) {
        case "top":
          textY -= (lines.length - 1) * lineHeight;
          break;
        case "center":
        case "bottom":
          textY -= (lines.length - 1) * lineHeight;
          break;
      }
      for (var l2 = 0; l2 < lines.length; l2++) {
        if (lineWidth > 0) {
          context.strokeText(lines[l2], textX, textY);
        }
        context.fillText(lines[l2], textX, textY);
        textY += lineHeight;
      }
    } else {
      if (lineWidth > 0) {
        context.strokeText(text2, textX, textY);
      }
      context.fillText(text2, textX, textY);
    }
    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-orgTextX, -orgTextY);
    }
  }
};
var CRp$5 = {};
CRp$5.drawNode = function(context, node, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  var nodeWidth, nodeHeight;
  var _p = node._private;
  var rs = _p.rscratch;
  var pos = node.position();
  if (!number$1(pos.x) || !number$1(pos.y)) {
    return;
  }
  if (shouldDrawOpacity && !node.visible()) {
    return;
  }
  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
  var usePaths = r2.usePaths();
  var path;
  var pathCacheHit = false;
  var padding = node.padding();
  nodeWidth = node.width() + 2 * padding;
  nodeHeight = node.height() + 2 * padding;
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  var bgImgProp = node.pstyle("background-image");
  var urls = bgImgProp.value;
  var urlDefined = new Array(urls.length);
  var image = new Array(urls.length);
  var numImages = 0;
  for (var i2 = 0; i2 < urls.length; i2++) {
    var url = urls[i2];
    var defd = urlDefined[i2] = url != null && url !== "none";
    if (defd) {
      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, "background-image-crossorigin", "value", i2);
      numImages++;
      image[i2] = r2.getCachedImage(url, bgImgCrossOrigin, function() {
        _p.backgroundTimestamp = Date.now();
        node.emitAndNotify("background");
      });
    }
  }
  var darkness = node.pstyle("background-blacken").value;
  var borderWidth = node.pstyle("border-width").pfValue;
  var bgOpacity = node.pstyle("background-opacity").value * eleOpacity;
  var borderColor = node.pstyle("border-color").value;
  var borderStyle = node.pstyle("border-style").value;
  var borderOpacity = node.pstyle("border-opacity").value * eleOpacity;
  context.lineJoin = "miter";
  var setupShapeColor = function setupShapeColor2() {
    var bgOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : bgOpacity;
    r2.eleFillStyle(context, node, bgOpy);
  };
  var setupBorderColor = function setupBorderColor2() {
    var bdrOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : borderOpacity;
    r2.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
  };
  var styleShape = node.pstyle("shape").strValue;
  var shapePts = node.pstyle("shape-polygon-points").pfValue;
  if (usePaths) {
    context.translate(pos.x, pos.y);
    var pathCache = r2.nodePathCache = r2.nodePathCache || [];
    var key = hashStrings(styleShape === "polygon" ? styleShape + "," + shapePts.join(",") : styleShape, "" + nodeHeight, "" + nodeWidth);
    var cachedPath = pathCache[key];
    if (cachedPath != null) {
      path = cachedPath;
      pathCacheHit = true;
      rs.pathCache = path;
    } else {
      path = new Path2D();
      pathCache[key] = rs.pathCache = path;
    }
  }
  var drawShape = function drawShape2() {
    if (!pathCacheHit) {
      var npos = pos;
      if (usePaths) {
        npos = {
          x: 0,
          y: 0
        };
      }
      r2.nodeShapes[r2.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
    }
    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  };
  var drawImages = function drawImages2() {
    var nodeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
    var inside = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var prevBging = _p.backgrounding;
    var totalCompleted = 0;
    for (var _i = 0; _i < image.length; _i++) {
      var bgContainment = node.cy().style().getIndexedStyle(node, "background-image-containment", "value", _i);
      if (inside && bgContainment === "over" || !inside && bgContainment === "inside") {
        totalCompleted++;
        continue;
      }
      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
        totalCompleted++;
        r2.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
      }
    }
    _p.backgrounding = !(totalCompleted === numImages);
    if (prevBging !== _p.backgrounding) {
      node.updateStyle(false);
    }
  };
  var drawPie = function drawPie2() {
    var redrawShape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var pieOpacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : eleOpacity;
    if (r2.hasPie(node)) {
      r2.drawPie(context, node, pieOpacity);
      if (redrawShape) {
        if (!usePaths) {
          r2.nodeShapes[r2.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
        }
      }
    }
  };
  var darken = function darken2() {
    var darkenOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
    var c2 = darkness > 0 ? 0 : 255;
    if (darkness !== 0) {
      r2.colorFillStyle(context, c2, c2, c2, opacity);
      if (usePaths) {
        context.fill(path);
      } else {
        context.fill();
      }
    }
  };
  var drawBorder = function drawBorder2() {
    if (borderWidth > 0) {
      context.lineWidth = borderWidth;
      context.lineCap = "butt";
      if (context.setLineDash) {
        switch (borderStyle) {
          case "dotted":
            context.setLineDash([1, 1]);
            break;
          case "dashed":
            context.setLineDash([4, 2]);
            break;
          case "solid":
          case "double":
            context.setLineDash([]);
            break;
        }
      }
      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      }
      if (borderStyle === "double") {
        context.lineWidth = borderWidth / 3;
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = "destination-out";
        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }
        context.globalCompositeOperation = gco;
      }
      if (context.setLineDash) {
        context.setLineDash([]);
      }
    }
  };
  var drawOverlay = function drawOverlay2() {
    if (shouldDrawOverlay) {
      r2.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
    }
  };
  var drawUnderlay = function drawUnderlay2() {
    if (shouldDrawOverlay) {
      r2.drawNodeUnderlay(context, node, pos, nodeWidth, nodeHeight);
    }
  };
  var drawText = function drawText2() {
    r2.drawElementText(context, node, null, drawLabel);
  };
  var ghost = node.pstyle("ghost").value === "yes";
  if (ghost) {
    var gx = node.pstyle("ghost-offset-x").pfValue;
    var gy = node.pstyle("ghost-offset-y").pfValue;
    var ghostOpacity = node.pstyle("ghost-opacity").value;
    var effGhostOpacity = ghostOpacity * eleOpacity;
    context.translate(gx, gy);
    setupShapeColor(ghostOpacity * bgOpacity);
    drawShape();
    drawImages(effGhostOpacity, true);
    setupBorderColor(ghostOpacity * borderOpacity);
    drawBorder();
    drawPie(darkness !== 0 || borderWidth !== 0);
    drawImages(effGhostOpacity, false);
    darken(effGhostOpacity);
    context.translate(-gx, -gy);
  }
  if (usePaths) {
    context.translate(-pos.x, -pos.y);
  }
  drawUnderlay();
  if (usePaths) {
    context.translate(pos.x, pos.y);
  }
  setupShapeColor();
  drawShape();
  drawImages(eleOpacity, true);
  setupBorderColor();
  drawBorder();
  drawPie(darkness !== 0 || borderWidth !== 0);
  drawImages(eleOpacity, false);
  darken();
  if (usePaths) {
    context.translate(-pos.x, -pos.y);
  }
  drawText();
  drawOverlay();
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
var drawNodeOverlayUnderlay = function drawNodeOverlayUnderlay2(overlayOrUnderlay) {
  if (!["overlay", "underlay"].includes(overlayOrUnderlay)) {
    throw new Error("Invalid state");
  }
  return function(context, node, pos, nodeWidth, nodeHeight) {
    var r2 = this;
    if (!node.visible()) {
      return;
    }
    var padding = node.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
    var opacity = node.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
    var color = node.pstyle("".concat(overlayOrUnderlay, "-color")).value;
    var shape = node.pstyle("".concat(overlayOrUnderlay, "-shape")).value;
    if (opacity > 0) {
      pos = pos || node.position();
      if (nodeWidth == null || nodeHeight == null) {
        var _padding = node.padding();
        nodeWidth = node.width() + 2 * _padding;
        nodeHeight = node.height() + 2 * _padding;
      }
      r2.colorFillStyle(context, color[0], color[1], color[2], opacity);
      r2.nodeShapes[shape].draw(context, pos.x, pos.y, nodeWidth + padding * 2, nodeHeight + padding * 2);
      context.fill();
    }
  };
};
CRp$5.drawNodeOverlay = drawNodeOverlayUnderlay("overlay");
CRp$5.drawNodeUnderlay = drawNodeOverlayUnderlay("underlay");
CRp$5.hasPie = function(node) {
  node = node[0];
  return node._private.hasPie;
};
CRp$5.drawPie = function(context, node, nodeOpacity, pos) {
  node = node[0];
  pos = pos || node.position();
  var cyStyle = node.cy().style();
  var pieSize = node.pstyle("pie-size");
  var x2 = pos.x;
  var y2 = pos.y;
  var nodeW = node.width();
  var nodeH = node.height();
  var radius = Math.min(nodeW, nodeH) / 2;
  var lastPercent = 0;
  var usePaths = this.usePaths();
  if (usePaths) {
    x2 = 0;
    y2 = 0;
  }
  if (pieSize.units === "%") {
    radius = radius * pieSize.pfValue;
  } else if (pieSize.pfValue !== void 0) {
    radius = pieSize.pfValue / 2;
  }
  for (var i2 = 1; i2 <= cyStyle.pieBackgroundN; i2++) {
    var size3 = node.pstyle("pie-" + i2 + "-background-size").value;
    var color = node.pstyle("pie-" + i2 + "-background-color").value;
    var opacity = node.pstyle("pie-" + i2 + "-background-opacity").value * nodeOpacity;
    var percent = size3 / 100;
    if (percent + lastPercent > 1) {
      percent = 1 - lastPercent;
    }
    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent;
    var angleDelta = 2 * Math.PI * percent;
    var angleEnd = angleStart + angleDelta;
    if (size3 === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
      continue;
    }
    context.beginPath();
    context.moveTo(x2, y2);
    context.arc(x2, y2, radius, angleStart, angleEnd);
    context.closePath();
    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
    context.fill();
    lastPercent += percent;
  }
};
var CRp$4 = {};
var motionBlurDelay = 100;
CRp$4.getPixelRatio = function() {
  var context = this.data.contexts[0];
  if (this.forcedPixelRatio != null) {
    return this.forcedPixelRatio;
  }
  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
  return (window.devicePixelRatio || 1) / backingStore;
};
CRp$4.paintCache = function(context) {
  var caches = this.paintCaches = this.paintCaches || [];
  var needToCreateCache = true;
  var cache3;
  for (var i2 = 0; i2 < caches.length; i2++) {
    cache3 = caches[i2];
    if (cache3.context === context) {
      needToCreateCache = false;
      break;
    }
  }
  if (needToCreateCache) {
    cache3 = {
      context
    };
    caches.push(cache3);
  }
  return cache3;
};
CRp$4.createGradientStyleFor = function(context, shapeStyleName, ele, fill, opacity) {
  var gradientStyle;
  var usePaths = this.usePaths();
  var colors2 = ele.pstyle(shapeStyleName + "-gradient-stop-colors").value, positions2 = ele.pstyle(shapeStyleName + "-gradient-stop-positions").pfValue;
  if (fill === "radial-gradient") {
    if (ele.isEdge()) {
      var start = ele.sourceEndpoint(), end = ele.targetEndpoint(), mid = ele.midpoint();
      var d1 = dist$2(start, mid);
      var d2 = dist$2(end, mid);
      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
    } else {
      var pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(), width2 = ele.paddedWidth(), height2 = ele.paddedHeight();
      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width2, height2));
    }
  } else {
    if (ele.isEdge()) {
      var _start = ele.sourceEndpoint(), _end = ele.targetEndpoint();
      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
    } else {
      var _pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(), _width = ele.paddedWidth(), _height = ele.paddedHeight(), halfWidth = _width / 2, halfHeight = _height / 2;
      var direction = ele.pstyle("background-gradient-direction").value;
      switch (direction) {
        case "to-bottom":
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
          break;
        case "to-top":
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
          break;
        case "to-left":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
          break;
        case "to-right":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
          break;
        case "to-bottom-right":
        case "to-right-bottom":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
          break;
        case "to-top-right":
        case "to-right-top":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
          break;
        case "to-bottom-left":
        case "to-left-bottom":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
          break;
        case "to-top-left":
        case "to-left-top":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
          break;
      }
    }
  }
  if (!gradientStyle)
    return null;
  var hasPositions = positions2.length === colors2.length;
  var length = colors2.length;
  for (var i2 = 0; i2 < length; i2++) {
    gradientStyle.addColorStop(hasPositions ? positions2[i2] : i2 / (length - 1), "rgba(" + colors2[i2][0] + "," + colors2[i2][1] + "," + colors2[i2][2] + "," + opacity + ")");
  }
  return gradientStyle;
};
CRp$4.gradientFillStyle = function(context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, "background", ele, fill, opacity);
  if (!gradientStyle)
    return null;
  context.fillStyle = gradientStyle;
};
CRp$4.colorFillStyle = function(context, r2, g2, b2, a2) {
  context.fillStyle = "rgba(" + r2 + "," + g2 + "," + b2 + "," + a2 + ")";
};
CRp$4.eleFillStyle = function(context, ele, opacity) {
  var backgroundFill = ele.pstyle("background-fill").value;
  if (backgroundFill === "linear-gradient" || backgroundFill === "radial-gradient") {
    this.gradientFillStyle(context, ele, backgroundFill, opacity);
  } else {
    var backgroundColor = ele.pstyle("background-color").value;
    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
  }
};
CRp$4.gradientStrokeStyle = function(context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, "line", ele, fill, opacity);
  if (!gradientStyle)
    return null;
  context.strokeStyle = gradientStyle;
};
CRp$4.colorStrokeStyle = function(context, r2, g2, b2, a2) {
  context.strokeStyle = "rgba(" + r2 + "," + g2 + "," + b2 + "," + a2 + ")";
};
CRp$4.eleStrokeStyle = function(context, ele, opacity) {
  var lineFill = ele.pstyle("line-fill").value;
  if (lineFill === "linear-gradient" || lineFill === "radial-gradient") {
    this.gradientStrokeStyle(context, ele, lineFill, opacity);
  } else {
    var lineColor = ele.pstyle("line-color").value;
    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
  }
};
CRp$4.matchCanvasSize = function(container2) {
  var r2 = this;
  var data4 = r2.data;
  var bb = r2.findContainerClientCoords();
  var width2 = bb[2];
  var height2 = bb[3];
  var pixelRatio = r2.getPixelRatio();
  var mbPxRatio = r2.motionBlurPxRatio;
  if (container2 === r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_NODE] || container2 === r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_DRAG]) {
    pixelRatio = mbPxRatio;
  }
  var canvasWidth = width2 * pixelRatio;
  var canvasHeight = height2 * pixelRatio;
  var canvas;
  if (canvasWidth === r2.canvasWidth && canvasHeight === r2.canvasHeight) {
    return;
  }
  r2.fontCaches = null;
  var canvasContainer = data4.canvasContainer;
  canvasContainer.style.width = width2 + "px";
  canvasContainer.style.height = height2 + "px";
  for (var i2 = 0; i2 < r2.CANVAS_LAYERS; i2++) {
    canvas = data4.canvases[i2];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width2 + "px";
    canvas.style.height = height2 + "px";
  }
  for (var i2 = 0; i2 < r2.BUFFER_COUNT; i2++) {
    canvas = data4.bufferCanvases[i2];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width2 + "px";
    canvas.style.height = height2 + "px";
  }
  r2.textureMult = 1;
  if (pixelRatio <= 1) {
    canvas = data4.bufferCanvases[r2.TEXTURE_BUFFER];
    r2.textureMult = 2;
    canvas.width = canvasWidth * r2.textureMult;
    canvas.height = canvasHeight * r2.textureMult;
  }
  r2.canvasWidth = canvasWidth;
  r2.canvasHeight = canvasHeight;
};
CRp$4.renderTo = function(cxt, zoom2, pan2, pxRatio) {
  this.render({
    forcedContext: cxt,
    forcedZoom: zoom2,
    forcedPan: pan2,
    drawAllLayers: true,
    forcedPxRatio: pxRatio
  });
};
CRp$4.render = function(options2) {
  options2 = options2 || staticEmptyObject();
  var forcedContext = options2.forcedContext;
  var drawAllLayers = options2.drawAllLayers;
  var drawOnlyNodeLayer = options2.drawOnlyNodeLayer;
  var forcedZoom = options2.forcedZoom;
  var forcedPan = options2.forcedPan;
  var r2 = this;
  var pixelRatio = options2.forcedPxRatio === void 0 ? this.getPixelRatio() : options2.forcedPxRatio;
  var cy2 = r2.cy;
  var data4 = r2.data;
  var needDraw = data4.canvasNeedsRedraw;
  var textureDraw = r2.textureOnViewport && !forcedContext && (r2.pinching || r2.hoverData.dragging || r2.swipePanning || r2.data.wheelZooming);
  var motionBlur = options2.motionBlur !== void 0 ? options2.motionBlur : r2.motionBlur;
  var mbPxRatio = r2.motionBlurPxRatio;
  var hasCompoundNodes2 = cy2.hasCompoundNodes();
  var inNodeDragGesture = r2.hoverData.draggingEles;
  var inBoxSelection = r2.hoverData.selecting || r2.touchData.selecting ? true : false;
  motionBlur = motionBlur && !forcedContext && r2.motionBlurEnabled && !inBoxSelection;
  var motionBlurFadeEffect = motionBlur;
  if (!forcedContext) {
    if (r2.prevPxRatio !== pixelRatio) {
      r2.invalidateContainerClientCoordsCache();
      r2.matchCanvasSize(r2.container);
      r2.redrawHint("eles", true);
      r2.redrawHint("drag", true);
    }
    r2.prevPxRatio = pixelRatio;
  }
  if (!forcedContext && r2.motionBlurTimeout) {
    clearTimeout(r2.motionBlurTimeout);
  }
  if (motionBlur) {
    if (r2.mbFrames == null) {
      r2.mbFrames = 0;
    }
    r2.mbFrames++;
    if (r2.mbFrames < 3) {
      motionBlurFadeEffect = false;
    }
    if (r2.mbFrames > r2.minMbLowQualFrames) {
      r2.motionBlurPxRatio = r2.mbPxRBlurry;
    }
  }
  if (r2.clearingMotionBlur) {
    r2.motionBlurPxRatio = 1;
  }
  if (r2.textureDrawLastFrame && !textureDraw) {
    needDraw[r2.NODE] = true;
    needDraw[r2.SELECT_BOX] = true;
  }
  var style3 = cy2.style();
  var zoom2 = cy2.zoom();
  var effectiveZoom = forcedZoom !== void 0 ? forcedZoom : zoom2;
  var pan2 = cy2.pan();
  var effectivePan = {
    x: pan2.x,
    y: pan2.y
  };
  var vp = {
    zoom: zoom2,
    pan: {
      x: pan2.x,
      y: pan2.y
    }
  };
  var prevVp = r2.prevViewport;
  var viewportIsDiff = prevVp === void 0 || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;
  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes2)) {
    r2.motionBlurPxRatio = 1;
  }
  if (forcedPan) {
    effectivePan = forcedPan;
  }
  effectiveZoom *= pixelRatio;
  effectivePan.x *= pixelRatio;
  effectivePan.y *= pixelRatio;
  var eles = r2.getCachedZSortedEles();
  function mbclear(context2, x2, y2, w2, h2) {
    var gco = context2.globalCompositeOperation;
    context2.globalCompositeOperation = "destination-out";
    r2.colorFillStyle(context2, 255, 255, 255, r2.motionBlurTransparency);
    context2.fillRect(x2, y2, w2, h2);
    context2.globalCompositeOperation = gco;
  }
  function setContextTransform(context2, clear2) {
    var ePan, eZoom, w2, h2;
    if (!r2.clearingMotionBlur && (context2 === data4.bufferContexts[r2.MOTIONBLUR_BUFFER_NODE] || context2 === data4.bufferContexts[r2.MOTIONBLUR_BUFFER_DRAG])) {
      ePan = {
        x: pan2.x * mbPxRatio,
        y: pan2.y * mbPxRatio
      };
      eZoom = zoom2 * mbPxRatio;
      w2 = r2.canvasWidth * mbPxRatio;
      h2 = r2.canvasHeight * mbPxRatio;
    } else {
      ePan = effectivePan;
      eZoom = effectiveZoom;
      w2 = r2.canvasWidth;
      h2 = r2.canvasHeight;
    }
    context2.setTransform(1, 0, 0, 1, 0, 0);
    if (clear2 === "motionBlur") {
      mbclear(context2, 0, 0, w2, h2);
    } else if (!forcedContext && (clear2 === void 0 || clear2)) {
      context2.clearRect(0, 0, w2, h2);
    }
    if (!drawAllLayers) {
      context2.translate(ePan.x, ePan.y);
      context2.scale(eZoom, eZoom);
    }
    if (forcedPan) {
      context2.translate(forcedPan.x, forcedPan.y);
    }
    if (forcedZoom) {
      context2.scale(forcedZoom, forcedZoom);
    }
  }
  if (!textureDraw) {
    r2.textureDrawLastFrame = false;
  }
  if (textureDraw) {
    r2.textureDrawLastFrame = true;
    if (!r2.textureCache) {
      r2.textureCache = {};
      r2.textureCache.bb = cy2.mutableElements().boundingBox();
      r2.textureCache.texture = r2.data.bufferCanvases[r2.TEXTURE_BUFFER];
      var cxt = r2.data.bufferContexts[r2.TEXTURE_BUFFER];
      cxt.setTransform(1, 0, 0, 1, 0, 0);
      cxt.clearRect(0, 0, r2.canvasWidth * r2.textureMult, r2.canvasHeight * r2.textureMult);
      r2.render({
        forcedContext: cxt,
        drawOnlyNodeLayer: true,
        forcedPxRatio: pixelRatio * r2.textureMult
      });
      var vp = r2.textureCache.viewport = {
        zoom: cy2.zoom(),
        pan: cy2.pan(),
        width: r2.canvasWidth,
        height: r2.canvasHeight
      };
      vp.mpan = {
        x: (0 - vp.pan.x) / vp.zoom,
        y: (0 - vp.pan.y) / vp.zoom
      };
    }
    needDraw[r2.DRAG] = false;
    needDraw[r2.NODE] = false;
    var context = data4.contexts[r2.NODE];
    var texture = r2.textureCache.texture;
    var vp = r2.textureCache.viewport;
    context.setTransform(1, 0, 0, 1, 0, 0);
    if (motionBlur) {
      mbclear(context, 0, 0, vp.width, vp.height);
    } else {
      context.clearRect(0, 0, vp.width, vp.height);
    }
    var outsideBgColor = style3.core("outside-texture-bg-color").value;
    var outsideBgOpacity = style3.core("outside-texture-bg-opacity").value;
    r2.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
    context.fillRect(0, 0, vp.width, vp.height);
    var zoom2 = cy2.zoom();
    setContextTransform(context, false);
    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
  } else if (r2.textureOnViewport && !forcedContext) {
    r2.textureCache = null;
  }
  var extent2 = cy2.extent();
  var vpManip = r2.pinching || r2.hoverData.dragging || r2.swipePanning || r2.data.wheelZooming || r2.hoverData.draggingEles || r2.cy.animated();
  var hideEdges = r2.hideEdgesOnViewport && vpManip;
  var needMbClear = [];
  needMbClear[r2.NODE] = !needDraw[r2.NODE] && motionBlur && !r2.clearedForMotionBlur[r2.NODE] || r2.clearingMotionBlur;
  if (needMbClear[r2.NODE]) {
    r2.clearedForMotionBlur[r2.NODE] = true;
  }
  needMbClear[r2.DRAG] = !needDraw[r2.DRAG] && motionBlur && !r2.clearedForMotionBlur[r2.DRAG] || r2.clearingMotionBlur;
  if (needMbClear[r2.DRAG]) {
    r2.clearedForMotionBlur[r2.DRAG] = true;
  }
  if (needDraw[r2.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r2.NODE]) {
    var useBuffer = motionBlur && !needMbClear[r2.NODE] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r2.data.bufferContexts[r2.MOTIONBLUR_BUFFER_NODE] : data4.contexts[r2.NODE]);
    var clear = motionBlur && !useBuffer ? "motionBlur" : void 0;
    setContextTransform(context, clear);
    if (hideEdges) {
      r2.drawCachedNodes(context, eles.nondrag, pixelRatio, extent2);
    } else {
      r2.drawLayeredElements(context, eles.nondrag, pixelRatio, extent2);
    }
    if (r2.debug) {
      r2.drawDebugPoints(context, eles.nondrag);
    }
    if (!drawAllLayers && !motionBlur) {
      needDraw[r2.NODE] = false;
    }
  }
  if (!drawOnlyNodeLayer && (needDraw[r2.DRAG] || drawAllLayers || needMbClear[r2.DRAG])) {
    var useBuffer = motionBlur && !needMbClear[r2.DRAG] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r2.data.bufferContexts[r2.MOTIONBLUR_BUFFER_DRAG] : data4.contexts[r2.DRAG]);
    setContextTransform(context, motionBlur && !useBuffer ? "motionBlur" : void 0);
    if (hideEdges) {
      r2.drawCachedNodes(context, eles.drag, pixelRatio, extent2);
    } else {
      r2.drawCachedElements(context, eles.drag, pixelRatio, extent2);
    }
    if (r2.debug) {
      r2.drawDebugPoints(context, eles.drag);
    }
    if (!drawAllLayers && !motionBlur) {
      needDraw[r2.DRAG] = false;
    }
  }
  if (r2.showFps || !drawOnlyNodeLayer && needDraw[r2.SELECT_BOX] && !drawAllLayers) {
    var context = forcedContext || data4.contexts[r2.SELECT_BOX];
    setContextTransform(context);
    if (r2.selection[4] == 1 && (r2.hoverData.selecting || r2.touchData.selecting)) {
      var zoom2 = r2.cy.zoom();
      var borderWidth = style3.core("selection-box-border-width").value / zoom2;
      context.lineWidth = borderWidth;
      context.fillStyle = "rgba(" + style3.core("selection-box-color").value[0] + "," + style3.core("selection-box-color").value[1] + "," + style3.core("selection-box-color").value[2] + "," + style3.core("selection-box-opacity").value + ")";
      context.fillRect(r2.selection[0], r2.selection[1], r2.selection[2] - r2.selection[0], r2.selection[3] - r2.selection[1]);
      if (borderWidth > 0) {
        context.strokeStyle = "rgba(" + style3.core("selection-box-border-color").value[0] + "," + style3.core("selection-box-border-color").value[1] + "," + style3.core("selection-box-border-color").value[2] + "," + style3.core("selection-box-opacity").value + ")";
        context.strokeRect(r2.selection[0], r2.selection[1], r2.selection[2] - r2.selection[0], r2.selection[3] - r2.selection[1]);
      }
    }
    if (data4.bgActivePosistion && !r2.hoverData.selecting) {
      var zoom2 = r2.cy.zoom();
      var pos = data4.bgActivePosistion;
      context.fillStyle = "rgba(" + style3.core("active-bg-color").value[0] + "," + style3.core("active-bg-color").value[1] + "," + style3.core("active-bg-color").value[2] + "," + style3.core("active-bg-opacity").value + ")";
      context.beginPath();
      context.arc(pos.x, pos.y, style3.core("active-bg-size").pfValue / zoom2, 0, 2 * Math.PI);
      context.fill();
    }
    var timeToRender = r2.lastRedrawTime;
    if (r2.showFps && timeToRender) {
      timeToRender = Math.round(timeToRender);
      var fps = Math.round(1e3 / timeToRender);
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.fillStyle = "rgba(255, 0, 0, 0.75)";
      context.strokeStyle = "rgba(255, 0, 0, 0.75)";
      context.lineWidth = 1;
      context.fillText("1 frame = " + timeToRender + " ms = " + fps + " fps", 0, 20);
      var maxFps = 60;
      context.strokeRect(0, 30, 250, 20);
      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
    }
    if (!drawAllLayers) {
      needDraw[r2.SELECT_BOX] = false;
    }
  }
  if (motionBlur && mbPxRatio !== 1) {
    var cxtNode = data4.contexts[r2.NODE];
    var txtNode = r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_NODE];
    var cxtDrag = data4.contexts[r2.DRAG];
    var txtDrag = r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_DRAG];
    var drawMotionBlur = function drawMotionBlur2(cxt2, txt, needClear) {
      cxt2.setTransform(1, 0, 0, 1, 0, 0);
      if (needClear || !motionBlurFadeEffect) {
        cxt2.clearRect(0, 0, r2.canvasWidth, r2.canvasHeight);
      } else {
        mbclear(cxt2, 0, 0, r2.canvasWidth, r2.canvasHeight);
      }
      var pxr = mbPxRatio;
      cxt2.drawImage(
        txt,
        // img
        0,
        0,
        // sx, sy
        r2.canvasWidth * pxr,
        r2.canvasHeight * pxr,
        // sw, sh
        0,
        0,
        // x, y
        r2.canvasWidth,
        r2.canvasHeight
        // w, h
      );
    };
    if (needDraw[r2.NODE] || needMbClear[r2.NODE]) {
      drawMotionBlur(cxtNode, txtNode, needMbClear[r2.NODE]);
      needDraw[r2.NODE] = false;
    }
    if (needDraw[r2.DRAG] || needMbClear[r2.DRAG]) {
      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r2.DRAG]);
      needDraw[r2.DRAG] = false;
    }
  }
  r2.prevViewport = vp;
  if (r2.clearingMotionBlur) {
    r2.clearingMotionBlur = false;
    r2.motionBlurCleared = true;
    r2.motionBlur = true;
  }
  if (motionBlur) {
    r2.motionBlurTimeout = setTimeout(function() {
      r2.motionBlurTimeout = null;
      r2.clearedForMotionBlur[r2.NODE] = false;
      r2.clearedForMotionBlur[r2.DRAG] = false;
      r2.motionBlur = false;
      r2.clearingMotionBlur = !textureDraw;
      r2.mbFrames = 0;
      needDraw[r2.NODE] = true;
      needDraw[r2.DRAG] = true;
      r2.redraw();
    }, motionBlurDelay);
  }
  if (!forcedContext) {
    cy2.emit("render");
  }
};
var CRp$3 = {};
CRp$3.drawPolygonPath = function(context, x2, y2, width2, height2, points) {
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x2 + halfW * points[0], y2 + halfH * points[1]);
  for (var i2 = 1; i2 < points.length / 2; i2++) {
    context.lineTo(x2 + halfW * points[i2 * 2], y2 + halfH * points[i2 * 2 + 1]);
  }
  context.closePath();
};
CRp$3.drawRoundPolygonPath = function(context, x2, y2, width2, height2, points) {
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  var cornerRadius = getRoundPolygonRadius(width2, height2);
  if (context.beginPath) {
    context.beginPath();
  }
  for (var _i = 0; _i < points.length / 4; _i++) {
    var sourceUv = void 0, destUv = void 0;
    if (_i === 0) {
      sourceUv = points.length - 2;
    } else {
      sourceUv = _i * 4 - 2;
    }
    destUv = _i * 4 + 2;
    var px = x2 + halfW * points[_i * 4];
    var py = y2 + halfH * points[_i * 4 + 1];
    var cosTheta = -points[sourceUv] * points[destUv] - points[sourceUv + 1] * points[destUv + 1];
    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
    var cp0x = px - offset * points[sourceUv];
    var cp0y = py - offset * points[sourceUv + 1];
    var cp1x = px + offset * points[destUv];
    var cp1y = py + offset * points[destUv + 1];
    if (_i === 0) {
      context.moveTo(cp0x, cp0y);
    } else {
      context.lineTo(cp0x, cp0y);
    }
    context.arcTo(px, py, cp1x, cp1y, cornerRadius);
  }
  context.closePath();
};
CRp$3.drawRoundRectanglePath = function(context, x2, y2, width2, height2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerRadius = getRoundRectangleRadius(width2, height2);
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x2, y2 - halfHeight);
  context.arcTo(x2 + halfWidth, y2 - halfHeight, x2 + halfWidth, y2, cornerRadius);
  context.arcTo(x2 + halfWidth, y2 + halfHeight, x2, y2 + halfHeight, cornerRadius);
  context.arcTo(x2 - halfWidth, y2 + halfHeight, x2 - halfWidth, y2, cornerRadius);
  context.arcTo(x2 - halfWidth, y2 - halfHeight, x2, y2 - halfHeight, cornerRadius);
  context.lineTo(x2, y2 - halfHeight);
  context.closePath();
};
CRp$3.drawBottomRoundRectanglePath = function(context, x2, y2, width2, height2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerRadius = getRoundRectangleRadius(width2, height2);
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x2, y2 - halfHeight);
  context.lineTo(x2 + halfWidth, y2 - halfHeight);
  context.lineTo(x2 + halfWidth, y2);
  context.arcTo(x2 + halfWidth, y2 + halfHeight, x2, y2 + halfHeight, cornerRadius);
  context.arcTo(x2 - halfWidth, y2 + halfHeight, x2 - halfWidth, y2, cornerRadius);
  context.lineTo(x2 - halfWidth, y2 - halfHeight);
  context.lineTo(x2, y2 - halfHeight);
  context.closePath();
};
CRp$3.drawCutRectanglePath = function(context, x2, y2, width2, height2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerLength = getCutRectangleCornerLength();
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x2 - halfWidth + cornerLength, y2 - halfHeight);
  context.lineTo(x2 + halfWidth - cornerLength, y2 - halfHeight);
  context.lineTo(x2 + halfWidth, y2 - halfHeight + cornerLength);
  context.lineTo(x2 + halfWidth, y2 + halfHeight - cornerLength);
  context.lineTo(x2 + halfWidth - cornerLength, y2 + halfHeight);
  context.lineTo(x2 - halfWidth + cornerLength, y2 + halfHeight);
  context.lineTo(x2 - halfWidth, y2 + halfHeight - cornerLength);
  context.lineTo(x2 - halfWidth, y2 - halfHeight + cornerLength);
  context.closePath();
};
CRp$3.drawBarrelPath = function(context, x2, y2, width2, height2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var xBegin = x2 - halfWidth;
  var xEnd = x2 + halfWidth;
  var yBegin = y2 - halfHeight;
  var yEnd = y2 + halfHeight;
  var barrelCurveConstants = getBarrelCurveConstants(width2, height2);
  var wOffset = barrelCurveConstants.widthOffset;
  var hOffset = barrelCurveConstants.heightOffset;
  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(xBegin, yBegin + hOffset);
  context.lineTo(xBegin, yEnd - hOffset);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
  context.lineTo(xEnd - wOffset, yEnd);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
  context.lineTo(xEnd, yBegin + hOffset);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
  context.lineTo(xBegin + wOffset, yBegin);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
  context.closePath();
};
var sin0 = Math.sin(0);
var cos0 = Math.cos(0);
var sin = {};
var cos = {};
var ellipseStepSize = Math.PI / 40;
for (var i$3 = 0 * Math.PI; i$3 < 2 * Math.PI; i$3 += ellipseStepSize) {
  sin[i$3] = Math.sin(i$3);
  cos[i$3] = Math.cos(i$3);
}
CRp$3.drawEllipsePath = function(context, centerX, centerY, width2, height2) {
  if (context.beginPath) {
    context.beginPath();
  }
  if (context.ellipse) {
    context.ellipse(centerX, centerY, width2 / 2, height2 / 2, 0, 0, 2 * Math.PI);
  } else {
    var xPos, yPos;
    var rw = width2 / 2;
    var rh = height2 / 2;
    for (var i2 = 0 * Math.PI; i2 < 2 * Math.PI; i2 += ellipseStepSize) {
      xPos = centerX - rw * sin[i2] * sin0 + rw * cos[i2] * cos0;
      yPos = centerY + rh * cos[i2] * sin0 + rh * sin[i2] * cos0;
      if (i2 === 0) {
        context.moveTo(xPos, yPos);
      } else {
        context.lineTo(xPos, yPos);
      }
    }
  }
  context.closePath();
};
var CRp$2 = {};
CRp$2.createBuffer = function(w2, h2) {
  var buffer = document.createElement("canvas");
  buffer.width = w2;
  buffer.height = h2;
  return [buffer, buffer.getContext("2d")];
};
CRp$2.bufferCanvasImage = function(options2) {
  var cy2 = this.cy;
  var eles = cy2.mutableElements();
  var bb = eles.boundingBox();
  var ctrRect = this.findContainerClientCoords();
  var width2 = options2.full ? Math.ceil(bb.w) : ctrRect[2];
  var height2 = options2.full ? Math.ceil(bb.h) : ctrRect[3];
  var specdMaxDims = number$1(options2.maxWidth) || number$1(options2.maxHeight);
  var pxRatio = this.getPixelRatio();
  var scale = 1;
  if (options2.scale !== void 0) {
    width2 *= options2.scale;
    height2 *= options2.scale;
    scale = options2.scale;
  } else if (specdMaxDims) {
    var maxScaleW = Infinity;
    var maxScaleH = Infinity;
    if (number$1(options2.maxWidth)) {
      maxScaleW = scale * options2.maxWidth / width2;
    }
    if (number$1(options2.maxHeight)) {
      maxScaleH = scale * options2.maxHeight / height2;
    }
    scale = Math.min(maxScaleW, maxScaleH);
    width2 *= scale;
    height2 *= scale;
  }
  if (!specdMaxDims) {
    width2 *= pxRatio;
    height2 *= pxRatio;
    scale *= pxRatio;
  }
  var buffCanvas = document.createElement("canvas");
  buffCanvas.width = width2;
  buffCanvas.height = height2;
  buffCanvas.style.width = width2 + "px";
  buffCanvas.style.height = height2 + "px";
  var buffCxt = buffCanvas.getContext("2d");
  if (width2 > 0 && height2 > 0) {
    buffCxt.clearRect(0, 0, width2, height2);
    buffCxt.globalCompositeOperation = "source-over";
    var zsortedEles = this.getCachedZSortedEles();
    if (options2.full) {
      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
      buffCxt.scale(scale, scale);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale, 1 / scale);
      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
    } else {
      var pan2 = cy2.pan();
      var translation = {
        x: pan2.x * scale,
        y: pan2.y * scale
      };
      scale *= cy2.zoom();
      buffCxt.translate(translation.x, translation.y);
      buffCxt.scale(scale, scale);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale, 1 / scale);
      buffCxt.translate(-translation.x, -translation.y);
    }
    if (options2.bg) {
      buffCxt.globalCompositeOperation = "destination-over";
      buffCxt.fillStyle = options2.bg;
      buffCxt.rect(0, 0, width2, height2);
      buffCxt.fill();
    }
  }
  return buffCanvas;
};
function b64ToBlob(b64, mimeType) {
  var bytes = atob(b64);
  var buff = new ArrayBuffer(bytes.length);
  var buffUint8 = new Uint8Array(buff);
  for (var i2 = 0; i2 < bytes.length; i2++) {
    buffUint8[i2] = bytes.charCodeAt(i2);
  }
  return new Blob([buff], {
    type: mimeType
  });
}
function b64UriToB64(b64uri) {
  var i2 = b64uri.indexOf(",");
  return b64uri.substr(i2 + 1);
}
function output(options2, canvas, mimeType) {
  var getB64Uri = function getB64Uri2() {
    return canvas.toDataURL(mimeType, options2.quality);
  };
  switch (options2.output) {
    case "blob-promise":
      return new Promise$1(function(resolve3, reject2) {
        try {
          canvas.toBlob(function(blob) {
            if (blob != null) {
              resolve3(blob);
            } else {
              reject2(new Error("`canvas.toBlob()` sent a null value in its callback"));
            }
          }, mimeType, options2.quality);
        } catch (err) {
          reject2(err);
        }
      });
    case "blob":
      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);
    case "base64":
      return b64UriToB64(getB64Uri());
    case "base64uri":
    default:
      return getB64Uri();
  }
}
CRp$2.png = function(options2) {
  return output(options2, this.bufferCanvasImage(options2), "image/png");
};
CRp$2.jpg = function(options2) {
  return output(options2, this.bufferCanvasImage(options2), "image/jpeg");
};
var CRp$1 = {};
CRp$1.nodeShapeImpl = function(name2, context, centerX, centerY, width2, height2, points) {
  switch (name2) {
    case "ellipse":
      return this.drawEllipsePath(context, centerX, centerY, width2, height2);
    case "polygon":
      return this.drawPolygonPath(context, centerX, centerY, width2, height2, points);
    case "round-polygon":
      return this.drawRoundPolygonPath(context, centerX, centerY, width2, height2, points);
    case "roundrectangle":
    case "round-rectangle":
      return this.drawRoundRectanglePath(context, centerX, centerY, width2, height2);
    case "cutrectangle":
    case "cut-rectangle":
      return this.drawCutRectanglePath(context, centerX, centerY, width2, height2);
    case "bottomroundrectangle":
    case "bottom-round-rectangle":
      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width2, height2);
    case "barrel":
      return this.drawBarrelPath(context, centerX, centerY, width2, height2);
  }
};
var CR = CanvasRenderer;
var CRp = CanvasRenderer.prototype;
CRp.CANVAS_LAYERS = 3;
CRp.SELECT_BOX = 0;
CRp.DRAG = 1;
CRp.NODE = 2;
CRp.BUFFER_COUNT = 3;
CRp.TEXTURE_BUFFER = 0;
CRp.MOTIONBLUR_BUFFER_NODE = 1;
CRp.MOTIONBLUR_BUFFER_DRAG = 2;
function CanvasRenderer(options2) {
  var r2 = this;
  r2.data = {
    canvases: new Array(CRp.CANVAS_LAYERS),
    contexts: new Array(CRp.CANVAS_LAYERS),
    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),
    bufferCanvases: new Array(CRp.BUFFER_COUNT),
    bufferContexts: new Array(CRp.CANVAS_LAYERS)
  };
  var tapHlOffAttr = "-webkit-tap-highlight-color";
  var tapHlOffStyle = "rgba(0,0,0,0)";
  r2.data.canvasContainer = document.createElement("div");
  var containerStyle = r2.data.canvasContainer.style;
  r2.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
  containerStyle.position = "relative";
  containerStyle.zIndex = "0";
  containerStyle.overflow = "hidden";
  var container2 = options2.cy.container();
  container2.appendChild(r2.data.canvasContainer);
  container2.style[tapHlOffAttr] = tapHlOffStyle;
  var styleMap = {
    "-webkit-user-select": "none",
    "-moz-user-select": "-moz-none",
    "user-select": "none",
    "-webkit-tap-highlight-color": "rgba(0,0,0,0)",
    "outline-style": "none"
  };
  if (ms()) {
    styleMap["-ms-touch-action"] = "none";
    styleMap["touch-action"] = "none";
  }
  for (var i2 = 0; i2 < CRp.CANVAS_LAYERS; i2++) {
    var canvas = r2.data.canvases[i2] = document.createElement("canvas");
    r2.data.contexts[i2] = canvas.getContext("2d");
    Object.keys(styleMap).forEach(function(k2) {
      canvas.style[k2] = styleMap[k2];
    });
    canvas.style.position = "absolute";
    canvas.setAttribute("data-id", "layer" + i2);
    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i2);
    r2.data.canvasContainer.appendChild(canvas);
    r2.data.canvasNeedsRedraw[i2] = false;
  }
  r2.data.topCanvas = r2.data.canvases[0];
  r2.data.canvases[CRp.NODE].setAttribute("data-id", "layer" + CRp.NODE + "-node");
  r2.data.canvases[CRp.SELECT_BOX].setAttribute("data-id", "layer" + CRp.SELECT_BOX + "-selectbox");
  r2.data.canvases[CRp.DRAG].setAttribute("data-id", "layer" + CRp.DRAG + "-drag");
  for (var i2 = 0; i2 < CRp.BUFFER_COUNT; i2++) {
    r2.data.bufferCanvases[i2] = document.createElement("canvas");
    r2.data.bufferContexts[i2] = r2.data.bufferCanvases[i2].getContext("2d");
    r2.data.bufferCanvases[i2].style.position = "absolute";
    r2.data.bufferCanvases[i2].setAttribute("data-id", "buffer" + i2);
    r2.data.bufferCanvases[i2].style.zIndex = String(-i2 - 1);
    r2.data.bufferCanvases[i2].style.visibility = "hidden";
  }
  r2.pathsEnabled = true;
  var emptyBb = makeBoundingBox();
  var getBoxCenter = function getBoxCenter2(bb) {
    return {
      x: (bb.x1 + bb.x2) / 2,
      y: (bb.y1 + bb.y2) / 2
    };
  };
  var getCenterOffset = function getCenterOffset2(bb) {
    return {
      x: -bb.w / 2,
      y: -bb.h / 2
    };
  };
  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged2(ele) {
    var _p = ele[0]._private;
    var same2 = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
    return !same2;
  };
  var getStyleKey = function getStyleKey2(ele) {
    return ele[0]._private.nodeKey;
  };
  var getLabelKey = function getLabelKey2(ele) {
    return ele[0]._private.labelStyleKey;
  };
  var getSourceLabelKey = function getSourceLabelKey2(ele) {
    return ele[0]._private.sourceLabelStyleKey;
  };
  var getTargetLabelKey = function getTargetLabelKey2(ele) {
    return ele[0]._private.targetLabelStyleKey;
  };
  var drawElement = function drawElement2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElement(context, ele, bb, false, false, useEleOpacity);
  };
  var drawLabel = function drawLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "main", useEleOpacity);
  };
  var drawSourceLabel = function drawSourceLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "source", useEleOpacity);
  };
  var drawTargetLabel = function drawTargetLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "target", useEleOpacity);
  };
  var getElementBox = function getElementBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.bodyBounds;
  };
  var getLabelBox = function getLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.main || emptyBb;
  };
  var getSourceLabelBox = function getSourceLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.source || emptyBb;
  };
  var getTargetLabelBox = function getTargetLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.target || emptyBb;
  };
  var isLabelVisibleAtScale = function isLabelVisibleAtScale2(ele, scaledLabelShown) {
    return scaledLabelShown;
  };
  var getElementRotationPoint = function getElementRotationPoint2(ele) {
    return getBoxCenter(getElementBox(ele));
  };
  var addTextMargin = function addTextMargin2(prefix, pt2, ele) {
    var pre = prefix ? prefix + "-" : "";
    return {
      x: pt2.x + ele.pstyle(pre + "text-margin-x").pfValue,
      y: pt2.y + ele.pstyle(pre + "text-margin-y").pfValue
    };
  };
  var getRsPt = function getRsPt2(ele, x2, y2) {
    var rs = ele[0]._private.rscratch;
    return {
      x: rs[x2],
      y: rs[y2]
    };
  };
  var getLabelRotationPoint = function getLabelRotationPoint2(ele) {
    return addTextMargin("", getRsPt(ele, "labelX", "labelY"), ele);
  };
  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint2(ele) {
    return addTextMargin("source", getRsPt(ele, "sourceLabelX", "sourceLabelY"), ele);
  };
  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint2(ele) {
    return addTextMargin("target", getRsPt(ele, "targetLabelX", "targetLabelY"), ele);
  };
  var getElementRotationOffset = function getElementRotationOffset2(ele) {
    return getCenterOffset(getElementBox(ele));
  };
  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset2(ele) {
    return getCenterOffset(getSourceLabelBox(ele));
  };
  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset2(ele) {
    return getCenterOffset(getTargetLabelBox(ele));
  };
  var getLabelRotationOffset = function getLabelRotationOffset2(ele) {
    var bb = getLabelBox(ele);
    var p2 = getCenterOffset(getLabelBox(ele));
    if (ele.isNode()) {
      switch (ele.pstyle("text-halign").value) {
        case "left":
          p2.x = -bb.w;
          break;
        case "right":
          p2.x = 0;
          break;
      }
      switch (ele.pstyle("text-valign").value) {
        case "top":
          p2.y = -bb.h;
          break;
        case "bottom":
          p2.y = 0;
          break;
      }
    }
    return p2;
  };
  var eleTxrCache = r2.data.eleTxrCache = new ElementTextureCache(r2, {
    getKey: getStyleKey,
    doesEleInvalidateKey: backgroundTimestampHasChanged,
    drawElement,
    getBoundingBox: getElementBox,
    getRotationPoint: getElementRotationPoint,
    getRotationOffset: getElementRotationOffset,
    allowEdgeTxrCaching: false,
    allowParentTxrCaching: false
  });
  var lblTxrCache = r2.data.lblTxrCache = new ElementTextureCache(r2, {
    getKey: getLabelKey,
    drawElement: drawLabel,
    getBoundingBox: getLabelBox,
    getRotationPoint: getLabelRotationPoint,
    getRotationOffset: getLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var slbTxrCache = r2.data.slbTxrCache = new ElementTextureCache(r2, {
    getKey: getSourceLabelKey,
    drawElement: drawSourceLabel,
    getBoundingBox: getSourceLabelBox,
    getRotationPoint: getSourceLabelRotationPoint,
    getRotationOffset: getSourceLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var tlbTxrCache = r2.data.tlbTxrCache = new ElementTextureCache(r2, {
    getKey: getTargetLabelKey,
    drawElement: drawTargetLabel,
    getBoundingBox: getTargetLabelBox,
    getRotationPoint: getTargetLabelRotationPoint,
    getRotationOffset: getTargetLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var lyrTxrCache = r2.data.lyrTxrCache = new LayeredTextureCache(r2);
  r2.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
    eleTxrCache.invalidateElements(eles);
    lblTxrCache.invalidateElements(eles);
    slbTxrCache.invalidateElements(eles);
    tlbTxrCache.invalidateElements(eles);
    lyrTxrCache.invalidateElements(eles);
    for (var _i = 0; _i < eles.length; _i++) {
      var _p = eles[_i]._private;
      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
    }
  });
  var refineInLayers = function refineInLayers2(reqs) {
    for (var i3 = 0; i3 < reqs.length; i3++) {
      lyrTxrCache.enqueueElementRefinement(reqs[i3].ele);
    }
  };
  eleTxrCache.onDequeue(refineInLayers);
  lblTxrCache.onDequeue(refineInLayers);
  slbTxrCache.onDequeue(refineInLayers);
  tlbTxrCache.onDequeue(refineInLayers);
}
CRp.redrawHint = function(group2, bool) {
  var r2 = this;
  switch (group2) {
    case "eles":
      r2.data.canvasNeedsRedraw[CRp.NODE] = bool;
      break;
    case "drag":
      r2.data.canvasNeedsRedraw[CRp.DRAG] = bool;
      break;
    case "select":
      r2.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;
      break;
  }
};
var pathsImpld = typeof Path2D !== "undefined";
CRp.path2dEnabled = function(on3) {
  if (on3 === void 0) {
    return this.pathsEnabled;
  }
  this.pathsEnabled = on3 ? true : false;
};
CRp.usePaths = function() {
  return pathsImpld && this.pathsEnabled;
};
CRp.setImgSmoothing = function(context, bool) {
  if (context.imageSmoothingEnabled != null) {
    context.imageSmoothingEnabled = bool;
  } else {
    context.webkitImageSmoothingEnabled = bool;
    context.mozImageSmoothingEnabled = bool;
    context.msImageSmoothingEnabled = bool;
  }
};
CRp.getImgSmoothing = function(context) {
  if (context.imageSmoothingEnabled != null) {
    return context.imageSmoothingEnabled;
  } else {
    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
  }
};
CRp.makeOffscreenCanvas = function(width2, height2) {
  var canvas;
  if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof$1(OffscreenCanvas)) !== "undefined") {
    canvas = new OffscreenCanvas(width2, height2);
  } else {
    canvas = document.createElement("canvas");
    canvas.width = width2;
    canvas.height = height2;
  }
  return canvas;
};
[CRp$a, CRp$9, CRp$8, CRp$7, CRp$6, CRp$5, CRp$4, CRp$3, CRp$2, CRp$1].forEach(function(props) {
  extend$1(CRp, props);
});
var renderer2 = [{
  name: "null",
  impl: NullRenderer
}, {
  name: "base",
  impl: BR
}, {
  name: "canvas",
  impl: CR
}];
var incExts = [{
  type: "layout",
  extensions: layout$1
}, {
  type: "renderer",
  extensions: renderer2
}];
var extensions = {};
var modules = {};
function setExtension(type, name2, registrant) {
  var ext = registrant;
  var overrideErr = function overrideErr2(field) {
    warn("Can not register `" + name2 + "` for `" + type + "` since `" + field + "` already exists in the prototype and can not be overridden");
  };
  if (type === "core") {
    if (Core.prototype[name2]) {
      return overrideErr(name2);
    } else {
      Core.prototype[name2] = registrant;
    }
  } else if (type === "collection") {
    if (Collection.prototype[name2]) {
      return overrideErr(name2);
    } else {
      Collection.prototype[name2] = registrant;
    }
  } else if (type === "layout") {
    var Layout2 = function Layout3(options2) {
      this.options = options2;
      registrant.call(this, options2);
      if (!plainObject(this._private)) {
        this._private = {};
      }
      this._private.cy = options2.cy;
      this._private.listeners = [];
      this.createEmitter();
    };
    var layoutProto = Layout2.prototype = Object.create(registrant.prototype);
    var optLayoutFns = [];
    for (var i2 = 0; i2 < optLayoutFns.length; i2++) {
      var fnName = optLayoutFns[i2];
      layoutProto[fnName] = layoutProto[fnName] || function() {
        return this;
      };
    }
    if (layoutProto.start && !layoutProto.run) {
      layoutProto.run = function() {
        this.start();
        return this;
      };
    } else if (!layoutProto.start && layoutProto.run) {
      layoutProto.start = function() {
        this.run();
        return this;
      };
    }
    var regStop = registrant.prototype.stop;
    layoutProto.stop = function() {
      var opts = this.options;
      if (opts && opts.animate) {
        var anis = this.animations;
        if (anis) {
          for (var _i = 0; _i < anis.length; _i++) {
            anis[_i].stop();
          }
        }
      }
      if (regStop) {
        regStop.call(this);
      } else {
        this.emit("layoutstop");
      }
      return this;
    };
    if (!layoutProto.destroy) {
      layoutProto.destroy = function() {
        return this;
      };
    }
    layoutProto.cy = function() {
      return this._private.cy;
    };
    var getCy = function getCy2(layout4) {
      return layout4._private.cy;
    };
    var emitterOpts = {
      addEventFields: function addEventFields4(layout4, evt) {
        evt.layout = layout4;
        evt.cy = getCy(layout4);
        evt.target = layout4;
      },
      bubble: function bubble3() {
        return true;
      },
      parent: function parent4(layout4) {
        return getCy(layout4);
      }
    };
    extend$1(layoutProto, {
      createEmitter: function createEmitter3() {
        this._private.emitter = new Emitter(emitterOpts, this);
        return this;
      },
      emitter: function emitter3() {
        return this._private.emitter;
      },
      on: function on3(evt, cb) {
        this.emitter().on(evt, cb);
        return this;
      },
      one: function one3(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      once: function once3(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      removeListener: function removeListener3(evt, cb) {
        this.emitter().removeListener(evt, cb);
        return this;
      },
      removeAllListeners: function removeAllListeners3() {
        this.emitter().removeAllListeners();
        return this;
      },
      emit: function emit3(evt, params) {
        this.emitter().emit(evt, params);
        return this;
      }
    });
    define.eventAliasesOn(layoutProto);
    ext = Layout2;
  } else if (type === "renderer" && name2 !== "null" && name2 !== "base") {
    var BaseRenderer3 = getExtension("renderer", "base");
    var bProto = BaseRenderer3.prototype;
    var RegistrantRenderer = registrant;
    var rProto = registrant.prototype;
    var Renderer = function Renderer2() {
      BaseRenderer3.apply(this, arguments);
      RegistrantRenderer.apply(this, arguments);
    };
    var proto = Renderer.prototype;
    for (var pName in bProto) {
      var pVal = bProto[pName];
      var existsInR = rProto[pName] != null;
      if (existsInR) {
        return overrideErr(pName);
      }
      proto[pName] = pVal;
    }
    for (var _pName in rProto) {
      proto[_pName] = rProto[_pName];
    }
    bProto.clientFunctions.forEach(function(name3) {
      proto[name3] = proto[name3] || function() {
        error("Renderer does not implement `renderer." + name3 + "()` on its prototype");
      };
    });
    ext = Renderer;
  } else if (type === "__proto__" || type === "constructor" || type === "prototype") {
    return error(type + " is an illegal type to be registered, possibly lead to prototype pollutions");
  }
  return setMap({
    map: extensions,
    keys: [type, name2],
    value: ext
  });
}
function getExtension(type, name2) {
  return getMap({
    map: extensions,
    keys: [type, name2]
  });
}
function setModule(type, name2, moduleType, moduleName, registrant) {
  return setMap({
    map: modules,
    keys: [type, name2, moduleType, moduleName],
    value: registrant
  });
}
function getModule(type, name2, moduleType, moduleName) {
  return getMap({
    map: modules,
    keys: [type, name2, moduleType, moduleName]
  });
}
var extension = function extension2() {
  if (arguments.length === 2) {
    return getExtension.apply(null, arguments);
  } else if (arguments.length === 3) {
    return setExtension.apply(null, arguments);
  } else if (arguments.length === 4) {
    return getModule.apply(null, arguments);
  } else if (arguments.length === 5) {
    return setModule.apply(null, arguments);
  } else {
    error("Invalid extension access syntax");
  }
};
Core.prototype.extension = extension;
incExts.forEach(function(group2) {
  group2.extensions.forEach(function(ext) {
    setExtension(group2.type, ext.name, ext.impl);
  });
});
var Stylesheet = function Stylesheet2() {
  if (!(this instanceof Stylesheet2)) {
    return new Stylesheet2();
  }
  this.length = 0;
};
var sheetfn = Stylesheet.prototype;
sheetfn.instanceString = function() {
  return "stylesheet";
};
sheetfn.selector = function(selector) {
  var i2 = this.length++;
  this[i2] = {
    selector,
    properties: []
  };
  return this;
};
sheetfn.css = function(name2, value) {
  var i2 = this.length - 1;
  if (string(name2)) {
    this[i2].properties.push({
      name: name2,
      value
    });
  } else if (plainObject(name2)) {
    var map2 = name2;
    var propNames = Object.keys(map2);
    for (var j2 = 0; j2 < propNames.length; j2++) {
      var key = propNames[j2];
      var mapVal = map2[key];
      if (mapVal == null) {
        continue;
      }
      var prop = Style.properties[key] || Style.properties[dash2camel(key)];
      if (prop == null) {
        continue;
      }
      var _name = prop.name;
      var _value = mapVal;
      this[i2].properties.push({
        name: _name,
        value: _value
      });
    }
  }
  return this;
};
sheetfn.style = sheetfn.css;
sheetfn.generateStyle = function(cy2) {
  var style3 = new Style(cy2);
  return this.appendToStyle(style3);
};
sheetfn.appendToStyle = function(style3) {
  for (var i2 = 0; i2 < this.length; i2++) {
    var context = this[i2];
    var selector = context.selector;
    var props = context.properties;
    style3.selector(selector);
    for (var j2 = 0; j2 < props.length; j2++) {
      var prop = props[j2];
      style3.css(prop.name, prop.value);
    }
  }
  return style3;
};
var version$2 = "3.25.0";
var cytoscape$1 = function cytoscape2(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  if (plainObject(options2)) {
    return new Core(options2);
  } else if (string(options2)) {
    return extension.apply(extension, arguments);
  }
};
cytoscape$1.use = function(ext) {
  var args = Array.prototype.slice.call(arguments, 1);
  args.unshift(cytoscape$1);
  ext.apply(null, args);
  return this;
};
cytoscape$1.warnings = function(bool) {
  return warnings(bool);
};
cytoscape$1.version = version$2;
cytoscape$1.stylesheet = cytoscape$1.Stylesheet = Stylesheet;
var cytoscape_cjs = cytoscape$1;
const cytoscape$2 = /* @__PURE__ */ getDefaultExportFromCjs(cytoscape_cjs);
var src = { exports: {} };
var extend = {};
var hasRequiredExtend;
function requireExtend() {
  if (hasRequiredExtend)
    return extend;
  hasRequiredExtend = 1;
  Object.extend = function(out) {
    out = out || {};
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var obj = arguments[i2];
      if (!obj)
        continue;
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          if (Array.isArray(obj[key])) {
            out[key] = obj[key].slice();
          } else if (typeof obj[key] === "object") {
            out[key] = Object.extend(out[key], obj[key]);
          } else {
            out[key] = obj[key];
          }
        }
      }
    }
    return out;
  };
  return extend;
}
var snap_on_release;
var hasRequiredSnap_on_release;
function requireSnap_on_release() {
  if (hasRequiredSnap_on_release)
    return snap_on_release;
  hasRequiredSnap_on_release = 1;
  snap_on_release = function(cy2, gridSpacing, gridSpacingOffset) {
    var snap = {};
    snap.changeOptions = function(opts) {
      gridSpacing = opts.gridSpacing;
      gridSpacingOffset = opts.snapToGridCenter ? 0.5 : 0;
    };
    var getScratch = function(node) {
      if (!node.scratch("_gridGuide"))
        node.scratch("_gridGuide", {});
      return node.scratch("_gridGuide");
    };
    snap.snapPos = function(pos) {
      var xPosition = gridSpacingOffset ? Math.floor(pos.x / gridSpacing) : Math.round(pos.x / gridSpacing);
      var yPosition = gridSpacingOffset ? Math.floor(pos.y / gridSpacing) : Math.round(pos.y / gridSpacing);
      var newPos = {
        x: (xPosition + gridSpacingOffset) * gridSpacing,
        y: (yPosition + gridSpacingOffset) * gridSpacing
      };
      return newPos;
    };
    snap.snapNode = function(node) {
      var pos = node.position();
      var newPos = snap.snapPos(pos);
      node.position(newPos);
    };
    snap.snapNodesTopDown = function(nodes3) {
      cy2.startBatch();
      nodes3.union(nodes3.descendants()).filter(":childless").positions(function(node, i2) {
        if (typeof node === "number") {
          node = i2;
        }
        var pos = node.position();
        return snap.snapPos(pos);
      });
      cy2.endBatch();
    };
    snap.onFreeNode = function(e2) {
      var nodes3;
      var cyTarget = e2.target || e2.cyTarget;
      if (cyTarget.selected())
        nodes3 = e2.cy.$(":selected");
      else
        nodes3 = cyTarget;
      snap.snapNodesTopDown(nodes3);
    };
    snap.recoverSnapNode = function(node) {
      var snapScratch = getScratch(node).snap;
      if (snapScratch) {
        node.position(snapScratch.oldPos);
      }
    };
    return snap;
  };
  return snap_on_release;
}
var snap_during_drag;
var hasRequiredSnap_during_drag;
function requireSnap_during_drag() {
  if (hasRequiredSnap_during_drag)
    return snap_during_drag;
  hasRequiredSnap_during_drag = 1;
  snap_during_drag = function(cy2, snap) {
    var snapToGridDuringDrag = {};
    var attachedNode;
    var draggedNodes;
    var startPos;
    var endPos;
    snapToGridDuringDrag.onTapStartNode = function(e2) {
      if (e2.originalEvent.altKey || e2.originalEvent.ctrlKey || e2.originalEvent.metaKey || e2.originalEvent.shiftKey) {
        return;
      }
      var cyTarget = e2.target || e2.cyTarget;
      if (cyTarget.selected())
        draggedNodes = e2.cy.$(":selected");
      else
        draggedNodes = cyTarget;
      startPos = e2.position || e2.cyPosition;
      if (cyTarget.grabbable() && !cyTarget.locked()) {
        attachedNode = cyTarget;
        attachedNode.lock();
        cy2.on("tapdrag", onTapDrag);
        cy2.on("tapend", onTapEndNode);
      }
    };
    var onTapEndNode = function(e2) {
      cy2.off("tapdrag", onTapDrag);
      cy2.off("tapend", onTapEndNode);
      attachedNode.unlock();
      e2.preventDefault();
    };
    var getDist3 = function() {
      return {
        x: endPos.x - startPos.x,
        y: endPos.y - startPos.y
      };
    };
    var onTapDrag = function(e2) {
      attachedNode.position();
      endPos = e2.position || e2.cyPosition;
      endPos = snap.snapPos(endPos);
      var dist4 = getDist3();
      if (dist4.x != 0 || dist4.y != 0) {
        attachedNode.unlock();
        var nodes3 = draggedNodes.union(draggedNodes.descendants());
        nodes3.filter(":childless").positions(function(node, i2) {
          if (typeof node === "number") {
            node = i2;
          }
          var pos = node.position();
          return snap.snapPos({
            x: pos.x + dist4.x,
            y: pos.y + dist4.y
          });
        });
        startPos = endPos;
        attachedNode.lock();
        attachedNode.trigger("drag");
      }
    };
    return snapToGridDuringDrag;
  };
  return snap_during_drag;
}
var draw_grid;
var hasRequiredDraw_grid;
function requireDraw_grid() {
  if (hasRequiredDraw_grid)
    return draw_grid;
  hasRequiredDraw_grid = 1;
  draw_grid = function(opts, cy2, debounce2) {
    var options2 = opts;
    var changeOptions = function(opts2) {
      options2 = opts2;
    };
    var offset = function(elt) {
      var rect = elt.getBoundingClientRect();
      return {
        top: rect.top + document.documentElement.scrollTop,
        left: rect.left + document.documentElement.scrollLeft
      };
    };
    var $canvas = document.createElement("canvas");
    var $container = cy2.container();
    var ctx = $canvas.getContext("2d");
    $container.appendChild($canvas);
    var resetCanvas = function() {
      $canvas.height = 0;
      $canvas.width = 0;
      $canvas.style.position = "absolute";
      $canvas.style.top = 0;
      $canvas.style.left = 0;
      $canvas.style.zIndex = options2.gridStackOrder;
    };
    resetCanvas();
    var drawGrid = function() {
      var zoom2 = cy2.zoom();
      var canvasWidth = cy2.width();
      var canvasHeight = cy2.height();
      var increment = options2.gridSpacing * zoom2;
      var pan2 = cy2.pan();
      var initialValueX = pan2.x % increment;
      var initialValueY = pan2.y % increment;
      ctx.strokeStyle = options2.gridColor;
      ctx.lineWidth = options2.lineWidth;
      var data4 = '	<svg width="' + canvasWidth + '" height="' + canvasHeight + '" xmlns="http://www.w3.org/2000/svg">\n	            <defs>\n	                <pattern id="horizontalLines" width="' + increment + '" height="' + increment + '" patternUnits="userSpaceOnUse">\n	                    <path d="M ' + increment + ' 0 L 0 0 0 0" fill="none" stroke="' + options2.gridColor + '" stroke-width="' + options2.lineWidth + '" />\n	                </pattern>\n	                <pattern id="verticalLines" width="' + increment + '" height="' + increment + '" patternUnits="userSpaceOnUse">\n	                    <path d="M 0 0 L 0 0 0 ' + increment + '" fill="none" stroke="' + options2.gridColor + '" stroke-width="' + options2.lineWidth + '" />\n	                </pattern>\n	            </defs>\n	            <rect width="100%" height="100%" fill="url(#horizontalLines)" transform="translate(0, ' + initialValueY + ')" />\n	            <rect width="100%" height="100%" fill="url(#verticalLines)" transform="translate(' + initialValueX + ', 0)" />\n	        </svg>\n';
      var img = new Image();
      data4 = encodeURIComponent(data4);
      img.onload = function() {
        clearDrawing();
        ctx.drawImage(img, 0, 0);
      };
      img.src = "data:image/svg+xml," + data4;
    };
    var clearDrawing = function() {
      var width2 = cy2.width();
      var height2 = cy2.height();
      ctx.clearRect(0, 0, width2, height2);
    };
    var resizeCanvas = debounce2(function() {
      $canvas.height = cy2.height();
      $canvas.width = cy2.width();
      $canvas.style.position = "absolute";
      $canvas.style.top = 0;
      $canvas.style.left = 0;
      $canvas.style.zIndex = options2.gridStackOrder;
      setTimeout(function() {
        $canvas.height = cy2.height();
        $canvas.width = cy2.width();
        var canvasBb = offset($canvas);
        var containerBb = offset($container);
        $canvas.style.top = -(canvasBb.top - containerBb.top);
        $canvas.style.left = -(canvasBb.left - containerBb.left);
        drawGrid();
      }, 0);
    }, 250);
    return {
      initCanvas: resizeCanvas,
      resizeCanvas,
      resetCanvas,
      clearCanvas: clearDrawing,
      drawGrid,
      changeOptions,
      sizeCanvas: drawGrid
    };
  };
  return draw_grid;
}
var resize2;
var hasRequiredResize;
function requireResize() {
  if (hasRequiredResize)
    return resize2;
  hasRequiredResize = 1;
  resize2 = function(gridSpacing) {
    var changeOptions = function(opts) {
      gridSpacing = Number(opts.gridSpacing);
    };
    var getScratch = function(node) {
      if (!node.scratch("_gridGuide"))
        node.scratch("_gridGuide", {});
      return node.scratch("_gridGuide");
    };
    function resizeNode(node) {
      var width2 = node.width();
      var height2 = node.height();
      var newWidth = Math.round((width2 - gridSpacing) / (gridSpacing * 2)) * (gridSpacing * 2);
      var newHeight = Math.round((height2 - gridSpacing) / (gridSpacing * 2)) * (gridSpacing * 2);
      newWidth = newWidth > 0 ? newWidth + gridSpacing : gridSpacing;
      newHeight = newHeight > 0 ? newHeight + gridSpacing : gridSpacing;
      if (width2 != newWidth || height2 != newHeight) {
        node.style({
          "width": newWidth,
          "height": newHeight
        });
        getScratch(node).resize = {
          oldWidth: width2,
          oldHeight: height2
        };
      }
    }
    function recoverNodeDimensions(node) {
      var oldSizes = getScratch(node).resize;
      if (oldSizes)
        node.style({
          "width": oldSizes.oldWidth,
          "height": oldSizes.oldHeight
        });
    }
    return {
      resizeNode,
      recoverNodeDimensions,
      changeOptions
    };
  };
  return resize2;
}
var events_controller;
var hasRequiredEvents_controller;
function requireEvents_controller() {
  if (hasRequiredEvents_controller)
    return events_controller;
  hasRequiredEvents_controller = 1;
  events_controller = function(cy2, snap, resize3, snapToGridDuringDrag, drawGrid, guidelines2, parentPadding2, opts) {
    var feature = function(func) {
      return function(enable) {
        func(enable);
      };
    };
    var controller = {
      snapToGridDuringDrag: new feature(setDiscreteDrag),
      resize: new feature(setResize),
      snapToGridOnRelease: new feature(setSnapToGrid),
      drawGrid: new feature(setDrawGrid),
      guidelines: new feature(setGuidelines),
      parentPadding: new feature(setParentPadding)
    };
    function applyToCyTarget(func, allowParent) {
      return function(e2) {
        var cyTarget = e2.target || e2.cyTarget;
        if (!cyTarget.is(":parent") || allowParent)
          func(cyTarget);
      };
    }
    function applyToAllNodesButNoParent(func) {
      return function() {
        cy2.nodes().not(":parent").each(function(ele, i2) {
          if (typeof ele === "number") {
            ele = i2;
          }
          func(ele);
        });
      };
    }
    function applyToAllNodes(func) {
      return function() {
        cy2.nodes().each(function(ele, i2) {
          if (typeof ele === "number") {
            ele = i2;
          }
          func(ele);
        });
      };
    }
    function eventStatus(enable) {
      return enable ? "on" : "off";
    }
    function setDiscreteDrag(enable) {
      cy2[eventStatus(enable)]("tapstart", "node", snapToGridDuringDrag.onTapStartNode);
    }
    var resizeAllNodes = applyToAllNodesButNoParent(resize3.resizeNode);
    applyToCyTarget(resize3.resizeNode);
    var recoverAllNodeDimensions = applyToAllNodesButNoParent(resize3.recoverNodeDimensions);
    function setResize(enable) {
      cy2[eventStatus(enable)]("ready", resizeAllNodes);
      enable ? resizeAllNodes() : recoverAllNodeDimensions();
    }
    var snapAllNodes = applyToAllNodes(snap.snapNodesTopDown);
    var recoverSnapAllNodes = applyToAllNodes(snap.recoverSnapNode);
    var snapCyTarget = applyToCyTarget(snap.snapNode, true);
    function setSnapToGrid(enable) {
      cy2[eventStatus(enable)]("add", "node", snapCyTarget);
      cy2[eventStatus(enable)]("ready", snapAllNodes);
      cy2[eventStatus(enable)]("free", "node", snap.onFreeNode);
      if (enable) {
        snapAllNodes();
      } else {
        recoverSnapAllNodes();
      }
    }
    var drawGridOnZoom = function() {
      if (currentOptions.zoomDash)
        drawGrid.drawGrid();
    };
    var drawGridOnPan = function() {
      if (currentOptions.panGrid)
        drawGrid.drawGrid();
    };
    function setDrawGrid(enable) {
      cy2[eventStatus(enable)]("zoom", drawGridOnZoom);
      cy2[eventStatus(enable)]("pan", drawGridOnPan);
      if (enable) {
        drawGrid.initCanvas();
        cy2.on("resize", drawGrid.resizeCanvas);
      } else {
        drawGrid.clearCanvas();
        drawGrid.resetCanvas();
        cy2.off("resize", drawGrid.resizeCanvas);
      }
    }
    var activeTopMostNodes = null;
    var guidelinesGrabHandler = function(e2) {
      var cyTarget = e2.target || e2.cyTarget;
      var nodes3 = cyTarget.selected() ? e2.cy.$(":selected") : cyTarget;
      activeTopMostNodes = guidelines2.getTopMostNodes(nodes3.nodes());
      guidelines2.lines.init(activeTopMostNodes);
    };
    var guidelinesDragHandler = function(e2) {
      if (this.id() == activeTopMostNodes.id()) {
        guidelines2.lines.update(activeTopMostNodes);
        if (currentOptions.snapToAlignmentLocationDuringDrag)
          guidelines2.lines.snapToAlignmentLocation(activeTopMostNodes);
      }
    };
    var guidelinesFreeHandler = function(e2) {
      if (currentOptions.snapToAlignmentLocationOnRelease)
        guidelines2.lines.snapToAlignmentLocation(activeTopMostNodes);
      guidelines2.lines.destroy();
      activeTopMostNodes = null;
    };
    var guidelinesWindowResizeHandler = function(e2) {
      guidelines2.lines.resize();
    };
    var guidelinesTapHandler = function(e2) {
      guidelines2.getMousePos(e2);
    };
    var guidelinesPanHandler = function(e2) {
      if (activeTopMostNodes) {
        guidelines2.setMousePos(cy2.pan());
        guidelines2.lines.init(activeTopMostNodes);
      }
    };
    function setGuidelines(enable) {
      if (enable) {
        guidelines2.resizeCanvas();
        cy2.on("tapstart", "node", guidelinesTapHandler);
        cy2.on("grab", guidelinesGrabHandler);
        cy2.on("pan", guidelinesPanHandler);
        cy2.on("drag", "node", guidelinesDragHandler);
        cy2.on("free", guidelinesFreeHandler);
        window.addEventListener("resize", guidelinesWindowResizeHandler);
      } else {
        cy2.off("tapstart", "node", guidelinesTapHandler);
        cy2.off("grab", guidelinesGrabHandler);
        cy2.off("pan", guidelinesPanHandler);
        cy2.off("drag", "node", guidelinesDragHandler);
        cy2.off("free", guidelinesFreeHandler);
        guidelines2.resetCanvas();
        window.removeEventListener("resize", guidelinesWindowResizeHandler);
      }
    }
    var setAllParentPaddings = function(enable) {
      parentPadding2.setPaddingOfParent(cy2.nodes(":parent"), enable);
    };
    var enableParentPadding = function(node) {
      parentPadding2.setPaddingOfParent(node, true);
    };
    function setParentPadding(enable) {
      setAllParentPaddings(enable);
      cy2[eventStatus(enable)]("ready", setAllParentPaddings);
      cy2[eventStatus(enable)]("add", "node:parent", applyToCyTarget(enableParentPadding, true));
    }
    var latestOptions = {};
    var currentOptions;
    var specialOpts = {
      drawGrid: ["gridSpacing", "zoomDash", "panGrid", "gridStackOrder", "gridColor", "lineWidth", "lineDash"],
      guidelines: ["gridSpacing", "guidelinesStackOrder", "guidelinesTolerance", "guidelinesStyle", "distributionGuidelines", "range", "minDistRange", "geometricGuidelineRange"],
      resize: ["gridSpacing"],
      parentPadding: ["gridSpacing", "parentSpacing"],
      snapToGridOnRelease: ["gridSpacing", "snapToGridCenter"]
    };
    function syncWithOptions(options2) {
      currentOptions = Object.extend({}, options2);
      options2.guidelines = options2.initPosAlignment || options2.distributionGuidelines || options2.geometricGuideline;
      for (var key in options2)
        if (latestOptions[key] != options2[key])
          if (controller.hasOwnProperty(key)) {
            controller[key](options2[key]);
          } else {
            for (var optsKey in specialOpts) {
              var opts2 = specialOpts[optsKey];
              if (opts2.indexOf(key) >= 0) {
                if (optsKey == "drawGrid") {
                  drawGrid.changeOptions(options2);
                  if (options2.drawGrid)
                    drawGrid.resizeCanvas();
                }
                if (optsKey == "snapToGridOnRelease") {
                  snap.changeOptions(options2);
                  if (options2.snapToGridOnRelease)
                    snapAllNodes();
                }
                if (optsKey == "guidelines")
                  guidelines2.changeOptions(options2);
                if (optsKey == "resize") {
                  resize3.changeOptions(options2);
                  if (options2.resize)
                    resizeAllNodes();
                }
                if (optsKey == "parentPadding")
                  parentPadding2.changeOptions(options2);
              }
            }
          }
      latestOptions = Object.extend({}, latestOptions, options2);
    }
    return {
      init: syncWithOptions,
      syncWithOptions
    };
  };
  return events_controller;
}
var rbtree$1;
var hasRequiredRbtree$1;
function requireRbtree$1() {
  if (hasRequiredRbtree$1)
    return rbtree$1;
  hasRequiredRbtree$1 = 1;
  rbtree$1 = createRBTree;
  var RED = 0;
  var BLACK = 1;
  function RBNode(color, key, value, left, right, count) {
    this._color = color;
    this.key = key;
    this.value = value;
    this.left = left;
    this.right = right;
    this._count = count;
  }
  function cloneNode(node) {
    return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count);
  }
  function repaint(color, node) {
    return new RBNode(color, node.key, node.value, node.left, node.right, node._count);
  }
  function recount(node) {
    node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0);
  }
  function RedBlackTree(compare2, root2) {
    this._compare = compare2;
    this.root = root2;
  }
  var proto = RedBlackTree.prototype;
  Object.defineProperty(proto, "keys", {
    get: function() {
      var result = [];
      this.forEach(function(k2, v2) {
        result.push(k2);
      });
      return result;
    }
  });
  Object.defineProperty(proto, "values", {
    get: function() {
      var result = [];
      this.forEach(function(k2, v2) {
        result.push(v2);
      });
      return result;
    }
  });
  Object.defineProperty(proto, "length", {
    get: function() {
      if (this.root) {
        return this.root._count;
      }
      return 0;
    }
  });
  proto.insert = function(key, value) {
    var cmp = this._compare;
    var n2 = this.root;
    var n_stack = [];
    var d_stack = [];
    while (n2) {
      var d2 = cmp(key, n2.key);
      n_stack.push(n2);
      d_stack.push(d2);
      if (d2 <= 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    n_stack.push(new RBNode(RED, key, value, null, null, 1));
    for (var s2 = n_stack.length - 2; s2 >= 0; --s2) {
      var n2 = n_stack[s2];
      if (d_stack[s2] <= 0) {
        n_stack[s2] = new RBNode(n2._color, n2.key, n2.value, n_stack[s2 + 1], n2.right, n2._count + 1);
      } else {
        n_stack[s2] = new RBNode(n2._color, n2.key, n2.value, n2.left, n_stack[s2 + 1], n2._count + 1);
      }
    }
    for (var s2 = n_stack.length - 1; s2 > 1; --s2) {
      var p2 = n_stack[s2 - 1];
      var n2 = n_stack[s2];
      if (p2._color === BLACK || n2._color === BLACK) {
        break;
      }
      var pp = n_stack[s2 - 2];
      if (pp.left === p2) {
        if (p2.left === n2) {
          var y2 = pp.right;
          if (y2 && y2._color === RED) {
            p2._color = BLACK;
            pp.right = repaint(BLACK, y2);
            pp._color = RED;
            s2 -= 1;
          } else {
            pp._color = RED;
            pp.left = p2.right;
            p2._color = BLACK;
            p2.right = pp;
            n_stack[s2 - 2] = p2;
            n_stack[s2 - 1] = n2;
            recount(pp);
            recount(p2);
            if (s2 >= 3) {
              var ppp = n_stack[s2 - 3];
              if (ppp.left === pp) {
                ppp.left = p2;
              } else {
                ppp.right = p2;
              }
            }
            break;
          }
        } else {
          var y2 = pp.right;
          if (y2 && y2._color === RED) {
            p2._color = BLACK;
            pp.right = repaint(BLACK, y2);
            pp._color = RED;
            s2 -= 1;
          } else {
            p2.right = n2.left;
            pp._color = RED;
            pp.left = n2.right;
            n2._color = BLACK;
            n2.left = p2;
            n2.right = pp;
            n_stack[s2 - 2] = n2;
            n_stack[s2 - 1] = p2;
            recount(pp);
            recount(p2);
            recount(n2);
            if (s2 >= 3) {
              var ppp = n_stack[s2 - 3];
              if (ppp.left === pp) {
                ppp.left = n2;
              } else {
                ppp.right = n2;
              }
            }
            break;
          }
        }
      } else {
        if (p2.right === n2) {
          var y2 = pp.left;
          if (y2 && y2._color === RED) {
            p2._color = BLACK;
            pp.left = repaint(BLACK, y2);
            pp._color = RED;
            s2 -= 1;
          } else {
            pp._color = RED;
            pp.right = p2.left;
            p2._color = BLACK;
            p2.left = pp;
            n_stack[s2 - 2] = p2;
            n_stack[s2 - 1] = n2;
            recount(pp);
            recount(p2);
            if (s2 >= 3) {
              var ppp = n_stack[s2 - 3];
              if (ppp.right === pp) {
                ppp.right = p2;
              } else {
                ppp.left = p2;
              }
            }
            break;
          }
        } else {
          var y2 = pp.left;
          if (y2 && y2._color === RED) {
            p2._color = BLACK;
            pp.left = repaint(BLACK, y2);
            pp._color = RED;
            s2 -= 1;
          } else {
            p2.left = n2.right;
            pp._color = RED;
            pp.right = n2.left;
            n2._color = BLACK;
            n2.right = p2;
            n2.left = pp;
            n_stack[s2 - 2] = n2;
            n_stack[s2 - 1] = p2;
            recount(pp);
            recount(p2);
            recount(n2);
            if (s2 >= 3) {
              var ppp = n_stack[s2 - 3];
              if (ppp.right === pp) {
                ppp.right = n2;
              } else {
                ppp.left = n2;
              }
            }
            break;
          }
        }
      }
    }
    n_stack[0]._color = BLACK;
    return new RedBlackTree(cmp, n_stack[0]);
  };
  function doVisitFull(visit, node) {
    if (node.left) {
      var v2 = doVisitFull(visit, node.left);
      if (v2) {
        return v2;
      }
    }
    var v2 = visit(node.key, node.value);
    if (v2) {
      return v2;
    }
    if (node.right) {
      return doVisitFull(visit, node.right);
    }
  }
  function doVisitHalf(lo, compare2, visit, node) {
    var l2 = compare2(lo, node.key);
    if (l2 <= 0) {
      if (node.left) {
        var v2 = doVisitHalf(lo, compare2, visit, node.left);
        if (v2) {
          return v2;
        }
      }
      var v2 = visit(node.key, node.value);
      if (v2) {
        return v2;
      }
    }
    if (node.right) {
      return doVisitHalf(lo, compare2, visit, node.right);
    }
  }
  function doVisit(lo, hi, compare2, visit, node) {
    var l2 = compare2(lo, node.key);
    var h2 = compare2(hi, node.key);
    var v2;
    if (l2 <= 0) {
      if (node.left) {
        v2 = doVisit(lo, hi, compare2, visit, node.left);
        if (v2) {
          return v2;
        }
      }
      if (h2 > 0) {
        v2 = visit(node.key, node.value);
        if (v2) {
          return v2;
        }
      }
    }
    if (h2 > 0 && node.right) {
      return doVisit(lo, hi, compare2, visit, node.right);
    }
  }
  proto.forEach = function rbTreeForEach(visit, lo, hi) {
    if (!this.root) {
      return;
    }
    switch (arguments.length) {
      case 1:
        return doVisitFull(visit, this.root);
      case 2:
        return doVisitHalf(lo, this._compare, visit, this.root);
      case 3:
        if (this._compare(lo, hi) >= 0) {
          return;
        }
        return doVisit(lo, hi, this._compare, visit, this.root);
    }
  };
  Object.defineProperty(proto, "begin", {
    get: function() {
      var stack = [];
      var n2 = this.root;
      while (n2) {
        stack.push(n2);
        n2 = n2.left;
      }
      return new RedBlackTreeIterator(this, stack);
    }
  });
  Object.defineProperty(proto, "end", {
    get: function() {
      var stack = [];
      var n2 = this.root;
      while (n2) {
        stack.push(n2);
        n2 = n2.right;
      }
      return new RedBlackTreeIterator(this, stack);
    }
  });
  proto.at = function(idx) {
    if (idx < 0) {
      return new RedBlackTreeIterator(this, []);
    }
    var n2 = this.root;
    var stack = [];
    while (true) {
      stack.push(n2);
      if (n2.left) {
        if (idx < n2.left._count) {
          n2 = n2.left;
          continue;
        }
        idx -= n2.left._count;
      }
      if (!idx) {
        return new RedBlackTreeIterator(this, stack);
      }
      idx -= 1;
      if (n2.right) {
        if (idx >= n2.right._count) {
          break;
        }
        n2 = n2.right;
      } else {
        break;
      }
    }
    return new RedBlackTreeIterator(this, []);
  };
  proto.ge = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    var stack = [];
    var last_ptr = 0;
    while (n2) {
      var d2 = cmp(key, n2.key);
      stack.push(n2);
      if (d2 <= 0) {
        last_ptr = stack.length;
      }
      if (d2 <= 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  };
  proto.gt = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    var stack = [];
    var last_ptr = 0;
    while (n2) {
      var d2 = cmp(key, n2.key);
      stack.push(n2);
      if (d2 < 0) {
        last_ptr = stack.length;
      }
      if (d2 < 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  };
  proto.lt = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    var stack = [];
    var last_ptr = 0;
    while (n2) {
      var d2 = cmp(key, n2.key);
      stack.push(n2);
      if (d2 > 0) {
        last_ptr = stack.length;
      }
      if (d2 <= 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  };
  proto.le = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    var stack = [];
    var last_ptr = 0;
    while (n2) {
      var d2 = cmp(key, n2.key);
      stack.push(n2);
      if (d2 >= 0) {
        last_ptr = stack.length;
      }
      if (d2 < 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  };
  proto.find = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    var stack = [];
    while (n2) {
      var d2 = cmp(key, n2.key);
      stack.push(n2);
      if (d2 === 0) {
        return new RedBlackTreeIterator(this, stack);
      }
      if (d2 <= 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    return new RedBlackTreeIterator(this, []);
  };
  proto.remove = function(key) {
    var iter = this.find(key);
    if (iter) {
      return iter.remove();
    }
    return this;
  };
  proto.get = function(key) {
    var cmp = this._compare;
    var n2 = this.root;
    while (n2) {
      var d2 = cmp(key, n2.key);
      if (d2 === 0) {
        return n2.value;
      }
      if (d2 <= 0) {
        n2 = n2.left;
      } else {
        n2 = n2.right;
      }
    }
    return;
  };
  function RedBlackTreeIterator(tree, stack) {
    this.tree = tree;
    this._stack = stack;
  }
  var iproto = RedBlackTreeIterator.prototype;
  Object.defineProperty(iproto, "valid", {
    get: function() {
      return this._stack.length > 0;
    }
  });
  Object.defineProperty(iproto, "node", {
    get: function() {
      if (this._stack.length > 0) {
        return this._stack[this._stack.length - 1];
      }
      return null;
    },
    enumerable: true
  });
  iproto.clone = function() {
    return new RedBlackTreeIterator(this.tree, this._stack.slice());
  };
  function swapNode(n2, v2) {
    n2.key = v2.key;
    n2.value = v2.value;
    n2.left = v2.left;
    n2.right = v2.right;
    n2._color = v2._color;
    n2._count = v2._count;
  }
  function fixDoubleBlack(stack) {
    var n2, p2, s2, z2;
    for (var i2 = stack.length - 1; i2 >= 0; --i2) {
      n2 = stack[i2];
      if (i2 === 0) {
        n2._color = BLACK;
        return;
      }
      p2 = stack[i2 - 1];
      if (p2.left === n2) {
        s2 = p2.right;
        if (s2.right && s2.right._color === RED) {
          s2 = p2.right = cloneNode(s2);
          z2 = s2.right = cloneNode(s2.right);
          p2.right = s2.left;
          s2.left = p2;
          s2.right = z2;
          s2._color = p2._color;
          n2._color = BLACK;
          p2._color = BLACK;
          z2._color = BLACK;
          recount(p2);
          recount(s2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.left === p2) {
              pp.left = s2;
            } else {
              pp.right = s2;
            }
          }
          stack[i2 - 1] = s2;
          return;
        } else if (s2.left && s2.left._color === RED) {
          s2 = p2.right = cloneNode(s2);
          z2 = s2.left = cloneNode(s2.left);
          p2.right = z2.left;
          s2.left = z2.right;
          z2.left = p2;
          z2.right = s2;
          z2._color = p2._color;
          p2._color = BLACK;
          s2._color = BLACK;
          n2._color = BLACK;
          recount(p2);
          recount(s2);
          recount(z2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.left === p2) {
              pp.left = z2;
            } else {
              pp.right = z2;
            }
          }
          stack[i2 - 1] = z2;
          return;
        }
        if (s2._color === BLACK) {
          if (p2._color === RED) {
            p2._color = BLACK;
            p2.right = repaint(RED, s2);
            return;
          } else {
            p2.right = repaint(RED, s2);
            continue;
          }
        } else {
          s2 = cloneNode(s2);
          p2.right = s2.left;
          s2.left = p2;
          s2._color = p2._color;
          p2._color = RED;
          recount(p2);
          recount(s2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.left === p2) {
              pp.left = s2;
            } else {
              pp.right = s2;
            }
          }
          stack[i2 - 1] = s2;
          stack[i2] = p2;
          if (i2 + 1 < stack.length) {
            stack[i2 + 1] = n2;
          } else {
            stack.push(n2);
          }
          i2 = i2 + 2;
        }
      } else {
        s2 = p2.left;
        if (s2.left && s2.left._color === RED) {
          s2 = p2.left = cloneNode(s2);
          z2 = s2.left = cloneNode(s2.left);
          p2.left = s2.right;
          s2.right = p2;
          s2.left = z2;
          s2._color = p2._color;
          n2._color = BLACK;
          p2._color = BLACK;
          z2._color = BLACK;
          recount(p2);
          recount(s2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.right === p2) {
              pp.right = s2;
            } else {
              pp.left = s2;
            }
          }
          stack[i2 - 1] = s2;
          return;
        } else if (s2.right && s2.right._color === RED) {
          s2 = p2.left = cloneNode(s2);
          z2 = s2.right = cloneNode(s2.right);
          p2.left = z2.right;
          s2.right = z2.left;
          z2.right = p2;
          z2.left = s2;
          z2._color = p2._color;
          p2._color = BLACK;
          s2._color = BLACK;
          n2._color = BLACK;
          recount(p2);
          recount(s2);
          recount(z2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.right === p2) {
              pp.right = z2;
            } else {
              pp.left = z2;
            }
          }
          stack[i2 - 1] = z2;
          return;
        }
        if (s2._color === BLACK) {
          if (p2._color === RED) {
            p2._color = BLACK;
            p2.left = repaint(RED, s2);
            return;
          } else {
            p2.left = repaint(RED, s2);
            continue;
          }
        } else {
          s2 = cloneNode(s2);
          p2.left = s2.right;
          s2.right = p2;
          s2._color = p2._color;
          p2._color = RED;
          recount(p2);
          recount(s2);
          if (i2 > 1) {
            var pp = stack[i2 - 2];
            if (pp.right === p2) {
              pp.right = s2;
            } else {
              pp.left = s2;
            }
          }
          stack[i2 - 1] = s2;
          stack[i2] = p2;
          if (i2 + 1 < stack.length) {
            stack[i2 + 1] = n2;
          } else {
            stack.push(n2);
          }
          i2 = i2 + 2;
        }
      }
    }
  }
  iproto.remove = function() {
    var stack = this._stack;
    if (stack.length === 0) {
      return this.tree;
    }
    var cstack = new Array(stack.length);
    var n2 = stack[stack.length - 1];
    cstack[cstack.length - 1] = new RBNode(n2._color, n2.key, n2.value, n2.left, n2.right, n2._count);
    for (var i2 = stack.length - 2; i2 >= 0; --i2) {
      var n2 = stack[i2];
      if (n2.left === stack[i2 + 1]) {
        cstack[i2] = new RBNode(n2._color, n2.key, n2.value, cstack[i2 + 1], n2.right, n2._count);
      } else {
        cstack[i2] = new RBNode(n2._color, n2.key, n2.value, n2.left, cstack[i2 + 1], n2._count);
      }
    }
    n2 = cstack[cstack.length - 1];
    if (n2.left && n2.right) {
      var split = cstack.length;
      n2 = n2.left;
      while (n2.right) {
        cstack.push(n2);
        n2 = n2.right;
      }
      var v2 = cstack[split - 1];
      cstack.push(new RBNode(n2._color, v2.key, v2.value, n2.left, n2.right, n2._count));
      cstack[split - 1].key = n2.key;
      cstack[split - 1].value = n2.value;
      for (var i2 = cstack.length - 2; i2 >= split; --i2) {
        n2 = cstack[i2];
        cstack[i2] = new RBNode(n2._color, n2.key, n2.value, n2.left, cstack[i2 + 1], n2._count);
      }
      cstack[split - 1].left = cstack[split];
    }
    n2 = cstack[cstack.length - 1];
    if (n2._color === RED) {
      var p2 = cstack[cstack.length - 2];
      if (p2.left === n2) {
        p2.left = null;
      } else if (p2.right === n2) {
        p2.right = null;
      }
      cstack.pop();
      for (var i2 = 0; i2 < cstack.length; ++i2) {
        cstack[i2]._count--;
      }
      return new RedBlackTree(this.tree._compare, cstack[0]);
    } else {
      if (n2.left || n2.right) {
        if (n2.left) {
          swapNode(n2, n2.left);
        } else if (n2.right) {
          swapNode(n2, n2.right);
        }
        n2._color = BLACK;
        for (var i2 = 0; i2 < cstack.length - 1; ++i2) {
          cstack[i2]._count--;
        }
        return new RedBlackTree(this.tree._compare, cstack[0]);
      } else if (cstack.length === 1) {
        return new RedBlackTree(this.tree._compare, null);
      } else {
        for (var i2 = 0; i2 < cstack.length; ++i2) {
          cstack[i2]._count--;
        }
        var parent4 = cstack[cstack.length - 2];
        fixDoubleBlack(cstack);
        if (parent4.left === n2) {
          parent4.left = null;
        } else {
          parent4.right = null;
        }
      }
    }
    return new RedBlackTree(this.tree._compare, cstack[0]);
  };
  Object.defineProperty(iproto, "key", {
    get: function() {
      if (this._stack.length > 0) {
        return this._stack[this._stack.length - 1].key;
      }
      return;
    },
    enumerable: true
  });
  Object.defineProperty(iproto, "value", {
    get: function() {
      if (this._stack.length > 0) {
        return this._stack[this._stack.length - 1].value;
      }
      return;
    },
    enumerable: true
  });
  Object.defineProperty(iproto, "index", {
    get: function() {
      var idx = 0;
      var stack = this._stack;
      if (stack.length === 0) {
        var r2 = this.tree.root;
        if (r2) {
          return r2._count;
        }
        return 0;
      } else if (stack[stack.length - 1].left) {
        idx = stack[stack.length - 1].left._count;
      }
      for (var s2 = stack.length - 2; s2 >= 0; --s2) {
        if (stack[s2 + 1] === stack[s2].right) {
          ++idx;
          if (stack[s2].left) {
            idx += stack[s2].left._count;
          }
        }
      }
      return idx;
    },
    enumerable: true
  });
  iproto.next = function() {
    var stack = this._stack;
    if (stack.length === 0) {
      return;
    }
    var n2 = stack[stack.length - 1];
    if (n2.right) {
      n2 = n2.right;
      while (n2) {
        stack.push(n2);
        n2 = n2.left;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].right === n2) {
        n2 = stack[stack.length - 1];
        stack.pop();
      }
    }
  };
  Object.defineProperty(iproto, "hasNext", {
    get: function() {
      var stack = this._stack;
      if (stack.length === 0) {
        return false;
      }
      if (stack[stack.length - 1].right) {
        return true;
      }
      for (var s2 = stack.length - 1; s2 > 0; --s2) {
        if (stack[s2 - 1].left === stack[s2]) {
          return true;
        }
      }
      return false;
    }
  });
  iproto.update = function(value) {
    var stack = this._stack;
    if (stack.length === 0) {
      throw new Error("Can't update empty node!");
    }
    var cstack = new Array(stack.length);
    var n2 = stack[stack.length - 1];
    cstack[cstack.length - 1] = new RBNode(n2._color, n2.key, value, n2.left, n2.right, n2._count);
    for (var i2 = stack.length - 2; i2 >= 0; --i2) {
      n2 = stack[i2];
      if (n2.left === stack[i2 + 1]) {
        cstack[i2] = new RBNode(n2._color, n2.key, n2.value, cstack[i2 + 1], n2.right, n2._count);
      } else {
        cstack[i2] = new RBNode(n2._color, n2.key, n2.value, n2.left, cstack[i2 + 1], n2._count);
      }
    }
    return new RedBlackTree(this.tree._compare, cstack[0]);
  };
  iproto.prev = function() {
    var stack = this._stack;
    if (stack.length === 0) {
      return;
    }
    var n2 = stack[stack.length - 1];
    if (n2.left) {
      n2 = n2.left;
      while (n2) {
        stack.push(n2);
        n2 = n2.right;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].left === n2) {
        n2 = stack[stack.length - 1];
        stack.pop();
      }
    }
  };
  Object.defineProperty(iproto, "hasPrev", {
    get: function() {
      var stack = this._stack;
      if (stack.length === 0) {
        return false;
      }
      if (stack[stack.length - 1].left) {
        return true;
      }
      for (var s2 = stack.length - 1; s2 > 0; --s2) {
        if (stack[s2 - 1].right === stack[s2]) {
          return true;
        }
      }
      return false;
    }
  });
  function defaultCompare(a2, b2) {
    if (a2 < b2) {
      return -1;
    }
    if (a2 > b2) {
      return 1;
    }
    return 0;
  }
  function createRBTree(compare2) {
    return new RedBlackTree(compare2 || defaultCompare, null);
  }
  return rbtree$1;
}
var guidelines;
var hasRequiredGuidelines;
function requireGuidelines() {
  if (hasRequiredGuidelines)
    return guidelines;
  hasRequiredGuidelines = 1;
  guidelines = function(opts, cy2, debounce2) {
    var RBTree = requireRbtree$1();
    var options2 = opts;
    var changeOptions = function(opts2) {
      options2 = opts2;
      if (options2.guidelinesTolerance == 0)
        options2.guidelinesTolerance = 1e-3;
    };
    var offset = function(elt) {
      var rect = elt.getBoundingClientRect();
      return {
        top: rect.top + document.documentElement.scrollTop,
        left: rect.left + document.documentElement.scrollLeft
      };
    };
    var resizeCanvas = debounce2(function() {
      clearDrawing();
      $canvas.height = cy2.height();
      $canvas.width = cy2.width();
      $canvas.style.position = "absolute";
      $canvas.style.top = 0;
      $canvas.style.left = 0;
      $canvas.style.zIndex = options2.guidelinesStackOrder;
      setTimeout(function() {
        $canvas.height = cy2.height();
        $canvas.width = cy2.width();
        var canvasBb = offset($canvas);
        var containerBb = offset($container);
        $canvas.style.top = -(canvasBb.top - containerBb.top);
        $canvas.style.left = -(canvasBb.left - containerBb.left);
      }, 0);
    }, 250);
    var clearDrawing = function() {
      var width2 = cy2.width();
      var height2 = cy2.height();
      ctx.clearRect(0, 0, width2, height2);
    };
    var $canvas = document.createElement("canvas");
    var $container = cy2.container();
    var ctx = $canvas.getContext("2d");
    $container.appendChild($canvas);
    var resetCanvas = function() {
      $canvas.height = 0;
      $canvas.width = 0;
      $canvas.style.position = "absolute";
      $canvas.style.top = 0;
      $canvas.style.left = 0;
      $canvas.style.zIndex = options2.guidelinesStackOrder;
    };
    resetCanvas();
    var VTree = null;
    var HTree = null;
    var nodeInitPos;
    var excludedNodes;
    var lines = {};
    var panInitPos = {};
    var alignedLocations = { "h": null, "v": null };
    lines.getDims = function(node) {
      var pos = node.renderedPosition();
      var width2 = node.renderedWidth();
      var height2 = node.renderedHeight();
      var padding = {
        left: Number(node.renderedStyle("padding-left").replace("px", "")),
        right: Number(node.renderedStyle("padding-right").replace("px", "")),
        top: Number(node.renderedStyle("padding-top").replace("px", "")),
        bottom: Number(node.renderedStyle("padding-bottom").replace("px", ""))
      };
      return {
        horizontal: {
          center: pos.x,
          left: Math.round(pos.x - (padding.left + width2 / 2)),
          right: Math.round(pos.x + (padding.right + width2 / 2))
        },
        vertical: {
          center: pos.y,
          top: Math.round(pos.y - (padding.top + height2 / 2)),
          bottom: Math.round(pos.y + (padding.bottom + height2 / 2))
        }
      };
    };
    lines.init = function(activeNodes) {
      VTree = RBTree();
      HTree = RBTree();
      if (!nodeInitPos) {
        panInitPos.x = cy2.pan("x");
        panInitPos.y = cy2.pan("y");
        nodeInitPos = activeNodes.renderedPosition();
      }
      var nodes3 = cy2.nodes(":visible");
      excludedNodes = activeNodes.union(activeNodes.ancestors());
      excludedNodes = excludedNodes.union(activeNodes.descendants());
      nodes3.not(excludedNodes).each(function(node, i2) {
        if (typeof node === "number") {
          node = i2;
        }
        var dims = lines.getDims(node);
        ["left", "center", "right"].forEach(function(val) {
          var hKey = dims.horizontal[val];
          if (HTree.get(hKey))
            HTree.get(hKey).push(node);
          else
            HTree = HTree.insert(hKey, [node]);
        });
        ["top", "center", "bottom"].forEach(function(val) {
          var vKey = dims.vertical[val];
          if (VTree.get(vKey))
            VTree.get(vKey).push(node);
          else
            VTree = VTree.insert(vKey, [node]);
        });
      });
      ctx.lineWidth = options2.lineWidth;
      lines.update(activeNodes);
    };
    lines.destroy = function() {
      lines.clear();
      VTree = null;
      HTree = null;
      nodeInitPos = null;
      mouseInitPos = {};
      alignedLocations = { "h": null, "v": null };
      if (nodeToAlign) {
        nodeToAlign.unlock();
        nodeToAlign = void 0;
      }
    };
    lines.clear = clearDrawing;
    lines.drawLine = function(from, to, color, lineStyle) {
      ctx.setLineDash(lineStyle);
      ctx.beginPath();
      ctx.moveTo(from.x, from.y);
      ctx.lineTo(to.x, to.y);
      ctx.strokeStyle = color;
      ctx.stroke();
    };
    lines.drawArrow = function(position3, type) {
      if (type == "right") {
        ctx.setLineDash([]);
        ctx.beginPath();
        ctx.moveTo(position3.x - 5, position3.y - 5);
        ctx.lineTo(position3.x, position3.y);
        ctx.lineTo(position3.x - 5, position3.y + 5);
        ctx.stroke();
      } else if (type == "left") {
        ctx.setLineDash([]);
        ctx.beginPath();
        ctx.moveTo(position3.x + 5, position3.y - 5);
        ctx.lineTo(position3.x, position3.y);
        ctx.lineTo(position3.x + 5, position3.y + 5);
        ctx.stroke();
      } else if (type == "top") {
        ctx.setLineDash([]);
        ctx.beginPath();
        ctx.moveTo(position3.x - 5, position3.y + 5);
        ctx.lineTo(position3.x, position3.y);
        ctx.lineTo(position3.x + 5, position3.y + 5);
        ctx.stroke();
      } else if (type == "bottom") {
        ctx.setLineDash([]);
        ctx.beginPath();
        ctx.moveTo(position3.x - 5, position3.y - 5);
        ctx.lineTo(position3.x, position3.y);
        ctx.lineTo(position3.x + 5, position3.y - 5);
        ctx.stroke();
      }
    };
    lines.drawCross = function(position3) {
      ctx.setLineDash([]);
      ctx.beginPath();
      ctx.moveTo(position3.x - 5, position3.y + 5);
      ctx.lineTo(position3.x + 5, position3.y - 5);
      ctx.moveTo(position3.x - 5, position3.y - 5);
      ctx.lineTo(position3.x + 5, position3.y + 5);
      ctx.stroke();
    };
    var calculateOffset = function(nodes3, type) {
      var minNode = nodes3[0], min4 = lines.getDims(minNode)[type]["center"];
      var maxNode = nodes3[0], max5 = lines.getDims(maxNode)[type]["center"];
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        var node = nodes3[i2];
        if (lines.getDims(node)[type]["center"] < min4) {
          min4 = lines.getDims(node)[type]["center"];
          minNode = node;
        }
        if (lines.getDims(node)[type]["center"] > max5) {
          max5 = lines.getDims(node)[type]["center"];
          maxNode = node;
        }
      }
      if (type == "horizontal")
        var offset2 = (min4 + max5) / 2 < lines.getDims(nodes3[1])[type]["center"] ? max5 + (0.5 * maxNode.width() + options2.guidelinesStyle.distGuidelineOffset) * cy2.zoom() : min4 - (0.5 * minNode.width() + options2.guidelinesStyle.distGuidelineOffset) * cy2.zoom();
      else
        var offset2 = (min4 + max5) / 2 < lines.getDims(nodes3[1])[type]["center"] ? max5 + (0.5 * maxNode.height() + options2.guidelinesStyle.distGuidelineOffset) * cy2.zoom() : min4 - (0.5 * minNode.height() + options2.guidelinesStyle.distGuidelineOffset) * cy2.zoom();
      return offset2;
    };
    lines.horizontalDistribution = function(node) {
      var leftNode = null, rightNode = null;
      var nodeDim = lines.getDims(node);
      var Xcenter = nodeDim["horizontal"]["center"];
      var Ycenter = nodeDim["vertical"]["center"];
      HTree.forEach(function(key, nodes3) {
        for (var i2 = 0; i2 < nodes3.length; i2++) {
          var left = nodes3[i2];
          var leftDim = lines.getDims(left);
          if (Math.abs(leftDim["vertical"]["center"] - nodeDim["vertical"]["center"]) < options2.guidelinesStyle.range * cy2.zoom()) {
            if (leftDim["horizontal"]["right"] == key && nodeDim["horizontal"]["left"] - leftDim["horizontal"]["right"] > options2.guidelinesStyle.minDistRange) {
              var ripo = Math.round(2 * Xcenter) - key;
              HTree.forEach(function($3, rightNodes) {
                for (var j2 = 0; j2 < rightNodes.length; j2++) {
                  var right = rightNodes[j2];
                  if (Math.abs(lines.getDims(right)["vertical"]["center"] - Ycenter) < options2.guidelinesStyle.range * cy2.zoom()) {
                    if (Math.abs(ripo - lines.getDims(right)["horizontal"]["left"]) < 2 * options2.guidelinesTolerance) {
                      leftNode = left;
                      rightNode = right;
                    }
                  }
                }
              }, ripo - options2.guidelinesTolerance, ripo + options2.guidelinesTolerance);
            }
          }
        }
      }, Xcenter - options2.guidelinesStyle.range * cy2.zoom(), Xcenter);
      if (leftNode) {
        alignedLocations.hd = Xcenter - (lines.getDims(rightNode)["horizontal"]["left"] + lines.getDims(leftNode)["horizontal"]["right"]) / 2;
        if (!options2.geometricGuideline || alignedLocations.h == null || Math.abs(alignedLocations.h) > Math.abs(alignedLocations.hd)) {
          alignedLocations.h = alignedLocations.hd;
        }
        var offset2 = calculateOffset([leftNode, node, rightNode], "vertical");
        lines.drawLine({
          x: lines.getDims(leftNode)["horizontal"]["right"],
          y: offset2
        }, {
          x: nodeDim["horizontal"]["left"],
          y: offset2
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawLine({
          x: lines.getDims(rightNode)["horizontal"]["left"],
          y: offset2
        }, {
          x: nodeDim["horizontal"]["right"],
          y: offset2
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawLine({
          x: lines.getDims(leftNode)["horizontal"]["right"],
          y: offset2
        }, {
          x: lines.getDims(leftNode)["horizontal"]["right"],
          y: lines.getDims(leftNode)["vertical"]["center"]
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawLine({
          x: lines.getDims(rightNode)["horizontal"]["left"],
          y: offset2
        }, {
          x: lines.getDims(rightNode)["horizontal"]["left"],
          y: lines.getDims(rightNode)["vertical"]["center"]
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawLine({
          x: nodeDim["horizontal"]["left"],
          y: offset2
        }, {
          x: nodeDim["horizontal"]["left"],
          y: Ycenter
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawLine({
          x: nodeDim["horizontal"]["right"],
          y: offset2
        }, {
          x: nodeDim["horizontal"]["right"],
          y: Ycenter
        }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
        lines.drawArrow({
          x: lines.getDims(leftNode)["horizontal"]["right"],
          y: offset2
        }, "left");
        lines.drawArrow({
          x: nodeDim["horizontal"]["left"],
          y: offset2
        }, "right");
        lines.drawArrow({
          x: nodeDim["horizontal"]["right"],
          y: offset2
        }, "left");
        lines.drawArrow({
          x: lines.getDims(rightNode)["horizontal"]["left"],
          y: offset2
        }, "right");
      } else {
        var state = lines.horizontalDistributionNext(node, "left");
        if (!state)
          lines.horizontalDistributionNext(node, "right");
      }
    };
    lines.verticalDistribution = function(node) {
      var belowNode = null, aboveNode = null;
      var nodeDim = lines.getDims(node);
      var Xcenter = nodeDim["horizontal"]["center"];
      var Ycenter = nodeDim["vertical"]["center"];
      VTree.forEach(function(key, nodes3) {
        for (var i2 = 0; i2 < nodes3.length; i2++) {
          var below = nodes3[i2];
          var belowDim = lines.getDims(below);
          if (Math.abs(belowDim["horizontal"]["center"] - nodeDim["horizontal"]["center"]) < options2.guidelinesStyle.range * cy2.zoom()) {
            if (belowDim["vertical"]["bottom"] == key && nodeDim["vertical"]["top"] - belowDim["vertical"]["bottom"] > options2.guidelinesStyle.minDistRange) {
              var abpo = Math.round(2 * Ycenter - key);
              VTree.forEach(function($3, aboveNodes) {
                for (var j2 = 0; j2 < aboveNodes.length; j2++) {
                  var above = aboveNodes[j2];
                  if (Math.abs(lines.getDims(above)["horizontal"]["center"] - Xcenter) < options2.guidelinesStyle.range * cy2.zoom()) {
                    if (Math.abs(abpo - lines.getDims(above)["vertical"]["top"]) < 2 * options2.guidelinesTolerance) {
                      belowNode = below;
                      aboveNode = above;
                    }
                  }
                }
              }, abpo - options2.guidelinesTolerance, abpo + options2.guidelinesTolerance);
            }
          }
        }
      }, Ycenter - options2.guidelinesStyle.range * cy2.zoom(), Ycenter);
      if (belowNode) {
        alignedLocations.vd = Ycenter - (lines.getDims(belowNode)["vertical"]["bottom"] + lines.getDims(aboveNode)["vertical"]["top"]) / 2;
        if (!options2.geometricGuideline || alignedLocations.v == null || Math.abs(alignedLocations.v) > Math.abs(alignedLocations.vd)) {
          alignedLocations.v = alignedLocations.vd;
        }
        var offset2 = calculateOffset([belowNode, node, aboveNode], "horizontal");
        lines.drawLine({
          y: lines.getDims(belowNode)["vertical"]["bottom"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: nodeDim["vertical"]["top"],
          x: offset2
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawLine({
          y: lines.getDims(aboveNode)["vertical"]["top"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: nodeDim["vertical"]["bottom"],
          x: offset2
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawLine({
          y: lines.getDims(belowNode)["vertical"]["bottom"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: lines.getDims(belowNode)["vertical"]["bottom"],
          x: lines.getDims(belowNode)["horizontal"]["center"]
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawLine({
          y: lines.getDims(aboveNode)["vertical"]["top"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: lines.getDims(aboveNode)["vertical"]["top"],
          x: lines.getDims(aboveNode)["horizontal"]["center"]
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawLine({
          y: nodeDim["vertical"]["bottom"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: nodeDim["vertical"]["bottom"],
          //renderedPosition("x"),
          x: Xcenter
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawLine({
          y: nodeDim["vertical"]["top"],
          //renderedPosition("x"),
          x: offset2
        }, {
          y: nodeDim["vertical"]["top"],
          //renderedPosition("x"),
          x: Xcenter
        }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
        lines.drawArrow({
          x: offset2,
          y: lines.getDims(belowNode)["vertical"]["bottom"]
        }, "top");
        lines.drawArrow({
          x: offset2,
          y: nodeDim["vertical"]["top"]
        }, "bottom");
        lines.drawArrow({
          x: offset2,
          y: lines.getDims(aboveNode)["vertical"]["top"]
        }, "bottom");
        lines.drawArrow({
          x: offset2,
          y: nodeDim["vertical"]["bottom"]
        }, "top");
      } else {
        var state = lines.verticalDistributionNext(node, "below");
        if (!state)
          lines.verticalDistributionNext(node, "above");
      }
    };
    lines.searchForLine = function(type, node) {
      var position3, target, center2, axis, otherAxis, Tree, closestKey;
      var dims = lines.getDims(node)[type];
      var targetKey = Number.MAX_SAFE_INTEGER;
      if (type == "horizontal") {
        Tree = HTree;
        axis = "y";
        otherAxis = "x";
        alignedLocations.h = null;
      } else {
        Tree = VTree;
        axis = "x";
        otherAxis = "y";
        alignedLocations.v = null;
      }
      center2 = node.renderedPosition(axis);
      for (var dimKey in dims) {
        position3 = dims[dimKey];
        Tree.forEach(function(exKey, nodes3) {
          for (var i2 = 0; i2 < nodes3.length; i2++) {
            var n2 = nodes3[i2];
            if (options2.centerToEdgeAlignment || dimKey != "center" && n2.renderedPosition(otherAxis) != exKey || dimKey == "center" && n2.renderedPosition(otherAxis) == exKey) {
              var dif = Math.abs(center2 - n2.renderedPosition(axis));
              if (dif < targetKey && dif < options2.guidelinesStyle.geometricGuidelineRange * cy2.zoom()) {
                target = n2;
                targetKey = dif;
                closestKey = exKey;
              }
            }
          }
        }, position3 - Number(options2.guidelinesTolerance), position3 + Number(options2.guidelinesTolerance));
        if (target) {
          targetKey = lines.getDims(node)[type][dimKey];
          if (type == "horizontal") {
            alignedLocations.h = targetKey - closestKey;
            lines.drawLine({
              x: targetKey,
              y: node.renderedPosition("y")
            }, {
              x: targetKey,
              y: target.renderedPosition("y")
            }, options2.guidelinesStyle.strokeStyle, options2.guidelinesStyle.lineDash);
          } else {
            alignedLocations.v = targetKey - closestKey;
            lines.drawLine({
              x: node.renderedPosition("x"),
              y: targetKey
            }, {
              x: target.renderedPosition("x"),
              y: targetKey
            }, options2.guidelinesStyle.strokeStyle, options2.guidelinesStyle.lineDash);
          }
          break;
        }
      }
    };
    lines.horizontalDistributionNext = function(node, type) {
      var leftNode = null, rightNode = null;
      var nodeDim = lines.getDims(node);
      var Xcenter = nodeDim["horizontal"]["center"];
      var Ycenter = nodeDim["vertical"]["center"];
      var side = "right", otherSide = "left";
      var lowerBound = Xcenter;
      if (type == "left") {
        side = "left";
        otherSide = "right";
        var lowerBound = Xcenter - options2.guidelinesStyle.range * cy2.zoom();
      }
      var compare2 = {
        "left": function(x2, y2) {
          return y2 - x2 > options2.guidelinesStyle.minDistRange;
        },
        "right": function(x2, y2) {
          return x2 - y2 > options2.guidelinesStyle.minDistRange;
        }
      };
      HTree.forEach(function(key, nodes3) {
        for (var i2 = 0; i2 < nodes3.length; i2++) {
          var left = nodes3[i2];
          var leftDim = lines.getDims(left);
          if (Math.abs(leftDim["vertical"]["center"] - nodeDim["vertical"]["center"]) < options2.guidelinesStyle.range * cy2.zoom()) {
            if (leftDim["horizontal"][otherSide] == key && compare2[type](leftDim["horizontal"][otherSide], nodeDim["horizontal"][side])) {
              var ll = leftDim["horizontal"][side] - (nodeDim["horizontal"][side] - key);
              HTree.forEach(function($3, rightNodes) {
                for (var j2 = 0; j2 < rightNodes.length; j2++) {
                  var right = rightNodes[j2];
                  if (Math.abs(lines.getDims(right)["vertical"]["center"] - Ycenter) < options2.guidelinesStyle.range * cy2.zoom()) {
                    if (Math.abs(ll - lines.getDims(right)["horizontal"][otherSide]) < 2 * options2.guidelinesTolerance) {
                      leftNode = left;
                      rightNode = right;
                    }
                  }
                }
              }, ll - options2.guidelinesTolerance, ll + options2.guidelinesTolerance);
            }
          }
        }
      }, lowerBound, lowerBound + options2.guidelinesStyle.range * cy2.zoom());
      if (leftNode) {
        alignedLocations.hd = lines.getDims(node)["horizontal"][side] - lines.getDims(leftNode)["horizontal"][otherSide] - (lines.getDims(leftNode)["horizontal"][side] - lines.getDims(rightNode)["horizontal"][otherSide]);
        if (!options2.geometricGuideline || alignedLocations.h == null || Math.abs(alignedLocations.h) > Math.abs(alignedLocations.hd)) {
          alignedLocations.h = alignedLocations.hd;
        }
        lines.drawDH(node, leftNode, rightNode, type);
        return true;
      } else if (!options2.geometricGuideline) {
        alignedLocations.h = null;
      }
      return false;
    };
    lines.drawDH = function(node, leftNode, rightNode, type) {
      var Ycenter = lines.getDims(node)["vertical"]["center"];
      var side = "right", otherSide = "left";
      if (type == "left") {
        side = "left";
        otherSide = "right";
      }
      var offset2 = calculateOffset([leftNode, node, rightNode], "vertical");
      lines.drawLine({
        x: lines.getDims(leftNode)["horizontal"][otherSide],
        y: offset2
      }, {
        x: lines.getDims(node)["horizontal"][side],
        y: offset2
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawLine({
        x: lines.getDims(node)["horizontal"][side],
        y: offset2
      }, {
        x: lines.getDims(node)["horizontal"][side],
        y: Ycenter
        //lines.getDims(leftNode)["vertical"]["center"]
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawLine({
        x: lines.getDims(rightNode)["horizontal"][otherSide],
        y: offset2
      }, {
        x: lines.getDims(leftNode)["horizontal"][side],
        y: offset2
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawLine({
        x: lines.getDims(rightNode)["horizontal"][otherSide],
        y: offset2
      }, {
        x: lines.getDims(rightNode)["horizontal"][otherSide],
        y: lines.getDims(rightNode)["vertical"]["center"]
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawLine({
        x: lines.getDims(leftNode)["horizontal"][otherSide],
        y: offset2
      }, {
        x: lines.getDims(leftNode)["horizontal"][otherSide],
        y: lines.getDims(leftNode)["vertical"]["center"]
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawLine({
        x: lines.getDims(leftNode)["horizontal"][side],
        y: offset2
      }, {
        x: lines.getDims(leftNode)["horizontal"][side],
        y: lines.getDims(leftNode)["vertical"]["center"]
      }, options2.guidelinesStyle.horizontalDistColor, options2.guidelinesStyle.horizontalDistLine);
      lines.drawArrow({
        x: lines.getDims(node)["horizontal"][side],
        y: offset2
      }, otherSide);
      lines.drawArrow({
        x: lines.getDims(leftNode)["horizontal"][otherSide],
        y: offset2
      }, side);
      lines.drawArrow({
        x: lines.getDims(leftNode)["horizontal"][side],
        y: offset2
      }, otherSide);
      lines.drawArrow({
        x: lines.getDims(rightNode)["horizontal"][otherSide],
        y: offset2
      }, side);
    };
    lines.verticalDistributionNext = function(node, type) {
      var belowNode = null, aboveNode = null;
      var nodeDim = lines.getDims(node);
      var Xcenter = nodeDim["horizontal"]["center"];
      var Ycenter = nodeDim["vertical"]["center"];
      var side = "top", otherSide = "bottom";
      var lowerBound = Ycenter - options2.guidelinesStyle.range * cy2.zoom();
      if (type == "above") {
        side = "bottom";
        otherSide = "top";
        lowerBound = Ycenter;
      }
      var compare2 = {
        "below": function(x2, y2) {
          return y2 - x2 > options2.guidelinesStyle.minDistRange;
        },
        "above": function(x2, y2) {
          return x2 - y2 > options2.guidelinesStyle.minDistRange;
        }
      };
      VTree.forEach(function(key, nodes3) {
        for (var i2 = 0; i2 < nodes3.length; i2++) {
          var below = nodes3[i2];
          var belowDim = lines.getDims(below);
          if (Math.abs(belowDim["horizontal"]["center"] - nodeDim["horizontal"]["center"]) < options2.guidelinesStyle.range * cy2.zoom()) {
            if (belowDim["vertical"][otherSide] == key && compare2[type](belowDim["vertical"][otherSide], nodeDim["vertical"][side])) {
              var ll = belowDim["vertical"][side] - (nodeDim["vertical"][side] - key);
              VTree.forEach(function($3, aboveNodes) {
                for (var j2 = 0; j2 < aboveNodes.length; j2++) {
                  var above = aboveNodes[j2];
                  if (Math.abs(lines.getDims(above)["horizontal"]["center"] - Xcenter) < options2.guidelinesStyle.range * cy2.zoom()) {
                    if (Math.abs(ll - lines.getDims(above)["vertical"][otherSide]) < 2 * options2.guidelinesTolerance) {
                      belowNode = below;
                      aboveNode = above;
                    }
                  }
                }
              }, ll - options2.guidelinesTolerance, ll + options2.guidelinesTolerance);
            }
          }
        }
      }, lowerBound, lowerBound + options2.guidelinesStyle.range * cy2.zoom());
      if (belowNode) {
        alignedLocations.vd = lines.getDims(node)["vertical"][side] - lines.getDims(belowNode)["vertical"][otherSide] - (lines.getDims(belowNode)["vertical"][side] - lines.getDims(aboveNode)["vertical"][otherSide]);
        if (!options2.geometricGuideline || alignedLocations.v == null || Math.abs(alignedLocations.v) > Math.abs(alignedLocations.vd)) {
          alignedLocations.v = alignedLocations.vd;
        }
        lines.drawDV(node, belowNode, aboveNode, type);
        return true;
      } else if (!options2.geometricGuideline) {
        alignedLocations.v = null;
      }
      return false;
    };
    lines.drawDV = function(node, belowNode, aboveNode, type) {
      var nodeDim = lines.getDims(node);
      var Xcenter = nodeDim["horizontal"]["center"];
      var side = "top", otherSide = "bottom";
      if (type == "above") {
        side = "bottom";
        otherSide = "top";
      }
      var offset2 = calculateOffset([belowNode, node, aboveNode], "horizontal");
      lines.drawLine({
        x: offset2,
        y: nodeDim["vertical"][side]
      }, {
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][otherSide]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawLine({
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][side]
      }, {
        x: offset2,
        y: lines.getDims(aboveNode)["vertical"][otherSide]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawLine({
        x: Xcenter,
        y: nodeDim["vertical"][side]
      }, {
        x: offset2,
        y: nodeDim["vertical"][side]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawLine({
        x: lines.getDims(belowNode)["horizontal"]["center"],
        y: lines.getDims(belowNode)["vertical"][otherSide]
      }, {
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][otherSide]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawLine({
        x: lines.getDims(belowNode)["horizontal"]["center"],
        y: lines.getDims(belowNode)["vertical"][side]
      }, {
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][side]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawLine({
        x: offset2,
        //lines.getDims(aboveNode)["horizontal"]["center"],
        y: lines.getDims(aboveNode)["vertical"][otherSide]
      }, {
        x: lines.getDims(aboveNode)["horizontal"]["center"],
        y: lines.getDims(aboveNode)["vertical"][otherSide]
      }, options2.guidelinesStyle.verticalDistColor, options2.guidelinesStyle.verticalDistLine);
      lines.drawArrow({
        x: offset2,
        y: nodeDim["vertical"][side]
      }, otherSide);
      lines.drawArrow({
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][otherSide]
      }, side);
      lines.drawArrow({
        x: offset2,
        y: lines.getDims(belowNode)["vertical"][side]
      }, otherSide);
      lines.drawArrow({
        x: offset2,
        y: lines.getDims(aboveNode)["vertical"][otherSide]
      }, side);
    };
    lines.update = function(activeNodes) {
      lines.clear();
      if (options2.initPosAlignment) {
        mouseLine(activeNodes);
      }
      activeNodes.each(function(node, i2) {
        if (typeof node === "number") {
          node = i2;
        }
        if (options2.geometricGuideline) {
          lines.searchForLine("horizontal", node);
          lines.searchForLine("vertical", node);
        }
        if (options2.distributionGuidelines) {
          lines.horizontalDistribution(node);
          lines.verticalDistribution(node);
        }
      });
    };
    lines.resize = function() {
      resizeCanvas();
    };
    function getTopMostNodes(nodes3) {
      var nodesMap = {};
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        nodesMap[nodes3[i2].id()] = true;
      }
      var roots = nodes3.filter(function(ele, i3) {
        if (typeof ele === "number") {
          ele = i3;
        }
        var parent4 = ele.parent()[0];
        while (parent4 != null) {
          if (nodesMap[parent4.id()]) {
            return false;
          }
          parent4 = parent4.parent()[0];
        }
        return true;
      });
      return roots;
    }
    var mouseInitPos = {};
    var mouseRelativePos = {};
    var getMousePos = function(e2) {
      mouseInitPos = e2.renderedPosition || e2.cyRenderedPosition;
      mouseRelativePos.x = mouseInitPos.x;
      mouseRelativePos.y = mouseInitPos.y;
    };
    var setMousePos = function(panCurrPos) {
      mouseRelativePos.x += panCurrPos.x - panInitPos.x;
      mouseRelativePos.y += panCurrPos.y - panInitPos.y;
      panInitPos.x = panCurrPos.x;
      panInitPos.y = panCurrPos.y;
    };
    var mouseLine = function(node) {
      var nodeCurrentPos = node.renderedPosition();
      if (Math.abs(nodeInitPos.y - nodeCurrentPos.y) < options2.guidelinesTolerance) {
        lines.drawLine({
          "x": mouseRelativePos.x,
          "y": mouseInitPos.y
        }, {
          "x": nodeCurrentPos.x,
          "y": mouseInitPos.y
        }, options2.guidelinesStyle.initPosAlignmentColor, options2.guidelinesStyle.initPosAlignmentLine);
        if (mouseInitPos.y == mouseRelativePos.y) {
          lines.drawCross(mouseRelativePos);
        } else {
          lines.drawCross(mouseInitPos);
        }
      } else if (Math.abs(nodeInitPos.x - nodeCurrentPos.x) < options2.guidelinesTolerance) {
        lines.drawLine({
          "x": mouseInitPos.x,
          "y": mouseRelativePos.y
        }, {
          "x": mouseInitPos.x,
          "y": nodeCurrentPos.y
        }, options2.guidelinesStyle.initPosAlignmentColor, options2.guidelinesStyle.initPosAlignmentLine);
        if (mouseInitPos.x == mouseRelativePos.x) {
          lines.drawCross(mouseRelativePos);
        } else {
          lines.drawCross(mouseInitPos);
        }
      }
    };
    function moveNodes(positionDiff, nodes3) {
      var topMostNodes = getTopMostNodes(nodes3);
      var nodesToMove = topMostNodes.union(topMostNodes.descendants());
      nodesToMove.filter(":childless").forEach(function(node, i2) {
        if (typeof node === "number") {
          node = i2;
        }
        var newPos = {
          x: positionDiff.x + node.renderedPosition("x"),
          y: positionDiff.y + node.renderedPosition("y")
        };
        node.renderedPosition(newPos);
      });
    }
    var tappedNode;
    cy2.on("tapstart", "node", function() {
      tappedNode = this;
    });
    var currMousePos, oldMousePos = { "x": 0, "y": 0 };
    cy2.on("mousemove", function(e2) {
      currMousePos = e2.renderedPosition || e2.cyRenderedPosition;
      if (nodeToAlign)
        nodeToAlign.each(function(node, i2) {
          if (typeof node === "number") {
            node = i2;
          }
          if (node.locked() && (Math.abs(currMousePos.x - oldMousePos.x) > 2 * options2.guidelinesTolerance || Math.abs(currMousePos.y - oldMousePos.y) > 2 * options2.guidelinesTolerance)) {
            node.unlock();
            var diff2 = {};
            diff2.x = currMousePos.x - tappedNode.renderedPosition("x");
            diff2.y = currMousePos.y - tappedNode.renderedPosition("y");
            moveNodes(diff2, node);
          }
        });
    });
    var nodeToAlign;
    lines.snapToAlignmentLocation = function(activeNodes) {
      nodeToAlign = activeNodes;
      activeNodes.each(function(node, i2) {
        if (typeof node === "number") {
          node = i2;
        }
        var newPos = node.renderedPosition();
        if (alignedLocations.h) {
          oldMousePos = currMousePos;
          newPos.x -= alignedLocations.h;
          node.renderedPosition(newPos);
        }
        if (alignedLocations.v) {
          oldMousePos = currMousePos;
          newPos.y -= alignedLocations.v;
          node.renderedPosition(newPos);
        }
        if (alignedLocations.v || alignedLocations.h) {
          alignedLocations.h = null;
          alignedLocations.v = null;
          nodeToAlign.lock();
        }
      });
      lines.update(activeNodes);
    };
    return {
      changeOptions,
      lines,
      getTopMostNodes,
      getMousePos,
      setMousePos,
      resizeCanvas,
      resetCanvas
    };
  };
  return guidelines;
}
var parentPadding;
var hasRequiredParentPadding;
function requireParentPadding() {
  if (hasRequiredParentPadding)
    return parentPadding;
  hasRequiredParentPadding = 1;
  parentPadding = function(opts, cy2) {
    var options2 = opts;
    var ppClass = "_gridParentPadding";
    var padding;
    function initPadding() {
      cy2.style().selector("." + ppClass).style("compound-sizing-wrt-labels", "exclude").style("padding-left", padding).style("padding-right", padding).style("padding-top", padding).style("padding-bottom", padding).update();
    }
    function changeOptions(opts2) {
      options2 = opts2;
      padding = options2.parentSpacing < 0 ? options2.gridSpacing : options2.parentSpacing;
      initPadding();
    }
    function setPaddingOfParent(node, enable) {
      if (enable)
        node.addClass(ppClass);
      else
        node.removeClass(ppClass);
    }
    return {
      changeOptions,
      setPaddingOfParent
    };
  };
  return parentPadding;
}
var alignment;
var hasRequiredAlignment;
function requireAlignment() {
  if (hasRequiredAlignment)
    return alignment;
  hasRequiredAlignment = 1;
  alignment = function(cytoscape3, cy2, apiRegistered) {
    function moveTopDown(node, dx, dy) {
      var nodes3 = node.union(node.descendants());
      nodes3.filter(":childless").positions(function(node2, i2) {
        if (typeof node2 === "number") {
          node2 = i2;
        }
        var pos = node2.position();
        return {
          x: pos.x + dx,
          y: pos.y + dy
        };
      });
    }
    function getTopMostNodes(nodes3) {
      var nodesMap = {};
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        nodesMap[nodes3[i2].id()] = true;
      }
      var roots = nodes3.filter(function(ele, i3) {
        if (typeof ele === "number") {
          ele = i3;
        }
        var parent4 = ele.parent()[0];
        while (parent4 != null) {
          if (nodesMap[parent4.id()]) {
            return false;
          }
          parent4 = parent4.parent()[0];
        }
        return true;
      });
      return roots;
    }
    if (!apiRegistered) {
      cytoscape3("collection", "align", function(horizontal, vertical, alignTo) {
        var eles = getTopMostNodes(this.nodes(":visible"));
        var modelNode = alignTo ? alignTo : eles[0];
        eles = eles.not(modelNode);
        horizontal = horizontal ? horizontal : "none";
        vertical = vertical ? vertical : "none";
        var xFactor = 0;
        var yFactor = 0;
        if (vertical == "left")
          xFactor = -1;
        else if (vertical == "right")
          xFactor = 1;
        if (horizontal == "top")
          yFactor = -1;
        else if (horizontal == "bottom")
          yFactor = 1;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var node = eles[i2];
          var oldPos = Object.assign({}, node.position());
          var newPos = Object.assign({}, node.position());
          if (vertical != "none")
            newPos.x = modelNode.position("x") + xFactor * (modelNode.outerWidth() - node.outerWidth()) / 2;
          if (horizontal != "none")
            newPos.y = modelNode.position("y") + yFactor * (modelNode.outerHeight() - node.outerHeight()) / 2;
          moveTopDown(node, newPos.x - oldPos.x, newPos.y - oldPos.y);
        }
        return this;
      });
    }
    if (cy2.undoRedo) {
      let getNodePositions = function() {
        var positionsAndSizes = {};
        var nodes3 = cy2.nodes();
        for (var i2 = 0; i2 < nodes3.length; i2++) {
          var ele = nodes3[i2];
          positionsAndSizes[ele.id()] = {
            x: ele.position("x"),
            y: ele.position("y")
          };
        }
        return positionsAndSizes;
      }, returnToPositions = function(nodesData) {
        var currentPositions = {};
        cy2.nodes().not(":parent").positions(function(ele, i2) {
          if (typeof ele === "number") {
            ele = i2;
          }
          currentPositions[ele.id()] = {
            x: ele.position("x"),
            y: ele.position("y")
          };
          var data4 = nodesData[ele.id()];
          return {
            x: data4.x,
            y: data4.y
          };
        });
        return currentPositions;
      };
      var ur2 = cy2.undoRedo(null, true);
      ur2.action("align", function(args) {
        var nodesData;
        if (args.firstTime) {
          nodesData = getNodePositions();
          args.nodes.align(args.horizontal, args.vertical, args.alignTo);
        } else
          nodesData = returnToPositions(args);
        return nodesData;
      }, function(nodesData) {
        return returnToPositions(nodesData);
      });
    }
  };
  return alignment;
}
var debounce_1;
var hasRequiredDebounce;
function requireDebounce() {
  if (hasRequiredDebounce)
    return debounce_1;
  hasRequiredDebounce = 1;
  var debounce2 = function() {
    var FUNC_ERROR_TEXT2 = "Expected a function";
    var nativeMax2 = Math.max, nativeNow = Date.now;
    var now2 = nativeNow || function() {
      return (/* @__PURE__ */ new Date()).getTime();
    };
    function debounce3(func, wait, options2) {
      var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0, maxWait = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT2);
      }
      wait = wait < 0 ? 0 : +wait || 0;
      if (options2 === true) {
        var leading = true;
        trailing = false;
      } else if (isObject2(options2)) {
        leading = !!options2.leading;
        maxWait = "maxWait" in options2 && nativeMax2(+options2.maxWait || 0, wait);
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = void 0;
      }
      function complete(isCalled, id2) {
        if (id2) {
          clearTimeout(id2);
        }
        maxTimeoutId = timeoutId = trailingCall = void 0;
        if (isCalled) {
          lastCalled = now2();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = void 0;
          }
        }
      }
      function delayed() {
        var remaining = wait - (now2() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
      function maxDelayed() {
        complete(trailing, timeoutId);
      }
      function debounced() {
        args = arguments;
        stamp = now2();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);
        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled), isCalled = remaining <= 0 || remaining > maxWait;
          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          } else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        } else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = void 0;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    return debounce3;
  }();
  debounce_1 = debounce2;
  return debounce_1;
}
(function(module) {
  (function() {
    var register = function(cytoscape3) {
      if (!cytoscape3) {
        return;
      }
      requireExtend();
      var apiRegistered = false;
      var defaults3 = {
        // On/Off Modules
        /* From the following four snap options, at most one should be true at a given time */
        snapToGridOnRelease: true,
        // Snap to grid on release
        snapToGridDuringDrag: false,
        // Snap to grid during drag
        snapToAlignmentLocationOnRelease: false,
        // Snap to alignment location on release
        snapToAlignmentLocationDuringDrag: false,
        // Snap to alignment location during drag
        distributionGuidelines: false,
        //Distribution guidelines
        geometricGuideline: false,
        // Geometric guidelines
        initPosAlignment: false,
        // Guideline to initial mouse position
        centerToEdgeAlignment: false,
        // Center tı edge alignment
        resize: false,
        // Adjust node sizes to cell sizes
        parentPadding: false,
        // Adjust parent sizes to cell sizes by padding
        drawGrid: true,
        // Draw grid background
        // General
        gridSpacing: 20,
        // Distance between the lines of the grid.
        snapToGridCenter: true,
        // Snaps nodes to center of gridlines. When false, snaps to gridlines themselves.
        zoomDash: true,
        // Determines whether the size of the dashes should change when the drawing is zoomed in and out if grid is drawn.
        panGrid: false,
        // Determines whether the grid should move then the user moves the graph if grid is drawn.
        gridStackOrder: -1,
        // Namely z-index
        gridColor: "#dedede",
        // Color of grid lines
        lineWidth: 1,
        // Width of grid lines
        guidelinesStackOrder: 4,
        // z-index of guidelines
        guidelinesTolerance: 2,
        // Tolerance distance for rendered positions of nodes' interaction.
        guidelinesStyle: {
          // Set ctx properties of line. Properties are here:
          strokeStyle: "#8b7d6b",
          // color of geometric guidelines
          geometricGuidelineRange: 400,
          // range of geometric guidelines
          range: 100,
          // max range of distribution guidelines
          minDistRange: 10,
          // min range for distribution guidelines
          distGuidelineOffset: 10,
          // shift amount of distribution guidelines
          horizontalDistColor: "#ff0000",
          // color of horizontal distribution alignment
          verticalDistColor: "#00ff00",
          // color of vertical distribution alignment
          initPosAlignmentColor: "#0000ff",
          // color of alignment to initial location
          lineDash: [0, 0],
          // line style of geometric guidelines
          horizontalDistLine: [0, 0],
          // line style of horizontal distribıtion guidelines
          verticalDistLine: [0, 0],
          // line style of vertical distribıtion guidelines
          initPosAlignmentLine: [0, 0]
          // line style of alignment to initial mouse position
        },
        // Parent Padding
        parentSpacing: -1
        // -1 to set paddings of parents to gridSpacing
      };
      var _snapOnRelease = requireSnap_on_release();
      var _snapToGridDuringDrag = requireSnap_during_drag();
      var _drawGrid = requireDraw_grid();
      var _resize = requireResize();
      var _eventsController = requireEvents_controller();
      var _guidelines = requireGuidelines();
      var _parentPadding = requireParentPadding();
      var _alignment = requireAlignment();
      var debounce2 = requireDebounce();
      function getScratch(cy2) {
        if (!cy2.scratch("_gridGuide")) {
          cy2.scratch("_gridGuide", {});
        }
        return cy2.scratch("_gridGuide");
      }
      cytoscape3("core", "gridGuide", function(opts) {
        var cy2 = this;
        var scratchPad = getScratch(cy2);
        var options2 = Object.extend({}, scratchPad.options || defaults3, opts);
        scratchPad.options = options2;
        if (!scratchPad.initialized) {
          var snap, resize3, snapToGridDuringDrag, drawGrid, eventsController, guidelines2, parentPadding2;
          snap = _snapOnRelease(cy2, options2.gridSpacing, options2.snapToGridCenter);
          resize3 = _resize(options2.gridSpacing);
          snapToGridDuringDrag = _snapToGridDuringDrag(cy2, snap);
          drawGrid = _drawGrid(options2, cy2, debounce2);
          guidelines2 = _guidelines(options2, cy2, debounce2);
          parentPadding2 = _parentPadding(options2, cy2);
          eventsController = _eventsController(cy2, snap, resize3, snapToGridDuringDrag, drawGrid, guidelines2, parentPadding2, options2);
          _alignment(cytoscape3, cy2, apiRegistered);
          apiRegistered = true;
          eventsController.init(options2);
          scratchPad.initialized = true;
          scratchPad.eventsController = eventsController;
        } else {
          var eventsController = scratchPad.eventsController;
          eventsController.syncWithOptions(options2);
        }
        return this;
      });
    };
    if (module.exports) {
      module.exports = register;
    }
    if (typeof cytoscape !== "undefined") {
      register(cytoscape);
    }
  })();
})(src);
var srcExports = src.exports;
const gridGuide = /* @__PURE__ */ getDefaultExportFromCjs(srcExports);
function instance$G($$self, $$props, $$invalidate) {
  let $gridViewOptions;
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(1, $gridViewOptions = $$value));
  let ready4 = false;
  gridGuide(cytoscape$2);
  let cy2 = get_store_value(cyStore);
  var options2 = {
    // On/Off Modules
    /* From the following four snap options, at most one should be true at a given time */
    snapToGridOnRelease: false,
    // Snap to grid on release
    drawGrid: false,
    snapToAlignmentLocationDuringDrag: false,
    // Snap to alignment location during drag
    distributionGuidelines: true,
    // Distribution guidelines
    geometricGuideline: true,
    // Geometric guidelines
    initPosAlignment: false,
    // Guideline to initial mouse position
    centerToEdgeAlignment: false,
    // Center to edge alignment
    resize: false,
    // Adjust node sizes to cell sizes
    parentPadding: false,
    // Adjust parent sizes to cell sizes by padding
    // Guidelines
    guidelinesStackOrder: 4,
    // z-index of guidelines
    guidelinesTolerance: 2,
    // Tolerance distance for rendered positions of nodes' interaction.
    guidelinesStyle: {
      // Set ctx properties of line. Properties are here:
      strokeStyle: "#8b7d6b",
      // color of geometric guidelines
      geometricGuidelineRange: 2e3,
      // range of geometric guidelines
      range: 100,
      // max range of distribution guidelines
      minDistRange: 10,
      // min range for distribution guidelines
      distGuidelineOffset: 10,
      // shift amount of distribution guidelines
      horizontalDistColor: "#ff0000",
      // color of horizontal distribution alignment
      verticalDistColor: "#00ff00",
      // color of vertical distribution alignment
      initPosAlignmentColor: "#0000ff",
      // color of alignment to initial mouse location
      lineDash: [0, 0],
      // line style of geometric guidelines
      horizontalDistLine: [0, 0],
      // line style of horizontal distribution guidelines
      verticalDistLine: [0, 0],
      // line style of vertical distribution guidelines
      initPosAlignmentLine: [0, 0]
      // line style of alignment to initial mouse position
    },
    // Parent Padding
    parentSpacing: -1
    // -1 to set paddings of parents to gridSpacing
  };
  onMount(() => {
    cy2.gridGuide(options2);
    $$invalidate(0, ready4 = true);
  });
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridShow !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({ drawGrid: $gridViewOptions.gridShow });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridSpace !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({ gridSpacing: $gridViewOptions.gridSpace });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridWidth !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({ lineWidth: $gridViewOptions.gridWidth });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridMovePan !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({ panGrid: $gridViewOptions.gridMovePan });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridSnap !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({
          snapToGridDuringDrag: $gridViewOptions.gridSnap
        });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridAlign !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({
          snapToAlignmentLocationOnRelease: $gridViewOptions.gridAlign
        });
      }
    }
    if ($$self.$$.dirty & /*ready, $gridViewOptions*/
    3) {
      if (ready4 && $gridViewOptions.gridResize !== void 0) {
        let cy3 = get_store_value(cyStore);
        cy3.gridGuide({ resize: $gridViewOptions.gridResize });
      }
    }
  };
  return [ready4, $gridViewOptions];
}
class GridGuides extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$G, null, safe_not_equal, {});
  }
}
const OBSERVED = "observed-variable";
const LATENT = "latent-variable";
const CONSTANT = "constant";
const FREE = "free";
const NOT_LABEL = "nolabel";
const FROM_USER = "fromUser";
const LABEL = "label";
const BY_LAV = "byLav";
const FIXED = "fixed";
const FORCE_FREE = "forcefree";
const DIRECTED = "directed";
const UNDIRECTED = "undirected";
const LOOP = "loop";
const LINKED = "linked";
const FROM_LAV = "fromLav";
const HAS_EST = "hasEst";
const VALIDATED = "validated";
const CONTINOUS = "continous";
const ORDERED = "ordered";
const HAS_EST_FIXED = "hasEstFixed";
const NODEWITH = 80;
const LABELWIDTH = 80;
const graphStyles = [
  {
    selector: "element",
    style: {
      "font-size": function(ele) {
        return ele.data("font-size") || 14;
      }
    }
  },
  {
    selector: "node",
    style: {
      width: NODEWITH.toString(),
      // Set the width of the nodes to 80
      height: "80",
      // Set the height of the nodes to 80
      "background-color": function(ele) {
        return ele.data("background-color") || "white";
      },
      "border-color": function(ele) {
        return ele.data("border-color") || "grey";
      },
      "border-width": function(ele) {
        return ele.data("border-width") || "2px";
      },
      label: "data(label)",
      // Use the 'label' property from the data for the node's label
      "text-valign": "center",
      "text-halign": "center"
    }
  },
  {
    selector: `node.${OBSERVED}`,
    style: {
      shape: "rectangle"
    }
  },
  {
    selector: `node.${OBSERVED}.${ORDERED}`,
    style: {
      "border-style": "double",
      "border-width": 5
    }
  },
  {
    selector: `node.${LATENT}`,
    style: {
      shape: "ellipse",
      "border-color": "black"
    }
  },
  {
    selector: `node.${CONSTANT}`,
    style: {
      shape: "triangle",
      label: "1",
      "text-valign": "center",
      "text-margin-y": "10px",
      "border-color": "black"
    }
  },
  {
    selector: `node.${LINKED}`,
    style: {
      "border-color": "black"
    }
  },
  {
    selector: "edge",
    style: {
      width: function(ele) {
        return ele.data("width") || 3;
      },
      "line-color": function(ele) {
        return ele.data("line-color") || "#000";
      },
      "target-arrow-color": function(ele) {
        return ele.data("target-arrow-color") || "#000";
      },
      "source-arrow-color": function(ele) {
        return ele.data("source-arrow-color") || "#000";
      },
      "target-arrow-shape": "triangle",
      "curve-style": "bezier",
      "text-valign": "center",
      "text-halign": "center",
      "text-wrap": "wrap",
      "text-max-width": LABELWIDTH,
      "z-index": 10,
      color: "#000",
      "text-outline-color": "#fff",
      "text-outline-width": "2px",
      "text-background-color": "#fff",
      "text-background-opacity": 1,
      "text-background-padding": "4px"
    }
  },
  {
    selector: "edge.loop",
    style: {
      "curve-style": "bezier",
      "source-arrow-shape": "triangle",
      "loop-direction": function(ele) {
        return ele.data("loop-direction") || 0;
      },
      "loop-sweep": 0.8,
      // rounding of the loop, in radians
      "control-point-step-size": (edge) => {
        const sourceNode = edge.source();
        const height2 = parseInt(sourceNode.style("height"));
        const width2 = parseInt(sourceNode.style("width"));
        let maxVal;
        if (edge.style("loop-direction") == "0deg" || edge.style("loop-direction") == "180deg") {
          maxVal = height2;
        } else if (edge.style("loop-direction") == "90deg" || edge.style("loop-direction") == "270deg") {
          maxVal = width2;
        } else {
          maxVal = Math.max(width2, height2);
        }
        return maxVal / 80 * 60;
      }
    }
  },
  {
    selector: `edge.${UNDIRECTED}`,
    style: {
      "curve-style": "unbundled-bezier",
      "control-point-distances": [-100],
      "control-point-weights": [0.5],
      "source-arrow-shape": "triangle"
    }
  },
  {
    selector: `edge.${UNDIRECTED}.${FROM_LAV}`,
    style: {
      "control-point-distances": [100]
    }
  },
  {
    selector: `edge.${LABEL}, edge.${LABEL}`,
    style: {
      label: function(edge) {
        return edge.data("label");
      }
    }
  },
  {
    selector: `edge.${FIXED}.${LABEL}`,
    style: {
      label: function(edge) {
        return edge.data("label") + "@" + edge.data("value");
      }
    }
  },
  {
    selector: `edge.${FIXED}.${NOT_LABEL}`,
    style: {
      label: function(edge) {
        return "@" + edge.data("value");
      }
    }
  },
  {
    selector: `edge.${FORCE_FREE}`,
    style: {
      "line-color": "blue"
    }
  },
  {
    selector: `edge.${FROM_LAV}, edge.${BY_LAV}`,
    style: {
      "line-style": "dashed"
    }
  },
  {
    selector: "edge:selected",
    style: {
      "underlay-opacity": 0.5,
      "underlay-color": "#928ff8"
    }
  },
  {
    selector: "node:selected",
    style: {
      "underlay-color": "#928ff8",
      "underlay-opacity": 0.5
    }
  }
];
const graphSettings = {
  autoungrabify: false,
  autolock: false,
  style: graphStyles,
  minZoom: 0.2,
  maxZoom: 5
};
const ehSettings = {
  preview: false,
  // disables the ghost edge preview
  hoverDelay: 150,
  // time spend over a target node before it's considered a hover
  handleNodes: "node",
  // selector/filter for whether edges can be made from a given node
  snap: true,
  // when enabled, the edge can be drawn by just moving close to a target node (can be confusing on compound graphs because you don't need to actually start on the node itself to start drawing)
  handleColor: "#ff0000",
  // bright red
  handleSize: 10,
  // increase the size
  canConnect: function(sourceNode, targetNode) {
    const existingEdges = cy.edges(function(ele) {
      if (!ele.isUserAdded()) {
        return false;
      }
      const hasEdge = ele.source().id() == sourceNode.id() && ele.target().id() == targetNode.id();
      const hasRevert = ele.source().id() == targetNode.id() && ele.target().id() == sourceNode.id();
      return hasEdge || hasRevert;
    }).length;
    return !existingEdges;
  }
};
const edgeBendingSettings = {
  undoable: true,
  bendRemovalSensitivity: 16,
  enableMultipleAnchorRemovalOption: true,
  initAnchorsAutomatically: false,
  useTrailingDividersAfterContextMenuOptions: false,
  enableCreateAnchorOnDrag: true,
  anchorShapeSizeFactor: 4
};
var cytoscapeEdgehandles = { exports: {} };
var lodash_memoize;
var hasRequiredLodash_memoize;
function requireLodash_memoize() {
  if (hasRequiredLodash_memoize)
    return lodash_memoize;
  hasRequiredLodash_memoize = 1;
  var FUNC_ERROR_TEXT2 = "Expected a function";
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  var funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]";
  var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
  var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
  var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
  function getValue2(object3, key) {
    return object3 == null ? void 0 : object3[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e2) {
      }
    }
    return result;
  }
  var arrayProto2 = Array.prototype, funcProto2 = Function.prototype, objectProto2 = Object.prototype;
  var coreJsData2 = root2["__core-js_shared__"];
  var maskSrcKey2 = function() {
    var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  var objectToString2 = objectProto2.toString;
  var reIsNative2 = RegExp(
    "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var splice2 = arrayProto2.splice;
  var Map2 = getNative2(root2, "Map"), nativeCreate2 = getNative2(Object, "create");
  function Hash2(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear2() {
    this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
  }
  function hashDelete2(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet2(key) {
    var data4 = this.__data__;
    if (nativeCreate2) {
      var result = data4[key];
      return result === HASH_UNDEFINED2 ? void 0 : result;
    }
    return hasOwnProperty2.call(data4, key) ? data4[key] : void 0;
  }
  function hashHas2(key) {
    var data4 = this.__data__;
    return nativeCreate2 ? data4[key] !== void 0 : hasOwnProperty2.call(data4, key);
  }
  function hashSet2(key, value) {
    var data4 = this.__data__;
    data4[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  Hash2.prototype.clear = hashClear2;
  Hash2.prototype["delete"] = hashDelete2;
  Hash2.prototype.get = hashGet2;
  Hash2.prototype.has = hashHas2;
  Hash2.prototype.set = hashSet2;
  function ListCache2(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear2() {
    this.__data__ = [];
  }
  function listCacheDelete2(key) {
    var data4 = this.__data__, index = assocIndexOf2(data4, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data4.length - 1;
    if (index == lastIndex) {
      data4.pop();
    } else {
      splice2.call(data4, index, 1);
    }
    return true;
  }
  function listCacheGet2(key) {
    var data4 = this.__data__, index = assocIndexOf2(data4, key);
    return index < 0 ? void 0 : data4[index][1];
  }
  function listCacheHas2(key) {
    return assocIndexOf2(this.__data__, key) > -1;
  }
  function listCacheSet2(key, value) {
    var data4 = this.__data__, index = assocIndexOf2(data4, key);
    if (index < 0) {
      data4.push([key, value]);
    } else {
      data4[index][1] = value;
    }
    return this;
  }
  ListCache2.prototype.clear = listCacheClear2;
  ListCache2.prototype["delete"] = listCacheDelete2;
  ListCache2.prototype.get = listCacheGet2;
  ListCache2.prototype.has = listCacheHas2;
  ListCache2.prototype.set = listCacheSet2;
  function MapCache2(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear2() {
    this.__data__ = {
      "hash": new Hash2(),
      "map": new (Map2 || ListCache2)(),
      "string": new Hash2()
    };
  }
  function mapCacheDelete2(key) {
    return getMapData2(this, key)["delete"](key);
  }
  function mapCacheGet2(key) {
    return getMapData2(this, key).get(key);
  }
  function mapCacheHas2(key) {
    return getMapData2(this, key).has(key);
  }
  function mapCacheSet2(key, value) {
    getMapData2(this, key).set(key, value);
    return this;
  }
  MapCache2.prototype.clear = mapCacheClear2;
  MapCache2.prototype["delete"] = mapCacheDelete2;
  MapCache2.prototype.get = mapCacheGet2;
  MapCache2.prototype.has = mapCacheHas2;
  MapCache2.prototype.set = mapCacheSet2;
  function assocIndexOf2(array3, key) {
    var length = array3.length;
    while (length--) {
      if (eq3(array3[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseIsNative2(value) {
    if (!isObject2(value) || isMasked2(value)) {
      return false;
    }
    var pattern = isFunction2(value) || isHostObject(value) ? reIsNative2 : reIsHostCtor2;
    return pattern.test(toSource2(value));
  }
  function getMapData2(map2, key) {
    var data4 = map2.__data__;
    return isKeyable2(key) ? data4[typeof key == "string" ? "string" : "hash"] : data4.map;
  }
  function getNative2(object3, key) {
    var value = getValue2(object3, key);
    return baseIsNative2(value) ? value : void 0;
  }
  function isKeyable2(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked2(func) {
    return !!maskSrcKey2 && maskSrcKey2 in func;
  }
  function toSource2(func) {
    if (func != null) {
      try {
        return funcToString2.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  function memoize3(func, resolver3) {
    if (typeof func != "function" || resolver3 && typeof resolver3 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    var memoized = function() {
      var args = arguments, key = resolver3 ? resolver3.apply(this, args) : args[0], cache3 = memoized.cache;
      if (cache3.has(key)) {
        return cache3.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache3.set(key, result);
      return result;
    };
    memoized.cache = new (memoize3.Cache || MapCache2)();
    return memoized;
  }
  memoize3.Cache = MapCache2;
  function eq3(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isFunction2(value) {
    var tag = isObject2(value) ? objectToString2.call(value) : "";
    return tag == funcTag2 || tag == genTag2;
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  lodash_memoize = memoize3;
  return lodash_memoize;
}
var lodash_throttle;
var hasRequiredLodash_throttle;
function requireLodash_throttle() {
  if (hasRequiredLodash_throttle)
    return lodash_throttle;
  hasRequiredLodash_throttle = 1;
  var FUNC_ERROR_TEXT2 = "Expected a function";
  var NAN2 = 0 / 0;
  var symbolTag2 = "[object Symbol]";
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex2 = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary2 = /^0b[01]+$/i;
  var reIsOctal2 = /^0o[0-7]+$/i;
  var freeParseInt2 = parseInt;
  var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
  var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
  var objectProto2 = Object.prototype;
  var objectToString2 = objectProto2.toString;
  var nativeMax2 = Math.max, nativeMin2 = Math.min;
  var now2 = function() {
    return root2.Date.now();
  };
  function debounce2(func, wait, options2) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    wait = toNumber2(wait) || 0;
    if (isObject2(options2)) {
      leading = !!options2.leading;
      maxing = "maxWait" in options2;
      maxWait = maxing ? nativeMax2(toNumber2(options2.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options2 ? !!options2.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
      return maxing ? nativeMin2(result2, maxWait - timeSinceLastInvoke) : result2;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now2();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush2() {
      return timerId === void 0 ? result : trailingEdge(now2());
    }
    function debounced() {
      var time2 = now2(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush2;
    return debounced;
  }
  function throttle(func, wait, options2) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    if (isObject2(options2)) {
      leading = "leading" in options2 ? !!options2.leading : leading;
      trailing = "trailing" in options2 ? !!options2.trailing : trailing;
    }
    return debounce2(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike2(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol2(value) {
    return typeof value == "symbol" || isObjectLike2(value) && objectToString2.call(value) == symbolTag2;
  }
  function toNumber2(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol2(value)) {
      return NAN2;
    }
    if (isObject2(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject2(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary2.test(value);
    return isBinary || reIsOctal2.test(value) ? freeParseInt2(value.slice(2), isBinary ? 2 : 8) : reIsBadHex2.test(value) ? NAN2 : +value;
  }
  lodash_throttle = throttle;
  return lodash_throttle;
}
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory(requireLodash_memoize(), requireLodash_throttle());
  })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__) {
    return (
      /******/
      function(modules2) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
          };
          modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules2;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name2, getter) {
          if (!__webpack_require__.o(exports2, name2)) {
            Object.defineProperty(exports2, name2, {
              /******/
              configurable: false,
              /******/
              enumerable: true,
              /******/
              get: getter
              /******/
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function getDefault() {
              return module2["default"];
            }
          ) : (
            /******/
            function getModuleExports() {
              return module2;
            }
          );
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object3, property) {
          return Object.prototype.hasOwnProperty.call(object3, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 12);
      }([
        /* 0 */
        /***/
        function(module2, exports2, __webpack_require__) {
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.filter(function(src2) {
              return src2 != null;
            }).forEach(function(src2) {
              Object.keys(src2).forEach(function(k2) {
                return tgt[k2] = src2[k2];
              });
            });
            return tgt;
          };
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var Edgehandles = __webpack_require__(10);
          var assign5 = __webpack_require__(0);
          module2.exports = function(options2) {
            var cy2 = this;
            return new Edgehandles(assign5({ cy: cy2 }, options2));
          };
        },
        /* 2 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function disableGestures() {
            this.saveGestureState();
            this.cy.zoomingEnabled(false).panningEnabled(false).boxSelectionEnabled(false);
            if (this.options.disableBrowserGestures) {
              var wlOpts = this.windowListenerOptions;
              window.addEventListener("touchstart", this.preventDefault, wlOpts);
              window.addEventListener("touchmove", this.preventDefault, wlOpts);
              window.addEventListener("wheel", this.preventDefault, wlOpts);
            }
            return this;
          }
          function resetGestures() {
            this.cy.zoomingEnabled(this.lastZoomingEnabled).panningEnabled(this.lastPanningEnabled).boxSelectionEnabled(this.lastBoxSelectionEnabled);
            if (this.options.disableBrowserGestures) {
              var wlOpts = this.windowListenerOptions;
              window.removeEventListener("touchstart", this.preventDefault, wlOpts);
              window.removeEventListener("touchmove", this.preventDefault, wlOpts);
              window.removeEventListener("wheel", this.preventDefault, wlOpts);
            }
            return this;
          }
          function saveGestureState() {
            var cy2 = this.cy;
            this.lastPanningEnabled = cy2.panningEnabled();
            this.lastZoomingEnabled = cy2.zoomingEnabled();
            this.lastBoxSelectionEnabled = cy2.boxSelectionEnabled();
            return this;
          }
          module2.exports = { disableGestures, resetGestures, saveGestureState };
        },
        /* 3 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function addCytoscapeListeners() {
            var _this = this;
            var cy2 = this.cy, options2 = this.options;
            this.addListener(cy2, "drag", function() {
              return _this.grabbingNode = true;
            });
            this.addListener(cy2, "free", function() {
              return _this.grabbingNode = false;
            });
            this.addListener(cy2, "tapstart", "node", function(e2) {
              var node = e2.target;
              if (_this.drawMode) {
                _this.start(node);
              }
            });
            this.addListener(cy2, "tapdrag", function(e2) {
              _this.update(e2.position);
            });
            this.addListener(cy2, "tapdragover", "node", function(e2) {
              if (options2.snap)
                ;
              else {
                _this.preview(e2.target);
              }
            });
            this.addListener(cy2, "tapdragout", "node", function(e2) {
              if (options2.snap)
                ;
              else {
                _this.unpreview(e2.target);
              }
            });
            this.addListener(cy2, "tapend", function() {
              _this.stop();
            });
            return this;
          }
          module2.exports = { addCytoscapeListeners };
        },
        /* 4 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var defaults3 = {
            canConnect: function canConnect(sourceNode, targetNode) {
              return !sourceNode.same(targetNode);
            },
            edgeParams: function edgeParams(sourceNode, targetNode) {
              return {};
            },
            hoverDelay: 150,
            // time spent hovering over a target node before it is considered selected
            snap: true,
            // when enabled, the edge can be drawn by just moving close to a target node (can be confusing on compound graphs)
            snapThreshold: 50,
            // the target node must be less than or equal to this many pixels away from the cursor/finger
            snapFrequency: 15,
            // the number of times per second (Hz) that snap checks done (lower is less expensive)
            noEdgeEventsInDraw: true,
            // set events:no to edges during draws, prevents mouseouts on compounds
            disableBrowserGestures: true
            // during an edge drawing gesture, disable browser gestures such as two-finger trackpad swipe and pinch-to-zoom
          };
          module2.exports = defaults3;
        },
        /* 5 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function toggleDrawMode(bool) {
            var cy2 = this.cy;
            this.drawMode = bool != null ? bool : !this.drawMode;
            if (this.drawMode) {
              this.prevUngrabifyState = cy2.autoungrabify();
              cy2.autoungrabify(true);
              this.emit("drawon");
            } else {
              cy2.autoungrabify(this.prevUngrabifyState);
              this.emit("drawoff");
            }
            return this;
          }
          function enableDrawMode() {
            return this.toggleDrawMode(true);
          }
          function disableDrawMode() {
            return this.toggleDrawMode(false);
          }
          module2.exports = { toggleDrawMode, enableDrawMode, disableDrawMode };
        },
        /* 6 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var assign5 = __webpack_require__(0);
          var isString = function isString2(x2) {
            return (typeof x2 === "undefined" ? "undefined" : _typeof2(x2)) === _typeof2("");
          };
          var isArray2 = function isArray3(x2) {
            return (typeof x2 === "undefined" ? "undefined" : _typeof2(x2)) === _typeof2([]) && x2.length != null;
          };
          function getEleJson(overrides, params, addedClasses) {
            var json3 = {};
            assign5(json3, params, overrides);
            assign5(json3.data, params.data, overrides.data);
            if (isString(params.classes)) {
              json3.classes = params.classes + " " + addedClasses;
            } else if (isArray2(params.classes)) {
              json3.classes = params.classes.join(" ") + " " + addedClasses;
            } else {
              json3.classes = addedClasses;
            }
            return json3;
          }
          function makeEdges() {
            var preview = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var cy2 = this.cy;
            this.options;
            var presumptiveTargets = this.presumptiveTargets, previewEles = this.previewEles, active = this.active;
            var source = this.sourceNode;
            var target = this.targetNode;
            var classes2 = preview ? "eh-preview" : "";
            var added = cy2.collection();
            var canConnect = this.canConnect(target);
            if (!active) {
              return;
            }
            if (!canConnect) {
              return;
            }
            if (!target || target.size() === 0) {
              previewEles.remove();
              this.emit("cancel", this.mp(), source, presumptiveTargets);
              return;
            }
            if (!preview) {
              previewEles.removeClass("eh-preview").style("events", "");
              this.emit("complete", this.mp(), source, target, previewEles);
              return;
            }
            var source2target = cy2.add(getEleJson({
              group: "edges",
              data: {
                source: source.id(),
                target: target.id()
              }
            }, this.edgeParams(target), classes2));
            added = added.merge(source2target);
            if (preview) {
              this.previewEles = added;
              added.style("events", "no");
            } else {
              added.style("events", "");
              this.emit("complete", this.mp(), source, target, added);
            }
            return this;
          }
          function makePreview() {
            this.makeEdges(true);
            return this;
          }
          function previewShown() {
            return this.previewEles.nonempty() && this.previewEles.inside();
          }
          function removePreview() {
            if (this.previewShown()) {
              this.previewEles.remove();
            }
            return this;
          }
          function updateEdge() {
            var _this = this;
            var sourceNode = this.sourceNode, ghostNode = this.ghostNode, cy2 = this.cy, mx = this.mx, my = this.my;
            var x2 = mx;
            var y2 = my;
            var ghostEdge = void 0, ghostEles = void 0;
            if (!sourceNode) {
              return;
            }
            if (!ghostNode || ghostNode.length === 0 || ghostNode.removed()) {
              ghostEles = this.ghostEles = cy2.collection();
              cy2.batch(function() {
                ghostNode = _this.ghostNode = cy2.add({
                  group: "nodes",
                  classes: "eh-ghost eh-ghost-node",
                  position: {
                    x: 0,
                    y: 0
                  }
                });
                ghostNode.style({
                  "background-color": "blue",
                  "width": 1e-4,
                  "height": 1e-4,
                  "opacity": 0,
                  "events": "no"
                });
                var ghostEdgeParams = {};
                ghostEdge = cy2.add(assign5({}, ghostEdgeParams, {
                  group: "edges",
                  data: assign5({}, ghostEdgeParams.data, {
                    source: sourceNode.id(),
                    target: ghostNode.id()
                  }),
                  classes: "eh-ghost eh-ghost-edge"
                }));
                ghostEdge.style({
                  "events": "no"
                });
              });
              ghostEles.merge(ghostNode).merge(ghostEdge);
            }
            ghostNode.position({ x: x2, y: y2 });
            return this;
          }
          module2.exports = {
            makeEdges,
            makePreview,
            removePreview,
            previewShown,
            updateEdge
          };
        },
        /* 7 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function disableEdgeEvents() {
            if (this.options.noEdgeEventsInDraw) {
              this.cy.edges().style("events", "no");
            }
            return this;
          }
          function enableEdgeEvents() {
            if (this.options.noEdgeEventsInDraw) {
              this.cy.edges().style("events", "");
            }
            return this;
          }
          module2.exports = { disableEdgeEvents, enableEdgeEvents };
        },
        /* 8 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function enable() {
            this.enabled = true;
            this.emit("enable");
            return this;
          }
          function disable() {
            this.enabled = false;
            this.emit("disable");
            return this;
          }
          module2.exports = { enable, disable };
        },
        /* 9 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var memoize3 = __webpack_require__(13);
          var sqrt22 = Math.sqrt(2);
          function canStartOn(node) {
            var previewEles = this.previewEles, ghostEles = this.ghostEles;
            var isPreview = function isPreview2(el) {
              return previewEles.anySame(el);
            };
            var isGhost = function isGhost2(el) {
              return ghostEles.anySame(el);
            };
            var isTemp = function isTemp2(el) {
              return isPreview(el) || isGhost(el);
            };
            var enabled = this.enabled, active = this.active, grabbingNode = this.grabbingNode;
            return enabled && !active && !grabbingNode && node != null && node.nonempty() && !isTemp(node);
          }
          function canStartDrawModeOn(node) {
            return this.canStartOn(node) && this.drawMode;
          }
          function canStartNonDrawModeOn(node) {
            return this.canStartOn(node) && !this.drawMode;
          }
          function start(node) {
            var _this = this;
            if (!this.canStartOn(node)) {
              return;
            }
            this.active = true;
            this.sourceNode = node;
            this.sourceNode.addClass("eh-source");
            this.disableGestures();
            this.disableEdgeEvents();
            var getId = function getId2(n2) {
              return n2.id();
            };
            this.canConnect = memoize3(function(target) {
              return _this.options.canConnect(_this.sourceNode, target);
            }, getId);
            this.edgeParams = memoize3(function(target) {
              return _this.options.edgeParams(_this.sourceNode, target);
            }, getId);
            this.emit("start", this.hp(), node);
          }
          function update2(pos) {
            if (!this.active) {
              return;
            }
            var p2 = pos;
            this.mx = p2.x;
            this.my = p2.y;
            this.updateEdge();
            this.throttledSnap();
            return this;
          }
          function snap() {
            if (!this.active || !this.options.snap) {
              return false;
            }
            var cy2 = this.cy;
            var tgt = this.targetNode;
            var threshold = this.options.snapThreshold;
            var mousePos = this.mp();
            var previewEles = this.previewEles, ghostNode = this.ghostNode;
            var radius = function radius2(n3) {
              return sqrt22 * Math.max(n3.outerWidth(), n3.outerHeight()) / 2;
            };
            var sqDist = function sqDist2(x1, y1, x2, y2) {
              var dx = x2 - x1;
              var dy = y2 - y1;
              return dx * dx + dy * dy;
            };
            var sqDistByPt = function sqDistByPt2(p1, p2) {
              return sqDist(p1.x, p1.y, p2.x, p2.y);
            };
            var nodeSqDist = function nodeSqDist2(n3) {
              return sqDistByPt(n3.position(), mousePos);
            };
            var sqThreshold = function sqThreshold2(n3) {
              var r2 = radius(n3);
              var t3 = r2 + threshold;
              return t3 * t3;
            };
            var isWithinThreshold = function isWithinThreshold2(n3) {
              return nodeSqDist(n3) <= sqThreshold(n3);
            };
            var bbSqDist = function bbSqDist2(n3) {
              var p2 = n3.position();
              var halfW = n3.outerWidth() / 2;
              var halfH = n3.outerHeight() / 2;
              var nx = p2.x;
              var ny = p2.y;
              var mx = mousePos.x;
              var my = mousePos.y;
              var x1 = nx - halfW;
              var x2 = nx + halfW;
              var y1 = ny - halfH;
              var y2 = ny + halfH;
              var insideXBounds = x1 <= mx && mx <= x2;
              var insideYBounds = y1 <= my && my <= y2;
              if (insideXBounds && insideYBounds) {
                return 0;
              } else if (insideXBounds) {
                var dy1 = my - y1;
                var dy2 = my - y2;
                return Math.min(dy1 * dy1, dy2 * dy2);
              } else if (insideYBounds) {
                var dx1 = mx - x1;
                var dx2 = mx - x2;
                return Math.min(dx1 * dx1, dx2 * dx2);
              } else if (mx < x1 && my < y1) {
                return sqDist(mx, my, x1, y1);
              } else if (mx > x2 && my < y1) {
                return sqDist(mx, my, x2, y1);
              } else if (mx < x1 && my > y2) {
                return sqDist(mx, my, x1, y2);
              } else {
                return sqDist(mx, my, x2, y2);
              }
            };
            var cmpBbSqDist = function cmpBbSqDist2(n1, n22) {
              return bbSqDist(n1) - bbSqDist(n22);
            };
            var cmp = cmpBbSqDist;
            var allowHoverDelay = false;
            var mouseIsInside = function mouseIsInside2(n3) {
              var mp = mousePos;
              var w2 = n3.outerWidth();
              var halfW = w2 / 2;
              var h2 = n3.outerHeight();
              var halfH = h2 / 2;
              var p2 = n3.position();
              var x1 = p2.x - halfW;
              var x2 = p2.x + halfW;
              var y1 = p2.y - halfH;
              var y2 = p2.y + halfH;
              return x1 <= mp.x && mp.x <= x2 && y1 <= mp.y && mp.y <= y2;
            };
            var isEhEle = function isEhEle2(n3) {
              return n3.same(previewEles) || n3.same(ghostNode);
            };
            var nodesByDist = cy2.nodes(function(n3) {
              return !isEhEle(n3) && isWithinThreshold(n3);
            }).sort(cmp);
            var snapped = false;
            if (tgt.nonempty() && !isWithinThreshold(tgt)) {
              this.unpreview(tgt);
            }
            for (var i2 = 0; i2 < nodesByDist.length; i2++) {
              var n2 = nodesByDist[i2];
              if (n2.isParent() && mouseIsInside(n2)) {
                continue;
              }
              if (n2.isChild() && !mouseIsInside(n2.parent())) {
                continue;
              }
              if (n2.same(tgt) || this.preview(n2, allowHoverDelay)) {
                snapped = true;
                break;
              }
            }
            return snapped;
          }
          function preview(target) {
            var _this2 = this;
            var allowHoverDelay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var options2 = this.options, sourceNode = this.sourceNode, ghostNode = this.ghostNode, ghostEles = this.ghostEles, presumptiveTargets = this.presumptiveTargets, previewEles = this.previewEles, active = this.active;
            var source = sourceNode;
            var isGhost = target.same(ghostNode);
            var noEdge = !this.canConnect(target);
            var isExistingTgt = target.same(this.targetNode);
            if (!active || isGhost || noEdge || isExistingTgt) {
              return false;
            }
            if (this.targetNode.nonempty()) {
              this.unpreview(this.targetNode);
            }
            clearTimeout(this.previewTimeout);
            var applyPreview = function applyPreview2() {
              _this2.targetNode = target;
              presumptiveTargets.merge(target);
              target.addClass("eh-presumptive-target");
              target.addClass("eh-target");
              _this2.emit("hoverover", _this2.mp(), source, target);
              target.addClass("eh-preview");
              ghostEles.addClass("eh-preview-active");
              sourceNode.addClass("eh-preview-active");
              target.addClass("eh-preview-active");
              _this2.makePreview();
              _this2.emit("previewon", _this2.mp(), source, target, previewEles);
            };
            if (allowHoverDelay && options2.hoverDelay > 0) {
              this.previewTimeout = setTimeout(applyPreview, options2.hoverDelay);
            } else {
              applyPreview();
            }
            return true;
          }
          function unpreview(target) {
            if (!this.active) {
              return;
            }
            var previewTimeout = this.previewTimeout, sourceNode = this.sourceNode, previewEles = this.previewEles, ghostEles = this.ghostEles, cy2 = this.cy;
            clearTimeout(previewTimeout);
            this.previewTimeout = null;
            var source = sourceNode;
            target.removeClass("eh-preview eh-target eh-presumptive-target eh-preview-active");
            ghostEles.removeClass("eh-preview-active");
            sourceNode.removeClass("eh-preview-active");
            this.targetNode = cy2.collection();
            this.removePreview(source, target);
            this.emit("hoverout", this.mp(), source, target);
            this.emit("previewoff", this.mp(), source, target, previewEles);
            return this;
          }
          function stop5() {
            if (!this.active) {
              return;
            }
            var sourceNode = this.sourceNode, targetNode = this.targetNode, ghostEles = this.ghostEles, presumptiveTargets = this.presumptiveTargets;
            clearTimeout(this.previewTimeout);
            sourceNode.removeClass("eh-source eh-preview-active");
            targetNode.removeClass("eh-target eh-preview eh-hover eh-preview-active");
            presumptiveTargets.removeClass("eh-presumptive-target");
            this.makeEdges();
            ghostEles.remove();
            this.clearCollections();
            this.resetGestures();
            this.enableEdgeEvents();
            this.active = false;
            this.emit("stop", this.mp(), sourceNode);
            return this;
          }
          module2.exports = {
            start,
            update: update2,
            preview,
            unpreview,
            stop: stop5,
            snap,
            canStartOn,
            canStartDrawModeOn,
            canStartNonDrawModeOn
          };
        },
        /* 10 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var defaults3 = __webpack_require__(4);
          var assign5 = __webpack_require__(0);
          var throttle = __webpack_require__(14);
          var cyGesturesToggle = __webpack_require__(2);
          var cyListeners = __webpack_require__(3);
          var drawMode = __webpack_require__(5);
          var drawing = __webpack_require__(6);
          var enabling = __webpack_require__(8);
          var gestureLifecycle = __webpack_require__(9);
          var listeners = __webpack_require__(11);
          var edgeEvents = __webpack_require__(7);
          function Edgehandles(options2) {
            var cy2 = options2.cy;
            this.cy = cy2;
            this.listeners = [];
            this.enabled = true;
            this.drawMode = false;
            this.active = false;
            this.grabbingNode = false;
            this.clearCollections();
            this.mx = 0;
            this.my = 0;
            this.options = assign5({}, defaults3, options2);
            this.saveGestureState();
            this.addListeners();
            this.throttledSnap = throttle(this.snap.bind(this), 1e3 / options2.snapFrequency);
            this.preventDefault = function(e2) {
              return e2.preventDefault();
            };
            this.canConnect = function() {
              return false;
            };
            var supportsPassive = false;
            try {
              var opts = Object.defineProperty({}, "passive", {
                get: function get2() {
                  supportsPassive = true;
                }
              });
              window.addEventListener("test", null, opts);
            } catch (err) {
            }
            if (supportsPassive) {
              this.windowListenerOptions = { capture: true, passive: false };
            } else {
              this.windowListenerOptions = true;
            }
          }
          var proto = Edgehandles.prototype = {};
          var extend2 = function extend3(obj) {
            return assign5(proto, obj);
          };
          proto.destroy = function() {
            this.removeListeners();
          };
          proto.setOptions = function(options2) {
            assign5(this.options, options2);
          };
          proto.mp = function() {
            return { x: this.mx, y: this.my };
          };
          proto.hp = function() {
            return { x: this.hx, y: this.hy };
          };
          proto.clearCollections = function() {
            var cy2 = this.cy;
            this.previewEles = cy2.collection();
            this.ghostEles = cy2.collection();
            this.ghostNode = cy2.collection();
            this.sourceNode = cy2.collection();
            this.targetNode = cy2.collection();
            this.presumptiveTargets = cy2.collection();
          };
          [cyGesturesToggle, cyListeners, drawMode, drawing, enabling, gestureLifecycle, listeners, edgeEvents].forEach(extend2);
          module2.exports = Edgehandles;
        },
        /* 11 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          function addListeners() {
            var _this = this;
            this.addCytoscapeListeners();
            this.addListener(this.cy, "destroy", function() {
              return _this.destroy();
            });
            return this;
          }
          function removeListeners() {
            for (var i2 = this.listeners.length - 1; i2 >= 0; i2--) {
              var l2 = this.listeners[i2];
              this.removeListener(l2.target, l2.event, l2.selector, l2.callback, l2.options);
            }
            return this;
          }
          function getListener(target, event3, selector, callback, options2) {
            if ((typeof selector === "undefined" ? "undefined" : _typeof2(selector)) !== _typeof2("")) {
              callback = selector;
              options2 = callback;
              selector = null;
            }
            if (options2 == null) {
              options2 = false;
            }
            return { target, event: event3, selector, callback, options: options2 };
          }
          function isDom(target) {
            return target instanceof Element;
          }
          function addListener(target, event3, selector, callback, options2) {
            var l2 = getListener(target, event3, selector, callback, options2);
            this.listeners.push(l2);
            if (isDom(l2.target)) {
              l2.target.addEventListener(l2.event, l2.callback, l2.options);
            } else {
              if (l2.selector) {
                l2.target.addListener(l2.event, l2.selector, l2.callback, l2.options);
              } else {
                l2.target.addListener(l2.event, l2.callback, l2.options);
              }
            }
            return this;
          }
          function removeListener3(target, event3, selector, callback, options2) {
            var l2 = getListener(target, event3, selector, callback, options2);
            for (var i2 = this.listeners.length - 1; i2 >= 0; i2--) {
              var l22 = this.listeners[i2];
              if (l2.target === l22.target && l2.event === l22.event && (l2.selector == null || l2.selector === l22.selector) && (l2.callback == null || l2.callback === l22.callback)) {
                this.listeners.splice(i2, 1);
                if (isDom(l2.target)) {
                  l2.target.removeEventListener(l2.event, l2.callback, l2.options);
                } else {
                  if (l2.selector) {
                    l2.target.removeListener(l2.event, l2.selector, l2.callback, l2.options);
                  } else {
                    l2.target.removeListener(l2.event, l2.callback, l2.options);
                  }
                }
                break;
              }
            }
            return this;
          }
          function emit3(type, position3) {
            var cy2 = this.cy;
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }
            cy2.emit({ type: "eh" + type, position: position3 }, args);
            return this;
          }
          module2.exports = { addListener, addListeners, removeListener: removeListener3, removeListeners, emit: emit3 };
        },
        /* 12 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var impl2 = __webpack_require__(1);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("core", "edgehandles", impl2);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        /* 13 */
        /***/
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_13__;
        },
        /* 14 */
        /***/
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_14__;
        }
        /******/
      ])
    );
  });
})(cytoscapeEdgehandles);
var cytoscapeEdgehandlesExports = cytoscapeEdgehandles.exports;
const edgehandles = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeEdgehandlesExports);
function instance$F($$self) {
  cytoscape$2.use(edgehandles);
  var cy2 = cytoscape$2(graphSettings);
  cy2.boxSelectionEnabled(true);
  cyStore.set(cy2);
  ehStore.set(cy2.edgehandles(ehSettings));
  return [];
}
class Init extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$F, null, safe_not_equal, {});
  }
}
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
const byteToHex = [];
for (let i2 = 0; i2 < 256; ++i2) {
  byteToHex.push((i2 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
const native = {
  randomUUID
};
function v4(options2, buf, offset) {
  if (native.randomUUID && !buf && !options2) {
    return native.randomUUID();
  }
  options2 = options2 || {};
  const rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
function tolavaan(mode) {
  var appState_local = get_store_value(appState);
  if (!appState_local.full) {
    return;
  }
  let cy2 = get_store_value(cyStore);
  const edges3 = cy2.edges();
  for (var i2 = 0; i2 < edges3.length; i2++) {
    edges3[i2].removeEstimates();
  }
  if (cy2.getUserEdges().length == 0) {
    cy2.getLavaanNodes().remove();
    cy2.getLavaanEdges().remove();
    return;
  }
  if (!appState_local.dataAvail && mode == "estimate") {
    setAlert("danger", "Model not send to lavaan because no data available");
    return;
  }
  let for_R = createSyntax(mode);
  Shiny.setInputValue("run-fromJavascript", JSON.stringify(for_R));
  Shiny.setInputValue("runCounter", Math.random());
  if (mode === "user model") {
    cy2.getLavaanModifiedEdges().forEach((existingEdge) => {
      existingEdge.freePara();
    });
  }
}
function containsObject(list2, obj) {
  for (let i2 = 0; i2 < list2.length; i2++) {
    if (list2[i2] === obj) {
      return true;
    }
  }
  return false;
}
function addTerms(node, edge) {
  let node_label;
  if (node == void 0) {
    node_label = "1";
  } else {
    node_label = node.getLabel();
  }
  let premultiplier = false;
  let formula;
  if (edge.isFixed() && !edge.isModifiedLavaan()) {
    formula = edge.getValue() + "*" + node_label;
    premultiplier = true;
  } else if (edge.isForceFree()) {
    formula = "NA*" + node_label;
    premultiplier = true;
  }
  if (edge.hasLabel()) {
    const label = edge.getLabel();
    if (!premultiplier) {
      premultiplier = true;
      formula = label + "*" + node_label;
    } else {
      formula += " + " + label + "*" + node_label;
    }
  } else {
    if (!premultiplier) {
      formula = node_label;
    }
  }
  return formula;
}
class DataForR {
  constructor(mode, R_script, lavOptions = null, syntax = null, fitCache2 = null, ordered_labels = null) {
    this.mode = mode;
    Object.assign(this, {
      model: {
        options: lavOptions,
        syntax,
        R_script,
        ordered_labels
      },
      forceUpdate: Math.random(),
      cache: fitCache2
    });
  }
}
function createSyntax(mode) {
  let cy2 = get_store_value(cyStore);
  let appSt = get_store_value(appState);
  let syntax = "";
  let R_script = "";
  R_script += "library(lavaan)\n";
  if (appSt.dataAvail) {
    R_script += `data <- read.csv("${appSt.loadedFileName}")
`;
  } else {
    R_script += "#make sure your data is loaded into the 'data' variable\n";
  }
  const latentNodes = cy2.getLatentNodes();
  let shown = false;
  for (let i2 = 0; i2 < latentNodes.length; i2++) {
    const latentNode = latentNodes[i2];
    let nodeNames = "";
    const connectedEdges = latentNode.connectedEdges(function(edge) {
      return edge.isDirected() && edge.source().id() == latentNode.id() && edge.target().isObserved();
    });
    if (connectedEdges.length > 0) {
      if (!shown) {
        syntax += "# measurement model\n";
        shown = true;
      }
      const xRange = Math.max(...connectedEdges.map((edge) => edge.target().position().x)) - Math.min(...connectedEdges.map((edge) => edge.target().position().x));
      const yRange = Math.max(...connectedEdges.map((edge) => edge.target().position().y)) - Math.min(...connectedEdges.map((edge) => edge.target().position().y));
      const sortBy = xRange >= yRange ? "x" : "y";
      const sortedIndices = connectedEdges.map((edge, index) => ({
        index,
        value: edge.target().position()[sortBy]
      })).sort((a2, b2) => a2.value - b2.value).map((item) => item.index);
      for (let j3 = 0; j3 < connectedEdges.length; j3++) {
        const node2 = connectedEdges[sortedIndices[j3]].target();
        if (j3 > 0) {
          nodeNames += " + ";
        }
        nodeNames += addTerms(node2, connectedEdges[sortedIndices[j3]]);
      }
      syntax += " " + latentNode.getLabel() + " =~ " + nodeNames + "\n";
    } else if (latentNode.connectedEdges(function(edge) {
      return edge.isUserAdded();
    }).length > 0) {
      if (!shown) {
        syntax += "# measurement model\n";
        shown = true;
      }
      syntax += " " + latentNode.getLabel() + " =~ 0\n";
    }
  }
  function regression_edge(edge) {
    let res = edge.isDirected() && !edge.source().isConstant() && !(edge.source().isLatent() && edge.target().isObserved()) && (edge.isUserAdded() || edge.isModifiedLavaan());
    return res;
  }
  let reg_edges = cy2.edges(regression_edge);
  let reg_nodes = [];
  for (let i2 = 0; i2 < reg_edges.length; i2++) {
    if (!containsObject(reg_nodes, reg_edges[i2].target())) {
      reg_nodes.push(reg_edges[i2].target());
    }
  }
  if (reg_nodes.length > 0) {
    syntax += "\n# regressions";
    for (let i2 = 0; i2 < reg_nodes.length; i2++) {
      const targetNode = reg_nodes[i2];
      const connectedEdges = targetNode.connectedEdges((edge) => regression_edge(edge) && edge.target().same(targetNode));
      if (connectedEdges.length > 0) {
        let nodeNames = "";
        for (var j2 = 0; j2 < connectedEdges.length; j2++) {
          var node = connectedEdges[j2].source();
          if (j2 > 0) {
            nodeNames += " + ";
          }
          nodeNames += addTerms(node, connectedEdges[j2]);
        }
        syntax += "\n " + targetNode.getLabel() + " ~ " + nodeNames;
      }
    }
  }
  let cov_edges = cy2.edges(function(edge) {
    return (edge.isUndirected() || edge.myIsLoop()) && (edge.isUserAdded() || edge.isModifiedLavaan());
  });
  if (cov_edges.length > 0) {
    syntax += "\n\n# residual (co)variances";
    for (let i2 = 0; i2 < cov_edges.length; i2++) {
      let node1 = cov_edges[i2].source().data("label");
      syntax += "\n " + node1 + " ~~ " + addTerms(cov_edges[i2].target(), cov_edges[i2]);
    }
  }
  const constant_nodes = cy2.nodes(function(node2) {
    return node2.isConstant();
  });
  for (let i2 = 0; i2 < constant_nodes.length; i2++) {
    const c_node = constant_nodes[i2];
    const connectedEdges = c_node.connectedEdges(function(edge) {
      return edge.isUserAdded();
    });
    if (connectedEdges.length > 0) {
      syntax += "\n# intercepts\n";
      for (var j2 = 0; j2 < connectedEdges.length; j2++) {
        var node = connectedEdges[j2].target();
        syntax += node.getLabel() + " ~ " + addTerms(void 0, connectedEdges[j2]) + "\n";
      }
    }
  }
  syntax = "'\n" + syntax + "'\n\n";
  function splitLongLines(inputStr, threshold = 60) {
    return inputStr.split("\n").map((line) => {
      if (line.includes("+") && line.length > threshold) {
        const parts = line.split(" + ");
        let newLines = [];
        let currentLine = parts[0];
        const initialIndent = line.match(/^\s*/)[0];
        const indentLength = currentLine.indexOf("~") + 1;
        for (let i2 = 1; i2 < parts.length; i2++) {
          if (currentLine.length + parts[i2].length + 3 > threshold) {
            newLines.push(currentLine + " + ");
            currentLine = initialIndent + " ".repeat(indentLength) + parts[i2];
          } else {
            currentLine += " + " + parts[i2];
          }
        }
        newLines.push(currentLine);
        return newLines.join("\n");
      }
      return line;
    }).join("\n");
  }
  syntax = splitLongLines(syntax);
  let ordered_nodes = cy2.nodes(function(node2) {
    return node2.isOrdered();
  });
  const ordered_labels = ordered_nodes.map((node2) => node2.getLabel());
  const lavOptions = produceLavaanOptions(ordered_labels);
  R_script += "model <-" + syntax;
  R_script += "result <- lavaan(model, data, " + lavOptions;
  const for_R = new DataForR(mode, R_script, lavOptions, syntax = syntax, get_store_value(fitCache), ordered_labels);
  return for_R;
}
function produceLavaanOptions(ordered_labels) {
  const modelOpt = get_store_value(modelOptions);
  const meanStruc = boolToString(modelOpt.meanStruc);
  const ovFree = boolToString(modelOpt.intOvFree);
  const lvFree = boolToString(modelOpt.intLvFree);
  let options2 = `meanstructure = ${meanStruc},
		 int.ov.free = ${ovFree}, int.lv.free = ${lvFree},
		 estimator = ${addQuotes(modelOpt.estimator)}, se = ${addQuotes(
    modelOpt.se
  )},
		 missing = ${addQuotes(modelOpt.missing)}, auto.fix.first = ${boolToString(
    modelOpt.fix_first
  )},
		 auto.fix.single = ${boolToString(
    modelOpt.fix_single
  )}, auto.var = ${boolToString(modelOpt.auto_var)},
		 auto.cov.lv.x = ${boolToString(
    modelOpt.auto_cov_lv_x
  )}, auto.cov.y = ${boolToString(modelOpt.auto_cov_y)},
  		 fixed.x = ${boolToString(modelOpt.fixed_x)}`;
  if (modelOpt.se == "boot") {
    const additional = `, bootstrap = ${modelOpt.n_boot})`;
    options2 = options2 + additional;
  } else {
    options2 = options2 + ")";
  }
  if (ordered_labels.length > 0) {
    const ordered_arg = 'c("' + ordered_labels.join('", "') + '")';
    options2 = `ordered = ${ordered_arg}, ${options2}`;
  }
  return options2;
}
function addQuotes(inputString) {
  return '"' + inputString + '"';
}
function boolToString(boolValue) {
  if (boolValue == true || boolValue == "true") {
    return "TRUE";
  } else if (boolValue == false || boolValue == "false") {
    return "FALSE";
  } else if (boolValue == "default") {
    return '"default"';
  }
  throw new Error("Should not happen");
}
let obCounter;
let latentCounter;
function resetCounters() {
  obCounter = 1;
  latentCounter = 1;
}
resetCounters();
function addNode(nodeType, position3, fromUser = true, customLabel = null) {
  let cy2 = get_store_value(cyStore);
  let nodeId = v4();
  let label;
  if (customLabel !== null) {
    if (cy2.nodes().find((node) => node.data().label === customLabel)) {
      setAlert("danger", "Node with the same label already exists.");
      return;
    }
    label = customLabel;
  } else {
    if (nodeType == OBSERVED) {
      label = "x" + obCounter++;
    } else if (nodeType == LATENT) {
      label = "f" + latentCounter++;
    } else {
      label = void 0;
    }
    if (cy2.nodes().find((node) => node.data().label === label)) {
      label = label + ".1";
    }
  }
  let urLocal = get_store_value(ur);
  if (position3) {
    urLocal.do("add", {
      group: "nodes",
      data: { id: nodeId, label },
      classes: [nodeType, CONTINOUS],
      renderedPosition: position3
    });
  } else {
    position3 = { x: Math.random() * 400 + 50, y: Math.random() * 400 + 50 };
    cy2.add({
      group: "nodes",
      data: { id: nodeId, label },
      classes: [nodeType, CONTINOUS],
      renderedPosition: position3
    });
  }
  if (fromUser) {
    tolavaan(get_store_value(modelOptions).mode);
  }
  return nodeId;
}
function addEdge(source, target, directed = true, fixed = false, fixedValue = null, fromUser = true) {
  let cy2 = get_store_value(cyStore);
  let edgeId = v4();
  let edge = cy2.add({
    group: "edges",
    data: {
      id: edgeId,
      source,
      target,
      value: fixed ? fixedValue : void 0
      // Added fixedValue as input
    },
    classes: `${directed ? DIRECTED : UNDIRECTED} ${fromUser ? FROM_USER : FROM_LAV} ${fixed ? FIXED : FREE} ${NOT_LABEL}`
  });
  return edge;
}
function checkNodeLoop(nodeID) {
  const selfLoop = getSelfLoop(nodeID);
  if (selfLoop != null) {
    const edgePostions = getEdgePositions(nodeID);
    const angles = getOccupiedAngles(edgePostions);
    let goalAngle = getBestFreeAngle(angles);
    goalAngle = checkDefaultsFree(goalAngle, angles);
    selfLoop.data("loop-direction", `${goalAngle}deg`);
  }
}
function checkDefaultsFree(goalAngle, angles) {
  const defaultAngles = [0, 180, 90, 270];
  const minDist = 35;
  const sortedDefaultAngles = defaultAngles.sort((a2, b2) => {
    const diffA = Math.min(
      Math.abs(a2 - goalAngle),
      360 - Math.abs(a2 - goalAngle)
    );
    const diffB = Math.min(
      Math.abs(b2 - goalAngle),
      360 - Math.abs(b2 - goalAngle)
    );
    return diffA - diffB;
  });
  const priorityGroups = [[0, 180], [90, 270]];
  const sortedByPriority = priorityGroups.flatMap(
    (group2) => sortedDefaultAngles.filter((angle) => group2.includes(angle))
  );
  for (const defaultAngle of sortedByPriority) {
    const isFree = !angles.some((angle) => {
      const diff2 = Math.abs(defaultAngle - angle);
      return Math.min(diff2, 360 - diff2) <= minDist;
    });
    if (isFree) {
      return defaultAngle;
    }
  }
  return goalAngle;
}
function getEdgePositions(nodeID) {
  const node = cy.getElementById(nodeID);
  if (node.length === 0) {
    console.error(`Node with ID ${nodeID} does not exist.`);
    return;
  }
  let edgePostions = [];
  node.connectedEdges().forEach((edge) => {
    const source = edge.source();
    const target = edge.target();
    let toAdd;
    if (source.id() !== node.id() || target.id() !== node.id()) {
      if (source.id() === node.id()) {
        toAdd = elementWiseSubtract(edge.sourceEndpoint(), node.position());
      } else {
        toAdd = elementWiseSubtract(edge.targetEndpoint(), node.position());
      }
      edgePostions.push(toAdd);
    }
  });
  return edgePostions;
}
function elementWiseSubtract(obj1, obj2) {
  return Object.keys(obj1).reduce((acc, key) => {
    if (obj2.hasOwnProperty(key)) {
      acc[key] = obj1[key] - obj2[key];
    } else {
      throw new Error(`Key ${key} not found in second object`);
    }
    return acc;
  }, {});
}
function getOccupiedAngles(edgePostions) {
  let angles = [];
  edgePostions.forEach((position3) => {
    angles.push(getAngleFromPos(position3));
  });
  return angles;
}
function getAngleFromPos(position3) {
  let angle = Math.atan2(position3.y, position3.x) * 180 / Math.PI;
  angle = (angle + 90) % 360;
  return angle;
}
function getBestFreeAngle(angles) {
  let maxDistance = -1;
  let furthestDegree = null;
  for (let i2 = 0; i2 <= 360; i2++) {
    let minDistance = Infinity;
    for (let j2 = 0; j2 < angles.length; j2++) {
      let d2 = Math.abs(angles[j2] - i2);
      d2 = Math.min(d2, 360 - d2);
      minDistance = Math.min(minDistance, d2);
    }
    if (minDistance > maxDistance) {
      maxDistance = minDistance;
      furthestDegree = i2;
    }
  }
  return furthestDegree;
}
function getSelfLoop(nodeId, angle) {
  var node = cy.getElementById(nodeId);
  var loopEdge = null;
  node.connectedEdges().forEach(function(edge) {
    var source = edge.source();
    var target = edge.target();
    if (source.id() === nodeId && target.id() === nodeId) {
      loopEdge = edge;
      return;
    }
  });
  if (loopEdge !== null && node.connectedEdges().length > 1 && !loopEdge.hasClass("fixDeg")) {
    return loopEdge;
  } else {
    return null;
  }
}
const MountGraph_svelte_svelte_type_style_lang = "";
function create_fragment$q(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element$1("div");
      attr(div, "id", "cy");
      attr(div, "class", "graph svelte-11pj9ut");
      set_style(
        div,
        "flex-basis",
        /*$appState*/
        ctx[1].full ? "70%" : "100%"
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      ctx[6](div);
      if (!mounted) {
        dispose = [
          listen(
            div,
            "mouseover",
            /*handleMouseOver*/
            ctx[2]
          ),
          listen(
            div,
            "mouseout",
            /*handleMouseOut*/
            ctx[3]
          ),
          listen(
            div,
            "mousemove",
            /*handleMousemove*/
            ctx[4]
          ),
          listen(
            div,
            "drop",
            /*handleCreateNode*/
            ctx[5]
          ),
          listen(div, "dragover", handleDragOver)
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$appState*/
      2) {
        set_style(
          div,
          "flex-basis",
          /*$appState*/
          ctx2[1].full ? "70%" : "100%"
        );
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(div);
      ctx[6](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function handleDragOver(event3) {
  event3.preventDefault();
}
function vectorAngleDegrees(x2, y2) {
  let angle = Math.atan2(x2, -y2) * (180 / Math.PI);
  if (angle < 0)
    angle += 360;
  return angle;
}
function instance$E($$self, $$props, $$invalidate) {
  let $ur;
  let $appState;
  let $modelOptions;
  component_subscribe($$self, ur, ($$value) => $$invalidate(12, $ur = $$value));
  component_subscribe($$self, appState, ($$value) => $$invalidate(1, $appState = $$value));
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(13, $modelOptions = $$value));
  let cy2 = get_store_value(cyStore);
  let eh = get_store_value(ehStore);
  let cyContainer;
  let m2 = { x: 0, y: 0 };
  onMount(() => {
    cy2.mount(cyContainer);
  });
  function handleKeyDown(event3) {
    set_store_value(appState, $appState.buttonDown = true, $appState);
    if (event3.key === "Alt" || event3.key === " " || event3.key.toLowerCase() === "x") {
      eh.enableDrawMode();
      if (event3.key === "Alt") {
        set_store_value(appState, $appState.drawing = "undirected", $appState);
      } else {
        set_store_value(appState, $appState.drawing = "directed", $appState);
      }
    }
    if (event3.key === "Backspace") {
      let selectedElements = cy2.$(":selected");
      if (selectedElements.length > 0) {
        $ur.do("remove", selectedElements);
        tolavaan($modelOptions.mode);
      }
      set_store_value(appState, $appState.buttonDown = false, $appState);
    }
    if (["l", "o", "c"].includes(event3.key.toLowerCase())) {
      let nodeType;
      switch (event3.key.toLowerCase()) {
        case "l":
          nodeType = LATENT;
          break;
        case "o":
          nodeType = OBSERVED;
          break;
        case "c":
          nodeType = CONSTANT;
          break;
      }
      addNode(nodeType, { ...m2 });
      set_store_value(appState, $appState.buttonDown = false, $appState);
    }
    set_store_value(appState, $appState.buttonDown = false, $appState);
  }
  function makeNodesGrabbable() {
    cy2.autoungrabify(false);
    cy2.nodes().grabify();
  }
  function handleKeyUp(event3) {
    if (event3.key === "Alt" || event3.key === " " || event3.key.toLowerCase() === "x") {
      eh.disableDrawMode();
      set_store_value(appState, $appState.drawing = "none", $appState);
      makeNodesGrabbable();
    }
  }
  function handleMouseOver() {
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
  }
  function handleMouseOut() {
    document.removeEventListener("keydown", handleKeyDown, false);
    document.removeEventListener("keyup", handleKeyUp, false);
  }
  function handleMousemove(event3) {
    m2.x = event3.offsetX;
    m2.y = event3.offsetY;
  }
  cy2.on("ehcomplete", (event3, sourceNode, targetNode, addedEdge) => {
    const edge = addedEdge;
    const sourceNodeId = sourceNode.id();
    const targetNodeId = targetNode.id();
    edge.remove();
    edge.init();
    if (sourceNodeId !== targetNodeId) {
      if ($appState.drawing === "undirected") {
        edge.setUndirected();
      } else {
        edge.setDirected();
      }
      checkNodeLoop(sourceNodeId);
      checkNodeLoop(targetNodeId);
    } else {
      edge.makeLoop();
      checkNodeLoop(targetNodeId);
    }
    if ((edge.isUndirected() || edge.myIsLoop()) && (sourceNode.isConstant() || targetNode.isConstant())) {
      return;
    }
    if (edge.isDirected() && targetNode.isConstant()) {
      return;
    }
    if (edge.isDirected() && sourceNode.isConstant()) {
      const conConstant = targetNode.connectedEdges((edge_local) => edge_local.isUserAdded() && edge_local.source().isConstant());
      if (conConstant.length > 1) {
        return;
      }
    }
    if (edge.isDirected() && sourceNode.isConstant()) {
      edge.makeMeanEdge();
    } else {
      edge.makeOtherEdge();
    }
    $ur.do("add", edge);
    tolavaan($modelOptions.mode);
  });
  function handleCreateNode(event3) {
    let offset = 0;
    const gap = 100;
    const ygap = gap * 2;
    event3.preventDefault();
    let pos = { x: event3.offsetX, y: event3.offsetY };
    function createBootPrompt(title, callback) {
      let inputOptions;
      if ($appState.dataAvail) {
        const observedNames = cy2.getObservedNodes().map((node) => node.data().label);
        const inputNames = $appState.columnNames.filter((x2) => !observedNames.includes(x2));
        inputOptions = inputNames.map((item) => {
          return { text: item, value: item };
        });
      } else {
        inputOptions = Array.from({ length: 100 }, (_2, i2) => `var${i2 + 1}`);
      }
      const promptSettings = {
        title,
        inputType: "select",
        multiple: true,
        value: "",
        inputOptions,
        callback
        // Include the callback function here
      };
      bootbox.prompt(promptSettings);
    }
    function showError2() {
      setAlert("danger", "Either no variable selected or at least one selected variable already is in the model.");
    }
    function checkValid(result) {
      return result && !cy2.nodes().some((node) => node.data().label === result);
    }
    if ($appState.dragged == "observed-with-name") {
      addNode(OBSERVED, pos, true, $appState.draggedName);
    } else if ($appState.dragged == "multiple") {
      createBootPrompt("Select Variables", function(result) {
        if (checkValid(result)) {
          const zoom2 = cy2.zoom();
          result.forEach((name2) => {
            addNode(OBSERVED, { x: pos.x + offset * zoom2, y: pos.y }, true, name2);
            offset += gap;
          });
        } else {
          showError2();
        }
      });
    } else if ($appState.dragged == "factor") {
      createBootPrompt("Select Variables", function(result) {
        if (checkValid(result)) {
          const zoom2 = cy2.zoom();
          const latentID = addNode(LATENT, {
            x: pos.x + gap * zoom2 * result.length / 2 - NODEWITH / 2 * zoom2,
            y: pos.y
          });
          result.forEach((name2) => {
            const itemItem = addNode(
              OBSERVED,
              {
                x: pos.x + offset * zoom2,
                y: pos.y + zoom2 * ygap
              },
              true,
              name2
            );
            offset += gap;
            addEdge(latentID, itemItem);
          });
          set_store_value(modelOptions, $modelOptions.fix_first = true, $modelOptions);
          set_store_value(modelOptions, $modelOptions.fix_single = true, $modelOptions);
          set_store_value(modelOptions, $modelOptions.auto_var = true, $modelOptions);
          set_store_value(modelOptions, $modelOptions.intOvFree = true, $modelOptions);
          set_store_value(modelOptions, $modelOptions.intLvFree = false, $modelOptions);
        } else {
          showError2();
        }
      });
    } else if ($appState.dragged == "growth") {
      let offset2 = 0;
      createBootPrompt("Select Time Points", function(result) {
        if (checkValid(result)) {
          const zoom2 = cy2.zoom();
          const constantID = addNode(
            CONSTANT,
            {
              x: pos.x + gap * zoom2 * result.length / 2 - NODEWITH / 2 * zoom2,
              y: pos.y
            },
            true
          );
          const interceptID = addNode(
            LATENT,
            {
              x: pos.x + NODEWITH / 2 * zoom2,
              y: pos.y + 1 * ygap * zoom2
            },
            true,
            "Intercept"
          );
          const slopeID = addNode(
            LATENT,
            {
              x: pos.x + gap * zoom2 * (result.length - 1) - NODEWITH / 2 * zoom2,
              y: pos.y + 1 * ygap * zoom2
            },
            true,
            "Slope"
          );
          addEdge(constantID, interceptID, true, false);
          addEdge(constantID, slopeID, true, false);
          let counter2 = 1;
          result.forEach((name2) => {
            const itemItem = addNode(
              OBSERVED,
              {
                x: pos.x + offset2 * zoom2,
                y: pos.y + 2 * ygap * zoom2
              },
              true,
              name2
            );
            offset2 += gap;
            addEdge(interceptID, itemItem, true, true, 1);
            if (counter2 != 1) {
              addEdge(slopeID, itemItem, true, true, counter2 - 1);
            }
            counter2 += 1;
          });
          set_store_value(modelOptions, $modelOptions.auto_var = true, $modelOptions);
          set_store_value(modelOptions, $modelOptions.intOvFree = false, $modelOptions);
          set_store_value(modelOptions, $modelOptions.intLvFree = true, $modelOptions);
        }
      });
    } else {
      addNode($appState.dragged, pos);
    }
    if ($appState.dragged == "multiple" || $appState.dragged == "factor" || $appState.dragged == "growth") {
      tolavaan($modelOptions.mode);
    }
    set_store_value(appState, $appState.dragged = null, $appState);
  }
  let isMouseDown = false;
  let currentEdge = null;
  let startDeg;
  cy2.on("mousedown", "edge.loop", function(event3) {
    isMouseDown = true;
    currentEdge = event3.target;
    currentEdge.unpanify();
    startDeg = currentEdge.style("loop-direction");
  });
  let angle;
  cy2.on("mousemove", function(event3) {
    if (!isMouseDown || !currentEdge)
      return;
    let sourceNode = currentEdge.source();
    let nodePosition = sourceNode.renderedPosition();
    angle = vectorAngleDegrees(m2.x - nodePosition.x, m2.y - nodePosition.y);
    const tolerance = 5;
    const targetAngles = [0, 90, 180, 270];
    for (let i2 = 0; i2 < targetAngles.length; i2++) {
      if (Math.abs(angle - targetAngles[i2]) <= tolerance) {
        angle = targetAngles[i2];
        break;
      }
    }
    currentEdge.data("loop-direction", `${angle}deg`);
  });
  window.addEventListener("mouseup", function() {
    if (isMouseDown) {
      isMouseDown = false;
      if (angle === void 0 || startDeg === `${angle}deg`)
        return;
      currentEdge.data("loop-direction", startDeg);
      currentEdge.addClass("fixDeg");
      $ur.do("style", {
        eles: currentEdge,
        style: { "loop-direction": `${angle}deg` }
      });
      currentEdge = null;
    }
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      cyContainer = $$value;
      $$invalidate(0, cyContainer);
    });
  }
  return [
    cyContainer,
    $appState,
    handleMouseOver,
    handleMouseOut,
    handleMousemove,
    handleCreateNode,
    div_binding
  ];
}
class MountGraph extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$E, create_fragment$q, safe_not_equal, {});
  }
}
function instance$D($$self, $$props, $$invalidate) {
  let $appState;
  let $modelOptions;
  component_subscribe($$self, appState, ($$value) => $$invalidate(2, $appState = $$value));
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(3, $modelOptions = $$value));
  let cy2 = get_store_value(cyStore);
  cy2.on("add", "node", function(event3) {
    const node = event3.target;
    if (node.isObserved()) {
      let columnNames = $appState.columnNames;
      if (columnNames && columnNames.includes(node.getLabel())) {
        node.link();
        setAlert("success", `Variable ${node.getLabel()} linked to data`);
      }
    }
    if ($appState.modelEmpty && cy2.edges().length > 0) {
      set_store_value(appState, $appState.modelEmpty = false, $appState);
    }
  });
  cy2.on("remove", "node", function(event3) {
    if (cy2.getUserEdges().length == 0) {
      set_store_value(appState, $appState.modelEmpty = true, $appState);
      Shiny.setInputValue("show_help", Math.random());
    }
    if (!$appState.loadingMode) {
      tolavaan($modelOptions.mode);
    }
  });
  cy2.on("remove", "edge", function(event3) {
    checkNodeLoop(event3.target.source().id());
    checkNodeLoop(event3.target.target().id());
  });
  cy2.on("add", "edge", function(event3) {
    set_store_value(appState, $appState.everEdge = true, $appState);
    if ($appState.modelEmpty && cy2.edges().length > 0) {
      set_store_value(appState, $appState.modelEmpty = false, $appState);
    }
    checkNodeLoop(event3.target.source().id());
    checkNodeLoop(event3.target.target().id());
  });
  cy2.on("position", "node", function(event3) {
    const node = event3.target;
    const connectedNodes = node.neighborhood().nodes();
    connectedNodes.forEach((connectedNode) => {
      const connectedNodeId = connectedNode.id();
      checkNodeLoop(connectedNodeId);
    });
  });
  let selectedEdge = null;
  let isDraggingLabel = false;
  cy2.on("mousedown", function(evt) {
    const convertPxToNumber = (str) => parseFloat(str.replace("px", ""));
    const mousePosition = evt.position;
    let nearestEdge = null;
    let minDistance = Infinity;
    const clickThreshold = 30;
    cy2.edges().forEach(function(edge) {
      if (edge.isDirected()) {
        const labelOffsetX = convertPxToNumber(edge.style("text-margin-x"));
        const labelOffsetY = convertPxToNumber(edge.style("text-margin-y"));
        const edgeMidpoint = edge.midpoint();
        const labelPosition = {
          x: edgeMidpoint.x + labelOffsetX,
          y: edgeMidpoint.y + labelOffsetY
        };
        const dx = Math.abs(mousePosition.x - labelPosition.x);
        const dy = mousePosition.y - labelPosition.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < minDistance && distance < clickThreshold) {
          nearestEdge = edge;
          minDistance = distance;
        }
      }
    });
    if (nearestEdge !== null) {
      selectedEdge = nearestEdge;
      isDraggingLabel = true;
      evt.preventDefault();
      nearestEdge.unpanify();
    }
  });
  cy2.on("mousemove", function(evt) {
    if (isDraggingLabel && selectedEdge) {
      const mousePosition = evt.position;
      const edgeMidpoint = selectedEdge.midpoint();
      const edgeSourcePos = selectedEdge.source().position();
      const edgeTargetPos = selectedEdge.target().position();
      const edgeVector = {
        x: edgeTargetPos.x - edgeSourcePos.x,
        y: edgeTargetPos.y - edgeSourcePos.y
      };
      const edgeVectorMagnitude = Math.sqrt(edgeVector.x ** 2 + edgeVector.y ** 2);
      const normalizedEdgeVector = {
        x: edgeVector.x / edgeVectorMagnitude,
        y: edgeVector.y / edgeVectorMagnitude
      };
      const midpointToMouseVector = {
        x: mousePosition.x - edgeMidpoint.x,
        y: mousePosition.y - edgeMidpoint.y
      };
      let displacementAlongEdge = midpointToMouseVector.x * normalizedEdgeVector.x + midpointToMouseVector.y * normalizedEdgeVector.y;
      const TargetMax = (edgeTargetPos.y - edgeMidpoint.y) / normalizedEdgeVector.y - 70;
      const SourceMin = (edgeSourcePos.y - edgeMidpoint.y) / normalizedEdgeVector.y + 70;
      let displacementAlongEdgeCut = Math.min(TargetMax, displacementAlongEdge);
      displacementAlongEdgeCut = Math.max(SourceMin, displacementAlongEdgeCut);
      const newMarginX = displacementAlongEdgeCut * normalizedEdgeVector.x;
      const newMarginY = displacementAlongEdgeCut * normalizedEdgeVector.y;
      selectedEdge.style({
        "text-margin-x": newMarginX,
        "text-margin-y": newMarginY
      });
    }
  });
  cy2.on("mouseup", function(evt) {
    isDraggingLabel = false;
    selectedEdge = null;
  });
  return [];
}
class OnEvents extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$D, null, safe_not_equal, {});
  }
}
const ToolbarTop_svelte_svelte_type_style_lang = "";
function get_each_context$5(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list2[i2];
  return child_ctx;
}
function create_if_block$6(ctx) {
  let div0;
  let t0;
  let div1;
  let button0;
  let t22;
  let button1;
  let t4;
  let button2;
  let t6;
  let div2;
  let t7;
  let ul;
  let mounted;
  let dispose;
  let each_value = (
    /*varNames*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$5(get_each_context$5(ctx, each_value, i2));
  }
  return {
    c() {
      div0 = element$1("div");
      t0 = space();
      div1 = element$1("div");
      button0 = element$1("button");
      button0.textContent = "Multiple Variables";
      t22 = space();
      button1 = element$1("button");
      button1.textContent = "Factor";
      t4 = space();
      button2 = element$1("button");
      button2.textContent = "Growth";
      t6 = space();
      div2 = element$1("div");
      t7 = space();
      ul = element$1("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      attr(div0, "class", "vertical-bar svelte-1xzjpi6");
      attr(button0, "class", "draggable-item svelte-1xzjpi6");
      attr(button0, "draggable", "true");
      attr(button1, "class", "draggable-item svelte-1xzjpi6");
      attr(button1, "draggable", "true");
      attr(button2, "class", "draggable-item svelte-1xzjpi6");
      attr(button2, "draggable", "true");
      attr(div1, "id", "model-buttons");
      attr(div1, "class", "svelte-1xzjpi6");
      attr(div2, "class", "vertical-bar svelte-1xzjpi6");
      attr(ul, "class", "draggable-list svelte-1xzjpi6");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      insert(target, t0, anchor);
      insert(target, div1, anchor);
      append(div1, button0);
      append(div1, t22);
      append(div1, button1);
      append(div1, t4);
      append(div1, button2);
      insert(target, t6, anchor);
      insert(target, div2, anchor);
      insert(target, t7, anchor);
      insert(target, ul, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul, null);
        }
      }
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "dragstart",
            /*dragstart_handler_3*/
            ctx[14]
          ),
          listen(
            button1,
            "dragstart",
            /*dragstart_handler_4*/
            ctx[15]
          ),
          listen(
            button2,
            "dragstart",
            /*dragstart_handler_5*/
            ctx[16]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*handleDragStart, varNames*/
      10) {
        each_value = /*varNames*/
        ctx2[1];
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$5(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(ul, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div0);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t6);
      if (detaching)
        detach(div2);
      if (detaching)
        detach(t7);
      if (detaching)
        detach(ul);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block$5(ctx) {
  let li;
  let t0_value = (
    /*name*/
    ctx[21] + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  function dragstart_handler_6(...args) {
    return (
      /*dragstart_handler_6*/
      ctx[17](
        /*name*/
        ctx[21],
        ...args
      )
    );
  }
  return {
    c() {
      li = element$1("li");
      t0 = text(t0_value);
      t1 = space();
      attr(li, "draggable", "true");
      attr(li, "class", "draggable-item svelte-1xzjpi6");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, t0);
      append(li, t1);
      if (!mounted) {
        dispose = listen(li, "dragstart", dragstart_handler_6);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*varNames*/
      2 && t0_value !== (t0_value = /*name*/
      ctx[21] + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching)
        detach(li);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$p(ctx) {
  let div5;
  let div4;
  let div3;
  let button0;
  let t0;
  let button1;
  let t1;
  let div0;
  let t22;
  let div1;
  let t3;
  let div2;
  let t4;
  let mounted;
  let dispose;
  let if_block = (
    /*$appState*/
    ctx[0].dataAvail && create_if_block$6(ctx)
  );
  return {
    c() {
      div5 = element$1("div");
      div4 = element$1("div");
      div3 = element$1("div");
      button0 = element$1("button");
      t0 = space();
      button1 = element$1("button");
      t1 = space();
      div0 = element$1("div");
      t22 = space();
      div1 = element$1("div");
      t3 = space();
      div2 = element$1("div");
      t4 = space();
      if (if_block)
        if_block.c();
      attr(button0, "class", "arrow-btn direct-arrow svelte-1xzjpi6");
      attr(button0, "title", "Draw Directed Arrows");
      toggle_class(
        button0,
        "active",
        /*$appState*/
        ctx[0].drawing === "directed"
      );
      attr(button1, "class", "arrow-btn undirected-arrow svelte-1xzjpi6");
      attr(button1, "title", "Draw Undirected Arrows");
      toggle_class(
        button1,
        "active",
        /*$appState*/
        ctx[0].drawing === "undirected"
      );
      attr(div0, "role", "button");
      attr(div0, "id", "add-manifest-variable");
      attr(div0, "title", "Create Observed Variable");
      attr(div0, "draggable", "true");
      attr(div0, "class", "variable-button svelte-1xzjpi6");
      attr(div0, "data-button-type", OBSERVED);
      attr(div0, "tabindex", "0");
      attr(div1, "role", "button");
      attr(div1, "tabindex", "0");
      attr(div1, "id", "add-latent-variable");
      attr(div1, "title", "Create Latent Variable");
      attr(div1, "draggable", "true");
      attr(div1, "class", "variable-button svelte-1xzjpi6");
      attr(div1, "data-button-type", LATENT);
      attr(div2, "role", "button");
      attr(div2, "tabindex", "0");
      attr(div2, "id", "add-constant-variable");
      attr(div2, "class", "variable-button svelte-1xzjpi6");
      attr(div2, "title", "Create Constant Variable");
      attr(div2, "data-button-type", "const");
      attr(div2, "draggable", "true");
      attr(div3, "id", "buttons");
      attr(div3, "class", "svelte-1xzjpi6");
      attr(div4, "id", "buttonCont");
      attr(div4, "class", "svelte-1xzjpi6");
      attr(div5, "class", "toolbox svelte-1xzjpi6");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div4);
      append(div4, div3);
      append(div3, button0);
      append(div3, t0);
      append(div3, button1);
      append(div3, t1);
      append(div3, div0);
      append(div3, t22);
      append(div3, div1);
      append(div3, t3);
      append(div3, div2);
      append(div5, t4);
      if (if_block)
        if_block.m(div5, null);
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[9]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[10]
          ),
          listen(
            div0,
            "dragstart",
            /*dragstart_handler*/
            ctx[11]
          ),
          listen(
            div1,
            "dragstart",
            /*dragstart_handler_1*/
            ctx[12]
          ),
          listen(
            div2,
            "dragstart",
            /*dragstart_handler_2*/
            ctx[13]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$appState*/
      1) {
        toggle_class(
          button0,
          "active",
          /*$appState*/
          ctx2[0].drawing === "directed"
        );
      }
      if (dirty & /*$appState*/
      1) {
        toggle_class(
          button1,
          "active",
          /*$appState*/
          ctx2[0].drawing === "undirected"
        );
      }
      if (
        /*$appState*/
        ctx2[0].dataAvail
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$6(ctx2);
          if_block.c();
          if_block.m(div5, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$C($$self, $$props, $$invalidate) {
  let $appState;
  let $cyStore;
  component_subscribe($$self, appState, ($$value) => $$invalidate(0, $appState = $$value));
  component_subscribe($$self, cyStore, ($$value) => $$invalidate(8, $cyStore = $$value));
  appState.subscribe((newState) => {
  });
  function dragStart(variable) {
    set_store_value(appState, $appState.dragged = variable, $appState);
  }
  function handleDragStart(event3, name2) {
    set_store_value(appState, $appState.dragged = "observed-with-name", $appState);
    set_store_value(appState, $appState.draggedName = name2, $appState);
  }
  function handleDragStartMultiple(event3) {
    set_store_value(appState, $appState.dragged = "multiple", $appState);
  }
  function handleDragStarFactor(event3) {
    set_store_value(appState, $appState.dragged = "factor", $appState);
  }
  function handleDragStarGrowth(event3) {
    set_store_value(appState, $appState.dragged = "growth", $appState);
  }
  let varNames;
  let eh = get_store_value(ehStore);
  function toggleArrowState(direction) {
    if ($appState.drawing === direction) {
      eh.disableDrawMode();
      set_store_value(appState, $appState.drawing = "none", $appState);
    } else {
      eh.enableDrawMode();
      set_store_value(appState, $appState.drawing = direction, $appState);
    }
  }
  const click_handler = () => {
    toggleArrowState("directed");
  };
  const click_handler_1 = () => {
    toggleArrowState("undirected");
  };
  const dragstart_handler = () => {
    event.dataTransfer.setData("text/plain", "node");
    dragStart(OBSERVED);
  };
  const dragstart_handler_1 = () => {
    dragStart(LATENT);
  };
  const dragstart_handler_2 = () => {
    dragStart(CONSTANT);
  };
  const dragstart_handler_3 = (event3) => handleDragStartMultiple();
  const dragstart_handler_4 = (event3) => handleDragStarFactor();
  const dragstart_handler_5 = (event3) => handleDragStarGrowth();
  const dragstart_handler_6 = (name2, event3) => handleDragStart(event3, name2);
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$cyStore, $appState*/
    257) {
      {
        if (typeof $cyStore.getObservedNodes === "function" && $appState.columnNames !== null) {
          const inModel = $cyStore.getObservedNodes().map((node) => {
            return node.data("label");
          });
          $$invalidate(1, varNames = $appState.columnNames.filter((name2) => {
            return !inModel.includes(name2);
          }));
        }
      }
    }
  };
  return [
    $appState,
    varNames,
    dragStart,
    handleDragStart,
    handleDragStartMultiple,
    handleDragStarFactor,
    handleDragStarGrowth,
    toggleArrowState,
    $cyStore,
    click_handler,
    click_handler_1,
    dragstart_handler,
    dragstart_handler_1,
    dragstart_handler_2,
    dragstart_handler_3,
    dragstart_handler_4,
    dragstart_handler_5,
    dragstart_handler_6
  ];
}
class ToolbarTop extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$C, create_fragment$p, safe_not_equal, {});
  }
}
const Navbar_svelte_svelte_type_style_lang = "";
function create_fragment$o(ctx) {
  let nav;
  let ul;
  let t3;
  let toolbartop;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  toolbartop = new ToolbarTop({});
  return {
    c() {
      nav = element$1("nav");
      ul = element$1("ul");
      if (default_slot)
        default_slot.c();
      t3 = space();
      create_component(toolbartop.$$.fragment);
      attr(ul, "class", "nav navbar-nav navbar-left");
      attr(nav, "class", "navbar navbar-default navbar-static-top navbar-left svelte-12n5yi9");
    },
    m(target, anchor) {
      insert(target, nav, anchor);
      append(nav, ul);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      append(nav, t3);
      mount_component(toolbartop, nav, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      transition_in(toolbartop.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      transition_out(toolbartop.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(nav);
      if (default_slot)
        default_slot.d(detaching);
      destroy_component(toolbartop);
    }
  };
}
function instance$B($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class Navbar extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$B, create_fragment$o, safe_not_equal, {});
  }
}
function applyLinkedClass(columnNames, apply2) {
  if (columnNames == null) {
    throw new Error("Columnnames may not be null.");
  }
  let cy2 = get_store_value(cyStore);
  const nodes3 = cy2.nodes(function(node) {
    return node.isObserved();
  });
  if (nodes3.length > 0) {
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      const node = nodes3[i2];
      const label = node.getLabel();
      if (columnNames.includes(label) && !node.isLinked()) {
        node.link();
      } else if (!columnNames.includes(label) && node.isLinked()) {
        node.unlink();
      }
    }
  }
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var jszip_min = { exports: {} };
/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/
(function(module, exports) {
  !function(e2) {
    module.exports = e2();
  }(function() {
    return function s2(a2, o2, h2) {
      function u2(r2, e3) {
        if (!o2[r2]) {
          if (!a2[r2]) {
            var t3 = "function" == typeof commonjsRequire && commonjsRequire;
            if (!e3 && t3)
              return t3(r2, true);
            if (l2)
              return l2(r2, true);
            var n2 = new Error("Cannot find module '" + r2 + "'");
            throw n2.code = "MODULE_NOT_FOUND", n2;
          }
          var i2 = o2[r2] = { exports: {} };
          a2[r2][0].call(i2.exports, function(e4) {
            var t4 = a2[r2][1][e4];
            return u2(t4 || e4);
          }, i2, i2.exports, s2, a2, o2, h2);
        }
        return o2[r2].exports;
      }
      for (var l2 = "function" == typeof commonjsRequire && commonjsRequire, e2 = 0; e2 < h2.length; e2++)
        u2(h2[e2]);
      return u2;
    }({ 1: [function(e2, t3, r2) {
      var d2 = e2("./utils"), c2 = e2("./support"), p2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      r2.encode = function(e3) {
        for (var t4, r3, n2, i2, s2, a2, o2, h2 = [], u2 = 0, l2 = e3.length, f2 = l2, c3 = "string" !== d2.getTypeOf(e3); u2 < e3.length; )
          f2 = l2 - u2, n2 = c3 ? (t4 = e3[u2++], r3 = u2 < l2 ? e3[u2++] : 0, u2 < l2 ? e3[u2++] : 0) : (t4 = e3.charCodeAt(u2++), r3 = u2 < l2 ? e3.charCodeAt(u2++) : 0, u2 < l2 ? e3.charCodeAt(u2++) : 0), i2 = t4 >> 2, s2 = (3 & t4) << 4 | r3 >> 4, a2 = 1 < f2 ? (15 & r3) << 2 | n2 >> 6 : 64, o2 = 2 < f2 ? 63 & n2 : 64, h2.push(p2.charAt(i2) + p2.charAt(s2) + p2.charAt(a2) + p2.charAt(o2));
        return h2.join("");
      }, r2.decode = function(e3) {
        var t4, r3, n2, i2, s2, a2, o2 = 0, h2 = 0, u2 = "data:";
        if (e3.substr(0, u2.length) === u2)
          throw new Error("Invalid base64 input, it looks like a data url.");
        var l2, f2 = 3 * (e3 = e3.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
        if (e3.charAt(e3.length - 1) === p2.charAt(64) && f2--, e3.charAt(e3.length - 2) === p2.charAt(64) && f2--, f2 % 1 != 0)
          throw new Error("Invalid base64 input, bad content length.");
        for (l2 = c2.uint8array ? new Uint8Array(0 | f2) : new Array(0 | f2); o2 < e3.length; )
          t4 = p2.indexOf(e3.charAt(o2++)) << 2 | (i2 = p2.indexOf(e3.charAt(o2++))) >> 4, r3 = (15 & i2) << 4 | (s2 = p2.indexOf(e3.charAt(o2++))) >> 2, n2 = (3 & s2) << 6 | (a2 = p2.indexOf(e3.charAt(o2++))), l2[h2++] = t4, 64 !== s2 && (l2[h2++] = r3), 64 !== a2 && (l2[h2++] = n2);
        return l2;
      };
    }, { "./support": 30, "./utils": 32 }], 2: [function(e2, t3, r2) {
      var n2 = e2("./external"), i2 = e2("./stream/DataWorker"), s2 = e2("./stream/Crc32Probe"), a2 = e2("./stream/DataLengthProbe");
      function o2(e3, t4, r3, n3, i3) {
        this.compressedSize = e3, this.uncompressedSize = t4, this.crc32 = r3, this.compression = n3, this.compressedContent = i3;
      }
      o2.prototype = { getContentWorker: function() {
        var e3 = new i2(n2.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a2("data_length")), t4 = this;
        return e3.on("end", function() {
          if (this.streamInfo.data_length !== t4.uncompressedSize)
            throw new Error("Bug : uncompressed data size mismatch");
        }), e3;
      }, getCompressedWorker: function() {
        return new i2(n2.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
      } }, o2.createWorkerFrom = function(e3, t4, r3) {
        return e3.pipe(new s2()).pipe(new a2("uncompressedSize")).pipe(t4.compressWorker(r3)).pipe(new a2("compressedSize")).withStreamInfo("compression", t4);
      }, t3.exports = o2;
    }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(e2, t3, r2) {
      var n2 = e2("./stream/GenericWorker");
      r2.STORE = { magic: "\0\0", compressWorker: function() {
        return new n2("STORE compression");
      }, uncompressWorker: function() {
        return new n2("STORE decompression");
      } }, r2.DEFLATE = e2("./flate");
    }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(e2, t3, r2) {
      var n2 = e2("./utils");
      var o2 = function() {
        for (var e3, t4 = [], r3 = 0; r3 < 256; r3++) {
          e3 = r3;
          for (var n3 = 0; n3 < 8; n3++)
            e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
          t4[r3] = e3;
        }
        return t4;
      }();
      t3.exports = function(e3, t4) {
        return void 0 !== e3 && e3.length ? "string" !== n2.getTypeOf(e3) ? function(e4, t5, r3, n3) {
          var i2 = o2, s2 = n3 + r3;
          e4 ^= -1;
          for (var a2 = n3; a2 < s2; a2++)
            e4 = e4 >>> 8 ^ i2[255 & (e4 ^ t5[a2])];
          return -1 ^ e4;
        }(0 | t4, e3, e3.length, 0) : function(e4, t5, r3, n3) {
          var i2 = o2, s2 = n3 + r3;
          e4 ^= -1;
          for (var a2 = n3; a2 < s2; a2++)
            e4 = e4 >>> 8 ^ i2[255 & (e4 ^ t5.charCodeAt(a2))];
          return -1 ^ e4;
        }(0 | t4, e3, e3.length, 0) : 0;
      };
    }, { "./utils": 32 }], 5: [function(e2, t3, r2) {
      r2.base64 = false, r2.binary = false, r2.dir = false, r2.createFolders = true, r2.date = null, r2.compression = null, r2.compressionOptions = null, r2.comment = null, r2.unixPermissions = null, r2.dosPermissions = null;
    }, {}], 6: [function(e2, t3, r2) {
      var n2 = null;
      n2 = "undefined" != typeof Promise ? Promise : e2("lie"), t3.exports = { Promise: n2 };
    }, { lie: 37 }], 7: [function(e2, t3, r2) {
      var n2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, i2 = e2("pako"), s2 = e2("./utils"), a2 = e2("./stream/GenericWorker"), o2 = n2 ? "uint8array" : "array";
      function h2(e3, t4) {
        a2.call(this, "FlateWorker/" + e3), this._pako = null, this._pakoAction = e3, this._pakoOptions = t4, this.meta = {};
      }
      r2.magic = "\b\0", s2.inherits(h2, a2), h2.prototype.processChunk = function(e3) {
        this.meta = e3.meta, null === this._pako && this._createPako(), this._pako.push(s2.transformTo(o2, e3.data), false);
      }, h2.prototype.flush = function() {
        a2.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
      }, h2.prototype.cleanUp = function() {
        a2.prototype.cleanUp.call(this), this._pako = null;
      }, h2.prototype._createPako = function() {
        this._pako = new i2[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
        var t4 = this;
        this._pako.onData = function(e3) {
          t4.push({ data: e3, meta: t4.meta });
        };
      }, r2.compressWorker = function(e3) {
        return new h2("Deflate", e3);
      }, r2.uncompressWorker = function() {
        return new h2("Inflate", {});
      };
    }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(e2, t3, r2) {
      function A2(e3, t4) {
        var r3, n3 = "";
        for (r3 = 0; r3 < t4; r3++)
          n3 += String.fromCharCode(255 & e3), e3 >>>= 8;
        return n3;
      }
      function n2(e3, t4, r3, n3, i3, s3) {
        var a2, o2, h2 = e3.file, u2 = e3.compression, l2 = s3 !== O2.utf8encode, f2 = I2.transformTo("string", s3(h2.name)), c2 = I2.transformTo("string", O2.utf8encode(h2.name)), d2 = h2.comment, p2 = I2.transformTo("string", s3(d2)), m2 = I2.transformTo("string", O2.utf8encode(d2)), _2 = c2.length !== h2.name.length, g2 = m2.length !== d2.length, b2 = "", v2 = "", y2 = "", w2 = h2.dir, k2 = h2.date, x2 = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
        t4 && !r3 || (x2.crc32 = e3.crc32, x2.compressedSize = e3.compressedSize, x2.uncompressedSize = e3.uncompressedSize);
        var S2 = 0;
        t4 && (S2 |= 8), l2 || !_2 && !g2 || (S2 |= 2048);
        var z2 = 0, C2 = 0;
        w2 && (z2 |= 16), "UNIX" === i3 ? (C2 = 798, z2 |= function(e4, t5) {
          var r4 = e4;
          return e4 || (r4 = t5 ? 16893 : 33204), (65535 & r4) << 16;
        }(h2.unixPermissions, w2)) : (C2 = 20, z2 |= function(e4) {
          return 63 & (e4 || 0);
        }(h2.dosPermissions)), a2 = k2.getUTCHours(), a2 <<= 6, a2 |= k2.getUTCMinutes(), a2 <<= 5, a2 |= k2.getUTCSeconds() / 2, o2 = k2.getUTCFullYear() - 1980, o2 <<= 4, o2 |= k2.getUTCMonth() + 1, o2 <<= 5, o2 |= k2.getUTCDate(), _2 && (v2 = A2(1, 1) + A2(B2(f2), 4) + c2, b2 += "up" + A2(v2.length, 2) + v2), g2 && (y2 = A2(1, 1) + A2(B2(p2), 4) + m2, b2 += "uc" + A2(y2.length, 2) + y2);
        var E2 = "";
        return E2 += "\n\0", E2 += A2(S2, 2), E2 += u2.magic, E2 += A2(a2, 2), E2 += A2(o2, 2), E2 += A2(x2.crc32, 4), E2 += A2(x2.compressedSize, 4), E2 += A2(x2.uncompressedSize, 4), E2 += A2(f2.length, 2), E2 += A2(b2.length, 2), { fileRecord: R2.LOCAL_FILE_HEADER + E2 + f2 + b2, dirRecord: R2.CENTRAL_FILE_HEADER + A2(C2, 2) + E2 + A2(p2.length, 2) + "\0\0\0\0" + A2(z2, 4) + A2(n3, 4) + f2 + b2 + p2 };
      }
      var I2 = e2("../utils"), i2 = e2("../stream/GenericWorker"), O2 = e2("../utf8"), B2 = e2("../crc32"), R2 = e2("../signature");
      function s2(e3, t4, r3, n3) {
        i2.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t4, this.zipPlatform = r3, this.encodeFileName = n3, this.streamFiles = e3, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
      }
      I2.inherits(s2, i2), s2.prototype.push = function(e3) {
        var t4 = e3.meta.percent || 0, r3 = this.entriesCount, n3 = this._sources.length;
        this.accumulate ? this.contentBuffer.push(e3) : (this.bytesWritten += e3.data.length, i2.prototype.push.call(this, { data: e3.data, meta: { currentFile: this.currentFile, percent: r3 ? (t4 + 100 * (r3 - n3 - 1)) / r3 : 100 } }));
      }, s2.prototype.openedSource = function(e3) {
        this.currentSourceOffset = this.bytesWritten, this.currentFile = e3.file.name;
        var t4 = this.streamFiles && !e3.file.dir;
        if (t4) {
          var r3 = n2(e3, t4, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
          this.push({ data: r3.fileRecord, meta: { percent: 0 } });
        } else
          this.accumulate = true;
      }, s2.prototype.closedSource = function(e3) {
        this.accumulate = false;
        var t4 = this.streamFiles && !e3.file.dir, r3 = n2(e3, t4, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
        if (this.dirRecords.push(r3.dirRecord), t4)
          this.push({ data: function(e4) {
            return R2.DATA_DESCRIPTOR + A2(e4.crc32, 4) + A2(e4.compressedSize, 4) + A2(e4.uncompressedSize, 4);
          }(e3), meta: { percent: 100 } });
        else
          for (this.push({ data: r3.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; )
            this.push(this.contentBuffer.shift());
        this.currentFile = null;
      }, s2.prototype.flush = function() {
        for (var e3 = this.bytesWritten, t4 = 0; t4 < this.dirRecords.length; t4++)
          this.push({ data: this.dirRecords[t4], meta: { percent: 100 } });
        var r3 = this.bytesWritten - e3, n3 = function(e4, t5, r4, n4, i3) {
          var s3 = I2.transformTo("string", i3(n4));
          return R2.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A2(e4, 2) + A2(e4, 2) + A2(t5, 4) + A2(r4, 4) + A2(s3.length, 2) + s3;
        }(this.dirRecords.length, r3, e3, this.zipComment, this.encodeFileName);
        this.push({ data: n3, meta: { percent: 100 } });
      }, s2.prototype.prepareNextSource = function() {
        this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
      }, s2.prototype.registerPrevious = function(e3) {
        this._sources.push(e3);
        var t4 = this;
        return e3.on("data", function(e4) {
          t4.processChunk(e4);
        }), e3.on("end", function() {
          t4.closedSource(t4.previous.streamInfo), t4._sources.length ? t4.prepareNextSource() : t4.end();
        }), e3.on("error", function(e4) {
          t4.error(e4);
        }), this;
      }, s2.prototype.resume = function() {
        return !!i2.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
      }, s2.prototype.error = function(e3) {
        var t4 = this._sources;
        if (!i2.prototype.error.call(this, e3))
          return false;
        for (var r3 = 0; r3 < t4.length; r3++)
          try {
            t4[r3].error(e3);
          } catch (e4) {
          }
        return true;
      }, s2.prototype.lock = function() {
        i2.prototype.lock.call(this);
        for (var e3 = this._sources, t4 = 0; t4 < e3.length; t4++)
          e3[t4].lock();
      }, t3.exports = s2;
    }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(e2, t3, r2) {
      var u2 = e2("../compressions"), n2 = e2("./ZipFileWorker");
      r2.generateWorker = function(e3, a2, t4) {
        var o2 = new n2(a2.streamFiles, t4, a2.platform, a2.encodeFileName), h2 = 0;
        try {
          e3.forEach(function(e4, t5) {
            h2++;
            var r3 = function(e5, t6) {
              var r4 = e5 || t6, n4 = u2[r4];
              if (!n4)
                throw new Error(r4 + " is not a valid compression method !");
              return n4;
            }(t5.options.compression, a2.compression), n3 = t5.options.compressionOptions || a2.compressionOptions || {}, i2 = t5.dir, s2 = t5.date;
            t5._compressWorker(r3, n3).withStreamInfo("file", { name: e4, dir: i2, date: s2, comment: t5.comment || "", unixPermissions: t5.unixPermissions, dosPermissions: t5.dosPermissions }).pipe(o2);
          }), o2.entriesCount = h2;
        } catch (e4) {
          o2.error(e4);
        }
        return o2;
      };
    }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(e2, t3, r2) {
      function n2() {
        if (!(this instanceof n2))
          return new n2();
        if (arguments.length)
          throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
        this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
          var e3 = new n2();
          for (var t4 in this)
            "function" != typeof this[t4] && (e3[t4] = this[t4]);
          return e3;
        };
      }
      (n2.prototype = e2("./object")).loadAsync = e2("./load"), n2.support = e2("./support"), n2.defaults = e2("./defaults"), n2.version = "3.10.1", n2.loadAsync = function(e3, t4) {
        return new n2().loadAsync(e3, t4);
      }, n2.external = e2("./external"), t3.exports = n2;
    }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(e2, t3, r2) {
      var u2 = e2("./utils"), i2 = e2("./external"), n2 = e2("./utf8"), s2 = e2("./zipEntries"), a2 = e2("./stream/Crc32Probe"), l2 = e2("./nodejsUtils");
      function f2(n3) {
        return new i2.Promise(function(e3, t4) {
          var r3 = n3.decompressed.getContentWorker().pipe(new a2());
          r3.on("error", function(e4) {
            t4(e4);
          }).on("end", function() {
            r3.streamInfo.crc32 !== n3.decompressed.crc32 ? t4(new Error("Corrupted zip : CRC32 mismatch")) : e3();
          }).resume();
        });
      }
      t3.exports = function(e3, o2) {
        var h2 = this;
        return o2 = u2.extend(o2 || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n2.utf8decode }), l2.isNode && l2.isStream(e3) ? i2.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u2.prepareContent("the loaded zip file", e3, true, o2.optimizedBinaryString, o2.base64).then(function(e4) {
          var t4 = new s2(o2);
          return t4.load(e4), t4;
        }).then(function(e4) {
          var t4 = [i2.Promise.resolve(e4)], r3 = e4.files;
          if (o2.checkCRC32)
            for (var n3 = 0; n3 < r3.length; n3++)
              t4.push(f2(r3[n3]));
          return i2.Promise.all(t4);
        }).then(function(e4) {
          for (var t4 = e4.shift(), r3 = t4.files, n3 = 0; n3 < r3.length; n3++) {
            var i3 = r3[n3], s3 = i3.fileNameStr, a3 = u2.resolve(i3.fileNameStr);
            h2.file(a3, i3.decompressed, { binary: true, optimizedBinaryString: true, date: i3.date, dir: i3.dir, comment: i3.fileCommentStr.length ? i3.fileCommentStr : null, unixPermissions: i3.unixPermissions, dosPermissions: i3.dosPermissions, createFolders: o2.createFolders }), i3.dir || (h2.file(a3).unsafeOriginalName = s3);
          }
          return t4.zipComment.length && (h2.comment = t4.zipComment), h2;
        });
      };
    }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(e2, t3, r2) {
      var n2 = e2("../utils"), i2 = e2("../stream/GenericWorker");
      function s2(e3, t4) {
        i2.call(this, "Nodejs stream input adapter for " + e3), this._upstreamEnded = false, this._bindStream(t4);
      }
      n2.inherits(s2, i2), s2.prototype._bindStream = function(e3) {
        var t4 = this;
        (this._stream = e3).pause(), e3.on("data", function(e4) {
          t4.push({ data: e4, meta: { percent: 0 } });
        }).on("error", function(e4) {
          t4.isPaused ? this.generatedError = e4 : t4.error(e4);
        }).on("end", function() {
          t4.isPaused ? t4._upstreamEnded = true : t4.end();
        });
      }, s2.prototype.pause = function() {
        return !!i2.prototype.pause.call(this) && (this._stream.pause(), true);
      }, s2.prototype.resume = function() {
        return !!i2.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
      }, t3.exports = s2;
    }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(e2, t3, r2) {
      var i2 = e2("readable-stream").Readable;
      function n2(e3, t4, r3) {
        i2.call(this, t4), this._helper = e3;
        var n3 = this;
        e3.on("data", function(e4, t5) {
          n3.push(e4) || n3._helper.pause(), r3 && r3(t5);
        }).on("error", function(e4) {
          n3.emit("error", e4);
        }).on("end", function() {
          n3.push(null);
        });
      }
      e2("../utils").inherits(n2, i2), n2.prototype._read = function() {
        this._helper.resume();
      }, t3.exports = n2;
    }, { "../utils": 32, "readable-stream": 16 }], 14: [function(e2, t3, r2) {
      t3.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(e3, t4) {
        if (Buffer.from && Buffer.from !== Uint8Array.from)
          return Buffer.from(e3, t4);
        if ("number" == typeof e3)
          throw new Error('The "data" argument must not be a number');
        return new Buffer(e3, t4);
      }, allocBuffer: function(e3) {
        if (Buffer.alloc)
          return Buffer.alloc(e3);
        var t4 = new Buffer(e3);
        return t4.fill(0), t4;
      }, isBuffer: function(e3) {
        return Buffer.isBuffer(e3);
      }, isStream: function(e3) {
        return e3 && "function" == typeof e3.on && "function" == typeof e3.pause && "function" == typeof e3.resume;
      } };
    }, {}], 15: [function(e2, t3, r2) {
      function s2(e3, t4, r3) {
        var n3, i3 = u2.getTypeOf(t4), s3 = u2.extend(r3 || {}, f2);
        s3.date = s3.date || /* @__PURE__ */ new Date(), null !== s3.compression && (s3.compression = s3.compression.toUpperCase()), "string" == typeof s3.unixPermissions && (s3.unixPermissions = parseInt(s3.unixPermissions, 8)), s3.unixPermissions && 16384 & s3.unixPermissions && (s3.dir = true), s3.dosPermissions && 16 & s3.dosPermissions && (s3.dir = true), s3.dir && (e3 = g2(e3)), s3.createFolders && (n3 = _2(e3)) && b2.call(this, n3, true);
        var a3 = "string" === i3 && false === s3.binary && false === s3.base64;
        r3 && void 0 !== r3.binary || (s3.binary = !a3), (t4 instanceof c2 && 0 === t4.uncompressedSize || s3.dir || !t4 || 0 === t4.length) && (s3.base64 = false, s3.binary = true, t4 = "", s3.compression = "STORE", i3 = "string");
        var o3 = null;
        o3 = t4 instanceof c2 || t4 instanceof l2 ? t4 : p2.isNode && p2.isStream(t4) ? new m2(e3, t4) : u2.prepareContent(e3, t4, s3.binary, s3.optimizedBinaryString, s3.base64);
        var h3 = new d2(e3, o3, s3);
        this.files[e3] = h3;
      }
      var i2 = e2("./utf8"), u2 = e2("./utils"), l2 = e2("./stream/GenericWorker"), a2 = e2("./stream/StreamHelper"), f2 = e2("./defaults"), c2 = e2("./compressedObject"), d2 = e2("./zipObject"), o2 = e2("./generate"), p2 = e2("./nodejsUtils"), m2 = e2("./nodejs/NodejsStreamInputAdapter"), _2 = function(e3) {
        "/" === e3.slice(-1) && (e3 = e3.substring(0, e3.length - 1));
        var t4 = e3.lastIndexOf("/");
        return 0 < t4 ? e3.substring(0, t4) : "";
      }, g2 = function(e3) {
        return "/" !== e3.slice(-1) && (e3 += "/"), e3;
      }, b2 = function(e3, t4) {
        return t4 = void 0 !== t4 ? t4 : f2.createFolders, e3 = g2(e3), this.files[e3] || s2.call(this, e3, null, { dir: true, createFolders: t4 }), this.files[e3];
      };
      function h2(e3) {
        return "[object RegExp]" === Object.prototype.toString.call(e3);
      }
      var n2 = { load: function() {
        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
      }, forEach: function(e3) {
        var t4, r3, n3;
        for (t4 in this.files)
          n3 = this.files[t4], (r3 = t4.slice(this.root.length, t4.length)) && t4.slice(0, this.root.length) === this.root && e3(r3, n3);
      }, filter: function(r3) {
        var n3 = [];
        return this.forEach(function(e3, t4) {
          r3(e3, t4) && n3.push(t4);
        }), n3;
      }, file: function(e3, t4, r3) {
        if (1 !== arguments.length)
          return e3 = this.root + e3, s2.call(this, e3, t4, r3), this;
        if (h2(e3)) {
          var n3 = e3;
          return this.filter(function(e4, t5) {
            return !t5.dir && n3.test(e4);
          });
        }
        var i3 = this.files[this.root + e3];
        return i3 && !i3.dir ? i3 : null;
      }, folder: function(r3) {
        if (!r3)
          return this;
        if (h2(r3))
          return this.filter(function(e4, t5) {
            return t5.dir && r3.test(e4);
          });
        var e3 = this.root + r3, t4 = b2.call(this, e3), n3 = this.clone();
        return n3.root = t4.name, n3;
      }, remove: function(r3) {
        r3 = this.root + r3;
        var e3 = this.files[r3];
        if (e3 || ("/" !== r3.slice(-1) && (r3 += "/"), e3 = this.files[r3]), e3 && !e3.dir)
          delete this.files[r3];
        else
          for (var t4 = this.filter(function(e4, t5) {
            return t5.name.slice(0, r3.length) === r3;
          }), n3 = 0; n3 < t4.length; n3++)
            delete this.files[t4[n3].name];
        return this;
      }, generate: function() {
        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
      }, generateInternalStream: function(e3) {
        var t4, r3 = {};
        try {
          if ((r3 = u2.extend(e3 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: i2.utf8encode })).type = r3.type.toLowerCase(), r3.compression = r3.compression.toUpperCase(), "binarystring" === r3.type && (r3.type = "string"), !r3.type)
            throw new Error("No output type specified.");
          u2.checkSupport(r3.type), "darwin" !== r3.platform && "freebsd" !== r3.platform && "linux" !== r3.platform && "sunos" !== r3.platform || (r3.platform = "UNIX"), "win32" === r3.platform && (r3.platform = "DOS");
          var n3 = r3.comment || this.comment || "";
          t4 = o2.generateWorker(this, r3, n3);
        } catch (e4) {
          (t4 = new l2("error")).error(e4);
        }
        return new a2(t4, r3.type || "string", r3.mimeType);
      }, generateAsync: function(e3, t4) {
        return this.generateInternalStream(e3).accumulate(t4);
      }, generateNodeStream: function(e3, t4) {
        return (e3 = e3 || {}).type || (e3.type = "nodebuffer"), this.generateInternalStream(e3).toNodejsStream(t4);
      } };
      t3.exports = n2;
    }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(e2, t3, r2) {
      t3.exports = e2("stream");
    }, { stream: void 0 }], 17: [function(e2, t3, r2) {
      var n2 = e2("./DataReader");
      function i2(e3) {
        n2.call(this, e3);
        for (var t4 = 0; t4 < this.data.length; t4++)
          e3[t4] = 255 & e3[t4];
      }
      e2("../utils").inherits(i2, n2), i2.prototype.byteAt = function(e3) {
        return this.data[this.zero + e3];
      }, i2.prototype.lastIndexOfSignature = function(e3) {
        for (var t4 = e3.charCodeAt(0), r3 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), i3 = e3.charCodeAt(3), s2 = this.length - 4; 0 <= s2; --s2)
          if (this.data[s2] === t4 && this.data[s2 + 1] === r3 && this.data[s2 + 2] === n3 && this.data[s2 + 3] === i3)
            return s2 - this.zero;
        return -1;
      }, i2.prototype.readAndCheckSignature = function(e3) {
        var t4 = e3.charCodeAt(0), r3 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), i3 = e3.charCodeAt(3), s2 = this.readData(4);
        return t4 === s2[0] && r3 === s2[1] && n3 === s2[2] && i3 === s2[3];
      }, i2.prototype.readData = function(e3) {
        if (this.checkOffset(e3), 0 === e3)
          return [];
        var t4 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
        return this.index += e3, t4;
      }, t3.exports = i2;
    }, { "../utils": 32, "./DataReader": 18 }], 18: [function(e2, t3, r2) {
      var n2 = e2("../utils");
      function i2(e3) {
        this.data = e3, this.length = e3.length, this.index = 0, this.zero = 0;
      }
      i2.prototype = { checkOffset: function(e3) {
        this.checkIndex(this.index + e3);
      }, checkIndex: function(e3) {
        if (this.length < this.zero + e3 || e3 < 0)
          throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e3 + "). Corrupted zip ?");
      }, setIndex: function(e3) {
        this.checkIndex(e3), this.index = e3;
      }, skip: function(e3) {
        this.setIndex(this.index + e3);
      }, byteAt: function() {
      }, readInt: function(e3) {
        var t4, r3 = 0;
        for (this.checkOffset(e3), t4 = this.index + e3 - 1; t4 >= this.index; t4--)
          r3 = (r3 << 8) + this.byteAt(t4);
        return this.index += e3, r3;
      }, readString: function(e3) {
        return n2.transformTo("string", this.readData(e3));
      }, readData: function() {
      }, lastIndexOfSignature: function() {
      }, readAndCheckSignature: function() {
      }, readDate: function() {
        var e3 = this.readInt(4);
        return new Date(Date.UTC(1980 + (e3 >> 25 & 127), (e3 >> 21 & 15) - 1, e3 >> 16 & 31, e3 >> 11 & 31, e3 >> 5 & 63, (31 & e3) << 1));
      } }, t3.exports = i2;
    }, { "../utils": 32 }], 19: [function(e2, t3, r2) {
      var n2 = e2("./Uint8ArrayReader");
      function i2(e3) {
        n2.call(this, e3);
      }
      e2("../utils").inherits(i2, n2), i2.prototype.readData = function(e3) {
        this.checkOffset(e3);
        var t4 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
        return this.index += e3, t4;
      }, t3.exports = i2;
    }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(e2, t3, r2) {
      var n2 = e2("./DataReader");
      function i2(e3) {
        n2.call(this, e3);
      }
      e2("../utils").inherits(i2, n2), i2.prototype.byteAt = function(e3) {
        return this.data.charCodeAt(this.zero + e3);
      }, i2.prototype.lastIndexOfSignature = function(e3) {
        return this.data.lastIndexOf(e3) - this.zero;
      }, i2.prototype.readAndCheckSignature = function(e3) {
        return e3 === this.readData(4);
      }, i2.prototype.readData = function(e3) {
        this.checkOffset(e3);
        var t4 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
        return this.index += e3, t4;
      }, t3.exports = i2;
    }, { "../utils": 32, "./DataReader": 18 }], 21: [function(e2, t3, r2) {
      var n2 = e2("./ArrayReader");
      function i2(e3) {
        n2.call(this, e3);
      }
      e2("../utils").inherits(i2, n2), i2.prototype.readData = function(e3) {
        if (this.checkOffset(e3), 0 === e3)
          return new Uint8Array(0);
        var t4 = this.data.subarray(this.zero + this.index, this.zero + this.index + e3);
        return this.index += e3, t4;
      }, t3.exports = i2;
    }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(e2, t3, r2) {
      var n2 = e2("../utils"), i2 = e2("../support"), s2 = e2("./ArrayReader"), a2 = e2("./StringReader"), o2 = e2("./NodeBufferReader"), h2 = e2("./Uint8ArrayReader");
      t3.exports = function(e3) {
        var t4 = n2.getTypeOf(e3);
        return n2.checkSupport(t4), "string" !== t4 || i2.uint8array ? "nodebuffer" === t4 ? new o2(e3) : i2.uint8array ? new h2(n2.transformTo("uint8array", e3)) : new s2(n2.transformTo("array", e3)) : new a2(e3);
      };
    }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(e2, t3, r2) {
      r2.LOCAL_FILE_HEADER = "PK", r2.CENTRAL_FILE_HEADER = "PK", r2.CENTRAL_DIRECTORY_END = "PK", r2.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", r2.ZIP64_CENTRAL_DIRECTORY_END = "PK", r2.DATA_DESCRIPTOR = "PK\x07\b";
    }, {}], 24: [function(e2, t3, r2) {
      var n2 = e2("./GenericWorker"), i2 = e2("../utils");
      function s2(e3) {
        n2.call(this, "ConvertWorker to " + e3), this.destType = e3;
      }
      i2.inherits(s2, n2), s2.prototype.processChunk = function(e3) {
        this.push({ data: i2.transformTo(this.destType, e3.data), meta: e3.meta });
      }, t3.exports = s2;
    }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(e2, t3, r2) {
      var n2 = e2("./GenericWorker"), i2 = e2("../crc32");
      function s2() {
        n2.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
      }
      e2("../utils").inherits(s2, n2), s2.prototype.processChunk = function(e3) {
        this.streamInfo.crc32 = i2(e3.data, this.streamInfo.crc32 || 0), this.push(e3);
      }, t3.exports = s2;
    }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(e2, t3, r2) {
      var n2 = e2("../utils"), i2 = e2("./GenericWorker");
      function s2(e3) {
        i2.call(this, "DataLengthProbe for " + e3), this.propName = e3, this.withStreamInfo(e3, 0);
      }
      n2.inherits(s2, i2), s2.prototype.processChunk = function(e3) {
        if (e3) {
          var t4 = this.streamInfo[this.propName] || 0;
          this.streamInfo[this.propName] = t4 + e3.data.length;
        }
        i2.prototype.processChunk.call(this, e3);
      }, t3.exports = s2;
    }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(e2, t3, r2) {
      var n2 = e2("../utils"), i2 = e2("./GenericWorker");
      function s2(e3) {
        i2.call(this, "DataWorker");
        var t4 = this;
        this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, e3.then(function(e4) {
          t4.dataIsReady = true, t4.data = e4, t4.max = e4 && e4.length || 0, t4.type = n2.getTypeOf(e4), t4.isPaused || t4._tickAndRepeat();
        }, function(e4) {
          t4.error(e4);
        });
      }
      n2.inherits(s2, i2), s2.prototype.cleanUp = function() {
        i2.prototype.cleanUp.call(this), this.data = null;
      }, s2.prototype.resume = function() {
        return !!i2.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n2.delay(this._tickAndRepeat, [], this)), true);
      }, s2.prototype._tickAndRepeat = function() {
        this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n2.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
      }, s2.prototype._tick = function() {
        if (this.isPaused || this.isFinished)
          return false;
        var e3 = null, t4 = Math.min(this.max, this.index + 16384);
        if (this.index >= this.max)
          return this.end();
        switch (this.type) {
          case "string":
            e3 = this.data.substring(this.index, t4);
            break;
          case "uint8array":
            e3 = this.data.subarray(this.index, t4);
            break;
          case "array":
          case "nodebuffer":
            e3 = this.data.slice(this.index, t4);
        }
        return this.index = t4, this.push({ data: e3, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
      }, t3.exports = s2;
    }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(e2, t3, r2) {
      function n2(e3) {
        this.name = e3 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
      }
      n2.prototype = { push: function(e3) {
        this.emit("data", e3);
      }, end: function() {
        if (this.isFinished)
          return false;
        this.flush();
        try {
          this.emit("end"), this.cleanUp(), this.isFinished = true;
        } catch (e3) {
          this.emit("error", e3);
        }
        return true;
      }, error: function(e3) {
        return !this.isFinished && (this.isPaused ? this.generatedError = e3 : (this.isFinished = true, this.emit("error", e3), this.previous && this.previous.error(e3), this.cleanUp()), true);
      }, on: function(e3, t4) {
        return this._listeners[e3].push(t4), this;
      }, cleanUp: function() {
        this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
      }, emit: function(e3, t4) {
        if (this._listeners[e3])
          for (var r3 = 0; r3 < this._listeners[e3].length; r3++)
            this._listeners[e3][r3].call(this, t4);
      }, pipe: function(e3) {
        return e3.registerPrevious(this);
      }, registerPrevious: function(e3) {
        if (this.isLocked)
          throw new Error("The stream '" + this + "' has already been used.");
        this.streamInfo = e3.streamInfo, this.mergeStreamInfo(), this.previous = e3;
        var t4 = this;
        return e3.on("data", function(e4) {
          t4.processChunk(e4);
        }), e3.on("end", function() {
          t4.end();
        }), e3.on("error", function(e4) {
          t4.error(e4);
        }), this;
      }, pause: function() {
        return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
      }, resume: function() {
        if (!this.isPaused || this.isFinished)
          return false;
        var e3 = this.isPaused = false;
        return this.generatedError && (this.error(this.generatedError), e3 = true), this.previous && this.previous.resume(), !e3;
      }, flush: function() {
      }, processChunk: function(e3) {
        this.push(e3);
      }, withStreamInfo: function(e3, t4) {
        return this.extraStreamInfo[e3] = t4, this.mergeStreamInfo(), this;
      }, mergeStreamInfo: function() {
        for (var e3 in this.extraStreamInfo)
          Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e3) && (this.streamInfo[e3] = this.extraStreamInfo[e3]);
      }, lock: function() {
        if (this.isLocked)
          throw new Error("The stream '" + this + "' has already been used.");
        this.isLocked = true, this.previous && this.previous.lock();
      }, toString: function() {
        var e3 = "Worker " + this.name;
        return this.previous ? this.previous + " -> " + e3 : e3;
      } }, t3.exports = n2;
    }, {}], 29: [function(e2, t3, r2) {
      var h2 = e2("../utils"), i2 = e2("./ConvertWorker"), s2 = e2("./GenericWorker"), u2 = e2("../base64"), n2 = e2("../support"), a2 = e2("../external"), o2 = null;
      if (n2.nodestream)
        try {
          o2 = e2("../nodejs/NodejsStreamOutputAdapter");
        } catch (e3) {
        }
      function l2(e3, o3) {
        return new a2.Promise(function(t4, r3) {
          var n3 = [], i3 = e3._internalType, s3 = e3._outputType, a3 = e3._mimeType;
          e3.on("data", function(e4, t5) {
            n3.push(e4), o3 && o3(t5);
          }).on("error", function(e4) {
            n3 = [], r3(e4);
          }).on("end", function() {
            try {
              var e4 = function(e5, t5, r4) {
                switch (e5) {
                  case "blob":
                    return h2.newBlob(h2.transformTo("arraybuffer", t5), r4);
                  case "base64":
                    return u2.encode(t5);
                  default:
                    return h2.transformTo(e5, t5);
                }
              }(s3, function(e5, t5) {
                var r4, n4 = 0, i4 = null, s4 = 0;
                for (r4 = 0; r4 < t5.length; r4++)
                  s4 += t5[r4].length;
                switch (e5) {
                  case "string":
                    return t5.join("");
                  case "array":
                    return Array.prototype.concat.apply([], t5);
                  case "uint8array":
                    for (i4 = new Uint8Array(s4), r4 = 0; r4 < t5.length; r4++)
                      i4.set(t5[r4], n4), n4 += t5[r4].length;
                    return i4;
                  case "nodebuffer":
                    return Buffer.concat(t5);
                  default:
                    throw new Error("concat : unsupported type '" + e5 + "'");
                }
              }(i3, n3), a3);
              t4(e4);
            } catch (e5) {
              r3(e5);
            }
            n3 = [];
          }).resume();
        });
      }
      function f2(e3, t4, r3) {
        var n3 = t4;
        switch (t4) {
          case "blob":
          case "arraybuffer":
            n3 = "uint8array";
            break;
          case "base64":
            n3 = "string";
        }
        try {
          this._internalType = n3, this._outputType = t4, this._mimeType = r3, h2.checkSupport(n3), this._worker = e3.pipe(new i2(n3)), e3.lock();
        } catch (e4) {
          this._worker = new s2("error"), this._worker.error(e4);
        }
      }
      f2.prototype = { accumulate: function(e3) {
        return l2(this, e3);
      }, on: function(e3, t4) {
        var r3 = this;
        return "data" === e3 ? this._worker.on(e3, function(e4) {
          t4.call(r3, e4.data, e4.meta);
        }) : this._worker.on(e3, function() {
          h2.delay(t4, arguments, r3);
        }), this;
      }, resume: function() {
        return h2.delay(this._worker.resume, [], this._worker), this;
      }, pause: function() {
        return this._worker.pause(), this;
      }, toNodejsStream: function(e3) {
        if (h2.checkSupport("nodestream"), "nodebuffer" !== this._outputType)
          throw new Error(this._outputType + " is not supported by this method");
        return new o2(this, { objectMode: "nodebuffer" !== this._outputType }, e3);
      } }, t3.exports = f2;
    }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(e2, t3, r2) {
      if (r2.base64 = true, r2.array = true, r2.string = true, r2.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r2.nodebuffer = "undefined" != typeof Buffer, r2.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer)
        r2.blob = false;
      else {
        var n2 = new ArrayBuffer(0);
        try {
          r2.blob = 0 === new Blob([n2], { type: "application/zip" }).size;
        } catch (e3) {
          try {
            var i2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
            i2.append(n2), r2.blob = 0 === i2.getBlob("application/zip").size;
          } catch (e4) {
            r2.blob = false;
          }
        }
      }
      try {
        r2.nodestream = !!e2("readable-stream").Readable;
      } catch (e3) {
        r2.nodestream = false;
      }
    }, { "readable-stream": 16 }], 31: [function(e2, t3, s2) {
      for (var o2 = e2("./utils"), h2 = e2("./support"), r2 = e2("./nodejsUtils"), n2 = e2("./stream/GenericWorker"), u2 = new Array(256), i2 = 0; i2 < 256; i2++)
        u2[i2] = 252 <= i2 ? 6 : 248 <= i2 ? 5 : 240 <= i2 ? 4 : 224 <= i2 ? 3 : 192 <= i2 ? 2 : 1;
      u2[254] = u2[254] = 1;
      function a2() {
        n2.call(this, "utf-8 decode"), this.leftOver = null;
      }
      function l2() {
        n2.call(this, "utf-8 encode");
      }
      s2.utf8encode = function(e3) {
        return h2.nodebuffer ? r2.newBufferFrom(e3, "utf-8") : function(e4) {
          var t4, r3, n3, i3, s3, a3 = e4.length, o3 = 0;
          for (i3 = 0; i3 < a3; i3++)
            55296 == (64512 & (r3 = e4.charCodeAt(i3))) && i3 + 1 < a3 && 56320 == (64512 & (n3 = e4.charCodeAt(i3 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i3++), o3 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
          for (t4 = h2.uint8array ? new Uint8Array(o3) : new Array(o3), i3 = s3 = 0; s3 < o3; i3++)
            55296 == (64512 & (r3 = e4.charCodeAt(i3))) && i3 + 1 < a3 && 56320 == (64512 & (n3 = e4.charCodeAt(i3 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i3++), r3 < 128 ? t4[s3++] = r3 : (r3 < 2048 ? t4[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t4[s3++] = 224 | r3 >>> 12 : (t4[s3++] = 240 | r3 >>> 18, t4[s3++] = 128 | r3 >>> 12 & 63), t4[s3++] = 128 | r3 >>> 6 & 63), t4[s3++] = 128 | 63 & r3);
          return t4;
        }(e3);
      }, s2.utf8decode = function(e3) {
        return h2.nodebuffer ? o2.transformTo("nodebuffer", e3).toString("utf-8") : function(e4) {
          var t4, r3, n3, i3, s3 = e4.length, a3 = new Array(2 * s3);
          for (t4 = r3 = 0; t4 < s3; )
            if ((n3 = e4[t4++]) < 128)
              a3[r3++] = n3;
            else if (4 < (i3 = u2[n3]))
              a3[r3++] = 65533, t4 += i3 - 1;
            else {
              for (n3 &= 2 === i3 ? 31 : 3 === i3 ? 15 : 7; 1 < i3 && t4 < s3; )
                n3 = n3 << 6 | 63 & e4[t4++], i3--;
              1 < i3 ? a3[r3++] = 65533 : n3 < 65536 ? a3[r3++] = n3 : (n3 -= 65536, a3[r3++] = 55296 | n3 >> 10 & 1023, a3[r3++] = 56320 | 1023 & n3);
            }
          return a3.length !== r3 && (a3.subarray ? a3 = a3.subarray(0, r3) : a3.length = r3), o2.applyFromCharCode(a3);
        }(e3 = o2.transformTo(h2.uint8array ? "uint8array" : "array", e3));
      }, o2.inherits(a2, n2), a2.prototype.processChunk = function(e3) {
        var t4 = o2.transformTo(h2.uint8array ? "uint8array" : "array", e3.data);
        if (this.leftOver && this.leftOver.length) {
          if (h2.uint8array) {
            var r3 = t4;
            (t4 = new Uint8Array(r3.length + this.leftOver.length)).set(this.leftOver, 0), t4.set(r3, this.leftOver.length);
          } else
            t4 = this.leftOver.concat(t4);
          this.leftOver = null;
        }
        var n3 = function(e4, t5) {
          var r4;
          for ((t5 = t5 || e4.length) > e4.length && (t5 = e4.length), r4 = t5 - 1; 0 <= r4 && 128 == (192 & e4[r4]); )
            r4--;
          return r4 < 0 ? t5 : 0 === r4 ? t5 : r4 + u2[e4[r4]] > t5 ? r4 : t5;
        }(t4), i3 = t4;
        n3 !== t4.length && (h2.uint8array ? (i3 = t4.subarray(0, n3), this.leftOver = t4.subarray(n3, t4.length)) : (i3 = t4.slice(0, n3), this.leftOver = t4.slice(n3, t4.length))), this.push({ data: s2.utf8decode(i3), meta: e3.meta });
      }, a2.prototype.flush = function() {
        this.leftOver && this.leftOver.length && (this.push({ data: s2.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
      }, s2.Utf8DecodeWorker = a2, o2.inherits(l2, n2), l2.prototype.processChunk = function(e3) {
        this.push({ data: s2.utf8encode(e3.data), meta: e3.meta });
      }, s2.Utf8EncodeWorker = l2;
    }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(e2, t3, a2) {
      var o2 = e2("./support"), h2 = e2("./base64"), r2 = e2("./nodejsUtils"), u2 = e2("./external");
      function n2(e3) {
        return e3;
      }
      function l2(e3, t4) {
        for (var r3 = 0; r3 < e3.length; ++r3)
          t4[r3] = 255 & e3.charCodeAt(r3);
        return t4;
      }
      e2("setimmediate"), a2.newBlob = function(t4, r3) {
        a2.checkSupport("blob");
        try {
          return new Blob([t4], { type: r3 });
        } catch (e3) {
          try {
            var n3 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
            return n3.append(t4), n3.getBlob(r3);
          } catch (e4) {
            throw new Error("Bug : can't construct the Blob.");
          }
        }
      };
      var i2 = { stringifyByChunk: function(e3, t4, r3) {
        var n3 = [], i3 = 0, s3 = e3.length;
        if (s3 <= r3)
          return String.fromCharCode.apply(null, e3);
        for (; i3 < s3; )
          "array" === t4 || "nodebuffer" === t4 ? n3.push(String.fromCharCode.apply(null, e3.slice(i3, Math.min(i3 + r3, s3)))) : n3.push(String.fromCharCode.apply(null, e3.subarray(i3, Math.min(i3 + r3, s3)))), i3 += r3;
        return n3.join("");
      }, stringifyByChar: function(e3) {
        for (var t4 = "", r3 = 0; r3 < e3.length; r3++)
          t4 += String.fromCharCode(e3[r3]);
        return t4;
      }, applyCanBeUsed: { uint8array: function() {
        try {
          return o2.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
        } catch (e3) {
          return false;
        }
      }(), nodebuffer: function() {
        try {
          return o2.nodebuffer && 1 === String.fromCharCode.apply(null, r2.allocBuffer(1)).length;
        } catch (e3) {
          return false;
        }
      }() } };
      function s2(e3) {
        var t4 = 65536, r3 = a2.getTypeOf(e3), n3 = true;
        if ("uint8array" === r3 ? n3 = i2.applyCanBeUsed.uint8array : "nodebuffer" === r3 && (n3 = i2.applyCanBeUsed.nodebuffer), n3)
          for (; 1 < t4; )
            try {
              return i2.stringifyByChunk(e3, r3, t4);
            } catch (e4) {
              t4 = Math.floor(t4 / 2);
            }
        return i2.stringifyByChar(e3);
      }
      function f2(e3, t4) {
        for (var r3 = 0; r3 < e3.length; r3++)
          t4[r3] = e3[r3];
        return t4;
      }
      a2.applyFromCharCode = s2;
      var c2 = {};
      c2.string = { string: n2, array: function(e3) {
        return l2(e3, new Array(e3.length));
      }, arraybuffer: function(e3) {
        return c2.string.uint8array(e3).buffer;
      }, uint8array: function(e3) {
        return l2(e3, new Uint8Array(e3.length));
      }, nodebuffer: function(e3) {
        return l2(e3, r2.allocBuffer(e3.length));
      } }, c2.array = { string: s2, array: n2, arraybuffer: function(e3) {
        return new Uint8Array(e3).buffer;
      }, uint8array: function(e3) {
        return new Uint8Array(e3);
      }, nodebuffer: function(e3) {
        return r2.newBufferFrom(e3);
      } }, c2.arraybuffer = { string: function(e3) {
        return s2(new Uint8Array(e3));
      }, array: function(e3) {
        return f2(new Uint8Array(e3), new Array(e3.byteLength));
      }, arraybuffer: n2, uint8array: function(e3) {
        return new Uint8Array(e3);
      }, nodebuffer: function(e3) {
        return r2.newBufferFrom(new Uint8Array(e3));
      } }, c2.uint8array = { string: s2, array: function(e3) {
        return f2(e3, new Array(e3.length));
      }, arraybuffer: function(e3) {
        return e3.buffer;
      }, uint8array: n2, nodebuffer: function(e3) {
        return r2.newBufferFrom(e3);
      } }, c2.nodebuffer = { string: s2, array: function(e3) {
        return f2(e3, new Array(e3.length));
      }, arraybuffer: function(e3) {
        return c2.nodebuffer.uint8array(e3).buffer;
      }, uint8array: function(e3) {
        return f2(e3, new Uint8Array(e3.length));
      }, nodebuffer: n2 }, a2.transformTo = function(e3, t4) {
        if (t4 = t4 || "", !e3)
          return t4;
        a2.checkSupport(e3);
        var r3 = a2.getTypeOf(t4);
        return c2[r3][e3](t4);
      }, a2.resolve = function(e3) {
        for (var t4 = e3.split("/"), r3 = [], n3 = 0; n3 < t4.length; n3++) {
          var i3 = t4[n3];
          "." === i3 || "" === i3 && 0 !== n3 && n3 !== t4.length - 1 || (".." === i3 ? r3.pop() : r3.push(i3));
        }
        return r3.join("/");
      }, a2.getTypeOf = function(e3) {
        return "string" == typeof e3 ? "string" : "[object Array]" === Object.prototype.toString.call(e3) ? "array" : o2.nodebuffer && r2.isBuffer(e3) ? "nodebuffer" : o2.uint8array && e3 instanceof Uint8Array ? "uint8array" : o2.arraybuffer && e3 instanceof ArrayBuffer ? "arraybuffer" : void 0;
      }, a2.checkSupport = function(e3) {
        if (!o2[e3.toLowerCase()])
          throw new Error(e3 + " is not supported by this platform");
      }, a2.MAX_VALUE_16BITS = 65535, a2.MAX_VALUE_32BITS = -1, a2.pretty = function(e3) {
        var t4, r3, n3 = "";
        for (r3 = 0; r3 < (e3 || "").length; r3++)
          n3 += "\\x" + ((t4 = e3.charCodeAt(r3)) < 16 ? "0" : "") + t4.toString(16).toUpperCase();
        return n3;
      }, a2.delay = function(e3, t4, r3) {
        setImmediate(function() {
          e3.apply(r3 || null, t4 || []);
        });
      }, a2.inherits = function(e3, t4) {
        function r3() {
        }
        r3.prototype = t4.prototype, e3.prototype = new r3();
      }, a2.extend = function() {
        var e3, t4, r3 = {};
        for (e3 = 0; e3 < arguments.length; e3++)
          for (t4 in arguments[e3])
            Object.prototype.hasOwnProperty.call(arguments[e3], t4) && void 0 === r3[t4] && (r3[t4] = arguments[e3][t4]);
        return r3;
      }, a2.prepareContent = function(r3, e3, n3, i3, s3) {
        return u2.Promise.resolve(e3).then(function(n4) {
          return o2.blob && (n4 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(n4))) && "undefined" != typeof FileReader ? new u2.Promise(function(t4, r4) {
            var e4 = new FileReader();
            e4.onload = function(e5) {
              t4(e5.target.result);
            }, e4.onerror = function(e5) {
              r4(e5.target.error);
            }, e4.readAsArrayBuffer(n4);
          }) : n4;
        }).then(function(e4) {
          var t4 = a2.getTypeOf(e4);
          return t4 ? ("arraybuffer" === t4 ? e4 = a2.transformTo("uint8array", e4) : "string" === t4 && (s3 ? e4 = h2.decode(e4) : n3 && true !== i3 && (e4 = function(e5) {
            return l2(e5, o2.uint8array ? new Uint8Array(e5.length) : new Array(e5.length));
          }(e4))), e4) : u2.Promise.reject(new Error("Can't read the data of '" + r3 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
        });
      };
    }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(e2, t3, r2) {
      var n2 = e2("./reader/readerFor"), i2 = e2("./utils"), s2 = e2("./signature"), a2 = e2("./zipEntry"), o2 = e2("./support");
      function h2(e3) {
        this.files = [], this.loadOptions = e3;
      }
      h2.prototype = { checkSignature: function(e3) {
        if (!this.reader.readAndCheckSignature(e3)) {
          this.reader.index -= 4;
          var t4 = this.reader.readString(4);
          throw new Error("Corrupted zip or bug: unexpected signature (" + i2.pretty(t4) + ", expected " + i2.pretty(e3) + ")");
        }
      }, isSignature: function(e3, t4) {
        var r3 = this.reader.index;
        this.reader.setIndex(e3);
        var n3 = this.reader.readString(4) === t4;
        return this.reader.setIndex(r3), n3;
      }, readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
        var e3 = this.reader.readData(this.zipCommentLength), t4 = o2.uint8array ? "uint8array" : "array", r3 = i2.transformTo(t4, e3);
        this.zipComment = this.loadOptions.decodeFileName(r3);
      }, readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
        for (var e3, t4, r3, n3 = this.zip64EndOfCentralSize - 44; 0 < n3; )
          e3 = this.reader.readInt(2), t4 = this.reader.readInt(4), r3 = this.reader.readData(t4), this.zip64ExtensibleData[e3] = { id: e3, length: t4, value: r3 };
      }, readBlockZip64EndOfCentralLocator: function() {
        if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount)
          throw new Error("Multi-volumes zip are not supported");
      }, readLocalFiles: function() {
        var e3, t4;
        for (e3 = 0; e3 < this.files.length; e3++)
          t4 = this.files[e3], this.reader.setIndex(t4.localHeaderOffset), this.checkSignature(s2.LOCAL_FILE_HEADER), t4.readLocalPart(this.reader), t4.handleUTF8(), t4.processAttributes();
      }, readCentralDir: function() {
        var e3;
        for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s2.CENTRAL_FILE_HEADER); )
          (e3 = new a2({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e3);
        if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length)
          throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
      }, readEndOfCentral: function() {
        var e3 = this.reader.lastIndexOfSignature(s2.CENTRAL_DIRECTORY_END);
        if (e3 < 0)
          throw !this.isSignature(0, s2.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
        this.reader.setIndex(e3);
        var t4 = e3;
        if (this.checkSignature(s2.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i2.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i2.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i2.MAX_VALUE_16BITS || this.centralDirRecords === i2.MAX_VALUE_16BITS || this.centralDirSize === i2.MAX_VALUE_32BITS || this.centralDirOffset === i2.MAX_VALUE_32BITS) {
          if (this.zip64 = true, (e3 = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0)
            throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
          if (this.reader.setIndex(e3), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s2.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0))
            throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
          this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
        }
        var r3 = this.centralDirOffset + this.centralDirSize;
        this.zip64 && (r3 += 20, r3 += 12 + this.zip64EndOfCentralSize);
        var n3 = t4 - r3;
        if (0 < n3)
          this.isSignature(t4, s2.CENTRAL_FILE_HEADER) || (this.reader.zero = n3);
        else if (n3 < 0)
          throw new Error("Corrupted zip: missing " + Math.abs(n3) + " bytes.");
      }, prepareReader: function(e3) {
        this.reader = n2(e3);
      }, load: function(e3) {
        this.prepareReader(e3), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
      } }, t3.exports = h2;
    }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(e2, t3, r2) {
      var n2 = e2("./reader/readerFor"), s2 = e2("./utils"), i2 = e2("./compressedObject"), a2 = e2("./crc32"), o2 = e2("./utf8"), h2 = e2("./compressions"), u2 = e2("./support");
      function l2(e3, t4) {
        this.options = e3, this.loadOptions = t4;
      }
      l2.prototype = { isEncrypted: function() {
        return 1 == (1 & this.bitFlag);
      }, useUTF8: function() {
        return 2048 == (2048 & this.bitFlag);
      }, readLocalPart: function(e3) {
        var t4, r3;
        if (e3.skip(22), this.fileNameLength = e3.readInt(2), r3 = e3.readInt(2), this.fileName = e3.readData(this.fileNameLength), e3.skip(r3), -1 === this.compressedSize || -1 === this.uncompressedSize)
          throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
        if (null === (t4 = function(e4) {
          for (var t5 in h2)
            if (Object.prototype.hasOwnProperty.call(h2, t5) && h2[t5].magic === e4)
              return h2[t5];
          return null;
        }(this.compressionMethod)))
          throw new Error("Corrupted zip : compression " + s2.pretty(this.compressionMethod) + " unknown (inner file : " + s2.transformTo("string", this.fileName) + ")");
        this.decompressed = new i2(this.compressedSize, this.uncompressedSize, this.crc32, t4, e3.readData(this.compressedSize));
      }, readCentralPart: function(e3) {
        this.versionMadeBy = e3.readInt(2), e3.skip(2), this.bitFlag = e3.readInt(2), this.compressionMethod = e3.readString(2), this.date = e3.readDate(), this.crc32 = e3.readInt(4), this.compressedSize = e3.readInt(4), this.uncompressedSize = e3.readInt(4);
        var t4 = e3.readInt(2);
        if (this.extraFieldsLength = e3.readInt(2), this.fileCommentLength = e3.readInt(2), this.diskNumberStart = e3.readInt(2), this.internalFileAttributes = e3.readInt(2), this.externalFileAttributes = e3.readInt(4), this.localHeaderOffset = e3.readInt(4), this.isEncrypted())
          throw new Error("Encrypted zip are not supported");
        e3.skip(t4), this.readExtraFields(e3), this.parseZIP64ExtraField(e3), this.fileComment = e3.readData(this.fileCommentLength);
      }, processAttributes: function() {
        this.unixPermissions = null, this.dosPermissions = null;
        var e3 = this.versionMadeBy >> 8;
        this.dir = !!(16 & this.externalFileAttributes), 0 == e3 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e3 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
      }, parseZIP64ExtraField: function() {
        if (this.extraFields[1]) {
          var e3 = n2(this.extraFields[1].value);
          this.uncompressedSize === s2.MAX_VALUE_32BITS && (this.uncompressedSize = e3.readInt(8)), this.compressedSize === s2.MAX_VALUE_32BITS && (this.compressedSize = e3.readInt(8)), this.localHeaderOffset === s2.MAX_VALUE_32BITS && (this.localHeaderOffset = e3.readInt(8)), this.diskNumberStart === s2.MAX_VALUE_32BITS && (this.diskNumberStart = e3.readInt(4));
        }
      }, readExtraFields: function(e3) {
        var t4, r3, n3, i3 = e3.index + this.extraFieldsLength;
        for (this.extraFields || (this.extraFields = {}); e3.index + 4 < i3; )
          t4 = e3.readInt(2), r3 = e3.readInt(2), n3 = e3.readData(r3), this.extraFields[t4] = { id: t4, length: r3, value: n3 };
        e3.setIndex(i3);
      }, handleUTF8: function() {
        var e3 = u2.uint8array ? "uint8array" : "array";
        if (this.useUTF8())
          this.fileNameStr = o2.utf8decode(this.fileName), this.fileCommentStr = o2.utf8decode(this.fileComment);
        else {
          var t4 = this.findExtraFieldUnicodePath();
          if (null !== t4)
            this.fileNameStr = t4;
          else {
            var r3 = s2.transformTo(e3, this.fileName);
            this.fileNameStr = this.loadOptions.decodeFileName(r3);
          }
          var n3 = this.findExtraFieldUnicodeComment();
          if (null !== n3)
            this.fileCommentStr = n3;
          else {
            var i3 = s2.transformTo(e3, this.fileComment);
            this.fileCommentStr = this.loadOptions.decodeFileName(i3);
          }
        }
      }, findExtraFieldUnicodePath: function() {
        var e3 = this.extraFields[28789];
        if (e3) {
          var t4 = n2(e3.value);
          return 1 !== t4.readInt(1) ? null : a2(this.fileName) !== t4.readInt(4) ? null : o2.utf8decode(t4.readData(e3.length - 5));
        }
        return null;
      }, findExtraFieldUnicodeComment: function() {
        var e3 = this.extraFields[25461];
        if (e3) {
          var t4 = n2(e3.value);
          return 1 !== t4.readInt(1) ? null : a2(this.fileComment) !== t4.readInt(4) ? null : o2.utf8decode(t4.readData(e3.length - 5));
        }
        return null;
      } }, t3.exports = l2;
    }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(e2, t3, r2) {
      function n2(e3, t4, r3) {
        this.name = e3, this.dir = r3.dir, this.date = r3.date, this.comment = r3.comment, this.unixPermissions = r3.unixPermissions, this.dosPermissions = r3.dosPermissions, this._data = t4, this._dataBinary = r3.binary, this.options = { compression: r3.compression, compressionOptions: r3.compressionOptions };
      }
      var s2 = e2("./stream/StreamHelper"), i2 = e2("./stream/DataWorker"), a2 = e2("./utf8"), o2 = e2("./compressedObject"), h2 = e2("./stream/GenericWorker");
      n2.prototype = { internalStream: function(e3) {
        var t4 = null, r3 = "string";
        try {
          if (!e3)
            throw new Error("No output type specified.");
          var n3 = "string" === (r3 = e3.toLowerCase()) || "text" === r3;
          "binarystring" !== r3 && "text" !== r3 || (r3 = "string"), t4 = this._decompressWorker();
          var i3 = !this._dataBinary;
          i3 && !n3 && (t4 = t4.pipe(new a2.Utf8EncodeWorker())), !i3 && n3 && (t4 = t4.pipe(new a2.Utf8DecodeWorker()));
        } catch (e4) {
          (t4 = new h2("error")).error(e4);
        }
        return new s2(t4, r3, "");
      }, async: function(e3, t4) {
        return this.internalStream(e3).accumulate(t4);
      }, nodeStream: function(e3, t4) {
        return this.internalStream(e3 || "nodebuffer").toNodejsStream(t4);
      }, _compressWorker: function(e3, t4) {
        if (this._data instanceof o2 && this._data.compression.magic === e3.magic)
          return this._data.getCompressedWorker();
        var r3 = this._decompressWorker();
        return this._dataBinary || (r3 = r3.pipe(new a2.Utf8EncodeWorker())), o2.createWorkerFrom(r3, e3, t4);
      }, _decompressWorker: function() {
        return this._data instanceof o2 ? this._data.getContentWorker() : this._data instanceof h2 ? this._data : new i2(this._data);
      } };
      for (var u2 = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l2 = function() {
        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
      }, f2 = 0; f2 < u2.length; f2++)
        n2.prototype[u2[f2]] = l2;
      t3.exports = n2;
    }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(e2, l2, t3) {
      (function(t4) {
        var r2, n2, e3 = t4.MutationObserver || t4.WebKitMutationObserver;
        if (e3) {
          var i2 = 0, s2 = new e3(u2), a2 = t4.document.createTextNode("");
          s2.observe(a2, { characterData: true }), r2 = function() {
            a2.data = i2 = ++i2 % 2;
          };
        } else if (t4.setImmediate || void 0 === t4.MessageChannel)
          r2 = "document" in t4 && "onreadystatechange" in t4.document.createElement("script") ? function() {
            var e4 = t4.document.createElement("script");
            e4.onreadystatechange = function() {
              u2(), e4.onreadystatechange = null, e4.parentNode.removeChild(e4), e4 = null;
            }, t4.document.documentElement.appendChild(e4);
          } : function() {
            setTimeout(u2, 0);
          };
        else {
          var o2 = new t4.MessageChannel();
          o2.port1.onmessage = u2, r2 = function() {
            o2.port2.postMessage(0);
          };
        }
        var h2 = [];
        function u2() {
          var e4, t5;
          n2 = true;
          for (var r3 = h2.length; r3; ) {
            for (t5 = h2, h2 = [], e4 = -1; ++e4 < r3; )
              t5[e4]();
            r3 = h2.length;
          }
          n2 = false;
        }
        l2.exports = function(e4) {
          1 !== h2.push(e4) || n2 || r2();
        };
      }).call(this, "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}], 37: [function(e2, t3, r2) {
      var i2 = e2("immediate");
      function u2() {
      }
      var l2 = {}, s2 = ["REJECTED"], a2 = ["FULFILLED"], n2 = ["PENDING"];
      function o2(e3) {
        if ("function" != typeof e3)
          throw new TypeError("resolver must be a function");
        this.state = n2, this.queue = [], this.outcome = void 0, e3 !== u2 && d2(this, e3);
      }
      function h2(e3, t4, r3) {
        this.promise = e3, "function" == typeof t4 && (this.onFulfilled = t4, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r3 && (this.onRejected = r3, this.callRejected = this.otherCallRejected);
      }
      function f2(t4, r3, n3) {
        i2(function() {
          var e3;
          try {
            e3 = r3(n3);
          } catch (e4) {
            return l2.reject(t4, e4);
          }
          e3 === t4 ? l2.reject(t4, new TypeError("Cannot resolve promise with itself")) : l2.resolve(t4, e3);
        });
      }
      function c2(e3) {
        var t4 = e3 && e3.then;
        if (e3 && ("object" == typeof e3 || "function" == typeof e3) && "function" == typeof t4)
          return function() {
            t4.apply(e3, arguments);
          };
      }
      function d2(t4, e3) {
        var r3 = false;
        function n3(e4) {
          r3 || (r3 = true, l2.reject(t4, e4));
        }
        function i3(e4) {
          r3 || (r3 = true, l2.resolve(t4, e4));
        }
        var s3 = p2(function() {
          e3(i3, n3);
        });
        "error" === s3.status && n3(s3.value);
      }
      function p2(e3, t4) {
        var r3 = {};
        try {
          r3.value = e3(t4), r3.status = "success";
        } catch (e4) {
          r3.status = "error", r3.value = e4;
        }
        return r3;
      }
      (t3.exports = o2).prototype.finally = function(t4) {
        if ("function" != typeof t4)
          return this;
        var r3 = this.constructor;
        return this.then(function(e3) {
          return r3.resolve(t4()).then(function() {
            return e3;
          });
        }, function(e3) {
          return r3.resolve(t4()).then(function() {
            throw e3;
          });
        });
      }, o2.prototype.catch = function(e3) {
        return this.then(null, e3);
      }, o2.prototype.then = function(e3, t4) {
        if ("function" != typeof e3 && this.state === a2 || "function" != typeof t4 && this.state === s2)
          return this;
        var r3 = new this.constructor(u2);
        this.state !== n2 ? f2(r3, this.state === a2 ? e3 : t4, this.outcome) : this.queue.push(new h2(r3, e3, t4));
        return r3;
      }, h2.prototype.callFulfilled = function(e3) {
        l2.resolve(this.promise, e3);
      }, h2.prototype.otherCallFulfilled = function(e3) {
        f2(this.promise, this.onFulfilled, e3);
      }, h2.prototype.callRejected = function(e3) {
        l2.reject(this.promise, e3);
      }, h2.prototype.otherCallRejected = function(e3) {
        f2(this.promise, this.onRejected, e3);
      }, l2.resolve = function(e3, t4) {
        var r3 = p2(c2, t4);
        if ("error" === r3.status)
          return l2.reject(e3, r3.value);
        var n3 = r3.value;
        if (n3)
          d2(e3, n3);
        else {
          e3.state = a2, e3.outcome = t4;
          for (var i3 = -1, s3 = e3.queue.length; ++i3 < s3; )
            e3.queue[i3].callFulfilled(t4);
        }
        return e3;
      }, l2.reject = function(e3, t4) {
        e3.state = s2, e3.outcome = t4;
        for (var r3 = -1, n3 = e3.queue.length; ++r3 < n3; )
          e3.queue[r3].callRejected(t4);
        return e3;
      }, o2.resolve = function(e3) {
        if (e3 instanceof this)
          return e3;
        return l2.resolve(new this(u2), e3);
      }, o2.reject = function(e3) {
        var t4 = new this(u2);
        return l2.reject(t4, e3);
      }, o2.all = function(e3) {
        var r3 = this;
        if ("[object Array]" !== Object.prototype.toString.call(e3))
          return this.reject(new TypeError("must be an array"));
        var n3 = e3.length, i3 = false;
        if (!n3)
          return this.resolve([]);
        var s3 = new Array(n3), a3 = 0, t4 = -1, o3 = new this(u2);
        for (; ++t4 < n3; )
          h3(e3[t4], t4);
        return o3;
        function h3(e4, t5) {
          r3.resolve(e4).then(function(e5) {
            s3[t5] = e5, ++a3 !== n3 || i3 || (i3 = true, l2.resolve(o3, s3));
          }, function(e5) {
            i3 || (i3 = true, l2.reject(o3, e5));
          });
        }
      }, o2.race = function(e3) {
        var t4 = this;
        if ("[object Array]" !== Object.prototype.toString.call(e3))
          return this.reject(new TypeError("must be an array"));
        var r3 = e3.length, n3 = false;
        if (!r3)
          return this.resolve([]);
        var i3 = -1, s3 = new this(u2);
        for (; ++i3 < r3; )
          a3 = e3[i3], t4.resolve(a3).then(function(e4) {
            n3 || (n3 = true, l2.resolve(s3, e4));
          }, function(e4) {
            n3 || (n3 = true, l2.reject(s3, e4));
          });
        var a3;
        return s3;
      };
    }, { immediate: 36 }], 38: [function(e2, t3, r2) {
      var n2 = {};
      (0, e2("./lib/utils/common").assign)(n2, e2("./lib/deflate"), e2("./lib/inflate"), e2("./lib/zlib/constants")), t3.exports = n2;
    }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(e2, t3, r2) {
      var a2 = e2("./zlib/deflate"), o2 = e2("./utils/common"), h2 = e2("./utils/strings"), i2 = e2("./zlib/messages"), s2 = e2("./zlib/zstream"), u2 = Object.prototype.toString, l2 = 0, f2 = -1, c2 = 0, d2 = 8;
      function p2(e3) {
        if (!(this instanceof p2))
          return new p2(e3);
        this.options = o2.assign({ level: f2, method: d2, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c2, to: "" }, e3 || {});
        var t4 = this.options;
        t4.raw && 0 < t4.windowBits ? t4.windowBits = -t4.windowBits : t4.gzip && 0 < t4.windowBits && t4.windowBits < 16 && (t4.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new s2(), this.strm.avail_out = 0;
        var r3 = a2.deflateInit2(this.strm, t4.level, t4.method, t4.windowBits, t4.memLevel, t4.strategy);
        if (r3 !== l2)
          throw new Error(i2[r3]);
        if (t4.header && a2.deflateSetHeader(this.strm, t4.header), t4.dictionary) {
          var n3;
          if (n3 = "string" == typeof t4.dictionary ? h2.string2buf(t4.dictionary) : "[object ArrayBuffer]" === u2.call(t4.dictionary) ? new Uint8Array(t4.dictionary) : t4.dictionary, (r3 = a2.deflateSetDictionary(this.strm, n3)) !== l2)
            throw new Error(i2[r3]);
          this._dict_set = true;
        }
      }
      function n2(e3, t4) {
        var r3 = new p2(t4);
        if (r3.push(e3, true), r3.err)
          throw r3.msg || i2[r3.err];
        return r3.result;
      }
      p2.prototype.push = function(e3, t4) {
        var r3, n3, i3 = this.strm, s3 = this.options.chunkSize;
        if (this.ended)
          return false;
        n3 = t4 === ~~t4 ? t4 : true === t4 ? 4 : 0, "string" == typeof e3 ? i3.input = h2.string2buf(e3) : "[object ArrayBuffer]" === u2.call(e3) ? i3.input = new Uint8Array(e3) : i3.input = e3, i3.next_in = 0, i3.avail_in = i3.input.length;
        do {
          if (0 === i3.avail_out && (i3.output = new o2.Buf8(s3), i3.next_out = 0, i3.avail_out = s3), 1 !== (r3 = a2.deflate(i3, n3)) && r3 !== l2)
            return this.onEnd(r3), !(this.ended = true);
          0 !== i3.avail_out && (0 !== i3.avail_in || 4 !== n3 && 2 !== n3) || ("string" === this.options.to ? this.onData(h2.buf2binstring(o2.shrinkBuf(i3.output, i3.next_out))) : this.onData(o2.shrinkBuf(i3.output, i3.next_out)));
        } while ((0 < i3.avail_in || 0 === i3.avail_out) && 1 !== r3);
        return 4 === n3 ? (r3 = a2.deflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === l2) : 2 !== n3 || (this.onEnd(l2), !(i3.avail_out = 0));
      }, p2.prototype.onData = function(e3) {
        this.chunks.push(e3);
      }, p2.prototype.onEnd = function(e3) {
        e3 === l2 && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o2.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
      }, r2.Deflate = p2, r2.deflate = n2, r2.deflateRaw = function(e3, t4) {
        return (t4 = t4 || {}).raw = true, n2(e3, t4);
      }, r2.gzip = function(e3, t4) {
        return (t4 = t4 || {}).gzip = true, n2(e3, t4);
      };
    }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(e2, t3, r2) {
      var c2 = e2("./zlib/inflate"), d2 = e2("./utils/common"), p2 = e2("./utils/strings"), m2 = e2("./zlib/constants"), n2 = e2("./zlib/messages"), i2 = e2("./zlib/zstream"), s2 = e2("./zlib/gzheader"), _2 = Object.prototype.toString;
      function a2(e3) {
        if (!(this instanceof a2))
          return new a2(e3);
        this.options = d2.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e3 || {});
        var t4 = this.options;
        t4.raw && 0 <= t4.windowBits && t4.windowBits < 16 && (t4.windowBits = -t4.windowBits, 0 === t4.windowBits && (t4.windowBits = -15)), !(0 <= t4.windowBits && t4.windowBits < 16) || e3 && e3.windowBits || (t4.windowBits += 32), 15 < t4.windowBits && t4.windowBits < 48 && 0 == (15 & t4.windowBits) && (t4.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new i2(), this.strm.avail_out = 0;
        var r3 = c2.inflateInit2(this.strm, t4.windowBits);
        if (r3 !== m2.Z_OK)
          throw new Error(n2[r3]);
        this.header = new s2(), c2.inflateGetHeader(this.strm, this.header);
      }
      function o2(e3, t4) {
        var r3 = new a2(t4);
        if (r3.push(e3, true), r3.err)
          throw r3.msg || n2[r3.err];
        return r3.result;
      }
      a2.prototype.push = function(e3, t4) {
        var r3, n3, i3, s3, a3, o3, h2 = this.strm, u2 = this.options.chunkSize, l2 = this.options.dictionary, f2 = false;
        if (this.ended)
          return false;
        n3 = t4 === ~~t4 ? t4 : true === t4 ? m2.Z_FINISH : m2.Z_NO_FLUSH, "string" == typeof e3 ? h2.input = p2.binstring2buf(e3) : "[object ArrayBuffer]" === _2.call(e3) ? h2.input = new Uint8Array(e3) : h2.input = e3, h2.next_in = 0, h2.avail_in = h2.input.length;
        do {
          if (0 === h2.avail_out && (h2.output = new d2.Buf8(u2), h2.next_out = 0, h2.avail_out = u2), (r3 = c2.inflate(h2, m2.Z_NO_FLUSH)) === m2.Z_NEED_DICT && l2 && (o3 = "string" == typeof l2 ? p2.string2buf(l2) : "[object ArrayBuffer]" === _2.call(l2) ? new Uint8Array(l2) : l2, r3 = c2.inflateSetDictionary(this.strm, o3)), r3 === m2.Z_BUF_ERROR && true === f2 && (r3 = m2.Z_OK, f2 = false), r3 !== m2.Z_STREAM_END && r3 !== m2.Z_OK)
            return this.onEnd(r3), !(this.ended = true);
          h2.next_out && (0 !== h2.avail_out && r3 !== m2.Z_STREAM_END && (0 !== h2.avail_in || n3 !== m2.Z_FINISH && n3 !== m2.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i3 = p2.utf8border(h2.output, h2.next_out), s3 = h2.next_out - i3, a3 = p2.buf2string(h2.output, i3), h2.next_out = s3, h2.avail_out = u2 - s3, s3 && d2.arraySet(h2.output, h2.output, i3, s3, 0), this.onData(a3)) : this.onData(d2.shrinkBuf(h2.output, h2.next_out)))), 0 === h2.avail_in && 0 === h2.avail_out && (f2 = true);
        } while ((0 < h2.avail_in || 0 === h2.avail_out) && r3 !== m2.Z_STREAM_END);
        return r3 === m2.Z_STREAM_END && (n3 = m2.Z_FINISH), n3 === m2.Z_FINISH ? (r3 = c2.inflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === m2.Z_OK) : n3 !== m2.Z_SYNC_FLUSH || (this.onEnd(m2.Z_OK), !(h2.avail_out = 0));
      }, a2.prototype.onData = function(e3) {
        this.chunks.push(e3);
      }, a2.prototype.onEnd = function(e3) {
        e3 === m2.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d2.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
      }, r2.Inflate = a2, r2.inflate = o2, r2.inflateRaw = function(e3, t4) {
        return (t4 = t4 || {}).raw = true, o2(e3, t4);
      }, r2.ungzip = o2;
    }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(e2, t3, r2) {
      var n2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
      r2.assign = function(e3) {
        for (var t4 = Array.prototype.slice.call(arguments, 1); t4.length; ) {
          var r3 = t4.shift();
          if (r3) {
            if ("object" != typeof r3)
              throw new TypeError(r3 + "must be non-object");
            for (var n3 in r3)
              r3.hasOwnProperty(n3) && (e3[n3] = r3[n3]);
          }
        }
        return e3;
      }, r2.shrinkBuf = function(e3, t4) {
        return e3.length === t4 ? e3 : e3.subarray ? e3.subarray(0, t4) : (e3.length = t4, e3);
      };
      var i2 = { arraySet: function(e3, t4, r3, n3, i3) {
        if (t4.subarray && e3.subarray)
          e3.set(t4.subarray(r3, r3 + n3), i3);
        else
          for (var s3 = 0; s3 < n3; s3++)
            e3[i3 + s3] = t4[r3 + s3];
      }, flattenChunks: function(e3) {
        var t4, r3, n3, i3, s3, a2;
        for (t4 = n3 = 0, r3 = e3.length; t4 < r3; t4++)
          n3 += e3[t4].length;
        for (a2 = new Uint8Array(n3), t4 = i3 = 0, r3 = e3.length; t4 < r3; t4++)
          s3 = e3[t4], a2.set(s3, i3), i3 += s3.length;
        return a2;
      } }, s2 = { arraySet: function(e3, t4, r3, n3, i3) {
        for (var s3 = 0; s3 < n3; s3++)
          e3[i3 + s3] = t4[r3 + s3];
      }, flattenChunks: function(e3) {
        return [].concat.apply([], e3);
      } };
      r2.setTyped = function(e3) {
        e3 ? (r2.Buf8 = Uint8Array, r2.Buf16 = Uint16Array, r2.Buf32 = Int32Array, r2.assign(r2, i2)) : (r2.Buf8 = Array, r2.Buf16 = Array, r2.Buf32 = Array, r2.assign(r2, s2));
      }, r2.setTyped(n2);
    }, {}], 42: [function(e2, t3, r2) {
      var h2 = e2("./common"), i2 = true, s2 = true;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch (e3) {
        i2 = false;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e3) {
        s2 = false;
      }
      for (var u2 = new h2.Buf8(256), n2 = 0; n2 < 256; n2++)
        u2[n2] = 252 <= n2 ? 6 : 248 <= n2 ? 5 : 240 <= n2 ? 4 : 224 <= n2 ? 3 : 192 <= n2 ? 2 : 1;
      function l2(e3, t4) {
        if (t4 < 65537 && (e3.subarray && s2 || !e3.subarray && i2))
          return String.fromCharCode.apply(null, h2.shrinkBuf(e3, t4));
        for (var r3 = "", n3 = 0; n3 < t4; n3++)
          r3 += String.fromCharCode(e3[n3]);
        return r3;
      }
      u2[254] = u2[254] = 1, r2.string2buf = function(e3) {
        var t4, r3, n3, i3, s3, a2 = e3.length, o2 = 0;
        for (i3 = 0; i3 < a2; i3++)
          55296 == (64512 & (r3 = e3.charCodeAt(i3))) && i3 + 1 < a2 && 56320 == (64512 & (n3 = e3.charCodeAt(i3 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i3++), o2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
        for (t4 = new h2.Buf8(o2), i3 = s3 = 0; s3 < o2; i3++)
          55296 == (64512 & (r3 = e3.charCodeAt(i3))) && i3 + 1 < a2 && 56320 == (64512 & (n3 = e3.charCodeAt(i3 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i3++), r3 < 128 ? t4[s3++] = r3 : (r3 < 2048 ? t4[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t4[s3++] = 224 | r3 >>> 12 : (t4[s3++] = 240 | r3 >>> 18, t4[s3++] = 128 | r3 >>> 12 & 63), t4[s3++] = 128 | r3 >>> 6 & 63), t4[s3++] = 128 | 63 & r3);
        return t4;
      }, r2.buf2binstring = function(e3) {
        return l2(e3, e3.length);
      }, r2.binstring2buf = function(e3) {
        for (var t4 = new h2.Buf8(e3.length), r3 = 0, n3 = t4.length; r3 < n3; r3++)
          t4[r3] = e3.charCodeAt(r3);
        return t4;
      }, r2.buf2string = function(e3, t4) {
        var r3, n3, i3, s3, a2 = t4 || e3.length, o2 = new Array(2 * a2);
        for (r3 = n3 = 0; r3 < a2; )
          if ((i3 = e3[r3++]) < 128)
            o2[n3++] = i3;
          else if (4 < (s3 = u2[i3]))
            o2[n3++] = 65533, r3 += s3 - 1;
          else {
            for (i3 &= 2 === s3 ? 31 : 3 === s3 ? 15 : 7; 1 < s3 && r3 < a2; )
              i3 = i3 << 6 | 63 & e3[r3++], s3--;
            1 < s3 ? o2[n3++] = 65533 : i3 < 65536 ? o2[n3++] = i3 : (i3 -= 65536, o2[n3++] = 55296 | i3 >> 10 & 1023, o2[n3++] = 56320 | 1023 & i3);
          }
        return l2(o2, n3);
      }, r2.utf8border = function(e3, t4) {
        var r3;
        for ((t4 = t4 || e3.length) > e3.length && (t4 = e3.length), r3 = t4 - 1; 0 <= r3 && 128 == (192 & e3[r3]); )
          r3--;
        return r3 < 0 ? t4 : 0 === r3 ? t4 : r3 + u2[e3[r3]] > t4 ? r3 : t4;
      };
    }, { "./common": 41 }], 43: [function(e2, t3, r2) {
      t3.exports = function(e3, t4, r3, n2) {
        for (var i2 = 65535 & e3 | 0, s2 = e3 >>> 16 & 65535 | 0, a2 = 0; 0 !== r3; ) {
          for (r3 -= a2 = 2e3 < r3 ? 2e3 : r3; s2 = s2 + (i2 = i2 + t4[n2++] | 0) | 0, --a2; )
            ;
          i2 %= 65521, s2 %= 65521;
        }
        return i2 | s2 << 16 | 0;
      };
    }, {}], 44: [function(e2, t3, r2) {
      t3.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
    }, {}], 45: [function(e2, t3, r2) {
      var o2 = function() {
        for (var e3, t4 = [], r3 = 0; r3 < 256; r3++) {
          e3 = r3;
          for (var n2 = 0; n2 < 8; n2++)
            e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
          t4[r3] = e3;
        }
        return t4;
      }();
      t3.exports = function(e3, t4, r3, n2) {
        var i2 = o2, s2 = n2 + r3;
        e3 ^= -1;
        for (var a2 = n2; a2 < s2; a2++)
          e3 = e3 >>> 8 ^ i2[255 & (e3 ^ t4[a2])];
        return -1 ^ e3;
      };
    }, {}], 46: [function(e2, t3, r2) {
      var h2, c2 = e2("../utils/common"), u2 = e2("./trees"), d2 = e2("./adler32"), p2 = e2("./crc32"), n2 = e2("./messages"), l2 = 0, f2 = 4, m2 = 0, _2 = -2, g2 = -1, b2 = 4, i2 = 2, v2 = 8, y2 = 9, s2 = 286, a2 = 30, o2 = 19, w2 = 2 * s2 + 1, k2 = 15, x2 = 3, S2 = 258, z2 = S2 + x2 + 1, C2 = 42, E2 = 113, A2 = 1, I2 = 2, O2 = 3, B2 = 4;
      function R2(e3, t4) {
        return e3.msg = n2[t4], t4;
      }
      function T2(e3) {
        return (e3 << 1) - (4 < e3 ? 9 : 0);
      }
      function D2(e3) {
        for (var t4 = e3.length; 0 <= --t4; )
          e3[t4] = 0;
      }
      function F2(e3) {
        var t4 = e3.state, r3 = t4.pending;
        r3 > e3.avail_out && (r3 = e3.avail_out), 0 !== r3 && (c2.arraySet(e3.output, t4.pending_buf, t4.pending_out, r3, e3.next_out), e3.next_out += r3, t4.pending_out += r3, e3.total_out += r3, e3.avail_out -= r3, t4.pending -= r3, 0 === t4.pending && (t4.pending_out = 0));
      }
      function N2(e3, t4) {
        u2._tr_flush_block(e3, 0 <= e3.block_start ? e3.block_start : -1, e3.strstart - e3.block_start, t4), e3.block_start = e3.strstart, F2(e3.strm);
      }
      function U2(e3, t4) {
        e3.pending_buf[e3.pending++] = t4;
      }
      function P2(e3, t4) {
        e3.pending_buf[e3.pending++] = t4 >>> 8 & 255, e3.pending_buf[e3.pending++] = 255 & t4;
      }
      function L2(e3, t4) {
        var r3, n3, i3 = e3.max_chain_length, s3 = e3.strstart, a3 = e3.prev_length, o3 = e3.nice_match, h3 = e3.strstart > e3.w_size - z2 ? e3.strstart - (e3.w_size - z2) : 0, u3 = e3.window, l3 = e3.w_mask, f3 = e3.prev, c3 = e3.strstart + S2, d4 = u3[s3 + a3 - 1], p3 = u3[s3 + a3];
        e3.prev_length >= e3.good_match && (i3 >>= 2), o3 > e3.lookahead && (o3 = e3.lookahead);
        do {
          if (u3[(r3 = t4) + a3] === p3 && u3[r3 + a3 - 1] === d4 && u3[r3] === u3[s3] && u3[++r3] === u3[s3 + 1]) {
            s3 += 2, r3++;
            do {
            } while (u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && u3[++s3] === u3[++r3] && s3 < c3);
            if (n3 = S2 - (c3 - s3), s3 = c3 - S2, a3 < n3) {
              if (e3.match_start = t4, o3 <= (a3 = n3))
                break;
              d4 = u3[s3 + a3 - 1], p3 = u3[s3 + a3];
            }
          }
        } while ((t4 = f3[t4 & l3]) > h3 && 0 != --i3);
        return a3 <= e3.lookahead ? a3 : e3.lookahead;
      }
      function j2(e3) {
        var t4, r3, n3, i3, s3, a3, o3, h3, u3, l3, f3 = e3.w_size;
        do {
          if (i3 = e3.window_size - e3.lookahead - e3.strstart, e3.strstart >= f3 + (f3 - z2)) {
            for (c2.arraySet(e3.window, e3.window, f3, f3, 0), e3.match_start -= f3, e3.strstart -= f3, e3.block_start -= f3, t4 = r3 = e3.hash_size; n3 = e3.head[--t4], e3.head[t4] = f3 <= n3 ? n3 - f3 : 0, --r3; )
              ;
            for (t4 = r3 = f3; n3 = e3.prev[--t4], e3.prev[t4] = f3 <= n3 ? n3 - f3 : 0, --r3; )
              ;
            i3 += f3;
          }
          if (0 === e3.strm.avail_in)
            break;
          if (a3 = e3.strm, o3 = e3.window, h3 = e3.strstart + e3.lookahead, u3 = i3, l3 = void 0, l3 = a3.avail_in, u3 < l3 && (l3 = u3), r3 = 0 === l3 ? 0 : (a3.avail_in -= l3, c2.arraySet(o3, a3.input, a3.next_in, l3, h3), 1 === a3.state.wrap ? a3.adler = d2(a3.adler, o3, l3, h3) : 2 === a3.state.wrap && (a3.adler = p2(a3.adler, o3, l3, h3)), a3.next_in += l3, a3.total_in += l3, l3), e3.lookahead += r3, e3.lookahead + e3.insert >= x2)
            for (s3 = e3.strstart - e3.insert, e3.ins_h = e3.window[s3], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[s3 + 1]) & e3.hash_mask; e3.insert && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[s3 + x2 - 1]) & e3.hash_mask, e3.prev[s3 & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = s3, s3++, e3.insert--, !(e3.lookahead + e3.insert < x2)); )
              ;
        } while (e3.lookahead < z2 && 0 !== e3.strm.avail_in);
      }
      function Z2(e3, t4) {
        for (var r3, n3; ; ) {
          if (e3.lookahead < z2) {
            if (j2(e3), e3.lookahead < z2 && t4 === l2)
              return A2;
            if (0 === e3.lookahead)
              break;
          }
          if (r3 = 0, e3.lookahead >= x2 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x2 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), 0 !== r3 && e3.strstart - r3 <= e3.w_size - z2 && (e3.match_length = L2(e3, r3)), e3.match_length >= x2)
            if (n3 = u2._tr_tally(e3, e3.strstart - e3.match_start, e3.match_length - x2), e3.lookahead -= e3.match_length, e3.match_length <= e3.max_lazy_match && e3.lookahead >= x2) {
              for (e3.match_length--; e3.strstart++, e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x2 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart, 0 != --e3.match_length; )
                ;
              e3.strstart++;
            } else
              e3.strstart += e3.match_length, e3.match_length = 0, e3.ins_h = e3.window[e3.strstart], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 1]) & e3.hash_mask;
          else
            n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++;
          if (n3 && (N2(e3, false), 0 === e3.strm.avail_out))
            return A2;
        }
        return e3.insert = e3.strstart < x2 - 1 ? e3.strstart : x2 - 1, t4 === f2 ? (N2(e3, true), 0 === e3.strm.avail_out ? O2 : B2) : e3.last_lit && (N2(e3, false), 0 === e3.strm.avail_out) ? A2 : I2;
      }
      function W2(e3, t4) {
        for (var r3, n3, i3; ; ) {
          if (e3.lookahead < z2) {
            if (j2(e3), e3.lookahead < z2 && t4 === l2)
              return A2;
            if (0 === e3.lookahead)
              break;
          }
          if (r3 = 0, e3.lookahead >= x2 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x2 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), e3.prev_length = e3.match_length, e3.prev_match = e3.match_start, e3.match_length = x2 - 1, 0 !== r3 && e3.prev_length < e3.max_lazy_match && e3.strstart - r3 <= e3.w_size - z2 && (e3.match_length = L2(e3, r3), e3.match_length <= 5 && (1 === e3.strategy || e3.match_length === x2 && 4096 < e3.strstart - e3.match_start) && (e3.match_length = x2 - 1)), e3.prev_length >= x2 && e3.match_length <= e3.prev_length) {
            for (i3 = e3.strstart + e3.lookahead - x2, n3 = u2._tr_tally(e3, e3.strstart - 1 - e3.prev_match, e3.prev_length - x2), e3.lookahead -= e3.prev_length - 1, e3.prev_length -= 2; ++e3.strstart <= i3 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x2 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), 0 != --e3.prev_length; )
              ;
            if (e3.match_available = 0, e3.match_length = x2 - 1, e3.strstart++, n3 && (N2(e3, false), 0 === e3.strm.avail_out))
              return A2;
          } else if (e3.match_available) {
            if ((n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart - 1])) && N2(e3, false), e3.strstart++, e3.lookahead--, 0 === e3.strm.avail_out)
              return A2;
          } else
            e3.match_available = 1, e3.strstart++, e3.lookahead--;
        }
        return e3.match_available && (n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart - 1]), e3.match_available = 0), e3.insert = e3.strstart < x2 - 1 ? e3.strstart : x2 - 1, t4 === f2 ? (N2(e3, true), 0 === e3.strm.avail_out ? O2 : B2) : e3.last_lit && (N2(e3, false), 0 === e3.strm.avail_out) ? A2 : I2;
      }
      function M2(e3, t4, r3, n3, i3) {
        this.good_length = e3, this.max_lazy = t4, this.nice_length = r3, this.max_chain = n3, this.func = i3;
      }
      function H2() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v2, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c2.Buf16(2 * w2), this.dyn_dtree = new c2.Buf16(2 * (2 * a2 + 1)), this.bl_tree = new c2.Buf16(2 * (2 * o2 + 1)), D2(this.dyn_ltree), D2(this.dyn_dtree), D2(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c2.Buf16(k2 + 1), this.heap = new c2.Buf16(2 * s2 + 1), D2(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c2.Buf16(2 * s2 + 1), D2(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
      function G2(e3) {
        var t4;
        return e3 && e3.state ? (e3.total_in = e3.total_out = 0, e3.data_type = i2, (t4 = e3.state).pending = 0, t4.pending_out = 0, t4.wrap < 0 && (t4.wrap = -t4.wrap), t4.status = t4.wrap ? C2 : E2, e3.adler = 2 === t4.wrap ? 0 : 1, t4.last_flush = l2, u2._tr_init(t4), m2) : R2(e3, _2);
      }
      function K2(e3) {
        var t4 = G2(e3);
        return t4 === m2 && function(e4) {
          e4.window_size = 2 * e4.w_size, D2(e4.head), e4.max_lazy_match = h2[e4.level].max_lazy, e4.good_match = h2[e4.level].good_length, e4.nice_match = h2[e4.level].nice_length, e4.max_chain_length = h2[e4.level].max_chain, e4.strstart = 0, e4.block_start = 0, e4.lookahead = 0, e4.insert = 0, e4.match_length = e4.prev_length = x2 - 1, e4.match_available = 0, e4.ins_h = 0;
        }(e3.state), t4;
      }
      function Y2(e3, t4, r3, n3, i3, s3) {
        if (!e3)
          return _2;
        var a3 = 1;
        if (t4 === g2 && (t4 = 6), n3 < 0 ? (a3 = 0, n3 = -n3) : 15 < n3 && (a3 = 2, n3 -= 16), i3 < 1 || y2 < i3 || r3 !== v2 || n3 < 8 || 15 < n3 || t4 < 0 || 9 < t4 || s3 < 0 || b2 < s3)
          return R2(e3, _2);
        8 === n3 && (n3 = 9);
        var o3 = new H2();
        return (e3.state = o3).strm = e3, o3.wrap = a3, o3.gzhead = null, o3.w_bits = n3, o3.w_size = 1 << o3.w_bits, o3.w_mask = o3.w_size - 1, o3.hash_bits = i3 + 7, o3.hash_size = 1 << o3.hash_bits, o3.hash_mask = o3.hash_size - 1, o3.hash_shift = ~~((o3.hash_bits + x2 - 1) / x2), o3.window = new c2.Buf8(2 * o3.w_size), o3.head = new c2.Buf16(o3.hash_size), o3.prev = new c2.Buf16(o3.w_size), o3.lit_bufsize = 1 << i3 + 6, o3.pending_buf_size = 4 * o3.lit_bufsize, o3.pending_buf = new c2.Buf8(o3.pending_buf_size), o3.d_buf = 1 * o3.lit_bufsize, o3.l_buf = 3 * o3.lit_bufsize, o3.level = t4, o3.strategy = s3, o3.method = r3, K2(e3);
      }
      h2 = [new M2(0, 0, 0, 0, function(e3, t4) {
        var r3 = 65535;
        for (r3 > e3.pending_buf_size - 5 && (r3 = e3.pending_buf_size - 5); ; ) {
          if (e3.lookahead <= 1) {
            if (j2(e3), 0 === e3.lookahead && t4 === l2)
              return A2;
            if (0 === e3.lookahead)
              break;
          }
          e3.strstart += e3.lookahead, e3.lookahead = 0;
          var n3 = e3.block_start + r3;
          if ((0 === e3.strstart || e3.strstart >= n3) && (e3.lookahead = e3.strstart - n3, e3.strstart = n3, N2(e3, false), 0 === e3.strm.avail_out))
            return A2;
          if (e3.strstart - e3.block_start >= e3.w_size - z2 && (N2(e3, false), 0 === e3.strm.avail_out))
            return A2;
        }
        return e3.insert = 0, t4 === f2 ? (N2(e3, true), 0 === e3.strm.avail_out ? O2 : B2) : (e3.strstart > e3.block_start && (N2(e3, false), e3.strm.avail_out), A2);
      }), new M2(4, 4, 8, 4, Z2), new M2(4, 5, 16, 8, Z2), new M2(4, 6, 32, 32, Z2), new M2(4, 4, 16, 16, W2), new M2(8, 16, 32, 32, W2), new M2(8, 16, 128, 128, W2), new M2(8, 32, 128, 256, W2), new M2(32, 128, 258, 1024, W2), new M2(32, 258, 258, 4096, W2)], r2.deflateInit = function(e3, t4) {
        return Y2(e3, t4, v2, 15, 8, 0);
      }, r2.deflateInit2 = Y2, r2.deflateReset = K2, r2.deflateResetKeep = G2, r2.deflateSetHeader = function(e3, t4) {
        return e3 && e3.state ? 2 !== e3.state.wrap ? _2 : (e3.state.gzhead = t4, m2) : _2;
      }, r2.deflate = function(e3, t4) {
        var r3, n3, i3, s3;
        if (!e3 || !e3.state || 5 < t4 || t4 < 0)
          return e3 ? R2(e3, _2) : _2;
        if (n3 = e3.state, !e3.output || !e3.input && 0 !== e3.avail_in || 666 === n3.status && t4 !== f2)
          return R2(e3, 0 === e3.avail_out ? -5 : _2);
        if (n3.strm = e3, r3 = n3.last_flush, n3.last_flush = t4, n3.status === C2)
          if (2 === n3.wrap)
            e3.adler = 0, U2(n3, 31), U2(n3, 139), U2(n3, 8), n3.gzhead ? (U2(n3, (n3.gzhead.text ? 1 : 0) + (n3.gzhead.hcrc ? 2 : 0) + (n3.gzhead.extra ? 4 : 0) + (n3.gzhead.name ? 8 : 0) + (n3.gzhead.comment ? 16 : 0)), U2(n3, 255 & n3.gzhead.time), U2(n3, n3.gzhead.time >> 8 & 255), U2(n3, n3.gzhead.time >> 16 & 255), U2(n3, n3.gzhead.time >> 24 & 255), U2(n3, 9 === n3.level ? 2 : 2 <= n3.strategy || n3.level < 2 ? 4 : 0), U2(n3, 255 & n3.gzhead.os), n3.gzhead.extra && n3.gzhead.extra.length && (U2(n3, 255 & n3.gzhead.extra.length), U2(n3, n3.gzhead.extra.length >> 8 & 255)), n3.gzhead.hcrc && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending, 0)), n3.gzindex = 0, n3.status = 69) : (U2(n3, 0), U2(n3, 0), U2(n3, 0), U2(n3, 0), U2(n3, 0), U2(n3, 9 === n3.level ? 2 : 2 <= n3.strategy || n3.level < 2 ? 4 : 0), U2(n3, 3), n3.status = E2);
          else {
            var a3 = v2 + (n3.w_bits - 8 << 4) << 8;
            a3 |= (2 <= n3.strategy || n3.level < 2 ? 0 : n3.level < 6 ? 1 : 6 === n3.level ? 2 : 3) << 6, 0 !== n3.strstart && (a3 |= 32), a3 += 31 - a3 % 31, n3.status = E2, P2(n3, a3), 0 !== n3.strstart && (P2(n3, e3.adler >>> 16), P2(n3, 65535 & e3.adler)), e3.adler = 1;
          }
        if (69 === n3.status)
          if (n3.gzhead.extra) {
            for (i3 = n3.pending; n3.gzindex < (65535 & n3.gzhead.extra.length) && (n3.pending !== n3.pending_buf_size || (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F2(e3), i3 = n3.pending, n3.pending !== n3.pending_buf_size)); )
              U2(n3, 255 & n3.gzhead.extra[n3.gzindex]), n3.gzindex++;
            n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), n3.gzindex === n3.gzhead.extra.length && (n3.gzindex = 0, n3.status = 73);
          } else
            n3.status = 73;
        if (73 === n3.status)
          if (n3.gzhead.name) {
            i3 = n3.pending;
            do {
              if (n3.pending === n3.pending_buf_size && (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F2(e3), i3 = n3.pending, n3.pending === n3.pending_buf_size)) {
                s3 = 1;
                break;
              }
              s3 = n3.gzindex < n3.gzhead.name.length ? 255 & n3.gzhead.name.charCodeAt(n3.gzindex++) : 0, U2(n3, s3);
            } while (0 !== s3);
            n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), 0 === s3 && (n3.gzindex = 0, n3.status = 91);
          } else
            n3.status = 91;
        if (91 === n3.status)
          if (n3.gzhead.comment) {
            i3 = n3.pending;
            do {
              if (n3.pending === n3.pending_buf_size && (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F2(e3), i3 = n3.pending, n3.pending === n3.pending_buf_size)) {
                s3 = 1;
                break;
              }
              s3 = n3.gzindex < n3.gzhead.comment.length ? 255 & n3.gzhead.comment.charCodeAt(n3.gzindex++) : 0, U2(n3, s3);
            } while (0 !== s3);
            n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), 0 === s3 && (n3.status = 103);
          } else
            n3.status = 103;
        if (103 === n3.status && (n3.gzhead.hcrc ? (n3.pending + 2 > n3.pending_buf_size && F2(e3), n3.pending + 2 <= n3.pending_buf_size && (U2(n3, 255 & e3.adler), U2(n3, e3.adler >> 8 & 255), e3.adler = 0, n3.status = E2)) : n3.status = E2), 0 !== n3.pending) {
          if (F2(e3), 0 === e3.avail_out)
            return n3.last_flush = -1, m2;
        } else if (0 === e3.avail_in && T2(t4) <= T2(r3) && t4 !== f2)
          return R2(e3, -5);
        if (666 === n3.status && 0 !== e3.avail_in)
          return R2(e3, -5);
        if (0 !== e3.avail_in || 0 !== n3.lookahead || t4 !== l2 && 666 !== n3.status) {
          var o3 = 2 === n3.strategy ? function(e4, t5) {
            for (var r4; ; ) {
              if (0 === e4.lookahead && (j2(e4), 0 === e4.lookahead)) {
                if (t5 === l2)
                  return A2;
                break;
              }
              if (e4.match_length = 0, r4 = u2._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++, r4 && (N2(e4, false), 0 === e4.strm.avail_out))
                return A2;
            }
            return e4.insert = 0, t5 === f2 ? (N2(e4, true), 0 === e4.strm.avail_out ? O2 : B2) : e4.last_lit && (N2(e4, false), 0 === e4.strm.avail_out) ? A2 : I2;
          }(n3, t4) : 3 === n3.strategy ? function(e4, t5) {
            for (var r4, n4, i4, s4, a4 = e4.window; ; ) {
              if (e4.lookahead <= S2) {
                if (j2(e4), e4.lookahead <= S2 && t5 === l2)
                  return A2;
                if (0 === e4.lookahead)
                  break;
              }
              if (e4.match_length = 0, e4.lookahead >= x2 && 0 < e4.strstart && (n4 = a4[i4 = e4.strstart - 1]) === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4]) {
                s4 = e4.strstart + S2;
                do {
                } while (n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && i4 < s4);
                e4.match_length = S2 - (s4 - i4), e4.match_length > e4.lookahead && (e4.match_length = e4.lookahead);
              }
              if (e4.match_length >= x2 ? (r4 = u2._tr_tally(e4, 1, e4.match_length - x2), e4.lookahead -= e4.match_length, e4.strstart += e4.match_length, e4.match_length = 0) : (r4 = u2._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++), r4 && (N2(e4, false), 0 === e4.strm.avail_out))
                return A2;
            }
            return e4.insert = 0, t5 === f2 ? (N2(e4, true), 0 === e4.strm.avail_out ? O2 : B2) : e4.last_lit && (N2(e4, false), 0 === e4.strm.avail_out) ? A2 : I2;
          }(n3, t4) : h2[n3.level].func(n3, t4);
          if (o3 !== O2 && o3 !== B2 || (n3.status = 666), o3 === A2 || o3 === O2)
            return 0 === e3.avail_out && (n3.last_flush = -1), m2;
          if (o3 === I2 && (1 === t4 ? u2._tr_align(n3) : 5 !== t4 && (u2._tr_stored_block(n3, 0, 0, false), 3 === t4 && (D2(n3.head), 0 === n3.lookahead && (n3.strstart = 0, n3.block_start = 0, n3.insert = 0))), F2(e3), 0 === e3.avail_out))
            return n3.last_flush = -1, m2;
        }
        return t4 !== f2 ? m2 : n3.wrap <= 0 ? 1 : (2 === n3.wrap ? (U2(n3, 255 & e3.adler), U2(n3, e3.adler >> 8 & 255), U2(n3, e3.adler >> 16 & 255), U2(n3, e3.adler >> 24 & 255), U2(n3, 255 & e3.total_in), U2(n3, e3.total_in >> 8 & 255), U2(n3, e3.total_in >> 16 & 255), U2(n3, e3.total_in >> 24 & 255)) : (P2(n3, e3.adler >>> 16), P2(n3, 65535 & e3.adler)), F2(e3), 0 < n3.wrap && (n3.wrap = -n3.wrap), 0 !== n3.pending ? m2 : 1);
      }, r2.deflateEnd = function(e3) {
        var t4;
        return e3 && e3.state ? (t4 = e3.state.status) !== C2 && 69 !== t4 && 73 !== t4 && 91 !== t4 && 103 !== t4 && t4 !== E2 && 666 !== t4 ? R2(e3, _2) : (e3.state = null, t4 === E2 ? R2(e3, -3) : m2) : _2;
      }, r2.deflateSetDictionary = function(e3, t4) {
        var r3, n3, i3, s3, a3, o3, h3, u3, l3 = t4.length;
        if (!e3 || !e3.state)
          return _2;
        if (2 === (s3 = (r3 = e3.state).wrap) || 1 === s3 && r3.status !== C2 || r3.lookahead)
          return _2;
        for (1 === s3 && (e3.adler = d2(e3.adler, t4, l3, 0)), r3.wrap = 0, l3 >= r3.w_size && (0 === s3 && (D2(r3.head), r3.strstart = 0, r3.block_start = 0, r3.insert = 0), u3 = new c2.Buf8(r3.w_size), c2.arraySet(u3, t4, l3 - r3.w_size, r3.w_size, 0), t4 = u3, l3 = r3.w_size), a3 = e3.avail_in, o3 = e3.next_in, h3 = e3.input, e3.avail_in = l3, e3.next_in = 0, e3.input = t4, j2(r3); r3.lookahead >= x2; ) {
          for (n3 = r3.strstart, i3 = r3.lookahead - (x2 - 1); r3.ins_h = (r3.ins_h << r3.hash_shift ^ r3.window[n3 + x2 - 1]) & r3.hash_mask, r3.prev[n3 & r3.w_mask] = r3.head[r3.ins_h], r3.head[r3.ins_h] = n3, n3++, --i3; )
            ;
          r3.strstart = n3, r3.lookahead = x2 - 1, j2(r3);
        }
        return r3.strstart += r3.lookahead, r3.block_start = r3.strstart, r3.insert = r3.lookahead, r3.lookahead = 0, r3.match_length = r3.prev_length = x2 - 1, r3.match_available = 0, e3.next_in = o3, e3.input = h3, e3.avail_in = a3, r3.wrap = s3, m2;
      }, r2.deflateInfo = "pako deflate (from Nodeca project)";
    }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(e2, t3, r2) {
      t3.exports = function() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      };
    }, {}], 48: [function(e2, t3, r2) {
      t3.exports = function(e3, t4) {
        var r3, n2, i2, s2, a2, o2, h2, u2, l2, f2, c2, d2, p2, m2, _2, g2, b2, v2, y2, w2, k2, x2, S2, z2, C2;
        r3 = e3.state, n2 = e3.next_in, z2 = e3.input, i2 = n2 + (e3.avail_in - 5), s2 = e3.next_out, C2 = e3.output, a2 = s2 - (t4 - e3.avail_out), o2 = s2 + (e3.avail_out - 257), h2 = r3.dmax, u2 = r3.wsize, l2 = r3.whave, f2 = r3.wnext, c2 = r3.window, d2 = r3.hold, p2 = r3.bits, m2 = r3.lencode, _2 = r3.distcode, g2 = (1 << r3.lenbits) - 1, b2 = (1 << r3.distbits) - 1;
        e:
          do {
            p2 < 15 && (d2 += z2[n2++] << p2, p2 += 8, d2 += z2[n2++] << p2, p2 += 8), v2 = m2[d2 & g2];
            t:
              for (; ; ) {
                if (d2 >>>= y2 = v2 >>> 24, p2 -= y2, 0 === (y2 = v2 >>> 16 & 255))
                  C2[s2++] = 65535 & v2;
                else {
                  if (!(16 & y2)) {
                    if (0 == (64 & y2)) {
                      v2 = m2[(65535 & v2) + (d2 & (1 << y2) - 1)];
                      continue t;
                    }
                    if (32 & y2) {
                      r3.mode = 12;
                      break e;
                    }
                    e3.msg = "invalid literal/length code", r3.mode = 30;
                    break e;
                  }
                  w2 = 65535 & v2, (y2 &= 15) && (p2 < y2 && (d2 += z2[n2++] << p2, p2 += 8), w2 += d2 & (1 << y2) - 1, d2 >>>= y2, p2 -= y2), p2 < 15 && (d2 += z2[n2++] << p2, p2 += 8, d2 += z2[n2++] << p2, p2 += 8), v2 = _2[d2 & b2];
                  r:
                    for (; ; ) {
                      if (d2 >>>= y2 = v2 >>> 24, p2 -= y2, !(16 & (y2 = v2 >>> 16 & 255))) {
                        if (0 == (64 & y2)) {
                          v2 = _2[(65535 & v2) + (d2 & (1 << y2) - 1)];
                          continue r;
                        }
                        e3.msg = "invalid distance code", r3.mode = 30;
                        break e;
                      }
                      if (k2 = 65535 & v2, p2 < (y2 &= 15) && (d2 += z2[n2++] << p2, (p2 += 8) < y2 && (d2 += z2[n2++] << p2, p2 += 8)), h2 < (k2 += d2 & (1 << y2) - 1)) {
                        e3.msg = "invalid distance too far back", r3.mode = 30;
                        break e;
                      }
                      if (d2 >>>= y2, p2 -= y2, (y2 = s2 - a2) < k2) {
                        if (l2 < (y2 = k2 - y2) && r3.sane) {
                          e3.msg = "invalid distance too far back", r3.mode = 30;
                          break e;
                        }
                        if (S2 = c2, (x2 = 0) === f2) {
                          if (x2 += u2 - y2, y2 < w2) {
                            for (w2 -= y2; C2[s2++] = c2[x2++], --y2; )
                              ;
                            x2 = s2 - k2, S2 = C2;
                          }
                        } else if (f2 < y2) {
                          if (x2 += u2 + f2 - y2, (y2 -= f2) < w2) {
                            for (w2 -= y2; C2[s2++] = c2[x2++], --y2; )
                              ;
                            if (x2 = 0, f2 < w2) {
                              for (w2 -= y2 = f2; C2[s2++] = c2[x2++], --y2; )
                                ;
                              x2 = s2 - k2, S2 = C2;
                            }
                          }
                        } else if (x2 += f2 - y2, y2 < w2) {
                          for (w2 -= y2; C2[s2++] = c2[x2++], --y2; )
                            ;
                          x2 = s2 - k2, S2 = C2;
                        }
                        for (; 2 < w2; )
                          C2[s2++] = S2[x2++], C2[s2++] = S2[x2++], C2[s2++] = S2[x2++], w2 -= 3;
                        w2 && (C2[s2++] = S2[x2++], 1 < w2 && (C2[s2++] = S2[x2++]));
                      } else {
                        for (x2 = s2 - k2; C2[s2++] = C2[x2++], C2[s2++] = C2[x2++], C2[s2++] = C2[x2++], 2 < (w2 -= 3); )
                          ;
                        w2 && (C2[s2++] = C2[x2++], 1 < w2 && (C2[s2++] = C2[x2++]));
                      }
                      break;
                    }
                }
                break;
              }
          } while (n2 < i2 && s2 < o2);
        n2 -= w2 = p2 >> 3, d2 &= (1 << (p2 -= w2 << 3)) - 1, e3.next_in = n2, e3.next_out = s2, e3.avail_in = n2 < i2 ? i2 - n2 + 5 : 5 - (n2 - i2), e3.avail_out = s2 < o2 ? o2 - s2 + 257 : 257 - (s2 - o2), r3.hold = d2, r3.bits = p2;
      };
    }, {}], 49: [function(e2, t3, r2) {
      var I2 = e2("../utils/common"), O2 = e2("./adler32"), B2 = e2("./crc32"), R2 = e2("./inffast"), T2 = e2("./inftrees"), D2 = 1, F2 = 2, N2 = 0, U2 = -2, P2 = 1, n2 = 852, i2 = 592;
      function L2(e3) {
        return (e3 >>> 24 & 255) + (e3 >>> 8 & 65280) + ((65280 & e3) << 8) + ((255 & e3) << 24);
      }
      function s2() {
        this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I2.Buf16(320), this.work = new I2.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
      function a2(e3) {
        var t4;
        return e3 && e3.state ? (t4 = e3.state, e3.total_in = e3.total_out = t4.total = 0, e3.msg = "", t4.wrap && (e3.adler = 1 & t4.wrap), t4.mode = P2, t4.last = 0, t4.havedict = 0, t4.dmax = 32768, t4.head = null, t4.hold = 0, t4.bits = 0, t4.lencode = t4.lendyn = new I2.Buf32(n2), t4.distcode = t4.distdyn = new I2.Buf32(i2), t4.sane = 1, t4.back = -1, N2) : U2;
      }
      function o2(e3) {
        var t4;
        return e3 && e3.state ? ((t4 = e3.state).wsize = 0, t4.whave = 0, t4.wnext = 0, a2(e3)) : U2;
      }
      function h2(e3, t4) {
        var r3, n3;
        return e3 && e3.state ? (n3 = e3.state, t4 < 0 ? (r3 = 0, t4 = -t4) : (r3 = 1 + (t4 >> 4), t4 < 48 && (t4 &= 15)), t4 && (t4 < 8 || 15 < t4) ? U2 : (null !== n3.window && n3.wbits !== t4 && (n3.window = null), n3.wrap = r3, n3.wbits = t4, o2(e3))) : U2;
      }
      function u2(e3, t4) {
        var r3, n3;
        return e3 ? (n3 = new s2(), (e3.state = n3).window = null, (r3 = h2(e3, t4)) !== N2 && (e3.state = null), r3) : U2;
      }
      var l2, f2, c2 = true;
      function j2(e3) {
        if (c2) {
          var t4;
          for (l2 = new I2.Buf32(512), f2 = new I2.Buf32(32), t4 = 0; t4 < 144; )
            e3.lens[t4++] = 8;
          for (; t4 < 256; )
            e3.lens[t4++] = 9;
          for (; t4 < 280; )
            e3.lens[t4++] = 7;
          for (; t4 < 288; )
            e3.lens[t4++] = 8;
          for (T2(D2, e3.lens, 0, 288, l2, 0, e3.work, { bits: 9 }), t4 = 0; t4 < 32; )
            e3.lens[t4++] = 5;
          T2(F2, e3.lens, 0, 32, f2, 0, e3.work, { bits: 5 }), c2 = false;
        }
        e3.lencode = l2, e3.lenbits = 9, e3.distcode = f2, e3.distbits = 5;
      }
      function Z2(e3, t4, r3, n3) {
        var i3, s3 = e3.state;
        return null === s3.window && (s3.wsize = 1 << s3.wbits, s3.wnext = 0, s3.whave = 0, s3.window = new I2.Buf8(s3.wsize)), n3 >= s3.wsize ? (I2.arraySet(s3.window, t4, r3 - s3.wsize, s3.wsize, 0), s3.wnext = 0, s3.whave = s3.wsize) : (n3 < (i3 = s3.wsize - s3.wnext) && (i3 = n3), I2.arraySet(s3.window, t4, r3 - n3, i3, s3.wnext), (n3 -= i3) ? (I2.arraySet(s3.window, t4, r3 - n3, n3, 0), s3.wnext = n3, s3.whave = s3.wsize) : (s3.wnext += i3, s3.wnext === s3.wsize && (s3.wnext = 0), s3.whave < s3.wsize && (s3.whave += i3))), 0;
      }
      r2.inflateReset = o2, r2.inflateReset2 = h2, r2.inflateResetKeep = a2, r2.inflateInit = function(e3) {
        return u2(e3, 15);
      }, r2.inflateInit2 = u2, r2.inflate = function(e3, t4) {
        var r3, n3, i3, s3, a3, o3, h3, u3, l3, f3, c3, d2, p2, m2, _2, g2, b2, v2, y2, w2, k2, x2, S2, z2, C2 = 0, E2 = new I2.Buf8(4), A2 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!e3 || !e3.state || !e3.output || !e3.input && 0 !== e3.avail_in)
          return U2;
        12 === (r3 = e3.state).mode && (r3.mode = 13), a3 = e3.next_out, i3 = e3.output, h3 = e3.avail_out, s3 = e3.next_in, n3 = e3.input, o3 = e3.avail_in, u3 = r3.hold, l3 = r3.bits, f3 = o3, c3 = h3, x2 = N2;
        e:
          for (; ; )
            switch (r3.mode) {
              case P2:
                if (0 === r3.wrap) {
                  r3.mode = 13;
                  break;
                }
                for (; l3 < 16; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (2 & r3.wrap && 35615 === u3) {
                  E2[r3.check = 0] = 255 & u3, E2[1] = u3 >>> 8 & 255, r3.check = B2(r3.check, E2, 2, 0), l3 = u3 = 0, r3.mode = 2;
                  break;
                }
                if (r3.flags = 0, r3.head && (r3.head.done = false), !(1 & r3.wrap) || (((255 & u3) << 8) + (u3 >> 8)) % 31) {
                  e3.msg = "incorrect header check", r3.mode = 30;
                  break;
                }
                if (8 != (15 & u3)) {
                  e3.msg = "unknown compression method", r3.mode = 30;
                  break;
                }
                if (l3 -= 4, k2 = 8 + (15 & (u3 >>>= 4)), 0 === r3.wbits)
                  r3.wbits = k2;
                else if (k2 > r3.wbits) {
                  e3.msg = "invalid window size", r3.mode = 30;
                  break;
                }
                r3.dmax = 1 << k2, e3.adler = r3.check = 1, r3.mode = 512 & u3 ? 10 : 12, l3 = u3 = 0;
                break;
              case 2:
                for (; l3 < 16; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (r3.flags = u3, 8 != (255 & r3.flags)) {
                  e3.msg = "unknown compression method", r3.mode = 30;
                  break;
                }
                if (57344 & r3.flags) {
                  e3.msg = "unknown header flags set", r3.mode = 30;
                  break;
                }
                r3.head && (r3.head.text = u3 >> 8 & 1), 512 & r3.flags && (E2[0] = 255 & u3, E2[1] = u3 >>> 8 & 255, r3.check = B2(r3.check, E2, 2, 0)), l3 = u3 = 0, r3.mode = 3;
              case 3:
                for (; l3 < 32; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                r3.head && (r3.head.time = u3), 512 & r3.flags && (E2[0] = 255 & u3, E2[1] = u3 >>> 8 & 255, E2[2] = u3 >>> 16 & 255, E2[3] = u3 >>> 24 & 255, r3.check = B2(r3.check, E2, 4, 0)), l3 = u3 = 0, r3.mode = 4;
              case 4:
                for (; l3 < 16; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                r3.head && (r3.head.xflags = 255 & u3, r3.head.os = u3 >> 8), 512 & r3.flags && (E2[0] = 255 & u3, E2[1] = u3 >>> 8 & 255, r3.check = B2(r3.check, E2, 2, 0)), l3 = u3 = 0, r3.mode = 5;
              case 5:
                if (1024 & r3.flags) {
                  for (; l3 < 16; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r3.length = u3, r3.head && (r3.head.extra_len = u3), 512 & r3.flags && (E2[0] = 255 & u3, E2[1] = u3 >>> 8 & 255, r3.check = B2(r3.check, E2, 2, 0)), l3 = u3 = 0;
                } else
                  r3.head && (r3.head.extra = null);
                r3.mode = 6;
              case 6:
                if (1024 & r3.flags && (o3 < (d2 = r3.length) && (d2 = o3), d2 && (r3.head && (k2 = r3.head.extra_len - r3.length, r3.head.extra || (r3.head.extra = new Array(r3.head.extra_len)), I2.arraySet(r3.head.extra, n3, s3, d2, k2)), 512 & r3.flags && (r3.check = B2(r3.check, n3, d2, s3)), o3 -= d2, s3 += d2, r3.length -= d2), r3.length))
                  break e;
                r3.length = 0, r3.mode = 7;
              case 7:
                if (2048 & r3.flags) {
                  if (0 === o3)
                    break e;
                  for (d2 = 0; k2 = n3[s3 + d2++], r3.head && k2 && r3.length < 65536 && (r3.head.name += String.fromCharCode(k2)), k2 && d2 < o3; )
                    ;
                  if (512 & r3.flags && (r3.check = B2(r3.check, n3, d2, s3)), o3 -= d2, s3 += d2, k2)
                    break e;
                } else
                  r3.head && (r3.head.name = null);
                r3.length = 0, r3.mode = 8;
              case 8:
                if (4096 & r3.flags) {
                  if (0 === o3)
                    break e;
                  for (d2 = 0; k2 = n3[s3 + d2++], r3.head && k2 && r3.length < 65536 && (r3.head.comment += String.fromCharCode(k2)), k2 && d2 < o3; )
                    ;
                  if (512 & r3.flags && (r3.check = B2(r3.check, n3, d2, s3)), o3 -= d2, s3 += d2, k2)
                    break e;
                } else
                  r3.head && (r3.head.comment = null);
                r3.mode = 9;
              case 9:
                if (512 & r3.flags) {
                  for (; l3 < 16; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (u3 !== (65535 & r3.check)) {
                    e3.msg = "header crc mismatch", r3.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r3.head && (r3.head.hcrc = r3.flags >> 9 & 1, r3.head.done = true), e3.adler = r3.check = 0, r3.mode = 12;
                break;
              case 10:
                for (; l3 < 32; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                e3.adler = r3.check = L2(u3), l3 = u3 = 0, r3.mode = 11;
              case 11:
                if (0 === r3.havedict)
                  return e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r3.hold = u3, r3.bits = l3, 2;
                e3.adler = r3.check = 1, r3.mode = 12;
              case 12:
                if (5 === t4 || 6 === t4)
                  break e;
              case 13:
                if (r3.last) {
                  u3 >>>= 7 & l3, l3 -= 7 & l3, r3.mode = 27;
                  break;
                }
                for (; l3 < 3; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                switch (r3.last = 1 & u3, l3 -= 1, 3 & (u3 >>>= 1)) {
                  case 0:
                    r3.mode = 14;
                    break;
                  case 1:
                    if (j2(r3), r3.mode = 20, 6 !== t4)
                      break;
                    u3 >>>= 2, l3 -= 2;
                    break e;
                  case 2:
                    r3.mode = 17;
                    break;
                  case 3:
                    e3.msg = "invalid block type", r3.mode = 30;
                }
                u3 >>>= 2, l3 -= 2;
                break;
              case 14:
                for (u3 >>>= 7 & l3, l3 -= 7 & l3; l3 < 32; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if ((65535 & u3) != (u3 >>> 16 ^ 65535)) {
                  e3.msg = "invalid stored block lengths", r3.mode = 30;
                  break;
                }
                if (r3.length = 65535 & u3, l3 = u3 = 0, r3.mode = 15, 6 === t4)
                  break e;
              case 15:
                r3.mode = 16;
              case 16:
                if (d2 = r3.length) {
                  if (o3 < d2 && (d2 = o3), h3 < d2 && (d2 = h3), 0 === d2)
                    break e;
                  I2.arraySet(i3, n3, s3, d2, a3), o3 -= d2, s3 += d2, h3 -= d2, a3 += d2, r3.length -= d2;
                  break;
                }
                r3.mode = 12;
                break;
              case 17:
                for (; l3 < 14; ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (r3.nlen = 257 + (31 & u3), u3 >>>= 5, l3 -= 5, r3.ndist = 1 + (31 & u3), u3 >>>= 5, l3 -= 5, r3.ncode = 4 + (15 & u3), u3 >>>= 4, l3 -= 4, 286 < r3.nlen || 30 < r3.ndist) {
                  e3.msg = "too many length or distance symbols", r3.mode = 30;
                  break;
                }
                r3.have = 0, r3.mode = 18;
              case 18:
                for (; r3.have < r3.ncode; ) {
                  for (; l3 < 3; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r3.lens[A2[r3.have++]] = 7 & u3, u3 >>>= 3, l3 -= 3;
                }
                for (; r3.have < 19; )
                  r3.lens[A2[r3.have++]] = 0;
                if (r3.lencode = r3.lendyn, r3.lenbits = 7, S2 = { bits: r3.lenbits }, x2 = T2(0, r3.lens, 0, 19, r3.lencode, 0, r3.work, S2), r3.lenbits = S2.bits, x2) {
                  e3.msg = "invalid code lengths set", r3.mode = 30;
                  break;
                }
                r3.have = 0, r3.mode = 19;
              case 19:
                for (; r3.have < r3.nlen + r3.ndist; ) {
                  for (; g2 = (C2 = r3.lencode[u3 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b2 = 65535 & C2, !((_2 = C2 >>> 24) <= l3); ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (b2 < 16)
                    u3 >>>= _2, l3 -= _2, r3.lens[r3.have++] = b2;
                  else {
                    if (16 === b2) {
                      for (z2 = _2 + 2; l3 < z2; ) {
                        if (0 === o3)
                          break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      if (u3 >>>= _2, l3 -= _2, 0 === r3.have) {
                        e3.msg = "invalid bit length repeat", r3.mode = 30;
                        break;
                      }
                      k2 = r3.lens[r3.have - 1], d2 = 3 + (3 & u3), u3 >>>= 2, l3 -= 2;
                    } else if (17 === b2) {
                      for (z2 = _2 + 3; l3 < z2; ) {
                        if (0 === o3)
                          break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      l3 -= _2, k2 = 0, d2 = 3 + (7 & (u3 >>>= _2)), u3 >>>= 3, l3 -= 3;
                    } else {
                      for (z2 = _2 + 7; l3 < z2; ) {
                        if (0 === o3)
                          break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      l3 -= _2, k2 = 0, d2 = 11 + (127 & (u3 >>>= _2)), u3 >>>= 7, l3 -= 7;
                    }
                    if (r3.have + d2 > r3.nlen + r3.ndist) {
                      e3.msg = "invalid bit length repeat", r3.mode = 30;
                      break;
                    }
                    for (; d2--; )
                      r3.lens[r3.have++] = k2;
                  }
                }
                if (30 === r3.mode)
                  break;
                if (0 === r3.lens[256]) {
                  e3.msg = "invalid code -- missing end-of-block", r3.mode = 30;
                  break;
                }
                if (r3.lenbits = 9, S2 = { bits: r3.lenbits }, x2 = T2(D2, r3.lens, 0, r3.nlen, r3.lencode, 0, r3.work, S2), r3.lenbits = S2.bits, x2) {
                  e3.msg = "invalid literal/lengths set", r3.mode = 30;
                  break;
                }
                if (r3.distbits = 6, r3.distcode = r3.distdyn, S2 = { bits: r3.distbits }, x2 = T2(F2, r3.lens, r3.nlen, r3.ndist, r3.distcode, 0, r3.work, S2), r3.distbits = S2.bits, x2) {
                  e3.msg = "invalid distances set", r3.mode = 30;
                  break;
                }
                if (r3.mode = 20, 6 === t4)
                  break e;
              case 20:
                r3.mode = 21;
              case 21:
                if (6 <= o3 && 258 <= h3) {
                  e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r3.hold = u3, r3.bits = l3, R2(e3, c3), a3 = e3.next_out, i3 = e3.output, h3 = e3.avail_out, s3 = e3.next_in, n3 = e3.input, o3 = e3.avail_in, u3 = r3.hold, l3 = r3.bits, 12 === r3.mode && (r3.back = -1);
                  break;
                }
                for (r3.back = 0; g2 = (C2 = r3.lencode[u3 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b2 = 65535 & C2, !((_2 = C2 >>> 24) <= l3); ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (g2 && 0 == (240 & g2)) {
                  for (v2 = _2, y2 = g2, w2 = b2; g2 = (C2 = r3.lencode[w2 + ((u3 & (1 << v2 + y2) - 1) >> v2)]) >>> 16 & 255, b2 = 65535 & C2, !(v2 + (_2 = C2 >>> 24) <= l3); ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  u3 >>>= v2, l3 -= v2, r3.back += v2;
                }
                if (u3 >>>= _2, l3 -= _2, r3.back += _2, r3.length = b2, 0 === g2) {
                  r3.mode = 26;
                  break;
                }
                if (32 & g2) {
                  r3.back = -1, r3.mode = 12;
                  break;
                }
                if (64 & g2) {
                  e3.msg = "invalid literal/length code", r3.mode = 30;
                  break;
                }
                r3.extra = 15 & g2, r3.mode = 22;
              case 22:
                if (r3.extra) {
                  for (z2 = r3.extra; l3 < z2; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r3.length += u3 & (1 << r3.extra) - 1, u3 >>>= r3.extra, l3 -= r3.extra, r3.back += r3.extra;
                }
                r3.was = r3.length, r3.mode = 23;
              case 23:
                for (; g2 = (C2 = r3.distcode[u3 & (1 << r3.distbits) - 1]) >>> 16 & 255, b2 = 65535 & C2, !((_2 = C2 >>> 24) <= l3); ) {
                  if (0 === o3)
                    break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (0 == (240 & g2)) {
                  for (v2 = _2, y2 = g2, w2 = b2; g2 = (C2 = r3.distcode[w2 + ((u3 & (1 << v2 + y2) - 1) >> v2)]) >>> 16 & 255, b2 = 65535 & C2, !(v2 + (_2 = C2 >>> 24) <= l3); ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  u3 >>>= v2, l3 -= v2, r3.back += v2;
                }
                if (u3 >>>= _2, l3 -= _2, r3.back += _2, 64 & g2) {
                  e3.msg = "invalid distance code", r3.mode = 30;
                  break;
                }
                r3.offset = b2, r3.extra = 15 & g2, r3.mode = 24;
              case 24:
                if (r3.extra) {
                  for (z2 = r3.extra; l3 < z2; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r3.offset += u3 & (1 << r3.extra) - 1, u3 >>>= r3.extra, l3 -= r3.extra, r3.back += r3.extra;
                }
                if (r3.offset > r3.dmax) {
                  e3.msg = "invalid distance too far back", r3.mode = 30;
                  break;
                }
                r3.mode = 25;
              case 25:
                if (0 === h3)
                  break e;
                if (d2 = c3 - h3, r3.offset > d2) {
                  if ((d2 = r3.offset - d2) > r3.whave && r3.sane) {
                    e3.msg = "invalid distance too far back", r3.mode = 30;
                    break;
                  }
                  p2 = d2 > r3.wnext ? (d2 -= r3.wnext, r3.wsize - d2) : r3.wnext - d2, d2 > r3.length && (d2 = r3.length), m2 = r3.window;
                } else
                  m2 = i3, p2 = a3 - r3.offset, d2 = r3.length;
                for (h3 < d2 && (d2 = h3), h3 -= d2, r3.length -= d2; i3[a3++] = m2[p2++], --d2; )
                  ;
                0 === r3.length && (r3.mode = 21);
                break;
              case 26:
                if (0 === h3)
                  break e;
                i3[a3++] = r3.length, h3--, r3.mode = 21;
                break;
              case 27:
                if (r3.wrap) {
                  for (; l3 < 32; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 |= n3[s3++] << l3, l3 += 8;
                  }
                  if (c3 -= h3, e3.total_out += c3, r3.total += c3, c3 && (e3.adler = r3.check = r3.flags ? B2(r3.check, i3, c3, a3 - c3) : O2(r3.check, i3, c3, a3 - c3)), c3 = h3, (r3.flags ? u3 : L2(u3)) !== r3.check) {
                    e3.msg = "incorrect data check", r3.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r3.mode = 28;
              case 28:
                if (r3.wrap && r3.flags) {
                  for (; l3 < 32; ) {
                    if (0 === o3)
                      break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (u3 !== (4294967295 & r3.total)) {
                    e3.msg = "incorrect length check", r3.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r3.mode = 29;
              case 29:
                x2 = 1;
                break e;
              case 30:
                x2 = -3;
                break e;
              case 31:
                return -4;
              case 32:
              default:
                return U2;
            }
        return e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r3.hold = u3, r3.bits = l3, (r3.wsize || c3 !== e3.avail_out && r3.mode < 30 && (r3.mode < 27 || 4 !== t4)) && Z2(e3, e3.output, e3.next_out, c3 - e3.avail_out) ? (r3.mode = 31, -4) : (f3 -= e3.avail_in, c3 -= e3.avail_out, e3.total_in += f3, e3.total_out += c3, r3.total += c3, r3.wrap && c3 && (e3.adler = r3.check = r3.flags ? B2(r3.check, i3, c3, e3.next_out - c3) : O2(r3.check, i3, c3, e3.next_out - c3)), e3.data_type = r3.bits + (r3.last ? 64 : 0) + (12 === r3.mode ? 128 : 0) + (20 === r3.mode || 15 === r3.mode ? 256 : 0), (0 == f3 && 0 === c3 || 4 === t4) && x2 === N2 && (x2 = -5), x2);
      }, r2.inflateEnd = function(e3) {
        if (!e3 || !e3.state)
          return U2;
        var t4 = e3.state;
        return t4.window && (t4.window = null), e3.state = null, N2;
      }, r2.inflateGetHeader = function(e3, t4) {
        var r3;
        return e3 && e3.state ? 0 == (2 & (r3 = e3.state).wrap) ? U2 : ((r3.head = t4).done = false, N2) : U2;
      }, r2.inflateSetDictionary = function(e3, t4) {
        var r3, n3 = t4.length;
        return e3 && e3.state ? 0 !== (r3 = e3.state).wrap && 11 !== r3.mode ? U2 : 11 === r3.mode && O2(1, t4, n3, 0) !== r3.check ? -3 : Z2(e3, t4, n3, n3) ? (r3.mode = 31, -4) : (r3.havedict = 1, N2) : U2;
      }, r2.inflateInfo = "pako inflate (from Nodeca project)";
    }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(e2, t3, r2) {
      var D2 = e2("../utils/common"), F2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N2 = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U2 = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P2 = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      t3.exports = function(e3, t4, r3, n2, i2, s2, a2, o2) {
        var h2, u2, l2, f2, c2, d2, p2, m2, _2, g2 = o2.bits, b2 = 0, v2 = 0, y2 = 0, w2 = 0, k2 = 0, x2 = 0, S2 = 0, z2 = 0, C2 = 0, E2 = 0, A2 = null, I2 = 0, O2 = new D2.Buf16(16), B2 = new D2.Buf16(16), R2 = null, T2 = 0;
        for (b2 = 0; b2 <= 15; b2++)
          O2[b2] = 0;
        for (v2 = 0; v2 < n2; v2++)
          O2[t4[r3 + v2]]++;
        for (k2 = g2, w2 = 15; 1 <= w2 && 0 === O2[w2]; w2--)
          ;
        if (w2 < k2 && (k2 = w2), 0 === w2)
          return i2[s2++] = 20971520, i2[s2++] = 20971520, o2.bits = 1, 0;
        for (y2 = 1; y2 < w2 && 0 === O2[y2]; y2++)
          ;
        for (k2 < y2 && (k2 = y2), b2 = z2 = 1; b2 <= 15; b2++)
          if (z2 <<= 1, (z2 -= O2[b2]) < 0)
            return -1;
        if (0 < z2 && (0 === e3 || 1 !== w2))
          return -1;
        for (B2[1] = 0, b2 = 1; b2 < 15; b2++)
          B2[b2 + 1] = B2[b2] + O2[b2];
        for (v2 = 0; v2 < n2; v2++)
          0 !== t4[r3 + v2] && (a2[B2[t4[r3 + v2]]++] = v2);
        if (d2 = 0 === e3 ? (A2 = R2 = a2, 19) : 1 === e3 ? (A2 = F2, I2 -= 257, R2 = N2, T2 -= 257, 256) : (A2 = U2, R2 = P2, -1), b2 = y2, c2 = s2, S2 = v2 = E2 = 0, l2 = -1, f2 = (C2 = 1 << (x2 = k2)) - 1, 1 === e3 && 852 < C2 || 2 === e3 && 592 < C2)
          return 1;
        for (; ; ) {
          for (p2 = b2 - S2, _2 = a2[v2] < d2 ? (m2 = 0, a2[v2]) : a2[v2] > d2 ? (m2 = R2[T2 + a2[v2]], A2[I2 + a2[v2]]) : (m2 = 96, 0), h2 = 1 << b2 - S2, y2 = u2 = 1 << x2; i2[c2 + (E2 >> S2) + (u2 -= h2)] = p2 << 24 | m2 << 16 | _2 | 0, 0 !== u2; )
            ;
          for (h2 = 1 << b2 - 1; E2 & h2; )
            h2 >>= 1;
          if (0 !== h2 ? (E2 &= h2 - 1, E2 += h2) : E2 = 0, v2++, 0 == --O2[b2]) {
            if (b2 === w2)
              break;
            b2 = t4[r3 + a2[v2]];
          }
          if (k2 < b2 && (E2 & f2) !== l2) {
            for (0 === S2 && (S2 = k2), c2 += y2, z2 = 1 << (x2 = b2 - S2); x2 + S2 < w2 && !((z2 -= O2[x2 + S2]) <= 0); )
              x2++, z2 <<= 1;
            if (C2 += 1 << x2, 1 === e3 && 852 < C2 || 2 === e3 && 592 < C2)
              return 1;
            i2[l2 = E2 & f2] = k2 << 24 | x2 << 16 | c2 - s2 | 0;
          }
        }
        return 0 !== E2 && (i2[c2 + E2] = b2 - S2 << 24 | 64 << 16 | 0), o2.bits = k2, 0;
      };
    }, { "../utils/common": 41 }], 51: [function(e2, t3, r2) {
      t3.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
    }, {}], 52: [function(e2, t3, r2) {
      var i2 = e2("../utils/common"), o2 = 0, h2 = 1;
      function n2(e3) {
        for (var t4 = e3.length; 0 <= --t4; )
          e3[t4] = 0;
      }
      var s2 = 0, a2 = 29, u2 = 256, l2 = u2 + 1 + a2, f2 = 30, c2 = 19, _2 = 2 * l2 + 1, g2 = 15, d2 = 16, p2 = 7, m2 = 256, b2 = 16, v2 = 17, y2 = 18, w2 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k2 = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S2 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z2 = new Array(2 * (l2 + 2));
      n2(z2);
      var C2 = new Array(2 * f2);
      n2(C2);
      var E2 = new Array(512);
      n2(E2);
      var A2 = new Array(256);
      n2(A2);
      var I2 = new Array(a2);
      n2(I2);
      var O2, B2, R2, T2 = new Array(f2);
      function D2(e3, t4, r3, n3, i3) {
        this.static_tree = e3, this.extra_bits = t4, this.extra_base = r3, this.elems = n3, this.max_length = i3, this.has_stree = e3 && e3.length;
      }
      function F2(e3, t4) {
        this.dyn_tree = e3, this.max_code = 0, this.stat_desc = t4;
      }
      function N2(e3) {
        return e3 < 256 ? E2[e3] : E2[256 + (e3 >>> 7)];
      }
      function U2(e3, t4) {
        e3.pending_buf[e3.pending++] = 255 & t4, e3.pending_buf[e3.pending++] = t4 >>> 8 & 255;
      }
      function P2(e3, t4, r3) {
        e3.bi_valid > d2 - r3 ? (e3.bi_buf |= t4 << e3.bi_valid & 65535, U2(e3, e3.bi_buf), e3.bi_buf = t4 >> d2 - e3.bi_valid, e3.bi_valid += r3 - d2) : (e3.bi_buf |= t4 << e3.bi_valid & 65535, e3.bi_valid += r3);
      }
      function L2(e3, t4, r3) {
        P2(e3, r3[2 * t4], r3[2 * t4 + 1]);
      }
      function j2(e3, t4) {
        for (var r3 = 0; r3 |= 1 & e3, e3 >>>= 1, r3 <<= 1, 0 < --t4; )
          ;
        return r3 >>> 1;
      }
      function Z2(e3, t4, r3) {
        var n3, i3, s3 = new Array(g2 + 1), a3 = 0;
        for (n3 = 1; n3 <= g2; n3++)
          s3[n3] = a3 = a3 + r3[n3 - 1] << 1;
        for (i3 = 0; i3 <= t4; i3++) {
          var o3 = e3[2 * i3 + 1];
          0 !== o3 && (e3[2 * i3] = j2(s3[o3]++, o3));
        }
      }
      function W2(e3) {
        var t4;
        for (t4 = 0; t4 < l2; t4++)
          e3.dyn_ltree[2 * t4] = 0;
        for (t4 = 0; t4 < f2; t4++)
          e3.dyn_dtree[2 * t4] = 0;
        for (t4 = 0; t4 < c2; t4++)
          e3.bl_tree[2 * t4] = 0;
        e3.dyn_ltree[2 * m2] = 1, e3.opt_len = e3.static_len = 0, e3.last_lit = e3.matches = 0;
      }
      function M2(e3) {
        8 < e3.bi_valid ? U2(e3, e3.bi_buf) : 0 < e3.bi_valid && (e3.pending_buf[e3.pending++] = e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0;
      }
      function H2(e3, t4, r3, n3) {
        var i3 = 2 * t4, s3 = 2 * r3;
        return e3[i3] < e3[s3] || e3[i3] === e3[s3] && n3[t4] <= n3[r3];
      }
      function G2(e3, t4, r3) {
        for (var n3 = e3.heap[r3], i3 = r3 << 1; i3 <= e3.heap_len && (i3 < e3.heap_len && H2(t4, e3.heap[i3 + 1], e3.heap[i3], e3.depth) && i3++, !H2(t4, n3, e3.heap[i3], e3.depth)); )
          e3.heap[r3] = e3.heap[i3], r3 = i3, i3 <<= 1;
        e3.heap[r3] = n3;
      }
      function K2(e3, t4, r3) {
        var n3, i3, s3, a3, o3 = 0;
        if (0 !== e3.last_lit)
          for (; n3 = e3.pending_buf[e3.d_buf + 2 * o3] << 8 | e3.pending_buf[e3.d_buf + 2 * o3 + 1], i3 = e3.pending_buf[e3.l_buf + o3], o3++, 0 === n3 ? L2(e3, i3, t4) : (L2(e3, (s3 = A2[i3]) + u2 + 1, t4), 0 !== (a3 = w2[s3]) && P2(e3, i3 -= I2[s3], a3), L2(e3, s3 = N2(--n3), r3), 0 !== (a3 = k2[s3]) && P2(e3, n3 -= T2[s3], a3)), o3 < e3.last_lit; )
            ;
        L2(e3, m2, t4);
      }
      function Y2(e3, t4) {
        var r3, n3, i3, s3 = t4.dyn_tree, a3 = t4.stat_desc.static_tree, o3 = t4.stat_desc.has_stree, h3 = t4.stat_desc.elems, u3 = -1;
        for (e3.heap_len = 0, e3.heap_max = _2, r3 = 0; r3 < h3; r3++)
          0 !== s3[2 * r3] ? (e3.heap[++e3.heap_len] = u3 = r3, e3.depth[r3] = 0) : s3[2 * r3 + 1] = 0;
        for (; e3.heap_len < 2; )
          s3[2 * (i3 = e3.heap[++e3.heap_len] = u3 < 2 ? ++u3 : 0)] = 1, e3.depth[i3] = 0, e3.opt_len--, o3 && (e3.static_len -= a3[2 * i3 + 1]);
        for (t4.max_code = u3, r3 = e3.heap_len >> 1; 1 <= r3; r3--)
          G2(e3, s3, r3);
        for (i3 = h3; r3 = e3.heap[1], e3.heap[1] = e3.heap[e3.heap_len--], G2(e3, s3, 1), n3 = e3.heap[1], e3.heap[--e3.heap_max] = r3, e3.heap[--e3.heap_max] = n3, s3[2 * i3] = s3[2 * r3] + s3[2 * n3], e3.depth[i3] = (e3.depth[r3] >= e3.depth[n3] ? e3.depth[r3] : e3.depth[n3]) + 1, s3[2 * r3 + 1] = s3[2 * n3 + 1] = i3, e3.heap[1] = i3++, G2(e3, s3, 1), 2 <= e3.heap_len; )
          ;
        e3.heap[--e3.heap_max] = e3.heap[1], function(e4, t5) {
          var r4, n4, i4, s4, a4, o4, h4 = t5.dyn_tree, u4 = t5.max_code, l3 = t5.stat_desc.static_tree, f3 = t5.stat_desc.has_stree, c3 = t5.stat_desc.extra_bits, d4 = t5.stat_desc.extra_base, p3 = t5.stat_desc.max_length, m3 = 0;
          for (s4 = 0; s4 <= g2; s4++)
            e4.bl_count[s4] = 0;
          for (h4[2 * e4.heap[e4.heap_max] + 1] = 0, r4 = e4.heap_max + 1; r4 < _2; r4++)
            p3 < (s4 = h4[2 * h4[2 * (n4 = e4.heap[r4]) + 1] + 1] + 1) && (s4 = p3, m3++), h4[2 * n4 + 1] = s4, u4 < n4 || (e4.bl_count[s4]++, a4 = 0, d4 <= n4 && (a4 = c3[n4 - d4]), o4 = h4[2 * n4], e4.opt_len += o4 * (s4 + a4), f3 && (e4.static_len += o4 * (l3[2 * n4 + 1] + a4)));
          if (0 !== m3) {
            do {
              for (s4 = p3 - 1; 0 === e4.bl_count[s4]; )
                s4--;
              e4.bl_count[s4]--, e4.bl_count[s4 + 1] += 2, e4.bl_count[p3]--, m3 -= 2;
            } while (0 < m3);
            for (s4 = p3; 0 !== s4; s4--)
              for (n4 = e4.bl_count[s4]; 0 !== n4; )
                u4 < (i4 = e4.heap[--r4]) || (h4[2 * i4 + 1] !== s4 && (e4.opt_len += (s4 - h4[2 * i4 + 1]) * h4[2 * i4], h4[2 * i4 + 1] = s4), n4--);
          }
        }(e3, t4), Z2(s3, u3, e3.bl_count);
      }
      function X2(e3, t4, r3) {
        var n3, i3, s3 = -1, a3 = t4[1], o3 = 0, h3 = 7, u3 = 4;
        for (0 === a3 && (h3 = 138, u3 = 3), t4[2 * (r3 + 1) + 1] = 65535, n3 = 0; n3 <= r3; n3++)
          i3 = a3, a3 = t4[2 * (n3 + 1) + 1], ++o3 < h3 && i3 === a3 || (o3 < u3 ? e3.bl_tree[2 * i3] += o3 : 0 !== i3 ? (i3 !== s3 && e3.bl_tree[2 * i3]++, e3.bl_tree[2 * b2]++) : o3 <= 10 ? e3.bl_tree[2 * v2]++ : e3.bl_tree[2 * y2]++, s3 = i3, u3 = (o3 = 0) === a3 ? (h3 = 138, 3) : i3 === a3 ? (h3 = 6, 3) : (h3 = 7, 4));
      }
      function V2(e3, t4, r3) {
        var n3, i3, s3 = -1, a3 = t4[1], o3 = 0, h3 = 7, u3 = 4;
        for (0 === a3 && (h3 = 138, u3 = 3), n3 = 0; n3 <= r3; n3++)
          if (i3 = a3, a3 = t4[2 * (n3 + 1) + 1], !(++o3 < h3 && i3 === a3)) {
            if (o3 < u3)
              for (; L2(e3, i3, e3.bl_tree), 0 != --o3; )
                ;
            else
              0 !== i3 ? (i3 !== s3 && (L2(e3, i3, e3.bl_tree), o3--), L2(e3, b2, e3.bl_tree), P2(e3, o3 - 3, 2)) : o3 <= 10 ? (L2(e3, v2, e3.bl_tree), P2(e3, o3 - 3, 3)) : (L2(e3, y2, e3.bl_tree), P2(e3, o3 - 11, 7));
            s3 = i3, u3 = (o3 = 0) === a3 ? (h3 = 138, 3) : i3 === a3 ? (h3 = 6, 3) : (h3 = 7, 4);
          }
      }
      n2(T2);
      var q2 = false;
      function J2(e3, t4, r3, n3) {
        P2(e3, (s2 << 1) + (n3 ? 1 : 0), 3), function(e4, t5, r4, n4) {
          M2(e4), n4 && (U2(e4, r4), U2(e4, ~r4)), i2.arraySet(e4.pending_buf, e4.window, t5, r4, e4.pending), e4.pending += r4;
        }(e3, t4, r3, true);
      }
      r2._tr_init = function(e3) {
        q2 || (function() {
          var e4, t4, r3, n3, i3, s3 = new Array(g2 + 1);
          for (n3 = r3 = 0; n3 < a2 - 1; n3++)
            for (I2[n3] = r3, e4 = 0; e4 < 1 << w2[n3]; e4++)
              A2[r3++] = n3;
          for (A2[r3 - 1] = n3, n3 = i3 = 0; n3 < 16; n3++)
            for (T2[n3] = i3, e4 = 0; e4 < 1 << k2[n3]; e4++)
              E2[i3++] = n3;
          for (i3 >>= 7; n3 < f2; n3++)
            for (T2[n3] = i3 << 7, e4 = 0; e4 < 1 << k2[n3] - 7; e4++)
              E2[256 + i3++] = n3;
          for (t4 = 0; t4 <= g2; t4++)
            s3[t4] = 0;
          for (e4 = 0; e4 <= 143; )
            z2[2 * e4 + 1] = 8, e4++, s3[8]++;
          for (; e4 <= 255; )
            z2[2 * e4 + 1] = 9, e4++, s3[9]++;
          for (; e4 <= 279; )
            z2[2 * e4 + 1] = 7, e4++, s3[7]++;
          for (; e4 <= 287; )
            z2[2 * e4 + 1] = 8, e4++, s3[8]++;
          for (Z2(z2, l2 + 1, s3), e4 = 0; e4 < f2; e4++)
            C2[2 * e4 + 1] = 5, C2[2 * e4] = j2(e4, 5);
          O2 = new D2(z2, w2, u2 + 1, l2, g2), B2 = new D2(C2, k2, 0, f2, g2), R2 = new D2(new Array(0), x2, 0, c2, p2);
        }(), q2 = true), e3.l_desc = new F2(e3.dyn_ltree, O2), e3.d_desc = new F2(e3.dyn_dtree, B2), e3.bl_desc = new F2(e3.bl_tree, R2), e3.bi_buf = 0, e3.bi_valid = 0, W2(e3);
      }, r2._tr_stored_block = J2, r2._tr_flush_block = function(e3, t4, r3, n3) {
        var i3, s3, a3 = 0;
        0 < e3.level ? (2 === e3.strm.data_type && (e3.strm.data_type = function(e4) {
          var t5, r4 = 4093624447;
          for (t5 = 0; t5 <= 31; t5++, r4 >>>= 1)
            if (1 & r4 && 0 !== e4.dyn_ltree[2 * t5])
              return o2;
          if (0 !== e4.dyn_ltree[18] || 0 !== e4.dyn_ltree[20] || 0 !== e4.dyn_ltree[26])
            return h2;
          for (t5 = 32; t5 < u2; t5++)
            if (0 !== e4.dyn_ltree[2 * t5])
              return h2;
          return o2;
        }(e3)), Y2(e3, e3.l_desc), Y2(e3, e3.d_desc), a3 = function(e4) {
          var t5;
          for (X2(e4, e4.dyn_ltree, e4.l_desc.max_code), X2(e4, e4.dyn_dtree, e4.d_desc.max_code), Y2(e4, e4.bl_desc), t5 = c2 - 1; 3 <= t5 && 0 === e4.bl_tree[2 * S2[t5] + 1]; t5--)
            ;
          return e4.opt_len += 3 * (t5 + 1) + 5 + 5 + 4, t5;
        }(e3), i3 = e3.opt_len + 3 + 7 >>> 3, (s3 = e3.static_len + 3 + 7 >>> 3) <= i3 && (i3 = s3)) : i3 = s3 = r3 + 5, r3 + 4 <= i3 && -1 !== t4 ? J2(e3, t4, r3, n3) : 4 === e3.strategy || s3 === i3 ? (P2(e3, 2 + (n3 ? 1 : 0), 3), K2(e3, z2, C2)) : (P2(e3, 4 + (n3 ? 1 : 0), 3), function(e4, t5, r4, n4) {
          var i4;
          for (P2(e4, t5 - 257, 5), P2(e4, r4 - 1, 5), P2(e4, n4 - 4, 4), i4 = 0; i4 < n4; i4++)
            P2(e4, e4.bl_tree[2 * S2[i4] + 1], 3);
          V2(e4, e4.dyn_ltree, t5 - 1), V2(e4, e4.dyn_dtree, r4 - 1);
        }(e3, e3.l_desc.max_code + 1, e3.d_desc.max_code + 1, a3 + 1), K2(e3, e3.dyn_ltree, e3.dyn_dtree)), W2(e3), n3 && M2(e3);
      }, r2._tr_tally = function(e3, t4, r3) {
        return e3.pending_buf[e3.d_buf + 2 * e3.last_lit] = t4 >>> 8 & 255, e3.pending_buf[e3.d_buf + 2 * e3.last_lit + 1] = 255 & t4, e3.pending_buf[e3.l_buf + e3.last_lit] = 255 & r3, e3.last_lit++, 0 === t4 ? e3.dyn_ltree[2 * r3]++ : (e3.matches++, t4--, e3.dyn_ltree[2 * (A2[r3] + u2 + 1)]++, e3.dyn_dtree[2 * N2(t4)]++), e3.last_lit === e3.lit_bufsize - 1;
      }, r2._tr_align = function(e3) {
        P2(e3, 2, 3), L2(e3, m2, z2), function(e4) {
          16 === e4.bi_valid ? (U2(e4, e4.bi_buf), e4.bi_buf = 0, e4.bi_valid = 0) : 8 <= e4.bi_valid && (e4.pending_buf[e4.pending++] = 255 & e4.bi_buf, e4.bi_buf >>= 8, e4.bi_valid -= 8);
        }(e3);
      };
    }, { "../utils/common": 41 }], 53: [function(e2, t3, r2) {
      t3.exports = function() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      };
    }, {}], 54: [function(e2, t3, r2) {
      (function(e3) {
        !function(r3, n2) {
          if (!r3.setImmediate) {
            var i2, s2, t4, a2, o2 = 1, h2 = {}, u2 = false, l2 = r3.document, e4 = Object.getPrototypeOf && Object.getPrototypeOf(r3);
            e4 = e4 && e4.setTimeout ? e4 : r3, i2 = "[object process]" === {}.toString.call(r3.process) ? function(e5) {
              process.nextTick(function() {
                c2(e5);
              });
            } : function() {
              if (r3.postMessage && !r3.importScripts) {
                var e5 = true, t5 = r3.onmessage;
                return r3.onmessage = function() {
                  e5 = false;
                }, r3.postMessage("", "*"), r3.onmessage = t5, e5;
              }
            }() ? (a2 = "setImmediate$" + Math.random() + "$", r3.addEventListener ? r3.addEventListener("message", d2, false) : r3.attachEvent("onmessage", d2), function(e5) {
              r3.postMessage(a2 + e5, "*");
            }) : r3.MessageChannel ? ((t4 = new MessageChannel()).port1.onmessage = function(e5) {
              c2(e5.data);
            }, function(e5) {
              t4.port2.postMessage(e5);
            }) : l2 && "onreadystatechange" in l2.createElement("script") ? (s2 = l2.documentElement, function(e5) {
              var t5 = l2.createElement("script");
              t5.onreadystatechange = function() {
                c2(e5), t5.onreadystatechange = null, s2.removeChild(t5), t5 = null;
              }, s2.appendChild(t5);
            }) : function(e5) {
              setTimeout(c2, 0, e5);
            }, e4.setImmediate = function(e5) {
              "function" != typeof e5 && (e5 = new Function("" + e5));
              for (var t5 = new Array(arguments.length - 1), r4 = 0; r4 < t5.length; r4++)
                t5[r4] = arguments[r4 + 1];
              var n3 = { callback: e5, args: t5 };
              return h2[o2] = n3, i2(o2), o2++;
            }, e4.clearImmediate = f2;
          }
          function f2(e5) {
            delete h2[e5];
          }
          function c2(e5) {
            if (u2)
              setTimeout(c2, 0, e5);
            else {
              var t5 = h2[e5];
              if (t5) {
                u2 = true;
                try {
                  !function(e6) {
                    var t6 = e6.callback, r4 = e6.args;
                    switch (r4.length) {
                      case 0:
                        t6();
                        break;
                      case 1:
                        t6(r4[0]);
                        break;
                      case 2:
                        t6(r4[0], r4[1]);
                        break;
                      case 3:
                        t6(r4[0], r4[1], r4[2]);
                        break;
                      default:
                        t6.apply(n2, r4);
                    }
                  }(t5);
                } finally {
                  f2(e5), u2 = false;
                }
              }
            }
          }
          function d2(e5) {
            e5.source === r3 && "string" == typeof e5.data && 0 === e5.data.indexOf(a2) && c2(+e5.data.slice(a2.length));
          }
        }("undefined" == typeof self ? void 0 === e3 ? this : e3 : self);
      }).call(this, "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}] }, {}, [10])(10);
  });
})(jszip_min);
var jszip_minExports = jszip_min.exports;
const JSZip = /* @__PURE__ */ getDefaultExportFromCjs(jszip_minExports);
const Dropdown_svelte_svelte_type_style_lang = "";
function create_fragment$n(ctx) {
  let li;
  let a2;
  let t0;
  let span;
  let t1;
  let ul;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  return {
    c() {
      li = element$1("li");
      a2 = element$1("a");
      t0 = text(
        /*name*/
        ctx[0]
      );
      span = element$1("span");
      t1 = space();
      ul = element$1("ul");
      if (default_slot)
        default_slot.c();
      attr(span, "class", "caret");
      attr(a2, "href", "#");
      attr(a2, "class", "dropdown-toggle svelte-1oq006n");
      attr(a2, "data-toggle", "dropdown");
      attr(a2, "role", "button");
      attr(a2, "aria-haspopup", "true");
      attr(a2, "aria-expanded", "false");
      attr(a2, "draggable", "false");
      toggle_class(
        a2,
        "minimal",
        /*minimal*/
        ctx[1]
      );
      attr(ul, "class", "dropdown-menu");
      attr(li, "class", "dropdown");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, a2);
      append(a2, t0);
      append(a2, span);
      append(li, t1);
      append(li, ul);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      1)
        set_data(
          t0,
          /*name*/
          ctx2[0]
        );
      if (!current || dirty & /*minimal*/
      2) {
        toggle_class(
          a2,
          "minimal",
          /*minimal*/
          ctx2[1]
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { name: name2 } = $$props;
  let { minimal = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name2 = $$props2.name);
    if ("minimal" in $$props2)
      $$invalidate(1, minimal = $$props2.minimal);
    if ("$$scope" in $$props2)
      $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [name2, minimal, $$scope, slots];
}
class Dropdown extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$A, create_fragment$n, safe_not_equal, { name: 0, minimal: 1 });
  }
}
function get_each_context$4(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list2[i2];
  return child_ctx;
}
function create_if_block$5(ctx) {
  let li;
  return {
    c() {
      li = element$1("li");
      attr(li, "class", "divider");
    },
    m(target, anchor) {
      insert(target, li, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(li);
    }
  };
}
function create_each_block$4(ctx) {
  let li;
  let a2;
  let t0_value = (
    /*item*/
    ctx[4].name + ""
  );
  let t0;
  let t1;
  let if_block_anchor;
  let mounted;
  let dispose;
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[3](
        /*item*/
        ctx[4],
        ...args
      )
    );
  }
  let if_block = (
    /*item*/
    ctx[4].divider && create_if_block$5()
  );
  return {
    c() {
      li = element$1("li");
      a2 = element$1("a");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(a2, "href", "#");
      toggle_class(
        li,
        "disabled",
        /*item*/
        ctx[4].disable
      );
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, a2);
      append(a2, t0);
      insert(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      if (!mounted) {
        dispose = listen(a2, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*menuItems*/
      1 && t0_value !== (t0_value = /*item*/
      ctx[4].name + ""))
        set_data(t0, t0_value);
      if (dirty & /*menuItems*/
      1) {
        toggle_class(
          li,
          "disabled",
          /*item*/
          ctx[4].disable
        );
      }
      if (
        /*item*/
        ctx[4].divider
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block$5();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(li);
      if (detaching)
        detach(t1);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot$8(ctx) {
  let each_1_anchor;
  let each_value = (
    /*menuItems*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$4(get_each_context$4(ctx, each_value, i2));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*menuItems, handleClick*/
      1) {
        each_value = /*menuItems*/
        ctx2[0];
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$4(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_fragment$m(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      minimal: (
        /*minimal*/
        ctx[2]
      ),
      name: (
        /*name*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*minimal*/
      4)
        dropdown_changes.minimal = /*minimal*/
        ctx2[2];
      if (dirty & /*name*/
      2)
        dropdown_changes.name = /*name*/
        ctx2[1];
      if (dirty & /*$$scope, menuItems*/
      129) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function handleClick(event3, item) {
  if (!item.disable) {
    item.action(event3);
  }
}
function instance$z($$self, $$props, $$invalidate) {
  let { menuItems } = $$props;
  let { name: name2 } = $$props;
  let { minimal = false } = $$props;
  const click_handler = (item, event3) => handleClick(event3, item);
  $$self.$$set = ($$props2) => {
    if ("menuItems" in $$props2)
      $$invalidate(0, menuItems = $$props2.menuItems);
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("minimal" in $$props2)
      $$invalidate(2, minimal = $$props2.minimal);
  };
  return [menuItems, name2, minimal, click_handler];
}
class DropDownLinks extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$z, create_fragment$m, safe_not_equal, { menuItems: 0, name: 1, minimal: 2 });
  }
}
var cytoscapeSvg = { exports: {} };
(function(module, exports) {
  !function(t3, e2) {
    module.exports = e2();
  }(window, function() {
    return function(t3) {
      var e2 = {};
      function r2(i2) {
        if (e2[i2])
          return e2[i2].exports;
        var n2 = e2[i2] = { i: i2, l: false, exports: {} };
        return t3[i2].call(n2.exports, n2, n2.exports, r2), n2.l = true, n2.exports;
      }
      return r2.m = t3, r2.c = e2, r2.d = function(t4, e3, i2) {
        r2.o(t4, e3) || Object.defineProperty(t4, e3, { enumerable: true, get: i2 });
      }, r2.r = function(t4) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
      }, r2.t = function(t4, e3) {
        if (1 & e3 && (t4 = r2(t4)), 8 & e3)
          return t4;
        if (4 & e3 && "object" == typeof t4 && t4 && t4.__esModule)
          return t4;
        var i2 = /* @__PURE__ */ Object.create(null);
        if (r2.r(i2), Object.defineProperty(i2, "default", { enumerable: true, value: t4 }), 2 & e3 && "string" != typeof t4)
          for (var n2 in t4)
            r2.d(i2, n2, (function(e4) {
              return t4[e4];
            }).bind(null, n2));
        return i2;
      }, r2.n = function(t4) {
        var e3 = t4 && t4.__esModule ? function() {
          return t4.default;
        } : function() {
          return t4;
        };
        return r2.d(e3, "a", e3), e3;
      }, r2.o = function(t4, e3) {
        return Object.prototype.hasOwnProperty.call(t4, e3);
      }, r2.p = "", r2(r2.s = 0);
    }([function(t3, e2, r2) {
      var i2 = r2(1), n2 = function(t4) {
        t4 && t4("core", "svg", i2.svg);
      };
      "undefined" != typeof cytoscape && n2(cytoscape), t3.exports = n2;
    }, function(t3, e2, r2) {
      var i2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
        return typeof t4;
      } : function(t4) {
        return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
      }, n2 = r2(2), o2 = {}, s2 = {};
      s2.number = function(t4) {
        return null != t4 && (void 0 === t4 ? "undefined" : i2(t4)) === i2(1) && !isNaN(t4);
      }, o2.bufferCanvasImage = function(t4, e3) {
        var r3 = e3.renderer().usePaths;
        e3.renderer().usePaths = function() {
          return false;
        }, e3.elements().forEach(function(t5) {
          t5._private.rscratch.pathCacheKey = null, t5._private.rscratch.pathCache = null;
        });
        var i3 = e3.renderer(), o3 = e3.mutableElements().boundingBox(), a2 = i3.findContainerClientCoords(), l2 = t4.full ? Math.ceil(o3.w) : a2[2], h2 = t4.full ? Math.ceil(o3.h) : a2[3], c2 = s2.number(t4.maxWidth) || s2.number(t4.maxHeight), p2 = i3.getPixelRatio(), u2 = 1;
        if (void 0 !== t4.scale)
          l2 *= t4.scale, h2 *= t4.scale, u2 = t4.scale;
        else if (c2) {
          var _2 = 1 / 0, d2 = 1 / 0;
          s2.number(t4.maxWidth) && (_2 = u2 * t4.maxWidth / l2), s2.number(t4.maxHeight) && (d2 = u2 * t4.maxHeight / h2), l2 *= u2 = Math.min(_2, d2), h2 *= u2;
        }
        c2 || (l2 *= p2, h2 *= p2, u2 *= p2);
        var f2 = null, g2 = f2 = new n2(l2, h2);
        if (l2 > 0 && h2 > 0) {
          f2.clearRect(0, 0, l2, h2), t4.bg && (f2.globalCompositeOperation = "destination-over", f2.fillStyle = t4.bg, f2.fillRect(0, 0, l2, h2)), f2.globalCompositeOperation = "source-over";
          var m2 = i3.getCachedZSortedEles();
          if (t4.full)
            f2.translate(-o3.x1 * u2, -o3.y1 * u2), f2.scale(u2, u2), i3.drawElements(f2, m2), f2.scale(1 / u2, 1 / u2), f2.translate(o3.x1 * u2, o3.y1 * u2);
          else {
            var y2 = e3.pan(), v2 = { x: y2.x * u2, y: y2.y * u2 };
            u2 *= e3.zoom(), f2.translate(v2.x, v2.y), f2.scale(u2, u2), i3.drawElements(f2, m2), f2.scale(1 / u2, 1 / u2), f2.translate(-v2.x, -v2.y);
          }
        }
        return e3.renderer().usePaths = r3, g2;
      }, o2.svg = function(t4) {
        return o2.bufferCanvasImage(t4 || {}, this).getSerializedSvg();
      }, t3.exports = o2;
    }, function(t3, e2, r2) {
      !function() {
        var e3, r3, i2, n2, o2;
        function s2(t4, e4) {
          var r4, i3 = Object.keys(e4);
          for (r4 = 0; r4 < i3.length; r4++)
            t4 = t4.replace(new RegExp("\\{" + i3[r4] + "\\}", "gi"), e4[i3[r4]]);
          return t4;
        }
        function a2(t4) {
          var e4, r4, i3;
          if (!t4)
            throw new Error("cannot create a random attribute name for an undefined object");
          e4 = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz", r4 = "";
          do {
            for (r4 = "", i3 = 0; i3 < 12; i3++)
              r4 += e4[Math.floor(Math.random() * e4.length)];
          } while (t4[r4]);
          return r4;
        }
        function l2(t4) {
          var e4 = { alphabetic: "alphabetic", hanging: "hanging", top: "text-before-edge", bottom: "text-after-edge", middle: "central" };
          return e4[t4] || e4.alphabetic;
        }
        o2 = function(t4, e4) {
          var r4, i3, n3, o3 = {};
          for (t4 = t4.split(","), e4 = e4 || 10, r4 = 0; r4 < t4.length; r4 += 2)
            i3 = "&" + t4[r4 + 1] + ";", n3 = parseInt(t4[r4], e4), o3[i3] = "&#" + n3 + ";";
          return o3["\\xa0"] = "&#160;", o3;
        }("50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,t9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro", 32), e3 = { strokeStyle: { svgAttr: "stroke", canvas: "#000000", svg: "none", apply: "stroke" }, fillStyle: { svgAttr: "fill", canvas: "#000000", svg: null, apply: "fill" }, lineCap: { svgAttr: "stroke-linecap", canvas: "butt", svg: "butt", apply: "stroke" }, lineJoin: { svgAttr: "stroke-linejoin", canvas: "miter", svg: "miter", apply: "stroke" }, miterLimit: { svgAttr: "stroke-miterlimit", canvas: 10, svg: 4, apply: "stroke" }, lineWidth: { svgAttr: "stroke-width", canvas: 1, svg: 1, apply: "stroke" }, globalAlpha: { svgAttr: "opacity", canvas: 1, svg: 1, apply: "fill stroke" }, font: { canvas: "10px sans-serif" }, shadowColor: { canvas: "#000000" }, shadowOffsetX: { canvas: 0 }, shadowOffsetY: { canvas: 0 }, shadowBlur: { canvas: 0 }, textAlign: { canvas: "start" }, textBaseline: { canvas: "alphabetic" }, lineDash: { svgAttr: "stroke-dasharray", canvas: [], svg: null, apply: "stroke" } }, (i2 = function(t4, e4) {
          this.__root = t4, this.__ctx = e4;
        }).prototype.addColorStop = function(t4, e4) {
          var r4, i3 = this.__ctx.__createElement("stop");
          i3.setAttribute("offset", t4), -1 !== e4.indexOf("rgba") ? (r4 = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(e4), i3.setAttribute("stop-color", s2("rgb({r},{g},{b})", { r: r4[1], g: r4[2], b: r4[3] })), i3.setAttribute("stop-opacity", r4[4])) : i3.setAttribute("stop-color", e4), this.__root.appendChild(i3);
        }, n2 = function(t4, e4) {
          this.__root = t4, this.__ctx = e4;
        }, (r3 = function(t4) {
          var e4, i3 = { width: 500, height: 500, enableMirroring: false };
          if (arguments.length > 1 ? ((e4 = i3).width = arguments[0], e4.height = arguments[1]) : e4 = t4 || i3, !(this instanceof r3))
            return new r3(e4);
          this.width = e4.width || i3.width, this.height = e4.height || i3.height, this.enableMirroring = void 0 !== e4.enableMirroring ? e4.enableMirroring : i3.enableMirroring, this.canvas = this, this.__document = e4.document || document, e4.ctx ? this.__ctx = e4.ctx : (this.__canvas = this.__document.createElement("canvas"), this.__ctx = this.__canvas.getContext("2d")), this.__setDefaultStyles(), this.__stack = [this.__getStyleState()], this.__groupStack = [], this.__root = this.__document.createElementNS("http://www.w3.org/2000/svg", "svg"), this.__root.setAttribute("version", 1.1), this.__root.setAttribute("xmlns", "http://www.w3.org/2000/svg"), this.__root.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink"), this.__root.setAttribute("width", this.width), this.__root.setAttribute("height", this.height), this.__ids = {}, this.__defs = this.__document.createElementNS("http://www.w3.org/2000/svg", "defs"), this.__root.appendChild(this.__defs), this.__currentElement = this.__document.createElementNS("http://www.w3.org/2000/svg", "g"), this.__root.appendChild(this.__currentElement);
        }).prototype.__createElement = function(t4, e4, r4) {
          void 0 === e4 && (e4 = {});
          var i3, n3, o3 = this.__document.createElementNS("http://www.w3.org/2000/svg", t4), s3 = Object.keys(e4);
          for (r4 && (o3.setAttribute("fill", "none"), o3.setAttribute("stroke", "none")), i3 = 0; i3 < s3.length; i3++)
            n3 = s3[i3], o3.setAttribute(n3, e4[n3]);
          return o3;
        }, r3.prototype.__setDefaultStyles = function() {
          var t4, r4, i3 = Object.keys(e3);
          for (t4 = 0; t4 < i3.length; t4++)
            this[r4 = i3[t4]] = e3[r4].canvas;
        }, r3.prototype.__applyStyleState = function(t4) {
          if (t4) {
            var e4, r4, i3 = Object.keys(t4);
            for (e4 = 0; e4 < i3.length; e4++)
              this[r4 = i3[e4]] = t4[r4];
          }
        }, r3.prototype.__getStyleState = function() {
          var t4, r4, i3 = {}, n3 = Object.keys(e3);
          for (t4 = 0; t4 < n3.length; t4++)
            i3[r4 = n3[t4]] = this[r4];
          return i3;
        }, r3.prototype.__applyStyleToCurrentElement = function(t4) {
          var r4 = this.__currentElement;
          this.__currentElementsToStyle;
          var o3, a3, l3, h3, c2, p2 = Object.keys(e3);
          for (o3 = 0; o3 < p2.length; o3++)
            if (a3 = e3[p2[o3]], l3 = this[p2[o3]], a3.apply) {
              if (l3 instanceof n2) {
                if (l3.__ctx)
                  for (; l3.__ctx.__defs.childNodes.length; )
                    h3 = l3.__ctx.__defs.childNodes[0].getAttribute("id"), this.__ids[h3] = h3, this.__defs.appendChild(l3.__ctx.__defs.childNodes[0]);
                r4.setAttribute(a3.apply, s2("url(#{id})", { id: l3.__root.getAttribute("id") }));
              } else if (l3 instanceof i2)
                r4.setAttribute(a3.apply, s2("url(#{id})", { id: l3.__root.getAttribute("id") }));
              else if (-1 !== a3.apply.indexOf(t4) && a3.svg !== l3)
                if ("stroke" !== a3.svgAttr && "fill" !== a3.svgAttr || -1 === l3.indexOf("rgba")) {
                  var u2 = a3.svgAttr;
                  if ("globalAlpha" === p2[o3] && (u2 = t4 + "-" + a3.svgAttr, r4.getAttribute(u2)))
                    continue;
                  r4.setAttribute(u2, l3);
                } else {
                  c2 = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(l3), r4.setAttribute(a3.svgAttr, s2("rgb({r},{g},{b})", { r: c2[1], g: c2[2], b: c2[3] }));
                  var _2 = c2[4], d2 = this.globalAlpha;
                  null != d2 && (_2 *= d2), r4.setAttribute(a3.svgAttr + "-opacity", _2);
                }
            }
        }, r3.prototype.__closestGroupOrSvg = function(t4) {
          return "g" === (t4 = t4 || this.__currentElement).nodeName || "svg" === t4.nodeName ? t4 : this.__closestGroupOrSvg(t4.parentNode);
        }, r3.prototype.getSerializedSvg = function(t4) {
          var e4, r4, i3, n3, s3, a3 = new XMLSerializer().serializeToString(this.__root);
          if (/xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi.test(a3) && (a3 = a3.replace('xmlns="http://www.w3.org/2000/svg', 'xmlns:xlink="http://www.w3.org/1999/xlink')), t4)
            for (e4 = Object.keys(o2), r4 = 0; r4 < e4.length; r4++)
              i3 = e4[r4], n3 = o2[i3], (s3 = new RegExp(i3, "gi")).test(a3) && (a3 = a3.replace(s3, n3));
          return a3;
        }, r3.prototype.getSvg = function() {
          return this.__root;
        }, r3.prototype.save = function() {
          var t4 = this.__createElement("g"), e4 = this.__closestGroupOrSvg();
          this.__groupStack.push(e4), e4.appendChild(t4), this.__currentElement = t4, this.__stack.push(this.__getStyleState());
        }, r3.prototype.restore = function() {
          this.__currentElement = this.__groupStack.pop(), this.__currentElementsToStyle = null, this.__currentElement || (this.__currentElement = this.__root.childNodes[1]);
          var t4 = this.__stack.pop();
          this.__applyStyleState(t4);
        }, r3.prototype.__addTransform = function(t4) {
          var e4 = this.__closestGroupOrSvg();
          if (e4.childNodes.length > 0) {
            "path" === this.__currentElement.nodeName && (this.__currentElementsToStyle || (this.__currentElementsToStyle = { element: e4, children: [] }), this.__currentElementsToStyle.children.push(this.__currentElement), this.__applyCurrentDefaultPath());
            var r4 = this.__createElement("g");
            e4.appendChild(r4), this.__currentElement = r4;
          }
          var i3 = this.__currentElement.getAttribute("transform");
          i3 ? i3 += " " : i3 = "", i3 += t4, this.__currentElement.setAttribute("transform", i3);
        }, r3.prototype.scale = function(t4, e4) {
          void 0 === e4 && (e4 = t4), this.__addTransform(s2("scale({x},{y})", { x: t4, y: e4 }));
        }, r3.prototype.rotate = function(t4) {
          var e4 = 180 * t4 / Math.PI;
          this.__addTransform(s2("rotate({angle},{cx},{cy})", { angle: e4, cx: 0, cy: 0 }));
        }, r3.prototype.translate = function(t4, e4) {
          this.__addTransform(s2("translate({x},{y})", { x: t4, y: e4 }));
        }, r3.prototype.transform = function(t4, e4, r4, i3, n3, o3) {
          this.__addTransform(s2("matrix({a},{b},{c},{d},{e},{f})", { a: t4, b: e4, c: r4, d: i3, e: n3, f: o3 }));
        }, r3.prototype.beginPath = function() {
          var t4;
          this.__currentDefaultPath = "", this.__currentPosition = {}, t4 = this.__createElement("path", {}, true), this.__closestGroupOrSvg().appendChild(t4), this.__currentElement = t4;
        }, r3.prototype.__applyCurrentDefaultPath = function() {
          var t4 = this.__currentElement;
          "path" === t4.nodeName ? t4.setAttribute("d", this.__currentDefaultPath) : console.error("Attempted to apply path command to node", t4.nodeName);
        }, r3.prototype.__addPathCommand = function(t4) {
          this.__currentDefaultPath += " ", this.__currentDefaultPath += t4;
        }, r3.prototype.moveTo = function(t4, e4) {
          "path" !== this.__currentElement.nodeName && this.beginPath(), this.__currentPosition = { x: t4, y: e4 }, this.__addPathCommand(s2("M {x} {y}", { x: t4, y: e4 }));
        }, r3.prototype.closePath = function() {
          this.__currentDefaultPath && this.__addPathCommand("Z");
        }, r3.prototype.lineTo = function(t4, e4) {
          this.__currentPosition = { x: t4, y: e4 }, this.__currentDefaultPath.indexOf("M") > -1 ? this.__addPathCommand(s2("L {x} {y}", { x: t4, y: e4 })) : this.__addPathCommand(s2("M {x} {y}", { x: t4, y: e4 }));
        }, r3.prototype.bezierCurveTo = function(t4, e4, r4, i3, n3, o3) {
          this.__currentPosition = { x: n3, y: o3 }, this.__addPathCommand(s2("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}", { cp1x: t4, cp1y: e4, cp2x: r4, cp2y: i3, x: n3, y: o3 }));
        }, r3.prototype.quadraticCurveTo = function(t4, e4, r4, i3) {
          this.__currentPosition = { x: r4, y: i3 }, this.__addPathCommand(s2("Q {cpx} {cpy} {x} {y}", { cpx: t4, cpy: e4, x: r4, y: i3 }));
        };
        var h2 = function(t4) {
          var e4 = Math.sqrt(t4[0] * t4[0] + t4[1] * t4[1]);
          return [t4[0] / e4, t4[1] / e4];
        };
        r3.prototype.arcTo = function(t4, e4, r4, i3, n3) {
          var o3 = this.__currentPosition && this.__currentPosition.x, s3 = this.__currentPosition && this.__currentPosition.y;
          if (void 0 !== o3 && void 0 !== s3) {
            if (n3 < 0)
              throw new Error("IndexSizeError: The radius provided (" + n3 + ") is negative.");
            if (o3 === t4 && s3 === e4 || t4 === r4 && e4 === i3 || 0 === n3)
              this.lineTo(t4, e4);
            else {
              var a3 = h2([o3 - t4, s3 - e4]), l3 = h2([r4 - t4, i3 - e4]);
              if (a3[0] * l3[1] != a3[1] * l3[0]) {
                var c2 = a3[0] * l3[0] + a3[1] * l3[1], p2 = Math.acos(Math.abs(c2)), u2 = h2([a3[0] + l3[0], a3[1] + l3[1]]), _2 = n3 / Math.sin(p2 / 2), d2 = t4 + _2 * u2[0], f2 = e4 + _2 * u2[1], g2 = [-a3[1], a3[0]], m2 = [l3[1], -l3[0]], y2 = function(t5) {
                  var e5 = t5[0];
                  return t5[1] >= 0 ? Math.acos(e5) : -Math.acos(e5);
                }, v2 = y2(g2), b2 = y2(m2);
                this.lineTo(d2 + g2[0] * n3, f2 + g2[1] * n3), this.arc(d2, f2, n3, v2, b2);
              } else
                this.lineTo(t4, e4);
            }
          }
        }, r3.prototype.stroke = function() {
          "path" === this.__currentElement.nodeName && this.__currentElement.setAttribute("paint-order", "fill stroke markers"), this.__applyCurrentDefaultPath(), this.__applyStyleToCurrentElement("stroke");
        }, r3.prototype.fill = function() {
          "path" === this.__currentElement.nodeName && this.__currentElement.setAttribute("paint-order", "stroke fill markers"), this.__applyCurrentDefaultPath(), this.__applyStyleToCurrentElement("fill");
        }, r3.prototype.rect = function(t4, e4, r4, i3) {
          "path" !== this.__currentElement.nodeName && this.beginPath(), this.moveTo(t4, e4), this.lineTo(t4 + r4, e4), this.lineTo(t4 + r4, e4 + i3), this.lineTo(t4, e4 + i3), this.lineTo(t4, e4), this.closePath();
        }, r3.prototype.fillRect = function(t4, e4, r4, i3) {
          var n3;
          n3 = this.__createElement("rect", { x: t4, y: e4, width: r4, height: i3 }, true), this.__closestGroupOrSvg().appendChild(n3), this.__currentElement = n3, this.__applyStyleToCurrentElement("fill");
        }, r3.prototype.strokeRect = function(t4, e4, r4, i3) {
          var n3;
          n3 = this.__createElement("rect", { x: t4, y: e4, width: r4, height: i3 }, true), this.__closestGroupOrSvg().appendChild(n3), this.__currentElement = n3, this.__applyStyleToCurrentElement("stroke");
        }, r3.prototype.__clearCanvas = function() {
          for (var t4 = this.__closestGroupOrSvg().getAttribute("transform"), e4 = this.__root.childNodes[1], r4 = e4.childNodes, i3 = r4.length - 1; i3 >= 0; i3--)
            r4[i3] && e4.removeChild(r4[i3]);
          this.__currentElement = e4, this.__groupStack = [], t4 && this.__addTransform(t4);
        }, r3.prototype.clearRect = function(t4, e4, r4, i3) {
          if (0 !== t4 || 0 !== e4 || r4 !== this.width || i3 !== this.height) {
            var n3, o3 = this.__closestGroupOrSvg();
            n3 = this.__createElement("rect", { x: t4, y: e4, width: r4, height: i3, fill: "#FFFFFF" }, true), o3.appendChild(n3);
          } else
            this.__clearCanvas();
        }, r3.prototype.createLinearGradient = function(t4, e4, r4, n3) {
          var o3 = this.__createElement("linearGradient", { id: a2(this.__ids), x1: t4 + "px", x2: r4 + "px", y1: e4 + "px", y2: n3 + "px", gradientUnits: "userSpaceOnUse" }, false);
          return this.__defs.appendChild(o3), new i2(o3, this);
        }, r3.prototype.createRadialGradient = function(t4, e4, r4, n3, o3, s3) {
          var l3 = this.__createElement("radialGradient", { id: a2(this.__ids), cx: n3 + "px", cy: o3 + "px", r: s3 + "px", fx: t4 + "px", fy: e4 + "px", gradientUnits: "userSpaceOnUse" }, false);
          return this.__defs.appendChild(l3), new i2(l3, this);
        }, r3.prototype.__parseFont = function() {
          var t4 = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\'\"\sa-z0-9]+?)\s*$/i.exec(this.font), e4 = { style: t4[1] || "normal", size: t4[4] || "10px", family: t4[6] || "sans-serif", weight: t4[3] || "normal", decoration: t4[2] || "normal", href: null };
          return "underline" === this.__fontUnderline && (e4.decoration = "underline"), this.__fontHref && (e4.href = this.__fontHref), e4;
        }, r3.prototype.__wrapTextLink = function(t4, e4) {
          if (t4.href) {
            var r4 = this.__createElement("a");
            return r4.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", t4.href), r4.appendChild(e4), r4;
          }
          return e4;
        }, r3.prototype.__applyText = function(t4, e4, r4, i3) {
          var n3, o3, s3 = this.__parseFont(), a3 = this.__closestGroupOrSvg(), h3 = this.__createElement("text", { "font-family": s3.family, "font-size": s3.size, "font-style": s3.style, "font-weight": s3.weight, "text-decoration": s3.decoration, x: e4, y: r4, "text-anchor": (n3 = this.textAlign, o3 = { left: "start", right: "end", center: "middle", start: "start", end: "end" }, o3[n3] || o3.start), "dominant-baseline": l2(this.textBaseline) }, true);
          h3.appendChild(this.__document.createTextNode(t4)), this.__currentElement = h3, this.__applyStyleToCurrentElement(i3), a3.appendChild(this.__wrapTextLink(s3, h3));
        }, r3.prototype.fillText = function(t4, e4, r4) {
          this.__applyText(t4, e4, r4, "fill");
        }, r3.prototype.strokeText = function(t4, e4, r4) {
          this.__applyText(t4, e4, r4, "stroke");
        }, r3.prototype.measureText = function(t4) {
          return this.__ctx.font = this.font, this.__ctx.measureText(t4);
        }, r3.prototype.arc = function(t4, e4, r4, i3, n3, o3) {
          if (i3 !== n3) {
            (i3 %= 2 * Math.PI) === (n3 %= 2 * Math.PI) && (n3 = (n3 + 2 * Math.PI - 1e-3 * (o3 ? -1 : 1)) % (2 * Math.PI));
            var a3 = t4 + r4 * Math.cos(n3), l3 = e4 + r4 * Math.sin(n3), h3 = t4 + r4 * Math.cos(i3), c2 = e4 + r4 * Math.sin(i3), p2 = o3 ? 0 : 1, u2 = 0, _2 = n3 - i3;
            _2 < 0 && (_2 += 2 * Math.PI), u2 = o3 ? _2 > Math.PI ? 0 : 1 : _2 > Math.PI ? 1 : 0, this.lineTo(h3, c2), this.__addPathCommand(s2("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}", { rx: r4, ry: r4, xAxisRotation: 0, largeArcFlag: u2, sweepFlag: p2, endX: a3, endY: l3 })), this.__currentPosition = { x: a3, y: l3 };
          }
        }, r3.prototype.clip = function() {
          var t4 = this.__closestGroupOrSvg(), e4 = this.__createElement("clipPath"), r4 = a2(this.__ids), i3 = this.__createElement("g");
          this.__applyCurrentDefaultPath(), t4.removeChild(this.__currentElement), e4.setAttribute("id", r4), e4.appendChild(this.__currentElement), this.__defs.appendChild(e4), t4.setAttribute("clip-path", s2("url(#{id})", { id: r4 })), t4.appendChild(i3), this.__currentElement = i3;
        }, r3.prototype.drawImage = function() {
          var t4, e4, i3, n3, o3, s3, a3, l3, h3, c2, p2, u2, _2, d2 = Array.prototype.slice.call(arguments), f2 = d2[0], g2 = 0, m2 = 0;
          if (3 === d2.length)
            t4 = d2[1], e4 = d2[2], i3 = o3 = f2.width, n3 = s3 = f2.height;
          else if (5 === d2.length)
            t4 = d2[1], e4 = d2[2], i3 = d2[3], n3 = d2[4], o3 = f2.width, s3 = f2.height;
          else {
            if (9 !== d2.length)
              throw new Error("Inavlid number of arguments passed to drawImage: " + arguments.length);
            g2 = d2[1], m2 = d2[2], o3 = d2[3], s3 = d2[4], t4 = d2[5], e4 = d2[6], i3 = d2[7], n3 = d2[8];
          }
          a3 = this.__closestGroupOrSvg(), this.__currentElement;
          var y2 = "translate(" + t4 + ", " + e4 + ")";
          if (f2 instanceof r3) {
            if ((l3 = f2.getSvg().cloneNode(true)).childNodes && l3.childNodes.length > 1) {
              for (h3 = l3.childNodes[0]; h3.childNodes.length; )
                _2 = h3.childNodes[0].getAttribute("id"), this.__ids[_2] = _2, this.__defs.appendChild(h3.childNodes[0]);
              if (c2 = l3.childNodes[1]) {
                var v2, b2 = c2.getAttribute("transform");
                v2 = b2 ? b2 + " " + y2 : y2, c2.setAttribute("transform", v2), a3.appendChild(c2);
              }
            }
          } else
            "CANVAS" !== f2.nodeName && "IMG" !== f2.nodeName || ((p2 = this.__createElement("image")).setAttribute("width", i3), p2.setAttribute("height", n3), p2.setAttribute("opacity", this.globalAlpha), p2.setAttribute("preserveAspectRatio", "none"), (u2 = this.__document.createElement("canvas")).width = i3, u2.height = n3, u2.getContext("2d").drawImage(f2, g2, m2, o3, s3, 0, 0, i3, n3), f2 = u2, p2.setAttribute("transform", y2), p2.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "CANVAS" === f2.nodeName ? f2.toDataURL() : f2.getAttribute("src")), a3.appendChild(p2));
        }, r3.prototype.createPattern = function(t4, e4) {
          var i3, o3 = this.__document.createElementNS("http://www.w3.org/2000/svg", "pattern"), s3 = a2(this.__ids);
          return o3.setAttribute("id", s3), o3.setAttribute("width", t4.width), o3.setAttribute("height", t4.height), "CANVAS" === t4.nodeName || "IMG" === t4.nodeName ? ((i3 = this.__document.createElementNS("http://www.w3.org/2000/svg", "image")).setAttribute("width", t4.width), i3.setAttribute("height", t4.height), i3.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "CANVAS" === t4.nodeName ? t4.toDataURL() : t4.getAttribute("src")), o3.appendChild(i3), this.__defs.appendChild(o3)) : t4 instanceof r3 && (o3.appendChild(t4.__root.childNodes[1]), this.__defs.appendChild(o3)), new n2(o3, this);
        }, r3.prototype.setLineDash = function(t4) {
          t4 && t4.length > 0 ? this.lineDash = t4.join(",") : this.lineDash = null;
        }, r3.prototype.drawFocusRing = function() {
        }, r3.prototype.createImageData = function() {
        }, r3.prototype.getImageData = function() {
        }, r3.prototype.putImageData = function() {
        }, r3.prototype.globalCompositeOperation = function() {
        }, r3.prototype.setTransform = function() {
        }, "object" == typeof window && (window.C2S = r3), "object" == typeof t3.exports && (t3.exports = r3);
      }();
    }]);
  });
})(cytoscapeSvg);
var cytoscapeSvgExports = cytoscapeSvg.exports;
const svg = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeSvgExports);
var FileSaver_min = { exports: {} };
(function(module, exports) {
  (function(a2, b2) {
    b2();
  })(commonjsGlobal, function() {
    function b2(a3, b3) {
      return "undefined" == typeof b3 ? b3 = { autoBom: false } : "object" != typeof b3 && (console.warn("Deprecated: Expected third argument to be a object"), b3 = { autoBom: !b3 }), b3.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a3.type) ? new Blob(["\uFEFF", a3], { type: a3.type }) : a3;
    }
    function c2(a3, b3, c3) {
      var d4 = new XMLHttpRequest();
      d4.open("GET", a3), d4.responseType = "blob", d4.onload = function() {
        g2(d4.response, b3, c3);
      }, d4.onerror = function() {
        console.error("could not download file");
      }, d4.send();
    }
    function d2(a3) {
      var b3 = new XMLHttpRequest();
      b3.open("HEAD", a3, false);
      try {
        b3.send();
      } catch (a4) {
      }
      return 200 <= b3.status && 299 >= b3.status;
    }
    function e2(a3) {
      try {
        a3.dispatchEvent(new MouseEvent("click"));
      } catch (c3) {
        var b3 = document.createEvent("MouseEvents");
        b3.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a3.dispatchEvent(b3);
      }
    }
    var f2 = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof commonjsGlobal && commonjsGlobal.global === commonjsGlobal ? commonjsGlobal : void 0, a2 = f2.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g2 = f2.saveAs || ("object" != typeof window || window !== f2 ? function() {
    } : "download" in HTMLAnchorElement.prototype && !a2 ? function(b3, g3, h2) {
      var i2 = f2.URL || f2.webkitURL, j2 = document.createElement("a");
      g3 = g3 || b3.name || "download", j2.download = g3, j2.rel = "noopener", "string" == typeof b3 ? (j2.href = b3, j2.origin === location.origin ? e2(j2) : d2(j2.href) ? c2(b3, g3, h2) : e2(j2, j2.target = "_blank")) : (j2.href = i2.createObjectURL(b3), setTimeout(function() {
        i2.revokeObjectURL(j2.href);
      }, 4e4), setTimeout(function() {
        e2(j2);
      }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function(f3, g3, h2) {
      if (g3 = g3 || f3.name || "download", "string" != typeof f3)
        navigator.msSaveOrOpenBlob(b2(f3, h2), g3);
      else if (d2(f3))
        c2(f3, g3, h2);
      else {
        var i2 = document.createElement("a");
        i2.href = f3, i2.target = "_blank", setTimeout(function() {
          e2(i2);
        });
      }
    } : function(b3, d4, e3, g3) {
      if (g3 = g3 || open("", "_blank"), g3 && (g3.document.title = g3.document.body.innerText = "downloading..."), "string" == typeof b3)
        return c2(b3, d4, e3);
      var h2 = "application/octet-stream" === b3.type, i2 = /constructor/i.test(f2.HTMLElement) || f2.safari, j2 = /CriOS\/[\d]+/.test(navigator.userAgent);
      if ((j2 || h2 && i2 || a2) && "undefined" != typeof FileReader) {
        var k2 = new FileReader();
        k2.onloadend = function() {
          var a3 = k2.result;
          a3 = j2 ? a3 : a3.replace(/^data:[^;]*;/, "data:attachment/file;"), g3 ? g3.location.href = a3 : location = a3, g3 = null;
        }, k2.readAsDataURL(b3);
      } else {
        var l2 = f2.URL || f2.webkitURL, m2 = l2.createObjectURL(b3);
        g3 ? g3.location = m2 : location.href = m2, g3 = null, setTimeout(function() {
          l2.revokeObjectURL(m2);
        }, 4e4);
      }
    });
    f2.saveAs = g2.saveAs = g2, module.exports = g2;
  });
})(FileSaver_min);
var FileSaver_minExports = FileSaver_min.exports;
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i2 = links.length - 1; i2 >= 0; i2--) {
        const link2 = links[i2];
        if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule()).catch((err) => {
    const e2 = new Event("vite:preloadError", { cancelable: true });
    e2.payload = err;
    window.dispatchEvent(e2);
    if (!e2.defaultPrevented) {
      throw err;
    }
  });
};
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start) {
  var b2 = new u16(31);
  for (var i2 = 0; i2 < 31; ++i2) {
    b2[i2] = start += 1 << eb[i2 - 1];
  }
  var r2 = new u32(b2[30]);
  for (var i2 = 1; i2 < 30; ++i2) {
    for (var j2 = b2[i2]; j2 < b2[i2 + 1]; ++j2) {
      r2[j2] = j2 - b2[i2] << 5 | i2;
    }
  }
  return [b2, r2];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
var rev = new u16(32768);
for (var i$2 = 0; i$2 < 32768; ++i$2) {
  var x$3 = (i$2 & 43690) >>> 1 | (i$2 & 21845) << 1;
  x$3 = (x$3 & 52428) >>> 2 | (x$3 & 13107) << 2;
  x$3 = (x$3 & 61680) >>> 4 | (x$3 & 3855) << 4;
  rev[i$2] = ((x$3 & 65280) >>> 8 | (x$3 & 255) << 8) >>> 1;
}
var hMap = function(cd, mb, r2) {
  var s2 = cd.length;
  var i2 = 0;
  var l2 = new u16(mb);
  for (; i2 < s2; ++i2)
    ++l2[cd[i2] - 1];
  var le2 = new u16(mb);
  for (i2 = 0; i2 < mb; ++i2) {
    le2[i2] = le2[i2 - 1] + l2[i2 - 1] << 1;
  }
  var co;
  if (r2) {
    co = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i2 = 0; i2 < s2; ++i2) {
      if (cd[i2]) {
        var sv = i2 << 4 | cd[i2];
        var r_1 = mb - cd[i2];
        var v2 = le2[cd[i2] - 1]++ << r_1;
        for (var m2 = v2 | (1 << r_1) - 1; v2 <= m2; ++v2) {
          co[rev[v2] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s2);
    for (i2 = 0; i2 < s2; ++i2)
      co[i2] = rev[le2[cd[i2] - 1]++] >>> 15 - cd[i2];
  }
  return co;
};
var flt = new u8(288);
for (var i$2 = 0; i$2 < 144; ++i$2)
  flt[i$2] = 8;
for (var i$2 = 144; i$2 < 256; ++i$2)
  flt[i$2] = 9;
for (var i$2 = 256; i$2 < 280; ++i$2)
  flt[i$2] = 7;
for (var i$2 = 280; i$2 < 288; ++i$2)
  flt[i$2] = 8;
var fdt = new u8(32);
for (var i$2 = 0; i$2 < 32; ++i$2)
  fdt[i$2] = 5;
var flm = /* @__PURE__ */ hMap(flt, 9, 0), flrm = /* @__PURE__ */ hMap(flt, 9, 1);
var fdm = /* @__PURE__ */ hMap(fdt, 5, 0), fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
var max4 = function(a2) {
  var m2 = a2[0];
  for (var i2 = 1; i2 < a2.length; ++i2) {
    if (a2[i2] > m2)
      m2 = a2[i2];
  }
  return m2;
};
var bits = function(d2, p2, m2) {
  var o2 = p2 / 8 >> 0;
  return (d2[o2] | d2[o2 + 1] << 8) >>> (p2 & 7) & m2;
};
var bits16 = function(d2, p2) {
  var o2 = p2 / 8 >> 0;
  return (d2[o2] | d2[o2 + 1] << 8 | d2[o2 + 2] << 16) >>> (p2 & 7);
};
var shft = function(p2) {
  return (p2 / 8 >> 0) + (p2 & 7 && 1);
};
var slc = function(v2, s2, e2) {
  if (s2 == null || s2 < 0)
    s2 = 0;
  if (e2 == null || e2 > v2.length)
    e2 = v2.length;
  var n2 = new (v2 instanceof u16 ? u16 : v2 instanceof u32 ? u32 : u8)(e2 - s2);
  n2.set(v2.subarray(s2, e2));
  return n2;
};
var inflt = function(dat, buf, st2) {
  var sl = dat.length;
  var noBuf = !buf || st2;
  var noSt = !st2 || st2.i;
  if (!st2)
    st2 = {};
  if (!buf)
    buf = new u8(sl * 3);
  var cbuf = function(l3) {
    var bl = buf.length;
    if (l3 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l3));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st2.f || 0, pos = st2.p || 0, bt2 = st2.b || 0, lm = st2.l, dm = st2.d, lbt = st2.m, dbt = st2.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      st2.f = final = bits(dat, pos, 1);
      var type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        var s2 = shft(pos) + 4, l2 = dat[s2 - 4] | dat[s2 - 3] << 8, t3 = s2 + l2;
        if (t3 > sl) {
          if (noSt)
            throw "unexpected EOF";
          break;
        }
        if (noBuf)
          cbuf(bt2 + l2);
        buf.set(dat.subarray(s2, t3), bt2);
        st2.b = bt2 += l2, st2.p = pos = t3 * 8;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i2 = 0; i2 < hcLen; ++i2) {
          clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max4(clt), clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts)
          break;
        var clm = hMap(clt, clb, 1);
        for (var i2 = 0; i2 < tl; ) {
          var r2 = clm[bits(dat, pos, clbmsk)];
          pos += r2 & 15;
          var s2 = r2 >>> 4;
          if (s2 < 16) {
            ldt[i2++] = s2;
          } else {
            var c2 = 0, n2 = 0;
            if (s2 == 16)
              n2 = 3 + bits(dat, pos, 3), pos += 2, c2 = ldt[i2 - 1];
            else if (s2 == 17)
              n2 = 3 + bits(dat, pos, 7), pos += 3;
            else if (s2 == 18)
              n2 = 11 + bits(dat, pos, 127), pos += 7;
            while (n2--)
              ldt[i2++] = c2;
          }
        }
        var lt2 = ldt.subarray(0, hLit), dt2 = ldt.subarray(hLit);
        lbt = max4(lt2);
        dbt = max4(dt2);
        lm = hMap(lt2, lbt, 1);
        dm = hMap(dt2, dbt, 1);
      } else
        throw "invalid block type";
      if (pos > tbts)
        throw "unexpected EOF";
    }
    if (noBuf)
      cbuf(bt2 + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var mxa = lbt + dbt + 18;
    while (noSt || pos + mxa < tbts) {
      var c2 = lm[bits16(dat, pos) & lms], sym = c2 >>> 4;
      pos += c2 & 15;
      if (pos > tbts)
        throw "unexpected EOF";
      if (!c2)
        throw "invalid length/literal";
      if (sym < 256)
        buf[bt2++] = sym;
      else if (sym == 256) {
        lm = null;
        break;
      } else {
        var add3 = sym - 254;
        if (sym > 264) {
          var i2 = sym - 257, b2 = fleb[i2];
          add3 = bits(dat, pos, (1 << b2) - 1) + fl[i2];
          pos += b2;
        }
        var d2 = dm[bits16(dat, pos) & dms], dsym = d2 >>> 4;
        if (!d2)
          throw "invalid distance";
        pos += d2 & 15;
        var dt2 = fd[dsym];
        if (dsym > 3) {
          var b2 = fdeb[dsym];
          dt2 += bits16(dat, pos) & (1 << b2) - 1, pos += b2;
        }
        if (pos > tbts)
          throw "unexpected EOF";
        if (noBuf)
          cbuf(bt2 + 131072);
        var end = bt2 + add3;
        for (; bt2 < end; bt2 += 4) {
          buf[bt2] = buf[bt2 - dt2];
          buf[bt2 + 1] = buf[bt2 + 1 - dt2];
          buf[bt2 + 2] = buf[bt2 + 2 - dt2];
          buf[bt2 + 3] = buf[bt2 + 3 - dt2];
        }
        bt2 = end;
      }
    }
    st2.l = lm, st2.p = pos, st2.b = bt2;
    if (lm)
      final = 1, st2.m = lbt, st2.d = dm, st2.n = dbt;
  } while (!final);
  return bt2 == buf.length ? buf : slc(buf, 0, bt2);
};
var wbits = function(d2, p2, v2) {
  v2 <<= p2 & 7;
  var o2 = p2 / 8 >> 0;
  d2[o2] |= v2;
  d2[o2 + 1] |= v2 >>> 8;
};
var wbits16 = function(d2, p2, v2) {
  v2 <<= p2 & 7;
  var o2 = p2 / 8 >> 0;
  d2[o2] |= v2;
  d2[o2 + 1] |= v2 >>> 8;
  d2[o2 + 2] |= v2 >>> 16;
};
var hTree = function(d2, mb) {
  var t3 = [];
  for (var i2 = 0; i2 < d2.length; ++i2) {
    if (d2[i2])
      t3.push({ s: i2, f: d2[i2] });
  }
  var s2 = t3.length;
  var t22 = t3.slice();
  if (!s2)
    return [new u8(0), 0];
  if (s2 == 1) {
    var v2 = new u8(t3[0].s + 1);
    v2[t3[0].s] = 1;
    return [v2, 1];
  }
  t3.sort(function(a2, b2) {
    return a2.f - b2.f;
  });
  t3.push({ s: -1, f: 25001 });
  var l2 = t3[0], r2 = t3[1], i0 = 0, i1 = 1, i22 = 2;
  t3[0] = { s: -1, f: l2.f + r2.f, l: l2, r: r2 };
  while (i1 != s2 - 1) {
    l2 = t3[t3[i0].f < t3[i22].f ? i0++ : i22++];
    r2 = t3[i0 != i1 && t3[i0].f < t3[i22].f ? i0++ : i22++];
    t3[i1++] = { s: -1, f: l2.f + r2.f, l: l2, r: r2 };
  }
  var maxSym = t22[0].s;
  for (var i2 = 1; i2 < s2; ++i2) {
    if (t22[i2].s > maxSym)
      maxSym = t22[i2].s;
  }
  var tr = new u16(maxSym + 1);
  var mbt = ln(t3[i1 - 1], tr, 0);
  if (mbt > mb) {
    var i2 = 0, dt2 = 0;
    var lft = mbt - mb, cst = 1 << lft;
    t22.sort(function(a2, b2) {
      return tr[b2.s] - tr[a2.s] || a2.f - b2.f;
    });
    for (; i2 < s2; ++i2) {
      var i2_1 = t22[i2].s;
      if (tr[i2_1] > mb) {
        dt2 += cst - (1 << mbt - tr[i2_1]);
        tr[i2_1] = mb;
      } else
        break;
    }
    dt2 >>>= lft;
    while (dt2 > 0) {
      var i2_2 = t22[i2].s;
      if (tr[i2_2] < mb)
        dt2 -= 1 << mb - tr[i2_2]++ - 1;
      else
        ++i2;
    }
    for (; i2 >= 0 && dt2; --i2) {
      var i2_3 = t22[i2].s;
      if (tr[i2_3] == mb) {
        --tr[i2_3];
        ++dt2;
      }
    }
    mbt = mb;
  }
  return [new u8(tr), mbt];
};
var ln = function(n2, l2, d2) {
  return n2.s == -1 ? Math.max(ln(n2.l, l2, d2 + 1), ln(n2.r, l2, d2 + 1)) : l2[n2.s] = d2;
};
var lc = function(c2) {
  var s2 = c2.length;
  while (s2 && !c2[--s2])
    ;
  var cl = new u16(++s2);
  var cli = 0, cln = c2[0], cls = 1;
  var w2 = function(v2) {
    cl[cli++] = v2;
  };
  for (var i2 = 1; i2 <= s2; ++i2) {
    if (c2[i2] == cln && i2 != s2)
      ++cls;
    else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138)
          w2(32754);
        if (cls > 2) {
          w2(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w2(cln), --cls;
        for (; cls > 6; cls -= 6)
          w2(8304);
        if (cls > 2)
          w2(cls - 3 << 5 | 8208), cls = 0;
      }
      while (cls--)
        w2(cln);
      cls = 1;
      cln = c2[i2];
    }
  }
  return [cl.subarray(0, cli), s2];
};
var clen = function(cf, cl) {
  var l2 = 0;
  for (var i2 = 0; i2 < cl.length; ++i2)
    l2 += cf[i2] * cl[i2];
  return l2;
};
var wfblk = function(out, pos, dat) {
  var s2 = dat.length;
  var o2 = shft(pos + 2);
  out[o2] = s2 & 255;
  out[o2 + 1] = s2 >>> 8;
  out[o2 + 2] = out[o2] ^ 255;
  out[o2 + 3] = out[o2 + 1] ^ 255;
  for (var i2 = 0; i2 < s2; ++i2)
    out[o2 + i2 + 4] = dat[i2];
  return (o2 + 4 + s2) * 8;
};
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p2) {
  wbits(out, p2++, final);
  ++lf[256];
  var _a2 = hTree(lf, 15), dlt = _a2[0], mlb = _a2[1];
  var _b2 = hTree(df, 15), ddt = _b2[0], mdb = _b2[1];
  var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
  var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
  var lcfreq = new u16(19);
  for (var i2 = 0; i2 < lclt.length; ++i2)
    lcfreq[lclt[i2] & 31]++;
  for (var i2 = 0; i2 < lcdt.length; ++i2)
    lcfreq[lcdt[i2] & 31]++;
  var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
  var nlcc = 19;
  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
    ;
  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
  if (flen <= ftlen && flen <= dtlen)
    return wfblk(out, p2, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p2, 1 + (dtlen < ftlen)), p2 += 2;
  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p2, nlc - 257);
    wbits(out, p2 + 5, ndc - 1);
    wbits(out, p2 + 10, nlcc - 4);
    p2 += 14;
    for (var i2 = 0; i2 < nlcc; ++i2)
      wbits(out, p2 + 3 * i2, lct[clim[i2]]);
    p2 += 3 * nlcc;
    var lcts = [lclt, lcdt];
    for (var it2 = 0; it2 < 2; ++it2) {
      var clct = lcts[it2];
      for (var i2 = 0; i2 < clct.length; ++i2) {
        var len = clct[i2] & 31;
        wbits(out, p2, llm[len]), p2 += lct[len];
        if (len > 15)
          wbits(out, p2, clct[i2] >>> 5 & 127), p2 += clct[i2] >>> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }
  for (var i2 = 0; i2 < li; ++i2) {
    if (syms[i2] > 255) {
      var len = syms[i2] >>> 18 & 31;
      wbits16(out, p2, lm[len + 257]), p2 += ll[len + 257];
      if (len > 7)
        wbits(out, p2, syms[i2] >>> 23 & 31), p2 += fleb[len];
      var dst = syms[i2] & 31;
      wbits16(out, p2, dm[dst]), p2 += dl[dst];
      if (dst > 3)
        wbits16(out, p2, syms[i2] >>> 5 & 8191), p2 += fdeb[dst];
    } else {
      wbits16(out, p2, lm[syms[i2]]), p2 += ll[syms[i2]];
    }
  }
  wbits16(out, p2, lm[256]);
  return p2 + ll[256];
};
var deo = /* @__PURE__ */ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var et$2 = /* @__PURE__ */ new u8(0);
var dflt = function(dat, lvl, plvl, pre, post, lst) {
  var s2 = dat.length;
  var o2 = new u8(pre + s2 + 5 * (1 + Math.floor(s2 / 7e3)) + post);
  var w2 = o2.subarray(pre, o2.length - post);
  var pos = 0;
  if (!lvl || s2 < 8) {
    for (var i2 = 0; i2 <= s2; i2 += 65535) {
      var e2 = i2 + 65535;
      if (e2 < s2) {
        pos = wfblk(w2, pos, dat.subarray(i2, e2));
      } else {
        w2[i2] = lst;
        pos = wfblk(w2, pos, dat.subarray(i2, s2));
      }
    }
  } else {
    var opt = deo[lvl - 1];
    var n2 = opt >>> 13, c2 = opt & 8191;
    var msk_1 = (1 << plvl) - 1;
    var prev = new u16(32768), head = new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
    var hsh = function(i3) {
      return (dat[i3] ^ dat[i3 + 1] << bs1_1 ^ dat[i3 + 2] << bs2_1) & msk_1;
    };
    var syms = new u32(25e3);
    var lf = new u16(288), df = new u16(32);
    var lc_1 = 0, eb = 0, i2 = 0, li = 0, wi = 0, bs = 0;
    for (; i2 < s2; ++i2) {
      var hv = hsh(i2);
      var imod = i2 & 32767;
      var pimod = head[hv];
      prev[imod] = pimod;
      head[hv] = imod;
      if (wi <= i2) {
        var rem = s2 - i2;
        if ((lc_1 > 7e3 || li > 24576) && rem > 423) {
          pos = wblk(dat, w2, 0, syms, lf, df, eb, li, bs, i2 - bs, pos);
          li = lc_1 = eb = 0, bs = i2;
          for (var j2 = 0; j2 < 286; ++j2)
            lf[j2] = 0;
          for (var j2 = 0; j2 < 30; ++j2)
            df[j2] = 0;
        }
        var l2 = 2, d2 = 0, ch_1 = c2, dif = imod - pimod & 32767;
        if (rem > 2 && hv == hsh(i2 - dif)) {
          var maxn = Math.min(n2, rem) - 1;
          var maxd = Math.min(32767, i2);
          var ml = Math.min(258, rem);
          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i2 + l2] == dat[i2 + l2 - dif]) {
              var nl = 0;
              for (; nl < ml && dat[i2 + nl] == dat[i2 + nl - dif]; ++nl)
                ;
              if (nl > l2) {
                l2 = nl, d2 = dif;
                if (nl > maxn)
                  break;
                var mmd = Math.min(dif, nl - 2);
                var md = 0;
                for (var j2 = 0; j2 < mmd; ++j2) {
                  var ti = i2 - dif + j2 + 32768 & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti + 32768 & 32767;
                  if (cd > md)
                    md = cd, pimod = ti;
                }
              }
            }
            imod = pimod, pimod = prev[imod];
            dif += imod - pimod + 32768 & 32767;
          }
        }
        if (d2) {
          syms[li++] = 268435456 | revfl[l2] << 18 | revfd[d2];
          var lin = revfl[l2] & 31, din = revfd[d2] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i2 + l2;
          ++lc_1;
        } else {
          syms[li++] = dat[i2];
          ++lf[dat[i2]];
        }
      }
    }
    pos = wblk(dat, w2, lst, syms, lf, df, eb, li, bs, i2 - bs, pos);
    if (!lst)
      pos = wfblk(w2, pos, et$2);
  }
  return slc(o2, 0, pre + shft(pos) + post);
};
var adler = function() {
  var a2 = 1, b2 = 0;
  return {
    p: function(d2) {
      var n2 = a2, m2 = b2;
      var l2 = d2.length;
      for (var i2 = 0; i2 != l2; ) {
        var e2 = Math.min(i2 + 5552, l2);
        for (; i2 < e2; ++i2)
          n2 += d2[i2], m2 += n2;
        n2 %= 65521, m2 %= 65521;
      }
      a2 = n2, b2 = m2;
    },
    d: function() {
      return (a2 >>> 8 << 16 | (b2 & 255) << 8 | b2 >>> 8) + ((a2 & 255) << 23) * 2;
    }
  };
};
var dopt = function(dat, opt, pre, post, st2) {
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st2);
};
var wbytes = function(d2, b2, v2) {
  for (; v2; ++b2)
    d2[b2] = v2, v2 >>>= 8;
};
var zlh = function(c2, o2) {
  var lv = o2.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c2[0] = 120, c2[1] = fl2 << 6 | (fl2 ? 32 - 2 * fl2 : 1);
};
var zlv = function(d2) {
  if ((d2[0] & 15) != 8 || d2[0] >>> 4 > 7 || (d2[0] << 8 | d2[1]) % 31)
    throw "invalid zlib data";
  if (d2[1] & 32)
    throw "invalid zlib data: preset dictionaries not supported";
};
function zlibSync(data4, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var a2 = adler();
  a2.p(data4);
  var d2 = dopt(data4, opts, 2, 4);
  return zlh(d2, opts), wbytes(d2, d2.length - 4, a2.d()), d2;
}
function unzlibSync(data4, out) {
  return inflt((zlv(data4), data4.subarray(2, -4)), out);
}
var n$1 = function() {
  return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();
function i$1() {
  n$1.console && "function" == typeof n$1.console.log && n$1.console.log.apply(n$1.console, arguments);
}
var a$1 = { log: i$1, warn: function(t3) {
  n$1.console && ("function" == typeof n$1.console.warn ? n$1.console.warn.apply(n$1.console, arguments) : i$1.call(null, arguments));
}, error: function(t3) {
  n$1.console && ("function" == typeof n$1.console.error ? n$1.console.error.apply(n$1.console, arguments) : i$1(t3));
} };
function o$1(t3, e2, r2) {
  var n2 = new XMLHttpRequest();
  n2.open("GET", t3), n2.responseType = "blob", n2.onload = function() {
    l(n2.response, e2, r2);
  }, n2.onerror = function() {
    a$1.error("could not download file");
  }, n2.send();
}
function s$1(t3) {
  var e2 = new XMLHttpRequest();
  e2.open("HEAD", t3, false);
  try {
    e2.send();
  } catch (t4) {
  }
  return e2.status >= 200 && e2.status <= 299;
}
function c$2(t3) {
  try {
    t3.dispatchEvent(new MouseEvent("click"));
  } catch (r2) {
    var e2 = document.createEvent("MouseEvents");
    e2.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), t3.dispatchEvent(e2);
  }
}
var u$2, h$2, l = n$1.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : _typeof(window)) || window !== n$1 ? function() {
} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function(t3, e2, r2) {
  var i2 = n$1.URL || n$1.webkitURL, a2 = document.createElement("a");
  e2 = e2 || t3.name || "download", a2.download = e2, a2.rel = "noopener", "string" == typeof t3 ? (a2.href = t3, a2.origin !== location.origin ? s$1(a2.href) ? o$1(t3, e2, r2) : c$2(a2, a2.target = "_blank") : c$2(a2)) : (a2.href = i2.createObjectURL(t3), setTimeout(function() {
    i2.revokeObjectURL(a2.href);
  }, 4e4), setTimeout(function() {
    c$2(a2);
  }, 0));
} : "msSaveOrOpenBlob" in navigator ? function(e2, r2, n2) {
  if (r2 = r2 || e2.name || "download", "string" == typeof e2)
    if (s$1(e2))
      o$1(e2, r2, n2);
    else {
      var i2 = document.createElement("a");
      i2.href = e2, i2.target = "_blank", setTimeout(function() {
        c$2(i2);
      });
    }
  else
    navigator.msSaveOrOpenBlob(function(e3, r3) {
      return void 0 === r3 ? r3 = { autoBom: false } : "object" !== _typeof(r3) && (a$1.warn("Deprecated: Expected third argument to be a object"), r3 = { autoBom: !r3 }), r3.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e3.type) ? new Blob([String.fromCharCode(65279), e3], { type: e3.type }) : e3;
    }(e2, n2), r2);
} : function(e2, r2, i2, a2) {
  if ((a2 = a2 || open("", "_blank")) && (a2.document.title = a2.document.body.innerText = "downloading..."), "string" == typeof e2)
    return o$1(e2, r2, i2);
  var s2 = "application/octet-stream" === e2.type, c2 = /constructor/i.test(n$1.HTMLElement) || n$1.safari, u2 = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((u2 || s2 && c2) && "object" === ("undefined" == typeof FileReader ? "undefined" : _typeof(FileReader))) {
    var h2 = new FileReader();
    h2.onloadend = function() {
      var t3 = h2.result;
      t3 = u2 ? t3 : t3.replace(/^data:[^;]*;/, "data:attachment/file;"), a2 ? a2.location.href = t3 : location = t3, a2 = null;
    }, h2.readAsDataURL(e2);
  } else {
    var l2 = n$1.URL || n$1.webkitURL, f2 = l2.createObjectURL(e2);
    a2 ? a2.location = f2 : location.href = f2, a2 = null, setTimeout(function() {
      l2.revokeObjectURL(f2);
    }, 4e4);
  }
});
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */
function f$2(t3) {
  var e2;
  t3 = t3 || "", this.ok = false, "#" == t3.charAt(0) && (t3 = t3.substr(1, 6));
  t3 = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd", blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dodgerblue: "1e90ff", feldspar: "d19275", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslateblue: "8470ff", lightslategray: "778899", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32", linen: "faf0e6", magenta: "ff00ff", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", red: "ff0000", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", violetred: "d02090", wheat: "f5deb3", white: "ffffff", whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32" }[t3 = (t3 = t3.replace(/ /g, "")).toLowerCase()] || t3;
  for (var r2 = [{ re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/, example: ["rgb(123, 234, 45)", "rgb(255,234,245)"], process: function(t4) {
    return [parseInt(t4[1]), parseInt(t4[2]), parseInt(t4[3])];
  } }, { re: /^(\w{2})(\w{2})(\w{2})$/, example: ["#00ff00", "336699"], process: function(t4) {
    return [parseInt(t4[1], 16), parseInt(t4[2], 16), parseInt(t4[3], 16)];
  } }, { re: /^(\w{1})(\w{1})(\w{1})$/, example: ["#fb0", "f0f"], process: function(t4) {
    return [parseInt(t4[1] + t4[1], 16), parseInt(t4[2] + t4[2], 16), parseInt(t4[3] + t4[3], 16)];
  } }], n2 = 0; n2 < r2.length; n2++) {
    var i2 = r2[n2].re, a2 = r2[n2].process, o2 = i2.exec(t3);
    o2 && (e2 = a2(o2), this.r = e2[0], this.g = e2[1], this.b = e2[2], this.ok = true);
  }
  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function() {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  }, this.toHex = function() {
    var t4 = this.r.toString(16), e3 = this.g.toString(16), r3 = this.b.toString(16);
    return 1 == t4.length && (t4 = "0" + t4), 1 == e3.length && (e3 = "0" + e3), 1 == r3.length && (r3 = "0" + r3), "#" + t4 + e3 + r3;
  };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */
function d$2(t3, e2) {
  var r2 = t3[0], n2 = t3[1], i2 = t3[2], a2 = t3[3];
  r2 = g$2(r2, n2, i2, a2, e2[0], 7, -680876936), a2 = g$2(a2, r2, n2, i2, e2[1], 12, -389564586), i2 = g$2(i2, a2, r2, n2, e2[2], 17, 606105819), n2 = g$2(n2, i2, a2, r2, e2[3], 22, -1044525330), r2 = g$2(r2, n2, i2, a2, e2[4], 7, -176418897), a2 = g$2(a2, r2, n2, i2, e2[5], 12, 1200080426), i2 = g$2(i2, a2, r2, n2, e2[6], 17, -1473231341), n2 = g$2(n2, i2, a2, r2, e2[7], 22, -45705983), r2 = g$2(r2, n2, i2, a2, e2[8], 7, 1770035416), a2 = g$2(a2, r2, n2, i2, e2[9], 12, -1958414417), i2 = g$2(i2, a2, r2, n2, e2[10], 17, -42063), n2 = g$2(n2, i2, a2, r2, e2[11], 22, -1990404162), r2 = g$2(r2, n2, i2, a2, e2[12], 7, 1804603682), a2 = g$2(a2, r2, n2, i2, e2[13], 12, -40341101), i2 = g$2(i2, a2, r2, n2, e2[14], 17, -1502002290), r2 = m$2(r2, n2 = g$2(n2, i2, a2, r2, e2[15], 22, 1236535329), i2, a2, e2[1], 5, -165796510), a2 = m$2(a2, r2, n2, i2, e2[6], 9, -1069501632), i2 = m$2(i2, a2, r2, n2, e2[11], 14, 643717713), n2 = m$2(n2, i2, a2, r2, e2[0], 20, -373897302), r2 = m$2(r2, n2, i2, a2, e2[5], 5, -701558691), a2 = m$2(a2, r2, n2, i2, e2[10], 9, 38016083), i2 = m$2(i2, a2, r2, n2, e2[15], 14, -660478335), n2 = m$2(n2, i2, a2, r2, e2[4], 20, -405537848), r2 = m$2(r2, n2, i2, a2, e2[9], 5, 568446438), a2 = m$2(a2, r2, n2, i2, e2[14], 9, -1019803690), i2 = m$2(i2, a2, r2, n2, e2[3], 14, -187363961), n2 = m$2(n2, i2, a2, r2, e2[8], 20, 1163531501), r2 = m$2(r2, n2, i2, a2, e2[13], 5, -1444681467), a2 = m$2(a2, r2, n2, i2, e2[2], 9, -51403784), i2 = m$2(i2, a2, r2, n2, e2[7], 14, 1735328473), r2 = v$2(r2, n2 = m$2(n2, i2, a2, r2, e2[12], 20, -1926607734), i2, a2, e2[5], 4, -378558), a2 = v$2(a2, r2, n2, i2, e2[8], 11, -2022574463), i2 = v$2(i2, a2, r2, n2, e2[11], 16, 1839030562), n2 = v$2(n2, i2, a2, r2, e2[14], 23, -35309556), r2 = v$2(r2, n2, i2, a2, e2[1], 4, -1530992060), a2 = v$2(a2, r2, n2, i2, e2[4], 11, 1272893353), i2 = v$2(i2, a2, r2, n2, e2[7], 16, -155497632), n2 = v$2(n2, i2, a2, r2, e2[10], 23, -1094730640), r2 = v$2(r2, n2, i2, a2, e2[13], 4, 681279174), a2 = v$2(a2, r2, n2, i2, e2[0], 11, -358537222), i2 = v$2(i2, a2, r2, n2, e2[3], 16, -722521979), n2 = v$2(n2, i2, a2, r2, e2[6], 23, 76029189), r2 = v$2(r2, n2, i2, a2, e2[9], 4, -640364487), a2 = v$2(a2, r2, n2, i2, e2[12], 11, -421815835), i2 = v$2(i2, a2, r2, n2, e2[15], 16, 530742520), r2 = b$2(r2, n2 = v$2(n2, i2, a2, r2, e2[2], 23, -995338651), i2, a2, e2[0], 6, -198630844), a2 = b$2(a2, r2, n2, i2, e2[7], 10, 1126891415), i2 = b$2(i2, a2, r2, n2, e2[14], 15, -1416354905), n2 = b$2(n2, i2, a2, r2, e2[5], 21, -57434055), r2 = b$2(r2, n2, i2, a2, e2[12], 6, 1700485571), a2 = b$2(a2, r2, n2, i2, e2[3], 10, -1894986606), i2 = b$2(i2, a2, r2, n2, e2[10], 15, -1051523), n2 = b$2(n2, i2, a2, r2, e2[1], 21, -2054922799), r2 = b$2(r2, n2, i2, a2, e2[8], 6, 1873313359), a2 = b$2(a2, r2, n2, i2, e2[15], 10, -30611744), i2 = b$2(i2, a2, r2, n2, e2[6], 15, -1560198380), n2 = b$2(n2, i2, a2, r2, e2[13], 21, 1309151649), r2 = b$2(r2, n2, i2, a2, e2[4], 6, -145523070), a2 = b$2(a2, r2, n2, i2, e2[11], 10, -1120210379), i2 = b$2(i2, a2, r2, n2, e2[2], 15, 718787259), n2 = b$2(n2, i2, a2, r2, e2[9], 21, -343485551), t3[0] = _$2(r2, t3[0]), t3[1] = _$2(n2, t3[1]), t3[2] = _$2(i2, t3[2]), t3[3] = _$2(a2, t3[3]);
}
function p$1(t3, e2, r2, n2, i2, a2) {
  return e2 = _$2(_$2(e2, t3), _$2(n2, a2)), _$2(e2 << i2 | e2 >>> 32 - i2, r2);
}
function g$2(t3, e2, r2, n2, i2, a2, o2) {
  return p$1(e2 & r2 | ~e2 & n2, t3, e2, i2, a2, o2);
}
function m$2(t3, e2, r2, n2, i2, a2, o2) {
  return p$1(e2 & n2 | r2 & ~n2, t3, e2, i2, a2, o2);
}
function v$2(t3, e2, r2, n2, i2, a2, o2) {
  return p$1(e2 ^ r2 ^ n2, t3, e2, i2, a2, o2);
}
function b$2(t3, e2, r2, n2, i2, a2, o2) {
  return p$1(r2 ^ (e2 | ~n2), t3, e2, i2, a2, o2);
}
function y$2(t3) {
  var e2, r2 = t3.length, n2 = [1732584193, -271733879, -1732584194, 271733878];
  for (e2 = 64; e2 <= t3.length; e2 += 64)
    d$2(n2, w$2(t3.substring(e2 - 64, e2)));
  t3 = t3.substring(e2 - 64);
  var i2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (e2 = 0; e2 < t3.length; e2++)
    i2[e2 >> 2] |= t3.charCodeAt(e2) << (e2 % 4 << 3);
  if (i2[e2 >> 2] |= 128 << (e2 % 4 << 3), e2 > 55)
    for (d$2(n2, i2), e2 = 0; e2 < 16; e2++)
      i2[e2] = 0;
  return i2[14] = 8 * r2, d$2(n2, i2), n2;
}
function w$2(t3) {
  var e2, r2 = [];
  for (e2 = 0; e2 < 64; e2 += 4)
    r2[e2 >> 2] = t3.charCodeAt(e2) + (t3.charCodeAt(e2 + 1) << 8) + (t3.charCodeAt(e2 + 2) << 16) + (t3.charCodeAt(e2 + 3) << 24);
  return r2;
}
u$2 = n$1.atob.bind(n$1), h$2 = n$1.btoa.bind(n$1);
var N$2 = "0123456789abcdef".split("");
function L$1(t3) {
  for (var e2 = "", r2 = 0; r2 < 4; r2++)
    e2 += N$2[t3 >> 8 * r2 + 4 & 15] + N$2[t3 >> 8 * r2 & 15];
  return e2;
}
function A$2(t3) {
  return String.fromCharCode((255 & t3) >> 0, (65280 & t3) >> 8, (16711680 & t3) >> 16, (4278190080 & t3) >> 24);
}
function x$2(t3) {
  return y$2(t3).map(A$2).join("");
}
var S$1 = "5d41402abc4b2a76b9719d911017c592" != function(t3) {
  for (var e2 = 0; e2 < t3.length; e2++)
    t3[e2] = L$1(t3[e2]);
  return t3.join("");
}(y$2("hello"));
function _$2(t3, e2) {
  if (S$1) {
    var r2 = (65535 & t3) + (65535 & e2);
    return (t3 >> 16) + (e2 >> 16) + (r2 >> 16) << 16 | 65535 & r2;
  }
  return t3 + e2 & 4294967295;
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */
function P$2(t3, e2) {
  var r2, n2, i2, a2;
  if (t3 !== r2) {
    for (var o2 = (i2 = t3, a2 = 1 + (256 / t3.length >> 0), new Array(a2 + 1).join(i2)), s2 = [], c2 = 0; c2 < 256; c2++)
      s2[c2] = c2;
    var u2 = 0;
    for (c2 = 0; c2 < 256; c2++) {
      var h2 = s2[c2];
      u2 = (u2 + h2 + o2.charCodeAt(c2)) % 256, s2[c2] = s2[u2], s2[u2] = h2;
    }
    r2 = t3, n2 = s2;
  } else
    s2 = n2;
  var l2 = e2.length, f2 = 0, d2 = 0, p2 = "";
  for (c2 = 0; c2 < l2; c2++)
    d2 = (d2 + (h2 = s2[f2 = (f2 + 1) % 256])) % 256, s2[f2] = s2[d2], s2[d2] = h2, o2 = s2[(s2[f2] + s2[d2]) % 256], p2 += String.fromCharCode(e2.charCodeAt(c2) ^ o2);
  return p2;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */
var k$2 = { print: 4, modify: 8, copy: 16, "annot-forms": 32 };
function I$2(t3, e2, r2, n2) {
  this.v = 1, this.r = 2;
  var i2 = 192;
  t3.forEach(function(t4) {
    if (void 0 !== k$2.perm)
      throw new Error("Invalid permission: " + t4);
    i2 += k$2[t4];
  }), this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
  var a2 = (e2 + this.padding).substr(0, 32), o2 = (r2 + this.padding).substr(0, 32);
  this.O = this.processOwnerPassword(a2, o2), this.P = -(1 + (255 ^ i2)), this.encryptionKey = x$2(a2 + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n2)).substr(0, 5), this.U = P$2(this.encryptionKey, this.padding);
}
function F$1(t3) {
  if (/[^\u0000-\u00ff]/.test(t3))
    throw new Error("Invalid PDF Name Object: " + t3 + ", Only accept ASCII characters.");
  for (var e2 = "", r2 = t3.length, n2 = 0; n2 < r2; n2++) {
    var i2 = t3.charCodeAt(n2);
    if (i2 < 33 || 35 === i2 || 37 === i2 || 40 === i2 || 41 === i2 || 47 === i2 || 60 === i2 || 62 === i2 || 91 === i2 || 93 === i2 || 123 === i2 || 125 === i2 || i2 > 126)
      e2 += "#" + ("0" + i2.toString(16)).slice(-2);
    else
      e2 += t3[n2];
  }
  return e2;
}
function C$2(e2) {
  if ("object" !== _typeof(e2))
    throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
  var r2 = {};
  this.subscribe = function(t3, e3, n2) {
    if (n2 = n2 || false, "string" != typeof t3 || "function" != typeof e3 || "boolean" != typeof n2)
      throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
    r2.hasOwnProperty(t3) || (r2[t3] = {});
    var i2 = Math.random().toString(35);
    return r2[t3][i2] = [e3, !!n2], i2;
  }, this.unsubscribe = function(t3) {
    for (var e3 in r2)
      if (r2[e3][t3])
        return delete r2[e3][t3], 0 === Object.keys(r2[e3]).length && delete r2[e3], true;
    return false;
  }, this.publish = function(t3) {
    if (r2.hasOwnProperty(t3)) {
      var i2 = Array.prototype.slice.call(arguments, 1), o2 = [];
      for (var s2 in r2[t3]) {
        var c2 = r2[t3][s2];
        try {
          c2[0].apply(e2, i2);
        } catch (t4) {
          n$1.console && a$1.error("jsPDF PubSub Error", t4.message, t4);
        }
        c2[1] && o2.push(s2);
      }
      o2.length && o2.forEach(this.unsubscribe);
    }
  }, this.getTopics = function() {
    return r2;
  };
}
function j$2(t3) {
  if (!(this instanceof j$2))
    return new j$2(t3);
  var e2 = "opacity,stroke-opacity".split(",");
  for (var r2 in t3)
    t3.hasOwnProperty(r2) && e2.indexOf(r2) >= 0 && (this[r2] = t3[r2]);
  this.id = "", this.objectNumber = -1;
}
function O$1(t3, e2) {
  this.gState = t3, this.matrix = e2, this.id = "", this.objectNumber = -1;
}
function B$1(t3, e2, r2, n2, i2) {
  if (!(this instanceof B$1))
    return new B$1(t3, e2, r2, n2, i2);
  this.type = "axial" === t3 ? 2 : 3, this.coords = e2, this.colors = r2, O$1.call(this, n2, i2);
}
function M$1(t3, e2, r2, n2, i2) {
  if (!(this instanceof M$1))
    return new M$1(t3, e2, r2, n2, i2);
  this.boundingBox = t3, this.xStep = e2, this.yStep = r2, this.stream = "", this.cloneIndex = 0, O$1.call(this, n2, i2);
}
function E$1(e2) {
  var r2, i2 = "string" == typeof arguments[0] ? arguments[0] : "p", o2 = arguments[1], s2 = arguments[2], c2 = arguments[3], u2 = [], d2 = 1, p2 = 16, g2 = "S", m2 = null;
  "object" === _typeof(e2 = e2 || {}) && (i2 = e2.orientation, o2 = e2.unit || o2, s2 = e2.format || s2, c2 = e2.compress || e2.compressPdf || c2, null !== (m2 = e2.encryption || null) && (m2.userPassword = m2.userPassword || "", m2.ownerPassword = m2.ownerPassword || "", m2.userPermissions = m2.userPermissions || []), d2 = "number" == typeof e2.userUnit ? Math.abs(e2.userUnit) : 1, void 0 !== e2.precision && (r2 = e2.precision), void 0 !== e2.floatPrecision && (p2 = e2.floatPrecision), g2 = e2.defaultPathOperation || "S"), u2 = e2.filters || (true === c2 ? ["FlateEncode"] : u2), o2 = o2 || "mm", i2 = ("" + (i2 || "P")).toLowerCase();
  var v2 = e2.putOnlyUsedFonts || false, b2 = {}, y2 = { internal: {}, __private__: {} };
  y2.__private__.PubSub = C$2;
  var w2 = "1.3", N2 = y2.__private__.getPdfVersion = function() {
    return w2;
  };
  y2.__private__.setPdfVersion = function(t3) {
    w2 = t3;
  };
  var L2 = { a0: [2383.94, 3370.39], a1: [1683.78, 2383.94], a2: [1190.55, 1683.78], a3: [841.89, 1190.55], a4: [595.28, 841.89], a5: [419.53, 595.28], a6: [297.64, 419.53], a7: [209.76, 297.64], a8: [147.4, 209.76], a9: [104.88, 147.4], a10: [73.7, 104.88], b0: [2834.65, 4008.19], b1: [2004.09, 2834.65], b2: [1417.32, 2004.09], b3: [1000.63, 1417.32], b4: [708.66, 1000.63], b5: [498.9, 708.66], b6: [354.33, 498.9], b7: [249.45, 354.33], b8: [175.75, 249.45], b9: [124.72, 175.75], b10: [87.87, 124.72], c0: [2599.37, 3676.54], c1: [1836.85, 2599.37], c2: [1298.27, 1836.85], c3: [918.43, 1298.27], c4: [649.13, 918.43], c5: [459.21, 649.13], c6: [323.15, 459.21], c7: [229.61, 323.15], c8: [161.57, 229.61], c9: [113.39, 161.57], c10: [79.37, 113.39], dl: [311.81, 623.62], letter: [612, 792], "government-letter": [576, 756], legal: [612, 1008], "junior-legal": [576, 360], ledger: [1224, 792], tabloid: [792, 1224], "credit-card": [153, 243] };
  y2.__private__.getPageFormats = function() {
    return L2;
  };
  var A2 = y2.__private__.getPageFormat = function(t3) {
    return L2[t3];
  };
  s2 = s2 || "a4";
  var x2 = { COMPAT: "compat", ADVANCED: "advanced" }, S2 = x2.COMPAT;
  function _2() {
    this.saveGraphicsState(), lt2(new Vt2(_t2, 0, 0, -_t2, 0, Rr() * _t2).toString() + " cm"), this.setFontSize(this.getFontSize() / _t2), g2 = "n", S2 = x2.ADVANCED;
  }
  function P2() {
    this.restoreGraphicsState(), g2 = "S", S2 = x2.COMPAT;
  }
  var k2 = y2.__private__.combineFontStyleAndFontWeight = function(t3, e3) {
    if ("bold" == t3 && "normal" == e3 || "bold" == t3 && 400 == e3 || "normal" == t3 && "italic" == e3 || "bold" == t3 && "italic" == e3)
      throw new Error("Invalid Combination of fontweight and fontstyle");
    return e3 && (t3 = 400 == e3 || "normal" === e3 ? "italic" === t3 ? "italic" : "normal" : 700 != e3 && "bold" !== e3 || "normal" !== t3 ? (700 == e3 ? "bold" : e3) + "" + t3 : "bold"), t3;
  };
  y2.advancedAPI = function(t3) {
    var e3 = S2 === x2.COMPAT;
    return e3 && _2.call(this), "function" != typeof t3 || (t3(this), e3 && P2.call(this)), this;
  }, y2.compatAPI = function(t3) {
    var e3 = S2 === x2.ADVANCED;
    return e3 && P2.call(this), "function" != typeof t3 || (t3(this), e3 && _2.call(this)), this;
  }, y2.isAdvancedAPI = function() {
    return S2 === x2.ADVANCED;
  };
  var O2, q2 = function(t3) {
    if (S2 !== x2.ADVANCED)
      throw new Error(t3 + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
  }, D2 = y2.roundToPrecision = y2.__private__.roundToPrecision = function(t3, e3) {
    var n2 = r2 || e3;
    if (isNaN(t3) || isNaN(n2))
      throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
    return t3.toFixed(n2).replace(/0+$/, "");
  };
  O2 = y2.hpf = y2.__private__.hpf = "number" == typeof p2 ? function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.hpf");
    return D2(t3, p2);
  } : "smart" === p2 ? function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.hpf");
    return D2(t3, t3 > -1 && t3 < 1 ? 16 : 5);
  } : function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.hpf");
    return D2(t3, 16);
  };
  var R2 = y2.f2 = y2.__private__.f2 = function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.f2");
    return D2(t3, 2);
  }, T2 = y2.__private__.f3 = function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.f3");
    return D2(t3, 3);
  }, U2 = y2.scale = y2.__private__.scale = function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.scale");
    return S2 === x2.COMPAT ? t3 * _t2 : S2 === x2.ADVANCED ? t3 : void 0;
  }, z2 = function(t3) {
    return S2 === x2.COMPAT ? Rr() - t3 : S2 === x2.ADVANCED ? t3 : void 0;
  }, H2 = function(t3) {
    return U2(z2(t3));
  };
  y2.__private__.setPrecision = y2.setPrecision = function(t3) {
    "number" == typeof parseInt(t3, 10) && (r2 = parseInt(t3, 10));
  };
  var W2, V2 = "00000000000000000000000000000000", G2 = y2.__private__.getFileId = function() {
    return V2;
  }, Y2 = y2.__private__.setFileId = function(t3) {
    return V2 = void 0 !== t3 && /^[a-fA-F0-9]{32}$/.test(t3) ? t3.toUpperCase() : V2.split("").map(function() {
      return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
    }).join(""), null !== m2 && (Ye = new I$2(m2.userPermissions, m2.userPassword, m2.ownerPassword, V2)), V2;
  };
  y2.setFileId = function(t3) {
    return Y2(t3), this;
  }, y2.getFileId = function() {
    return G2();
  };
  var J2 = y2.__private__.convertDateToPDFDate = function(t3) {
    var e3 = t3.getTimezoneOffset(), r3 = e3 < 0 ? "+" : "-", n2 = Math.floor(Math.abs(e3 / 60)), i3 = Math.abs(e3 % 60), a2 = [r3, Q2(n2), "'", Q2(i3), "'"].join("");
    return ["D:", t3.getFullYear(), Q2(t3.getMonth() + 1), Q2(t3.getDate()), Q2(t3.getHours()), Q2(t3.getMinutes()), Q2(t3.getSeconds()), a2].join("");
  }, X2 = y2.__private__.convertPDFDateToDate = function(t3) {
    var e3 = parseInt(t3.substr(2, 4), 10), r3 = parseInt(t3.substr(6, 2), 10) - 1, n2 = parseInt(t3.substr(8, 2), 10), i3 = parseInt(t3.substr(10, 2), 10), a2 = parseInt(t3.substr(12, 2), 10), o3 = parseInt(t3.substr(14, 2), 10);
    return new Date(e3, r3, n2, i3, a2, o3, 0);
  }, K2 = y2.__private__.setCreationDate = function(t3) {
    var e3;
    if (void 0 === t3 && (t3 = /* @__PURE__ */ new Date()), t3 instanceof Date)
      e3 = J2(t3);
    else {
      if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t3))
        throw new Error("Invalid argument passed to jsPDF.setCreationDate");
      e3 = t3;
    }
    return W2 = e3;
  }, Z2 = y2.__private__.getCreationDate = function(t3) {
    var e3 = W2;
    return "jsDate" === t3 && (e3 = X2(W2)), e3;
  };
  y2.setCreationDate = function(t3) {
    return K2(t3), this;
  }, y2.getCreationDate = function(t3) {
    return Z2(t3);
  };
  var $3, Q2 = y2.__private__.padd2 = function(t3) {
    return ("0" + parseInt(t3)).slice(-2);
  }, tt2 = y2.__private__.padd2Hex = function(t3) {
    return ("00" + (t3 = t3.toString())).substr(t3.length);
  }, et2 = 0, rt2 = [], nt2 = [], it2 = 0, at2 = [], ot2 = [], st2 = false, ct2 = nt2, ut2 = function() {
    et2 = 0, it2 = 0, nt2 = [], rt2 = [], at2 = [], Qt2 = Kt2(), te2 = Kt2();
  };
  y2.__private__.setCustomOutputDestination = function(t3) {
    st2 = true, ct2 = t3;
  };
  var ht2 = function(t3) {
    st2 || (ct2 = t3);
  };
  y2.__private__.resetCustomOutputDestination = function() {
    st2 = false, ct2 = nt2;
  };
  var lt2 = y2.__private__.out = function(t3) {
    return t3 = t3.toString(), it2 += t3.length + 1, ct2.push(t3), ct2;
  }, ft2 = y2.__private__.write = function(t3) {
    return lt2(1 === arguments.length ? t3.toString() : Array.prototype.join.call(arguments, " "));
  }, dt2 = y2.__private__.getArrayBuffer = function(t3) {
    for (var e3 = t3.length, r3 = new ArrayBuffer(e3), n2 = new Uint8Array(r3); e3--; )
      n2[e3] = t3.charCodeAt(e3);
    return r3;
  }, pt2 = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];
  y2.__private__.getStandardFonts = function() {
    return pt2;
  };
  var gt2 = e2.fontSize || 16;
  y2.__private__.setFontSize = y2.setFontSize = function(t3) {
    return gt2 = S2 === x2.ADVANCED ? t3 / _t2 : t3, this;
  };
  var mt2, vt2 = y2.__private__.getFontSize = y2.getFontSize = function() {
    return S2 === x2.COMPAT ? gt2 : gt2 * _t2;
  }, bt2 = e2.R2L || false;
  y2.__private__.setR2L = y2.setR2L = function(t3) {
    return bt2 = t3, this;
  }, y2.__private__.getR2L = y2.getR2L = function() {
    return bt2;
  };
  var yt2, wt2 = y2.__private__.setZoomMode = function(t3) {
    var e3 = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
    if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t3))
      mt2 = t3;
    else if (isNaN(t3)) {
      if (-1 === e3.indexOf(t3))
        throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t3 + '" is not recognized.');
      mt2 = t3;
    } else
      mt2 = parseInt(t3, 10);
  };
  y2.__private__.getZoomMode = function() {
    return mt2;
  };
  var Nt2, Lt2 = y2.__private__.setPageMode = function(t3) {
    if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t3))
      throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t3 + '" is not recognized.');
    yt2 = t3;
  };
  y2.__private__.getPageMode = function() {
    return yt2;
  };
  var At2 = y2.__private__.setLayoutMode = function(t3) {
    if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t3))
      throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t3 + '" is not recognized.');
    Nt2 = t3;
  };
  y2.__private__.getLayoutMode = function() {
    return Nt2;
  }, y2.__private__.setDisplayMode = y2.setDisplayMode = function(t3, e3, r3) {
    return wt2(t3), At2(e3), Lt2(r3), this;
  };
  var xt2 = { title: "", subject: "", author: "", keywords: "", creator: "" };
  y2.__private__.getDocumentProperty = function(t3) {
    if (-1 === Object.keys(xt2).indexOf(t3))
      throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
    return xt2[t3];
  }, y2.__private__.getDocumentProperties = function() {
    return xt2;
  }, y2.__private__.setDocumentProperties = y2.setProperties = y2.setDocumentProperties = function(t3) {
    for (var e3 in xt2)
      xt2.hasOwnProperty(e3) && t3[e3] && (xt2[e3] = t3[e3]);
    return this;
  }, y2.__private__.setDocumentProperty = function(t3, e3) {
    if (-1 === Object.keys(xt2).indexOf(t3))
      throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
    return xt2[t3] = e3;
  };
  var St2, _t2, Pt2, kt2, It2, Ft2 = {}, Ct2 = {}, jt2 = [], Ot2 = {}, Bt2 = {}, Mt2 = {}, Et2 = {}, qt2 = null, Dt2 = 0, Rt2 = [], Tt2 = new C$2(y2), Ut2 = e2.hotfixes || [], zt2 = {}, Ht2 = {}, Wt2 = [], Vt2 = function t3(e3, r3, n2, i3, a2, o3) {
    if (!(this instanceof t3))
      return new t3(e3, r3, n2, i3, a2, o3);
    isNaN(e3) && (e3 = 1), isNaN(r3) && (r3 = 0), isNaN(n2) && (n2 = 0), isNaN(i3) && (i3 = 1), isNaN(a2) && (a2 = 0), isNaN(o3) && (o3 = 0), this._matrix = [e3, r3, n2, i3, a2, o3];
  };
  Object.defineProperty(Vt2.prototype, "sx", { get: function() {
    return this._matrix[0];
  }, set: function(t3) {
    this._matrix[0] = t3;
  } }), Object.defineProperty(Vt2.prototype, "shy", { get: function() {
    return this._matrix[1];
  }, set: function(t3) {
    this._matrix[1] = t3;
  } }), Object.defineProperty(Vt2.prototype, "shx", { get: function() {
    return this._matrix[2];
  }, set: function(t3) {
    this._matrix[2] = t3;
  } }), Object.defineProperty(Vt2.prototype, "sy", { get: function() {
    return this._matrix[3];
  }, set: function(t3) {
    this._matrix[3] = t3;
  } }), Object.defineProperty(Vt2.prototype, "tx", { get: function() {
    return this._matrix[4];
  }, set: function(t3) {
    this._matrix[4] = t3;
  } }), Object.defineProperty(Vt2.prototype, "ty", { get: function() {
    return this._matrix[5];
  }, set: function(t3) {
    this._matrix[5] = t3;
  } }), Object.defineProperty(Vt2.prototype, "a", { get: function() {
    return this._matrix[0];
  }, set: function(t3) {
    this._matrix[0] = t3;
  } }), Object.defineProperty(Vt2.prototype, "b", { get: function() {
    return this._matrix[1];
  }, set: function(t3) {
    this._matrix[1] = t3;
  } }), Object.defineProperty(Vt2.prototype, "c", { get: function() {
    return this._matrix[2];
  }, set: function(t3) {
    this._matrix[2] = t3;
  } }), Object.defineProperty(Vt2.prototype, "d", { get: function() {
    return this._matrix[3];
  }, set: function(t3) {
    this._matrix[3] = t3;
  } }), Object.defineProperty(Vt2.prototype, "e", { get: function() {
    return this._matrix[4];
  }, set: function(t3) {
    this._matrix[4] = t3;
  } }), Object.defineProperty(Vt2.prototype, "f", { get: function() {
    return this._matrix[5];
  }, set: function(t3) {
    this._matrix[5] = t3;
  } }), Object.defineProperty(Vt2.prototype, "rotation", { get: function() {
    return Math.atan2(this.shx, this.sx);
  } }), Object.defineProperty(Vt2.prototype, "scaleX", { get: function() {
    return this.decompose().scale.sx;
  } }), Object.defineProperty(Vt2.prototype, "scaleY", { get: function() {
    return this.decompose().scale.sy;
  } }), Object.defineProperty(Vt2.prototype, "isIdentity", { get: function() {
    return 1 === this.sx && (0 === this.shy && (0 === this.shx && (1 === this.sy && (0 === this.tx && 0 === this.ty))));
  } }), Vt2.prototype.join = function(t3) {
    return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(O2).join(t3);
  }, Vt2.prototype.multiply = function(t3) {
    var e3 = t3.sx * this.sx + t3.shy * this.shx, r3 = t3.sx * this.shy + t3.shy * this.sy, n2 = t3.shx * this.sx + t3.sy * this.shx, i3 = t3.shx * this.shy + t3.sy * this.sy, a2 = t3.tx * this.sx + t3.ty * this.shx + this.tx, o3 = t3.tx * this.shy + t3.ty * this.sy + this.ty;
    return new Vt2(e3, r3, n2, i3, a2, o3);
  }, Vt2.prototype.decompose = function() {
    var t3 = this.sx, e3 = this.shy, r3 = this.shx, n2 = this.sy, i3 = this.tx, a2 = this.ty, o3 = Math.sqrt(t3 * t3 + e3 * e3), s3 = (t3 /= o3) * r3 + (e3 /= o3) * n2;
    r3 -= t3 * s3, n2 -= e3 * s3;
    var c3 = Math.sqrt(r3 * r3 + n2 * n2);
    return s3 /= c3, t3 * (n2 /= c3) < e3 * (r3 /= c3) && (t3 = -t3, e3 = -e3, s3 = -s3, o3 = -o3), { scale: new Vt2(o3, 0, 0, c3, 0, 0), translate: new Vt2(1, 0, 0, 1, i3, a2), rotate: new Vt2(t3, e3, -e3, t3, 0, 0), skew: new Vt2(1, 0, s3, 1, 0, 0) };
  }, Vt2.prototype.toString = function(t3) {
    return this.join(" ");
  }, Vt2.prototype.inversed = function() {
    var t3 = this.sx, e3 = this.shy, r3 = this.shx, n2 = this.sy, i3 = this.tx, a2 = this.ty, o3 = 1 / (t3 * n2 - e3 * r3), s3 = n2 * o3, c3 = -e3 * o3, u3 = -r3 * o3, h2 = t3 * o3;
    return new Vt2(s3, c3, u3, h2, -s3 * i3 - u3 * a2, -c3 * i3 - h2 * a2);
  }, Vt2.prototype.applyToPoint = function(t3) {
    var e3 = t3.x * this.sx + t3.y * this.shx + this.tx, r3 = t3.x * this.shy + t3.y * this.sy + this.ty;
    return new Cr(e3, r3);
  }, Vt2.prototype.applyToRectangle = function(t3) {
    var e3 = this.applyToPoint(t3), r3 = this.applyToPoint(new Cr(t3.x + t3.w, t3.y + t3.h));
    return new jr(e3.x, e3.y, r3.x - e3.x, r3.y - e3.y);
  }, Vt2.prototype.clone = function() {
    var t3 = this.sx, e3 = this.shy, r3 = this.shx, n2 = this.sy, i3 = this.tx, a2 = this.ty;
    return new Vt2(t3, e3, r3, n2, i3, a2);
  }, y2.Matrix = Vt2;
  var Gt2 = y2.matrixMult = function(t3, e3) {
    return e3.multiply(t3);
  }, Yt2 = new Vt2(1, 0, 0, 1, 0, 0);
  y2.unitMatrix = y2.identityMatrix = Yt2;
  var Jt2 = function(t3, e3) {
    if (!Bt2[t3]) {
      var r3 = (e3 instanceof B$1 ? "Sh" : "P") + (Object.keys(Ot2).length + 1).toString(10);
      e3.id = r3, Bt2[t3] = r3, Ot2[r3] = e3, Tt2.publish("addPattern", e3);
    }
  };
  y2.ShadingPattern = B$1, y2.TilingPattern = M$1, y2.addShadingPattern = function(t3, e3) {
    return q2("addShadingPattern()"), Jt2(t3, e3), this;
  }, y2.beginTilingPattern = function(t3) {
    q2("beginTilingPattern()"), Br(t3.boundingBox[0], t3.boundingBox[1], t3.boundingBox[2] - t3.boundingBox[0], t3.boundingBox[3] - t3.boundingBox[1], t3.matrix);
  }, y2.endTilingPattern = function(t3, e3) {
    q2("endTilingPattern()"), e3.stream = ot2[$3].join("\n"), Jt2(t3, e3), Tt2.publish("endTilingPattern", e3), Wt2.pop().restore();
  };
  var Xt2 = y2.__private__.newObject = function() {
    var t3 = Kt2();
    return Zt2(t3, true), t3;
  }, Kt2 = y2.__private__.newObjectDeferred = function() {
    return et2++, rt2[et2] = function() {
      return it2;
    }, et2;
  }, Zt2 = function(t3, e3) {
    return e3 = "boolean" == typeof e3 && e3, rt2[t3] = it2, e3 && lt2(t3 + " 0 obj"), t3;
  }, $t2 = y2.__private__.newAdditionalObject = function() {
    var t3 = { objId: Kt2(), content: "" };
    return at2.push(t3), t3;
  }, Qt2 = Kt2(), te2 = Kt2(), ee2 = y2.__private__.decodeColorString = function(t3) {
    var e3 = t3.split(" ");
    if (2 !== e3.length || "g" !== e3[1] && "G" !== e3[1]) {
      if (5 === e3.length && ("k" === e3[4] || "K" === e3[4])) {
        e3 = [(1 - e3[0]) * (1 - e3[3]), (1 - e3[1]) * (1 - e3[3]), (1 - e3[2]) * (1 - e3[3]), "r"];
      }
    } else {
      var r3 = parseFloat(e3[0]);
      e3 = [r3, r3, r3, "r"];
    }
    for (var n2 = "#", i3 = 0; i3 < 3; i3++)
      n2 += ("0" + Math.floor(255 * parseFloat(e3[i3])).toString(16)).slice(-2);
    return n2;
  }, re2 = y2.__private__.encodeColorString = function(e3) {
    var r3;
    "string" == typeof e3 && (e3 = { ch1: e3 });
    var n2 = e3.ch1, i3 = e3.ch2, a2 = e3.ch3, o3 = e3.ch4, s3 = "draw" === e3.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"];
    if ("string" == typeof n2 && "#" !== n2.charAt(0)) {
      var c3 = new f$2(n2);
      if (c3.ok)
        n2 = c3.toHex();
      else if (!/^\d*\.?\d*$/.test(n2))
        throw new Error('Invalid color "' + n2 + '" passed to jsPDF.encodeColorString.');
    }
    if ("string" == typeof n2 && /^#[0-9A-Fa-f]{3}$/.test(n2) && (n2 = "#" + n2[1] + n2[1] + n2[2] + n2[2] + n2[3] + n2[3]), "string" == typeof n2 && /^#[0-9A-Fa-f]{6}$/.test(n2)) {
      var u3 = parseInt(n2.substr(1), 16);
      n2 = u3 >> 16 & 255, i3 = u3 >> 8 & 255, a2 = 255 & u3;
    }
    if (void 0 === i3 || void 0 === o3 && n2 === i3 && i3 === a2)
      if ("string" == typeof n2)
        r3 = n2 + " " + s3[0];
      else
        switch (e3.precision) {
          case 2:
            r3 = R2(n2 / 255) + " " + s3[0];
            break;
          case 3:
          default:
            r3 = T2(n2 / 255) + " " + s3[0];
        }
    else if (void 0 === o3 || "object" === _typeof(o3)) {
      if (o3 && !isNaN(o3.a) && 0 === o3.a)
        return r3 = ["1.", "1.", "1.", s3[1]].join(" ");
      if ("string" == typeof n2)
        r3 = [n2, i3, a2, s3[1]].join(" ");
      else
        switch (e3.precision) {
          case 2:
            r3 = [R2(n2 / 255), R2(i3 / 255), R2(a2 / 255), s3[1]].join(" ");
            break;
          default:
          case 3:
            r3 = [T2(n2 / 255), T2(i3 / 255), T2(a2 / 255), s3[1]].join(" ");
        }
    } else if ("string" == typeof n2)
      r3 = [n2, i3, a2, o3, s3[2]].join(" ");
    else
      switch (e3.precision) {
        case 2:
          r3 = [R2(n2), R2(i3), R2(a2), R2(o3), s3[2]].join(" ");
          break;
        case 3:
        default:
          r3 = [T2(n2), T2(i3), T2(a2), T2(o3), s3[2]].join(" ");
      }
    return r3;
  }, ne2 = y2.__private__.getFilters = function() {
    return u2;
  }, ie2 = y2.__private__.putStream = function(t3) {
    var e3 = (t3 = t3 || {}).data || "", r3 = t3.filters || ne2(), n2 = t3.alreadyAppliedFilters || [], i3 = t3.addLength1 || false, a2 = e3.length, o3 = t3.objectId, s3 = function(t4) {
      return t4;
    };
    if (null !== m2 && void 0 === o3)
      throw new Error("ObjectId must be passed to putStream for file encryption");
    null !== m2 && (s3 = Ye.encryptor(o3, 0));
    var c3 = {};
    true === r3 && (r3 = ["FlateEncode"]);
    var u3 = t3.additionalKeyValues || [], h2 = (c3 = void 0 !== E$1.API.processDataByFilters ? E$1.API.processDataByFilters(e3, r3) : { data: e3, reverseChain: [] }).reverseChain + (Array.isArray(n2) ? n2.join(" ") : n2.toString());
    if (0 !== c3.data.length && (u3.push({ key: "Length", value: c3.data.length }), true === i3 && u3.push({ key: "Length1", value: a2 })), 0 != h2.length)
      if (h2.split("/").length - 1 == 1)
        u3.push({ key: "Filter", value: h2 });
      else {
        u3.push({ key: "Filter", value: "[" + h2 + "]" });
        for (var l2 = 0; l2 < u3.length; l2 += 1)
          if ("DecodeParms" === u3[l2].key) {
            for (var f2 = [], d4 = 0; d4 < c3.reverseChain.split("/").length - 1; d4 += 1)
              f2.push("null");
            f2.push(u3[l2].value), u3[l2].value = "[" + f2.join(" ") + "]";
          }
      }
    lt2("<<");
    for (var p3 = 0; p3 < u3.length; p3++)
      lt2("/" + u3[p3].key + " " + u3[p3].value);
    lt2(">>"), 0 !== c3.data.length && (lt2("stream"), lt2(s3(c3.data)), lt2("endstream"));
  }, ae2 = y2.__private__.putPage = function(t3) {
    var e3 = t3.number, r3 = t3.data, n2 = t3.objId, i3 = t3.contentsObjId;
    Zt2(n2, true), lt2("<</Type /Page"), lt2("/Parent " + t3.rootDictionaryObjId + " 0 R"), lt2("/Resources " + t3.resourceDictionaryObjId + " 0 R"), lt2("/MediaBox [" + parseFloat(O2(t3.mediaBox.bottomLeftX)) + " " + parseFloat(O2(t3.mediaBox.bottomLeftY)) + " " + O2(t3.mediaBox.topRightX) + " " + O2(t3.mediaBox.topRightY) + "]"), null !== t3.cropBox && lt2("/CropBox [" + O2(t3.cropBox.bottomLeftX) + " " + O2(t3.cropBox.bottomLeftY) + " " + O2(t3.cropBox.topRightX) + " " + O2(t3.cropBox.topRightY) + "]"), null !== t3.bleedBox && lt2("/BleedBox [" + O2(t3.bleedBox.bottomLeftX) + " " + O2(t3.bleedBox.bottomLeftY) + " " + O2(t3.bleedBox.topRightX) + " " + O2(t3.bleedBox.topRightY) + "]"), null !== t3.trimBox && lt2("/TrimBox [" + O2(t3.trimBox.bottomLeftX) + " " + O2(t3.trimBox.bottomLeftY) + " " + O2(t3.trimBox.topRightX) + " " + O2(t3.trimBox.topRightY) + "]"), null !== t3.artBox && lt2("/ArtBox [" + O2(t3.artBox.bottomLeftX) + " " + O2(t3.artBox.bottomLeftY) + " " + O2(t3.artBox.topRightX) + " " + O2(t3.artBox.topRightY) + "]"), "number" == typeof t3.userUnit && 1 !== t3.userUnit && lt2("/UserUnit " + t3.userUnit), Tt2.publish("putPage", { objId: n2, pageContext: Rt2[e3], pageNumber: e3, page: r3 }), lt2("/Contents " + i3 + " 0 R"), lt2(">>"), lt2("endobj");
    var a2 = r3.join("\n");
    return S2 === x2.ADVANCED && (a2 += "\nQ"), Zt2(i3, true), ie2({ data: a2, filters: ne2(), objectId: i3 }), lt2("endobj"), n2;
  }, oe2 = y2.__private__.putPages = function() {
    var t3, e3, r3 = [];
    for (t3 = 1; t3 <= Dt2; t3++)
      Rt2[t3].objId = Kt2(), Rt2[t3].contentsObjId = Kt2();
    for (t3 = 1; t3 <= Dt2; t3++)
      r3.push(ae2({ number: t3, data: ot2[t3], objId: Rt2[t3].objId, contentsObjId: Rt2[t3].contentsObjId, mediaBox: Rt2[t3].mediaBox, cropBox: Rt2[t3].cropBox, bleedBox: Rt2[t3].bleedBox, trimBox: Rt2[t3].trimBox, artBox: Rt2[t3].artBox, userUnit: Rt2[t3].userUnit, rootDictionaryObjId: Qt2, resourceDictionaryObjId: te2 }));
    Zt2(Qt2, true), lt2("<</Type /Pages");
    var n2 = "/Kids [";
    for (e3 = 0; e3 < Dt2; e3++)
      n2 += r3[e3] + " 0 R ";
    lt2(n2 + "]"), lt2("/Count " + Dt2), lt2(">>"), lt2("endobj"), Tt2.publish("postPutPages");
  }, se2 = function(t3) {
    Tt2.publish("putFont", { font: t3, out: lt2, newObject: Xt2, putStream: ie2 }), true !== t3.isAlreadyPutted && (t3.objectNumber = Xt2(), lt2("<<"), lt2("/Type /Font"), lt2("/BaseFont /" + F$1(t3.postScriptName)), lt2("/Subtype /Type1"), "string" == typeof t3.encoding && lt2("/Encoding /" + t3.encoding), lt2("/FirstChar 32"), lt2("/LastChar 255"), lt2(">>"), lt2("endobj"));
  }, ce2 = function() {
    for (var t3 in Ft2)
      Ft2.hasOwnProperty(t3) && (false === v2 || true === v2 && b2.hasOwnProperty(t3)) && se2(Ft2[t3]);
  }, ue2 = function(t3) {
    t3.objectNumber = Xt2();
    var e3 = [];
    e3.push({ key: "Type", value: "/XObject" }), e3.push({ key: "Subtype", value: "/Form" }), e3.push({ key: "BBox", value: "[" + [O2(t3.x), O2(t3.y), O2(t3.x + t3.width), O2(t3.y + t3.height)].join(" ") + "]" }), e3.push({ key: "Matrix", value: "[" + t3.matrix.toString() + "]" });
    var r3 = t3.pages[1].join("\n");
    ie2({ data: r3, additionalKeyValues: e3, objectId: t3.objectNumber }), lt2("endobj");
  }, he2 = function() {
    for (var t3 in zt2)
      zt2.hasOwnProperty(t3) && ue2(zt2[t3]);
  }, le2 = function(t3, e3) {
    var r3, n2 = [], i3 = 1 / (e3 - 1);
    for (r3 = 0; r3 < 1; r3 += i3)
      n2.push(r3);
    if (n2.push(1), 0 != t3[0].offset) {
      var a2 = { offset: 0, color: t3[0].color };
      t3.unshift(a2);
    }
    if (1 != t3[t3.length - 1].offset) {
      var o3 = { offset: 1, color: t3[t3.length - 1].color };
      t3.push(o3);
    }
    for (var s3 = "", c3 = 0, u3 = 0; u3 < n2.length; u3++) {
      for (r3 = n2[u3]; r3 > t3[c3 + 1].offset; )
        c3++;
      var h2 = t3[c3].offset, l2 = (r3 - h2) / (t3[c3 + 1].offset - h2), f2 = t3[c3].color, d4 = t3[c3 + 1].color;
      s3 += tt2(Math.round((1 - l2) * f2[0] + l2 * d4[0]).toString(16)) + tt2(Math.round((1 - l2) * f2[1] + l2 * d4[1]).toString(16)) + tt2(Math.round((1 - l2) * f2[2] + l2 * d4[2]).toString(16));
    }
    return s3.trim();
  }, fe2 = function(t3, e3) {
    e3 || (e3 = 21);
    var r3 = Xt2(), n2 = le2(t3.colors, e3), i3 = [];
    i3.push({ key: "FunctionType", value: "0" }), i3.push({ key: "Domain", value: "[0.0 1.0]" }), i3.push({ key: "Size", value: "[" + e3 + "]" }), i3.push({ key: "BitsPerSample", value: "8" }), i3.push({ key: "Range", value: "[0.0 1.0 0.0 1.0 0.0 1.0]" }), i3.push({ key: "Decode", value: "[0.0 1.0 0.0 1.0 0.0 1.0]" }), ie2({ data: n2, additionalKeyValues: i3, alreadyAppliedFilters: ["/ASCIIHexDecode"], objectId: r3 }), lt2("endobj"), t3.objectNumber = Xt2(), lt2("<< /ShadingType " + t3.type), lt2("/ColorSpace /DeviceRGB");
    var a2 = "/Coords [" + O2(parseFloat(t3.coords[0])) + " " + O2(parseFloat(t3.coords[1])) + " ";
    2 === t3.type ? a2 += O2(parseFloat(t3.coords[2])) + " " + O2(parseFloat(t3.coords[3])) : a2 += O2(parseFloat(t3.coords[2])) + " " + O2(parseFloat(t3.coords[3])) + " " + O2(parseFloat(t3.coords[4])) + " " + O2(parseFloat(t3.coords[5])), lt2(a2 += "]"), t3.matrix && lt2("/Matrix [" + t3.matrix.toString() + "]"), lt2("/Function " + r3 + " 0 R"), lt2("/Extend [true true]"), lt2(">>"), lt2("endobj");
  }, de2 = function(t3, e3) {
    var r3 = Kt2(), n2 = Xt2();
    e3.push({ resourcesOid: r3, objectOid: n2 }), t3.objectNumber = n2;
    var i3 = [];
    i3.push({ key: "Type", value: "/Pattern" }), i3.push({ key: "PatternType", value: "1" }), i3.push({ key: "PaintType", value: "1" }), i3.push({ key: "TilingType", value: "1" }), i3.push({ key: "BBox", value: "[" + t3.boundingBox.map(O2).join(" ") + "]" }), i3.push({ key: "XStep", value: O2(t3.xStep) }), i3.push({ key: "YStep", value: O2(t3.yStep) }), i3.push({ key: "Resources", value: r3 + " 0 R" }), t3.matrix && i3.push({ key: "Matrix", value: "[" + t3.matrix.toString() + "]" }), ie2({ data: t3.stream, additionalKeyValues: i3, objectId: t3.objectNumber }), lt2("endobj");
  }, pe2 = function(t3) {
    var e3;
    for (e3 in Ot2)
      Ot2.hasOwnProperty(e3) && (Ot2[e3] instanceof B$1 ? fe2(Ot2[e3]) : Ot2[e3] instanceof M$1 && de2(Ot2[e3], t3));
  }, ge2 = function(t3) {
    for (var e3 in t3.objectNumber = Xt2(), lt2("<<"), t3)
      switch (e3) {
        case "opacity":
          lt2("/ca " + R2(t3[e3]));
          break;
        case "stroke-opacity":
          lt2("/CA " + R2(t3[e3]));
      }
    lt2(">>"), lt2("endobj");
  }, me2 = function() {
    var t3;
    for (t3 in Mt2)
      Mt2.hasOwnProperty(t3) && ge2(Mt2[t3]);
  }, ve2 = function() {
    for (var t3 in lt2("/XObject <<"), zt2)
      zt2.hasOwnProperty(t3) && zt2[t3].objectNumber >= 0 && lt2("/" + t3 + " " + zt2[t3].objectNumber + " 0 R");
    Tt2.publish("putXobjectDict"), lt2(">>");
  }, be2 = function() {
    Ye.oid = Xt2(), lt2("<<"), lt2("/Filter /Standard"), lt2("/V " + Ye.v), lt2("/R " + Ye.r), lt2("/U <" + Ye.toHexString(Ye.U) + ">"), lt2("/O <" + Ye.toHexString(Ye.O) + ">"), lt2("/P " + Ye.P), lt2(">>"), lt2("endobj");
  }, ye2 = function() {
    for (var t3 in lt2("/Font <<"), Ft2)
      Ft2.hasOwnProperty(t3) && (false === v2 || true === v2 && b2.hasOwnProperty(t3)) && lt2("/" + t3 + " " + Ft2[t3].objectNumber + " 0 R");
    lt2(">>");
  }, we2 = function() {
    if (Object.keys(Ot2).length > 0) {
      for (var t3 in lt2("/Shading <<"), Ot2)
        Ot2.hasOwnProperty(t3) && Ot2[t3] instanceof B$1 && Ot2[t3].objectNumber >= 0 && lt2("/" + t3 + " " + Ot2[t3].objectNumber + " 0 R");
      Tt2.publish("putShadingPatternDict"), lt2(">>");
    }
  }, Ne2 = function(t3) {
    if (Object.keys(Ot2).length > 0) {
      for (var e3 in lt2("/Pattern <<"), Ot2)
        Ot2.hasOwnProperty(e3) && Ot2[e3] instanceof y2.TilingPattern && Ot2[e3].objectNumber >= 0 && Ot2[e3].objectNumber < t3 && lt2("/" + e3 + " " + Ot2[e3].objectNumber + " 0 R");
      Tt2.publish("putTilingPatternDict"), lt2(">>");
    }
  }, Le2 = function() {
    if (Object.keys(Mt2).length > 0) {
      var t3;
      for (t3 in lt2("/ExtGState <<"), Mt2)
        Mt2.hasOwnProperty(t3) && Mt2[t3].objectNumber >= 0 && lt2("/" + t3 + " " + Mt2[t3].objectNumber + " 0 R");
      Tt2.publish("putGStateDict"), lt2(">>");
    }
  }, Ae = function(t3) {
    Zt2(t3.resourcesOid, true), lt2("<<"), lt2("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ye2(), we2(), Ne2(t3.objectOid), Le2(), ve2(), lt2(">>"), lt2("endobj");
  }, xe = function() {
    var t3 = [];
    ce2(), me2(), he2(), pe2(t3), Tt2.publish("putResources"), t3.forEach(Ae), Ae({ resourcesOid: te2, objectOid: Number.MAX_SAFE_INTEGER }), Tt2.publish("postPutResources");
  }, Se = function() {
    Tt2.publish("putAdditionalObjects");
    for (var t3 = 0; t3 < at2.length; t3++) {
      var e3 = at2[t3];
      Zt2(e3.objId, true), lt2(e3.content), lt2("endobj");
    }
    Tt2.publish("postPutAdditionalObjects");
  }, _e = function(t3) {
    Ct2[t3.fontName] = Ct2[t3.fontName] || {}, Ct2[t3.fontName][t3.fontStyle] = t3.id;
  }, Pe = function(t3, e3, r3, n2, i3) {
    var a2 = { id: "F" + (Object.keys(Ft2).length + 1).toString(10), postScriptName: t3, fontName: e3, fontStyle: r3, encoding: n2, isStandardFont: i3 || false, metadata: {} };
    return Tt2.publish("addFont", { font: a2, instance: this }), Ft2[a2.id] = a2, _e(a2), a2.id;
  }, ke = function(t3) {
    for (var e3 = 0, r3 = pt2.length; e3 < r3; e3++) {
      var n2 = Pe.call(this, t3[e3][0], t3[e3][1], t3[e3][2], pt2[e3][3], true);
      false === v2 && (b2[n2] = true);
      var i3 = t3[e3][0].split("-");
      _e({ id: n2, fontName: i3[0], fontStyle: i3[1] || "" });
    }
    Tt2.publish("addFonts", { fonts: Ft2, dictionary: Ct2 });
  }, Ie = function(t3) {
    return t3.foo = function() {
      try {
        return t3.apply(this, arguments);
      } catch (t4) {
        var e3 = t4.stack || "";
        ~e3.indexOf(" at ") && (e3 = e3.split(" at ")[1]);
        var r3 = "Error in function " + e3.split("\n")[0].split("<")[0] + ": " + t4.message;
        if (!n$1.console)
          throw new Error(r3);
        n$1.console.error(r3, t4), n$1.alert && alert(r3);
      }
    }, t3.foo.bar = t3, t3.foo;
  }, Fe = function(t3, e3) {
    var r3, n2, i3, a2, o3, s3, c3, u3, h2;
    if (i3 = (e3 = e3 || {}).sourceEncoding || "Unicode", o3 = e3.outputEncoding, (e3.autoencode || o3) && Ft2[St2].metadata && Ft2[St2].metadata[i3] && Ft2[St2].metadata[i3].encoding && (a2 = Ft2[St2].metadata[i3].encoding, !o3 && Ft2[St2].encoding && (o3 = Ft2[St2].encoding), !o3 && a2.codePages && (o3 = a2.codePages[0]), "string" == typeof o3 && (o3 = a2[o3]), o3)) {
      for (c3 = false, s3 = [], r3 = 0, n2 = t3.length; r3 < n2; r3++)
        (u3 = o3[t3.charCodeAt(r3)]) ? s3.push(String.fromCharCode(u3)) : s3.push(t3[r3]), s3[r3].charCodeAt(0) >> 8 && (c3 = true);
      t3 = s3.join("");
    }
    for (r3 = t3.length; void 0 === c3 && 0 !== r3; )
      t3.charCodeAt(r3 - 1) >> 8 && (c3 = true), r3--;
    if (!c3)
      return t3;
    for (s3 = e3.noBOM ? [] : [254, 255], r3 = 0, n2 = t3.length; r3 < n2; r3++) {
      if ((h2 = (u3 = t3.charCodeAt(r3)) >> 8) >> 8)
        throw new Error("Character at position " + r3 + " of string '" + t3 + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
      s3.push(h2), s3.push(u3 - (h2 << 8));
    }
    return String.fromCharCode.apply(void 0, s3);
  }, Ce = y2.__private__.pdfEscape = y2.pdfEscape = function(t3, e3) {
    return Fe(t3, e3).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
  }, je = y2.__private__.beginPage = function(t3) {
    ot2[++Dt2] = [], Rt2[Dt2] = { objId: 0, contentsObjId: 0, userUnit: Number(d2), artBox: null, bleedBox: null, cropBox: null, trimBox: null, mediaBox: { bottomLeftX: 0, bottomLeftY: 0, topRightX: Number(t3[0]), topRightY: Number(t3[1]) } }, Me(Dt2), ht2(ot2[$3]);
  }, Oe = function(t3, e3) {
    var r3, n2, o3;
    switch (i2 = e3 || i2, "string" == typeof t3 && (r3 = A2(t3.toLowerCase()), Array.isArray(r3) && (n2 = r3[0], o3 = r3[1])), Array.isArray(t3) && (n2 = t3[0] * _t2, o3 = t3[1] * _t2), isNaN(n2) && (n2 = s2[0], o3 = s2[1]), (n2 > 14400 || o3 > 14400) && (a$1.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), n2 = Math.min(14400, n2), o3 = Math.min(14400, o3)), s2 = [n2, o3], i2.substr(0, 1)) {
      case "l":
        o3 > n2 && (s2 = [o3, n2]);
        break;
      case "p":
        n2 > o3 && (s2 = [o3, n2]);
    }
    je(s2), pr(fr), lt2(Lr), 0 !== kr && lt2(kr + " J"), 0 !== Ir && lt2(Ir + " j"), Tt2.publish("addPage", { pageNumber: Dt2 });
  }, Be = function(t3) {
    t3 > 0 && t3 <= Dt2 && (ot2.splice(t3, 1), Rt2.splice(t3, 1), Dt2--, $3 > Dt2 && ($3 = Dt2), this.setPage($3));
  }, Me = function(t3) {
    t3 > 0 && t3 <= Dt2 && ($3 = t3);
  }, Ee = y2.__private__.getNumberOfPages = y2.getNumberOfPages = function() {
    return ot2.length - 1;
  }, qe = function(t3, e3, r3) {
    var n2, i3 = void 0;
    return r3 = r3 || {}, t3 = void 0 !== t3 ? t3 : Ft2[St2].fontName, e3 = void 0 !== e3 ? e3 : Ft2[St2].fontStyle, n2 = t3.toLowerCase(), void 0 !== Ct2[n2] && void 0 !== Ct2[n2][e3] ? i3 = Ct2[n2][e3] : void 0 !== Ct2[t3] && void 0 !== Ct2[t3][e3] ? i3 = Ct2[t3][e3] : false === r3.disableWarning && a$1.warn("Unable to look up font label for font '" + t3 + "', '" + e3 + "'. Refer to getFontList() for available fonts."), i3 || r3.noFallback || null == (i3 = Ct2.times[e3]) && (i3 = Ct2.times.normal), i3;
  }, De = y2.__private__.putInfo = function() {
    var t3 = Xt2(), e3 = function(t4) {
      return t4;
    };
    for (var r3 in null !== m2 && (e3 = Ye.encryptor(t3, 0)), lt2("<<"), lt2("/Producer (" + Ce(e3("jsPDF " + E$1.version)) + ")"), xt2)
      xt2.hasOwnProperty(r3) && xt2[r3] && lt2("/" + r3.substr(0, 1).toUpperCase() + r3.substr(1) + " (" + Ce(e3(xt2[r3])) + ")");
    lt2("/CreationDate (" + Ce(e3(W2)) + ")"), lt2(">>"), lt2("endobj");
  }, Re = y2.__private__.putCatalog = function(t3) {
    var e3 = (t3 = t3 || {}).rootDictionaryObjId || Qt2;
    switch (Xt2(), lt2("<<"), lt2("/Type /Catalog"), lt2("/Pages " + e3 + " 0 R"), mt2 || (mt2 = "fullwidth"), mt2) {
      case "fullwidth":
        lt2("/OpenAction [3 0 R /FitH null]");
        break;
      case "fullheight":
        lt2("/OpenAction [3 0 R /FitV null]");
        break;
      case "fullpage":
        lt2("/OpenAction [3 0 R /Fit]");
        break;
      case "original":
        lt2("/OpenAction [3 0 R /XYZ null null 1]");
        break;
      default:
        var r3 = "" + mt2;
        "%" === r3.substr(r3.length - 1) && (mt2 = parseInt(mt2) / 100), "number" == typeof mt2 && lt2("/OpenAction [3 0 R /XYZ null null " + R2(mt2) + "]");
    }
    switch (Nt2 || (Nt2 = "continuous"), Nt2) {
      case "continuous":
        lt2("/PageLayout /OneColumn");
        break;
      case "single":
        lt2("/PageLayout /SinglePage");
        break;
      case "two":
      case "twoleft":
        lt2("/PageLayout /TwoColumnLeft");
        break;
      case "tworight":
        lt2("/PageLayout /TwoColumnRight");
    }
    yt2 && lt2("/PageMode /" + yt2), Tt2.publish("putCatalog"), lt2(">>"), lt2("endobj");
  }, Te = y2.__private__.putTrailer = function() {
    lt2("trailer"), lt2("<<"), lt2("/Size " + (et2 + 1)), lt2("/Root " + et2 + " 0 R"), lt2("/Info " + (et2 - 1) + " 0 R"), null !== m2 && lt2("/Encrypt " + Ye.oid + " 0 R"), lt2("/ID [ <" + V2 + "> <" + V2 + "> ]"), lt2(">>");
  }, Ue = y2.__private__.putHeader = function() {
    lt2("%PDF-" + w2), lt2("%ºß¬à");
  }, ze = y2.__private__.putXRef = function() {
    var t3 = "0000000000";
    lt2("xref"), lt2("0 " + (et2 + 1)), lt2("0000000000 65535 f ");
    for (var e3 = 1; e3 <= et2; e3++) {
      "function" == typeof rt2[e3] ? lt2((t3 + rt2[e3]()).slice(-10) + " 00000 n ") : void 0 !== rt2[e3] ? lt2((t3 + rt2[e3]).slice(-10) + " 00000 n ") : lt2("0000000000 00000 n ");
    }
  }, He = y2.__private__.buildDocument = function() {
    ut2(), ht2(nt2), Tt2.publish("buildDocument"), Ue(), oe2(), Se(), xe(), null !== m2 && be2(), De(), Re();
    var t3 = it2;
    return ze(), Te(), lt2("startxref"), lt2("" + t3), lt2("%%EOF"), ht2(ot2[$3]), nt2.join("\n");
  }, We = y2.__private__.getBlob = function(t3) {
    return new Blob([dt2(t3)], { type: "application/pdf" });
  }, Ve = y2.output = y2.__private__.output = Ie(function(t3, e3) {
    switch ("string" == typeof (e3 = e3 || {}) ? e3 = { filename: e3 } : e3.filename = e3.filename || "generated.pdf", t3) {
      case void 0:
        return He();
      case "save":
        y2.save(e3.filename);
        break;
      case "arraybuffer":
        return dt2(He());
      case "blob":
        return We(He());
      case "bloburi":
      case "bloburl":
        if (void 0 !== n$1.URL && "function" == typeof n$1.URL.createObjectURL)
          return n$1.URL && n$1.URL.createObjectURL(We(He())) || void 0;
        a$1.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
        break;
      case "datauristring":
      case "dataurlstring":
        var r3 = "", i3 = He();
        try {
          r3 = h$2(i3);
        } catch (t4) {
          r3 = h$2(unescape(encodeURIComponent(i3)));
        }
        return "data:application/pdf;filename=" + e3.filename + ";base64," + r3;
      case "pdfobjectnewwindow":
        if ("[object Window]" === Object.prototype.toString.call(n$1)) {
          var o3 = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js", s3 = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
          e3.pdfObjectUrl && (o3 = e3.pdfObjectUrl, s3 = "");
          var c3 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o3 + '"' + s3 + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e3) + ");<\/script></body></html>", u3 = n$1.open();
          return null !== u3 && u3.document.write(c3), u3;
        }
        throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
      case "pdfjsnewwindow":
        if ("[object Window]" === Object.prototype.toString.call(n$1)) {
          var l2 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e3.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e3.filename + '" width="500px" height="400px" /></body></html>', f2 = n$1.open();
          if (null !== f2) {
            f2.document.write(l2);
            var d4 = this;
            f2.document.documentElement.querySelector("#pdfViewer").onload = function() {
              f2.document.title = e3.filename, f2.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d4.output("bloburl"));
            };
          }
          return f2;
        }
        throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
      case "dataurlnewwindow":
        if ("[object Window]" !== Object.prototype.toString.call(n$1))
          throw new Error("The option dataurlnewwindow just works in a browser-environment.");
        var p3 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e3) + '"></iframe></body></html>', g3 = n$1.open();
        if (null !== g3 && (g3.document.write(p3), g3.document.title = e3.filename), g3 || "undefined" == typeof safari)
          return g3;
        break;
      case "datauri":
      case "dataurl":
        return n$1.document.location.href = this.output("datauristring", e3);
      default:
        return null;
    }
  }), Ge = function(t3) {
    return true === Array.isArray(Ut2) && Ut2.indexOf(t3) > -1;
  };
  switch (o2) {
    case "pt":
      _t2 = 1;
      break;
    case "mm":
      _t2 = 72 / 25.4;
      break;
    case "cm":
      _t2 = 72 / 2.54;
      break;
    case "in":
      _t2 = 72;
      break;
    case "px":
      _t2 = 1 == Ge("px_scaling") ? 0.75 : 96 / 72;
      break;
    case "pc":
    case "em":
      _t2 = 12;
      break;
    case "ex":
      _t2 = 6;
      break;
    default:
      if ("number" != typeof o2)
        throw new Error("Invalid unit: " + o2);
      _t2 = o2;
  }
  var Ye = null;
  K2(), Y2();
  var Je = function(t3) {
    return null !== m2 ? Ye.encryptor(t3, 0) : function(t4) {
      return t4;
    };
  }, Xe = y2.__private__.getPageInfo = y2.getPageInfo = function(t3) {
    if (isNaN(t3) || t3 % 1 != 0)
      throw new Error("Invalid argument passed to jsPDF.getPageInfo");
    return { objId: Rt2[t3].objId, pageNumber: t3, pageContext: Rt2[t3] };
  }, Ke = y2.__private__.getPageInfoByObjId = function(t3) {
    if (isNaN(t3) || t3 % 1 != 0)
      throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
    for (var e3 in Rt2)
      if (Rt2[e3].objId === t3)
        break;
    return Xe(e3);
  }, Ze = y2.__private__.getCurrentPageInfo = y2.getCurrentPageInfo = function() {
    return { objId: Rt2[$3].objId, pageNumber: $3, pageContext: Rt2[$3] };
  };
  y2.addPage = function() {
    return Oe.apply(this, arguments), this;
  }, y2.setPage = function() {
    return Me.apply(this, arguments), ht2.call(this, ot2[$3]), this;
  }, y2.insertPage = function(t3) {
    return this.addPage(), this.movePage($3, t3), this;
  }, y2.movePage = function(t3, e3) {
    var r3, n2;
    if (t3 > e3) {
      r3 = ot2[t3], n2 = Rt2[t3];
      for (var i3 = t3; i3 > e3; i3--)
        ot2[i3] = ot2[i3 - 1], Rt2[i3] = Rt2[i3 - 1];
      ot2[e3] = r3, Rt2[e3] = n2, this.setPage(e3);
    } else if (t3 < e3) {
      r3 = ot2[t3], n2 = Rt2[t3];
      for (var a2 = t3; a2 < e3; a2++)
        ot2[a2] = ot2[a2 + 1], Rt2[a2] = Rt2[a2 + 1];
      ot2[e3] = r3, Rt2[e3] = n2, this.setPage(e3);
    }
    return this;
  }, y2.deletePage = function() {
    return Be.apply(this, arguments), this;
  }, y2.__private__.text = y2.text = function(e3, r3, n2, i3, a2) {
    var o3, s3, c3, u3, h2, l2, f2, d4, p3, g3 = (i3 = i3 || {}).scope || this;
    if ("number" == typeof e3 && "number" == typeof r3 && ("string" == typeof n2 || Array.isArray(n2))) {
      var m3 = n2;
      n2 = r3, r3 = e3, e3 = m3;
    }
    if (arguments[3] instanceof Vt2 == false ? (c3 = arguments[4], u3 = arguments[5], "object" === _typeof(f2 = arguments[3]) && null !== f2 || ("string" == typeof c3 && (u3 = c3, c3 = null), "string" == typeof f2 && (u3 = f2, f2 = null), "number" == typeof f2 && (c3 = f2, f2 = null), i3 = { flags: f2, angle: c3, align: u3 })) : (q2("The transform parameter of text() with a Matrix value"), p3 = a2), isNaN(r3) || isNaN(n2) || null == e3)
      throw new Error("Invalid arguments passed to jsPDF.text");
    if (0 === e3.length)
      return g3;
    var v3 = "", y3 = false, w3 = "number" == typeof i3.lineHeightFactor ? i3.lineHeightFactor : lr, N3 = g3.internal.scaleFactor;
    function L3(t3) {
      return t3 = t3.split("	").join(Array(i3.TabLen || 9).join(" ")), Ce(t3, f2);
    }
    function A3(t3) {
      for (var e4, r4 = t3.concat(), n3 = [], i4 = r4.length; i4--; )
        "string" == typeof (e4 = r4.shift()) ? n3.push(e4) : Array.isArray(t3) && (1 === e4.length || void 0 === e4[1] && void 0 === e4[2]) ? n3.push(e4[0]) : n3.push([e4[0], e4[1], e4[2]]);
      return n3;
    }
    function _3(t3, e4) {
      var r4;
      if ("string" == typeof t3)
        r4 = e4(t3)[0];
      else if (Array.isArray(t3)) {
        for (var n3, i4, a3 = t3.concat(), o4 = [], s4 = a3.length; s4--; )
          "string" == typeof (n3 = a3.shift()) ? o4.push(e4(n3)[0]) : Array.isArray(n3) && "string" == typeof n3[0] && (i4 = e4(n3[0], n3[1], n3[2]), o4.push([i4[0], i4[1], i4[2]]));
        r4 = o4;
      }
      return r4;
    }
    var P3 = false, k3 = true;
    if ("string" == typeof e3)
      P3 = true;
    else if (Array.isArray(e3)) {
      var I2 = e3.concat();
      s3 = [];
      for (var F2, C2 = I2.length; C2--; )
        ("string" != typeof (F2 = I2.shift()) || Array.isArray(F2) && "string" != typeof F2[0]) && (k3 = false);
      P3 = k3;
    }
    if (false === P3)
      throw new Error('Type of text must be string or Array. "' + e3 + '" is not recognized.');
    "string" == typeof e3 && (e3 = e3.match(/[\r?\n]/) ? e3.split(/\r\n|\r|\n/g) : [e3]);
    var j2 = gt2 / g3.internal.scaleFactor, B2 = j2 * (w3 - 1);
    switch (i3.baseline) {
      case "bottom":
        n2 -= B2;
        break;
      case "top":
        n2 += j2 - B2;
        break;
      case "hanging":
        n2 += j2 - 2 * B2;
        break;
      case "middle":
        n2 += j2 / 2 - B2;
    }
    if ((l2 = i3.maxWidth || 0) > 0 && ("string" == typeof e3 ? e3 = g3.splitTextToSize(e3, l2) : "[object Array]" === Object.prototype.toString.call(e3) && (e3 = e3.reduce(function(t3, e4) {
      return t3.concat(g3.splitTextToSize(e4, l2));
    }, []))), o3 = { text: e3, x: r3, y: n2, options: i3, mutex: { pdfEscape: Ce, activeFontKey: St2, fonts: Ft2, activeFontSize: gt2 } }, Tt2.publish("preProcessText", o3), e3 = o3.text, c3 = (i3 = o3.options).angle, p3 instanceof Vt2 == false && c3 && "number" == typeof c3) {
      c3 *= Math.PI / 180, 0 === i3.rotationDirection && (c3 = -c3), S2 === x2.ADVANCED && (c3 = -c3);
      var M2 = Math.cos(c3), E2 = Math.sin(c3);
      p3 = new Vt2(M2, E2, -E2, M2, 0, 0);
    } else
      c3 && c3 instanceof Vt2 && (p3 = c3);
    S2 !== x2.ADVANCED || p3 || (p3 = Yt2), void 0 !== (h2 = i3.charSpace || _r) && (v3 += O2(U2(h2)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d4 = i3.horizontalScale) && (v3 += O2(100 * d4) + " Tz\n");
    i3.lang;
    var D3 = -1, R3 = void 0 !== i3.renderingMode ? i3.renderingMode : i3.stroke, T3 = g3.internal.getCurrentPageInfo().pageContext;
    switch (R3) {
      case 0:
      case false:
      case "fill":
        D3 = 0;
        break;
      case 1:
      case true:
      case "stroke":
        D3 = 1;
        break;
      case 2:
      case "fillThenStroke":
        D3 = 2;
        break;
      case 3:
      case "invisible":
        D3 = 3;
        break;
      case 4:
      case "fillAndAddForClipping":
        D3 = 4;
        break;
      case 5:
      case "strokeAndAddPathForClipping":
        D3 = 5;
        break;
      case 6:
      case "fillThenStrokeAndAddToPathForClipping":
        D3 = 6;
        break;
      case 7:
      case "addToPathForClipping":
        D3 = 7;
    }
    var z3 = void 0 !== T3.usedRenderingMode ? T3.usedRenderingMode : -1;
    -1 !== D3 ? v3 += D3 + " Tr\n" : -1 !== z3 && (v3 += "0 Tr\n"), -1 !== D3 && (T3.usedRenderingMode = D3), u3 = i3.align || "left";
    var H3, W3 = gt2 * w3, V3 = g3.internal.pageSize.getWidth(), G3 = Ft2[St2];
    h2 = i3.charSpace || _r, l2 = i3.maxWidth || 0, f2 = Object.assign({ autoencode: true, noBOM: true }, i3.flags);
    var Y3 = [];
    if ("[object Array]" === Object.prototype.toString.call(e3)) {
      var J3;
      s3 = A3(e3), "left" !== u3 && (H3 = s3.map(function(t3) {
        return g3.getStringUnitWidth(t3, { font: G3, charSpace: h2, fontSize: gt2, doKerning: false }) * gt2 / N3;
      }));
      var X3, K3 = 0;
      if ("right" === u3) {
        r3 -= H3[0], e3 = [], C2 = s3.length;
        for (var Z3 = 0; Z3 < C2; Z3++)
          0 === Z3 ? (X3 = br(r3), J3 = yr(n2)) : (X3 = U2(K3 - H3[Z3]), J3 = -W3), e3.push([s3[Z3], X3, J3]), K3 = H3[Z3];
      } else if ("center" === u3) {
        r3 -= H3[0] / 2, e3 = [], C2 = s3.length;
        for (var $4 = 0; $4 < C2; $4++)
          0 === $4 ? (X3 = br(r3), J3 = yr(n2)) : (X3 = U2((K3 - H3[$4]) / 2), J3 = -W3), e3.push([s3[$4], X3, J3]), K3 = H3[$4];
      } else if ("left" === u3) {
        e3 = [], C2 = s3.length;
        for (var Q3 = 0; Q3 < C2; Q3++)
          e3.push(s3[Q3]);
      } else {
        if ("justify" !== u3)
          throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
        e3 = [], C2 = s3.length, l2 = 0 !== l2 ? l2 : V3;
        for (var tt3 = 0; tt3 < C2; tt3++)
          J3 = 0 === tt3 ? yr(n2) : -W3, X3 = 0 === tt3 ? br(r3) : 0, tt3 < C2 - 1 ? Y3.push(O2(U2((l2 - H3[tt3]) / (s3[tt3].split(" ").length - 1)))) : Y3.push(0), e3.push([s3[tt3], X3, J3]);
      }
    }
    var et3 = "boolean" == typeof i3.R2L ? i3.R2L : bt2;
    true === et3 && (e3 = _3(e3, function(t3, e4, r4) {
      return [t3.split("").reverse().join(""), e4, r4];
    })), o3 = { text: e3, x: r3, y: n2, options: i3, mutex: { pdfEscape: Ce, activeFontKey: St2, fonts: Ft2, activeFontSize: gt2 } }, Tt2.publish("postProcessText", o3), e3 = o3.text, y3 = o3.mutex.isHex || false;
    var rt3 = Ft2[St2].encoding;
    "WinAnsiEncoding" !== rt3 && "StandardEncoding" !== rt3 || (e3 = _3(e3, function(t3, e4, r4) {
      return [L3(t3), e4, r4];
    })), s3 = A3(e3), e3 = [];
    for (var nt3, it3, at3, ot3 = 0, st3 = 1, ct3 = Array.isArray(s3[0]) ? st3 : ot3, ut3 = "", ht3 = function(t3, e4, r4) {
      var n3 = "";
      return r4 instanceof Vt2 ? (r4 = "number" == typeof i3.angle ? Gt2(r4, new Vt2(1, 0, 0, 1, t3, e4)) : Gt2(new Vt2(1, 0, 0, 1, t3, e4), r4), S2 === x2.ADVANCED && (r4 = Gt2(new Vt2(1, 0, 0, -1, 0, 0), r4)), n3 = r4.join(" ") + " Tm\n") : n3 = O2(t3) + " " + O2(e4) + " Td\n", n3;
    }, ft3 = 0; ft3 < s3.length; ft3++) {
      switch (ut3 = "", ct3) {
        case st3:
          at3 = (y3 ? "<" : "(") + s3[ft3][0] + (y3 ? ">" : ")"), nt3 = parseFloat(s3[ft3][1]), it3 = parseFloat(s3[ft3][2]);
          break;
        case ot3:
          at3 = (y3 ? "<" : "(") + s3[ft3] + (y3 ? ">" : ")"), nt3 = br(r3), it3 = yr(n2);
      }
      void 0 !== Y3 && void 0 !== Y3[ft3] && (ut3 = Y3[ft3] + " Tw\n"), 0 === ft3 ? e3.push(ut3 + ht3(nt3, it3, p3) + at3) : ct3 === ot3 ? e3.push(ut3 + at3) : ct3 === st3 && e3.push(ut3 + ht3(nt3, it3, p3) + at3);
    }
    e3 = ct3 === ot3 ? e3.join(" Tj\nT* ") : e3.join(" Tj\n"), e3 += " Tj\n";
    var dt3 = "BT\n/";
    return dt3 += St2 + " " + gt2 + " Tf\n", dt3 += O2(gt2 * w3) + " TL\n", dt3 += xr + "\n", dt3 += v3, dt3 += e3, lt2(dt3 += "ET"), b2[St2] = true, g3;
  };
  var $e = y2.__private__.clip = y2.clip = function(t3) {
    return lt2("evenodd" === t3 ? "W*" : "W"), this;
  };
  y2.clipEvenOdd = function() {
    return $e("evenodd");
  }, y2.__private__.discardPath = y2.discardPath = function() {
    return lt2("n"), this;
  };
  var Qe = y2.__private__.isValidStyle = function(t3) {
    var e3 = false;
    return -1 !== [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"].indexOf(t3) && (e3 = true), e3;
  };
  y2.__private__.setDefaultPathOperation = y2.setDefaultPathOperation = function(t3) {
    return Qe(t3) && (g2 = t3), this;
  };
  var tr = y2.__private__.getStyle = y2.getStyle = function(t3) {
    var e3 = g2;
    switch (t3) {
      case "D":
      case "S":
        e3 = "S";
        break;
      case "F":
        e3 = "f";
        break;
      case "FD":
      case "DF":
        e3 = "B";
        break;
      case "f":
      case "f*":
      case "B":
      case "B*":
        e3 = t3;
    }
    return e3;
  }, er = y2.close = function() {
    return lt2("h"), this;
  };
  y2.stroke = function() {
    return lt2("S"), this;
  }, y2.fill = function(t3) {
    return rr("f", t3), this;
  }, y2.fillEvenOdd = function(t3) {
    return rr("f*", t3), this;
  }, y2.fillStroke = function(t3) {
    return rr("B", t3), this;
  }, y2.fillStrokeEvenOdd = function(t3) {
    return rr("B*", t3), this;
  };
  var rr = function(e3, r3) {
    "object" === _typeof(r3) ? ar(r3, e3) : lt2(e3);
  }, nr = function(t3) {
    null === t3 || S2 === x2.ADVANCED && void 0 === t3 || (t3 = tr(t3), lt2(t3));
  };
  function ir(t3, e3, r3, n2, i3) {
    var a2 = new M$1(e3 || this.boundingBox, r3 || this.xStep, n2 || this.yStep, this.gState, i3 || this.matrix);
    a2.stream = this.stream;
    var o3 = t3 + "$$" + this.cloneIndex++ + "$$";
    return Jt2(o3, a2), a2;
  }
  var ar = function(t3, e3) {
    var r3 = Bt2[t3.key], n2 = Ot2[r3];
    if (n2 instanceof B$1)
      lt2("q"), lt2(or(e3)), n2.gState && y2.setGState(n2.gState), lt2(t3.matrix.toString() + " cm"), lt2("/" + r3 + " sh"), lt2("Q");
    else if (n2 instanceof M$1) {
      var i3 = new Vt2(1, 0, 0, -1, 0, Rr());
      t3.matrix && (i3 = i3.multiply(t3.matrix || Yt2), r3 = ir.call(n2, t3.key, t3.boundingBox, t3.xStep, t3.yStep, i3).id), lt2("q"), lt2("/Pattern cs"), lt2("/" + r3 + " scn"), n2.gState && y2.setGState(n2.gState), lt2(e3), lt2("Q");
    }
  }, or = function(t3) {
    switch (t3) {
      case "f":
      case "F":
        return "W n";
      case "f*":
        return "W* n";
      case "B":
        return "W S";
      case "B*":
        return "W* S";
      case "S":
        return "W S";
      case "n":
        return "W n";
    }
  }, sr = y2.moveTo = function(t3, e3) {
    return lt2(O2(U2(t3)) + " " + O2(H2(e3)) + " m"), this;
  }, cr = y2.lineTo = function(t3, e3) {
    return lt2(O2(U2(t3)) + " " + O2(H2(e3)) + " l"), this;
  }, ur2 = y2.curveTo = function(t3, e3, r3, n2, i3, a2) {
    return lt2([O2(U2(t3)), O2(H2(e3)), O2(U2(r3)), O2(H2(n2)), O2(U2(i3)), O2(H2(a2)), "c"].join(" ")), this;
  };
  y2.__private__.line = y2.line = function(t3, e3, r3, n2, i3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n2) || !Qe(i3))
      throw new Error("Invalid arguments passed to jsPDF.line");
    return S2 === x2.COMPAT ? this.lines([[r3 - t3, n2 - e3]], t3, e3, [1, 1], i3 || "S") : this.lines([[r3 - t3, n2 - e3]], t3, e3, [1, 1]).stroke();
  }, y2.__private__.lines = y2.lines = function(t3, e3, r3, n2, i3, a2) {
    var o3, s3, c3, u3, h2, l2, f2, d4, p3, g3, m3, v3;
    if ("number" == typeof t3 && (v3 = r3, r3 = e3, e3 = t3, t3 = v3), n2 = n2 || [1, 1], a2 = a2 || false, isNaN(e3) || isNaN(r3) || !Array.isArray(t3) || !Array.isArray(n2) || !Qe(i3) || "boolean" != typeof a2)
      throw new Error("Invalid arguments passed to jsPDF.lines");
    for (sr(e3, r3), o3 = n2[0], s3 = n2[1], u3 = t3.length, g3 = e3, m3 = r3, c3 = 0; c3 < u3; c3++)
      2 === (h2 = t3[c3]).length ? (g3 = h2[0] * o3 + g3, m3 = h2[1] * s3 + m3, cr(g3, m3)) : (l2 = h2[0] * o3 + g3, f2 = h2[1] * s3 + m3, d4 = h2[2] * o3 + g3, p3 = h2[3] * s3 + m3, g3 = h2[4] * o3 + g3, m3 = h2[5] * s3 + m3, ur2(l2, f2, d4, p3, g3, m3));
    return a2 && er(), nr(i3), this;
  }, y2.path = function(t3) {
    for (var e3 = 0; e3 < t3.length; e3++) {
      var r3 = t3[e3], n2 = r3.c;
      switch (r3.op) {
        case "m":
          sr(n2[0], n2[1]);
          break;
        case "l":
          cr(n2[0], n2[1]);
          break;
        case "c":
          ur2.apply(this, n2);
          break;
        case "h":
          er();
      }
    }
    return this;
  }, y2.__private__.rect = y2.rect = function(t3, e3, r3, n2, i3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n2) || !Qe(i3))
      throw new Error("Invalid arguments passed to jsPDF.rect");
    return S2 === x2.COMPAT && (n2 = -n2), lt2([O2(U2(t3)), O2(H2(e3)), O2(U2(r3)), O2(U2(n2)), "re"].join(" ")), nr(i3), this;
  }, y2.__private__.triangle = y2.triangle = function(t3, e3, r3, n2, i3, a2, o3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n2) || isNaN(i3) || isNaN(a2) || !Qe(o3))
      throw new Error("Invalid arguments passed to jsPDF.triangle");
    return this.lines([[r3 - t3, n2 - e3], [i3 - r3, a2 - n2], [t3 - i3, e3 - a2]], t3, e3, [1, 1], o3, true), this;
  }, y2.__private__.roundedRect = y2.roundedRect = function(t3, e3, r3, n2, i3, a2, o3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n2) || isNaN(i3) || isNaN(a2) || !Qe(o3))
      throw new Error("Invalid arguments passed to jsPDF.roundedRect");
    var s3 = 4 / 3 * (Math.SQRT2 - 1);
    return i3 = Math.min(i3, 0.5 * r3), a2 = Math.min(a2, 0.5 * n2), this.lines([[r3 - 2 * i3, 0], [i3 * s3, 0, i3, a2 - a2 * s3, i3, a2], [0, n2 - 2 * a2], [0, a2 * s3, -i3 * s3, a2, -i3, a2], [2 * i3 - r3, 0], [-i3 * s3, 0, -i3, -a2 * s3, -i3, -a2], [0, 2 * a2 - n2], [0, -a2 * s3, i3 * s3, -a2, i3, -a2]], t3 + i3, e3, [1, 1], o3, true), this;
  }, y2.__private__.ellipse = y2.ellipse = function(t3, e3, r3, n2, i3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n2) || !Qe(i3))
      throw new Error("Invalid arguments passed to jsPDF.ellipse");
    var a2 = 4 / 3 * (Math.SQRT2 - 1) * r3, o3 = 4 / 3 * (Math.SQRT2 - 1) * n2;
    return sr(t3 + r3, e3), ur2(t3 + r3, e3 - o3, t3 + a2, e3 - n2, t3, e3 - n2), ur2(t3 - a2, e3 - n2, t3 - r3, e3 - o3, t3 - r3, e3), ur2(t3 - r3, e3 + o3, t3 - a2, e3 + n2, t3, e3 + n2), ur2(t3 + a2, e3 + n2, t3 + r3, e3 + o3, t3 + r3, e3), nr(i3), this;
  }, y2.__private__.circle = y2.circle = function(t3, e3, r3, n2) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || !Qe(n2))
      throw new Error("Invalid arguments passed to jsPDF.circle");
    return this.ellipse(t3, e3, r3, r3, n2);
  }, y2.setFont = function(t3, e3, r3) {
    return r3 && (e3 = k2(e3, r3)), St2 = qe(t3, e3, { disableWarning: false }), this;
  };
  var hr = y2.__private__.getFont = y2.getFont = function() {
    return Ft2[qe.apply(y2, arguments)];
  };
  y2.__private__.getFontList = y2.getFontList = function() {
    var t3, e3, r3 = {};
    for (t3 in Ct2)
      if (Ct2.hasOwnProperty(t3))
        for (e3 in r3[t3] = [], Ct2[t3])
          Ct2[t3].hasOwnProperty(e3) && r3[t3].push(e3);
    return r3;
  }, y2.addFont = function(t3, e3, r3, n2, i3) {
    var a2 = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
    return arguments[3] && -1 !== a2.indexOf(arguments[3]) ? i3 = arguments[3] : arguments[3] && -1 == a2.indexOf(arguments[3]) && (r3 = k2(r3, n2)), i3 = i3 || "Identity-H", Pe.call(this, t3, e3, r3, i3);
  };
  var lr, fr = e2.lineWidth || 0.200025, dr = y2.__private__.getLineWidth = y2.getLineWidth = function() {
    return fr;
  }, pr = y2.__private__.setLineWidth = y2.setLineWidth = function(t3) {
    return fr = t3, lt2(O2(U2(t3)) + " w"), this;
  };
  y2.__private__.setLineDash = E$1.API.setLineDash = E$1.API.setLineDashPattern = function(t3, e3) {
    if (t3 = t3 || [], e3 = e3 || 0, isNaN(e3) || !Array.isArray(t3))
      throw new Error("Invalid arguments passed to jsPDF.setLineDash");
    return t3 = t3.map(function(t4) {
      return O2(U2(t4));
    }).join(" "), e3 = O2(U2(e3)), lt2("[" + t3 + "] " + e3 + " d"), this;
  };
  var gr = y2.__private__.getLineHeight = y2.getLineHeight = function() {
    return gt2 * lr;
  };
  y2.__private__.getLineHeight = y2.getLineHeight = function() {
    return gt2 * lr;
  };
  var mr = y2.__private__.setLineHeightFactor = y2.setLineHeightFactor = function(t3) {
    return "number" == typeof (t3 = t3 || 1.15) && (lr = t3), this;
  }, vr = y2.__private__.getLineHeightFactor = y2.getLineHeightFactor = function() {
    return lr;
  };
  mr(e2.lineHeight);
  var br = y2.__private__.getHorizontalCoordinate = function(t3) {
    return U2(t3);
  }, yr = y2.__private__.getVerticalCoordinate = function(t3) {
    return S2 === x2.ADVANCED ? t3 : Rt2[$3].mediaBox.topRightY - Rt2[$3].mediaBox.bottomLeftY - U2(t3);
  }, wr = y2.__private__.getHorizontalCoordinateString = y2.getHorizontalCoordinateString = function(t3) {
    return O2(br(t3));
  }, Nr = y2.__private__.getVerticalCoordinateString = y2.getVerticalCoordinateString = function(t3) {
    return O2(yr(t3));
  }, Lr = e2.strokeColor || "0 G";
  y2.__private__.getStrokeColor = y2.getDrawColor = function() {
    return ee2(Lr);
  }, y2.__private__.setStrokeColor = y2.setDrawColor = function(t3, e3, r3, n2) {
    return Lr = re2({ ch1: t3, ch2: e3, ch3: r3, ch4: n2, pdfColorType: "draw", precision: 2 }), lt2(Lr), this;
  };
  var Ar = e2.fillColor || "0 g";
  y2.__private__.getFillColor = y2.getFillColor = function() {
    return ee2(Ar);
  }, y2.__private__.setFillColor = y2.setFillColor = function(t3, e3, r3, n2) {
    return Ar = re2({ ch1: t3, ch2: e3, ch3: r3, ch4: n2, pdfColorType: "fill", precision: 2 }), lt2(Ar), this;
  };
  var xr = e2.textColor || "0 g", Sr = y2.__private__.getTextColor = y2.getTextColor = function() {
    return ee2(xr);
  };
  y2.__private__.setTextColor = y2.setTextColor = function(t3, e3, r3, n2) {
    return xr = re2({ ch1: t3, ch2: e3, ch3: r3, ch4: n2, pdfColorType: "text", precision: 3 }), this;
  };
  var _r = e2.charSpace, Pr = y2.__private__.getCharSpace = y2.getCharSpace = function() {
    return parseFloat(_r || 0);
  };
  y2.__private__.setCharSpace = y2.setCharSpace = function(t3) {
    if (isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.setCharSpace");
    return _r = t3, this;
  };
  var kr = 0;
  y2.CapJoinStyles = { 0: 0, butt: 0, but: 0, miter: 0, 1: 1, round: 1, rounded: 1, circle: 1, 2: 2, projecting: 2, project: 2, square: 2, bevel: 2 }, y2.__private__.setLineCap = y2.setLineCap = function(t3) {
    var e3 = y2.CapJoinStyles[t3];
    if (void 0 === e3)
      throw new Error("Line cap style of '" + t3 + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return kr = e3, lt2(e3 + " J"), this;
  };
  var Ir = 0;
  y2.__private__.setLineJoin = y2.setLineJoin = function(t3) {
    var e3 = y2.CapJoinStyles[t3];
    if (void 0 === e3)
      throw new Error("Line join style of '" + t3 + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return Ir = e3, lt2(e3 + " j"), this;
  }, y2.__private__.setLineMiterLimit = y2.__private__.setMiterLimit = y2.setLineMiterLimit = y2.setMiterLimit = function(t3) {
    if (t3 = t3 || 0, isNaN(t3))
      throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
    return lt2(O2(U2(t3)) + " M"), this;
  }, y2.GState = j$2, y2.setGState = function(t3) {
    (t3 = "string" == typeof t3 ? Mt2[Et2[t3]] : Fr(null, t3)).equals(qt2) || (lt2("/" + t3.id + " gs"), qt2 = t3);
  };
  var Fr = function(t3, e3) {
    if (!t3 || !Et2[t3]) {
      var r3 = false;
      for (var n2 in Mt2)
        if (Mt2.hasOwnProperty(n2) && Mt2[n2].equals(e3)) {
          r3 = true;
          break;
        }
      if (r3)
        e3 = Mt2[n2];
      else {
        var i3 = "GS" + (Object.keys(Mt2).length + 1).toString(10);
        Mt2[i3] = e3, e3.id = i3;
      }
      return t3 && (Et2[t3] = e3.id), Tt2.publish("addGState", e3), e3;
    }
  };
  y2.addGState = function(t3, e3) {
    return Fr(t3, e3), this;
  }, y2.saveGraphicsState = function() {
    return lt2("q"), jt2.push({ key: St2, size: gt2, color: xr }), this;
  }, y2.restoreGraphicsState = function() {
    lt2("Q");
    var t3 = jt2.pop();
    return St2 = t3.key, gt2 = t3.size, xr = t3.color, qt2 = null, this;
  }, y2.setCurrentTransformationMatrix = function(t3) {
    return lt2(t3.toString() + " cm"), this;
  }, y2.comment = function(t3) {
    return lt2("#" + t3), this;
  };
  var Cr = function(t3, e3) {
    var r3 = t3 || 0;
    Object.defineProperty(this, "x", { enumerable: true, get: function() {
      return r3;
    }, set: function(t4) {
      isNaN(t4) || (r3 = parseFloat(t4));
    } });
    var n2 = e3 || 0;
    Object.defineProperty(this, "y", { enumerable: true, get: function() {
      return n2;
    }, set: function(t4) {
      isNaN(t4) || (n2 = parseFloat(t4));
    } });
    var i3 = "pt";
    return Object.defineProperty(this, "type", { enumerable: true, get: function() {
      return i3;
    }, set: function(t4) {
      i3 = t4.toString();
    } }), this;
  }, jr = function(t3, e3, r3, n2) {
    Cr.call(this, t3, e3), this.type = "rect";
    var i3 = r3 || 0;
    Object.defineProperty(this, "w", { enumerable: true, get: function() {
      return i3;
    }, set: function(t4) {
      isNaN(t4) || (i3 = parseFloat(t4));
    } });
    var a2 = n2 || 0;
    return Object.defineProperty(this, "h", { enumerable: true, get: function() {
      return a2;
    }, set: function(t4) {
      isNaN(t4) || (a2 = parseFloat(t4));
    } }), this;
  }, Or = function() {
    this.page = Dt2, this.currentPage = $3, this.pages = ot2.slice(0), this.pagesContext = Rt2.slice(0), this.x = Pt2, this.y = kt2, this.matrix = It2, this.width = qr($3), this.height = Rr($3), this.outputDestination = ct2, this.id = "", this.objectNumber = -1;
  };
  Or.prototype.restore = function() {
    Dt2 = this.page, $3 = this.currentPage, Rt2 = this.pagesContext, ot2 = this.pages, Pt2 = this.x, kt2 = this.y, It2 = this.matrix, Dr($3, this.width), Tr($3, this.height), ct2 = this.outputDestination;
  };
  var Br = function(t3, e3, r3, n2, i3) {
    Wt2.push(new Or()), Dt2 = $3 = 0, ot2 = [], Pt2 = t3, kt2 = e3, It2 = i3, je([r3, n2]);
  }, Mr = function(t3) {
    if (Ht2[t3])
      Wt2.pop().restore();
    else {
      var e3 = new Or(), r3 = "Xo" + (Object.keys(zt2).length + 1).toString(10);
      e3.id = r3, Ht2[t3] = r3, zt2[r3] = e3, Tt2.publish("addFormObject", e3), Wt2.pop().restore();
    }
  };
  for (var Er in y2.beginFormObject = function(t3, e3, r3, n2, i3) {
    return Br(t3, e3, r3, n2, i3), this;
  }, y2.endFormObject = function(t3) {
    return Mr(t3), this;
  }, y2.doFormObject = function(t3, e3) {
    var r3 = zt2[Ht2[t3]];
    return lt2("q"), lt2(e3.toString() + " cm"), lt2("/" + r3.id + " Do"), lt2("Q"), this;
  }, y2.getFormObject = function(t3) {
    var e3 = zt2[Ht2[t3]];
    return { x: e3.x, y: e3.y, width: e3.width, height: e3.height, matrix: e3.matrix };
  }, y2.save = function(t3, e3) {
    return t3 = t3 || "generated.pdf", (e3 = e3 || {}).returnPromise = e3.returnPromise || false, false === e3.returnPromise ? (l(We(He()), t3), "function" == typeof l.unload && n$1.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function(e4, r3) {
      try {
        var i3 = l(We(He()), t3);
        "function" == typeof l.unload && n$1.setTimeout && setTimeout(l.unload, 911), e4(i3);
      } catch (t4) {
        r3(t4.message);
      }
    });
  }, E$1.API)
    E$1.API.hasOwnProperty(Er) && ("events" === Er && E$1.API.events.length ? function(t3, e3) {
      var r3, n2, i3;
      for (i3 = e3.length - 1; -1 !== i3; i3--)
        r3 = e3[i3][0], n2 = e3[i3][1], t3.subscribe.apply(t3, [r3].concat("function" == typeof n2 ? [n2] : n2));
    }(Tt2, E$1.API.events) : y2[Er] = E$1.API[Er]);
  var qr = y2.getPageWidth = function(t3) {
    return (Rt2[t3 = t3 || $3].mediaBox.topRightX - Rt2[t3].mediaBox.bottomLeftX) / _t2;
  }, Dr = y2.setPageWidth = function(t3, e3) {
    Rt2[t3].mediaBox.topRightX = e3 * _t2 + Rt2[t3].mediaBox.bottomLeftX;
  }, Rr = y2.getPageHeight = function(t3) {
    return (Rt2[t3 = t3 || $3].mediaBox.topRightY - Rt2[t3].mediaBox.bottomLeftY) / _t2;
  }, Tr = y2.setPageHeight = function(t3, e3) {
    Rt2[t3].mediaBox.topRightY = e3 * _t2 + Rt2[t3].mediaBox.bottomLeftY;
  };
  return y2.internal = { pdfEscape: Ce, getStyle: tr, getFont: hr, getFontSize: vt2, getCharSpace: Pr, getTextColor: Sr, getLineHeight: gr, getLineHeightFactor: vr, getLineWidth: dr, write: ft2, getHorizontalCoordinate: br, getVerticalCoordinate: yr, getCoordinateString: wr, getVerticalCoordinateString: Nr, collections: {}, newObject: Xt2, newAdditionalObject: $t2, newObjectDeferred: Kt2, newObjectDeferredBegin: Zt2, getFilters: ne2, putStream: ie2, events: Tt2, scaleFactor: _t2, pageSize: { getWidth: function() {
    return qr($3);
  }, setWidth: function(t3) {
    Dr($3, t3);
  }, getHeight: function() {
    return Rr($3);
  }, setHeight: function(t3) {
    Tr($3, t3);
  } }, encryptionOptions: m2, encryption: Ye, getEncryptor: Je, output: Ve, getNumberOfPages: Ee, pages: ot2, out: lt2, f2: R2, f3: T2, getPageInfo: Xe, getPageInfoByObjId: Ke, getCurrentPageInfo: Ze, getPDFVersion: N2, Point: Cr, Rectangle: jr, Matrix: Vt2, hasHotfix: Ge }, Object.defineProperty(y2.internal.pageSize, "width", { get: function() {
    return qr($3);
  }, set: function(t3) {
    Dr($3, t3);
  }, enumerable: true, configurable: true }), Object.defineProperty(y2.internal.pageSize, "height", { get: function() {
    return Rr($3);
  }, set: function(t3) {
    Tr($3, t3);
  }, enumerable: true, configurable: true }), ke.call(y2, pt2), St2 = "F1", Oe(s2, i2), Tt2.publish("initialized"), y2;
}
I$2.prototype.lsbFirstWord = function(t3) {
  return String.fromCharCode(t3 >> 0 & 255, t3 >> 8 & 255, t3 >> 16 & 255, t3 >> 24 & 255);
}, I$2.prototype.toHexString = function(t3) {
  return t3.split("").map(function(t4) {
    return ("0" + (255 & t4.charCodeAt(0)).toString(16)).slice(-2);
  }).join("");
}, I$2.prototype.hexToBytes = function(t3) {
  for (var e2 = [], r2 = 0; r2 < t3.length; r2 += 2)
    e2.push(String.fromCharCode(parseInt(t3.substr(r2, 2), 16)));
  return e2.join("");
}, I$2.prototype.processOwnerPassword = function(t3, e2) {
  return P$2(x$2(e2).substr(0, 5), t3);
}, I$2.prototype.encryptor = function(t3, e2) {
  var r2 = x$2(this.encryptionKey + String.fromCharCode(255 & t3, t3 >> 8 & 255, t3 >> 16 & 255, 255 & e2, e2 >> 8 & 255)).substr(0, 10);
  return function(t4) {
    return P$2(r2, t4);
  };
}, j$2.prototype.equals = function(e2) {
  var r2, n2 = "id,objectNumber,equals";
  if (!e2 || _typeof(e2) !== _typeof(this))
    return false;
  var i2 = 0;
  for (r2 in this)
    if (!(n2.indexOf(r2) >= 0)) {
      if (this.hasOwnProperty(r2) && !e2.hasOwnProperty(r2))
        return false;
      if (this[r2] !== e2[r2])
        return false;
      i2++;
    }
  for (r2 in e2)
    e2.hasOwnProperty(r2) && n2.indexOf(r2) < 0 && i2--;
  return 0 === i2;
}, E$1.API = { events: [] }, E$1.version = "2.5.1";
var q$1 = E$1.API, D$2 = 1, R$1 = function(t3) {
  return t3.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
}, T$2 = function(t3) {
  return t3.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}, U$1 = function(t3) {
  return t3.toFixed(2);
}, z$2 = function(t3) {
  return t3.toFixed(5);
};
q$1.__acroform__ = {};
var H$2 = function(t3, e2) {
  t3.prototype = Object.create(e2.prototype), t3.prototype.constructor = t3;
}, W$1 = function(t3) {
  return t3 * D$2;
}, V$1 = function(t3) {
  var e2 = new ut$1(), r2 = At$1.internal.getHeight(t3) || 0, n2 = At$1.internal.getWidth(t3) || 0;
  return e2.BBox = [0, 0, Number(U$1(n2)), Number(U$1(r2))], e2;
}, G$1 = q$1.__acroform__.setBit = function(t3, e2) {
  if (t3 = t3 || 0, e2 = e2 || 0, isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
  return t3 |= 1 << e2;
}, Y$1 = q$1.__acroform__.clearBit = function(t3, e2) {
  if (t3 = t3 || 0, e2 = e2 || 0, isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
  return t3 &= ~(1 << e2);
}, J$1 = q$1.__acroform__.getBit = function(t3, e2) {
  if (isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
  return 0 == (t3 & 1 << e2) ? 0 : 1;
}, X$1 = q$1.__acroform__.getBitForPdf = function(t3, e2) {
  if (isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
  return J$1(t3, e2 - 1);
}, K$1 = q$1.__acroform__.setBitForPdf = function(t3, e2) {
  if (isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
  return G$1(t3, e2 - 1);
}, Z$1 = q$1.__acroform__.clearBitForPdf = function(t3, e2) {
  if (isNaN(t3) || isNaN(e2))
    throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
  return Y$1(t3, e2 - 1);
}, $$3 = q$1.__acroform__.calculateCoordinates = function(t3, e2) {
  var r2 = e2.internal.getHorizontalCoordinate, n2 = e2.internal.getVerticalCoordinate, i2 = t3[0], a2 = t3[1], o2 = t3[2], s2 = t3[3], c2 = {};
  return c2.lowerLeft_X = r2(i2) || 0, c2.lowerLeft_Y = n2(a2 + s2) || 0, c2.upperRight_X = r2(i2 + o2) || 0, c2.upperRight_Y = n2(a2) || 0, [Number(U$1(c2.lowerLeft_X)), Number(U$1(c2.lowerLeft_Y)), Number(U$1(c2.upperRight_X)), Number(U$1(c2.upperRight_Y))];
}, Q$1 = function(t3) {
  if (t3.appearanceStreamContent)
    return t3.appearanceStreamContent;
  if (t3.V || t3.DV) {
    var e2 = [], r2 = t3._V || t3.DV, n2 = tt$1(t3, r2), i2 = t3.scope.internal.getFont(t3.fontName, t3.fontStyle).id;
    e2.push("/Tx BMC"), e2.push("q"), e2.push("BT"), e2.push(t3.scope.__private__.encodeColorString(t3.color)), e2.push("/" + i2 + " " + U$1(n2.fontSize) + " Tf"), e2.push("1 0 0 1 0 0 Tm"), e2.push(n2.text), e2.push("ET"), e2.push("Q"), e2.push("EMC");
    var a2 = V$1(t3);
    return a2.scope = t3.scope, a2.stream = e2.join("\n"), a2;
  }
}, tt$1 = function(t3, e2) {
  var r2 = 0 === t3.fontSize ? t3.maxFontSize : t3.fontSize, n2 = { text: "", fontSize: "" }, i2 = (e2 = ")" == (e2 = "(" == e2.substr(0, 1) ? e2.substr(1) : e2).substr(e2.length - 1) ? e2.substr(0, e2.length - 1) : e2).split(" ");
  i2 = t3.multiline ? i2.map(function(t4) {
    return t4.split("\n");
  }) : i2.map(function(t4) {
    return [t4];
  });
  var a2 = r2, o2 = At$1.internal.getHeight(t3) || 0;
  o2 = o2 < 0 ? -o2 : o2;
  var s2 = At$1.internal.getWidth(t3) || 0;
  s2 = s2 < 0 ? -s2 : s2;
  var c2 = function(e3, r3, n3) {
    if (e3 + 1 < i2.length) {
      var a3 = r3 + " " + i2[e3 + 1][0];
      return et$1(a3, t3, n3).width <= s2 - 4;
    }
    return false;
  };
  a2++;
  t:
    for (; a2 > 0; ) {
      e2 = "", a2--;
      var u2, h2, l2 = et$1("3", t3, a2).height, f2 = t3.multiline ? o2 - a2 : (o2 - l2) / 2, d2 = f2 += 2, p2 = 0, g2 = 0, m2 = 0;
      if (a2 <= 0) {
        e2 = "(...) Tj\n", e2 += "% Width of Text: " + et$1(e2, t3, a2 = 12).width + ", FieldWidth:" + s2 + "\n";
        break;
      }
      for (var v2 = "", b2 = 0, y2 = 0; y2 < i2.length; y2++)
        if (i2.hasOwnProperty(y2)) {
          var w2 = false;
          if (1 !== i2[y2].length && m2 !== i2[y2].length - 1) {
            if ((l2 + 2) * (b2 + 2) + 2 > o2)
              continue t;
            v2 += i2[y2][m2], w2 = true, g2 = y2, y2--;
          } else {
            v2 = " " == (v2 += i2[y2][m2] + " ").substr(v2.length - 1) ? v2.substr(0, v2.length - 1) : v2;
            var N2 = parseInt(y2), L2 = c2(N2, v2, a2), A2 = y2 >= i2.length - 1;
            if (L2 && !A2) {
              v2 += " ", m2 = 0;
              continue;
            }
            if (L2 || A2) {
              if (A2)
                g2 = N2;
              else if (t3.multiline && (l2 + 2) * (b2 + 2) + 2 > o2)
                continue t;
            } else {
              if (!t3.multiline)
                continue t;
              if ((l2 + 2) * (b2 + 2) + 2 > o2)
                continue t;
              g2 = N2;
            }
          }
          for (var x2 = "", S2 = p2; S2 <= g2; S2++) {
            var _2 = i2[S2];
            if (t3.multiline) {
              if (S2 === g2) {
                x2 += _2[m2] + " ", m2 = (m2 + 1) % _2.length;
                continue;
              }
              if (S2 === p2) {
                x2 += _2[_2.length - 1] + " ";
                continue;
              }
            }
            x2 += _2[0] + " ";
          }
          switch (x2 = " " == x2.substr(x2.length - 1) ? x2.substr(0, x2.length - 1) : x2, h2 = et$1(x2, t3, a2).width, t3.textAlign) {
            case "right":
              u2 = s2 - h2 - 2;
              break;
            case "center":
              u2 = (s2 - h2) / 2;
              break;
            case "left":
            default:
              u2 = 2;
          }
          e2 += U$1(u2) + " " + U$1(d2) + " Td\n", e2 += "(" + R$1(x2) + ") Tj\n", e2 += -U$1(u2) + " 0 Td\n", d2 = -(a2 + 2), h2 = 0, p2 = w2 ? g2 : g2 + 1, b2++, v2 = "";
        }
      break;
    }
  return n2.text = e2, n2.fontSize = a2, n2;
}, et$1 = function(t3, e2, r2) {
  var n2 = e2.scope.internal.getFont(e2.fontName, e2.fontStyle), i2 = e2.scope.getStringUnitWidth(t3, { font: n2, fontSize: parseFloat(r2), charSpace: 0 }) * parseFloat(r2);
  return { height: e2.scope.getStringUnitWidth("3", { font: n2, fontSize: parseFloat(r2), charSpace: 0 }) * parseFloat(r2) * 1.5, width: i2 };
}, rt$1 = { fields: [], xForms: [], acroFormDictionaryRoot: null, printedOut: false, internal: null, isInitialized: false }, nt$1 = function(t3, e2) {
  var r2 = { type: "reference", object: t3 };
  void 0 === e2.internal.getPageInfo(t3.page).pageContext.annotations.find(function(t4) {
    return t4.type === r2.type && t4.object === r2.object;
  }) && e2.internal.getPageInfo(t3.page).pageContext.annotations.push(r2);
}, it$1 = function(e2, r2) {
  for (var n2 in e2)
    if (e2.hasOwnProperty(n2)) {
      var i2 = n2, a2 = e2[n2];
      r2.internal.newObjectDeferredBegin(a2.objId, true), "object" === _typeof(a2) && "function" == typeof a2.putStream && a2.putStream(), delete e2[i2];
    }
}, at$1 = function(e2, r2) {
  if (r2.scope = e2, void 0 !== e2.internal && (void 0 === e2.internal.acroformPlugin || false === e2.internal.acroformPlugin.isInitialized)) {
    if (lt$1.FieldNum = 0, e2.internal.acroformPlugin = JSON.parse(JSON.stringify(rt$1)), e2.internal.acroformPlugin.acroFormDictionaryRoot)
      throw new Error("Exception while creating AcroformDictionary");
    D$2 = e2.internal.scaleFactor, e2.internal.acroformPlugin.acroFormDictionaryRoot = new ht$1(), e2.internal.acroformPlugin.acroFormDictionaryRoot.scope = e2, e2.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e2.internal.events.subscribe("postPutResources", function() {
      !function(t3) {
        t3.internal.events.unsubscribe(t3.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t3.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t3.internal.acroformPlugin.printedOut = true;
      }(e2);
    }), e2.internal.events.subscribe("buildDocument", function() {
      !function(t3) {
        t3.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
        var e3 = t3.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
        for (var r3 in e3)
          if (e3.hasOwnProperty(r3)) {
            var n2 = e3[r3];
            n2.objId = void 0, n2.hasAnnotation && nt$1(n2, t3);
          }
      }(e2);
    }), e2.internal.events.subscribe("putCatalog", function() {
      !function(t3) {
        if (void 0 === t3.internal.acroformPlugin.acroFormDictionaryRoot)
          throw new Error("putCatalogCallback: Root missing.");
        t3.internal.write("/AcroForm " + t3.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
      }(e2);
    }), e2.internal.events.subscribe("postPutPages", function(r3) {
      !function(e3, r4) {
        var n2 = !e3;
        for (var i2 in e3 || (r4.internal.newObjectDeferredBegin(r4.internal.acroformPlugin.acroFormDictionaryRoot.objId, true), r4.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e3 = e3 || r4.internal.acroformPlugin.acroFormDictionaryRoot.Kids)
          if (e3.hasOwnProperty(i2)) {
            var a2 = e3[i2], o2 = [], s2 = a2.Rect;
            if (a2.Rect && (a2.Rect = $$3(a2.Rect, r4)), r4.internal.newObjectDeferredBegin(a2.objId, true), a2.DA = At$1.createDefaultAppearanceStream(a2), "object" === _typeof(a2) && "function" == typeof a2.getKeyValueListForStream && (o2 = a2.getKeyValueListForStream()), a2.Rect = s2, a2.hasAppearanceStream && !a2.appearanceStreamContent) {
              var c2 = Q$1(a2);
              o2.push({ key: "AP", value: "<</N " + c2 + ">>" }), r4.internal.acroformPlugin.xForms.push(c2);
            }
            if (a2.appearanceStreamContent) {
              var u2 = "";
              for (var h2 in a2.appearanceStreamContent)
                if (a2.appearanceStreamContent.hasOwnProperty(h2)) {
                  var l2 = a2.appearanceStreamContent[h2];
                  if (u2 += "/" + h2 + " ", u2 += "<<", Object.keys(l2).length >= 1 || Array.isArray(l2)) {
                    for (var i2 in l2)
                      if (l2.hasOwnProperty(i2)) {
                        var f2 = l2[i2];
                        "function" == typeof f2 && (f2 = f2.call(r4, a2)), u2 += "/" + i2 + " " + f2 + " ", r4.internal.acroformPlugin.xForms.indexOf(f2) >= 0 || r4.internal.acroformPlugin.xForms.push(f2);
                      }
                  } else
                    "function" == typeof (f2 = l2) && (f2 = f2.call(r4, a2)), u2 += "/" + i2 + " " + f2, r4.internal.acroformPlugin.xForms.indexOf(f2) >= 0 || r4.internal.acroformPlugin.xForms.push(f2);
                  u2 += ">>";
                }
              o2.push({ key: "AP", value: "<<\n" + u2 + ">>" });
            }
            r4.internal.putStream({ additionalKeyValues: o2, objectId: a2.objId }), r4.internal.out("endobj");
          }
        n2 && it$1(r4.internal.acroformPlugin.xForms, r4);
      }(r3, e2);
    }), e2.internal.acroformPlugin.isInitialized = true;
  }
}, ot$1 = q$1.__acroform__.arrayToPdfArray = function(e2, r2, n2) {
  var i2 = function(t3) {
    return t3;
  };
  if (Array.isArray(e2)) {
    for (var a2 = "[", o2 = 0; o2 < e2.length; o2++)
      switch (0 !== o2 && (a2 += " "), _typeof(e2[o2])) {
        case "boolean":
        case "number":
        case "object":
          a2 += e2[o2].toString();
          break;
        case "string":
          "/" !== e2[o2].substr(0, 1) ? (void 0 !== r2 && n2 && (i2 = n2.internal.getEncryptor(r2)), a2 += "(" + R$1(i2(e2[o2].toString())) + ")") : a2 += e2[o2].toString();
      }
    return a2 += "]";
  }
  throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
};
var st$1 = function(t3, e2, r2) {
  var n2 = function(t4) {
    return t4;
  };
  return void 0 !== e2 && r2 && (n2 = r2.internal.getEncryptor(e2)), (t3 = t3 || "").toString(), t3 = "(" + R$1(n2(t3)) + ")";
}, ct$1 = function() {
  this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", { get: function() {
    if (void 0 === this._objId) {
      if (void 0 === this.scope)
        return;
      this._objId = this.scope.internal.newObjectDeferred();
    }
    return this._objId;
  }, set: function(t3) {
    this._objId = t3;
  } }), Object.defineProperty(this, "scope", { value: this._scope, writable: true });
};
ct$1.prototype.toString = function() {
  return this.objId + " 0 R";
}, ct$1.prototype.putStream = function() {
  var t3 = this.getKeyValueListForStream();
  this.scope.internal.putStream({ data: this.stream, additionalKeyValues: t3, objectId: this.objId }), this.scope.internal.out("endobj");
}, ct$1.prototype.getKeyValueListForStream = function() {
  var t3 = [], e2 = Object.getOwnPropertyNames(this).filter(function(t4) {
    return "content" != t4 && "appearanceStreamContent" != t4 && "scope" != t4 && "objId" != t4 && "_" != t4.substring(0, 1);
  });
  for (var r2 in e2)
    if (false === Object.getOwnPropertyDescriptor(this, e2[r2]).configurable) {
      var n2 = e2[r2], i2 = this[n2];
      i2 && (Array.isArray(i2) ? t3.push({ key: n2, value: ot$1(i2, this.objId, this.scope) }) : i2 instanceof ct$1 ? (i2.scope = this.scope, t3.push({ key: n2, value: i2.objId + " 0 R" })) : "function" != typeof i2 && t3.push({ key: n2, value: i2 }));
    }
  return t3;
};
var ut$1 = function() {
  ct$1.call(this), Object.defineProperty(this, "Type", { value: "/XObject", configurable: false, writable: true }), Object.defineProperty(this, "Subtype", { value: "/Form", configurable: false, writable: true }), Object.defineProperty(this, "FormType", { value: 1, configurable: false, writable: true });
  var t3, e2 = [];
  Object.defineProperty(this, "BBox", { configurable: false, get: function() {
    return e2;
  }, set: function(t4) {
    e2 = t4;
  } }), Object.defineProperty(this, "Resources", { value: "2 0 R", configurable: false, writable: true }), Object.defineProperty(this, "stream", { enumerable: false, configurable: true, set: function(e3) {
    t3 = e3.trim();
  }, get: function() {
    return t3 || null;
  } });
};
H$2(ut$1, ct$1);
var ht$1 = function() {
  ct$1.call(this);
  var t3, e2 = [];
  Object.defineProperty(this, "Kids", { enumerable: false, configurable: true, get: function() {
    return e2.length > 0 ? e2 : void 0;
  } }), Object.defineProperty(this, "Fields", { enumerable: false, configurable: false, get: function() {
    return e2;
  } }), Object.defineProperty(this, "DA", { enumerable: false, configurable: false, get: function() {
    if (t3) {
      var e3 = function(t4) {
        return t4;
      };
      return this.scope && (e3 = this.scope.internal.getEncryptor(this.objId)), "(" + R$1(e3(t3)) + ")";
    }
  }, set: function(e3) {
    t3 = e3;
  } });
};
H$2(ht$1, ct$1);
var lt$1 = function t() {
  ct$1.call(this);
  var e2 = 4;
  Object.defineProperty(this, "F", { enumerable: false, configurable: false, get: function() {
    return e2;
  }, set: function(t3) {
    if (isNaN(t3))
      throw new Error('Invalid value "' + t3 + '" for attribute F supplied.');
    e2 = t3;
  } }), Object.defineProperty(this, "showWhenPrinted", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(e2, 3));
  }, set: function(t3) {
    true === Boolean(t3) ? this.F = K$1(e2, 3) : this.F = Z$1(e2, 3);
  } });
  var r2 = 0;
  Object.defineProperty(this, "Ff", { enumerable: false, configurable: false, get: function() {
    return r2;
  }, set: function(t3) {
    if (isNaN(t3))
      throw new Error('Invalid value "' + t3 + '" for attribute Ff supplied.');
    r2 = t3;
  } });
  var n2 = [];
  Object.defineProperty(this, "Rect", { enumerable: false, configurable: false, get: function() {
    if (0 !== n2.length)
      return n2;
  }, set: function(t3) {
    n2 = void 0 !== t3 ? t3 : [];
  } }), Object.defineProperty(this, "x", { enumerable: true, configurable: true, get: function() {
    return !n2 || isNaN(n2[0]) ? 0 : n2[0];
  }, set: function(t3) {
    n2[0] = t3;
  } }), Object.defineProperty(this, "y", { enumerable: true, configurable: true, get: function() {
    return !n2 || isNaN(n2[1]) ? 0 : n2[1];
  }, set: function(t3) {
    n2[1] = t3;
  } }), Object.defineProperty(this, "width", { enumerable: true, configurable: true, get: function() {
    return !n2 || isNaN(n2[2]) ? 0 : n2[2];
  }, set: function(t3) {
    n2[2] = t3;
  } }), Object.defineProperty(this, "height", { enumerable: true, configurable: true, get: function() {
    return !n2 || isNaN(n2[3]) ? 0 : n2[3];
  }, set: function(t3) {
    n2[3] = t3;
  } });
  var i2 = "";
  Object.defineProperty(this, "FT", { enumerable: true, configurable: false, get: function() {
    return i2;
  }, set: function(t3) {
    switch (t3) {
      case "/Btn":
      case "/Tx":
      case "/Ch":
      case "/Sig":
        i2 = t3;
        break;
      default:
        throw new Error('Invalid value "' + t3 + '" for attribute FT supplied.');
    }
  } });
  var a2 = null;
  Object.defineProperty(this, "T", { enumerable: true, configurable: false, get: function() {
    if (!a2 || a2.length < 1) {
      if (this instanceof yt$1)
        return;
      a2 = "FieldObject" + t.FieldNum++;
    }
    var e3 = function(t3) {
      return t3;
    };
    return this.scope && (e3 = this.scope.internal.getEncryptor(this.objId)), "(" + R$1(e3(a2)) + ")";
  }, set: function(t3) {
    a2 = t3.toString();
  } }), Object.defineProperty(this, "fieldName", { configurable: true, enumerable: true, get: function() {
    return a2;
  }, set: function(t3) {
    a2 = t3;
  } });
  var o2 = "helvetica";
  Object.defineProperty(this, "fontName", { enumerable: true, configurable: true, get: function() {
    return o2;
  }, set: function(t3) {
    o2 = t3;
  } });
  var s2 = "normal";
  Object.defineProperty(this, "fontStyle", { enumerable: true, configurable: true, get: function() {
    return s2;
  }, set: function(t3) {
    s2 = t3;
  } });
  var c2 = 0;
  Object.defineProperty(this, "fontSize", { enumerable: true, configurable: true, get: function() {
    return c2;
  }, set: function(t3) {
    c2 = t3;
  } });
  var u2 = void 0;
  Object.defineProperty(this, "maxFontSize", { enumerable: true, configurable: true, get: function() {
    return void 0 === u2 ? 50 / D$2 : u2;
  }, set: function(t3) {
    u2 = t3;
  } });
  var h2 = "black";
  Object.defineProperty(this, "color", { enumerable: true, configurable: true, get: function() {
    return h2;
  }, set: function(t3) {
    h2 = t3;
  } });
  var l2 = "/F1 0 Tf 0 g";
  Object.defineProperty(this, "DA", { enumerable: true, configurable: false, get: function() {
    if (!(!l2 || this instanceof yt$1 || this instanceof Nt$1))
      return st$1(l2, this.objId, this.scope);
  }, set: function(t3) {
    t3 = t3.toString(), l2 = t3;
  } });
  var f2 = null;
  Object.defineProperty(this, "DV", { enumerable: false, configurable: false, get: function() {
    if (f2)
      return this instanceof mt$1 == false ? st$1(f2, this.objId, this.scope) : f2;
  }, set: function(t3) {
    t3 = t3.toString(), f2 = this instanceof mt$1 == false ? "(" === t3.substr(0, 1) ? T$2(t3.substr(1, t3.length - 2)) : T$2(t3) : t3;
  } }), Object.defineProperty(this, "defaultValue", { enumerable: true, configurable: true, get: function() {
    return this instanceof mt$1 == true ? T$2(f2.substr(1, f2.length - 1)) : f2;
  }, set: function(t3) {
    t3 = t3.toString(), f2 = this instanceof mt$1 == true ? "/" + t3 : t3;
  } });
  var d2 = null;
  Object.defineProperty(this, "_V", { enumerable: false, configurable: false, get: function() {
    if (d2)
      return d2;
  }, set: function(t3) {
    this.V = t3;
  } }), Object.defineProperty(this, "V", { enumerable: false, configurable: false, get: function() {
    if (d2)
      return this instanceof mt$1 == false ? st$1(d2, this.objId, this.scope) : d2;
  }, set: function(t3) {
    t3 = t3.toString(), d2 = this instanceof mt$1 == false ? "(" === t3.substr(0, 1) ? T$2(t3.substr(1, t3.length - 2)) : T$2(t3) : t3;
  } }), Object.defineProperty(this, "value", { enumerable: true, configurable: true, get: function() {
    return this instanceof mt$1 == true ? T$2(d2.substr(1, d2.length - 1)) : d2;
  }, set: function(t3) {
    t3 = t3.toString(), d2 = this instanceof mt$1 == true ? "/" + t3 : t3;
  } }), Object.defineProperty(this, "hasAnnotation", { enumerable: true, configurable: true, get: function() {
    return this.Rect;
  } }), Object.defineProperty(this, "Type", { enumerable: true, configurable: false, get: function() {
    return this.hasAnnotation ? "/Annot" : null;
  } }), Object.defineProperty(this, "Subtype", { enumerable: true, configurable: false, get: function() {
    return this.hasAnnotation ? "/Widget" : null;
  } });
  var p2, g2 = false;
  Object.defineProperty(this, "hasAppearanceStream", { enumerable: true, configurable: true, get: function() {
    return g2;
  }, set: function(t3) {
    t3 = Boolean(t3), g2 = t3;
  } }), Object.defineProperty(this, "page", { enumerable: true, configurable: true, get: function() {
    if (p2)
      return p2;
  }, set: function(t3) {
    p2 = t3;
  } }), Object.defineProperty(this, "readOnly", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 1));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 1) : this.Ff = Z$1(this.Ff, 1);
  } }), Object.defineProperty(this, "required", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 2));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 2) : this.Ff = Z$1(this.Ff, 2);
  } }), Object.defineProperty(this, "noExport", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 3));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 3) : this.Ff = Z$1(this.Ff, 3);
  } });
  var m2 = null;
  Object.defineProperty(this, "Q", { enumerable: true, configurable: false, get: function() {
    if (null !== m2)
      return m2;
  }, set: function(t3) {
    if (-1 === [0, 1, 2].indexOf(t3))
      throw new Error('Invalid value "' + t3 + '" for attribute Q supplied.');
    m2 = t3;
  } }), Object.defineProperty(this, "textAlign", { get: function() {
    var t3;
    switch (m2) {
      case 0:
      default:
        t3 = "left";
        break;
      case 1:
        t3 = "center";
        break;
      case 2:
        t3 = "right";
    }
    return t3;
  }, configurable: true, enumerable: true, set: function(t3) {
    switch (t3) {
      case "right":
      case 2:
        m2 = 2;
        break;
      case "center":
      case 1:
        m2 = 1;
        break;
      case "left":
      case 0:
      default:
        m2 = 0;
    }
  } });
};
H$2(lt$1, ct$1);
var ft$1 = function() {
  lt$1.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
  var t3 = 0;
  Object.defineProperty(this, "TI", { enumerable: true, configurable: false, get: function() {
    return t3;
  }, set: function(e3) {
    t3 = e3;
  } }), Object.defineProperty(this, "topIndex", { enumerable: true, configurable: true, get: function() {
    return t3;
  }, set: function(e3) {
    t3 = e3;
  } });
  var e2 = [];
  Object.defineProperty(this, "Opt", { enumerable: true, configurable: false, get: function() {
    return ot$1(e2, this.objId, this.scope);
  }, set: function(t4) {
    var r2, n2;
    n2 = [], "string" == typeof (r2 = t4) && (n2 = function(t5, e3, r3) {
      r3 || (r3 = 1);
      for (var n3, i2 = []; n3 = e3.exec(t5); )
        i2.push(n3[r3]);
      return i2;
    }(r2, /\((.*?)\)/g)), e2 = n2;
  } }), this.getOptions = function() {
    return e2;
  }, this.setOptions = function(t4) {
    e2 = t4, this.sort && e2.sort();
  }, this.addOption = function(t4) {
    t4 = (t4 = t4 || "").toString(), e2.push(t4), this.sort && e2.sort();
  }, this.removeOption = function(t4, r2) {
    for (r2 = r2 || false, t4 = (t4 = t4 || "").toString(); -1 !== e2.indexOf(t4) && (e2.splice(e2.indexOf(t4), 1), false !== r2); )
      ;
  }, Object.defineProperty(this, "combo", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 18));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 18) : this.Ff = Z$1(this.Ff, 18);
  } }), Object.defineProperty(this, "edit", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 19));
  }, set: function(t4) {
    true === this.combo && (true === Boolean(t4) ? this.Ff = K$1(this.Ff, 19) : this.Ff = Z$1(this.Ff, 19));
  } }), Object.defineProperty(this, "sort", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 20));
  }, set: function(t4) {
    true === Boolean(t4) ? (this.Ff = K$1(this.Ff, 20), e2.sort()) : this.Ff = Z$1(this.Ff, 20);
  } }), Object.defineProperty(this, "multiSelect", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 22));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 22) : this.Ff = Z$1(this.Ff, 22);
  } }), Object.defineProperty(this, "doNotSpellCheck", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 23));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 23) : this.Ff = Z$1(this.Ff, 23);
  } }), Object.defineProperty(this, "commitOnSelChange", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 27));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 27) : this.Ff = Z$1(this.Ff, 27);
  } }), this.hasAppearanceStream = false;
};
H$2(ft$1, lt$1);
var dt$1 = function() {
  ft$1.call(this), this.fontName = "helvetica", this.combo = false;
};
H$2(dt$1, ft$1);
var pt$1 = function() {
  dt$1.call(this), this.combo = true;
};
H$2(pt$1, dt$1);
var gt$1 = function() {
  pt$1.call(this), this.edit = true;
};
H$2(gt$1, pt$1);
var mt$1 = function() {
  lt$1.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 15));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 15) : this.Ff = Z$1(this.Ff, 15);
  } }), Object.defineProperty(this, "radio", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 16));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 16) : this.Ff = Z$1(this.Ff, 16);
  } }), Object.defineProperty(this, "pushButton", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 17));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 17) : this.Ff = Z$1(this.Ff, 17);
  } }), Object.defineProperty(this, "radioIsUnison", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 26));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 26) : this.Ff = Z$1(this.Ff, 26);
  } });
  var e2, r2 = {};
  Object.defineProperty(this, "MK", { enumerable: false, configurable: false, get: function() {
    var t3 = function(t4) {
      return t4;
    };
    if (this.scope && (t3 = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(r2).length) {
      var e3, n2 = [];
      for (e3 in n2.push("<<"), r2)
        n2.push("/" + e3 + " (" + R$1(t3(r2[e3])) + ")");
      return n2.push(">>"), n2.join("\n");
    }
  }, set: function(e3) {
    "object" === _typeof(e3) && (r2 = e3);
  } }), Object.defineProperty(this, "caption", { enumerable: true, configurable: true, get: function() {
    return r2.CA || "";
  }, set: function(t3) {
    "string" == typeof t3 && (r2.CA = t3);
  } }), Object.defineProperty(this, "AS", { enumerable: false, configurable: false, get: function() {
    return e2;
  }, set: function(t3) {
    e2 = t3;
  } }), Object.defineProperty(this, "appearanceState", { enumerable: true, configurable: true, get: function() {
    return e2.substr(1, e2.length - 1);
  }, set: function(t3) {
    e2 = "/" + t3;
  } });
};
H$2(mt$1, lt$1);
var vt$1 = function() {
  mt$1.call(this), this.pushButton = true;
};
H$2(vt$1, mt$1);
var bt$1 = function() {
  mt$1.call(this), this.radio = true, this.pushButton = false;
  var t3 = [];
  Object.defineProperty(this, "Kids", { enumerable: true, configurable: false, get: function() {
    return t3;
  }, set: function(e2) {
    t3 = void 0 !== e2 ? e2 : [];
  } });
};
H$2(bt$1, mt$1);
var yt$1 = function() {
  var e2, r2;
  lt$1.call(this), Object.defineProperty(this, "Parent", { enumerable: false, configurable: false, get: function() {
    return e2;
  }, set: function(t3) {
    e2 = t3;
  } }), Object.defineProperty(this, "optionName", { enumerable: false, configurable: true, get: function() {
    return r2;
  }, set: function(t3) {
    r2 = t3;
  } });
  var n2, i2 = {};
  Object.defineProperty(this, "MK", { enumerable: false, configurable: false, get: function() {
    var t3 = function(t4) {
      return t4;
    };
    this.scope && (t3 = this.scope.internal.getEncryptor(this.objId));
    var e3, r3 = [];
    for (e3 in r3.push("<<"), i2)
      r3.push("/" + e3 + " (" + R$1(t3(i2[e3])) + ")");
    return r3.push(">>"), r3.join("\n");
  }, set: function(e3) {
    "object" === _typeof(e3) && (i2 = e3);
  } }), Object.defineProperty(this, "caption", { enumerable: true, configurable: true, get: function() {
    return i2.CA || "";
  }, set: function(t3) {
    "string" == typeof t3 && (i2.CA = t3);
  } }), Object.defineProperty(this, "AS", { enumerable: false, configurable: false, get: function() {
    return n2;
  }, set: function(t3) {
    n2 = t3;
  } }), Object.defineProperty(this, "appearanceState", { enumerable: true, configurable: true, get: function() {
    return n2.substr(1, n2.length - 1);
  }, set: function(t3) {
    n2 = "/" + t3;
  } }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = At$1.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};
H$2(yt$1, lt$1), bt$1.prototype.setAppearance = function(t3) {
  if (!("createAppearanceStream" in t3) || !("getCA" in t3))
    throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
  for (var e2 in this.Kids)
    if (this.Kids.hasOwnProperty(e2)) {
      var r2 = this.Kids[e2];
      r2.appearanceStreamContent = t3.createAppearanceStream(r2.optionName), r2.caption = t3.getCA();
    }
}, bt$1.prototype.createOption = function(t3) {
  var e2 = new yt$1();
  return e2.Parent = this, e2.optionName = t3, this.Kids.push(e2), xt$1.call(this.scope, e2), e2;
};
var wt$1 = function() {
  mt$1.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = At$1.CheckBox.createAppearanceStream();
};
H$2(wt$1, mt$1);
var Nt$1 = function() {
  lt$1.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 13));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 13) : this.Ff = Z$1(this.Ff, 13);
  } }), Object.defineProperty(this, "fileSelect", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 21));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 21) : this.Ff = Z$1(this.Ff, 21);
  } }), Object.defineProperty(this, "doNotSpellCheck", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 23));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 23) : this.Ff = Z$1(this.Ff, 23);
  } }), Object.defineProperty(this, "doNotScroll", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 24));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 24) : this.Ff = Z$1(this.Ff, 24);
  } }), Object.defineProperty(this, "comb", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 25));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 25) : this.Ff = Z$1(this.Ff, 25);
  } }), Object.defineProperty(this, "richText", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 26));
  }, set: function(t4) {
    true === Boolean(t4) ? this.Ff = K$1(this.Ff, 26) : this.Ff = Z$1(this.Ff, 26);
  } });
  var t3 = null;
  Object.defineProperty(this, "MaxLen", { enumerable: true, configurable: false, get: function() {
    return t3;
  }, set: function(e2) {
    t3 = e2;
  } }), Object.defineProperty(this, "maxLength", { enumerable: true, configurable: true, get: function() {
    return t3;
  }, set: function(e2) {
    Number.isInteger(e2) && (t3 = e2);
  } }), Object.defineProperty(this, "hasAppearanceStream", { enumerable: true, configurable: true, get: function() {
    return this.V || this.DV;
  } });
};
H$2(Nt$1, lt$1);
var Lt$1 = function() {
  Nt$1.call(this), Object.defineProperty(this, "password", { enumerable: true, configurable: true, get: function() {
    return Boolean(X$1(this.Ff, 14));
  }, set: function(t3) {
    true === Boolean(t3) ? this.Ff = K$1(this.Ff, 14) : this.Ff = Z$1(this.Ff, 14);
  } }), this.password = true;
};
H$2(Lt$1, Nt$1);
var At$1 = { CheckBox: { createAppearanceStream: function() {
  return { N: { On: At$1.CheckBox.YesNormal }, D: { On: At$1.CheckBox.YesPushDown, Off: At$1.CheckBox.OffPushDown } };
}, YesPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [], n2 = t3.scope.internal.getFont(t3.fontName, t3.fontStyle).id, i2 = t3.scope.__private__.encodeColorString(t3.color), a2 = tt$1(t3, t3.caption);
  return r2.push("0.749023 g"), r2.push("0 0 " + U$1(At$1.internal.getWidth(t3)) + " " + U$1(At$1.internal.getHeight(t3)) + " re"), r2.push("f"), r2.push("BMC"), r2.push("q"), r2.push("0 0 1 rg"), r2.push("/" + n2 + " " + U$1(a2.fontSize) + " Tf " + i2), r2.push("BT"), r2.push(a2.text), r2.push("ET"), r2.push("Q"), r2.push("EMC"), e2.stream = r2.join("\n"), e2;
}, YesNormal: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = t3.scope.internal.getFont(t3.fontName, t3.fontStyle).id, n2 = t3.scope.__private__.encodeColorString(t3.color), i2 = [], a2 = At$1.internal.getHeight(t3), o2 = At$1.internal.getWidth(t3), s2 = tt$1(t3, t3.caption);
  return i2.push("1 g"), i2.push("0 0 " + U$1(o2) + " " + U$1(a2) + " re"), i2.push("f"), i2.push("q"), i2.push("0 0 1 rg"), i2.push("0 0 " + U$1(o2 - 1) + " " + U$1(a2 - 1) + " re"), i2.push("W"), i2.push("n"), i2.push("0 g"), i2.push("BT"), i2.push("/" + r2 + " " + U$1(s2.fontSize) + " Tf " + n2), i2.push(s2.text), i2.push("ET"), i2.push("Q"), e2.stream = i2.join("\n"), e2;
}, OffPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [];
  return r2.push("0.749023 g"), r2.push("0 0 " + U$1(At$1.internal.getWidth(t3)) + " " + U$1(At$1.internal.getHeight(t3)) + " re"), r2.push("f"), e2.stream = r2.join("\n"), e2;
} }, RadioButton: { Circle: { createAppearanceStream: function(t3) {
  var e2 = { D: { Off: At$1.RadioButton.Circle.OffPushDown }, N: {} };
  return e2.N[t3] = At$1.RadioButton.Circle.YesNormal, e2.D[t3] = At$1.RadioButton.Circle.YesPushDown, e2;
}, getCA: function() {
  return "l";
}, YesNormal: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [], n2 = At$1.internal.getWidth(t3) <= At$1.internal.getHeight(t3) ? At$1.internal.getWidth(t3) / 4 : At$1.internal.getHeight(t3) / 4;
  n2 = Number((0.9 * n2).toFixed(5));
  var i2 = At$1.internal.Bezier_C, a2 = Number((n2 * i2).toFixed(5));
  return r2.push("q"), r2.push("1 0 0 1 " + z$2(At$1.internal.getWidth(t3) / 2) + " " + z$2(At$1.internal.getHeight(t3) / 2) + " cm"), r2.push(n2 + " 0 m"), r2.push(n2 + " " + a2 + " " + a2 + " " + n2 + " 0 " + n2 + " c"), r2.push("-" + a2 + " " + n2 + " -" + n2 + " " + a2 + " -" + n2 + " 0 c"), r2.push("-" + n2 + " -" + a2 + " -" + a2 + " -" + n2 + " 0 -" + n2 + " c"), r2.push(a2 + " -" + n2 + " " + n2 + " -" + a2 + " " + n2 + " 0 c"), r2.push("f"), r2.push("Q"), e2.stream = r2.join("\n"), e2;
}, YesPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [], n2 = At$1.internal.getWidth(t3) <= At$1.internal.getHeight(t3) ? At$1.internal.getWidth(t3) / 4 : At$1.internal.getHeight(t3) / 4;
  n2 = Number((0.9 * n2).toFixed(5));
  var i2 = Number((2 * n2).toFixed(5)), a2 = Number((i2 * At$1.internal.Bezier_C).toFixed(5)), o2 = Number((n2 * At$1.internal.Bezier_C).toFixed(5));
  return r2.push("0.749023 g"), r2.push("q"), r2.push("1 0 0 1 " + z$2(At$1.internal.getWidth(t3) / 2) + " " + z$2(At$1.internal.getHeight(t3) / 2) + " cm"), r2.push(i2 + " 0 m"), r2.push(i2 + " " + a2 + " " + a2 + " " + i2 + " 0 " + i2 + " c"), r2.push("-" + a2 + " " + i2 + " -" + i2 + " " + a2 + " -" + i2 + " 0 c"), r2.push("-" + i2 + " -" + a2 + " -" + a2 + " -" + i2 + " 0 -" + i2 + " c"), r2.push(a2 + " -" + i2 + " " + i2 + " -" + a2 + " " + i2 + " 0 c"), r2.push("f"), r2.push("Q"), r2.push("0 g"), r2.push("q"), r2.push("1 0 0 1 " + z$2(At$1.internal.getWidth(t3) / 2) + " " + z$2(At$1.internal.getHeight(t3) / 2) + " cm"), r2.push(n2 + " 0 m"), r2.push(n2 + " " + o2 + " " + o2 + " " + n2 + " 0 " + n2 + " c"), r2.push("-" + o2 + " " + n2 + " -" + n2 + " " + o2 + " -" + n2 + " 0 c"), r2.push("-" + n2 + " -" + o2 + " -" + o2 + " -" + n2 + " 0 -" + n2 + " c"), r2.push(o2 + " -" + n2 + " " + n2 + " -" + o2 + " " + n2 + " 0 c"), r2.push("f"), r2.push("Q"), e2.stream = r2.join("\n"), e2;
}, OffPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [], n2 = At$1.internal.getWidth(t3) <= At$1.internal.getHeight(t3) ? At$1.internal.getWidth(t3) / 4 : At$1.internal.getHeight(t3) / 4;
  n2 = Number((0.9 * n2).toFixed(5));
  var i2 = Number((2 * n2).toFixed(5)), a2 = Number((i2 * At$1.internal.Bezier_C).toFixed(5));
  return r2.push("0.749023 g"), r2.push("q"), r2.push("1 0 0 1 " + z$2(At$1.internal.getWidth(t3) / 2) + " " + z$2(At$1.internal.getHeight(t3) / 2) + " cm"), r2.push(i2 + " 0 m"), r2.push(i2 + " " + a2 + " " + a2 + " " + i2 + " 0 " + i2 + " c"), r2.push("-" + a2 + " " + i2 + " -" + i2 + " " + a2 + " -" + i2 + " 0 c"), r2.push("-" + i2 + " -" + a2 + " -" + a2 + " -" + i2 + " 0 -" + i2 + " c"), r2.push(a2 + " -" + i2 + " " + i2 + " -" + a2 + " " + i2 + " 0 c"), r2.push("f"), r2.push("Q"), e2.stream = r2.join("\n"), e2;
} }, Cross: { createAppearanceStream: function(t3) {
  var e2 = { D: { Off: At$1.RadioButton.Cross.OffPushDown }, N: {} };
  return e2.N[t3] = At$1.RadioButton.Cross.YesNormal, e2.D[t3] = At$1.RadioButton.Cross.YesPushDown, e2;
}, getCA: function() {
  return "8";
}, YesNormal: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [], n2 = At$1.internal.calculateCross(t3);
  return r2.push("q"), r2.push("1 1 " + U$1(At$1.internal.getWidth(t3) - 2) + " " + U$1(At$1.internal.getHeight(t3) - 2) + " re"), r2.push("W"), r2.push("n"), r2.push(U$1(n2.x1.x) + " " + U$1(n2.x1.y) + " m"), r2.push(U$1(n2.x2.x) + " " + U$1(n2.x2.y) + " l"), r2.push(U$1(n2.x4.x) + " " + U$1(n2.x4.y) + " m"), r2.push(U$1(n2.x3.x) + " " + U$1(n2.x3.y) + " l"), r2.push("s"), r2.push("Q"), e2.stream = r2.join("\n"), e2;
}, YesPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = At$1.internal.calculateCross(t3), n2 = [];
  return n2.push("0.749023 g"), n2.push("0 0 " + U$1(At$1.internal.getWidth(t3)) + " " + U$1(At$1.internal.getHeight(t3)) + " re"), n2.push("f"), n2.push("q"), n2.push("1 1 " + U$1(At$1.internal.getWidth(t3) - 2) + " " + U$1(At$1.internal.getHeight(t3) - 2) + " re"), n2.push("W"), n2.push("n"), n2.push(U$1(r2.x1.x) + " " + U$1(r2.x1.y) + " m"), n2.push(U$1(r2.x2.x) + " " + U$1(r2.x2.y) + " l"), n2.push(U$1(r2.x4.x) + " " + U$1(r2.x4.y) + " m"), n2.push(U$1(r2.x3.x) + " " + U$1(r2.x3.y) + " l"), n2.push("s"), n2.push("Q"), e2.stream = n2.join("\n"), e2;
}, OffPushDown: function(t3) {
  var e2 = V$1(t3);
  e2.scope = t3.scope;
  var r2 = [];
  return r2.push("0.749023 g"), r2.push("0 0 " + U$1(At$1.internal.getWidth(t3)) + " " + U$1(At$1.internal.getHeight(t3)) + " re"), r2.push("f"), e2.stream = r2.join("\n"), e2;
} } }, createDefaultAppearanceStream: function(t3) {
  var e2 = t3.scope.internal.getFont(t3.fontName, t3.fontStyle).id, r2 = t3.scope.__private__.encodeColorString(t3.color);
  return "/" + e2 + " " + t3.fontSize + " Tf " + r2;
} };
At$1.internal = { Bezier_C: 0.551915024494, calculateCross: function(t3) {
  var e2 = At$1.internal.getWidth(t3), r2 = At$1.internal.getHeight(t3), n2 = Math.min(e2, r2);
  return { x1: { x: (e2 - n2) / 2, y: (r2 - n2) / 2 + n2 }, x2: { x: (e2 - n2) / 2 + n2, y: (r2 - n2) / 2 }, x3: { x: (e2 - n2) / 2, y: (r2 - n2) / 2 }, x4: { x: (e2 - n2) / 2 + n2, y: (r2 - n2) / 2 + n2 } };
} }, At$1.internal.getWidth = function(e2) {
  var r2 = 0;
  return "object" === _typeof(e2) && (r2 = W$1(e2.Rect[2])), r2;
}, At$1.internal.getHeight = function(e2) {
  var r2 = 0;
  return "object" === _typeof(e2) && (r2 = W$1(e2.Rect[3])), r2;
};
var xt$1 = q$1.addField = function(t3) {
  if (at$1(this, t3), !(t3 instanceof lt$1))
    throw new Error("Invalid argument passed to jsPDF.addField.");
  var e2;
  return (e2 = t3).scope.internal.acroformPlugin.printedOut && (e2.scope.internal.acroformPlugin.printedOut = false, e2.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e2.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e2), t3.page = t3.scope.internal.getCurrentPageInfo().pageNumber, this;
};
q$1.AcroFormChoiceField = ft$1, q$1.AcroFormListBox = dt$1, q$1.AcroFormComboBox = pt$1, q$1.AcroFormEditBox = gt$1, q$1.AcroFormButton = mt$1, q$1.AcroFormPushButton = vt$1, q$1.AcroFormRadioButton = bt$1, q$1.AcroFormCheckBox = wt$1, q$1.AcroFormTextField = Nt$1, q$1.AcroFormPasswordField = Lt$1, q$1.AcroFormAppearance = At$1, q$1.AcroForm = { ChoiceField: ft$1, ListBox: dt$1, ComboBox: pt$1, EditBox: gt$1, Button: mt$1, PushButton: vt$1, RadioButton: bt$1, CheckBox: wt$1, TextField: Nt$1, PasswordField: Lt$1, Appearance: At$1 }, E$1.AcroForm = { ChoiceField: ft$1, ListBox: dt$1, ComboBox: pt$1, EditBox: gt$1, Button: mt$1, PushButton: vt$1, RadioButton: bt$1, CheckBox: wt$1, TextField: Nt$1, PasswordField: Lt$1, Appearance: At$1 };
function _t(t3) {
  return t3.reduce(function(t4, e2, r2) {
    return t4[e2] = r2, t4;
  }, {});
}
!function(e2) {
  e2.__addimage__ = {};
  var r2 = "UNKNOWN", n2 = { PNG: [[137, 80, 78, 71]], TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]], JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0], [255, 216, 255, 219], [255, 216, 255, 238]], JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]], GIF87a: [[71, 73, 70, 56, 55, 97]], GIF89a: [[71, 73, 70, 56, 57, 97]], WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]], BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]] }, i2 = e2.__addimage__.getImageFileTypeByImageData = function(t3, e3) {
    var i3, a3, o3, s3, c3, u2 = r2;
    if ("RGBA" === (e3 = e3 || r2) || void 0 !== t3.data && t3.data instanceof Uint8ClampedArray && "height" in t3 && "width" in t3)
      return "RGBA";
    if (x2(t3))
      for (c3 in n2)
        for (o3 = n2[c3], i3 = 0; i3 < o3.length; i3 += 1) {
          for (s3 = true, a3 = 0; a3 < o3[i3].length; a3 += 1)
            if (void 0 !== o3[i3][a3] && o3[i3][a3] !== t3[a3]) {
              s3 = false;
              break;
            }
          if (true === s3) {
            u2 = c3;
            break;
          }
        }
    else
      for (c3 in n2)
        for (o3 = n2[c3], i3 = 0; i3 < o3.length; i3 += 1) {
          for (s3 = true, a3 = 0; a3 < o3[i3].length; a3 += 1)
            if (void 0 !== o3[i3][a3] && o3[i3][a3] !== t3.charCodeAt(a3)) {
              s3 = false;
              break;
            }
          if (true === s3) {
            u2 = c3;
            break;
          }
        }
    return u2 === r2 && e3 !== r2 && (u2 = e3), u2;
  }, a2 = function t3(e3) {
    for (var r3 = this.internal.write, n3 = this.internal.putStream, i3 = (0, this.internal.getFilters)(); -1 !== i3.indexOf("FlateEncode"); )
      i3.splice(i3.indexOf("FlateEncode"), 1);
    e3.objectId = this.internal.newObject();
    var a3 = [];
    if (a3.push({ key: "Type", value: "/XObject" }), a3.push({ key: "Subtype", value: "/Image" }), a3.push({ key: "Width", value: e3.width }), a3.push({ key: "Height", value: e3.height }), e3.colorSpace === b2.INDEXED ? a3.push({ key: "ColorSpace", value: "[/Indexed /DeviceRGB " + (e3.palette.length / 3 - 1) + " " + ("sMask" in e3 && void 0 !== e3.sMask ? e3.objectId + 2 : e3.objectId + 1) + " 0 R]" }) : (a3.push({ key: "ColorSpace", value: "/" + e3.colorSpace }), e3.colorSpace === b2.DEVICE_CMYK && a3.push({ key: "Decode", value: "[1 0 1 0 1 0 1 0]" })), a3.push({ key: "BitsPerComponent", value: e3.bitsPerComponent }), "decodeParameters" in e3 && void 0 !== e3.decodeParameters && a3.push({ key: "DecodeParms", value: "<<" + e3.decodeParameters + ">>" }), "transparency" in e3 && Array.isArray(e3.transparency)) {
      for (var o3 = "", s3 = 0, c3 = e3.transparency.length; s3 < c3; s3++)
        o3 += e3.transparency[s3] + " " + e3.transparency[s3] + " ";
      a3.push({ key: "Mask", value: "[" + o3 + "]" });
    }
    void 0 !== e3.sMask && a3.push({ key: "SMask", value: e3.objectId + 1 + " 0 R" });
    var u2 = void 0 !== e3.filter ? ["/" + e3.filter] : void 0;
    if (n3({ data: e3.data, additionalKeyValues: a3, alreadyAppliedFilters: u2, objectId: e3.objectId }), r3("endobj"), "sMask" in e3 && void 0 !== e3.sMask) {
      var h3 = "/Predictor " + e3.predictor + " /Colors 1 /BitsPerComponent " + e3.bitsPerComponent + " /Columns " + e3.width, l3 = { width: e3.width, height: e3.height, colorSpace: "DeviceGray", bitsPerComponent: e3.bitsPerComponent, decodeParameters: h3, data: e3.sMask };
      "filter" in e3 && (l3.filter = e3.filter), t3.call(this, l3);
    }
    if (e3.colorSpace === b2.INDEXED) {
      var f3 = this.internal.newObject();
      n3({ data: _2(new Uint8Array(e3.palette)), objectId: f3 }), r3("endobj");
    }
  }, o2 = function() {
    var t3 = this.internal.collections.addImage_images;
    for (var e3 in t3)
      a2.call(this, t3[e3]);
  }, s2 = function() {
    var t3, e3 = this.internal.collections.addImage_images, r3 = this.internal.write;
    for (var n3 in e3)
      r3("/I" + (t3 = e3[n3]).index, t3.objectId, "0", "R");
  }, c2 = function() {
    this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", o2), this.internal.events.subscribe("putXobjectDict", s2));
  }, h2 = function() {
    var t3 = this.internal.collections.addImage_images;
    return c2.call(this), t3;
  }, l2 = function() {
    return Object.keys(this.internal.collections.addImage_images).length;
  }, f2 = function(t3) {
    return "function" == typeof e2["process" + t3.toUpperCase()];
  }, d2 = function(e3) {
    return "object" === _typeof(e3) && 1 === e3.nodeType;
  }, p2 = function(t3, r3) {
    if ("IMG" === t3.nodeName && t3.hasAttribute("src")) {
      var n3 = "" + t3.getAttribute("src");
      if (0 === n3.indexOf("data:image/"))
        return u$2(unescape(n3).split("base64,").pop());
      var i3 = e2.loadFile(n3, true);
      if (void 0 !== i3)
        return i3;
    }
    if ("CANVAS" === t3.nodeName) {
      if (0 === t3.width || 0 === t3.height)
        throw new Error("Given canvas must have data. Canvas width: " + t3.width + ", height: " + t3.height);
      var a3;
      switch (r3) {
        case "PNG":
          a3 = "image/png";
          break;
        case "WEBP":
          a3 = "image/webp";
          break;
        case "JPEG":
        case "JPG":
        default:
          a3 = "image/jpeg";
      }
      return u$2(t3.toDataURL(a3, 1).split("base64,").pop());
    }
  }, g2 = function(t3) {
    var e3 = this.internal.collections.addImage_images;
    if (e3) {
      for (var r3 in e3)
        if (t3 === e3[r3].alias)
          return e3[r3];
    }
  }, m2 = function(t3, e3, r3) {
    return t3 || e3 || (t3 = -96, e3 = -96), t3 < 0 && (t3 = -1 * r3.width * 72 / t3 / this.internal.scaleFactor), e3 < 0 && (e3 = -1 * r3.height * 72 / e3 / this.internal.scaleFactor), 0 === t3 && (t3 = e3 * r3.width / r3.height), 0 === e3 && (e3 = t3 * r3.height / r3.width), [t3, e3];
  }, v2 = function(t3, e3, r3, n3, i3, a3) {
    var o3 = m2.call(this, r3, n3, i3), s3 = this.internal.getCoordinateString, c3 = this.internal.getVerticalCoordinateString, u2 = h2.call(this);
    if (r3 = o3[0], n3 = o3[1], u2[i3.index] = i3, a3) {
      a3 *= Math.PI / 180;
      var l3 = Math.cos(a3), f3 = Math.sin(a3), d4 = function(t4) {
        return t4.toFixed(4);
      }, p3 = [d4(l3), d4(f3), d4(-1 * f3), d4(l3), 0, 0, "cm"];
    }
    this.internal.write("q"), a3 ? (this.internal.write([1, "0", "0", 1, s3(t3), c3(e3 + n3), "cm"].join(" ")), this.internal.write(p3.join(" ")), this.internal.write([s3(r3), "0", "0", s3(n3), "0", "0", "cm"].join(" "))) : this.internal.write([s3(r3), "0", "0", s3(n3), s3(t3), c3(e3 + n3), "cm"].join(" ")), this.isAdvancedAPI() && this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" ")), this.internal.write("/I" + i3.index + " Do"), this.internal.write("Q");
  }, b2 = e2.color_spaces = { DEVICE_RGB: "DeviceRGB", DEVICE_GRAY: "DeviceGray", DEVICE_CMYK: "DeviceCMYK", CAL_GREY: "CalGray", CAL_RGB: "CalRGB", LAB: "Lab", ICC_BASED: "ICCBased", INDEXED: "Indexed", PATTERN: "Pattern", SEPARATION: "Separation", DEVICE_N: "DeviceN" };
  e2.decode = { DCT_DECODE: "DCTDecode", FLATE_DECODE: "FlateDecode", LZW_DECODE: "LZWDecode", JPX_DECODE: "JPXDecode", JBIG2_DECODE: "JBIG2Decode", ASCII85_DECODE: "ASCII85Decode", ASCII_HEX_DECODE: "ASCIIHexDecode", RUN_LENGTH_DECODE: "RunLengthDecode", CCITT_FAX_DECODE: "CCITTFaxDecode" };
  var y2 = e2.image_compression = { NONE: "NONE", FAST: "FAST", MEDIUM: "MEDIUM", SLOW: "SLOW" }, w2 = e2.__addimage__.sHashCode = function(t3) {
    var e3, r3, n3 = 0;
    if ("string" == typeof t3)
      for (r3 = t3.length, e3 = 0; e3 < r3; e3++)
        n3 = (n3 << 5) - n3 + t3.charCodeAt(e3), n3 |= 0;
    else if (x2(t3))
      for (r3 = t3.byteLength / 2, e3 = 0; e3 < r3; e3++)
        n3 = (n3 << 5) - n3 + t3[e3], n3 |= 0;
    return n3;
  }, N2 = e2.__addimage__.validateStringAsBase64 = function(t3) {
    (t3 = t3 || "").toString().trim();
    var e3 = true;
    return 0 === t3.length && (e3 = false), t3.length % 4 != 0 && (e3 = false), false === /^[A-Za-z0-9+/]+$/.test(t3.substr(0, t3.length - 2)) && (e3 = false), false === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t3.substr(-2)) && (e3 = false), e3;
  }, L2 = e2.__addimage__.extractImageFromDataUrl = function(t3) {
    var e3 = (t3 = t3 || "").split("base64,"), r3 = null;
    if (2 === e3.length) {
      var n3 = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e3[0]);
      Array.isArray(n3) && (r3 = { mimeType: n3[1], charset: n3[2], data: e3[1] });
    }
    return r3;
  }, A2 = e2.__addimage__.supportsArrayBuffer = function() {
    return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
  };
  e2.__addimage__.isArrayBuffer = function(t3) {
    return A2() && t3 instanceof ArrayBuffer;
  };
  var x2 = e2.__addimage__.isArrayBufferView = function(t3) {
    return A2() && "undefined" != typeof Uint32Array && (t3 instanceof Int8Array || t3 instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t3 instanceof Uint8ClampedArray || t3 instanceof Int16Array || t3 instanceof Uint16Array || t3 instanceof Int32Array || t3 instanceof Uint32Array || t3 instanceof Float32Array || t3 instanceof Float64Array);
  }, S2 = e2.__addimage__.binaryStringToUint8Array = function(t3) {
    for (var e3 = t3.length, r3 = new Uint8Array(e3), n3 = 0; n3 < e3; n3++)
      r3[n3] = t3.charCodeAt(n3);
    return r3;
  }, _2 = e2.__addimage__.arrayBufferToBinaryString = function(t3) {
    for (var e3 = "", r3 = x2(t3) ? t3 : new Uint8Array(t3), n3 = 0; n3 < r3.length; n3 += 8192)
      e3 += String.fromCharCode.apply(null, r3.subarray(n3, n3 + 8192));
    return e3;
  };
  e2.addImage = function() {
    var e3, n3, i3, a3, o3, s3, u2, h3, l3;
    if ("number" == typeof arguments[1] ? (n3 = r2, i3 = arguments[1], a3 = arguments[2], o3 = arguments[3], s3 = arguments[4], u2 = arguments[5], h3 = arguments[6], l3 = arguments[7]) : (n3 = arguments[1], i3 = arguments[2], a3 = arguments[3], o3 = arguments[4], s3 = arguments[5], u2 = arguments[6], h3 = arguments[7], l3 = arguments[8]), "object" === _typeof(e3 = arguments[0]) && !d2(e3) && "imageData" in e3) {
      var f3 = e3;
      e3 = f3.imageData, n3 = f3.format || n3 || r2, i3 = f3.x || i3 || 0, a3 = f3.y || a3 || 0, o3 = f3.w || f3.width || o3, s3 = f3.h || f3.height || s3, u2 = f3.alias || u2, h3 = f3.compression || h3, l3 = f3.rotation || f3.angle || l3;
    }
    var p3 = this.internal.getFilters();
    if (void 0 === h3 && -1 !== p3.indexOf("FlateEncode") && (h3 = "SLOW"), isNaN(i3) || isNaN(a3))
      throw new Error("Invalid coordinates passed to jsPDF.addImage");
    c2.call(this);
    var g3 = P2.call(this, e3, n3, u2, h3);
    return v2.call(this, i3, a3, o3, s3, g3, l3), this;
  };
  var P2 = function(t3, n3, a3, o3) {
    var s3, c3, u2;
    if ("string" == typeof t3 && i2(t3) === r2) {
      t3 = unescape(t3);
      var h3 = k2(t3, false);
      ("" !== h3 || void 0 !== (h3 = e2.loadFile(t3, true))) && (t3 = h3);
    }
    if (d2(t3) && (t3 = p2(t3, n3)), n3 = i2(t3, n3), !f2(n3))
      throw new Error("addImage does not support files of type '" + n3 + "', please ensure that a plugin for '" + n3 + "' support is added.");
    if ((null == (u2 = a3) || 0 === u2.length) && (a3 = function(t4) {
      return "string" == typeof t4 || x2(t4) ? w2(t4) : x2(t4.data) ? w2(t4.data) : null;
    }(t3)), (s3 = g2.call(this, a3)) || (A2() && (t3 instanceof Uint8Array || "RGBA" === n3 || (c3 = t3, t3 = S2(t3))), s3 = this["process" + n3.toUpperCase()](t3, l2.call(this), a3, function(t4) {
      return t4 && "string" == typeof t4 && (t4 = t4.toUpperCase()), t4 in e2.image_compression ? t4 : y2.NONE;
    }(o3), c3)), !s3)
      throw new Error("An unknown error occurred whilst processing the image.");
    return s3;
  }, k2 = e2.__addimage__.convertBase64ToBinaryString = function(t3, e3) {
    var r3;
    e3 = "boolean" != typeof e3 || e3;
    var n3, i3 = "";
    if ("string" == typeof t3) {
      n3 = null !== (r3 = L2(t3)) ? r3.data : t3;
      try {
        i3 = u$2(n3);
      } catch (t4) {
        if (e3)
          throw N2(n3) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t4.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
      }
    }
    return i3;
  };
  e2.getImageProperties = function(t3) {
    var n3, a3, o3 = "";
    if (d2(t3) && (t3 = p2(t3)), "string" == typeof t3 && i2(t3) === r2 && ("" === (o3 = k2(t3, false)) && (o3 = e2.loadFile(t3) || ""), t3 = o3), a3 = i2(t3), !f2(a3))
      throw new Error("addImage does not support files of type '" + a3 + "', please ensure that a plugin for '" + a3 + "' support is added.");
    if (!A2() || t3 instanceof Uint8Array || (t3 = S2(t3)), !(n3 = this["process" + a3.toUpperCase()](t3)))
      throw new Error("An unknown error occurred whilst processing the image");
    return n3.fileType = a3, n3;
  };
}(E$1.API), /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = function(t4) {
    if (void 0 !== t4 && "" != t4)
      return true;
  };
  E$1.API.events.push(["addPage", function(t4) {
    this.internal.getPageInfo(t4.pageNumber).pageContext.annotations = [];
  }]), t3.events.push(["putPage", function(t4) {
    for (var r2, n2, i2, a2 = this.internal.getCoordinateString, o2 = this.internal.getVerticalCoordinateString, s2 = this.internal.getPageInfoByObjId(t4.objId), c2 = t4.pageContext.annotations, u2 = false, h2 = 0; h2 < c2.length && !u2; h2++)
      switch ((r2 = c2[h2]).type) {
        case "link":
          (e2(r2.options.url) || e2(r2.options.pageNumber)) && (u2 = true);
          break;
        case "reference":
        case "text":
        case "freetext":
          u2 = true;
      }
    if (0 != u2) {
      this.internal.write("/Annots [");
      for (var l2 = 0; l2 < c2.length; l2++) {
        r2 = c2[l2];
        var f2 = this.internal.pdfEscape, d2 = this.internal.getEncryptor(t4.objId);
        switch (r2.type) {
          case "reference":
            this.internal.write(" " + r2.object.objId + " 0 R ");
            break;
          case "text":
            var p2 = this.internal.newAdditionalObject(), g2 = this.internal.newAdditionalObject(), m2 = this.internal.getEncryptor(p2.objId), v2 = r2.title || "Note";
            i2 = "<</Type /Annot /Subtype /Text " + (n2 = "/Rect [" + a2(r2.bounds.x) + " " + o2(r2.bounds.y + r2.bounds.h) + " " + a2(r2.bounds.x + r2.bounds.w) + " " + o2(r2.bounds.y) + "] ") + "/Contents (" + f2(m2(r2.contents)) + ")", i2 += " /Popup " + g2.objId + " 0 R", i2 += " /P " + s2.objId + " 0 R", i2 += " /T (" + f2(m2(v2)) + ") >>", p2.content = i2;
            var b2 = p2.objId + " 0 R";
            i2 = "<</Type /Annot /Subtype /Popup " + (n2 = "/Rect [" + a2(r2.bounds.x + 30) + " " + o2(r2.bounds.y + r2.bounds.h) + " " + a2(r2.bounds.x + r2.bounds.w + 30) + " " + o2(r2.bounds.y) + "] ") + " /Parent " + b2, r2.open && (i2 += " /Open true"), i2 += " >>", g2.content = i2, this.internal.write(p2.objId, "0 R", g2.objId, "0 R");
            break;
          case "freetext":
            n2 = "/Rect [" + a2(r2.bounds.x) + " " + o2(r2.bounds.y) + " " + a2(r2.bounds.x + r2.bounds.w) + " " + o2(r2.bounds.y + r2.bounds.h) + "] ";
            var y2 = r2.color || "#000000";
            i2 = "<</Type /Annot /Subtype /FreeText " + n2 + "/Contents (" + f2(d2(r2.contents)) + ")", i2 += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y2 + ")", i2 += " /Border [0 0 0]", i2 += " >>", this.internal.write(i2);
            break;
          case "link":
            if (r2.options.name) {
              var w2 = this.annotations._nameMap[r2.options.name];
              r2.options.pageNumber = w2.page, r2.options.top = w2.y;
            } else
              r2.options.top || (r2.options.top = 0);
            if (n2 = "/Rect [" + r2.finalBounds.x + " " + r2.finalBounds.y + " " + r2.finalBounds.w + " " + r2.finalBounds.h + "] ", i2 = "", r2.options.url)
              i2 = "<</Type /Annot /Subtype /Link " + n2 + "/Border [0 0 0] /A <</S /URI /URI (" + f2(d2(r2.options.url)) + ") >>";
            else if (r2.options.pageNumber) {
              switch (i2 = "<</Type /Annot /Subtype /Link " + n2 + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r2.options.pageNumber).objId + " 0 R", r2.options.magFactor = r2.options.magFactor || "XYZ", r2.options.magFactor) {
                case "Fit":
                  i2 += " /Fit]";
                  break;
                case "FitH":
                  i2 += " /FitH " + r2.options.top + "]";
                  break;
                case "FitV":
                  r2.options.left = r2.options.left || 0, i2 += " /FitV " + r2.options.left + "]";
                  break;
                case "XYZ":
                default:
                  var N2 = o2(r2.options.top);
                  r2.options.left = r2.options.left || 0, void 0 === r2.options.zoom && (r2.options.zoom = 0), i2 += " /XYZ " + r2.options.left + " " + N2 + " " + r2.options.zoom + "]";
              }
            }
            "" != i2 && (i2 += " >>", this.internal.write(i2));
        }
      }
      this.internal.write("]");
    }
  }]), t3.createAnnotation = function(t4) {
    var e3 = this.internal.getCurrentPageInfo();
    switch (t4.type) {
      case "link":
        this.link(t4.bounds.x, t4.bounds.y, t4.bounds.w, t4.bounds.h, t4);
        break;
      case "text":
      case "freetext":
        e3.pageContext.annotations.push(t4);
    }
  }, t3.link = function(t4, e3, r2, n2, i2) {
    var a2 = this.internal.getCurrentPageInfo(), o2 = this.internal.getCoordinateString, s2 = this.internal.getVerticalCoordinateString;
    a2.pageContext.annotations.push({ finalBounds: { x: o2(t4), y: s2(e3), w: o2(t4 + r2), h: s2(e3 + n2) }, options: i2, type: "link" });
  }, t3.textWithLink = function(t4, e3, r2, n2) {
    var i2, a2, o2 = this.getTextWidth(t4), s2 = this.internal.getLineHeight() / this.internal.scaleFactor;
    if (void 0 !== n2.maxWidth) {
      a2 = n2.maxWidth;
      var c2 = this.splitTextToSize(t4, a2).length;
      i2 = Math.ceil(s2 * c2);
    } else
      a2 = o2, i2 = s2;
    return this.text(t4, e3, r2, n2), r2 += 0.2 * s2, "center" === n2.align && (e3 -= o2 / 2), "right" === n2.align && (e3 -= o2), this.link(e3, r2 - s2, a2, i2, n2), o2;
  }, t3.getTextWidth = function(t4) {
    var e3 = this.internal.getFontSize();
    return this.getStringUnitWidth(t4) * e3 / this.internal.scaleFactor;
  };
}(E$1.API), /**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = { 1569: [65152], 1570: [65153, 65154], 1571: [65155, 65156], 1572: [65157, 65158], 1573: [65159, 65160], 1574: [65161, 65162, 65163, 65164], 1575: [65165, 65166], 1576: [65167, 65168, 65169, 65170], 1577: [65171, 65172], 1578: [65173, 65174, 65175, 65176], 1579: [65177, 65178, 65179, 65180], 1580: [65181, 65182, 65183, 65184], 1581: [65185, 65186, 65187, 65188], 1582: [65189, 65190, 65191, 65192], 1583: [65193, 65194], 1584: [65195, 65196], 1585: [65197, 65198], 1586: [65199, 65200], 1587: [65201, 65202, 65203, 65204], 1588: [65205, 65206, 65207, 65208], 1589: [65209, 65210, 65211, 65212], 1590: [65213, 65214, 65215, 65216], 1591: [65217, 65218, 65219, 65220], 1592: [65221, 65222, 65223, 65224], 1593: [65225, 65226, 65227, 65228], 1594: [65229, 65230, 65231, 65232], 1601: [65233, 65234, 65235, 65236], 1602: [65237, 65238, 65239, 65240], 1603: [65241, 65242, 65243, 65244], 1604: [65245, 65246, 65247, 65248], 1605: [65249, 65250, 65251, 65252], 1606: [65253, 65254, 65255, 65256], 1607: [65257, 65258, 65259, 65260], 1608: [65261, 65262], 1609: [65263, 65264, 64488, 64489], 1610: [65265, 65266, 65267, 65268], 1649: [64336, 64337], 1655: [64477], 1657: [64358, 64359, 64360, 64361], 1658: [64350, 64351, 64352, 64353], 1659: [64338, 64339, 64340, 64341], 1662: [64342, 64343, 64344, 64345], 1663: [64354, 64355, 64356, 64357], 1664: [64346, 64347, 64348, 64349], 1667: [64374, 64375, 64376, 64377], 1668: [64370, 64371, 64372, 64373], 1670: [64378, 64379, 64380, 64381], 1671: [64382, 64383, 64384, 64385], 1672: [64392, 64393], 1676: [64388, 64389], 1677: [64386, 64387], 1678: [64390, 64391], 1681: [64396, 64397], 1688: [64394, 64395], 1700: [64362, 64363, 64364, 64365], 1702: [64366, 64367, 64368, 64369], 1705: [64398, 64399, 64400, 64401], 1709: [64467, 64468, 64469, 64470], 1711: [64402, 64403, 64404, 64405], 1713: [64410, 64411, 64412, 64413], 1715: [64406, 64407, 64408, 64409], 1722: [64414, 64415], 1723: [64416, 64417, 64418, 64419], 1726: [64426, 64427, 64428, 64429], 1728: [64420, 64421], 1729: [64422, 64423, 64424, 64425], 1733: [64480, 64481], 1734: [64473, 64474], 1735: [64471, 64472], 1736: [64475, 64476], 1737: [64482, 64483], 1739: [64478, 64479], 1740: [64508, 64509, 64510, 64511], 1744: [64484, 64485, 64486, 64487], 1746: [64430, 64431], 1747: [64432, 64433] }, r2 = { 65247: { 65154: 65269, 65156: 65271, 65160: 65273, 65166: 65275 }, 65248: { 65154: 65270, 65156: 65272, 65160: 65274, 65166: 65276 }, 65165: { 65247: { 65248: { 65258: 65010 } } }, 1617: { 1612: 64606, 1613: 64607, 1614: 64608, 1615: 64609, 1616: 64610 } }, n2 = { 1612: 64606, 1613: 64607, 1614: 64608, 1615: 64609, 1616: 64610 }, i2 = [1570, 1571, 1573, 1575];
  t3.__arabicParser__ = {};
  var a2 = t3.__arabicParser__.isInArabicSubstitutionA = function(t4) {
    return void 0 !== e2[t4.charCodeAt(0)];
  }, o2 = t3.__arabicParser__.isArabicLetter = function(t4) {
    return "string" == typeof t4 && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t4);
  }, s2 = t3.__arabicParser__.isArabicEndLetter = function(t4) {
    return o2(t4) && a2(t4) && e2[t4.charCodeAt(0)].length <= 2;
  }, c2 = t3.__arabicParser__.isArabicAlfLetter = function(t4) {
    return o2(t4) && i2.indexOf(t4.charCodeAt(0)) >= 0;
  };
  t3.__arabicParser__.arabicLetterHasIsolatedForm = function(t4) {
    return o2(t4) && a2(t4) && e2[t4.charCodeAt(0)].length >= 1;
  };
  var u2 = t3.__arabicParser__.arabicLetterHasFinalForm = function(t4) {
    return o2(t4) && a2(t4) && e2[t4.charCodeAt(0)].length >= 2;
  };
  t3.__arabicParser__.arabicLetterHasInitialForm = function(t4) {
    return o2(t4) && a2(t4) && e2[t4.charCodeAt(0)].length >= 3;
  };
  var h2 = t3.__arabicParser__.arabicLetterHasMedialForm = function(t4) {
    return o2(t4) && a2(t4) && 4 == e2[t4.charCodeAt(0)].length;
  }, l2 = t3.__arabicParser__.resolveLigatures = function(t4) {
    var e3 = 0, n3 = r2, i3 = "", a3 = 0;
    for (e3 = 0; e3 < t4.length; e3 += 1)
      void 0 !== n3[t4.charCodeAt(e3)] ? (a3++, "number" == typeof (n3 = n3[t4.charCodeAt(e3)]) && (i3 += String.fromCharCode(n3), n3 = r2, a3 = 0), e3 === t4.length - 1 && (n3 = r2, i3 += t4.charAt(e3 - (a3 - 1)), e3 -= a3 - 1, a3 = 0)) : (n3 = r2, i3 += t4.charAt(e3 - a3), e3 -= a3, a3 = 0);
    return i3;
  };
  t3.__arabicParser__.isArabicDiacritic = function(t4) {
    return void 0 !== t4 && void 0 !== n2[t4.charCodeAt(0)];
  };
  var f2 = t3.__arabicParser__.getCorrectForm = function(t4, e3, r3) {
    return o2(t4) ? false === a2(t4) ? -1 : !u2(t4) || !o2(e3) && !o2(r3) || !o2(r3) && s2(e3) || s2(t4) && !o2(e3) || s2(t4) && c2(e3) || s2(t4) && s2(e3) ? 0 : h2(t4) && o2(e3) && !s2(e3) && o2(r3) && u2(r3) ? 3 : s2(t4) || !o2(r3) ? 1 : 2 : -1;
  }, d2 = function(t4) {
    var r3 = 0, n3 = 0, i3 = 0, a3 = "", s3 = "", c3 = "", u3 = (t4 = t4 || "").split("\\s+"), h3 = [];
    for (r3 = 0; r3 < u3.length; r3 += 1) {
      for (h3.push(""), n3 = 0; n3 < u3[r3].length; n3 += 1)
        a3 = u3[r3][n3], s3 = u3[r3][n3 - 1], c3 = u3[r3][n3 + 1], o2(a3) ? (i3 = f2(a3, s3, c3), h3[r3] += -1 !== i3 ? String.fromCharCode(e2[a3.charCodeAt(0)][i3]) : a3) : h3[r3] += a3;
      h3[r3] = l2(h3[r3]);
    }
    return h3.join(" ");
  }, p2 = t3.__arabicParser__.processArabic = t3.processArabic = function() {
    var t4, e3 = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text, r3 = [];
    if (Array.isArray(e3)) {
      var n3 = 0;
      for (r3 = [], n3 = 0; n3 < e3.length; n3 += 1)
        Array.isArray(e3[n3]) ? r3.push([d2(e3[n3][0]), e3[n3][1], e3[n3][2]]) : r3.push([d2(e3[n3])]);
      t4 = r3;
    } else
      t4 = d2(e3);
    return "string" == typeof arguments[0] ? t4 : (arguments[0].text = t4, arguments[0]);
  };
  t3.events.push(["preProcessText", p2]);
}(E$1.API), E$1.API.autoPrint = function(t3) {
  var e2;
  switch ((t3 = t3 || {}).variant = t3.variant || "non-conform", t3.variant) {
    case "javascript":
      this.addJS("print({});");
      break;
    case "non-conform":
    default:
      this.internal.events.subscribe("postPutResources", function() {
        e2 = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
      }), this.internal.events.subscribe("putCatalog", function() {
        this.internal.out("/OpenAction " + e2 + " 0 R");
      });
  }
  return this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = function() {
    var t4 = void 0;
    Object.defineProperty(this, "pdf", { get: function() {
      return t4;
    }, set: function(e4) {
      t4 = e4;
    } });
    var e3 = 150;
    Object.defineProperty(this, "width", { get: function() {
      return e3;
    }, set: function(t5) {
      e3 = isNaN(t5) || false === Number.isInteger(t5) || t5 < 0 ? 150 : t5, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e3 + 1);
    } });
    var r2 = 300;
    Object.defineProperty(this, "height", { get: function() {
      return r2;
    }, set: function(t5) {
      r2 = isNaN(t5) || false === Number.isInteger(t5) || t5 < 0 ? 300 : t5, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r2 + 1);
    } });
    var n2 = [];
    Object.defineProperty(this, "childNodes", { get: function() {
      return n2;
    }, set: function(t5) {
      n2 = t5;
    } });
    var i2 = {};
    Object.defineProperty(this, "style", { get: function() {
      return i2;
    }, set: function(t5) {
      i2 = t5;
    } }), Object.defineProperty(this, "parentNode", {});
  };
  e2.prototype.getContext = function(t4, e3) {
    var r2;
    if ("2d" !== (t4 = t4 || "2d"))
      return null;
    for (r2 in e3)
      this.pdf.context2d.hasOwnProperty(r2) && (this.pdf.context2d[r2] = e3[r2]);
    return this.pdf.context2d._canvas = this, this.pdf.context2d;
  }, e2.prototype.toDataURL = function() {
    throw new Error("toDataURL is not implemented.");
  }, t3.events.push(["initialized", function() {
    this.canvas = new e2(), this.canvas.pdf = this;
  }]);
}(E$1.API), function(e2) {
  var r2 = { left: 0, top: 0, bottom: 0, right: 0 }, n2 = false, i2 = function() {
    void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, r2), this.internal.__cell__.margins.width = this.getPageWidth(), a2.call(this));
  }, a2 = function() {
    this.internal.__cell__.lastCell = new o2(), this.internal.__cell__.pages = 1;
  }, o2 = function() {
    var t3 = arguments[0];
    Object.defineProperty(this, "x", { enumerable: true, get: function() {
      return t3;
    }, set: function(e4) {
      t3 = e4;
    } });
    var e3 = arguments[1];
    Object.defineProperty(this, "y", { enumerable: true, get: function() {
      return e3;
    }, set: function(t4) {
      e3 = t4;
    } });
    var r3 = arguments[2];
    Object.defineProperty(this, "width", { enumerable: true, get: function() {
      return r3;
    }, set: function(t4) {
      r3 = t4;
    } });
    var n3 = arguments[3];
    Object.defineProperty(this, "height", { enumerable: true, get: function() {
      return n3;
    }, set: function(t4) {
      n3 = t4;
    } });
    var i3 = arguments[4];
    Object.defineProperty(this, "text", { enumerable: true, get: function() {
      return i3;
    }, set: function(t4) {
      i3 = t4;
    } });
    var a3 = arguments[5];
    Object.defineProperty(this, "lineNumber", { enumerable: true, get: function() {
      return a3;
    }, set: function(t4) {
      a3 = t4;
    } });
    var o3 = arguments[6];
    return Object.defineProperty(this, "align", { enumerable: true, get: function() {
      return o3;
    }, set: function(t4) {
      o3 = t4;
    } }), this;
  };
  o2.prototype.clone = function() {
    return new o2(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
  }, o2.prototype.toArray = function() {
    return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
  }, e2.setHeaderFunction = function(t3) {
    return i2.call(this), this.internal.__cell__.headerFunction = "function" == typeof t3 ? t3 : void 0, this;
  }, e2.getTextDimensions = function(t3, e3) {
    i2.call(this);
    var r3 = (e3 = e3 || {}).fontSize || this.getFontSize(), n3 = e3.font || this.getFont(), a3 = e3.scaleFactor || this.internal.scaleFactor, o3 = 0, s3 = 0, c3 = 0, u2 = this;
    if (!Array.isArray(t3) && "string" != typeof t3) {
      if ("number" != typeof t3)
        throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
      t3 = String(t3);
    }
    var h2 = e3.maxWidth;
    h2 > 0 ? "string" == typeof t3 ? t3 = this.splitTextToSize(t3, h2) : "[object Array]" === Object.prototype.toString.call(t3) && (t3 = t3.reduce(function(t4, e4) {
      return t4.concat(u2.splitTextToSize(e4, h2));
    }, [])) : t3 = Array.isArray(t3) ? t3 : [t3];
    for (var l2 = 0; l2 < t3.length; l2++)
      o3 < (c3 = this.getStringUnitWidth(t3[l2], { font: n3 }) * r3) && (o3 = c3);
    return 0 !== o3 && (s3 = t3.length), { w: o3 /= a3, h: Math.max((s3 * r3 * this.getLineHeightFactor() - r3 * (this.getLineHeightFactor() - 1)) / a3, 0) };
  }, e2.cellAddPage = function() {
    i2.call(this), this.addPage();
    var t3 = this.internal.__cell__.margins || r2;
    return this.internal.__cell__.lastCell = new o2(t3.left, t3.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
  };
  var s2 = e2.cell = function() {
    var t3;
    t3 = arguments[0] instanceof o2 ? arguments[0] : new o2(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i2.call(this);
    var e3 = this.internal.__cell__.lastCell, a3 = this.internal.__cell__.padding, s3 = this.internal.__cell__.margins || r2, c3 = this.internal.__cell__.tableHeaderRow, u2 = this.internal.__cell__.printHeaders;
    return void 0 !== e3.lineNumber && (e3.lineNumber === t3.lineNumber ? (t3.x = (e3.x || 0) + (e3.width || 0), t3.y = e3.y || 0) : e3.y + e3.height + t3.height + s3.bottom > this.getPageHeight() ? (this.cellAddPage(), t3.y = s3.top, u2 && c3 && (this.printHeaderRow(t3.lineNumber, true), t3.y += c3[0].height)) : t3.y = e3.y + e3.height || t3.y), void 0 !== t3.text[0] && (this.rect(t3.x, t3.y, t3.width, t3.height, true === n2 ? "FD" : void 0), "right" === t3.align ? this.text(t3.text, t3.x + t3.width - a3, t3.y + a3, { align: "right", baseline: "top" }) : "center" === t3.align ? this.text(t3.text, t3.x + t3.width / 2, t3.y + a3, { align: "center", baseline: "top", maxWidth: t3.width - a3 - a3 }) : this.text(t3.text, t3.x + a3, t3.y + a3, { align: "left", baseline: "top", maxWidth: t3.width - a3 - a3 })), this.internal.__cell__.lastCell = t3, this;
  };
  e2.table = function(e3, n3, u2, h2, l2) {
    if (i2.call(this), !u2)
      throw new Error("No data for PDF table.");
    var f2, d2, p2, g2, m2 = [], v2 = [], b2 = [], y2 = {}, w2 = {}, N2 = [], L2 = [], A2 = (l2 = l2 || {}).autoSize || false, x2 = false !== l2.printHeaders, S2 = l2.css && void 0 !== l2.css["font-size"] ? 16 * l2.css["font-size"] : l2.fontSize || 12, _2 = l2.margins || Object.assign({ width: this.getPageWidth() }, r2), P2 = "number" == typeof l2.padding ? l2.padding : 3, k2 = l2.headerBackgroundColor || "#c8c8c8", I2 = l2.headerTextColor || "#000";
    if (a2.call(this), this.internal.__cell__.printHeaders = x2, this.internal.__cell__.margins = _2, this.internal.__cell__.table_font_size = S2, this.internal.__cell__.padding = P2, this.internal.__cell__.headerBackgroundColor = k2, this.internal.__cell__.headerTextColor = I2, this.setFontSize(S2), null == h2)
      v2 = m2 = Object.keys(u2[0]), b2 = m2.map(function() {
        return "left";
      });
    else if (Array.isArray(h2) && "object" === _typeof(h2[0]))
      for (m2 = h2.map(function(t3) {
        return t3.name;
      }), v2 = h2.map(function(t3) {
        return t3.prompt || t3.name || "";
      }), b2 = h2.map(function(t3) {
        return t3.align || "left";
      }), f2 = 0; f2 < h2.length; f2 += 1)
        w2[h2[f2].name] = h2[f2].width * (19.049976 / 25.4);
    else
      Array.isArray(h2) && "string" == typeof h2[0] && (v2 = m2 = h2, b2 = m2.map(function() {
        return "left";
      }));
    if (A2 || Array.isArray(h2) && "string" == typeof h2[0])
      for (f2 = 0; f2 < m2.length; f2 += 1) {
        for (y2[g2 = m2[f2]] = u2.map(function(t3) {
          return t3[g2];
        }), this.setFont(void 0, "bold"), N2.push(this.getTextDimensions(v2[f2], { fontSize: this.internal.__cell__.table_font_size, scaleFactor: this.internal.scaleFactor }).w), d2 = y2[g2], this.setFont(void 0, "normal"), p2 = 0; p2 < d2.length; p2 += 1)
          N2.push(this.getTextDimensions(d2[p2], { fontSize: this.internal.__cell__.table_font_size, scaleFactor: this.internal.scaleFactor }).w);
        w2[g2] = Math.max.apply(null, N2) + P2 + P2, N2 = [];
      }
    if (x2) {
      var F2 = {};
      for (f2 = 0; f2 < m2.length; f2 += 1)
        F2[m2[f2]] = {}, F2[m2[f2]].text = v2[f2], F2[m2[f2]].align = b2[f2];
      var C2 = c2.call(this, F2, w2);
      L2 = m2.map(function(t3) {
        return new o2(e3, n3, w2[t3], C2, F2[t3].text, void 0, F2[t3].align);
      }), this.setTableHeaderRow(L2), this.printHeaderRow(1, false);
    }
    var j2 = h2.reduce(function(t3, e4) {
      return t3[e4.name] = e4.align, t3;
    }, {});
    for (f2 = 0; f2 < u2.length; f2 += 1) {
      "rowStart" in l2 && l2.rowStart instanceof Function && l2.rowStart({ row: f2, data: u2[f2] }, this);
      var O2 = c2.call(this, u2[f2], w2);
      for (p2 = 0; p2 < m2.length; p2 += 1) {
        var B2 = u2[f2][m2[p2]];
        "cellStart" in l2 && l2.cellStart instanceof Function && l2.cellStart({ row: f2, col: p2, data: B2 }, this), s2.call(this, new o2(e3, n3, w2[m2[p2]], O2, B2, f2 + 2, j2[m2[p2]]));
      }
    }
    return this.internal.__cell__.table_x = e3, this.internal.__cell__.table_y = n3, this;
  };
  var c2 = function(t3, e3) {
    var r3 = this.internal.__cell__.padding, n3 = this.internal.__cell__.table_font_size, i3 = this.internal.scaleFactor;
    return Object.keys(t3).map(function(n4) {
      var i4 = t3[n4];
      return this.splitTextToSize(i4.hasOwnProperty("text") ? i4.text : i4, e3[n4] - r3 - r3);
    }, this).map(function(t4) {
      return this.getLineHeightFactor() * t4.length * n3 / i3 + r3 + r3;
    }, this).reduce(function(t4, e4) {
      return Math.max(t4, e4);
    }, 0);
  };
  e2.setTableHeaderRow = function(t3) {
    i2.call(this), this.internal.__cell__.tableHeaderRow = t3;
  }, e2.printHeaderRow = function(t3, e3) {
    if (i2.call(this), !this.internal.__cell__.tableHeaderRow)
      throw new Error("Property tableHeaderRow does not exist.");
    var r3;
    if (n2 = true, "function" == typeof this.internal.__cell__.headerFunction) {
      var a3 = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
      this.internal.__cell__.lastCell = new o2(a3[0], a3[1], a3[2], a3[3], void 0, -1);
    }
    this.setFont(void 0, "bold");
    for (var c3 = [], u2 = 0; u2 < this.internal.__cell__.tableHeaderRow.length; u2 += 1) {
      r3 = this.internal.__cell__.tableHeaderRow[u2].clone(), e3 && (r3.y = this.internal.__cell__.margins.top || 0, c3.push(r3)), r3.lineNumber = t3;
      var h2 = this.getTextColor();
      this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s2.call(this, r3), this.setTextColor(h2);
    }
    c3.length > 0 && this.setTableHeaderRow(c3), this.setFont(void 0, "normal"), n2 = false;
  };
}(E$1.API);
var Pt$1 = { italic: ["italic", "oblique", "normal"], oblique: ["oblique", "italic", "normal"], normal: ["normal", "oblique", "italic"] }, kt$1 = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"], It$1 = _t(kt$1), Ft$1 = [100, 200, 300, 400, 500, 600, 700, 800, 900], Ct$1 = _t(Ft$1);
function jt$1(t3) {
  var e2 = t3.family.replace(/"|'/g, "").toLowerCase(), r2 = function(t4) {
    return Pt$1[t4 = t4 || "normal"] ? t4 : "normal";
  }(t3.style), n2 = function(t4) {
    if (!t4)
      return 400;
    if ("number" == typeof t4)
      return t4 >= 100 && t4 <= 900 && t4 % 100 == 0 ? t4 : 400;
    if (/^\d00$/.test(t4))
      return parseInt(t4);
    switch (t4) {
      case "bold":
        return 700;
      case "normal":
      default:
        return 400;
    }
  }(t3.weight), i2 = function(t4) {
    return "number" == typeof It$1[t4 = t4 || "normal"] ? t4 : "normal";
  }(t3.stretch);
  return { family: e2, style: r2, weight: n2, stretch: i2, src: t3.src || [], ref: t3.ref || { name: e2, style: [i2, r2, n2].join(" ") } };
}
function Ot$1(t3, e2, r2, n2) {
  var i2;
  for (i2 = r2; i2 >= 0 && i2 < e2.length; i2 += n2)
    if (t3[e2[i2]])
      return t3[e2[i2]];
  for (i2 = r2; i2 >= 0 && i2 < e2.length; i2 -= n2)
    if (t3[e2[i2]])
      return t3[e2[i2]];
}
var Bt$1 = { "sans-serif": "helvetica", fixed: "courier", monospace: "courier", terminal: "courier", cursive: "times", fantasy: "times", serif: "times" }, Mt$1 = { caption: "times", icon: "times", menu: "times", "message-box": "times", "small-caption": "times", "status-bar": "times" };
function Et$1(t3) {
  return [t3.stretch, t3.style, t3.weight, t3.family].join(" ");
}
function qt(t3, e2, r2) {
  for (var n2 = (r2 = r2 || {}).defaultFontFamily || "times", i2 = Object.assign({}, Bt$1, r2.genericFontFamilies || {}), a2 = null, o2 = null, s2 = 0; s2 < e2.length; ++s2)
    if (i2[(a2 = jt$1(e2[s2])).family] && (a2.family = i2[a2.family]), t3.hasOwnProperty(a2.family)) {
      o2 = t3[a2.family];
      break;
    }
  if (!(o2 = o2 || t3[n2]))
    throw new Error("Could not find a font-family for the rule '" + Et$1(a2) + "' and default family '" + n2 + "'.");
  if (o2 = function(t4, e3) {
    if (e3[t4])
      return e3[t4];
    var r3 = It$1[t4], n3 = r3 <= It$1.normal ? -1 : 1, i3 = Ot$1(e3, kt$1, r3, n3);
    if (!i3)
      throw new Error("Could not find a matching font-stretch value for " + t4);
    return i3;
  }(a2.stretch, o2), o2 = function(t4, e3) {
    if (e3[t4])
      return e3[t4];
    for (var r3 = Pt$1[t4], n3 = 0; n3 < r3.length; ++n3)
      if (e3[r3[n3]])
        return e3[r3[n3]];
    throw new Error("Could not find a matching font-style for " + t4);
  }(a2.style, o2), !(o2 = function(t4, e3) {
    if (e3[t4])
      return e3[t4];
    if (400 === t4 && e3[500])
      return e3[500];
    if (500 === t4 && e3[400])
      return e3[400];
    var r3 = Ct$1[t4], n3 = Ot$1(e3, Ft$1, r3, t4 < 400 ? -1 : 1);
    if (!n3)
      throw new Error("Could not find a matching font-weight for value " + t4);
    return n3;
  }(a2.weight, o2)))
    throw new Error("Failed to resolve a font for the rule '" + Et$1(a2) + "'.");
  return o2;
}
function Dt$1(t3) {
  return t3.trimLeft();
}
function Rt$1(t3, e2) {
  for (var r2 = 0; r2 < t3.length; ) {
    if (t3.charAt(r2) === e2)
      return [t3.substring(0, r2), t3.substring(r2 + 1)];
    r2 += 1;
  }
  return null;
}
function Tt$1(t3) {
  var e2 = t3.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
  return null === e2 ? null : [e2[0], t3.substring(e2[0].length)];
}
var Ut$1, zt, Ht$1, Wt$1 = ["times"];
!function(e2) {
  var r2, n2, i2, o2, s2, c2, u2, h2, l2, d2 = function(t3) {
    return t3 = t3 || {}, this.isStrokeTransparent = t3.isStrokeTransparent || false, this.strokeOpacity = t3.strokeOpacity || 1, this.strokeStyle = t3.strokeStyle || "#000000", this.fillStyle = t3.fillStyle || "#000000", this.isFillTransparent = t3.isFillTransparent || false, this.fillOpacity = t3.fillOpacity || 1, this.font = t3.font || "10px sans-serif", this.textBaseline = t3.textBaseline || "alphabetic", this.textAlign = t3.textAlign || "left", this.lineWidth = t3.lineWidth || 1, this.lineJoin = t3.lineJoin || "miter", this.lineCap = t3.lineCap || "butt", this.path = t3.path || [], this.transform = void 0 !== t3.transform ? t3.transform.clone() : new h2(), this.globalCompositeOperation = t3.globalCompositeOperation || "normal", this.globalAlpha = t3.globalAlpha || 1, this.clip_path = t3.clip_path || [], this.currentPoint = t3.currentPoint || new c2(), this.miterLimit = t3.miterLimit || 10, this.lastPoint = t3.lastPoint || new c2(), this.lineDashOffset = t3.lineDashOffset || 0, this.lineDash = t3.lineDash || [], this.margin = t3.margin || [0, 0, 0, 0], this.prevPageLastElemOffset = t3.prevPageLastElemOffset || 0, this.ignoreClearRect = "boolean" != typeof t3.ignoreClearRect || t3.ignoreClearRect, this;
  };
  e2.events.push(["initialized", function() {
    this.context2d = new p2(this), r2 = this.internal.f2, n2 = this.internal.getCoordinateString, i2 = this.internal.getVerticalCoordinateString, o2 = this.internal.getHorizontalCoordinate, s2 = this.internal.getVerticalCoordinate, c2 = this.internal.Point, u2 = this.internal.Rectangle, h2 = this.internal.Matrix, l2 = new d2();
  }]);
  var p2 = function(t3) {
    Object.defineProperty(this, "canvas", { get: function() {
      return { parentNode: false, style: false };
    } });
    var e3 = t3;
    Object.defineProperty(this, "pdf", { get: function() {
      return e3;
    } });
    var r3 = false;
    Object.defineProperty(this, "pageWrapXEnabled", { get: function() {
      return r3;
    }, set: function(t4) {
      r3 = Boolean(t4);
    } });
    var n3 = false;
    Object.defineProperty(this, "pageWrapYEnabled", { get: function() {
      return n3;
    }, set: function(t4) {
      n3 = Boolean(t4);
    } });
    var i3 = 0;
    Object.defineProperty(this, "posX", { get: function() {
      return i3;
    }, set: function(t4) {
      isNaN(t4) || (i3 = t4);
    } });
    var a2 = 0;
    Object.defineProperty(this, "posY", { get: function() {
      return a2;
    }, set: function(t4) {
      isNaN(t4) || (a2 = t4);
    } }), Object.defineProperty(this, "margin", { get: function() {
      return l2.margin;
    }, set: function(t4) {
      var e4;
      "number" == typeof t4 ? e4 = [t4, t4, t4, t4] : ((e4 = new Array(4))[0] = t4[0], e4[1] = t4.length >= 2 ? t4[1] : e4[0], e4[2] = t4.length >= 3 ? t4[2] : e4[0], e4[3] = t4.length >= 4 ? t4[3] : e4[1]), l2.margin = e4;
    } });
    var o3 = false;
    Object.defineProperty(this, "autoPaging", { get: function() {
      return o3;
    }, set: function(t4) {
      o3 = t4;
    } });
    var s3 = 0;
    Object.defineProperty(this, "lastBreak", { get: function() {
      return s3;
    }, set: function(t4) {
      s3 = t4;
    } });
    var c3 = [];
    Object.defineProperty(this, "pageBreaks", { get: function() {
      return c3;
    }, set: function(t4) {
      c3 = t4;
    } }), Object.defineProperty(this, "ctx", { get: function() {
      return l2;
    }, set: function(t4) {
      t4 instanceof d2 && (l2 = t4);
    } }), Object.defineProperty(this, "path", { get: function() {
      return l2.path;
    }, set: function(t4) {
      l2.path = t4;
    } });
    var u3 = [];
    Object.defineProperty(this, "ctxStack", { get: function() {
      return u3;
    }, set: function(t4) {
      u3 = t4;
    } }), Object.defineProperty(this, "fillStyle", { get: function() {
      return this.ctx.fillStyle;
    }, set: function(t4) {
      var e4;
      e4 = g2(t4), this.ctx.fillStyle = e4.style, this.ctx.isFillTransparent = 0 === e4.a, this.ctx.fillOpacity = e4.a, this.pdf.setFillColor(e4.r, e4.g, e4.b, { a: e4.a }), this.pdf.setTextColor(e4.r, e4.g, e4.b, { a: e4.a });
    } }), Object.defineProperty(this, "strokeStyle", { get: function() {
      return this.ctx.strokeStyle;
    }, set: function(t4) {
      var e4 = g2(t4);
      this.ctx.strokeStyle = e4.style, this.ctx.isStrokeTransparent = 0 === e4.a, this.ctx.strokeOpacity = e4.a, 0 === e4.a ? this.pdf.setDrawColor(255, 255, 255) : (e4.a, this.pdf.setDrawColor(e4.r, e4.g, e4.b));
    } }), Object.defineProperty(this, "lineCap", { get: function() {
      return this.ctx.lineCap;
    }, set: function(t4) {
      -1 !== ["butt", "round", "square"].indexOf(t4) && (this.ctx.lineCap = t4, this.pdf.setLineCap(t4));
    } }), Object.defineProperty(this, "lineWidth", { get: function() {
      return this.ctx.lineWidth;
    }, set: function(t4) {
      isNaN(t4) || (this.ctx.lineWidth = t4, this.pdf.setLineWidth(t4));
    } }), Object.defineProperty(this, "lineJoin", { get: function() {
      return this.ctx.lineJoin;
    }, set: function(t4) {
      -1 !== ["bevel", "round", "miter"].indexOf(t4) && (this.ctx.lineJoin = t4, this.pdf.setLineJoin(t4));
    } }), Object.defineProperty(this, "miterLimit", { get: function() {
      return this.ctx.miterLimit;
    }, set: function(t4) {
      isNaN(t4) || (this.ctx.miterLimit = t4, this.pdf.setMiterLimit(t4));
    } }), Object.defineProperty(this, "textBaseline", { get: function() {
      return this.ctx.textBaseline;
    }, set: function(t4) {
      this.ctx.textBaseline = t4;
    } }), Object.defineProperty(this, "textAlign", { get: function() {
      return this.ctx.textAlign;
    }, set: function(t4) {
      -1 !== ["right", "end", "center", "left", "start"].indexOf(t4) && (this.ctx.textAlign = t4);
    } });
    var h3 = null;
    function f2(t4, e4) {
      if (null === h3) {
        var r4 = function(t5) {
          var e5 = [];
          return Object.keys(t5).forEach(function(r5) {
            t5[r5].forEach(function(t6) {
              var n4 = null;
              switch (t6) {
                case "bold":
                  n4 = { family: r5, weight: "bold" };
                  break;
                case "italic":
                  n4 = { family: r5, style: "italic" };
                  break;
                case "bolditalic":
                  n4 = { family: r5, weight: "bold", style: "italic" };
                  break;
                case "":
                case "normal":
                  n4 = { family: r5 };
              }
              null !== n4 && (n4.ref = { name: r5, style: t6 }, e5.push(n4));
            });
          }), e5;
        }(t4.getFontList());
        h3 = function(t5) {
          for (var e5 = {}, r5 = 0; r5 < t5.length; ++r5) {
            var n4 = jt$1(t5[r5]), i4 = n4.family, a3 = n4.stretch, o4 = n4.style, s4 = n4.weight;
            e5[i4] = e5[i4] || {}, e5[i4][a3] = e5[i4][a3] || {}, e5[i4][a3][o4] = e5[i4][a3][o4] || {}, e5[i4][a3][o4][s4] = n4;
          }
          return e5;
        }(r4.concat(e4));
      }
      return h3;
    }
    var p3 = null;
    Object.defineProperty(this, "fontFaces", { get: function() {
      return p3;
    }, set: function(t4) {
      h3 = null, p3 = t4;
    } }), Object.defineProperty(this, "font", { get: function() {
      return this.ctx.font;
    }, set: function(t4) {
      var e4;
      if (this.ctx.font = t4, null !== (e4 = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t4))) {
        var r4 = e4[1], n4 = (e4[2], e4[3]), i4 = e4[4], a3 = (e4[5], e4[6]), o4 = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i4)[2];
        i4 = "px" === o4 ? Math.floor(parseFloat(i4) * this.pdf.internal.scaleFactor) : "em" === o4 ? Math.floor(parseFloat(i4) * this.pdf.getFontSize()) : Math.floor(parseFloat(i4) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i4);
        var s4 = function(t5) {
          var e5, r5, n5 = [], i5 = t5.trim();
          if ("" === i5)
            return Wt$1;
          if (i5 in Mt$1)
            return [Mt$1[i5]];
          for (; "" !== i5; ) {
            switch (r5 = null, e5 = (i5 = Dt$1(i5)).charAt(0)) {
              case '"':
              case "'":
                r5 = Rt$1(i5.substring(1), e5);
                break;
              default:
                r5 = Tt$1(i5);
            }
            if (null === r5)
              return Wt$1;
            if (n5.push(r5[0]), "" !== (i5 = Dt$1(r5[1])) && "," !== i5.charAt(0))
              return Wt$1;
            i5 = i5.replace(/^,/, "");
          }
          return n5;
        }(a3);
        if (this.fontFaces) {
          var c4 = qt(f2(this.pdf, this.fontFaces), s4.map(function(t5) {
            return { family: t5, stretch: "normal", weight: n4, style: r4 };
          }));
          this.pdf.setFont(c4.ref.name, c4.ref.style);
        } else {
          var u4 = "";
          ("bold" === n4 || parseInt(n4, 10) >= 700 || "bold" === r4) && (u4 = "bold"), "italic" === r4 && (u4 += "italic"), 0 === u4.length && (u4 = "normal");
          for (var h4 = "", l3 = { arial: "Helvetica", Arial: "Helvetica", verdana: "Helvetica", Verdana: "Helvetica", helvetica: "Helvetica", Helvetica: "Helvetica", "sans-serif": "Helvetica", fixed: "Courier", monospace: "Courier", terminal: "Courier", cursive: "Times", fantasy: "Times", serif: "Times" }, d4 = 0; d4 < s4.length; d4++) {
            if (void 0 !== this.pdf.internal.getFont(s4[d4], u4, { noFallback: true, disableWarning: true })) {
              h4 = s4[d4];
              break;
            }
            if ("bolditalic" === u4 && void 0 !== this.pdf.internal.getFont(s4[d4], "bold", { noFallback: true, disableWarning: true }))
              h4 = s4[d4], u4 = "bold";
            else if (void 0 !== this.pdf.internal.getFont(s4[d4], "normal", { noFallback: true, disableWarning: true })) {
              h4 = s4[d4], u4 = "normal";
              break;
            }
          }
          if ("" === h4) {
            for (var p4 = 0; p4 < s4.length; p4++)
              if (l3[s4[p4]]) {
                h4 = l3[s4[p4]];
                break;
              }
          }
          h4 = "" === h4 ? "Times" : h4, this.pdf.setFont(h4, u4);
        }
      }
    } }), Object.defineProperty(this, "globalCompositeOperation", { get: function() {
      return this.ctx.globalCompositeOperation;
    }, set: function(t4) {
      this.ctx.globalCompositeOperation = t4;
    } }), Object.defineProperty(this, "globalAlpha", { get: function() {
      return this.ctx.globalAlpha;
    }, set: function(t4) {
      this.ctx.globalAlpha = t4;
    } }), Object.defineProperty(this, "lineDashOffset", { get: function() {
      return this.ctx.lineDashOffset;
    }, set: function(t4) {
      this.ctx.lineDashOffset = t4, T2.call(this);
    } }), Object.defineProperty(this, "lineDash", { get: function() {
      return this.ctx.lineDash;
    }, set: function(t4) {
      this.ctx.lineDash = t4, T2.call(this);
    } }), Object.defineProperty(this, "ignoreClearRect", { get: function() {
      return this.ctx.ignoreClearRect;
    }, set: function(t4) {
      this.ctx.ignoreClearRect = Boolean(t4);
    } });
  };
  p2.prototype.setLineDash = function(t3) {
    this.lineDash = t3;
  }, p2.prototype.getLineDash = function() {
    return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();
  }, p2.prototype.fill = function() {
    A2.call(this, "fill", false);
  }, p2.prototype.stroke = function() {
    A2.call(this, "stroke", false);
  }, p2.prototype.beginPath = function() {
    this.path = [{ type: "begin" }];
  }, p2.prototype.moveTo = function(t3, e3) {
    if (isNaN(t3) || isNaN(e3))
      throw a$1.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
    var r3 = this.ctx.transform.applyToPoint(new c2(t3, e3));
    this.path.push({ type: "mt", x: r3.x, y: r3.y }), this.ctx.lastPoint = new c2(t3, e3);
  }, p2.prototype.closePath = function() {
    var e3 = new c2(0, 0), r3 = 0;
    for (r3 = this.path.length - 1; -1 !== r3; r3--)
      if ("begin" === this.path[r3].type && "object" === _typeof(this.path[r3 + 1]) && "number" == typeof this.path[r3 + 1].x) {
        e3 = new c2(this.path[r3 + 1].x, this.path[r3 + 1].y);
        break;
      }
    this.path.push({ type: "close" }), this.ctx.lastPoint = new c2(e3.x, e3.y);
  }, p2.prototype.lineTo = function(t3, e3) {
    if (isNaN(t3) || isNaN(e3))
      throw a$1.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
    var r3 = this.ctx.transform.applyToPoint(new c2(t3, e3));
    this.path.push({ type: "lt", x: r3.x, y: r3.y }), this.ctx.lastPoint = new c2(r3.x, r3.y);
  }, p2.prototype.clip = function() {
    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), A2.call(this, null, true);
  }, p2.prototype.quadraticCurveTo = function(t3, e3, r3, n3) {
    if (isNaN(r3) || isNaN(n3) || isNaN(t3) || isNaN(e3))
      throw a$1.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
    var i3 = this.ctx.transform.applyToPoint(new c2(r3, n3)), o3 = this.ctx.transform.applyToPoint(new c2(t3, e3));
    this.path.push({ type: "qct", x1: o3.x, y1: o3.y, x: i3.x, y: i3.y }), this.ctx.lastPoint = new c2(i3.x, i3.y);
  }, p2.prototype.bezierCurveTo = function(t3, e3, r3, n3, i3, o3) {
    if (isNaN(i3) || isNaN(o3) || isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3))
      throw a$1.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
    var s3 = this.ctx.transform.applyToPoint(new c2(i3, o3)), u3 = this.ctx.transform.applyToPoint(new c2(t3, e3)), h3 = this.ctx.transform.applyToPoint(new c2(r3, n3));
    this.path.push({ type: "bct", x1: u3.x, y1: u3.y, x2: h3.x, y2: h3.y, x: s3.x, y: s3.y }), this.ctx.lastPoint = new c2(s3.x, s3.y);
  }, p2.prototype.arc = function(t3, e3, r3, n3, i3, o3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3) || isNaN(i3))
      throw a$1.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");
    if (o3 = Boolean(o3), !this.ctx.transform.isIdentity) {
      var s3 = this.ctx.transform.applyToPoint(new c2(t3, e3));
      t3 = s3.x, e3 = s3.y;
      var u3 = this.ctx.transform.applyToPoint(new c2(0, r3)), h3 = this.ctx.transform.applyToPoint(new c2(0, 0));
      r3 = Math.sqrt(Math.pow(u3.x - h3.x, 2) + Math.pow(u3.y - h3.y, 2));
    }
    Math.abs(i3 - n3) >= 2 * Math.PI && (n3 = 0, i3 = 2 * Math.PI), this.path.push({ type: "arc", x: t3, y: e3, radius: r3, startAngle: n3, endAngle: i3, counterclockwise: o3 });
  }, p2.prototype.arcTo = function(t3, e3, r3, n3, i3) {
    throw new Error("arcTo not implemented.");
  }, p2.prototype.rect = function(t3, e3, r3, n3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3))
      throw a$1.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
    this.moveTo(t3, e3), this.lineTo(t3 + r3, e3), this.lineTo(t3 + r3, e3 + n3), this.lineTo(t3, e3 + n3), this.lineTo(t3, e3), this.lineTo(t3 + r3, e3), this.lineTo(t3, e3);
  }, p2.prototype.fillRect = function(t3, e3, r3, n3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3))
      throw a$1.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
    if (!m2.call(this)) {
      var i3 = {};
      "butt" !== this.lineCap && (i3.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i3.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t3, e3, r3, n3), this.fill(), i3.hasOwnProperty("lineCap") && (this.lineCap = i3.lineCap), i3.hasOwnProperty("lineJoin") && (this.lineJoin = i3.lineJoin);
    }
  }, p2.prototype.strokeRect = function(t3, e3, r3, n3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3))
      throw a$1.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
    v2.call(this) || (this.beginPath(), this.rect(t3, e3, r3, n3), this.stroke());
  }, p2.prototype.clearRect = function(t3, e3, r3, n3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3))
      throw a$1.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
    this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t3, e3, r3, n3));
  }, p2.prototype.save = function(t3) {
    t3 = "boolean" != typeof t3 || t3;
    for (var e3 = this.pdf.internal.getCurrentPageInfo().pageNumber, r3 = 0; r3 < this.pdf.internal.getNumberOfPages(); r3++)
      this.pdf.setPage(r3 + 1), this.pdf.internal.out("q");
    if (this.pdf.setPage(e3), t3) {
      this.ctx.fontSize = this.pdf.internal.getFontSize();
      var n3 = new d2(this.ctx);
      this.ctxStack.push(this.ctx), this.ctx = n3;
    }
  }, p2.prototype.restore = function(t3) {
    t3 = "boolean" != typeof t3 || t3;
    for (var e3 = this.pdf.internal.getCurrentPageInfo().pageNumber, r3 = 0; r3 < this.pdf.internal.getNumberOfPages(); r3++)
      this.pdf.setPage(r3 + 1), this.pdf.internal.out("Q");
    this.pdf.setPage(e3), t3 && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);
  }, p2.prototype.toDataURL = function() {
    throw new Error("toDataUrl not implemented.");
  };
  var g2 = function(t3) {
    var e3, r3, n3, i3;
    if (true === t3.isCanvasGradient && (t3 = t3.getColor()), !t3)
      return { r: 0, g: 0, b: 0, a: 0, style: t3 };
    if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t3))
      e3 = 0, r3 = 0, n3 = 0, i3 = 0;
    else {
      var a2 = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t3);
      if (null !== a2)
        e3 = parseInt(a2[1]), r3 = parseInt(a2[2]), n3 = parseInt(a2[3]), i3 = 1;
      else if (null !== (a2 = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t3)))
        e3 = parseInt(a2[1]), r3 = parseInt(a2[2]), n3 = parseInt(a2[3]), i3 = parseFloat(a2[4]);
      else {
        if (i3 = 1, "string" == typeof t3 && "#" !== t3.charAt(0)) {
          var o3 = new f$2(t3);
          t3 = o3.ok ? o3.toHex() : "#000000";
        }
        4 === t3.length ? (e3 = t3.substring(1, 2), e3 += e3, r3 = t3.substring(2, 3), r3 += r3, n3 = t3.substring(3, 4), n3 += n3) : (e3 = t3.substring(1, 3), r3 = t3.substring(3, 5), n3 = t3.substring(5, 7)), e3 = parseInt(e3, 16), r3 = parseInt(r3, 16), n3 = parseInt(n3, 16);
      }
    }
    return { r: e3, g: r3, b: n3, a: i3, style: t3 };
  }, m2 = function() {
    return this.ctx.isFillTransparent || 0 == this.globalAlpha;
  }, v2 = function() {
    return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
  };
  p2.prototype.fillText = function(t3, e3, r3, n3) {
    if (isNaN(e3) || isNaN(r3) || "string" != typeof t3)
      throw a$1.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");
    if (n3 = isNaN(n3) ? void 0 : n3, !m2.call(this)) {
      var i3 = q2(this.ctx.transform.rotation), o3 = this.ctx.transform.scaleX;
      C2.call(this, { text: t3, x: e3, y: r3, scale: o3, angle: i3, align: this.textAlign, maxWidth: n3 });
    }
  }, p2.prototype.strokeText = function(t3, e3, r3, n3) {
    if (isNaN(e3) || isNaN(r3) || "string" != typeof t3)
      throw a$1.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
    if (!v2.call(this)) {
      n3 = isNaN(n3) ? void 0 : n3;
      var i3 = q2(this.ctx.transform.rotation), o3 = this.ctx.transform.scaleX;
      C2.call(this, { text: t3, x: e3, y: r3, scale: o3, renderingMode: "stroke", angle: i3, align: this.textAlign, maxWidth: n3 });
    }
  }, p2.prototype.measureText = function(t3) {
    if ("string" != typeof t3)
      throw a$1.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
    var e3 = this.pdf, r3 = this.pdf.internal.scaleFactor, n3 = e3.internal.getFontSize(), i3 = e3.getStringUnitWidth(t3) * n3 / e3.internal.scaleFactor, o3 = function(t4) {
      var e4 = (t4 = t4 || {}).width || 0;
      return Object.defineProperty(this, "width", { get: function() {
        return e4;
      } }), this;
    };
    return new o3({ width: i3 *= Math.round(96 * r3 / 72 * 1e4) / 1e4 });
  }, p2.prototype.scale = function(t3, e3) {
    if (isNaN(t3) || isNaN(e3))
      throw a$1.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
    var r3 = new h2(t3, 0, 0, e3, 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(r3);
  }, p2.prototype.rotate = function(t3) {
    if (isNaN(t3))
      throw a$1.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
    var e3 = new h2(Math.cos(t3), Math.sin(t3), -Math.sin(t3), Math.cos(t3), 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(e3);
  }, p2.prototype.translate = function(t3, e3) {
    if (isNaN(t3) || isNaN(e3))
      throw a$1.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
    var r3 = new h2(1, 0, 0, 1, t3, e3);
    this.ctx.transform = this.ctx.transform.multiply(r3);
  }, p2.prototype.transform = function(t3, e3, r3, n3, i3, o3) {
    if (isNaN(t3) || isNaN(e3) || isNaN(r3) || isNaN(n3) || isNaN(i3) || isNaN(o3))
      throw a$1.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
    var s3 = new h2(t3, e3, r3, n3, i3, o3);
    this.ctx.transform = this.ctx.transform.multiply(s3);
  }, p2.prototype.setTransform = function(t3, e3, r3, n3, i3, a2) {
    t3 = isNaN(t3) ? 1 : t3, e3 = isNaN(e3) ? 0 : e3, r3 = isNaN(r3) ? 0 : r3, n3 = isNaN(n3) ? 1 : n3, i3 = isNaN(i3) ? 0 : i3, a2 = isNaN(a2) ? 0 : a2, this.ctx.transform = new h2(t3, e3, r3, n3, i3, a2);
  };
  var b2 = function() {
    return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
  };
  p2.prototype.drawImage = function(t3, e3, r3, n3, i3, a2, o3, s3, c3) {
    var l3 = this.pdf.getImageProperties(t3), f2 = 1, d4 = 1, p3 = 1, g3 = 1;
    void 0 !== n3 && void 0 !== s3 && (p3 = s3 / n3, g3 = c3 / i3, f2 = l3.width / n3 * s3 / n3, d4 = l3.height / i3 * c3 / i3), void 0 === a2 && (a2 = e3, o3 = r3, e3 = 0, r3 = 0), void 0 !== n3 && void 0 === s3 && (s3 = n3, c3 = i3), void 0 === n3 && void 0 === s3 && (s3 = l3.width, c3 = l3.height);
    for (var m3, v3 = this.ctx.transform.decompose(), w3 = q2(v3.rotate.shx), A3 = new h2(), S3 = (A3 = (A3 = (A3 = A3.multiply(v3.translate)).multiply(v3.skew)).multiply(v3.scale)).applyToRectangle(new u2(a2 - e3 * p3, o3 - r3 * g3, n3 * f2, i3 * d4)), _3 = y2.call(this, S3), P3 = [], k3 = 0; k3 < _3.length; k3 += 1)
      -1 === P3.indexOf(_3[k3]) && P3.push(_3[k3]);
    if (L2(P3), this.autoPaging)
      for (var I3 = P3[0], F3 = P3[P3.length - 1], C3 = I3; C3 < F3 + 1; C3++) {
        this.pdf.setPage(C3);
        var j3 = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], O3 = 1 === C3 ? this.posY + this.margin[0] : this.margin[0], B3 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], M3 = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], E3 = 1 === C3 ? 0 : B3 + (C3 - 2) * M3;
        if (0 !== this.ctx.clip_path.length) {
          var D3 = this.path;
          m3 = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N2(m3, this.posX + this.margin[3], -E3 + O3 + this.ctx.prevPageLastElemOffset), x2.call(this, "fill", true), this.path = D3;
        }
        var R3 = JSON.parse(JSON.stringify(S3));
        R3 = N2([R3], this.posX + this.margin[3], -E3 + O3 + this.ctx.prevPageLastElemOffset)[0];
        var T3 = (C3 > I3 || C3 < F3) && b2.call(this);
        T3 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], j3, M3, null).clip().discardPath()), this.pdf.addImage(t3, "JPEG", R3.x, R3.y, R3.w, R3.h, null, null, w3), T3 && this.pdf.restoreGraphicsState();
      }
    else
      this.pdf.addImage(t3, "JPEG", S3.x, S3.y, S3.w, S3.h, null, null, w3);
  };
  var y2 = function(t3, e3, r3) {
    var n3 = [];
    e3 = e3 || this.pdf.internal.pageSize.width, r3 = r3 || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
    var i3 = this.posY + this.ctx.prevPageLastElemOffset;
    switch (t3.type) {
      default:
      case "mt":
      case "lt":
        n3.push(Math.floor((t3.y + i3) / r3) + 1);
        break;
      case "arc":
        n3.push(Math.floor((t3.y + i3 - t3.radius) / r3) + 1), n3.push(Math.floor((t3.y + i3 + t3.radius) / r3) + 1);
        break;
      case "qct":
        var a2 = D2(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t3.x1, t3.y1, t3.x, t3.y);
        n3.push(Math.floor((a2.y + i3) / r3) + 1), n3.push(Math.floor((a2.y + a2.h + i3) / r3) + 1);
        break;
      case "bct":
        var o3 = R2(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t3.x1, t3.y1, t3.x2, t3.y2, t3.x, t3.y);
        n3.push(Math.floor((o3.y + i3) / r3) + 1), n3.push(Math.floor((o3.y + o3.h + i3) / r3) + 1);
        break;
      case "rect":
        n3.push(Math.floor((t3.y + i3) / r3) + 1), n3.push(Math.floor((t3.y + t3.h + i3) / r3) + 1);
    }
    for (var s3 = 0; s3 < n3.length; s3 += 1)
      for (; this.pdf.internal.getNumberOfPages() < n3[s3]; )
        w2.call(this);
    return n3;
  }, w2 = function() {
    var t3 = this.fillStyle, e3 = this.strokeStyle, r3 = this.font, n3 = this.lineCap, i3 = this.lineWidth, a2 = this.lineJoin;
    this.pdf.addPage(), this.fillStyle = t3, this.strokeStyle = e3, this.font = r3, this.lineCap = n3, this.lineWidth = i3, this.lineJoin = a2;
  }, N2 = function(t3, e3, r3) {
    for (var n3 = 0; n3 < t3.length; n3++)
      switch (t3[n3].type) {
        case "bct":
          t3[n3].x2 += e3, t3[n3].y2 += r3;
        case "qct":
          t3[n3].x1 += e3, t3[n3].y1 += r3;
        case "mt":
        case "lt":
        case "arc":
        default:
          t3[n3].x += e3, t3[n3].y += r3;
      }
    return t3;
  }, L2 = function(t3) {
    return t3.sort(function(t4, e3) {
      return t4 - e3;
    });
  }, A2 = function(t3, e3) {
    for (var r3, n3, i3 = this.fillStyle, a2 = this.strokeStyle, o3 = this.lineCap, s3 = this.lineWidth, c3 = Math.abs(s3 * this.ctx.transform.scaleX), u3 = this.lineJoin, h3 = JSON.parse(JSON.stringify(this.path)), l3 = JSON.parse(JSON.stringify(this.path)), f2 = [], d4 = 0; d4 < l3.length; d4++)
      if (void 0 !== l3[d4].x)
        for (var p3 = y2.call(this, l3[d4]), g3 = 0; g3 < p3.length; g3 += 1)
          -1 === f2.indexOf(p3[g3]) && f2.push(p3[g3]);
    for (var m3 = 0; m3 < f2.length; m3++)
      for (; this.pdf.internal.getNumberOfPages() < f2[m3]; )
        w2.call(this);
    if (L2(f2), this.autoPaging)
      for (var v3 = f2[0], A3 = f2[f2.length - 1], S3 = v3; S3 < A3 + 1; S3++) {
        this.pdf.setPage(S3), this.fillStyle = i3, this.strokeStyle = a2, this.lineCap = o3, this.lineWidth = c3, this.lineJoin = u3;
        var _3 = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], P3 = 1 === S3 ? this.posY + this.margin[0] : this.margin[0], k3 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], I3 = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], F3 = 1 === S3 ? 0 : k3 + (S3 - 2) * I3;
        if (0 !== this.ctx.clip_path.length) {
          var C3 = this.path;
          r3 = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N2(r3, this.posX + this.margin[3], -F3 + P3 + this.ctx.prevPageLastElemOffset), x2.call(this, t3, true), this.path = C3;
        }
        if (n3 = JSON.parse(JSON.stringify(h3)), this.path = N2(n3, this.posX + this.margin[3], -F3 + P3 + this.ctx.prevPageLastElemOffset), false === e3 || 0 === S3) {
          var j3 = (S3 > v3 || S3 < A3) && b2.call(this);
          j3 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _3, I3, null).clip().discardPath()), x2.call(this, t3, e3), j3 && this.pdf.restoreGraphicsState();
        }
        this.lineWidth = s3;
      }
    else
      this.lineWidth = c3, x2.call(this, t3, e3), this.lineWidth = s3;
    this.path = h3;
  }, x2 = function(t3, e3) {
    if (("stroke" !== t3 || e3 || !v2.call(this)) && ("stroke" === t3 || e3 || !m2.call(this))) {
      for (var r3, n3, i3 = [], a2 = this.path, o3 = 0; o3 < a2.length; o3++) {
        var s3 = a2[o3];
        switch (s3.type) {
          case "begin":
            i3.push({ begin: true });
            break;
          case "close":
            i3.push({ close: true });
            break;
          case "mt":
            i3.push({ start: s3, deltas: [], abs: [] });
            break;
          case "lt":
            var c3 = i3.length;
            if (a2[o3 - 1] && !isNaN(a2[o3 - 1].x) && (r3 = [s3.x - a2[o3 - 1].x, s3.y - a2[o3 - 1].y], c3 > 0)) {
              for (; c3 >= 0; c3--)
                if (true !== i3[c3 - 1].close && true !== i3[c3 - 1].begin) {
                  i3[c3 - 1].deltas.push(r3), i3[c3 - 1].abs.push(s3);
                  break;
                }
            }
            break;
          case "bct":
            r3 = [s3.x1 - a2[o3 - 1].x, s3.y1 - a2[o3 - 1].y, s3.x2 - a2[o3 - 1].x, s3.y2 - a2[o3 - 1].y, s3.x - a2[o3 - 1].x, s3.y - a2[o3 - 1].y], i3[i3.length - 1].deltas.push(r3);
            break;
          case "qct":
            var u3 = a2[o3 - 1].x + 2 / 3 * (s3.x1 - a2[o3 - 1].x), h3 = a2[o3 - 1].y + 2 / 3 * (s3.y1 - a2[o3 - 1].y), l3 = s3.x + 2 / 3 * (s3.x1 - s3.x), f2 = s3.y + 2 / 3 * (s3.y1 - s3.y), d4 = s3.x, p3 = s3.y;
            r3 = [u3 - a2[o3 - 1].x, h3 - a2[o3 - 1].y, l3 - a2[o3 - 1].x, f2 - a2[o3 - 1].y, d4 - a2[o3 - 1].x, p3 - a2[o3 - 1].y], i3[i3.length - 1].deltas.push(r3);
            break;
          case "arc":
            i3.push({ deltas: [], abs: [], arc: true }), Array.isArray(i3[i3.length - 1].abs) && i3[i3.length - 1].abs.push(s3);
        }
      }
      n3 = e3 ? null : "stroke" === t3 ? "stroke" : "fill";
      for (var g3 = false, b3 = 0; b3 < i3.length; b3++)
        if (i3[b3].arc)
          for (var y3 = i3[b3].abs, w3 = 0; w3 < y3.length; w3++) {
            var N3 = y3[w3];
            "arc" === N3.type ? P2.call(this, N3.x, N3.y, N3.radius, N3.startAngle, N3.endAngle, N3.counterclockwise, void 0, e3, !g3) : j2.call(this, N3.x, N3.y), g3 = true;
          }
        else if (true === i3[b3].close)
          this.pdf.internal.out("h"), g3 = false;
        else if (true !== i3[b3].begin) {
          var L3 = i3[b3].start.x, A3 = i3[b3].start.y;
          O2.call(this, i3[b3].deltas, L3, A3), g3 = true;
        }
      n3 && k2.call(this, n3), e3 && I2.call(this);
    }
  }, S2 = function(t3) {
    var e3 = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor, r3 = e3 * (this.pdf.internal.getLineHeightFactor() - 1);
    switch (this.ctx.textBaseline) {
      case "bottom":
        return t3 - r3;
      case "top":
        return t3 + e3 - r3;
      case "hanging":
        return t3 + e3 - 2 * r3;
      case "middle":
        return t3 + e3 / 2 - r3;
      case "ideographic":
        return t3;
      case "alphabetic":
      default:
        return t3;
    }
  }, _2 = function(t3) {
    return t3 + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);
  };
  p2.prototype.createLinearGradient = function() {
    var t3 = function() {
    };
    return t3.colorStops = [], t3.addColorStop = function(t4, e3) {
      this.colorStops.push([t4, e3]);
    }, t3.getColor = function() {
      return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
    }, t3.isCanvasGradient = true, t3;
  }, p2.prototype.createPattern = function() {
    return this.createLinearGradient();
  }, p2.prototype.createRadialGradient = function() {
    return this.createLinearGradient();
  };
  var P2 = function(t3, e3, r3, n3, i3, a2, o3, s3, c3) {
    for (var u3 = M2.call(this, r3, n3, i3, a2), h3 = 0; h3 < u3.length; h3++) {
      var l3 = u3[h3];
      0 === h3 && (c3 ? F2.call(this, l3.x1 + t3, l3.y1 + e3) : j2.call(this, l3.x1 + t3, l3.y1 + e3)), B2.call(this, t3, e3, l3.x2, l3.y2, l3.x3, l3.y3, l3.x4, l3.y4);
    }
    s3 ? I2.call(this) : k2.call(this, o3);
  }, k2 = function(t3) {
    switch (t3) {
      case "stroke":
        this.pdf.internal.out("S");
        break;
      case "fill":
        this.pdf.internal.out("f");
    }
  }, I2 = function() {
    this.pdf.clip(), this.pdf.discardPath();
  }, F2 = function(t3, e3) {
    this.pdf.internal.out(n2(t3) + " " + i2(e3) + " m");
  }, C2 = function(t3) {
    var e3;
    switch (t3.align) {
      case "right":
      case "end":
        e3 = "right";
        break;
      case "center":
        e3 = "center";
        break;
      case "left":
      case "start":
      default:
        e3 = "left";
    }
    var r3 = this.pdf.getTextDimensions(t3.text), n3 = S2.call(this, t3.y), i3 = _2.call(this, n3) - r3.h, a2 = this.ctx.transform.applyToPoint(new c2(t3.x, n3)), o3 = this.ctx.transform.decompose(), s3 = new h2();
    s3 = (s3 = (s3 = s3.multiply(o3.translate)).multiply(o3.skew)).multiply(o3.scale);
    for (var l3, f2, d4, p3 = this.ctx.transform.applyToRectangle(new u2(t3.x, n3, r3.w, r3.h)), g3 = s3.applyToRectangle(new u2(t3.x, i3, r3.w, r3.h)), m3 = y2.call(this, g3), v3 = [], w3 = 0; w3 < m3.length; w3 += 1)
      -1 === v3.indexOf(m3[w3]) && v3.push(m3[w3]);
    if (L2(v3), this.autoPaging)
      for (var A3 = v3[0], P3 = v3[v3.length - 1], k3 = A3; k3 < P3 + 1; k3++) {
        this.pdf.setPage(k3);
        var I3 = 1 === k3 ? this.posY + this.margin[0] : this.margin[0], F3 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], C3 = this.pdf.internal.pageSize.height - this.margin[2], j3 = C3 - this.margin[0], O3 = this.pdf.internal.pageSize.width - this.margin[1], B3 = O3 - this.margin[3], M3 = 1 === k3 ? 0 : F3 + (k3 - 2) * j3;
        if (0 !== this.ctx.clip_path.length) {
          var E3 = this.path;
          l3 = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N2(l3, this.posX + this.margin[3], -1 * M3 + I3), x2.call(this, "fill", true), this.path = E3;
        }
        var q3 = N2([JSON.parse(JSON.stringify(g3))], this.posX + this.margin[3], -M3 + I3 + this.ctx.prevPageLastElemOffset)[0];
        t3.scale >= 0.01 && (f2 = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f2 * t3.scale), d4 = this.lineWidth, this.lineWidth = d4 * t3.scale);
        var D3 = "text" !== this.autoPaging;
        if (D3 || q3.y + q3.h <= C3) {
          if (D3 || q3.y >= I3 && q3.x <= O3) {
            var R3 = D3 ? t3.text : this.pdf.splitTextToSize(t3.text, t3.maxWidth || O3 - q3.x)[0], T3 = N2([JSON.parse(JSON.stringify(p3))], this.posX + this.margin[3], -M3 + I3 + this.ctx.prevPageLastElemOffset)[0], U2 = D3 && (k3 > A3 || k3 < P3) && b2.call(this);
            U2 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B3, j3, null).clip().discardPath()), this.pdf.text(R3, T3.x, T3.y, { angle: t3.angle, align: e3, renderingMode: t3.renderingMode }), U2 && this.pdf.restoreGraphicsState();
          }
        } else
          q3.y < C3 && (this.ctx.prevPageLastElemOffset += C3 - q3.y);
        t3.scale >= 0.01 && (this.pdf.setFontSize(f2), this.lineWidth = d4);
      }
    else
      t3.scale >= 0.01 && (f2 = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f2 * t3.scale), d4 = this.lineWidth, this.lineWidth = d4 * t3.scale), this.pdf.text(t3.text, a2.x + this.posX, a2.y + this.posY, { angle: t3.angle, align: e3, renderingMode: t3.renderingMode, maxWidth: t3.maxWidth }), t3.scale >= 0.01 && (this.pdf.setFontSize(f2), this.lineWidth = d4);
  }, j2 = function(t3, e3, r3, a2) {
    r3 = r3 || 0, a2 = a2 || 0, this.pdf.internal.out(n2(t3 + r3) + " " + i2(e3 + a2) + " l");
  }, O2 = function(t3, e3, r3) {
    return this.pdf.lines(t3, e3, r3, null, null);
  }, B2 = function(t3, e3, n3, i3, a2, c3, u3, h3) {
    this.pdf.internal.out([r2(o2(n3 + t3)), r2(s2(i3 + e3)), r2(o2(a2 + t3)), r2(s2(c3 + e3)), r2(o2(u3 + t3)), r2(s2(h3 + e3)), "c"].join(" "));
  }, M2 = function(t3, e3, r3, n3) {
    for (var i3 = 2 * Math.PI, a2 = Math.PI / 2; e3 > r3; )
      e3 -= i3;
    var o3 = Math.abs(r3 - e3);
    o3 < i3 && n3 && (o3 = i3 - o3);
    for (var s3 = [], c3 = n3 ? -1 : 1, u3 = e3; o3 > 1e-5; ) {
      var h3 = u3 + c3 * Math.min(o3, a2);
      s3.push(E2.call(this, t3, u3, h3)), o3 -= Math.abs(h3 - u3), u3 = h3;
    }
    return s3;
  }, E2 = function(t3, e3, r3) {
    var n3 = (r3 - e3) / 2, i3 = t3 * Math.cos(n3), a2 = t3 * Math.sin(n3), o3 = i3, s3 = -a2, c3 = o3 * o3 + s3 * s3, u3 = c3 + o3 * i3 + s3 * a2, h3 = 4 / 3 * (Math.sqrt(2 * c3 * u3) - u3) / (o3 * a2 - s3 * i3), l3 = o3 - h3 * s3, f2 = s3 + h3 * o3, d4 = l3, p3 = -f2, g3 = n3 + e3, m3 = Math.cos(g3), v3 = Math.sin(g3);
    return { x1: t3 * Math.cos(e3), y1: t3 * Math.sin(e3), x2: l3 * m3 - f2 * v3, y2: l3 * v3 + f2 * m3, x3: d4 * m3 - p3 * v3, y3: d4 * v3 + p3 * m3, x4: t3 * Math.cos(r3), y4: t3 * Math.sin(r3) };
  }, q2 = function(t3) {
    return 180 * t3 / Math.PI;
  }, D2 = function(t3, e3, r3, n3, i3, a2) {
    var o3 = t3 + 0.5 * (r3 - t3), s3 = e3 + 0.5 * (n3 - e3), c3 = i3 + 0.5 * (r3 - i3), h3 = a2 + 0.5 * (n3 - a2), l3 = Math.min(t3, i3, o3, c3), f2 = Math.max(t3, i3, o3, c3), d4 = Math.min(e3, a2, s3, h3), p3 = Math.max(e3, a2, s3, h3);
    return new u2(l3, d4, f2 - l3, p3 - d4);
  }, R2 = function(t3, e3, r3, n3, i3, a2, o3, s3) {
    var c3, h3, l3, f2, d4, p3, g3, m3, v3, b3, y3, w3, N3, L3, A3 = r3 - t3, x3 = n3 - e3, S3 = i3 - r3, _3 = a2 - n3, P3 = o3 - i3, k3 = s3 - a2;
    for (h3 = 0; h3 < 41; h3++)
      v3 = (g3 = (l3 = t3 + (c3 = h3 / 40) * A3) + c3 * ((d4 = r3 + c3 * S3) - l3)) + c3 * (d4 + c3 * (i3 + c3 * P3 - d4) - g3), b3 = (m3 = (f2 = e3 + c3 * x3) + c3 * ((p3 = n3 + c3 * _3) - f2)) + c3 * (p3 + c3 * (a2 + c3 * k3 - p3) - m3), 0 == h3 ? (y3 = v3, w3 = b3, N3 = v3, L3 = b3) : (y3 = Math.min(y3, v3), w3 = Math.min(w3, b3), N3 = Math.max(N3, v3), L3 = Math.max(L3, b3));
    return new u2(Math.round(y3), Math.round(w3), Math.round(N3 - y3), Math.round(L3 - w3));
  }, T2 = function() {
    if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
      var t3, e3, r3 = (t3 = this.ctx.lineDash, e3 = this.ctx.lineDashOffset, JSON.stringify({ lineDash: t3, lineDashOffset: e3 }));
      this.prevLineDash !== r3 && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = r3);
    }
  };
}(E$1.API), /**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var r2 = function(t4) {
    var e2, r3, n3, i3, a3, o2, s2, c2, u2, h2;
    for (r3 = [], n3 = 0, i3 = (t4 += e2 = "\0\0\0\0".slice(t4.length % 4 || 4)).length; i3 > n3; n3 += 4)
      0 !== (a3 = (t4.charCodeAt(n3) << 24) + (t4.charCodeAt(n3 + 1) << 16) + (t4.charCodeAt(n3 + 2) << 8) + t4.charCodeAt(n3 + 3)) ? (o2 = (a3 = ((a3 = ((a3 = ((a3 = (a3 - (h2 = a3 % 85)) / 85) - (u2 = a3 % 85)) / 85) - (c2 = a3 % 85)) / 85) - (s2 = a3 % 85)) / 85) % 85, r3.push(o2 + 33, s2 + 33, c2 + 33, u2 + 33, h2 + 33)) : r3.push(122);
    return function(t5, e3) {
      for (var r4 = e3; r4 > 0; r4--)
        t5.pop();
    }(r3, e2.length), String.fromCharCode.apply(String, r3) + "~>";
  }, n2 = function(t4) {
    var e2, r3, n3, i3, a3, o2 = String, s2 = "length", c2 = 255, u2 = "charCodeAt", h2 = "slice", l2 = "replace";
    for (t4[h2](-2), t4 = t4[h2](0, -2)[l2](/\s/g, "")[l2]("z", "!!!!!"), n3 = [], i3 = 0, a3 = (t4 += e2 = "uuuuu"[h2](t4[s2] % 5 || 5))[s2]; a3 > i3; i3 += 5)
      r3 = 52200625 * (t4[u2](i3) - 33) + 614125 * (t4[u2](i3 + 1) - 33) + 7225 * (t4[u2](i3 + 2) - 33) + 85 * (t4[u2](i3 + 3) - 33) + (t4[u2](i3 + 4) - 33), n3.push(c2 & r3 >> 24, c2 & r3 >> 16, c2 & r3 >> 8, c2 & r3);
    return function(t5, e3) {
      for (var r4 = e3; r4 > 0; r4--)
        t5.pop();
    }(n3, e2[s2]), o2.fromCharCode.apply(o2, n3);
  }, i2 = function(t4) {
    var e2 = new RegExp(/^([0-9A-Fa-f]{2})+$/);
    if (-1 !== (t4 = t4.replace(/\s/g, "")).indexOf(">") && (t4 = t4.substr(0, t4.indexOf(">"))), t4.length % 2 && (t4 += "0"), false === e2.test(t4))
      return "";
    for (var r3 = "", n3 = 0; n3 < t4.length; n3 += 2)
      r3 += String.fromCharCode("0x" + (t4[n3] + t4[n3 + 1]));
    return r3;
  }, a2 = function(t4) {
    for (var r3 = new Uint8Array(t4.length), n3 = t4.length; n3--; )
      r3[n3] = t4.charCodeAt(n3);
    return t4 = (r3 = zlibSync(r3)).reduce(function(t5, e2) {
      return t5 + String.fromCharCode(e2);
    }, "");
  };
  t3.processDataByFilters = function(t4, e2) {
    var o2 = 0, s2 = t4 || "", c2 = [];
    for ("string" == typeof (e2 = e2 || []) && (e2 = [e2]), o2 = 0; o2 < e2.length; o2 += 1)
      switch (e2[o2]) {
        case "ASCII85Decode":
        case "/ASCII85Decode":
          s2 = n2(s2), c2.push("/ASCII85Encode");
          break;
        case "ASCII85Encode":
        case "/ASCII85Encode":
          s2 = r2(s2), c2.push("/ASCII85Decode");
          break;
        case "ASCIIHexDecode":
        case "/ASCIIHexDecode":
          s2 = i2(s2), c2.push("/ASCIIHexEncode");
          break;
        case "ASCIIHexEncode":
        case "/ASCIIHexEncode":
          s2 = s2.split("").map(function(t5) {
            return ("0" + t5.charCodeAt().toString(16)).slice(-2);
          }).join("") + ">", c2.push("/ASCIIHexDecode");
          break;
        case "FlateEncode":
        case "/FlateEncode":
          s2 = a2(s2), c2.push("/FlateDecode");
          break;
        default:
          throw new Error('The filter: "' + e2[o2] + '" is not implemented');
      }
    return { data: s2, reverseChain: c2.reverse().join(" ") };
  };
}(E$1.API), /**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  t3.loadFile = function(t4, e2, r2) {
    return function(t5, e3, r3) {
      e3 = false !== e3, r3 = "function" == typeof r3 ? r3 : function() {
      };
      var n2 = void 0;
      try {
        n2 = function(t6, e4, r4) {
          var n3 = new XMLHttpRequest(), i2 = 0, a2 = function(t7) {
            var e5 = t7.length, r5 = [], n4 = String.fromCharCode;
            for (i2 = 0; i2 < e5; i2 += 1)
              r5.push(n4(255 & t7.charCodeAt(i2)));
            return r5.join("");
          };
          if (n3.open("GET", t6, !e4), n3.overrideMimeType("text/plain; charset=x-user-defined"), false === e4 && (n3.onload = function() {
            200 === n3.status ? r4(a2(this.responseText)) : r4(void 0);
          }), n3.send(null), e4 && 200 === n3.status)
            return a2(n3.responseText);
        }(t5, e3, r3);
      } catch (t6) {
      }
      return n2;
    }(t4, e2, r2);
  }, t3.loadImageFile = t3.loadFile;
}(E$1.API), function(e2) {
  function r2() {
    return (n$1.html2canvas ? Promise.resolve(n$1.html2canvas) : __vitePreload(() => import("./html2canvas.esm-858519c4.js"), true ? [] : void 0)).catch(function(t3) {
      return Promise.reject(new Error("Could not load html2canvas: " + t3));
    }).then(function(t3) {
      return t3.default ? t3.default : t3;
    });
  }
  function i2() {
    return (n$1.DOMPurify ? Promise.resolve(n$1.DOMPurify) : __vitePreload(() => import("./purify.es-eef49b8a.js"), true ? [] : void 0)).catch(function(t3) {
      return Promise.reject(new Error("Could not load dompurify: " + t3));
    }).then(function(t3) {
      return t3.default ? t3.default : t3;
    });
  }
  var a2 = function(e3) {
    var r3 = _typeof(e3);
    return "undefined" === r3 ? "undefined" : "string" === r3 || e3 instanceof String ? "string" : "number" === r3 || e3 instanceof Number ? "number" : "function" === r3 || e3 instanceof Function ? "function" : e3 && e3.constructor === Array ? "array" : e3 && 1 === e3.nodeType ? "element" : "object" === r3 ? "object" : "unknown";
  }, o2 = function(t3, e3) {
    var r3 = document.createElement(t3);
    for (var n2 in e3.className && (r3.className = e3.className), e3.innerHTML && e3.dompurify && (r3.innerHTML = e3.dompurify.sanitize(e3.innerHTML)), e3.style)
      r3.style[n2] = e3.style[n2];
    return r3;
  }, s2 = function t3(e3) {
    var r3 = Object.assign(t3.convert(Promise.resolve()), JSON.parse(JSON.stringify(t3.template))), n2 = t3.convert(Promise.resolve(), r3);
    return n2 = (n2 = n2.setProgress(1, t3, 1, [t3])).set(e3);
  };
  (s2.prototype = Object.create(Promise.prototype)).constructor = s2, s2.convert = function(t3, e3) {
    return t3.__proto__ = e3 || s2.prototype, t3;
  }, s2.template = { prop: { src: null, container: null, overlay: null, canvas: null, img: null, pdf: null, pageSize: null, callback: function() {
  } }, progress: { val: 0, state: null, n: 0, stack: [] }, opt: { filename: "file.pdf", margin: [0, 0, 0, 0], enableLinks: true, x: 0, y: 0, html2canvas: {}, jsPDF: {}, backgroundColor: "transparent" } }, s2.prototype.from = function(t3, e3) {
    return this.then(function() {
      switch (e3 = e3 || function(t4) {
        switch (a2(t4)) {
          case "string":
            return "string";
          case "element":
            return "canvas" === t4.nodeName.toLowerCase() ? "canvas" : "element";
          default:
            return "unknown";
        }
      }(t3)) {
        case "string":
          return this.then(i2).then(function(e4) {
            return this.set({ src: o2("div", { innerHTML: t3, dompurify: e4 }) });
          });
        case "element":
          return this.set({ src: t3 });
        case "canvas":
          return this.set({ canvas: t3 });
        case "img":
          return this.set({ img: t3 });
        default:
          return this.error("Unknown source type.");
      }
    });
  }, s2.prototype.to = function(t3) {
    switch (t3) {
      case "container":
        return this.toContainer();
      case "canvas":
        return this.toCanvas();
      case "img":
        return this.toImg();
      case "pdf":
        return this.toPdf();
      default:
        return this.error("Invalid target.");
    }
  }, s2.prototype.toContainer = function() {
    return this.thenList([function() {
      return this.prop.src || this.error("Cannot duplicate - no source HTML.");
    }, function() {
      return this.prop.pageSize || this.setPageSize();
    }]).then(function() {
      var t3 = { position: "relative", display: "inline-block", width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px", left: 0, right: 0, top: 0, margin: "auto", backgroundColor: this.opt.backgroundColor }, e3 = function t4(e4, r3) {
        for (var n2 = 3 === e4.nodeType ? document.createTextNode(e4.nodeValue) : e4.cloneNode(false), i3 = e4.firstChild; i3; i3 = i3.nextSibling)
          true !== r3 && 1 === i3.nodeType && "SCRIPT" === i3.nodeName || n2.appendChild(t4(i3, r3));
        return 1 === e4.nodeType && ("CANVAS" === e4.nodeName ? (n2.width = e4.width, n2.height = e4.height, n2.getContext("2d").drawImage(e4, 0, 0)) : "TEXTAREA" !== e4.nodeName && "SELECT" !== e4.nodeName || (n2.value = e4.value), n2.addEventListener("load", function() {
          n2.scrollTop = e4.scrollTop, n2.scrollLeft = e4.scrollLeft;
        }, true)), n2;
      }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
      "BODY" === e3.tagName && (t3.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = o2("div", { className: "html2pdf__overlay", style: { position: "fixed", overflow: "hidden", zIndex: 1e3, left: "-100000px", right: 0, bottom: 0, top: 0 } }), this.prop.container = o2("div", { className: "html2pdf__container", style: t3 }), this.prop.container.appendChild(e3), this.prop.container.firstChild.appendChild(o2("div", { style: { clear: "both", border: "0 none transparent", margin: 0, padding: 0, height: 0 } })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
    });
  }, s2.prototype.toCanvas = function() {
    var t3 = [function() {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t3).then(r2).then(function(t4) {
      var e3 = Object.assign({}, this.opt.html2canvas);
      return delete e3.onrendered, t4(this.prop.container, e3);
    }).then(function(t4) {
      (this.opt.html2canvas.onrendered || function() {
      })(t4), this.prop.canvas = t4, document.body.removeChild(this.prop.overlay);
    });
  }, s2.prototype.toContext2d = function() {
    var t3 = [function() {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t3).then(r2).then(function(t4) {
      var e3 = this.opt.jsPDF, r3 = this.opt.fontFaces, n2 = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth, i3 = Object.assign({ async: true, allowTaint: true, scale: n2, scrollX: this.opt.scrollX || 0, scrollY: this.opt.scrollY || 0, backgroundColor: "#ffffff", imageTimeout: 15e3, logging: true, proxy: null, removeContainer: true, foreignObjectRendering: false, useCORS: false }, this.opt.html2canvas);
      if (delete i3.onrendered, e3.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e3.context2d.posX = this.opt.x, e3.context2d.posY = this.opt.y, e3.context2d.margin = this.opt.margin, e3.context2d.fontFaces = r3, r3)
        for (var a3 = 0; a3 < r3.length; ++a3) {
          var o3 = r3[a3], s3 = o3.src.find(function(t5) {
            return "truetype" === t5.format;
          });
          s3 && e3.addFont(s3.url, o3.ref.name, o3.ref.style);
        }
      return i3.windowHeight = i3.windowHeight || 0, i3.windowHeight = 0 == i3.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i3.windowHeight, e3.context2d.save(true), t4(this.prop.container, i3);
    }).then(function(t4) {
      this.opt.jsPDF.context2d.restore(true), (this.opt.html2canvas.onrendered || function() {
      })(t4), this.prop.canvas = t4, document.body.removeChild(this.prop.overlay);
    });
  }, s2.prototype.toImg = function() {
    return this.thenList([function() {
      return this.prop.canvas || this.toCanvas();
    }]).then(function() {
      var t3 = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement("img"), this.prop.img.src = t3;
    });
  }, s2.prototype.toPdf = function() {
    return this.thenList([function() {
      return this.toContext2d();
    }]).then(function() {
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  }, s2.prototype.output = function(t3, e3, r3) {
    return "img" === (r3 = r3 || "pdf").toLowerCase() || "image" === r3.toLowerCase() ? this.outputImg(t3, e3) : this.outputPdf(t3, e3);
  }, s2.prototype.outputPdf = function(t3, e3) {
    return this.thenList([function() {
      return this.prop.pdf || this.toPdf();
    }]).then(function() {
      return this.prop.pdf.output(t3, e3);
    });
  }, s2.prototype.outputImg = function(t3) {
    return this.thenList([function() {
      return this.prop.img || this.toImg();
    }]).then(function() {
      switch (t3) {
        case void 0:
        case "img":
          return this.prop.img;
        case "datauristring":
        case "dataurlstring":
          return this.prop.img.src;
        case "datauri":
        case "dataurl":
          return document.location.href = this.prop.img.src;
        default:
          throw 'Image output type "' + t3 + '" is not supported.';
      }
    });
  }, s2.prototype.save = function(t3) {
    return this.thenList([function() {
      return this.prop.pdf || this.toPdf();
    }]).set(t3 ? { filename: t3 } : null).then(function() {
      this.prop.pdf.save(this.opt.filename);
    });
  }, s2.prototype.doCallback = function() {
    return this.thenList([function() {
      return this.prop.pdf || this.toPdf();
    }]).then(function() {
      this.prop.callback(this.prop.pdf);
    });
  }, s2.prototype.set = function(t3) {
    if ("object" !== a2(t3))
      return this;
    var e3 = Object.keys(t3 || {}).map(function(e4) {
      if (e4 in s2.template.prop)
        return function() {
          this.prop[e4] = t3[e4];
        };
      switch (e4) {
        case "margin":
          return this.setMargin.bind(this, t3.margin);
        case "jsPDF":
          return function() {
            return this.opt.jsPDF = t3.jsPDF, this.setPageSize();
          };
        case "pageSize":
          return this.setPageSize.bind(this, t3.pageSize);
        default:
          return function() {
            this.opt[e4] = t3[e4];
          };
      }
    }, this);
    return this.then(function() {
      return this.thenList(e3);
    });
  }, s2.prototype.get = function(t3, e3) {
    return this.then(function() {
      var r3 = t3 in s2.template.prop ? this.prop[t3] : this.opt[t3];
      return e3 ? e3(r3) : r3;
    });
  }, s2.prototype.setMargin = function(t3) {
    return this.then(function() {
      switch (a2(t3)) {
        case "number":
          t3 = [t3, t3, t3, t3];
        case "array":
          if (2 === t3.length && (t3 = [t3[0], t3[1], t3[0], t3[1]]), 4 === t3.length)
            break;
        default:
          return this.error("Invalid margin array.");
      }
      this.opt.margin = t3;
    }).then(this.setPageSize);
  }, s2.prototype.setPageSize = function(t3) {
    function e3(t4, e4) {
      return Math.floor(t4 * e4 / 72 * 96);
    }
    return this.then(function() {
      (t3 = t3 || E$1.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t3.inner = { width: t3.width - this.opt.margin[1] - this.opt.margin[3], height: t3.height - this.opt.margin[0] - this.opt.margin[2] }, t3.inner.px = { width: e3(t3.inner.width, t3.k), height: e3(t3.inner.height, t3.k) }, t3.inner.ratio = t3.inner.height / t3.inner.width), this.prop.pageSize = t3;
    });
  }, s2.prototype.setProgress = function(t3, e3, r3, n2) {
    return null != t3 && (this.progress.val = t3), null != e3 && (this.progress.state = e3), null != r3 && (this.progress.n = r3), null != n2 && (this.progress.stack = n2), this.progress.ratio = this.progress.val / this.progress.state, this;
  }, s2.prototype.updateProgress = function(t3, e3, r3, n2) {
    return this.setProgress(t3 ? this.progress.val + t3 : null, e3 || null, r3 ? this.progress.n + r3 : null, n2 ? this.progress.stack.concat(n2) : null);
  }, s2.prototype.then = function(t3, e3) {
    var r3 = this;
    return this.thenCore(t3, e3, function(t4, e4) {
      return r3.updateProgress(null, null, 1, [t4]), Promise.prototype.then.call(this, function(e5) {
        return r3.updateProgress(null, t4), e5;
      }).then(t4, e4).then(function(t5) {
        return r3.updateProgress(1), t5;
      });
    });
  }, s2.prototype.thenCore = function(t3, e3, r3) {
    r3 = r3 || Promise.prototype.then;
    t3 && (t3 = t3.bind(this)), e3 && (e3 = e3.bind(this));
    var n2 = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s2.convert(Object.assign({}, this), Promise.prototype), i3 = r3.call(n2, t3, e3);
    return s2.convert(i3, this.__proto__);
  }, s2.prototype.thenExternal = function(t3, e3) {
    return Promise.prototype.then.call(this, t3, e3);
  }, s2.prototype.thenList = function(t3) {
    var e3 = this;
    return t3.forEach(function(t4) {
      e3 = e3.thenCore(t4);
    }), e3;
  }, s2.prototype.catch = function(t3) {
    t3 && (t3 = t3.bind(this));
    var e3 = Promise.prototype.catch.call(this, t3);
    return s2.convert(e3, this);
  }, s2.prototype.catchExternal = function(t3) {
    return Promise.prototype.catch.call(this, t3);
  }, s2.prototype.error = function(t3) {
    return this.then(function() {
      throw new Error(t3);
    });
  }, s2.prototype.using = s2.prototype.set, s2.prototype.saveAs = s2.prototype.save, s2.prototype.export = s2.prototype.output, s2.prototype.run = s2.prototype.then, E$1.getPageSize = function(e3, r3, n2) {
    if ("object" === _typeof(e3)) {
      var i3 = e3;
      e3 = i3.orientation, r3 = i3.unit || r3, n2 = i3.format || n2;
    }
    r3 = r3 || "mm", n2 = n2 || "a4", e3 = ("" + (e3 || "P")).toLowerCase();
    var a3, o3 = ("" + n2).toLowerCase(), s3 = { a0: [2383.94, 3370.39], a1: [1683.78, 2383.94], a2: [1190.55, 1683.78], a3: [841.89, 1190.55], a4: [595.28, 841.89], a5: [419.53, 595.28], a6: [297.64, 419.53], a7: [209.76, 297.64], a8: [147.4, 209.76], a9: [104.88, 147.4], a10: [73.7, 104.88], b0: [2834.65, 4008.19], b1: [2004.09, 2834.65], b2: [1417.32, 2004.09], b3: [1000.63, 1417.32], b4: [708.66, 1000.63], b5: [498.9, 708.66], b6: [354.33, 498.9], b7: [249.45, 354.33], b8: [175.75, 249.45], b9: [124.72, 175.75], b10: [87.87, 124.72], c0: [2599.37, 3676.54], c1: [1836.85, 2599.37], c2: [1298.27, 1836.85], c3: [918.43, 1298.27], c4: [649.13, 918.43], c5: [459.21, 649.13], c6: [323.15, 459.21], c7: [229.61, 323.15], c8: [161.57, 229.61], c9: [113.39, 161.57], c10: [79.37, 113.39], dl: [311.81, 623.62], letter: [612, 792], "government-letter": [576, 756], legal: [612, 1008], "junior-legal": [576, 360], ledger: [1224, 792], tabloid: [792, 1224], "credit-card": [153, 243] };
    switch (r3) {
      case "pt":
        a3 = 1;
        break;
      case "mm":
        a3 = 72 / 25.4;
        break;
      case "cm":
        a3 = 72 / 2.54;
        break;
      case "in":
        a3 = 72;
        break;
      case "px":
        a3 = 0.75;
        break;
      case "pc":
      case "em":
        a3 = 12;
        break;
      case "ex":
        a3 = 6;
        break;
      default:
        throw "Invalid unit: " + r3;
    }
    var c2, u2 = 0, h2 = 0;
    if (s3.hasOwnProperty(o3))
      u2 = s3[o3][1] / a3, h2 = s3[o3][0] / a3;
    else
      try {
        u2 = n2[1], h2 = n2[0];
      } catch (t3) {
        throw new Error("Invalid format: " + n2);
      }
    if ("p" === e3 || "portrait" === e3)
      e3 = "p", h2 > u2 && (c2 = h2, h2 = u2, u2 = c2);
    else {
      if ("l" !== e3 && "landscape" !== e3)
        throw "Invalid orientation: " + e3;
      e3 = "l", u2 > h2 && (c2 = h2, h2 = u2, u2 = c2);
    }
    return { width: h2, height: u2, unit: r3, k: a3, orientation: e3 };
  }, e2.html = function(t3, e3) {
    (e3 = e3 || {}).callback = e3.callback || function() {
    }, e3.html2canvas = e3.html2canvas || {}, e3.html2canvas.canvas = e3.html2canvas.canvas || this.canvas, e3.jsPDF = e3.jsPDF || this, e3.fontFaces = e3.fontFaces ? e3.fontFaces.map(jt$1) : null;
    var r3 = new s2(e3);
    return e3.worker ? r3 : r3.from(t3).doCallback();
  };
}(E$1.API), E$1.API.addJS = function(t3) {
  return Ht$1 = t3, this.internal.events.subscribe("postPutResources", function() {
    Ut$1 = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Ut$1 + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), zt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Ht$1 + ")"), this.internal.out(">>"), this.internal.out("endobj");
  }), this.internal.events.subscribe("putCatalog", function() {
    void 0 !== Ut$1 && void 0 !== zt && this.internal.out("/Names <</JavaScript " + Ut$1 + " 0 R>>");
  }), this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2;
  t3.events.push(["postPutResources", function() {
    var t4 = this, r2 = /^(\d+) 0 obj$/;
    if (this.outline.root.children.length > 0)
      for (var n2 = t4.outline.render().split(/\r\n/), i2 = 0; i2 < n2.length; i2++) {
        var a2 = n2[i2], o2 = r2.exec(a2);
        if (null != o2) {
          var s2 = o2[1];
          t4.internal.newObjectDeferredBegin(s2, false);
        }
        t4.internal.write(a2);
      }
    if (this.outline.createNamedDestinations) {
      var c2 = this.internal.pages.length, u2 = [];
      for (i2 = 0; i2 < c2; i2++) {
        var h2 = t4.internal.newObject();
        u2.push(h2);
        var l2 = t4.internal.getPageInfo(i2 + 1);
        t4.internal.write("<< /D[" + l2.objId + " 0 R /XYZ null null null]>> endobj");
      }
      var f2 = t4.internal.newObject();
      t4.internal.write("<< /Names [ ");
      for (i2 = 0; i2 < u2.length; i2++)
        t4.internal.write("(page_" + (i2 + 1) + ")" + u2[i2] + " 0 R");
      t4.internal.write(" ] >>", "endobj"), e2 = t4.internal.newObject(), t4.internal.write("<< /Dests " + f2 + " 0 R"), t4.internal.write(">>", "endobj");
    }
  }]), t3.events.push(["putCatalog", function() {
    this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e2 + " 0 R"));
  }]), t3.events.push(["initialized", function() {
    var t4 = this;
    t4.outline = { createNamedDestinations: false, root: { children: [] } }, t4.outline.add = function(t5, e3, r2) {
      var n2 = { title: e3, options: r2, children: [] };
      return null == t5 && (t5 = this.root), t5.children.push(n2), n2;
    }, t4.outline.render = function() {
      return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t4, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
    }, t4.outline.genIds_r = function(e3) {
      e3.id = t4.internal.newObjectDeferred();
      for (var r2 = 0; r2 < e3.children.length; r2++)
        this.genIds_r(e3.children[r2]);
    }, t4.outline.renderRoot = function(t5) {
      this.objStart(t5), this.line("/Type /Outlines"), t5.children.length > 0 && (this.line("/First " + this.makeRef(t5.children[0])), this.line("/Last " + this.makeRef(t5.children[t5.children.length - 1]))), this.line("/Count " + this.count_r({ count: 0 }, t5)), this.objEnd();
    }, t4.outline.renderItems = function(e3) {
      for (var r2 = this.ctx.pdf.internal.getVerticalCoordinateString, n2 = 0; n2 < e3.children.length; n2++) {
        var i2 = e3.children[n2];
        this.objStart(i2), this.line("/Title " + this.makeString(i2.title)), this.line("/Parent " + this.makeRef(e3)), n2 > 0 && this.line("/Prev " + this.makeRef(e3.children[n2 - 1])), n2 < e3.children.length - 1 && this.line("/Next " + this.makeRef(e3.children[n2 + 1])), i2.children.length > 0 && (this.line("/First " + this.makeRef(i2.children[0])), this.line("/Last " + this.makeRef(i2.children[i2.children.length - 1])));
        var a2 = this.count = this.count_r({ count: 0 }, i2);
        if (a2 > 0 && this.line("/Count " + a2), i2.options && i2.options.pageNumber) {
          var o2 = t4.internal.getPageInfo(i2.options.pageNumber);
          this.line("/Dest [" + o2.objId + " 0 R /XYZ 0 " + r2(0) + " 0]");
        }
        this.objEnd();
      }
      for (var s2 = 0; s2 < e3.children.length; s2++)
        this.renderItems(e3.children[s2]);
    }, t4.outline.line = function(t5) {
      this.ctx.val += t5 + "\r\n";
    }, t4.outline.makeRef = function(t5) {
      return t5.id + " 0 R";
    }, t4.outline.makeString = function(e3) {
      return "(" + t4.internal.pdfEscape(e3) + ")";
    }, t4.outline.objStart = function(t5) {
      this.ctx.val += "\r\n" + t5.id + " 0 obj\r\n<<\r\n";
    }, t4.outline.objEnd = function() {
      this.ctx.val += ">> \r\nendobj\r\n";
    }, t4.outline.count_r = function(t5, e3) {
      for (var r2 = 0; r2 < e3.children.length; r2++)
        t5.count++, this.count_r(t5, e3.children[r2]);
      return t5.count;
    };
  }]);
}(E$1.API), /**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = [192, 193, 194, 195, 196, 197, 198, 199];
  t3.processJPEG = function(t4, r2, n2, i2, a2, o2) {
    var s2, c2 = this.decode.DCT_DECODE, u2 = null;
    if ("string" == typeof t4 || this.__addimage__.isArrayBuffer(t4) || this.__addimage__.isArrayBufferView(t4)) {
      switch (t4 = a2 || t4, t4 = this.__addimage__.isArrayBuffer(t4) ? new Uint8Array(t4) : t4, (s2 = function(t5) {
        for (var r3, n3 = 256 * t5.charCodeAt(4) + t5.charCodeAt(5), i3 = t5.length, a3 = { width: 0, height: 0, numcomponents: 1 }, o3 = 4; o3 < i3; o3 += 2) {
          if (o3 += n3, -1 !== e2.indexOf(t5.charCodeAt(o3 + 1))) {
            r3 = 256 * t5.charCodeAt(o3 + 5) + t5.charCodeAt(o3 + 6), a3 = { width: 256 * t5.charCodeAt(o3 + 7) + t5.charCodeAt(o3 + 8), height: r3, numcomponents: t5.charCodeAt(o3 + 9) };
            break;
          }
          n3 = 256 * t5.charCodeAt(o3 + 2) + t5.charCodeAt(o3 + 3);
        }
        return a3;
      }(t4 = this.__addimage__.isArrayBufferView(t4) ? this.__addimage__.arrayBufferToBinaryString(t4) : t4)).numcomponents) {
        case 1:
          o2 = this.color_spaces.DEVICE_GRAY;
          break;
        case 4:
          o2 = this.color_spaces.DEVICE_CMYK;
          break;
        case 3:
          o2 = this.color_spaces.DEVICE_RGB;
      }
      u2 = { data: t4, width: s2.width, height: s2.height, colorSpace: o2, bitsPerComponent: 8, filter: c2, index: r2, alias: n2 };
    }
    return u2;
  };
}(E$1.API);
var Vt$1, Gt$1, Yt, Jt, Xt, Kt = function() {
  var t3, e2, i2;
  function a2(t4) {
    var e3, r2, n2, i3, a3, o3, s2, c2, u2, h2, l2, f2, d2, p2;
    for (this.data = t4, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o3 = null; ; ) {
      switch (e3 = this.readUInt32(), u2 = (function() {
        var t5, e4;
        for (e4 = [], t5 = 0; t5 < 4; ++t5)
          e4.push(String.fromCharCode(this.data[this.pos++]));
        return e4;
      }).call(this).join("")) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;
        case "acTL":
          this.animation = { numFrames: this.readUInt32(), numPlays: this.readUInt32() || 1 / 0, frames: [] };
          break;
        case "PLTE":
          this.palette = this.read(e3);
          break;
        case "fcTL":
          o3 && this.animation.frames.push(o3), this.pos += 4, o3 = { width: this.readUInt32(), height: this.readUInt32(), xOffset: this.readUInt32(), yOffset: this.readUInt32() }, a3 = this.readUInt16(), i3 = this.readUInt16() || 100, o3.delay = 1e3 * a3 / i3, o3.disposeOp = this.data[this.pos++], o3.blendOp = this.data[this.pos++], o3.data = [];
          break;
        case "IDAT":
        case "fdAT":
          for ("fdAT" === u2 && (this.pos += 4, e3 -= 4), t4 = (null != o3 ? o3.data : void 0) || this.imgData, f2 = 0; 0 <= e3 ? f2 < e3 : f2 > e3; 0 <= e3 ? ++f2 : --f2)
            t4.push(this.data[this.pos++]);
          break;
        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              if (n2 = this.palette.length / 3, this.transparency.indexed = this.read(e3), this.transparency.indexed.length > n2)
                throw new Error("More transparent colors than palette size");
              if ((h2 = n2 - this.transparency.indexed.length) > 0)
                for (d2 = 0; 0 <= h2 ? d2 < h2 : d2 > h2; 0 <= h2 ? ++d2 : --d2)
                  this.transparency.indexed.push(255);
              break;
            case 0:
              this.transparency.grayscale = this.read(e3)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(e3);
          }
          break;
        case "tEXt":
          s2 = (l2 = this.read(e3)).indexOf(0), c2 = String.fromCharCode.apply(String, l2.slice(0, s2)), this.text[c2] = String.fromCharCode.apply(String, l2.slice(s2 + 1));
          break;
        case "IEND":
          return o3 && this.animation.frames.push(o3), this.colors = (function() {
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                return 1;
              case 2:
              case 6:
                return 3;
            }
          }).call(this), this.hasAlphaChannel = 4 === (p2 = this.colorType) || 6 === p2, r2 = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r2, this.colorSpace = (function() {
            switch (this.colors) {
              case 1:
                return "DeviceGray";
              case 3:
                return "DeviceRGB";
            }
          }).call(this), void (this.imgData = new Uint8Array(this.imgData));
        default:
          this.pos += e3;
      }
      if (this.pos += 4, this.pos > this.data.length)
        throw new Error("Incomplete or corrupt PNG file");
    }
  }
  a2.prototype.read = function(t4) {
    var e3, r2;
    for (r2 = [], e3 = 0; 0 <= t4 ? e3 < t4 : e3 > t4; 0 <= t4 ? ++e3 : --e3)
      r2.push(this.data[this.pos++]);
    return r2;
  }, a2.prototype.readUInt32 = function() {
    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
  }, a2.prototype.readUInt16 = function() {
    return this.data[this.pos++] << 8 | this.data[this.pos++];
  }, a2.prototype.decodePixels = function(t4) {
    var e3 = this.pixelBitlength / 8, n2 = new Uint8Array(this.width * this.height * e3), i3 = 0, a3 = this;
    if (null == t4 && (t4 = this.imgData), 0 === t4.length)
      return new Uint8Array(0);
    function o3(r2, o4, s2, c2) {
      var u2, h2, l2, f2, d2, p2, g2, m2, v2, b2, y2, w2, N2, L2, A2, x2, S2, _2, P2, k2, I2, F2 = Math.ceil((a3.width - r2) / s2), C2 = Math.ceil((a3.height - o4) / c2), j2 = a3.width == F2 && a3.height == C2;
      for (L2 = e3 * F2, w2 = j2 ? n2 : new Uint8Array(L2 * C2), p2 = t4.length, N2 = 0, h2 = 0; N2 < C2 && i3 < p2; ) {
        switch (t4[i3++]) {
          case 0:
            for (f2 = S2 = 0; S2 < L2; f2 = S2 += 1)
              w2[h2++] = t4[i3++];
            break;
          case 1:
            for (f2 = _2 = 0; _2 < L2; f2 = _2 += 1)
              u2 = t4[i3++], d2 = f2 < e3 ? 0 : w2[h2 - e3], w2[h2++] = (u2 + d2) % 256;
            break;
          case 2:
            for (f2 = P2 = 0; P2 < L2; f2 = P2 += 1)
              u2 = t4[i3++], l2 = (f2 - f2 % e3) / e3, A2 = N2 && w2[(N2 - 1) * L2 + l2 * e3 + f2 % e3], w2[h2++] = (A2 + u2) % 256;
            break;
          case 3:
            for (f2 = k2 = 0; k2 < L2; f2 = k2 += 1)
              u2 = t4[i3++], l2 = (f2 - f2 % e3) / e3, d2 = f2 < e3 ? 0 : w2[h2 - e3], A2 = N2 && w2[(N2 - 1) * L2 + l2 * e3 + f2 % e3], w2[h2++] = (u2 + Math.floor((d2 + A2) / 2)) % 256;
            break;
          case 4:
            for (f2 = I2 = 0; I2 < L2; f2 = I2 += 1)
              u2 = t4[i3++], l2 = (f2 - f2 % e3) / e3, d2 = f2 < e3 ? 0 : w2[h2 - e3], 0 === N2 ? A2 = x2 = 0 : (A2 = w2[(N2 - 1) * L2 + l2 * e3 + f2 % e3], x2 = l2 && w2[(N2 - 1) * L2 + (l2 - 1) * e3 + f2 % e3]), g2 = d2 + A2 - x2, m2 = Math.abs(g2 - d2), b2 = Math.abs(g2 - A2), y2 = Math.abs(g2 - x2), v2 = m2 <= b2 && m2 <= y2 ? d2 : b2 <= y2 ? A2 : x2, w2[h2++] = (u2 + v2) % 256;
            break;
          default:
            throw new Error("Invalid filter algorithm: " + t4[i3 - 1]);
        }
        if (!j2) {
          var O2 = ((o4 + N2 * c2) * a3.width + r2) * e3, B2 = N2 * L2;
          for (f2 = 0; f2 < F2; f2 += 1) {
            for (var M2 = 0; M2 < e3; M2 += 1)
              n2[O2++] = w2[B2++];
            O2 += (s2 - 1) * e3;
          }
        }
        N2++;
      }
    }
    return t4 = unzlibSync(t4), 1 == a3.interlaceMethod ? (o3(0, 0, 8, 8), o3(4, 0, 8, 8), o3(0, 4, 4, 8), o3(2, 0, 4, 4), o3(0, 2, 2, 4), o3(1, 0, 2, 2), o3(0, 1, 1, 2)) : o3(0, 0, 1, 1), n2;
  }, a2.prototype.decodePalette = function() {
    var t4, e3, r2, n2, i3, a3, o3, s2, c2;
    for (r2 = this.palette, a3 = this.transparency.indexed || [], i3 = new Uint8Array((a3.length || 0) + r2.length), n2 = 0, t4 = 0, e3 = o3 = 0, s2 = r2.length; o3 < s2; e3 = o3 += 3)
      i3[n2++] = r2[e3], i3[n2++] = r2[e3 + 1], i3[n2++] = r2[e3 + 2], i3[n2++] = null != (c2 = a3[t4++]) ? c2 : 255;
    return i3;
  }, a2.prototype.copyToImageData = function(t4, e3) {
    var r2, n2, i3, a3, o3, s2, c2, u2, h2, l2, f2;
    if (n2 = this.colors, h2 = null, r2 = this.hasAlphaChannel, this.palette.length && (h2 = null != (f2 = this._decodedPalette) ? f2 : this._decodedPalette = this.decodePalette(), n2 = 4, r2 = true), u2 = (i3 = t4.data || t4).length, o3 = h2 || e3, a3 = s2 = 0, 1 === n2)
      for (; a3 < u2; )
        c2 = h2 ? 4 * e3[a3 / 4] : s2, l2 = o3[c2++], i3[a3++] = l2, i3[a3++] = l2, i3[a3++] = l2, i3[a3++] = r2 ? o3[c2++] : 255, s2 = c2;
    else
      for (; a3 < u2; )
        c2 = h2 ? 4 * e3[a3 / 4] : s2, i3[a3++] = o3[c2++], i3[a3++] = o3[c2++], i3[a3++] = o3[c2++], i3[a3++] = r2 ? o3[c2++] : 255, s2 = c2;
  }, a2.prototype.decode = function() {
    var t4;
    return t4 = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t4, this.decodePixels()), t4;
  };
  var o2 = function() {
    if ("[object Window]" === Object.prototype.toString.call(n$1)) {
      try {
        e2 = n$1.document.createElement("canvas"), i2 = e2.getContext("2d");
      } catch (t4) {
        return false;
      }
      return true;
    }
    return false;
  };
  return o2(), t3 = function(t4) {
    var r2;
    if (true === o2())
      return i2.width = t4.width, i2.height = t4.height, i2.clearRect(0, 0, t4.width, t4.height), i2.putImageData(t4, 0, 0), (r2 = new Image()).src = e2.toDataURL(), r2;
    throw new Error("This method requires a Browser with Canvas-capability.");
  }, a2.prototype.decodeFrames = function(e3) {
    var r2, n2, i3, a3, o3, s2, c2, u2;
    if (this.animation) {
      for (u2 = [], n2 = o3 = 0, s2 = (c2 = this.animation.frames).length; o3 < s2; n2 = ++o3)
        r2 = c2[n2], i3 = e3.createImageData(r2.width, r2.height), a3 = this.decodePixels(new Uint8Array(r2.data)), this.copyToImageData(i3, a3), r2.imageData = i3, u2.push(r2.image = t3(i3));
      return u2;
    }
  }, a2.prototype.renderFrame = function(t4, e3) {
    var r2, n2, i3;
    return r2 = (n2 = this.animation.frames)[e3], i3 = n2[e3 - 1], 0 === e3 && t4.clearRect(0, 0, this.width, this.height), 1 === (null != i3 ? i3.disposeOp : void 0) ? t4.clearRect(i3.xOffset, i3.yOffset, i3.width, i3.height) : 2 === (null != i3 ? i3.disposeOp : void 0) && t4.putImageData(i3.imageData, i3.xOffset, i3.yOffset), 0 === r2.blendOp && t4.clearRect(r2.xOffset, r2.yOffset, r2.width, r2.height), t4.drawImage(r2.image, r2.xOffset, r2.yOffset);
  }, a2.prototype.animate = function(t4) {
    var e3, r2, n2, i3, a3, o3, s2 = this;
    return r2 = 0, o3 = this.animation, i3 = o3.numFrames, n2 = o3.frames, a3 = o3.numPlays, (e3 = function() {
      var o4, c2;
      if (o4 = r2++ % i3, c2 = n2[o4], s2.renderFrame(t4, o4), i3 > 1 && r2 / i3 < a3)
        return s2.animation._timeout = setTimeout(e3, c2.delay);
    })();
  }, a2.prototype.stopAnimation = function() {
    var t4;
    return clearTimeout(null != (t4 = this.animation) ? t4._timeout : void 0);
  }, a2.prototype.render = function(t4) {
    var e3, r2;
    return t4._png && t4._png.stopAnimation(), t4._png = this, t4.width = this.width, t4.height = this.height, e3 = t4.getContext("2d"), this.animation ? (this.decodeFrames(e3), this.animate(e3)) : (r2 = e3.createImageData(this.width, this.height), this.copyToImageData(r2, this.decodePixels()), e3.putImageData(r2, 0, 0));
  }, a2;
}();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
/**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */
function Zt(t3) {
  var e2 = 0;
  if (71 !== t3[e2++] || 73 !== t3[e2++] || 70 !== t3[e2++] || 56 !== t3[e2++] || 56 != (t3[e2++] + 1 & 253) || 97 !== t3[e2++])
    throw new Error("Invalid GIF 87a/89a header.");
  var r2 = t3[e2++] | t3[e2++] << 8, n2 = t3[e2++] | t3[e2++] << 8, i2 = t3[e2++], a2 = i2 >> 7, o2 = 1 << (7 & i2) + 1;
  t3[e2++];
  t3[e2++];
  var s2 = null, c2 = null;
  a2 && (s2 = e2, c2 = o2, e2 += 3 * o2);
  var u2 = true, h2 = [], l2 = 0, f2 = null, d2 = 0, p2 = null;
  for (this.width = r2, this.height = n2; u2 && e2 < t3.length; )
    switch (t3[e2++]) {
      case 33:
        switch (t3[e2++]) {
          case 255:
            if (11 !== t3[e2] || 78 == t3[e2 + 1] && 69 == t3[e2 + 2] && 84 == t3[e2 + 3] && 83 == t3[e2 + 4] && 67 == t3[e2 + 5] && 65 == t3[e2 + 6] && 80 == t3[e2 + 7] && 69 == t3[e2 + 8] && 50 == t3[e2 + 9] && 46 == t3[e2 + 10] && 48 == t3[e2 + 11] && 3 == t3[e2 + 12] && 1 == t3[e2 + 13] && 0 == t3[e2 + 16])
              e2 += 14, p2 = t3[e2++] | t3[e2++] << 8, e2++;
            else
              for (e2 += 12; ; ) {
                if (!((P2 = t3[e2++]) >= 0))
                  throw Error("Invalid block size");
                if (0 === P2)
                  break;
                e2 += P2;
              }
            break;
          case 249:
            if (4 !== t3[e2++] || 0 !== t3[e2 + 4])
              throw new Error("Invalid graphics extension block.");
            var g2 = t3[e2++];
            l2 = t3[e2++] | t3[e2++] << 8, f2 = t3[e2++], 0 == (1 & g2) && (f2 = null), d2 = g2 >> 2 & 7, e2++;
            break;
          case 254:
            for (; ; ) {
              if (!((P2 = t3[e2++]) >= 0))
                throw Error("Invalid block size");
              if (0 === P2)
                break;
              e2 += P2;
            }
            break;
          default:
            throw new Error("Unknown graphic control label: 0x" + t3[e2 - 1].toString(16));
        }
        break;
      case 44:
        var m2 = t3[e2++] | t3[e2++] << 8, v2 = t3[e2++] | t3[e2++] << 8, b2 = t3[e2++] | t3[e2++] << 8, y2 = t3[e2++] | t3[e2++] << 8, w2 = t3[e2++], N2 = w2 >> 6 & 1, L2 = 1 << (7 & w2) + 1, A2 = s2, x2 = c2, S2 = false;
        if (w2 >> 7) {
          S2 = true;
          A2 = e2, x2 = L2, e2 += 3 * L2;
        }
        var _2 = e2;
        for (e2++; ; ) {
          var P2;
          if (!((P2 = t3[e2++]) >= 0))
            throw Error("Invalid block size");
          if (0 === P2)
            break;
          e2 += P2;
        }
        h2.push({ x: m2, y: v2, width: b2, height: y2, has_local_palette: S2, palette_offset: A2, palette_size: x2, data_offset: _2, data_length: e2 - _2, transparent_index: f2, interlaced: !!N2, delay: l2, disposal: d2 });
        break;
      case 59:
        u2 = false;
        break;
      default:
        throw new Error("Unknown gif block: 0x" + t3[e2 - 1].toString(16));
    }
  this.numFrames = function() {
    return h2.length;
  }, this.loopCount = function() {
    return p2;
  }, this.frameInfo = function(t4) {
    if (t4 < 0 || t4 >= h2.length)
      throw new Error("Frame index out of range.");
    return h2[t4];
  }, this.decodeAndBlitFrameBGRA = function(e3, n3) {
    var i3 = this.frameInfo(e3), a3 = i3.width * i3.height, o3 = new Uint8Array(a3);
    $t(t3, i3.data_offset, o3, a3);
    var s3 = i3.palette_offset, c3 = i3.transparent_index;
    null === c3 && (c3 = 256);
    var u3 = i3.width, h3 = r2 - u3, l3 = u3, f3 = 4 * (i3.y * r2 + i3.x), d4 = 4 * ((i3.y + i3.height) * r2 + i3.x), p3 = f3, g3 = 4 * h3;
    true === i3.interlaced && (g3 += 4 * r2 * 7);
    for (var m3 = 8, v3 = 0, b3 = o3.length; v3 < b3; ++v3) {
      var y3 = o3[v3];
      if (0 === l3 && (l3 = u3, (p3 += g3) >= d4 && (g3 = 4 * h3 + 4 * r2 * (m3 - 1), p3 = f3 + (u3 + h3) * (m3 << 1), m3 >>= 1)), y3 === c3)
        p3 += 4;
      else {
        var w3 = t3[s3 + 3 * y3], N3 = t3[s3 + 3 * y3 + 1], L3 = t3[s3 + 3 * y3 + 2];
        n3[p3++] = L3, n3[p3++] = N3, n3[p3++] = w3, n3[p3++] = 255;
      }
      --l3;
    }
  }, this.decodeAndBlitFrameRGBA = function(e3, n3) {
    var i3 = this.frameInfo(e3), a3 = i3.width * i3.height, o3 = new Uint8Array(a3);
    $t(t3, i3.data_offset, o3, a3);
    var s3 = i3.palette_offset, c3 = i3.transparent_index;
    null === c3 && (c3 = 256);
    var u3 = i3.width, h3 = r2 - u3, l3 = u3, f3 = 4 * (i3.y * r2 + i3.x), d4 = 4 * ((i3.y + i3.height) * r2 + i3.x), p3 = f3, g3 = 4 * h3;
    true === i3.interlaced && (g3 += 4 * r2 * 7);
    for (var m3 = 8, v3 = 0, b3 = o3.length; v3 < b3; ++v3) {
      var y3 = o3[v3];
      if (0 === l3 && (l3 = u3, (p3 += g3) >= d4 && (g3 = 4 * h3 + 4 * r2 * (m3 - 1), p3 = f3 + (u3 + h3) * (m3 << 1), m3 >>= 1)), y3 === c3)
        p3 += 4;
      else {
        var w3 = t3[s3 + 3 * y3], N3 = t3[s3 + 3 * y3 + 1], L3 = t3[s3 + 3 * y3 + 2];
        n3[p3++] = w3, n3[p3++] = N3, n3[p3++] = L3, n3[p3++] = 255;
      }
      --l3;
    }
  };
}
function $t(t3, e2, r2, n2) {
  for (var i2 = t3[e2++], o2 = 1 << i2, s2 = o2 + 1, c2 = s2 + 1, u2 = i2 + 1, h2 = (1 << u2) - 1, l2 = 0, f2 = 0, d2 = 0, p2 = t3[e2++], g2 = new Int32Array(4096), m2 = null; ; ) {
    for (; l2 < 16 && 0 !== p2; )
      f2 |= t3[e2++] << l2, l2 += 8, 1 === p2 ? p2 = t3[e2++] : --p2;
    if (l2 < u2)
      break;
    var v2 = f2 & h2;
    if (f2 >>= u2, l2 -= u2, v2 !== o2) {
      if (v2 === s2)
        break;
      for (var b2 = v2 < c2 ? v2 : m2, y2 = 0, w2 = b2; w2 > o2; )
        w2 = g2[w2] >> 8, ++y2;
      var N2 = w2;
      if (d2 + y2 + (b2 !== v2 ? 1 : 0) > n2)
        return void a$1.log("Warning, gif stream longer than expected.");
      r2[d2++] = N2;
      var L2 = d2 += y2;
      for (b2 !== v2 && (r2[d2++] = N2), w2 = b2; y2--; )
        w2 = g2[w2], r2[--L2] = 255 & w2, w2 >>= 8;
      null !== m2 && c2 < 4096 && (g2[c2++] = m2 << 8 | N2, c2 >= h2 + 1 && u2 < 12 && (++u2, h2 = h2 << 1 | 1)), m2 = v2;
    } else
      c2 = s2 + 1, h2 = (1 << (u2 = i2 + 1)) - 1, m2 = null;
  }
  return d2 !== n2 && a$1.log("Warning, gif stream shorter than expected."), r2;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
function Qt(t3) {
  var e2, r2, n2, i2, a2, o2 = Math.floor, s2 = new Array(64), c2 = new Array(64), u2 = new Array(64), h2 = new Array(64), l2 = new Array(65535), f2 = new Array(65535), d2 = new Array(64), p2 = new Array(64), g2 = [], m2 = 0, v2 = 7, b2 = new Array(64), y2 = new Array(64), w2 = new Array(64), N2 = new Array(256), L2 = new Array(2048), A2 = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], x2 = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], S2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], _2 = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], P2 = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], k2 = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], I2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], F2 = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], C2 = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
  function j2(t4, e3) {
    for (var r3 = 0, n3 = 0, i3 = new Array(), a3 = 1; a3 <= 16; a3++) {
      for (var o3 = 1; o3 <= t4[a3]; o3++)
        i3[e3[n3]] = [], i3[e3[n3]][0] = r3, i3[e3[n3]][1] = a3, n3++, r3++;
      r3 *= 2;
    }
    return i3;
  }
  function O2(t4) {
    for (var e3 = t4[0], r3 = t4[1] - 1; r3 >= 0; )
      e3 & 1 << r3 && (m2 |= 1 << v2), r3--, --v2 < 0 && (255 == m2 ? (B2(255), B2(0)) : B2(m2), v2 = 7, m2 = 0);
  }
  function B2(t4) {
    g2.push(t4);
  }
  function M2(t4) {
    B2(t4 >> 8 & 255), B2(255 & t4);
  }
  function E2(t4, e3, r3, n3, i3) {
    for (var a3, o3 = i3[0], s3 = i3[240], c3 = function(t5, e4) {
      var r4, n4, i4, a4, o4, s4, c4, u4, h4, l3, f3 = 0;
      for (h4 = 0; h4 < 8; ++h4) {
        r4 = t5[f3], n4 = t5[f3 + 1], i4 = t5[f3 + 2], a4 = t5[f3 + 3], o4 = t5[f3 + 4], s4 = t5[f3 + 5], c4 = t5[f3 + 6];
        var p3 = r4 + (u4 = t5[f3 + 7]), g4 = r4 - u4, m4 = n4 + c4, v5 = n4 - c4, b4 = i4 + s4, y4 = i4 - s4, w4 = a4 + o4, N3 = a4 - o4, L3 = p3 + w4, A3 = p3 - w4, x3 = m4 + b4, S3 = m4 - b4;
        t5[f3] = L3 + x3, t5[f3 + 4] = L3 - x3;
        var _3 = 0.707106781 * (S3 + A3);
        t5[f3 + 2] = A3 + _3, t5[f3 + 6] = A3 - _3;
        var P3 = 0.382683433 * ((L3 = N3 + y4) - (S3 = v5 + g4)), k3 = 0.5411961 * L3 + P3, I3 = 1.306562965 * S3 + P3, F3 = 0.707106781 * (x3 = y4 + v5), C3 = g4 + F3, j3 = g4 - F3;
        t5[f3 + 5] = j3 + k3, t5[f3 + 3] = j3 - k3, t5[f3 + 1] = C3 + I3, t5[f3 + 7] = C3 - I3, f3 += 8;
      }
      for (f3 = 0, h4 = 0; h4 < 8; ++h4) {
        r4 = t5[f3], n4 = t5[f3 + 8], i4 = t5[f3 + 16], a4 = t5[f3 + 24], o4 = t5[f3 + 32], s4 = t5[f3 + 40], c4 = t5[f3 + 48];
        var O3 = r4 + (u4 = t5[f3 + 56]), B3 = r4 - u4, M3 = n4 + c4, E3 = n4 - c4, q3 = i4 + s4, D2 = i4 - s4, R2 = a4 + o4, T2 = a4 - o4, U2 = O3 + R2, z2 = O3 - R2, H2 = M3 + q3, W2 = M3 - q3;
        t5[f3] = U2 + H2, t5[f3 + 32] = U2 - H2;
        var V2 = 0.707106781 * (W2 + z2);
        t5[f3 + 16] = z2 + V2, t5[f3 + 48] = z2 - V2;
        var G2 = 0.382683433 * ((U2 = T2 + D2) - (W2 = E3 + B3)), Y2 = 0.5411961 * U2 + G2, J2 = 1.306562965 * W2 + G2, X2 = 0.707106781 * (H2 = D2 + E3), K2 = B3 + X2, Z2 = B3 - X2;
        t5[f3 + 40] = Z2 + Y2, t5[f3 + 24] = Z2 - Y2, t5[f3 + 8] = K2 + J2, t5[f3 + 56] = K2 - J2, f3++;
      }
      for (h4 = 0; h4 < 64; ++h4)
        l3 = t5[h4] * e4[h4], d2[h4] = l3 > 0 ? l3 + 0.5 | 0 : l3 - 0.5 | 0;
      return d2;
    }(t4, e3), u3 = 0; u3 < 64; ++u3)
      p2[A2[u3]] = c3[u3];
    var h3 = p2[0] - r3;
    r3 = p2[0], 0 == h3 ? O2(n3[0]) : (O2(n3[f2[a3 = 32767 + h3]]), O2(l2[a3]));
    for (var g3 = 63; g3 > 0 && 0 == p2[g3]; )
      g3--;
    if (0 == g3)
      return O2(o3), r3;
    for (var m3, v3 = 1; v3 <= g3; ) {
      for (var b3 = v3; 0 == p2[v3] && v3 <= g3; )
        ++v3;
      var y3 = v3 - b3;
      if (y3 >= 16) {
        m3 = y3 >> 4;
        for (var w3 = 1; w3 <= m3; ++w3)
          O2(s3);
        y3 &= 15;
      }
      a3 = 32767 + p2[v3], O2(i3[(y3 << 4) + f2[a3]]), O2(l2[a3]), v3++;
    }
    return 63 != g3 && O2(o3), r3;
  }
  function q2(t4) {
    (t4 = Math.min(Math.max(t4, 1), 100), a2 != t4) && (!function(t5) {
      for (var e3 = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], r3 = 0; r3 < 64; r3++) {
        var n3 = o2((e3[r3] * t5 + 50) / 100);
        n3 = Math.min(Math.max(n3, 1), 255), s2[A2[r3]] = n3;
      }
      for (var i3 = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], a3 = 0; a3 < 64; a3++) {
        var l3 = o2((i3[a3] * t5 + 50) / 100);
        l3 = Math.min(Math.max(l3, 1), 255), c2[A2[a3]] = l3;
      }
      for (var f3 = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], d4 = 0, p3 = 0; p3 < 8; p3++)
        for (var g3 = 0; g3 < 8; g3++)
          u2[d4] = 1 / (s2[A2[d4]] * f3[p3] * f3[g3] * 8), h2[d4] = 1 / (c2[A2[d4]] * f3[p3] * f3[g3] * 8), d4++;
    }(t4 < 50 ? Math.floor(5e3 / t4) : Math.floor(200 - 2 * t4)), a2 = t4);
  }
  this.encode = function(t4, a3) {
    a3 && q2(a3), g2 = new Array(), m2 = 0, v2 = 7, M2(65496), M2(65504), M2(16), B2(74), B2(70), B2(73), B2(70), B2(0), B2(1), B2(1), B2(0), M2(1), M2(1), B2(0), B2(0), function() {
      M2(65499), M2(132), B2(0);
      for (var t5 = 0; t5 < 64; t5++)
        B2(s2[t5]);
      B2(1);
      for (var e3 = 0; e3 < 64; e3++)
        B2(c2[e3]);
    }(), function(t5, e3) {
      M2(65472), M2(17), B2(8), M2(e3), M2(t5), B2(3), B2(1), B2(17), B2(0), B2(2), B2(17), B2(1), B2(3), B2(17), B2(1);
    }(t4.width, t4.height), function() {
      M2(65476), M2(418), B2(0);
      for (var t5 = 0; t5 < 16; t5++)
        B2(x2[t5 + 1]);
      for (var e3 = 0; e3 <= 11; e3++)
        B2(S2[e3]);
      B2(16);
      for (var r3 = 0; r3 < 16; r3++)
        B2(_2[r3 + 1]);
      for (var n3 = 0; n3 <= 161; n3++)
        B2(P2[n3]);
      B2(1);
      for (var i3 = 0; i3 < 16; i3++)
        B2(k2[i3 + 1]);
      for (var a4 = 0; a4 <= 11; a4++)
        B2(I2[a4]);
      B2(17);
      for (var o4 = 0; o4 < 16; o4++)
        B2(F2[o4 + 1]);
      for (var s3 = 0; s3 <= 161; s3++)
        B2(C2[s3]);
    }(), M2(65498), M2(12), B2(3), B2(1), B2(0), B2(2), B2(17), B2(3), B2(17), B2(0), B2(63), B2(0);
    var o3 = 0, l3 = 0, f3 = 0;
    m2 = 0, v2 = 7, this.encode.displayName = "_encode_";
    for (var d4, p3, N3, A3, j3, D2, R2, T2, U2, z2 = t4.data, H2 = t4.width, W2 = t4.height, V2 = 4 * H2, G2 = 0; G2 < W2; ) {
      for (d4 = 0; d4 < V2; ) {
        for (j3 = V2 * G2 + d4, R2 = -1, T2 = 0, U2 = 0; U2 < 64; U2++)
          D2 = j3 + (T2 = U2 >> 3) * V2 + (R2 = 4 * (7 & U2)), G2 + T2 >= W2 && (D2 -= V2 * (G2 + 1 + T2 - W2)), d4 + R2 >= V2 && (D2 -= d4 + R2 - V2 + 4), p3 = z2[D2++], N3 = z2[D2++], A3 = z2[D2++], b2[U2] = (L2[p3] + L2[N3 + 256 >> 0] + L2[A3 + 512 >> 0] >> 16) - 128, y2[U2] = (L2[p3 + 768 >> 0] + L2[N3 + 1024 >> 0] + L2[A3 + 1280 >> 0] >> 16) - 128, w2[U2] = (L2[p3 + 1280 >> 0] + L2[N3 + 1536 >> 0] + L2[A3 + 1792 >> 0] >> 16) - 128;
        o3 = E2(b2, u2, o3, e2, n2), l3 = E2(y2, h2, l3, r2, i2), f3 = E2(w2, h2, f3, r2, i2), d4 += 32;
      }
      G2 += 8;
    }
    if (v2 >= 0) {
      var Y2 = [];
      Y2[1] = v2 + 1, Y2[0] = (1 << v2 + 1) - 1, O2(Y2);
    }
    return M2(65497), new Uint8Array(g2);
  }, t3 = t3 || 50, function() {
    for (var t4 = String.fromCharCode, e3 = 0; e3 < 256; e3++)
      N2[e3] = t4(e3);
  }(), e2 = j2(x2, S2), r2 = j2(k2, I2), n2 = j2(_2, P2), i2 = j2(F2, C2), function() {
    for (var t4 = 1, e3 = 2, r3 = 1; r3 <= 15; r3++) {
      for (var n3 = t4; n3 < e3; n3++)
        f2[32767 + n3] = r3, l2[32767 + n3] = [], l2[32767 + n3][1] = r3, l2[32767 + n3][0] = n3;
      for (var i3 = -(e3 - 1); i3 <= -t4; i3++)
        f2[32767 + i3] = r3, l2[32767 + i3] = [], l2[32767 + i3][1] = r3, l2[32767 + i3][0] = e3 - 1 + i3;
      t4 <<= 1, e3 <<= 1;
    }
  }(), function() {
    for (var t4 = 0; t4 < 256; t4++)
      L2[t4] = 19595 * t4, L2[t4 + 256 >> 0] = 38470 * t4, L2[t4 + 512 >> 0] = 7471 * t4 + 32768, L2[t4 + 768 >> 0] = -11059 * t4, L2[t4 + 1024 >> 0] = -21709 * t4, L2[t4 + 1280 >> 0] = 32768 * t4 + 8421375, L2[t4 + 1536 >> 0] = -27439 * t4, L2[t4 + 1792 >> 0] = -5329 * t4;
  }(), q2(t3);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function te(t3, e2) {
  if (this.pos = 0, this.buffer = t3, this.datav = new DataView(t3.buffer), this.is_with_alpha = !!e2, this.bottom_up = true, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag))
    throw new Error("Invalid BMP File");
  this.parseHeader(), this.parseBGR();
}
function ee(t3) {
  function e2(t4) {
    if (!t4)
      throw Error("assert :P");
  }
  function r2(t4, e3, r3) {
    for (var n3 = 0; 4 > n3; n3++)
      if (t4[e3 + n3] != r3.charCodeAt(n3))
        return true;
    return false;
  }
  function n2(t4, e3, r3, n3, i3) {
    for (var a3 = 0; a3 < i3; a3++)
      t4[e3 + a3] = r3[n3 + a3];
  }
  function i2(t4, e3, r3, n3) {
    for (var i3 = 0; i3 < n3; i3++)
      t4[e3 + i3] = r3;
  }
  function a2(t4) {
    return new Int32Array(t4);
  }
  function o2(t4, e3) {
    for (var r3 = [], n3 = 0; n3 < t4; n3++)
      r3.push(new e3());
    return r3;
  }
  function s2(t4, e3) {
    var r3 = [];
    return function t5(r4, n3, i3) {
      for (var a3 = i3[n3], o3 = 0; o3 < a3 && (r4.push(i3.length > n3 + 1 ? [] : new e3()), !(i3.length < n3 + 1)); o3++)
        t5(r4[o3], n3 + 1, i3);
    }(r3, 0, t4), r3;
  }
  var c2 = function() {
    var t4 = this;
    function c3(t5, e3) {
      for (var r3 = 1 << e3 - 1 >>> 0; t5 & r3; )
        r3 >>>= 1;
      return r3 ? (t5 & r3 - 1) + r3 : t5;
    }
    function u3(t5, r3, n3, i3, a3) {
      e2(!(i3 % n3));
      do {
        t5[r3 + (i3 -= n3)] = a3;
      } while (0 < i3);
    }
    function h3(t5, r3, n3, i3, o3) {
      if (e2(2328 >= o3), 512 >= o3)
        var s3 = a2(512);
      else if (null == (s3 = a2(o3)))
        return 0;
      return function(t6, r4, n4, i4, o4, s4) {
        var h4, f4, d5 = r4, p4 = 1 << n4, g4 = a2(16), m4 = a2(16);
        for (e2(0 != o4), e2(null != i4), e2(null != t6), e2(0 < n4), f4 = 0; f4 < o4; ++f4) {
          if (15 < i4[f4])
            return 0;
          ++g4[i4[f4]];
        }
        if (g4[0] == o4)
          return 0;
        for (m4[1] = 0, h4 = 1; 15 > h4; ++h4) {
          if (g4[h4] > 1 << h4)
            return 0;
          m4[h4 + 1] = m4[h4] + g4[h4];
        }
        for (f4 = 0; f4 < o4; ++f4)
          h4 = i4[f4], 0 < i4[f4] && (s4[m4[h4]++] = f4);
        if (1 == m4[15])
          return (i4 = new l3()).g = 0, i4.value = s4[0], u3(t6, d5, 1, p4, i4), p4;
        var v5, b4 = -1, y4 = p4 - 1, w4 = 0, N4 = 1, L4 = 1, A4 = 1 << n4;
        for (f4 = 0, h4 = 1, o4 = 2; h4 <= n4; ++h4, o4 <<= 1) {
          if (N4 += L4 <<= 1, 0 > (L4 -= g4[h4]))
            return 0;
          for (; 0 < g4[h4]; --g4[h4])
            (i4 = new l3()).g = h4, i4.value = s4[f4++], u3(t6, d5 + w4, o4, A4, i4), w4 = c3(w4, h4);
        }
        for (h4 = n4 + 1, o4 = 2; 15 >= h4; ++h4, o4 <<= 1) {
          if (N4 += L4 <<= 1, 0 > (L4 -= g4[h4]))
            return 0;
          for (; 0 < g4[h4]; --g4[h4]) {
            if (i4 = new l3(), (w4 & y4) != b4) {
              for (d5 += A4, v5 = 1 << (b4 = h4) - n4; 15 > b4 && !(0 >= (v5 -= g4[b4])); )
                ++b4, v5 <<= 1;
              p4 += A4 = 1 << (v5 = b4 - n4), t6[r4 + (b4 = w4 & y4)].g = v5 + n4, t6[r4 + b4].value = d5 - r4 - b4;
            }
            i4.g = h4 - n4, i4.value = s4[f4++], u3(t6, d5 + (w4 >> n4), o4, A4, i4), w4 = c3(w4, h4);
          }
        }
        return N4 != 2 * m4[15] - 1 ? 0 : p4;
      }(t5, r3, n3, i3, o3, s3);
    }
    function l3() {
      this.value = this.g = 0;
    }
    function f3() {
      this.value = this.g = 0;
    }
    function d4() {
      this.G = o2(5, l3), this.H = a2(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o2(Dr, f3);
    }
    function p3(t5, r3, n3, i3) {
      e2(null != t5), e2(null != r3), e2(2147483648 > i3), t5.Ca = 254, t5.I = 0, t5.b = -8, t5.Ka = 0, t5.oa = r3, t5.pa = n3, t5.Jd = r3, t5.Yc = n3 + i3, t5.Zc = 4 <= i3 ? n3 + i3 - 4 + 1 : n3, _2(t5);
    }
    function g3(t5, e3) {
      for (var r3 = 0; 0 < e3--; )
        r3 |= k2(t5, 128) << e3;
      return r3;
    }
    function m3(t5, e3) {
      var r3 = g3(t5, e3);
      return P2(t5) ? -r3 : r3;
    }
    function v3(t5, r3, n3, i3) {
      var a3, o3 = 0;
      for (e2(null != t5), e2(null != r3), e2(4294967288 > i3), t5.Sb = i3, t5.Ra = 0, t5.u = 0, t5.h = 0, 4 < i3 && (i3 = 4), a3 = 0; a3 < i3; ++a3)
        o3 += r3[n3 + a3] << 8 * a3;
      t5.Ra = o3, t5.bb = i3, t5.oa = r3, t5.pa = n3;
    }
    function b3(t5) {
      for (; 8 <= t5.u && t5.bb < t5.Sb; )
        t5.Ra >>>= 8, t5.Ra += t5.oa[t5.pa + t5.bb] << Ur - 8 >>> 0, ++t5.bb, t5.u -= 8;
      A3(t5) && (t5.h = 1, t5.u = 0);
    }
    function y3(t5, r3) {
      if (e2(0 <= r3), !t5.h && r3 <= Tr) {
        var n3 = L3(t5) & Rr[r3];
        return t5.u += r3, b3(t5), n3;
      }
      return t5.h = 1, t5.u = 0;
    }
    function w3() {
      this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
    }
    function N3() {
      this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
    }
    function L3(t5) {
      return t5.Ra >>> (t5.u & Ur - 1) >>> 0;
    }
    function A3(t5) {
      return e2(t5.bb <= t5.Sb), t5.h || t5.bb == t5.Sb && t5.u > Ur;
    }
    function x2(t5, e3) {
      t5.u = e3, t5.h = A3(t5);
    }
    function S2(t5) {
      t5.u >= zr && (e2(t5.u >= zr), b3(t5));
    }
    function _2(t5) {
      e2(null != t5 && null != t5.oa), t5.pa < t5.Zc ? (t5.I = (t5.oa[t5.pa++] | t5.I << 8) >>> 0, t5.b += 8) : (e2(null != t5 && null != t5.oa), t5.pa < t5.Yc ? (t5.b += 8, t5.I = t5.oa[t5.pa++] | t5.I << 8) : t5.Ka ? t5.b = 0 : (t5.I <<= 8, t5.b += 8, t5.Ka = 1));
    }
    function P2(t5) {
      return g3(t5, 1);
    }
    function k2(t5, e3) {
      var r3 = t5.Ca;
      0 > t5.b && _2(t5);
      var n3 = t5.b, i3 = r3 * e3 >>> 8, a3 = (t5.I >>> n3 > i3) + 0;
      for (a3 ? (r3 -= i3, t5.I -= i3 + 1 << n3 >>> 0) : r3 = i3 + 1, n3 = r3, i3 = 0; 256 <= n3; )
        i3 += 8, n3 >>= 8;
      return n3 = 7 ^ i3 + Hr[n3], t5.b -= n3, t5.Ca = (r3 << n3) - 1, a3;
    }
    function I2(t5, e3, r3) {
      t5[e3 + 0] = r3 >> 24 & 255, t5[e3 + 1] = r3 >> 16 & 255, t5[e3 + 2] = r3 >> 8 & 255, t5[e3 + 3] = r3 >> 0 & 255;
    }
    function F2(t5, e3) {
      return t5[e3 + 0] << 0 | t5[e3 + 1] << 8;
    }
    function C2(t5, e3) {
      return F2(t5, e3) | t5[e3 + 2] << 16;
    }
    function j2(t5, e3) {
      return F2(t5, e3) | F2(t5, e3 + 2) << 16;
    }
    function O2(t5, r3) {
      var n3 = 1 << r3;
      return e2(null != t5), e2(0 < r3), t5.X = a2(n3), null == t5.X ? 0 : (t5.Mb = 32 - r3, t5.Xa = r3, 1);
    }
    function B2(t5, r3) {
      e2(null != t5), e2(null != r3), e2(t5.Xa == r3.Xa), n2(r3.X, 0, t5.X, 0, 1 << r3.Xa);
    }
    function M2() {
      this.X = [], this.Xa = this.Mb = 0;
    }
    function E2(t5, r3, n3, i3) {
      e2(null != n3), e2(null != i3);
      var a3 = n3[0], o3 = i3[0];
      return 0 == a3 && (a3 = (t5 * o3 + r3 / 2) / r3), 0 == o3 && (o3 = (r3 * a3 + t5 / 2) / t5), 0 >= a3 || 0 >= o3 ? 0 : (n3[0] = a3, i3[0] = o3, 1);
    }
    function q2(t5, e3) {
      return t5 + (1 << e3) - 1 >>> e3;
    }
    function D2(t5, e3) {
      return ((4278255360 & t5) + (4278255360 & e3) >>> 0 & 4278255360) + ((16711935 & t5) + (16711935 & e3) >>> 0 & 16711935) >>> 0;
    }
    function R2(e3, r3) {
      t4[r3] = function(r4, n3, i3, a3, o3, s3, c4) {
        var u4;
        for (u4 = 0; u4 < o3; ++u4) {
          var h4 = t4[e3](s3[c4 + u4 - 1], i3, a3 + u4);
          s3[c4 + u4] = D2(r4[n3 + u4], h4);
        }
      };
    }
    function T2() {
      this.ud = this.hd = this.jd = 0;
    }
    function U2(t5, e3) {
      return ((4278124286 & (t5 ^ e3)) >>> 1) + (t5 & e3) >>> 0;
    }
    function z2(t5) {
      return 0 <= t5 && 256 > t5 ? t5 : 0 > t5 ? 0 : 255 < t5 ? 255 : void 0;
    }
    function H2(t5, e3) {
      return z2(t5 + (t5 - e3 + 0.5 >> 1));
    }
    function W2(t5, e3, r3) {
      return Math.abs(e3 - r3) - Math.abs(t5 - r3);
    }
    function V2(t5, e3, r3, n3, i3, a3, o3) {
      for (n3 = a3[o3 - 1], r3 = 0; r3 < i3; ++r3)
        a3[o3 + r3] = n3 = D2(t5[e3 + r3], n3);
    }
    function G2(t5, e3, r3, n3, i3) {
      var a3;
      for (a3 = 0; a3 < r3; ++a3) {
        var o3 = t5[e3 + a3], s3 = o3 >> 8 & 255, c4 = 16711935 & (c4 = (c4 = 16711935 & o3) + ((s3 << 16) + s3));
        n3[i3 + a3] = (4278255360 & o3) + c4 >>> 0;
      }
    }
    function Y2(t5, e3) {
      e3.jd = t5 >> 0 & 255, e3.hd = t5 >> 8 & 255, e3.ud = t5 >> 16 & 255;
    }
    function J2(t5, e3, r3, n3, i3, a3) {
      var o3;
      for (o3 = 0; o3 < n3; ++o3) {
        var s3 = e3[r3 + o3], c4 = s3 >>> 8, u4 = s3, h4 = 255 & (h4 = (h4 = s3 >>> 16) + ((t5.jd << 24 >> 24) * (c4 << 24 >> 24) >>> 5));
        u4 = 255 & (u4 = (u4 = u4 + ((t5.hd << 24 >> 24) * (c4 << 24 >> 24) >>> 5)) + ((t5.ud << 24 >> 24) * (h4 << 24 >> 24) >>> 5));
        i3[a3 + o3] = (4278255360 & s3) + (h4 << 16) + u4;
      }
    }
    function X2(e3, r3, n3, i3, a3) {
      t4[r3] = function(t5, e4, r4, n4, o3, s3, c4, u4, h4) {
        for (n4 = c4; n4 < u4; ++n4)
          for (c4 = 0; c4 < h4; ++c4)
            o3[s3++] = a3(r4[i3(t5[e4++])]);
      }, t4[e3] = function(e4, r4, o3, s3, c4, u4, h4) {
        var l4 = 8 >> e4.b, f4 = e4.Ea, d5 = e4.K[0], p4 = e4.w;
        if (8 > l4)
          for (e4 = (1 << e4.b) - 1, p4 = (1 << l4) - 1; r4 < o3; ++r4) {
            var g4, m4 = 0;
            for (g4 = 0; g4 < f4; ++g4)
              g4 & e4 || (m4 = i3(s3[c4++])), u4[h4++] = a3(d5[m4 & p4]), m4 >>= l4;
          }
        else
          t4["VP8LMapColor" + n3](s3, c4, d5, p4, u4, h4, r4, o3, f4);
      };
    }
    function K2(t5, e3, r3, n3, i3) {
      for (r3 = e3 + r3; e3 < r3; ) {
        var a3 = t5[e3++];
        n3[i3++] = a3 >> 16 & 255, n3[i3++] = a3 >> 8 & 255, n3[i3++] = a3 >> 0 & 255;
      }
    }
    function Z2(t5, e3, r3, n3, i3) {
      for (r3 = e3 + r3; e3 < r3; ) {
        var a3 = t5[e3++];
        n3[i3++] = a3 >> 16 & 255, n3[i3++] = a3 >> 8 & 255, n3[i3++] = a3 >> 0 & 255, n3[i3++] = a3 >> 24 & 255;
      }
    }
    function $3(t5, e3, r3, n3, i3) {
      for (r3 = e3 + r3; e3 < r3; ) {
        var a3 = (o3 = t5[e3++]) >> 16 & 240 | o3 >> 12 & 15, o3 = o3 >> 0 & 240 | o3 >> 28 & 15;
        n3[i3++] = a3, n3[i3++] = o3;
      }
    }
    function Q2(t5, e3, r3, n3, i3) {
      for (r3 = e3 + r3; e3 < r3; ) {
        var a3 = (o3 = t5[e3++]) >> 16 & 248 | o3 >> 13 & 7, o3 = o3 >> 5 & 224 | o3 >> 3 & 31;
        n3[i3++] = a3, n3[i3++] = o3;
      }
    }
    function tt2(t5, e3, r3, n3, i3) {
      for (r3 = e3 + r3; e3 < r3; ) {
        var a3 = t5[e3++];
        n3[i3++] = a3 >> 0 & 255, n3[i3++] = a3 >> 8 & 255, n3[i3++] = a3 >> 16 & 255;
      }
    }
    function et2(t5, e3, r3, i3, a3, o3) {
      if (0 == o3)
        for (r3 = e3 + r3; e3 < r3; )
          I2(i3, ((o3 = t5[e3++])[0] >> 24 | o3[1] >> 8 & 65280 | o3[2] << 8 & 16711680 | o3[3] << 24) >>> 0), a3 += 32;
      else
        n2(i3, a3, t5, e3, r3);
    }
    function rt2(e3, r3) {
      t4[r3][0] = t4[e3 + "0"], t4[r3][1] = t4[e3 + "1"], t4[r3][2] = t4[e3 + "2"], t4[r3][3] = t4[e3 + "3"], t4[r3][4] = t4[e3 + "4"], t4[r3][5] = t4[e3 + "5"], t4[r3][6] = t4[e3 + "6"], t4[r3][7] = t4[e3 + "7"], t4[r3][8] = t4[e3 + "8"], t4[r3][9] = t4[e3 + "9"], t4[r3][10] = t4[e3 + "10"], t4[r3][11] = t4[e3 + "11"], t4[r3][12] = t4[e3 + "12"], t4[r3][13] = t4[e3 + "13"], t4[r3][14] = t4[e3 + "0"], t4[r3][15] = t4[e3 + "0"];
    }
    function nt2(t5) {
      return t5 == Hn || t5 == Wn || t5 == Vn || t5 == Gn;
    }
    function it2() {
      this.eb = [], this.size = this.A = this.fb = 0;
    }
    function at2() {
      this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
    }
    function ot2() {
      this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it2(), this.f.kb = new at2(), this.sd = null;
    }
    function st2() {
      this.width = [0], this.height = [0], this.Pd = [0], this.Qd = [0], this.format = [0];
    }
    function ct2() {
      this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
    }
    function ut2(t5) {
      return alert("todo:WebPSamplerProcessPlane"), t5.T;
    }
    function ht2(t5, e3) {
      var r3 = t5.T, i3 = e3.ba.f.RGBA, a3 = i3.eb, o3 = i3.fb + t5.ka * i3.A, s3 = vi[e3.ba.S], c4 = t5.y, u4 = t5.O, h4 = t5.f, l4 = t5.N, f4 = t5.ea, d5 = t5.W, p4 = e3.cc, g4 = e3.dc, m4 = e3.Mc, v5 = e3.Nc, b4 = t5.ka, y4 = t5.ka + t5.T, w4 = t5.U, N4 = w4 + 1 >> 1;
      for (0 == b4 ? s3(c4, u4, null, null, h4, l4, f4, d5, h4, l4, f4, d5, a3, o3, null, null, w4) : (s3(e3.ec, e3.fc, c4, u4, p4, g4, m4, v5, h4, l4, f4, d5, a3, o3 - i3.A, a3, o3, w4), ++r3); b4 + 2 < y4; b4 += 2)
        p4 = h4, g4 = l4, m4 = f4, v5 = d5, l4 += t5.Rc, d5 += t5.Rc, o3 += 2 * i3.A, s3(c4, (u4 += 2 * t5.fa) - t5.fa, c4, u4, p4, g4, m4, v5, h4, l4, f4, d5, a3, o3 - i3.A, a3, o3, w4);
      return u4 += t5.fa, t5.j + y4 < t5.o ? (n2(e3.ec, e3.fc, c4, u4, w4), n2(e3.cc, e3.dc, h4, l4, N4), n2(e3.Mc, e3.Nc, f4, d5, N4), r3--) : 1 & y4 || s3(c4, u4, null, null, h4, l4, f4, d5, h4, l4, f4, d5, a3, o3 + i3.A, null, null, w4), r3;
    }
    function lt2(t5, r3, n3) {
      var i3 = t5.F, a3 = [t5.J];
      if (null != i3) {
        var o3 = t5.U, s3 = r3.ba.S, c4 = s3 == Tn || s3 == Vn;
        r3 = r3.ba.f.RGBA;
        var u4 = [0], h4 = t5.ka;
        u4[0] = t5.T, t5.Kb && (0 == h4 ? --u4[0] : (--h4, a3[0] -= t5.width), t5.j + t5.ka + t5.T == t5.o && (u4[0] = t5.o - t5.j - h4));
        var l4 = r3.eb;
        h4 = r3.fb + h4 * r3.A;
        t5 = Sn(i3, a3[0], t5.width, o3, u4, l4, h4 + (c4 ? 0 : 3), r3.A), e2(n3 == u4), t5 && nt2(s3) && An(l4, h4, c4, o3, u4, r3.A);
      }
      return 0;
    }
    function ft2(t5) {
      var e3 = t5.ma, r3 = e3.ba.S, n3 = 11 > r3, i3 = r3 == qn || r3 == Rn || r3 == Tn || r3 == Un || 12 == r3 || nt2(r3);
      if (e3.memory = null, e3.Ib = null, e3.Jb = null, e3.Nd = null, !Mr(e3.Oa, t5, i3 ? 11 : 12))
        return 0;
      if (i3 && nt2(r3) && br(), t5.da)
        alert("todo:use_scaling");
      else {
        if (n3) {
          if (e3.Ib = ut2, t5.Kb) {
            if (r3 = t5.U + 1 >> 1, e3.memory = a2(t5.U + 2 * r3), null == e3.memory)
              return 0;
            e3.ec = e3.memory, e3.fc = 0, e3.cc = e3.ec, e3.dc = e3.fc + t5.U, e3.Mc = e3.cc, e3.Nc = e3.dc + r3, e3.Ib = ht2, br();
          }
        } else
          alert("todo:EmitYUV");
        i3 && (e3.Jb = lt2, n3 && mr());
      }
      if (n3 && !Ci) {
        for (t5 = 0; 256 > t5; ++t5)
          ji[t5] = 89858 * (t5 - 128) + _i >> Si, Mi[t5] = -22014 * (t5 - 128) + _i, Bi[t5] = -45773 * (t5 - 128), Oi[t5] = 113618 * (t5 - 128) + _i >> Si;
        for (t5 = Pi; t5 < ki; ++t5)
          e3 = 76283 * (t5 - 16) + _i >> Si, Ei[t5 - Pi] = Vt2(e3, 255), qi[t5 - Pi] = Vt2(e3 + 8 >> 4, 15);
        Ci = 1;
      }
      return 1;
    }
    function dt2(t5) {
      var r3 = t5.ma, n3 = t5.U, i3 = t5.T;
      return e2(!(1 & t5.ka)), 0 >= n3 || 0 >= i3 ? 0 : (n3 = r3.Ib(t5, r3), null != r3.Jb && r3.Jb(t5, r3, n3), r3.Dc += n3, 1);
    }
    function pt2(t5) {
      t5.ma.memory = null;
    }
    function gt2(t5, e3, r3, n3) {
      return 47 != y3(t5, 8) ? 0 : (e3[0] = y3(t5, 14) + 1, r3[0] = y3(t5, 14) + 1, n3[0] = y3(t5, 1), 0 != y3(t5, 3) ? 0 : !t5.h);
    }
    function mt2(t5, e3) {
      if (4 > t5)
        return t5 + 1;
      var r3 = t5 - 2 >> 1;
      return (2 + (1 & t5) << r3) + y3(e3, r3) + 1;
    }
    function vt2(t5, e3) {
      return 120 < e3 ? e3 - 120 : 1 <= (r3 = ((r3 = $n[e3 - 1]) >> 4) * t5 + (8 - (15 & r3))) ? r3 : 1;
      var r3;
    }
    function bt2(t5, e3, r3) {
      var n3 = L3(r3), i3 = t5[e3 += 255 & n3].g - 8;
      return 0 < i3 && (x2(r3, r3.u + 8), n3 = L3(r3), e3 += t5[e3].value, e3 += n3 & (1 << i3) - 1), x2(r3, r3.u + t5[e3].g), t5[e3].value;
    }
    function yt2(t5, r3, n3) {
      return n3.g += t5.g, n3.value += t5.value << r3 >>> 0, e2(8 >= n3.g), t5.g;
    }
    function wt2(t5, r3, n3) {
      var i3 = t5.xc;
      return e2((r3 = 0 == i3 ? 0 : t5.vc[t5.md * (n3 >> i3) + (r3 >> i3)]) < t5.Wb), t5.Ya[r3];
    }
    function Nt2(t5, r3, i3, a3) {
      var o3 = t5.ab, s3 = t5.c * r3, c4 = t5.C;
      r3 = c4 + r3;
      var u4 = i3, h4 = a3;
      for (a3 = t5.Ta, i3 = t5.Ua; 0 < o3--; ) {
        var l4 = t5.gc[o3], f4 = c4, d5 = r3, p4 = u4, g4 = h4, m4 = (h4 = a3, u4 = i3, l4.Ea);
        switch (e2(f4 < d5), e2(d5 <= l4.nc), l4.hc) {
          case 2:
            Gr(p4, g4, (d5 - f4) * m4, h4, u4);
            break;
          case 0:
            var v5 = f4, b4 = d5, y4 = h4, w4 = u4, N4 = (_3 = l4).Ea;
            0 == v5 && (Wr(p4, g4, null, null, 1, y4, w4), V2(p4, g4 + 1, 0, 0, N4 - 1, y4, w4 + 1), g4 += N4, w4 += N4, ++v5);
            for (var L4 = 1 << _3.b, A4 = L4 - 1, x3 = q2(N4, _3.b), S3 = _3.K, _3 = _3.w + (v5 >> _3.b) * x3; v5 < b4; ) {
              var P3 = S3, k3 = _3, I3 = 1;
              for (Vr(p4, g4, y4, w4 - N4, 1, y4, w4); I3 < N4; ) {
                var F3 = (I3 & ~A4) + L4;
                F3 > N4 && (F3 = N4), (0, Zr[P3[k3++] >> 8 & 15])(p4, g4 + +I3, y4, w4 + I3 - N4, F3 - I3, y4, w4 + I3), I3 = F3;
              }
              g4 += N4, w4 += N4, ++v5 & A4 || (_3 += x3);
            }
            d5 != l4.nc && n2(h4, u4 - m4, h4, u4 + (d5 - f4 - 1) * m4, m4);
            break;
          case 1:
            for (m4 = p4, b4 = g4, N4 = (p4 = l4.Ea) - (w4 = p4 & ~(y4 = (g4 = 1 << l4.b) - 1)), v5 = q2(p4, l4.b), L4 = l4.K, l4 = l4.w + (f4 >> l4.b) * v5; f4 < d5; ) {
              for (A4 = L4, x3 = l4, S3 = new T2(), _3 = b4 + w4, P3 = b4 + p4; b4 < _3; )
                Y2(A4[x3++], S3), $r(S3, m4, b4, g4, h4, u4), b4 += g4, u4 += g4;
              b4 < P3 && (Y2(A4[x3++], S3), $r(S3, m4, b4, N4, h4, u4), b4 += N4, u4 += N4), ++f4 & y4 || (l4 += v5);
            }
            break;
          case 3:
            if (p4 == h4 && g4 == u4 && 0 < l4.b) {
              for (b4 = h4, p4 = m4 = u4 + (d5 - f4) * m4 - (w4 = (d5 - f4) * q2(l4.Ea, l4.b)), g4 = h4, y4 = u4, v5 = [], w4 = (N4 = w4) - 1; 0 <= w4; --w4)
                v5[w4] = g4[y4 + w4];
              for (w4 = N4 - 1; 0 <= w4; --w4)
                b4[p4 + w4] = v5[w4];
              Yr(l4, f4, d5, h4, m4, h4, u4);
            } else
              Yr(l4, f4, d5, p4, g4, h4, u4);
        }
        u4 = a3, h4 = i3;
      }
      h4 != i3 && n2(a3, i3, u4, h4, s3);
    }
    function Lt2(t5, r3) {
      var n3 = t5.V, i3 = t5.Ba + t5.c * t5.C, a3 = r3 - t5.C;
      if (e2(r3 <= t5.l.o), e2(16 >= a3), 0 < a3) {
        var o3 = t5.l, s3 = t5.Ta, c4 = t5.Ua, u4 = o3.width;
        if (Nt2(t5, a3, n3, i3), a3 = c4 = [c4], e2((n3 = t5.C) < (i3 = r3)), e2(o3.v < o3.va), i3 > o3.o && (i3 = o3.o), n3 < o3.j) {
          var h4 = o3.j - n3;
          n3 = o3.j;
          a3[0] += h4 * u4;
        }
        if (n3 >= i3 ? n3 = 0 : (a3[0] += 4 * o3.v, o3.ka = n3 - o3.j, o3.U = o3.va - o3.v, o3.T = i3 - n3, n3 = 1), n3) {
          if (c4 = c4[0], 11 > (n3 = t5.ca).S) {
            var l4 = n3.f.RGBA, f4 = (i3 = n3.S, a3 = o3.U, o3 = o3.T, h4 = l4.eb, l4.A), d5 = o3;
            for (l4 = l4.fb + t5.Ma * l4.A; 0 < d5--; ) {
              var p4 = s3, g4 = c4, m4 = a3, v5 = h4, b4 = l4;
              switch (i3) {
                case En:
                  Qr(p4, g4, m4, v5, b4);
                  break;
                case qn:
                  tn(p4, g4, m4, v5, b4);
                  break;
                case Hn:
                  tn(p4, g4, m4, v5, b4), An(v5, b4, 0, m4, 1, 0);
                  break;
                case Dn:
                  nn(p4, g4, m4, v5, b4);
                  break;
                case Rn:
                  et2(p4, g4, m4, v5, b4, 1);
                  break;
                case Wn:
                  et2(p4, g4, m4, v5, b4, 1), An(v5, b4, 0, m4, 1, 0);
                  break;
                case Tn:
                  et2(p4, g4, m4, v5, b4, 0);
                  break;
                case Vn:
                  et2(p4, g4, m4, v5, b4, 0), An(v5, b4, 1, m4, 1, 0);
                  break;
                case Un:
                  en(p4, g4, m4, v5, b4);
                  break;
                case Gn:
                  en(p4, g4, m4, v5, b4), xn(v5, b4, m4, 1, 0);
                  break;
                case zn:
                  rn(p4, g4, m4, v5, b4);
                  break;
                default:
                  e2(0);
              }
              c4 += u4, l4 += f4;
            }
            t5.Ma += o3;
          } else
            alert("todo:EmitRescaledRowsYUVA");
          e2(t5.Ma <= n3.height);
        }
      }
      t5.C = r3, e2(t5.C <= t5.i);
    }
    function At2(t5) {
      var e3;
      if (0 < t5.ua)
        return 0;
      for (e3 = 0; e3 < t5.Wb; ++e3) {
        var r3 = t5.Ya[e3].G, n3 = t5.Ya[e3].H;
        if (0 < r3[1][n3[1] + 0].g || 0 < r3[2][n3[2] + 0].g || 0 < r3[3][n3[3] + 0].g)
          return 0;
      }
      return 1;
    }
    function xt2(t5, r3, n3, i3, a3, o3) {
      if (0 != t5.Z) {
        var s3 = t5.qd, c4 = t5.rd;
        for (e2(null != mi[t5.Z]); r3 < n3; ++r3)
          mi[t5.Z](s3, c4, i3, a3, i3, a3, o3), s3 = i3, c4 = a3, a3 += o3;
        t5.qd = s3, t5.rd = c4;
      }
    }
    function St2(t5, r3) {
      var n3 = t5.l.ma, i3 = 0 == n3.Z || 1 == n3.Z ? t5.l.j : t5.C;
      i3 = t5.C < i3 ? i3 : t5.C;
      if (e2(r3 <= t5.l.o), r3 > i3) {
        var a3 = t5.l.width, o3 = n3.ca, s3 = n3.tb + a3 * i3, c4 = t5.V, u4 = t5.Ba + t5.c * i3, h4 = t5.gc;
        e2(1 == t5.ab), e2(3 == h4[0].hc), Xr(h4[0], i3, r3, c4, u4, o3, s3), xt2(n3, i3, r3, o3, s3, a3);
      }
      t5.C = t5.Ma = r3;
    }
    function _t2(t5, r3, n3, i3, a3, o3, s3) {
      var c4 = t5.$ / i3, u4 = t5.$ % i3, h4 = t5.m, l4 = t5.s, f4 = n3 + t5.$, d5 = f4;
      a3 = n3 + i3 * a3;
      var p4 = n3 + i3 * o3, g4 = 280 + l4.ua, m4 = t5.Pb ? c4 : 16777216, v5 = 0 < l4.ua ? l4.Wa : null, b4 = l4.wc, y4 = f4 < p4 ? wt2(l4, u4, c4) : null;
      e2(t5.C < o3), e2(p4 <= a3);
      var w4 = false;
      t:
        for (; ; ) {
          for (; w4 || f4 < p4; ) {
            var N4 = 0;
            if (c4 >= m4) {
              var _3 = f4 - n3;
              e2((m4 = t5).Pb), m4.wd = m4.m, m4.xd = _3, 0 < m4.s.ua && B2(m4.s.Wa, m4.s.vb), m4 = c4 + ti;
            }
            if (u4 & b4 || (y4 = wt2(l4, u4, c4)), e2(null != y4), y4.Qb && (r3[f4] = y4.qb, w4 = true), !w4)
              if (S2(h4), y4.jc) {
                N4 = h4, _3 = r3;
                var P3 = f4, k3 = y4.pd[L3(N4) & Dr - 1];
                e2(y4.jc), 256 > k3.g ? (x2(N4, N4.u + k3.g), _3[P3] = k3.value, N4 = 0) : (x2(N4, N4.u + k3.g - 256), e2(256 <= k3.value), N4 = k3.value), 0 == N4 && (w4 = true);
              } else
                N4 = bt2(y4.G[0], y4.H[0], h4);
            if (h4.h)
              break;
            if (w4 || 256 > N4) {
              if (!w4)
                if (y4.nd)
                  r3[f4] = (y4.qb | N4 << 8) >>> 0;
                else {
                  if (S2(h4), w4 = bt2(y4.G[1], y4.H[1], h4), S2(h4), _3 = bt2(y4.G[2], y4.H[2], h4), P3 = bt2(y4.G[3], y4.H[3], h4), h4.h)
                    break;
                  r3[f4] = (P3 << 24 | w4 << 16 | N4 << 8 | _3) >>> 0;
                }
              if (w4 = false, ++f4, ++u4 >= i3 && (u4 = 0, ++c4, null != s3 && c4 <= o3 && !(c4 % 16) && s3(t5, c4), null != v5))
                for (; d5 < f4; )
                  N4 = r3[d5++], v5.X[(506832829 * N4 & 4294967295) >>> v5.Mb] = N4;
            } else if (280 > N4) {
              if (N4 = mt2(N4 - 256, h4), _3 = bt2(y4.G[4], y4.H[4], h4), S2(h4), _3 = vt2(i3, _3 = mt2(_3, h4)), h4.h)
                break;
              if (f4 - n3 < _3 || a3 - f4 < N4)
                break t;
              for (P3 = 0; P3 < N4; ++P3)
                r3[f4 + P3] = r3[f4 + P3 - _3];
              for (f4 += N4, u4 += N4; u4 >= i3; )
                u4 -= i3, ++c4, null != s3 && c4 <= o3 && !(c4 % 16) && s3(t5, c4);
              if (e2(f4 <= a3), u4 & b4 && (y4 = wt2(l4, u4, c4)), null != v5)
                for (; d5 < f4; )
                  N4 = r3[d5++], v5.X[(506832829 * N4 & 4294967295) >>> v5.Mb] = N4;
            } else {
              if (!(N4 < g4))
                break t;
              for (w4 = N4 - 280, e2(null != v5); d5 < f4; )
                N4 = r3[d5++], v5.X[(506832829 * N4 & 4294967295) >>> v5.Mb] = N4;
              N4 = f4, e2(!(w4 >>> (_3 = v5).Xa)), r3[N4] = _3.X[w4], w4 = true;
            }
            w4 || e2(h4.h == A3(h4));
          }
          if (t5.Pb && h4.h && f4 < a3)
            e2(t5.m.h), t5.a = 5, t5.m = t5.wd, t5.$ = t5.xd, 0 < t5.s.ua && B2(t5.s.vb, t5.s.Wa);
          else {
            if (h4.h)
              break t;
            null != s3 && s3(t5, c4 > o3 ? o3 : c4), t5.a = 0, t5.$ = f4 - n3;
          }
          return 1;
        }
      return t5.a = 3, 0;
    }
    function Pt2(t5) {
      e2(null != t5), t5.vc = null, t5.yc = null, t5.Ya = null;
      var r3 = t5.Wa;
      null != r3 && (r3.X = null), t5.vb = null, e2(null != t5);
    }
    function kt2() {
      var e3 = new or();
      return null == e3 ? null : (e3.a = 0, e3.xb = gi, rt2("Predictor", "VP8LPredictors"), rt2("Predictor", "VP8LPredictors_C"), rt2("PredictorAdd", "VP8LPredictorsAdd"), rt2("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G2, $r = J2, Qr = K2, tn = Z2, en = $3, rn = Q2, nn = tt2, t4.VP8LMapColor32b = Jr, t4.VP8LMapColor8b = Kr, e3);
    }
    function It2(t5, r3, n3, s3, c4) {
      var u4 = 1, f4 = [t5], p4 = [r3], g4 = s3.m, m4 = s3.s, v5 = null, b4 = 0;
      t:
        for (; ; ) {
          if (n3)
            for (; u4 && y3(g4, 1); ) {
              var w4 = f4, N4 = p4, A4 = s3, _3 = 1, P3 = A4.m, k3 = A4.gc[A4.ab], I3 = y3(P3, 2);
              if (A4.Oc & 1 << I3)
                u4 = 0;
              else {
                switch (A4.Oc |= 1 << I3, k3.hc = I3, k3.Ea = w4[0], k3.nc = N4[0], k3.K = [null], ++A4.ab, e2(4 >= A4.ab), I3) {
                  case 0:
                  case 1:
                    k3.b = y3(P3, 3) + 2, _3 = It2(q2(k3.Ea, k3.b), q2(k3.nc, k3.b), 0, A4, k3.K), k3.K = k3.K[0];
                    break;
                  case 3:
                    var F3, C3 = y3(P3, 8) + 1, j3 = 16 < C3 ? 0 : 4 < C3 ? 1 : 2 < C3 ? 2 : 3;
                    if (w4[0] = q2(k3.Ea, j3), k3.b = j3, F3 = _3 = It2(C3, 1, 0, A4, k3.K)) {
                      var B3, M3 = C3, E3 = k3, R3 = 1 << (8 >> E3.b), T3 = a2(R3);
                      if (null == T3)
                        F3 = 0;
                      else {
                        var U3 = E3.K[0], z3 = E3.w;
                        for (T3[0] = E3.K[0][0], B3 = 1; B3 < 1 * M3; ++B3)
                          T3[B3] = D2(U3[z3 + B3], T3[B3 - 1]);
                        for (; B3 < 4 * R3; ++B3)
                          T3[B3] = 0;
                        E3.K[0] = null, E3.K[0] = T3, F3 = 1;
                      }
                    }
                    _3 = F3;
                    break;
                  case 2:
                    break;
                  default:
                    e2(0);
                }
                u4 = _3;
              }
            }
          if (f4 = f4[0], p4 = p4[0], u4 && y3(g4, 1) && !(u4 = 1 <= (b4 = y3(g4, 4)) && 11 >= b4)) {
            s3.a = 3;
            break t;
          }
          var H3;
          if (H3 = u4)
            e: {
              var W3, V3, G3, Y3 = s3, J3 = f4, X3 = p4, K3 = b4, Z3 = n3, $4 = Y3.m, Q3 = Y3.s, tt3 = [null], et3 = 1, rt3 = 0, nt3 = Qn[K3];
              r:
                for (; ; ) {
                  if (Z3 && y3($4, 1)) {
                    var it3 = y3($4, 3) + 2, at3 = q2(J3, it3), ot3 = q2(X3, it3), st3 = at3 * ot3;
                    if (!It2(at3, ot3, 0, Y3, tt3))
                      break r;
                    for (tt3 = tt3[0], Q3.xc = it3, W3 = 0; W3 < st3; ++W3) {
                      var ct3 = tt3[W3] >> 8 & 65535;
                      tt3[W3] = ct3, ct3 >= et3 && (et3 = ct3 + 1);
                    }
                  }
                  if ($4.h)
                    break r;
                  for (V3 = 0; 5 > V3; ++V3) {
                    var ut3 = Xn[V3];
                    !V3 && 0 < K3 && (ut3 += 1 << K3), rt3 < ut3 && (rt3 = ut3);
                  }
                  var ht3 = o2(et3 * nt3, l3), lt3 = et3, ft3 = o2(lt3, d4);
                  if (null == ft3)
                    var dt3 = null;
                  else
                    e2(65536 >= lt3), dt3 = ft3;
                  var pt3 = a2(rt3);
                  if (null == dt3 || null == pt3 || null == ht3) {
                    Y3.a = 1;
                    break r;
                  }
                  var gt3 = ht3;
                  for (W3 = G3 = 0; W3 < et3; ++W3) {
                    var mt3 = dt3[W3], vt3 = mt3.G, bt3 = mt3.H, wt3 = 0, Nt3 = 1, Lt3 = 0;
                    for (V3 = 0; 5 > V3; ++V3) {
                      ut3 = Xn[V3], vt3[V3] = gt3, bt3[V3] = G3, !V3 && 0 < K3 && (ut3 += 1 << K3);
                      n: {
                        var At3, xt3 = ut3, St3 = Y3, kt3 = pt3, Ft3 = gt3, Ct3 = G3, jt3 = 0, Ot3 = St3.m, Bt3 = y3(Ot3, 1);
                        if (i2(kt3, 0, 0, xt3), Bt3) {
                          var Mt3 = y3(Ot3, 1) + 1, Et3 = y3(Ot3, 1), qt3 = y3(Ot3, 0 == Et3 ? 1 : 8);
                          kt3[qt3] = 1, 2 == Mt3 && (kt3[qt3 = y3(Ot3, 8)] = 1);
                          var Dt3 = 1;
                        } else {
                          var Rt3 = a2(19), Tt3 = y3(Ot3, 4) + 4;
                          if (19 < Tt3) {
                            St3.a = 3;
                            var Ut3 = 0;
                            break n;
                          }
                          for (At3 = 0; At3 < Tt3; ++At3)
                            Rt3[Zn[At3]] = y3(Ot3, 3);
                          var zt3 = void 0, Ht3 = void 0, Wt3 = St3, Vt3 = Rt3, Gt3 = xt3, Yt3 = kt3, Jt3 = 0, Xt3 = Wt3.m, Kt3 = 8, Zt3 = o2(128, l3);
                          i:
                            for (; h3(Zt3, 0, 7, Vt3, 19); ) {
                              if (y3(Xt3, 1)) {
                                var $t3 = 2 + 2 * y3(Xt3, 3);
                                if ((zt3 = 2 + y3(Xt3, $t3)) > Gt3)
                                  break i;
                              } else
                                zt3 = Gt3;
                              for (Ht3 = 0; Ht3 < Gt3 && zt3--; ) {
                                S2(Xt3);
                                var Qt3 = Zt3[0 + (127 & L3(Xt3))];
                                x2(Xt3, Xt3.u + Qt3.g);
                                var te3 = Qt3.value;
                                if (16 > te3)
                                  Yt3[Ht3++] = te3, 0 != te3 && (Kt3 = te3);
                                else {
                                  var ee3 = 16 == te3, re3 = te3 - 16, ne3 = Jn[re3], ie3 = y3(Xt3, Yn[re3]) + ne3;
                                  if (Ht3 + ie3 > Gt3)
                                    break i;
                                  for (var ae3 = ee3 ? Kt3 : 0; 0 < ie3--; )
                                    Yt3[Ht3++] = ae3;
                                }
                              }
                              Jt3 = 1;
                              break i;
                            }
                          Jt3 || (Wt3.a = 3), Dt3 = Jt3;
                        }
                        (Dt3 = Dt3 && !Ot3.h) && (jt3 = h3(Ft3, Ct3, 8, kt3, xt3)), Dt3 && 0 != jt3 ? Ut3 = jt3 : (St3.a = 3, Ut3 = 0);
                      }
                      if (0 == Ut3)
                        break r;
                      if (Nt3 && 1 == Kn[V3] && (Nt3 = 0 == gt3[G3].g), wt3 += gt3[G3].g, G3 += Ut3, 3 >= V3) {
                        var oe3, se3 = pt3[0];
                        for (oe3 = 1; oe3 < ut3; ++oe3)
                          pt3[oe3] > se3 && (se3 = pt3[oe3]);
                        Lt3 += se3;
                      }
                    }
                    if (mt3.nd = Nt3, mt3.Qb = 0, Nt3 && (mt3.qb = (vt3[3][bt3[3] + 0].value << 24 | vt3[1][bt3[1] + 0].value << 16 | vt3[2][bt3[2] + 0].value) >>> 0, 0 == wt3 && 256 > vt3[0][bt3[0] + 0].value && (mt3.Qb = 1, mt3.qb += vt3[0][bt3[0] + 0].value << 8)), mt3.jc = !mt3.Qb && 6 > Lt3, mt3.jc) {
                      var ce3, ue3 = mt3;
                      for (ce3 = 0; ce3 < Dr; ++ce3) {
                        var he3 = ce3, le3 = ue3.pd[he3], fe3 = ue3.G[0][ue3.H[0] + he3];
                        256 <= fe3.value ? (le3.g = fe3.g + 256, le3.value = fe3.value) : (le3.g = 0, le3.value = 0, he3 >>= yt2(fe3, 8, le3), he3 >>= yt2(ue3.G[1][ue3.H[1] + he3], 16, le3), he3 >>= yt2(ue3.G[2][ue3.H[2] + he3], 0, le3), yt2(ue3.G[3][ue3.H[3] + he3], 24, le3));
                      }
                    }
                  }
                  Q3.vc = tt3, Q3.Wb = et3, Q3.Ya = dt3, Q3.yc = ht3, H3 = 1;
                  break e;
                }
              H3 = 0;
            }
          if (!(u4 = H3)) {
            s3.a = 3;
            break t;
          }
          if (0 < b4) {
            if (m4.ua = 1 << b4, !O2(m4.Wa, b4)) {
              s3.a = 1, u4 = 0;
              break t;
            }
          } else
            m4.ua = 0;
          var de3 = s3, pe3 = f4, ge3 = p4, me3 = de3.s, ve3 = me3.xc;
          if (de3.c = pe3, de3.i = ge3, me3.md = q2(pe3, ve3), me3.wc = 0 == ve3 ? -1 : (1 << ve3) - 1, n3) {
            s3.xb = pi;
            break t;
          }
          if (null == (v5 = a2(f4 * p4))) {
            s3.a = 1, u4 = 0;
            break t;
          }
          u4 = (u4 = _t2(s3, v5, 0, f4, p4, p4, null)) && !g4.h;
          break t;
        }
      return u4 ? (null != c4 ? c4[0] = v5 : (e2(null == v5), e2(n3)), s3.$ = 0, n3 || Pt2(m4)) : Pt2(m4), u4;
    }
    function Ft2(t5, r3) {
      var n3 = t5.c * t5.i, i3 = n3 + r3 + 16 * r3;
      return e2(t5.c <= r3), t5.V = a2(i3), null == t5.V ? (t5.Ta = null, t5.Ua = 0, t5.a = 1, 0) : (t5.Ta = t5.V, t5.Ua = t5.Ba + n3 + r3, 1);
    }
    function Ct2(t5, r3) {
      var n3 = t5.C, i3 = r3 - n3, a3 = t5.V, o3 = t5.Ba + t5.c * n3;
      for (e2(r3 <= t5.l.o); 0 < i3; ) {
        var s3 = 16 < i3 ? 16 : i3, c4 = t5.l.ma, u4 = t5.l.width, h4 = u4 * s3, l4 = c4.ca, f4 = c4.tb + u4 * n3, d5 = t5.Ta, p4 = t5.Ua;
        Nt2(t5, s3, a3, o3), _n(d5, p4, l4, f4, h4), xt2(c4, n3, n3 + s3, l4, f4, u4), i3 -= s3, a3 += s3 * t5.c, n3 += s3;
      }
      e2(n3 == r3), t5.C = t5.Ma = r3;
    }
    function jt2() {
      this.ub = this.yd = this.td = this.Rb = 0;
    }
    function Ot2() {
      this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
    }
    function Bt2() {
      this.Fb = this.Bb = this.Cb = 0, this.Zb = a2(4), this.Lb = a2(4);
    }
    function Mt2() {
      this.Yb = function() {
        var t5 = [];
        return function t6(e3, r3, n3) {
          for (var i3 = n3[r3], a3 = 0; a3 < i3 && (e3.push(n3.length > r3 + 1 ? [] : 0), !(n3.length < r3 + 1)); a3++)
            t6(e3[a3], r3 + 1, n3);
        }(t5, 0, [3, 11]), t5;
      }();
    }
    function Et2() {
      this.jb = a2(3), this.Wc = s2([4, 8], Mt2), this.Xc = s2([4, 17], Mt2);
    }
    function qt2() {
      this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a2(4), this.od = new a2(4);
    }
    function Dt2() {
      this.ld = this.La = this.dd = this.tc = 0;
    }
    function Rt2() {
      this.Na = this.la = 0;
    }
    function Tt2() {
      this.Sc = [0, 0], this.Eb = [0, 0], this.Qc = [0, 0], this.ia = this.lc = 0;
    }
    function Ut2() {
      this.ad = a2(384), this.Za = 0, this.Ob = a2(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
    }
    function zt2() {
      this.uc = this.M = this.Nb = 0, this.wa = Array(new Dt2()), this.Y = 0, this.ya = Array(new Ut2()), this.aa = 0, this.l = new Gt2();
    }
    function Ht2() {
      this.y = a2(16), this.f = a2(8), this.ea = a2(8);
    }
    function Wt2() {
      this.cb = this.a = 0, this.sc = "", this.m = new w3(), this.Od = new jt2(), this.Kc = new Ot2(), this.ed = new qt2(), this.Qa = new Bt2(), this.Ic = this.$c = this.Aa = 0, this.D = new zt2(), this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o2(8, w3), this.ia = 0, this.pb = o2(4, Tt2), this.Pa = new Et2(), this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [0, 0, 0, 0], this.Gd = Array(new Ht2()), this.Hd = 0, this.rb = Array(new Rt2()), this.sb = 0, this.wa = Array(new Dt2()), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut2()), this.L = this.aa = 0, this.gd = s2([4, 2], Dt2), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
    }
    function Vt2(t5, e3) {
      return 0 > t5 ? 0 : t5 > e3 ? e3 : t5;
    }
    function Gt2() {
      this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
    }
    function Yt2() {
      var t5 = new Wt2();
      return null != t5 && (t5.a = 0, t5.sc = "OK", t5.cb = 0, t5.Xb = 0, ni || (ni = Zt2)), t5;
    }
    function Jt2(t5, e3, r3) {
      return 0 == t5.a && (t5.a = e3, t5.sc = r3, t5.cb = 0), 0;
    }
    function Xt2(t5, e3, r3) {
      return 3 <= r3 && 157 == t5[e3 + 0] && 1 == t5[e3 + 1] && 42 == t5[e3 + 2];
    }
    function Kt2(t5, r3) {
      if (null == t5)
        return 0;
      if (t5.a = 0, t5.sc = "OK", null == r3)
        return Jt2(t5, 2, "null VP8Io passed to VP8GetHeaders()");
      var n3 = r3.data, a3 = r3.w, o3 = r3.ha;
      if (4 > o3)
        return Jt2(t5, 7, "Truncated header.");
      var s3 = n3[a3 + 0] | n3[a3 + 1] << 8 | n3[a3 + 2] << 16, c4 = t5.Od;
      if (c4.Rb = !(1 & s3), c4.td = s3 >> 1 & 7, c4.yd = s3 >> 4 & 1, c4.ub = s3 >> 5, 3 < c4.td)
        return Jt2(t5, 3, "Incorrect keyframe parameters.");
      if (!c4.yd)
        return Jt2(t5, 4, "Frame not displayable.");
      a3 += 3, o3 -= 3;
      var u4 = t5.Kc;
      if (c4.Rb) {
        if (7 > o3)
          return Jt2(t5, 7, "cannot parse picture header");
        if (!Xt2(n3, a3, o3))
          return Jt2(t5, 3, "Bad code word");
        u4.c = 16383 & (n3[a3 + 4] << 8 | n3[a3 + 3]), u4.Td = n3[a3 + 4] >> 6, u4.i = 16383 & (n3[a3 + 6] << 8 | n3[a3 + 5]), u4.Ud = n3[a3 + 6] >> 6, a3 += 7, o3 -= 7, t5.za = u4.c + 15 >> 4, t5.Ub = u4.i + 15 >> 4, r3.width = u4.c, r3.height = u4.i, r3.Da = 0, r3.j = 0, r3.v = 0, r3.va = r3.width, r3.o = r3.height, r3.da = 0, r3.ib = r3.width, r3.hb = r3.height, r3.U = r3.width, r3.T = r3.height, i2((s3 = t5.Pa).jb, 0, 255, s3.jb.length), e2(null != (s3 = t5.Qa)), s3.Cb = 0, s3.Bb = 0, s3.Fb = 1, i2(s3.Zb, 0, 0, s3.Zb.length), i2(s3.Lb, 0, 0, s3.Lb);
      }
      if (c4.ub > o3)
        return Jt2(t5, 7, "bad partition length");
      p3(s3 = t5.m, n3, a3, c4.ub), a3 += c4.ub, o3 -= c4.ub, c4.Rb && (u4.Ld = P2(s3), u4.Kd = P2(s3)), u4 = t5.Qa;
      var h4, l4 = t5.Pa;
      if (e2(null != s3), e2(null != u4), u4.Cb = P2(s3), u4.Cb) {
        if (u4.Bb = P2(s3), P2(s3)) {
          for (u4.Fb = P2(s3), h4 = 0; 4 > h4; ++h4)
            u4.Zb[h4] = P2(s3) ? m3(s3, 7) : 0;
          for (h4 = 0; 4 > h4; ++h4)
            u4.Lb[h4] = P2(s3) ? m3(s3, 6) : 0;
        }
        if (u4.Bb)
          for (h4 = 0; 3 > h4; ++h4)
            l4.jb[h4] = P2(s3) ? g3(s3, 8) : 255;
      } else
        u4.Bb = 0;
      if (s3.Ka)
        return Jt2(t5, 3, "cannot parse segment header");
      if ((u4 = t5.ed).zd = P2(s3), u4.Tb = g3(s3, 6), u4.wb = g3(s3, 3), u4.Pc = P2(s3), u4.Pc && P2(s3)) {
        for (l4 = 0; 4 > l4; ++l4)
          P2(s3) && (u4.vd[l4] = m3(s3, 6));
        for (l4 = 0; 4 > l4; ++l4)
          P2(s3) && (u4.od[l4] = m3(s3, 6));
      }
      if (t5.L = 0 == u4.Tb ? 0 : u4.zd ? 1 : 2, s3.Ka)
        return Jt2(t5, 3, "cannot parse filter header");
      var f4 = o3;
      if (o3 = h4 = a3, a3 = h4 + f4, u4 = f4, t5.Xb = (1 << g3(t5.m, 2)) - 1, f4 < 3 * (l4 = t5.Xb))
        n3 = 7;
      else {
        for (h4 += 3 * l4, u4 -= 3 * l4, f4 = 0; f4 < l4; ++f4) {
          var d5 = n3[o3 + 0] | n3[o3 + 1] << 8 | n3[o3 + 2] << 16;
          d5 > u4 && (d5 = u4), p3(t5.Jc[+f4], n3, h4, d5), h4 += d5, u4 -= d5, o3 += 3;
        }
        p3(t5.Jc[+l4], n3, h4, u4), n3 = h4 < a3 ? 0 : 5;
      }
      if (0 != n3)
        return Jt2(t5, n3, "cannot parse partitions");
      for (n3 = g3(h4 = t5.m, 7), o3 = P2(h4) ? m3(h4, 4) : 0, a3 = P2(h4) ? m3(h4, 4) : 0, u4 = P2(h4) ? m3(h4, 4) : 0, l4 = P2(h4) ? m3(h4, 4) : 0, h4 = P2(h4) ? m3(h4, 4) : 0, f4 = t5.Qa, d5 = 0; 4 > d5; ++d5) {
        if (f4.Cb) {
          var v5 = f4.Zb[d5];
          f4.Fb || (v5 += n3);
        } else {
          if (0 < d5) {
            t5.pb[d5] = t5.pb[0];
            continue;
          }
          v5 = n3;
        }
        var b4 = t5.pb[d5];
        b4.Sc[0] = ei[Vt2(v5 + o3, 127)], b4.Sc[1] = ri[Vt2(v5 + 0, 127)], b4.Eb[0] = 2 * ei[Vt2(v5 + a3, 127)], b4.Eb[1] = 101581 * ri[Vt2(v5 + u4, 127)] >> 16, 8 > b4.Eb[1] && (b4.Eb[1] = 8), b4.Qc[0] = ei[Vt2(v5 + l4, 117)], b4.Qc[1] = ri[Vt2(v5 + h4, 127)], b4.lc = v5 + h4;
      }
      if (!c4.Rb)
        return Jt2(t5, 4, "Not a key frame.");
      for (P2(s3), c4 = t5.Pa, n3 = 0; 4 > n3; ++n3) {
        for (o3 = 0; 8 > o3; ++o3)
          for (a3 = 0; 3 > a3; ++a3)
            for (u4 = 0; 11 > u4; ++u4)
              l4 = k2(s3, ui[n3][o3][a3][u4]) ? g3(s3, 8) : si[n3][o3][a3][u4], c4.Wc[n3][o3].Yb[a3][u4] = l4;
        for (o3 = 0; 17 > o3; ++o3)
          c4.Xc[n3][o3] = c4.Wc[n3][hi[o3]];
      }
      return t5.kc = P2(s3), t5.kc && (t5.Bd = g3(s3, 8)), t5.cb = 1;
    }
    function Zt2(t5, e3, r3, n3, i3, a3, o3) {
      var s3 = e3[i3].Yb[r3];
      for (r3 = 0; 16 > i3; ++i3) {
        if (!k2(t5, s3[r3 + 0]))
          return i3;
        for (; !k2(t5, s3[r3 + 1]); )
          if (s3 = e3[++i3].Yb[0], r3 = 0, 16 == i3)
            return 16;
        var c4 = e3[i3 + 1].Yb;
        if (k2(t5, s3[r3 + 2])) {
          var u4 = t5, h4 = 0;
          if (k2(u4, (f4 = s3)[(l4 = r3) + 3]))
            if (k2(u4, f4[l4 + 6])) {
              for (s3 = 0, l4 = 2 * (h4 = k2(u4, f4[l4 + 8])) + (f4 = k2(u4, f4[l4 + 9 + h4])), h4 = 0, f4 = ii[l4]; f4[s3]; ++s3)
                h4 += h4 + k2(u4, f4[s3]);
              h4 += 3 + (8 << l4);
            } else
              k2(u4, f4[l4 + 7]) ? (h4 = 7 + 2 * k2(u4, 165), h4 += k2(u4, 145)) : h4 = 5 + k2(u4, 159);
          else
            h4 = k2(u4, f4[l4 + 4]) ? 3 + k2(u4, f4[l4 + 5]) : 2;
          s3 = c4[2];
        } else
          h4 = 1, s3 = c4[1];
        c4 = o3 + ai[i3], 0 > (u4 = t5).b && _2(u4);
        var l4, f4 = u4.b, d5 = (l4 = u4.Ca >> 1) - (u4.I >> f4) >> 31;
        --u4.b, u4.Ca += d5, u4.Ca |= 1, u4.I -= (l4 + 1 & d5) << f4, a3[c4] = ((h4 ^ d5) - d5) * n3[(0 < i3) + 0];
      }
      return 16;
    }
    function $t2(t5) {
      var e3 = t5.rb[t5.sb - 1];
      e3.la = 0, e3.Na = 0, i2(t5.zc, 0, 0, t5.zc.length), t5.ja = 0;
    }
    function Qt2(t5, r3) {
      if (null == t5)
        return 0;
      if (null == r3)
        return Jt2(t5, 2, "NULL VP8Io parameter in VP8Decode().");
      if (!t5.cb && !Kt2(t5, r3))
        return 0;
      if (e2(t5.cb), null == r3.ac || r3.ac(r3)) {
        r3.ob && (t5.L = 0);
        var s3 = Ri[t5.L];
        if (2 == t5.L ? (t5.yb = 0, t5.zb = 0) : (t5.yb = r3.v - s3 >> 4, t5.zb = r3.j - s3 >> 4, 0 > t5.yb && (t5.yb = 0), 0 > t5.zb && (t5.zb = 0)), t5.Va = r3.o + 15 + s3 >> 4, t5.Hb = r3.va + 15 + s3 >> 4, t5.Hb > t5.za && (t5.Hb = t5.za), t5.Va > t5.Ub && (t5.Va = t5.Ub), 0 < t5.L) {
          var c4 = t5.ed;
          for (s3 = 0; 4 > s3; ++s3) {
            var u4;
            if (t5.Qa.Cb) {
              var h4 = t5.Qa.Lb[s3];
              t5.Qa.Fb || (h4 += c4.Tb);
            } else
              h4 = c4.Tb;
            for (u4 = 0; 1 >= u4; ++u4) {
              var l4 = t5.gd[s3][u4], f4 = h4;
              if (c4.Pc && (f4 += c4.vd[0], u4 && (f4 += c4.od[0])), 0 < (f4 = 0 > f4 ? 0 : 63 < f4 ? 63 : f4)) {
                var d5 = f4;
                0 < c4.wb && ((d5 = 4 < c4.wb ? d5 >> 2 : d5 >> 1) > 9 - c4.wb && (d5 = 9 - c4.wb)), 1 > d5 && (d5 = 1), l4.dd = d5, l4.tc = 2 * f4 + d5, l4.ld = 40 <= f4 ? 2 : 15 <= f4 ? 1 : 0;
              } else
                l4.tc = 0;
              l4.La = u4;
            }
          }
        }
        s3 = 0;
      } else
        Jt2(t5, 6, "Frame setup failed"), s3 = t5.a;
      if (s3 = 0 == s3) {
        if (s3) {
          t5.$c = 0, 0 < t5.Aa || (t5.Ic = Ui);
          t: {
            s3 = t5.Ic;
            c4 = 4 * (d5 = t5.za);
            var p4 = 32 * d5, g4 = d5 + 1, m4 = 0 < t5.L ? d5 * (0 < t5.Aa ? 2 : 1) : 0, v5 = (2 == t5.Aa ? 2 : 1) * d5;
            if ((l4 = c4 + 832 + (u4 = 3 * (16 * s3 + Ri[t5.L]) / 2 * p4) + (h4 = null != t5.Fa && 0 < t5.Fa.length ? t5.Kc.c * t5.Kc.i : 0)) != l4)
              s3 = 0;
            else {
              if (l4 > t5.Vb) {
                if (t5.Vb = 0, t5.Ec = a2(l4), t5.Fc = 0, null == t5.Ec) {
                  s3 = Jt2(t5, 1, "no memory during frame initialization.");
                  break t;
                }
                t5.Vb = l4;
              }
              l4 = t5.Ec, f4 = t5.Fc, t5.Ac = l4, t5.Bc = f4, f4 += c4, t5.Gd = o2(p4, Ht2), t5.Hd = 0, t5.rb = o2(g4 + 1, Rt2), t5.sb = 1, t5.wa = m4 ? o2(m4, Dt2) : null, t5.Y = 0, t5.D.Nb = 0, t5.D.wa = t5.wa, t5.D.Y = t5.Y, 0 < t5.Aa && (t5.D.Y += d5), e2(true), t5.oc = l4, t5.pc = f4, f4 += 832, t5.ya = o2(v5, Ut2), t5.aa = 0, t5.D.ya = t5.ya, t5.D.aa = t5.aa, 2 == t5.Aa && (t5.D.aa += d5), t5.R = 16 * d5, t5.B = 8 * d5, d5 = (p4 = Ri[t5.L]) * t5.R, p4 = p4 / 2 * t5.B, t5.sa = l4, t5.ta = f4 + d5, t5.qa = t5.sa, t5.ra = t5.ta + 16 * s3 * t5.R + p4, t5.Ha = t5.qa, t5.Ia = t5.ra + 8 * s3 * t5.B + p4, t5.$c = 0, f4 += u4, t5.mb = h4 ? l4 : null, t5.nb = h4 ? f4 : null, e2(f4 + h4 <= t5.Fc + t5.Vb), $t2(t5), i2(t5.Ac, t5.Bc, 0, c4), s3 = 1;
            }
          }
          if (s3) {
            if (r3.ka = 0, r3.y = t5.sa, r3.O = t5.ta, r3.f = t5.qa, r3.N = t5.ra, r3.ea = t5.Ha, r3.Vd = t5.Ia, r3.fa = t5.R, r3.Rc = t5.B, r3.F = null, r3.J = 0, !Cn) {
              for (s3 = -255; 255 >= s3; ++s3)
                Pn[255 + s3] = 0 > s3 ? -s3 : s3;
              for (s3 = -1020; 1020 >= s3; ++s3)
                kn[1020 + s3] = -128 > s3 ? -128 : 127 < s3 ? 127 : s3;
              for (s3 = -112; 112 >= s3; ++s3)
                In[112 + s3] = -16 > s3 ? -16 : 15 < s3 ? 15 : s3;
              for (s3 = -255; 510 >= s3; ++s3)
                Fn[255 + s3] = 0 > s3 ? 0 : 255 < s3 ? 255 : s3;
              Cn = 1;
            }
            an = ue2, on3 = ae2, cn = oe2, un = se2, hn = ce2, sn = ie2, ln2 = Je, fn3 = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = We, Ln = Ve, fi[0] = xe, fi[1] = le2, fi[2] = Le2, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, li[0] = ve2, li[1] = de2, li[2] = pe2, li[3] = ge2, li[4] = be2, li[5] = ye2, li[6] = we2, di[0] = Be, di[1] = fe2, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s3 = 1;
          } else
            s3 = 0;
        }
        s3 && (s3 = function(t6, r4) {
          for (t6.M = 0; t6.M < t6.Va; ++t6.M) {
            var o3, s4 = t6.Jc[t6.M & t6.Xb], c5 = t6.m, u5 = t6;
            for (o3 = 0; o3 < u5.za; ++o3) {
              var h5 = c5, l5 = u5, f5 = l5.Ac, d6 = l5.Bc + 4 * o3, p5 = l5.zc, g5 = l5.ya[l5.aa + o3];
              if (l5.Qa.Bb ? g5.$b = k2(h5, l5.Pa.jb[0]) ? 2 + k2(h5, l5.Pa.jb[2]) : k2(h5, l5.Pa.jb[1]) : g5.$b = 0, l5.kc && (g5.Ad = k2(h5, l5.Bd)), g5.Za = !k2(h5, 145) + 0, g5.Za) {
                var m5 = g5.Ob, v6 = 0;
                for (l5 = 0; 4 > l5; ++l5) {
                  var b4, y4 = p5[0 + l5];
                  for (b4 = 0; 4 > b4; ++b4) {
                    y4 = ci[f5[d6 + b4]][y4];
                    for (var w4 = oi[k2(h5, y4[0])]; 0 < w4; )
                      w4 = oi[2 * w4 + k2(h5, y4[w4])];
                    y4 = -w4, f5[d6 + b4] = y4;
                  }
                  n2(m5, v6, f5, d6, 4), v6 += 4, p5[0 + l5] = y4;
                }
              } else
                y4 = k2(h5, 156) ? k2(h5, 128) ? 1 : 3 : k2(h5, 163) ? 2 : 0, g5.Ob[0] = y4, i2(f5, d6, y4, 4), i2(p5, 0, y4, 4);
              g5.Dd = k2(h5, 142) ? k2(h5, 114) ? k2(h5, 183) ? 1 : 3 : 2 : 0;
            }
            if (u5.m.Ka)
              return Jt2(t6, 7, "Premature end-of-partition0 encountered.");
            for (; t6.ja < t6.za; ++t6.ja) {
              if (u5 = s4, h5 = (c5 = t6).rb[c5.sb - 1], f5 = c5.rb[c5.sb + c5.ja], o3 = c5.ya[c5.aa + c5.ja], d6 = c5.kc ? o3.Ad : 0)
                h5.la = f5.la = 0, o3.Za || (h5.Na = f5.Na = 0), o3.Hc = 0, o3.Gc = 0, o3.ia = 0;
              else {
                var N4, L4;
                h5 = f5, f5 = u5, d6 = c5.Pa.Xc, p5 = c5.ya[c5.aa + c5.ja], g5 = c5.pb[p5.$b];
                if (l5 = p5.ad, m5 = 0, v6 = c5.rb[c5.sb - 1], y4 = b4 = 0, i2(l5, m5, 0, 384), p5.Za)
                  var A4 = 0, x3 = d6[3];
                else {
                  w4 = a2(16);
                  var S3 = h5.Na + v6.Na;
                  if (S3 = ni(f5, d6[1], S3, g5.Eb, 0, w4, 0), h5.Na = v6.Na = (0 < S3) + 0, 1 < S3)
                    an(w4, 0, l5, m5);
                  else {
                    var _3 = w4[0] + 3 >> 3;
                    for (w4 = 0; 256 > w4; w4 += 16)
                      l5[m5 + w4] = _3;
                  }
                  A4 = 1, x3 = d6[0];
                }
                var P3 = 15 & h5.la, I3 = 15 & v6.la;
                for (w4 = 0; 4 > w4; ++w4) {
                  var F3 = 1 & I3;
                  for (_3 = L4 = 0; 4 > _3; ++_3)
                    P3 = P3 >> 1 | (F3 = (S3 = ni(f5, x3, S3 = F3 + (1 & P3), g5.Sc, A4, l5, m5)) > A4) << 7, L4 = L4 << 2 | (3 < S3 ? 3 : 1 < S3 ? 2 : 0 != l5[m5 + 0]), m5 += 16;
                  P3 >>= 4, I3 = I3 >> 1 | F3 << 7, b4 = (b4 << 8 | L4) >>> 0;
                }
                for (x3 = P3, A4 = I3 >> 4, N4 = 0; 4 > N4; N4 += 2) {
                  for (L4 = 0, P3 = h5.la >> 4 + N4, I3 = v6.la >> 4 + N4, w4 = 0; 2 > w4; ++w4) {
                    for (F3 = 1 & I3, _3 = 0; 2 > _3; ++_3)
                      S3 = F3 + (1 & P3), P3 = P3 >> 1 | (F3 = 0 < (S3 = ni(f5, d6[2], S3, g5.Qc, 0, l5, m5))) << 3, L4 = L4 << 2 | (3 < S3 ? 3 : 1 < S3 ? 2 : 0 != l5[m5 + 0]), m5 += 16;
                    P3 >>= 2, I3 = I3 >> 1 | F3 << 5;
                  }
                  y4 |= L4 << 4 * N4, x3 |= P3 << 4 << N4, A4 |= (240 & I3) << N4;
                }
                h5.la = x3, v6.la = A4, p5.Hc = b4, p5.Gc = y4, p5.ia = 43690 & y4 ? 0 : g5.ia, d6 = !(b4 | y4);
              }
              if (0 < c5.L && (c5.wa[c5.Y + c5.ja] = c5.gd[o3.$b][o3.Za], c5.wa[c5.Y + c5.ja].La |= !d6), u5.Ka)
                return Jt2(t6, 7, "Premature end-of-file encountered.");
            }
            if ($t2(t6), c5 = r4, u5 = 1, o3 = (s4 = t6).D, h5 = 0 < s4.L && s4.M >= s4.zb && s4.M <= s4.Va, 0 == s4.Aa)
              t: {
                if (o3.M = s4.M, o3.uc = h5, Or(s4, o3), u5 = 1, o3 = (L4 = s4.D).Nb, h5 = (y4 = Ri[s4.L]) * s4.R, f5 = y4 / 2 * s4.B, w4 = 16 * o3 * s4.R, _3 = 8 * o3 * s4.B, d6 = s4.sa, p5 = s4.ta - h5 + w4, g5 = s4.qa, l5 = s4.ra - f5 + _3, m5 = s4.Ha, v6 = s4.Ia - f5 + _3, I3 = 0 == (P3 = L4.M), b4 = P3 >= s4.Va - 1, 2 == s4.Aa && Or(s4, L4), L4.uc)
                  for (F3 = (S3 = s4).D.M, e2(S3.D.uc), L4 = S3.yb; L4 < S3.Hb; ++L4) {
                    A4 = L4, x3 = F3;
                    var C3 = (j3 = (U3 = S3).D).Nb;
                    N4 = U3.R;
                    var j3 = j3.wa[j3.Y + A4], O3 = U3.sa, B3 = U3.ta + 16 * C3 * N4 + 16 * A4, M3 = j3.dd, E3 = j3.tc;
                    if (0 != E3)
                      if (e2(3 <= E3), 1 == U3.L)
                        0 < A4 && wn(O3, B3, N4, E3 + 4), j3.La && Ln(O3, B3, N4, E3), 0 < x3 && yn(O3, B3, N4, E3 + 4), j3.La && Nn(O3, B3, N4, E3);
                      else {
                        var q3 = U3.B, D3 = U3.qa, R3 = U3.ra + 8 * C3 * q3 + 8 * A4, T3 = U3.Ha, U3 = U3.Ia + 8 * C3 * q3 + 8 * A4;
                        C3 = j3.ld;
                        0 < A4 && (fn3(O3, B3, N4, E3 + 4, M3, C3), pn(D3, R3, T3, U3, q3, E3 + 4, M3, C3)), j3.La && (mn(O3, B3, N4, E3, M3, C3), bn(D3, R3, T3, U3, q3, E3, M3, C3)), 0 < x3 && (ln2(O3, B3, N4, E3 + 4, M3, C3), dn(D3, R3, T3, U3, q3, E3 + 4, M3, C3)), j3.La && (gn(O3, B3, N4, E3, M3, C3), vn(D3, R3, T3, U3, q3, E3, M3, C3));
                      }
                  }
                if (s4.ia && alert("todo:DitherRow"), null != c5.put) {
                  if (L4 = 16 * P3, P3 = 16 * (P3 + 1), I3 ? (c5.y = s4.sa, c5.O = s4.ta + w4, c5.f = s4.qa, c5.N = s4.ra + _3, c5.ea = s4.Ha, c5.W = s4.Ia + _3) : (L4 -= y4, c5.y = d6, c5.O = p5, c5.f = g5, c5.N = l5, c5.ea = m5, c5.W = v6), b4 || (P3 -= y4), P3 > c5.o && (P3 = c5.o), c5.F = null, c5.J = null, null != s4.Fa && 0 < s4.Fa.length && L4 < P3 && (c5.J = lr(s4, c5, L4, P3 - L4), c5.F = s4.mb, null == c5.F && 0 == c5.F.length)) {
                    u5 = Jt2(s4, 3, "Could not decode alpha data.");
                    break t;
                  }
                  L4 < c5.j && (y4 = c5.j - L4, L4 = c5.j, e2(!(1 & y4)), c5.O += s4.R * y4, c5.N += s4.B * (y4 >> 1), c5.W += s4.B * (y4 >> 1), null != c5.F && (c5.J += c5.width * y4)), L4 < P3 && (c5.O += c5.v, c5.N += c5.v >> 1, c5.W += c5.v >> 1, null != c5.F && (c5.J += c5.v), c5.ka = L4 - c5.j, c5.U = c5.va - c5.v, c5.T = P3 - L4, u5 = c5.put(c5));
                }
                o3 + 1 != s4.Ic || b4 || (n2(s4.sa, s4.ta - h5, d6, p5 + 16 * s4.R, h5), n2(s4.qa, s4.ra - f5, g5, l5 + 8 * s4.B, f5), n2(s4.Ha, s4.Ia - f5, m5, v6 + 8 * s4.B, f5));
              }
            if (!u5)
              return Jt2(t6, 6, "Output aborted.");
          }
          return 1;
        }(t5, r3)), null != r3.bc && r3.bc(r3), s3 &= 1;
      }
      return s3 ? (t5.cb = 0, s3) : 0;
    }
    function te2(t5, e3, r3, n3, i3) {
      i3 = t5[e3 + r3 + 32 * n3] + (i3 >> 3), t5[e3 + r3 + 32 * n3] = -256 & i3 ? 0 > i3 ? 0 : 255 : i3;
    }
    function ee2(t5, e3, r3, n3, i3, a3) {
      te2(t5, e3, 0, r3, n3 + i3), te2(t5, e3, 1, r3, n3 + a3), te2(t5, e3, 2, r3, n3 - a3), te2(t5, e3, 3, r3, n3 - i3);
    }
    function re2(t5) {
      return (20091 * t5 >> 16) + t5;
    }
    function ne2(t5, e3, r3, n3) {
      var i3, o3 = 0, s3 = a2(16);
      for (i3 = 0; 4 > i3; ++i3) {
        var c4 = t5[e3 + 0] + t5[e3 + 8], u4 = t5[e3 + 0] - t5[e3 + 8], h4 = (35468 * t5[e3 + 4] >> 16) - re2(t5[e3 + 12]), l4 = re2(t5[e3 + 4]) + (35468 * t5[e3 + 12] >> 16);
        s3[o3 + 0] = c4 + l4, s3[o3 + 1] = u4 + h4, s3[o3 + 2] = u4 - h4, s3[o3 + 3] = c4 - l4, o3 += 4, e3++;
      }
      for (i3 = o3 = 0; 4 > i3; ++i3)
        c4 = (t5 = s3[o3 + 0] + 4) + s3[o3 + 8], u4 = t5 - s3[o3 + 8], h4 = (35468 * s3[o3 + 4] >> 16) - re2(s3[o3 + 12]), te2(r3, n3, 0, 0, c4 + (l4 = re2(s3[o3 + 4]) + (35468 * s3[o3 + 12] >> 16))), te2(r3, n3, 1, 0, u4 + h4), te2(r3, n3, 2, 0, u4 - h4), te2(r3, n3, 3, 0, c4 - l4), o3++, n3 += 32;
    }
    function ie2(t5, e3, r3, n3) {
      var i3 = t5[e3 + 0] + 4, a3 = 35468 * t5[e3 + 4] >> 16, o3 = re2(t5[e3 + 4]), s3 = 35468 * t5[e3 + 1] >> 16;
      ee2(r3, n3, 0, i3 + o3, t5 = re2(t5[e3 + 1]), s3), ee2(r3, n3, 1, i3 + a3, t5, s3), ee2(r3, n3, 2, i3 - a3, t5, s3), ee2(r3, n3, 3, i3 - o3, t5, s3);
    }
    function ae2(t5, e3, r3, n3, i3) {
      ne2(t5, e3, r3, n3), i3 && ne2(t5, e3 + 16, r3, n3 + 4);
    }
    function oe2(t5, e3, r3, n3) {
      on3(t5, e3 + 0, r3, n3, 1), on3(t5, e3 + 32, r3, n3 + 128, 1);
    }
    function se2(t5, e3, r3, n3) {
      var i3;
      for (t5 = t5[e3 + 0] + 4, i3 = 0; 4 > i3; ++i3)
        for (e3 = 0; 4 > e3; ++e3)
          te2(r3, n3, e3, i3, t5);
    }
    function ce2(t5, e3, r3, n3) {
      t5[e3 + 0] && un(t5, e3 + 0, r3, n3), t5[e3 + 16] && un(t5, e3 + 16, r3, n3 + 4), t5[e3 + 32] && un(t5, e3 + 32, r3, n3 + 128), t5[e3 + 48] && un(t5, e3 + 48, r3, n3 + 128 + 4);
    }
    function ue2(t5, e3, r3, n3) {
      var i3, o3 = a2(16);
      for (i3 = 0; 4 > i3; ++i3) {
        var s3 = t5[e3 + 0 + i3] + t5[e3 + 12 + i3], c4 = t5[e3 + 4 + i3] + t5[e3 + 8 + i3], u4 = t5[e3 + 4 + i3] - t5[e3 + 8 + i3], h4 = t5[e3 + 0 + i3] - t5[e3 + 12 + i3];
        o3[0 + i3] = s3 + c4, o3[8 + i3] = s3 - c4, o3[4 + i3] = h4 + u4, o3[12 + i3] = h4 - u4;
      }
      for (i3 = 0; 4 > i3; ++i3)
        s3 = (t5 = o3[0 + 4 * i3] + 3) + o3[3 + 4 * i3], c4 = o3[1 + 4 * i3] + o3[2 + 4 * i3], u4 = o3[1 + 4 * i3] - o3[2 + 4 * i3], h4 = t5 - o3[3 + 4 * i3], r3[n3 + 0] = s3 + c4 >> 3, r3[n3 + 16] = h4 + u4 >> 3, r3[n3 + 32] = s3 - c4 >> 3, r3[n3 + 48] = h4 - u4 >> 3, n3 += 64;
    }
    function he2(t5, e3, r3) {
      var n3, i3 = e3 - 32, a3 = Bn, o3 = 255 - t5[i3 - 1];
      for (n3 = 0; n3 < r3; ++n3) {
        var s3, c4 = a3, u4 = o3 + t5[e3 - 1];
        for (s3 = 0; s3 < r3; ++s3)
          t5[e3 + s3] = c4[u4 + t5[i3 + s3]];
        e3 += 32;
      }
    }
    function le2(t5, e3) {
      he2(t5, e3, 4);
    }
    function fe2(t5, e3) {
      he2(t5, e3, 8);
    }
    function de2(t5, e3) {
      he2(t5, e3, 16);
    }
    function pe2(t5, e3) {
      var r3;
      for (r3 = 0; 16 > r3; ++r3)
        n2(t5, e3 + 32 * r3, t5, e3 - 32, 16);
    }
    function ge2(t5, e3) {
      var r3;
      for (r3 = 16; 0 < r3; --r3)
        i2(t5, e3, t5[e3 - 1], 16), e3 += 32;
    }
    function me2(t5, e3, r3) {
      var n3;
      for (n3 = 0; 16 > n3; ++n3)
        i2(e3, r3 + 32 * n3, t5, 16);
    }
    function ve2(t5, e3) {
      var r3, n3 = 16;
      for (r3 = 0; 16 > r3; ++r3)
        n3 += t5[e3 - 1 + 32 * r3] + t5[e3 + r3 - 32];
      me2(n3 >> 5, t5, e3);
    }
    function be2(t5, e3) {
      var r3, n3 = 8;
      for (r3 = 0; 16 > r3; ++r3)
        n3 += t5[e3 - 1 + 32 * r3];
      me2(n3 >> 4, t5, e3);
    }
    function ye2(t5, e3) {
      var r3, n3 = 8;
      for (r3 = 0; 16 > r3; ++r3)
        n3 += t5[e3 + r3 - 32];
      me2(n3 >> 4, t5, e3);
    }
    function we2(t5, e3) {
      me2(128, t5, e3);
    }
    function Ne2(t5, e3, r3) {
      return t5 + 2 * e3 + r3 + 2 >> 2;
    }
    function Le2(t5, e3) {
      var r3, i3 = e3 - 32;
      i3 = new Uint8Array([Ne2(t5[i3 - 1], t5[i3 + 0], t5[i3 + 1]), Ne2(t5[i3 + 0], t5[i3 + 1], t5[i3 + 2]), Ne2(t5[i3 + 1], t5[i3 + 2], t5[i3 + 3]), Ne2(t5[i3 + 2], t5[i3 + 3], t5[i3 + 4])]);
      for (r3 = 0; 4 > r3; ++r3)
        n2(t5, e3 + 32 * r3, i3, 0, i3.length);
    }
    function Ae(t5, e3) {
      var r3 = t5[e3 - 1], n3 = t5[e3 - 1 + 32], i3 = t5[e3 - 1 + 64], a3 = t5[e3 - 1 + 96];
      I2(t5, e3 + 0, 16843009 * Ne2(t5[e3 - 1 - 32], r3, n3)), I2(t5, e3 + 32, 16843009 * Ne2(r3, n3, i3)), I2(t5, e3 + 64, 16843009 * Ne2(n3, i3, a3)), I2(t5, e3 + 96, 16843009 * Ne2(i3, a3, a3));
    }
    function xe(t5, e3) {
      var r3, n3 = 4;
      for (r3 = 0; 4 > r3; ++r3)
        n3 += t5[e3 + r3 - 32] + t5[e3 - 1 + 32 * r3];
      for (n3 >>= 3, r3 = 0; 4 > r3; ++r3)
        i2(t5, e3 + 32 * r3, n3, 4);
    }
    function Se(t5, e3) {
      var r3 = t5[e3 - 1 + 0], n3 = t5[e3 - 1 + 32], i3 = t5[e3 - 1 + 64], a3 = t5[e3 - 1 - 32], o3 = t5[e3 + 0 - 32], s3 = t5[e3 + 1 - 32], c4 = t5[e3 + 2 - 32], u4 = t5[e3 + 3 - 32];
      t5[e3 + 0 + 96] = Ne2(n3, i3, t5[e3 - 1 + 96]), t5[e3 + 1 + 96] = t5[e3 + 0 + 64] = Ne2(r3, n3, i3), t5[e3 + 2 + 96] = t5[e3 + 1 + 64] = t5[e3 + 0 + 32] = Ne2(a3, r3, n3), t5[e3 + 3 + 96] = t5[e3 + 2 + 64] = t5[e3 + 1 + 32] = t5[e3 + 0 + 0] = Ne2(o3, a3, r3), t5[e3 + 3 + 64] = t5[e3 + 2 + 32] = t5[e3 + 1 + 0] = Ne2(s3, o3, a3), t5[e3 + 3 + 32] = t5[e3 + 2 + 0] = Ne2(c4, s3, o3), t5[e3 + 3 + 0] = Ne2(u4, c4, s3);
    }
    function _e(t5, e3) {
      var r3 = t5[e3 + 1 - 32], n3 = t5[e3 + 2 - 32], i3 = t5[e3 + 3 - 32], a3 = t5[e3 + 4 - 32], o3 = t5[e3 + 5 - 32], s3 = t5[e3 + 6 - 32], c4 = t5[e3 + 7 - 32];
      t5[e3 + 0 + 0] = Ne2(t5[e3 + 0 - 32], r3, n3), t5[e3 + 1 + 0] = t5[e3 + 0 + 32] = Ne2(r3, n3, i3), t5[e3 + 2 + 0] = t5[e3 + 1 + 32] = t5[e3 + 0 + 64] = Ne2(n3, i3, a3), t5[e3 + 3 + 0] = t5[e3 + 2 + 32] = t5[e3 + 1 + 64] = t5[e3 + 0 + 96] = Ne2(i3, a3, o3), t5[e3 + 3 + 32] = t5[e3 + 2 + 64] = t5[e3 + 1 + 96] = Ne2(a3, o3, s3), t5[e3 + 3 + 64] = t5[e3 + 2 + 96] = Ne2(o3, s3, c4), t5[e3 + 3 + 96] = Ne2(s3, c4, c4);
    }
    function Pe(t5, e3) {
      var r3 = t5[e3 - 1 + 0], n3 = t5[e3 - 1 + 32], i3 = t5[e3 - 1 + 64], a3 = t5[e3 - 1 - 32], o3 = t5[e3 + 0 - 32], s3 = t5[e3 + 1 - 32], c4 = t5[e3 + 2 - 32], u4 = t5[e3 + 3 - 32];
      t5[e3 + 0 + 0] = t5[e3 + 1 + 64] = a3 + o3 + 1 >> 1, t5[e3 + 1 + 0] = t5[e3 + 2 + 64] = o3 + s3 + 1 >> 1, t5[e3 + 2 + 0] = t5[e3 + 3 + 64] = s3 + c4 + 1 >> 1, t5[e3 + 3 + 0] = c4 + u4 + 1 >> 1, t5[e3 + 0 + 96] = Ne2(i3, n3, r3), t5[e3 + 0 + 64] = Ne2(n3, r3, a3), t5[e3 + 0 + 32] = t5[e3 + 1 + 96] = Ne2(r3, a3, o3), t5[e3 + 1 + 32] = t5[e3 + 2 + 96] = Ne2(a3, o3, s3), t5[e3 + 2 + 32] = t5[e3 + 3 + 96] = Ne2(o3, s3, c4), t5[e3 + 3 + 32] = Ne2(s3, c4, u4);
    }
    function ke(t5, e3) {
      var r3 = t5[e3 + 0 - 32], n3 = t5[e3 + 1 - 32], i3 = t5[e3 + 2 - 32], a3 = t5[e3 + 3 - 32], o3 = t5[e3 + 4 - 32], s3 = t5[e3 + 5 - 32], c4 = t5[e3 + 6 - 32], u4 = t5[e3 + 7 - 32];
      t5[e3 + 0 + 0] = r3 + n3 + 1 >> 1, t5[e3 + 1 + 0] = t5[e3 + 0 + 64] = n3 + i3 + 1 >> 1, t5[e3 + 2 + 0] = t5[e3 + 1 + 64] = i3 + a3 + 1 >> 1, t5[e3 + 3 + 0] = t5[e3 + 2 + 64] = a3 + o3 + 1 >> 1, t5[e3 + 0 + 32] = Ne2(r3, n3, i3), t5[e3 + 1 + 32] = t5[e3 + 0 + 96] = Ne2(n3, i3, a3), t5[e3 + 2 + 32] = t5[e3 + 1 + 96] = Ne2(i3, a3, o3), t5[e3 + 3 + 32] = t5[e3 + 2 + 96] = Ne2(a3, o3, s3), t5[e3 + 3 + 64] = Ne2(o3, s3, c4), t5[e3 + 3 + 96] = Ne2(s3, c4, u4);
    }
    function Ie(t5, e3) {
      var r3 = t5[e3 - 1 + 0], n3 = t5[e3 - 1 + 32], i3 = t5[e3 - 1 + 64], a3 = t5[e3 - 1 + 96];
      t5[e3 + 0 + 0] = r3 + n3 + 1 >> 1, t5[e3 + 2 + 0] = t5[e3 + 0 + 32] = n3 + i3 + 1 >> 1, t5[e3 + 2 + 32] = t5[e3 + 0 + 64] = i3 + a3 + 1 >> 1, t5[e3 + 1 + 0] = Ne2(r3, n3, i3), t5[e3 + 3 + 0] = t5[e3 + 1 + 32] = Ne2(n3, i3, a3), t5[e3 + 3 + 32] = t5[e3 + 1 + 64] = Ne2(i3, a3, a3), t5[e3 + 3 + 64] = t5[e3 + 2 + 64] = t5[e3 + 0 + 96] = t5[e3 + 1 + 96] = t5[e3 + 2 + 96] = t5[e3 + 3 + 96] = a3;
    }
    function Fe(t5, e3) {
      var r3 = t5[e3 - 1 + 0], n3 = t5[e3 - 1 + 32], i3 = t5[e3 - 1 + 64], a3 = t5[e3 - 1 + 96], o3 = t5[e3 - 1 - 32], s3 = t5[e3 + 0 - 32], c4 = t5[e3 + 1 - 32], u4 = t5[e3 + 2 - 32];
      t5[e3 + 0 + 0] = t5[e3 + 2 + 32] = r3 + o3 + 1 >> 1, t5[e3 + 0 + 32] = t5[e3 + 2 + 64] = n3 + r3 + 1 >> 1, t5[e3 + 0 + 64] = t5[e3 + 2 + 96] = i3 + n3 + 1 >> 1, t5[e3 + 0 + 96] = a3 + i3 + 1 >> 1, t5[e3 + 3 + 0] = Ne2(s3, c4, u4), t5[e3 + 2 + 0] = Ne2(o3, s3, c4), t5[e3 + 1 + 0] = t5[e3 + 3 + 32] = Ne2(r3, o3, s3), t5[e3 + 1 + 32] = t5[e3 + 3 + 64] = Ne2(n3, r3, o3), t5[e3 + 1 + 64] = t5[e3 + 3 + 96] = Ne2(i3, n3, r3), t5[e3 + 1 + 96] = Ne2(a3, i3, n3);
    }
    function Ce(t5, e3) {
      var r3;
      for (r3 = 0; 8 > r3; ++r3)
        n2(t5, e3 + 32 * r3, t5, e3 - 32, 8);
    }
    function je(t5, e3) {
      var r3;
      for (r3 = 0; 8 > r3; ++r3)
        i2(t5, e3, t5[e3 - 1], 8), e3 += 32;
    }
    function Oe(t5, e3, r3) {
      var n3;
      for (n3 = 0; 8 > n3; ++n3)
        i2(e3, r3 + 32 * n3, t5, 8);
    }
    function Be(t5, e3) {
      var r3, n3 = 8;
      for (r3 = 0; 8 > r3; ++r3)
        n3 += t5[e3 + r3 - 32] + t5[e3 - 1 + 32 * r3];
      Oe(n3 >> 4, t5, e3);
    }
    function Me(t5, e3) {
      var r3, n3 = 4;
      for (r3 = 0; 8 > r3; ++r3)
        n3 += t5[e3 + r3 - 32];
      Oe(n3 >> 3, t5, e3);
    }
    function Ee(t5, e3) {
      var r3, n3 = 4;
      for (r3 = 0; 8 > r3; ++r3)
        n3 += t5[e3 - 1 + 32 * r3];
      Oe(n3 >> 3, t5, e3);
    }
    function qe(t5, e3) {
      Oe(128, t5, e3);
    }
    function De(t5, e3, r3) {
      var n3 = t5[e3 - r3], i3 = t5[e3 + 0], a3 = 3 * (i3 - n3) + jn[1020 + t5[e3 - 2 * r3] - t5[e3 + r3]], o3 = On[112 + (a3 + 4 >> 3)];
      t5[e3 - r3] = Bn[255 + n3 + On[112 + (a3 + 3 >> 3)]], t5[e3 + 0] = Bn[255 + i3 - o3];
    }
    function Re(t5, e3, r3, n3) {
      var i3 = t5[e3 + 0], a3 = t5[e3 + r3];
      return Mn[255 + t5[e3 - 2 * r3] - t5[e3 - r3]] > n3 || Mn[255 + a3 - i3] > n3;
    }
    function Te(t5, e3, r3, n3) {
      return 4 * Mn[255 + t5[e3 - r3] - t5[e3 + 0]] + Mn[255 + t5[e3 - 2 * r3] - t5[e3 + r3]] <= n3;
    }
    function Ue(t5, e3, r3, n3, i3) {
      var a3 = t5[e3 - 3 * r3], o3 = t5[e3 - 2 * r3], s3 = t5[e3 - r3], c4 = t5[e3 + 0], u4 = t5[e3 + r3], h4 = t5[e3 + 2 * r3], l4 = t5[e3 + 3 * r3];
      return 4 * Mn[255 + s3 - c4] + Mn[255 + o3 - u4] > n3 ? 0 : Mn[255 + t5[e3 - 4 * r3] - a3] <= i3 && Mn[255 + a3 - o3] <= i3 && Mn[255 + o3 - s3] <= i3 && Mn[255 + l4 - h4] <= i3 && Mn[255 + h4 - u4] <= i3 && Mn[255 + u4 - c4] <= i3;
    }
    function ze(t5, e3, r3, n3) {
      var i3 = 2 * n3 + 1;
      for (n3 = 0; 16 > n3; ++n3)
        Te(t5, e3 + n3, r3, i3) && De(t5, e3 + n3, r3);
    }
    function He(t5, e3, r3, n3) {
      var i3 = 2 * n3 + 1;
      for (n3 = 0; 16 > n3; ++n3)
        Te(t5, e3 + n3 * r3, 1, i3) && De(t5, e3 + n3 * r3, 1);
    }
    function We(t5, e3, r3, n3) {
      var i3;
      for (i3 = 3; 0 < i3; --i3)
        ze(t5, e3 += 4 * r3, r3, n3);
    }
    function Ve(t5, e3, r3, n3) {
      var i3;
      for (i3 = 3; 0 < i3; --i3)
        He(t5, e3 += 4, r3, n3);
    }
    function Ge(t5, e3, r3, n3, i3, a3, o3, s3) {
      for (a3 = 2 * a3 + 1; 0 < i3--; ) {
        if (Ue(t5, e3, r3, a3, o3))
          if (Re(t5, e3, r3, s3))
            De(t5, e3, r3);
          else {
            var c4 = t5, u4 = e3, h4 = r3, l4 = c4[u4 - 2 * h4], f4 = c4[u4 - h4], d5 = c4[u4 + 0], p4 = c4[u4 + h4], g4 = c4[u4 + 2 * h4], m4 = 27 * (b4 = jn[1020 + 3 * (d5 - f4) + jn[1020 + l4 - p4]]) + 63 >> 7, v5 = 18 * b4 + 63 >> 7, b4 = 9 * b4 + 63 >> 7;
            c4[u4 - 3 * h4] = Bn[255 + c4[u4 - 3 * h4] + b4], c4[u4 - 2 * h4] = Bn[255 + l4 + v5], c4[u4 - h4] = Bn[255 + f4 + m4], c4[u4 + 0] = Bn[255 + d5 - m4], c4[u4 + h4] = Bn[255 + p4 - v5], c4[u4 + 2 * h4] = Bn[255 + g4 - b4];
          }
        e3 += n3;
      }
    }
    function Ye(t5, e3, r3, n3, i3, a3, o3, s3) {
      for (a3 = 2 * a3 + 1; 0 < i3--; ) {
        if (Ue(t5, e3, r3, a3, o3))
          if (Re(t5, e3, r3, s3))
            De(t5, e3, r3);
          else {
            var c4 = t5, u4 = e3, h4 = r3, l4 = c4[u4 - h4], f4 = c4[u4 + 0], d5 = c4[u4 + h4], p4 = On[112 + ((g4 = 3 * (f4 - l4)) + 4 >> 3)], g4 = On[112 + (g4 + 3 >> 3)], m4 = p4 + 1 >> 1;
            c4[u4 - 2 * h4] = Bn[255 + c4[u4 - 2 * h4] + m4], c4[u4 - h4] = Bn[255 + l4 + g4], c4[u4 + 0] = Bn[255 + f4 - p4], c4[u4 + h4] = Bn[255 + d5 - m4];
          }
        e3 += n3;
      }
    }
    function Je(t5, e3, r3, n3, i3, a3) {
      Ge(t5, e3, r3, 1, 16, n3, i3, a3);
    }
    function Xe(t5, e3, r3, n3, i3, a3) {
      Ge(t5, e3, 1, r3, 16, n3, i3, a3);
    }
    function Ke(t5, e3, r3, n3, i3, a3) {
      var o3;
      for (o3 = 3; 0 < o3; --o3)
        Ye(t5, e3 += 4 * r3, r3, 1, 16, n3, i3, a3);
    }
    function Ze(t5, e3, r3, n3, i3, a3) {
      var o3;
      for (o3 = 3; 0 < o3; --o3)
        Ye(t5, e3 += 4, 1, r3, 16, n3, i3, a3);
    }
    function $e(t5, e3, r3, n3, i3, a3, o3, s3) {
      Ge(t5, e3, i3, 1, 8, a3, o3, s3), Ge(r3, n3, i3, 1, 8, a3, o3, s3);
    }
    function Qe(t5, e3, r3, n3, i3, a3, o3, s3) {
      Ge(t5, e3, 1, i3, 8, a3, o3, s3), Ge(r3, n3, 1, i3, 8, a3, o3, s3);
    }
    function tr(t5, e3, r3, n3, i3, a3, o3, s3) {
      Ye(t5, e3 + 4 * i3, i3, 1, 8, a3, o3, s3), Ye(r3, n3 + 4 * i3, i3, 1, 8, a3, o3, s3);
    }
    function er(t5, e3, r3, n3, i3, a3, o3, s3) {
      Ye(t5, e3 + 4, 1, i3, 8, a3, o3, s3), Ye(r3, n3 + 4, 1, i3, 8, a3, o3, s3);
    }
    function rr() {
      this.ba = new ot2(), this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ct2(), this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
    }
    function nr() {
      this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
    }
    function ir() {
      this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
    }
    function ar() {
      this.ua = 0, this.Wa = new M2(), this.vb = new M2(), this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d4(), this.yc = new l3();
    }
    function or() {
      this.xb = this.a = 0, this.l = new Gt2(), this.ca = new ot2(), this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N3(), this.Pb = 0, this.wd = new N3(), this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar(), this.ab = 0, this.gc = o2(4, ir), this.Oc = 0;
    }
    function sr() {
      this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt2(), this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
    }
    function cr(t5, e3, r3, n3, i3, a3, o3) {
      for (t5 = null == t5 ? 0 : t5[e3 + 0], e3 = 0; e3 < o3; ++e3)
        i3[a3 + e3] = t5 + r3[n3 + e3] & 255, t5 = i3[a3 + e3];
    }
    function ur2(t5, e3, r3, n3, i3, a3, o3) {
      var s3;
      if (null == t5)
        cr(null, null, r3, n3, i3, a3, o3);
      else
        for (s3 = 0; s3 < o3; ++s3)
          i3[a3 + s3] = t5[e3 + s3] + r3[n3 + s3] & 255;
    }
    function hr(t5, e3, r3, n3, i3, a3, o3) {
      if (null == t5)
        cr(null, null, r3, n3, i3, a3, o3);
      else {
        var s3, c4 = t5[e3 + 0], u4 = c4, h4 = c4;
        for (s3 = 0; s3 < o3; ++s3)
          u4 = h4 + (c4 = t5[e3 + s3]) - u4, h4 = r3[n3 + s3] + (-256 & u4 ? 0 > u4 ? 0 : 255 : u4) & 255, u4 = c4, i3[a3 + s3] = h4;
      }
    }
    function lr(t5, r3, i3, o3) {
      var s3 = r3.width, c4 = r3.o;
      if (e2(null != t5 && null != r3), 0 > i3 || 0 >= o3 || i3 + o3 > c4)
        return null;
      if (!t5.Cc) {
        if (null == t5.ga) {
          var u4;
          if (t5.ga = new sr(), (u4 = null == t5.ga) || (u4 = r3.width * r3.o, e2(0 == t5.Gb.length), t5.Gb = a2(u4), t5.Uc = 0, null == t5.Gb ? u4 = 0 : (t5.mb = t5.Gb, t5.nb = t5.Uc, t5.rc = null, u4 = 1), u4 = !u4), !u4) {
            u4 = t5.ga;
            var h4 = t5.Fa, l4 = t5.P, f4 = t5.qc, d5 = t5.mb, p4 = t5.nb, g4 = l4 + 1, m4 = f4 - 1, b4 = u4.l;
            if (e2(null != h4 && null != d5 && null != r3), mi[0] = null, mi[1] = cr, mi[2] = ur2, mi[3] = hr, u4.ca = d5, u4.tb = p4, u4.c = r3.width, u4.i = r3.height, e2(0 < u4.c && 0 < u4.i), 1 >= f4)
              r3 = 0;
            else if (u4.$a = h4[l4 + 0] >> 0 & 3, u4.Z = h4[l4 + 0] >> 2 & 3, u4.Lc = h4[l4 + 0] >> 4 & 3, l4 = h4[l4 + 0] >> 6 & 3, 0 > u4.$a || 1 < u4.$a || 4 <= u4.Z || 1 < u4.Lc || l4)
              r3 = 0;
            else if (b4.put = dt2, b4.ac = ft2, b4.bc = pt2, b4.ma = u4, b4.width = r3.width, b4.height = r3.height, b4.Da = r3.Da, b4.v = r3.v, b4.va = r3.va, b4.j = r3.j, b4.o = r3.o, u4.$a)
              t: {
                e2(1 == u4.$a), r3 = kt2();
                e:
                  for (; ; ) {
                    if (null == r3) {
                      r3 = 0;
                      break t;
                    }
                    if (e2(null != u4), u4.mc = r3, r3.c = u4.c, r3.i = u4.i, r3.l = u4.l, r3.l.ma = u4, r3.l.width = u4.c, r3.l.height = u4.i, r3.a = 0, v3(r3.m, h4, g4, m4), !It2(u4.c, u4.i, 1, r3, null))
                      break e;
                    if (1 == r3.ab && 3 == r3.gc[0].hc && At2(r3.s) ? (u4.ic = 1, h4 = r3.c * r3.i, r3.Ta = null, r3.Ua = 0, r3.V = a2(h4), r3.Ba = 0, null == r3.V ? (r3.a = 1, r3 = 0) : r3 = 1) : (u4.ic = 0, r3 = Ft2(r3, u4.c)), !r3)
                      break e;
                    r3 = 1;
                    break t;
                  }
                u4.mc = null, r3 = 0;
              }
            else
              r3 = m4 >= u4.c * u4.i;
            u4 = !r3;
          }
          if (u4)
            return null;
          1 != t5.ga.Lc ? t5.Ga = 0 : o3 = c4 - i3;
        }
        e2(null != t5.ga), e2(i3 + o3 <= c4);
        t: {
          if (r3 = (h4 = t5.ga).c, c4 = h4.l.o, 0 == h4.$a) {
            if (g4 = t5.rc, m4 = t5.Vc, b4 = t5.Fa, l4 = t5.P + 1 + i3 * r3, f4 = t5.mb, d5 = t5.nb + i3 * r3, e2(l4 <= t5.P + t5.qc), 0 != h4.Z)
              for (e2(null != mi[h4.Z]), u4 = 0; u4 < o3; ++u4)
                mi[h4.Z](g4, m4, b4, l4, f4, d5, r3), g4 = f4, m4 = d5, d5 += r3, l4 += r3;
            else
              for (u4 = 0; u4 < o3; ++u4)
                n2(f4, d5, b4, l4, r3), g4 = f4, m4 = d5, d5 += r3, l4 += r3;
            t5.rc = g4, t5.Vc = m4;
          } else {
            if (e2(null != h4.mc), r3 = i3 + o3, e2(null != (u4 = h4.mc)), e2(r3 <= u4.i), u4.C >= r3)
              r3 = 1;
            else if (h4.ic || mr(), h4.ic) {
              h4 = u4.V, g4 = u4.Ba, m4 = u4.c;
              var y4 = u4.i, w4 = (b4 = 1, l4 = u4.$ / m4, f4 = u4.$ % m4, d5 = u4.m, p4 = u4.s, u4.$), N4 = m4 * y4, L4 = m4 * r3, x3 = p4.wc, _3 = w4 < L4 ? wt2(p4, f4, l4) : null;
              e2(w4 <= N4), e2(r3 <= y4), e2(At2(p4));
              e:
                for (; ; ) {
                  for (; !d5.h && w4 < L4; ) {
                    if (f4 & x3 || (_3 = wt2(p4, f4, l4)), e2(null != _3), S2(d5), 256 > (y4 = bt2(_3.G[0], _3.H[0], d5)))
                      h4[g4 + w4] = y4, ++w4, ++f4 >= m4 && (f4 = 0, ++l4 <= r3 && !(l4 % 16) && St2(u4, l4));
                    else {
                      if (!(280 > y4)) {
                        b4 = 0;
                        break e;
                      }
                      y4 = mt2(y4 - 256, d5);
                      var P3, k3 = bt2(_3.G[4], _3.H[4], d5);
                      if (S2(d5), !(w4 >= (k3 = vt2(m4, k3 = mt2(k3, d5))) && N4 - w4 >= y4)) {
                        b4 = 0;
                        break e;
                      }
                      for (P3 = 0; P3 < y4; ++P3)
                        h4[g4 + w4 + P3] = h4[g4 + w4 + P3 - k3];
                      for (w4 += y4, f4 += y4; f4 >= m4; )
                        f4 -= m4, ++l4 <= r3 && !(l4 % 16) && St2(u4, l4);
                      w4 < L4 && f4 & x3 && (_3 = wt2(p4, f4, l4));
                    }
                    e2(d5.h == A3(d5));
                  }
                  St2(u4, l4 > r3 ? r3 : l4);
                  break e;
                }
              !b4 || d5.h && w4 < N4 ? (b4 = 0, u4.a = d5.h ? 5 : 3) : u4.$ = w4, r3 = b4;
            } else
              r3 = _t2(u4, u4.V, u4.Ba, u4.c, u4.i, r3, Ct2);
            if (!r3) {
              o3 = 0;
              break t;
            }
          }
          i3 + o3 >= c4 && (t5.Cc = 1), o3 = 1;
        }
        if (!o3)
          return null;
        if (t5.Cc && (null != (o3 = t5.ga) && (o3.mc = null), t5.ga = null, 0 < t5.Ga))
          return alert("todo:WebPDequantizeLevels"), null;
      }
      return t5.nb + i3 * s3;
    }
    function fr(t5, e3, r3, n3, i3, a3) {
      for (; 0 < i3--; ) {
        var o3, s3 = t5, c4 = e3 + (r3 ? 1 : 0), u4 = t5, h4 = e3 + (r3 ? 0 : 3);
        for (o3 = 0; o3 < n3; ++o3) {
          var l4 = u4[h4 + 4 * o3];
          255 != l4 && (l4 *= 32897, s3[c4 + 4 * o3 + 0] = s3[c4 + 4 * o3 + 0] * l4 >> 23, s3[c4 + 4 * o3 + 1] = s3[c4 + 4 * o3 + 1] * l4 >> 23, s3[c4 + 4 * o3 + 2] = s3[c4 + 4 * o3 + 2] * l4 >> 23);
        }
        e3 += a3;
      }
    }
    function dr(t5, e3, r3, n3, i3) {
      for (; 0 < n3--; ) {
        var a3;
        for (a3 = 0; a3 < r3; ++a3) {
          var o3 = t5[e3 + 2 * a3 + 0], s3 = 15 & (u4 = t5[e3 + 2 * a3 + 1]), c4 = 4369 * s3, u4 = (240 & u4 | u4 >> 4) * c4 >> 16;
          t5[e3 + 2 * a3 + 0] = (240 & o3 | o3 >> 4) * c4 >> 16 & 240 | (15 & o3 | o3 << 4) * c4 >> 16 >> 4 & 15, t5[e3 + 2 * a3 + 1] = 240 & u4 | s3;
        }
        e3 += i3;
      }
    }
    function pr(t5, e3, r3, n3, i3, a3, o3, s3) {
      var c4, u4, h4 = 255;
      for (u4 = 0; u4 < i3; ++u4) {
        for (c4 = 0; c4 < n3; ++c4) {
          var l4 = t5[e3 + c4];
          a3[o3 + 4 * c4] = l4, h4 &= l4;
        }
        e3 += r3, o3 += s3;
      }
      return 255 != h4;
    }
    function gr(t5, e3, r3, n3, i3) {
      var a3;
      for (a3 = 0; a3 < i3; ++a3)
        r3[n3 + a3] = t5[e3 + a3] >> 8;
    }
    function mr() {
      An = fr, xn = dr, Sn = pr, _n = gr;
    }
    function vr(r3, n3, i3) {
      t4[r3] = function(t5, r4, a3, o3, s3, c4, u4, h4, l4, f4, d5, p4, g4, m4, v5, b4, y4) {
        var w4, N4 = y4 - 1 >> 1, L4 = s3[c4 + 0] | u4[h4 + 0] << 16, A4 = l4[f4 + 0] | d5[p4 + 0] << 16;
        e2(null != t5);
        var x3 = 3 * L4 + A4 + 131074 >> 2;
        for (n3(t5[r4 + 0], 255 & x3, x3 >> 16, g4, m4), null != a3 && (x3 = 3 * A4 + L4 + 131074 >> 2, n3(a3[o3 + 0], 255 & x3, x3 >> 16, v5, b4)), w4 = 1; w4 <= N4; ++w4) {
          var S3 = s3[c4 + w4] | u4[h4 + w4] << 16, _3 = l4[f4 + w4] | d5[p4 + w4] << 16, P3 = L4 + S3 + A4 + _3 + 524296, k3 = P3 + 2 * (S3 + A4) >> 3;
          x3 = k3 + L4 >> 1, L4 = (P3 = P3 + 2 * (L4 + _3) >> 3) + S3 >> 1, n3(t5[r4 + 2 * w4 - 1], 255 & x3, x3 >> 16, g4, m4 + (2 * w4 - 1) * i3), n3(t5[r4 + 2 * w4 - 0], 255 & L4, L4 >> 16, g4, m4 + (2 * w4 - 0) * i3), null != a3 && (x3 = P3 + A4 >> 1, L4 = k3 + _3 >> 1, n3(a3[o3 + 2 * w4 - 1], 255 & x3, x3 >> 16, v5, b4 + (2 * w4 - 1) * i3), n3(a3[o3 + 2 * w4 + 0], 255 & L4, L4 >> 16, v5, b4 + (2 * w4 + 0) * i3)), L4 = S3, A4 = _3;
        }
        1 & y4 || (x3 = 3 * L4 + A4 + 131074 >> 2, n3(t5[r4 + y4 - 1], 255 & x3, x3 >> 16, g4, m4 + (y4 - 1) * i3), null != a3 && (x3 = 3 * A4 + L4 + 131074 >> 2, n3(a3[o3 + y4 - 1], 255 & x3, x3 >> 16, v5, b4 + (y4 - 1) * i3)));
      };
    }
    function br() {
      vi[En] = bi, vi[qn] = wi, vi[Dn] = yi, vi[Rn] = Ni, vi[Tn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Wn] = Ni, vi[Vn] = Li, vi[Gn] = Ai;
    }
    function yr(t5) {
      return t5 & ~Fi ? 0 > t5 ? 0 : 255 : t5 >> Ii;
    }
    function wr(t5, e3) {
      return yr((19077 * t5 >> 8) + (26149 * e3 >> 8) - 14234);
    }
    function Nr(t5, e3, r3) {
      return yr((19077 * t5 >> 8) - (6419 * e3 >> 8) - (13320 * r3 >> 8) + 8708);
    }
    function Lr(t5, e3) {
      return yr((19077 * t5 >> 8) + (33050 * e3 >> 8) - 17685);
    }
    function Ar(t5, e3, r3, n3, i3) {
      n3[i3 + 0] = wr(t5, r3), n3[i3 + 1] = Nr(t5, e3, r3), n3[i3 + 2] = Lr(t5, e3);
    }
    function xr(t5, e3, r3, n3, i3) {
      n3[i3 + 0] = Lr(t5, e3), n3[i3 + 1] = Nr(t5, e3, r3), n3[i3 + 2] = wr(t5, r3);
    }
    function Sr(t5, e3, r3, n3, i3) {
      var a3 = Nr(t5, e3, r3);
      e3 = a3 << 3 & 224 | Lr(t5, e3) >> 3, n3[i3 + 0] = 248 & wr(t5, r3) | a3 >> 5, n3[i3 + 1] = e3;
    }
    function _r(t5, e3, r3, n3, i3) {
      var a3 = 240 & Lr(t5, e3) | 15;
      n3[i3 + 0] = 240 & wr(t5, r3) | Nr(t5, e3, r3) >> 4, n3[i3 + 1] = a3;
    }
    function Pr(t5, e3, r3, n3, i3) {
      n3[i3 + 0] = 255, Ar(t5, e3, r3, n3, i3 + 1);
    }
    function kr(t5, e3, r3, n3, i3) {
      xr(t5, e3, r3, n3, i3), n3[i3 + 3] = 255;
    }
    function Ir(t5, e3, r3, n3, i3) {
      Ar(t5, e3, r3, n3, i3), n3[i3 + 3] = 255;
    }
    function Vt2(t5, e3) {
      return 0 > t5 ? 0 : t5 > e3 ? e3 : t5;
    }
    function Fr(e3, r3, n3) {
      t4[e3] = function(t5, e4, i3, a3, o3, s3, c4, u4, h4) {
        for (var l4 = u4 + (-2 & h4) * n3; u4 != l4; )
          r3(t5[e4 + 0], i3[a3 + 0], o3[s3 + 0], c4, u4), r3(t5[e4 + 1], i3[a3 + 0], o3[s3 + 0], c4, u4 + n3), e4 += 2, ++a3, ++s3, u4 += 2 * n3;
        1 & h4 && r3(t5[e4 + 0], i3[a3 + 0], o3[s3 + 0], c4, u4);
      };
    }
    function Cr(t5, e3, r3) {
      return 0 == r3 ? 0 == t5 ? 0 == e3 ? 6 : 5 : 0 == e3 ? 4 : 0 : r3;
    }
    function jr(t5, e3, r3, n3, i3) {
      switch (t5 >>> 30) {
        case 3:
          on3(e3, r3, n3, i3, 0);
          break;
        case 2:
          sn(e3, r3, n3, i3);
          break;
        case 1:
          un(e3, r3, n3, i3);
      }
    }
    function Or(t5, e3) {
      var r3, a3, o3 = e3.M, s3 = e3.Nb, c4 = t5.oc, u4 = t5.pc + 40, h4 = t5.oc, l4 = t5.pc + 584, f4 = t5.oc, d5 = t5.pc + 600;
      for (r3 = 0; 16 > r3; ++r3)
        c4[u4 + 32 * r3 - 1] = 129;
      for (r3 = 0; 8 > r3; ++r3)
        h4[l4 + 32 * r3 - 1] = 129, f4[d5 + 32 * r3 - 1] = 129;
      for (0 < o3 ? c4[u4 - 1 - 32] = h4[l4 - 1 - 32] = f4[d5 - 1 - 32] = 129 : (i2(c4, u4 - 32 - 1, 127, 21), i2(h4, l4 - 32 - 1, 127, 9), i2(f4, d5 - 32 - 1, 127, 9)), a3 = 0; a3 < t5.za; ++a3) {
        var p4 = e3.ya[e3.aa + a3];
        if (0 < a3) {
          for (r3 = -1; 16 > r3; ++r3)
            n2(c4, u4 + 32 * r3 - 4, c4, u4 + 32 * r3 + 12, 4);
          for (r3 = -1; 8 > r3; ++r3)
            n2(h4, l4 + 32 * r3 - 4, h4, l4 + 32 * r3 + 4, 4), n2(f4, d5 + 32 * r3 - 4, f4, d5 + 32 * r3 + 4, 4);
        }
        var g4 = t5.Gd, m4 = t5.Hd + a3, v5 = p4.ad, b4 = p4.Hc;
        if (0 < o3 && (n2(c4, u4 - 32, g4[m4].y, 0, 16), n2(h4, l4 - 32, g4[m4].f, 0, 8), n2(f4, d5 - 32, g4[m4].ea, 0, 8)), p4.Za) {
          var y4 = c4, w4 = u4 - 32 + 16;
          for (0 < o3 && (a3 >= t5.za - 1 ? i2(y4, w4, g4[m4].y[15], 4) : n2(y4, w4, g4[m4 + 1].y, 0, 4)), r3 = 0; 4 > r3; r3++)
            y4[w4 + 128 + r3] = y4[w4 + 256 + r3] = y4[w4 + 384 + r3] = y4[w4 + 0 + r3];
          for (r3 = 0; 16 > r3; ++r3, b4 <<= 2)
            y4 = c4, w4 = u4 + Di[r3], fi[p4.Ob[r3]](y4, w4), jr(b4, v5, 16 * +r3, y4, w4);
        } else if (y4 = Cr(a3, o3, p4.Ob[0]), li[y4](c4, u4), 0 != b4)
          for (r3 = 0; 16 > r3; ++r3, b4 <<= 2)
            jr(b4, v5, 16 * +r3, c4, u4 + Di[r3]);
        for (r3 = p4.Gc, y4 = Cr(a3, o3, p4.Dd), di[y4](h4, l4), di[y4](f4, d5), b4 = v5, y4 = h4, w4 = l4, 255 & (p4 = r3 >> 0) && (170 & p4 ? cn(b4, 256, y4, w4) : hn(b4, 256, y4, w4)), p4 = f4, b4 = d5, 255 & (r3 >>= 8) && (170 & r3 ? cn(v5, 320, p4, b4) : hn(v5, 320, p4, b4)), o3 < t5.Ub - 1 && (n2(g4[m4].y, 0, c4, u4 + 480, 16), n2(g4[m4].f, 0, h4, l4 + 224, 8), n2(g4[m4].ea, 0, f4, d5 + 224, 8)), r3 = 8 * s3 * t5.B, g4 = t5.sa, m4 = t5.ta + 16 * a3 + 16 * s3 * t5.R, v5 = t5.qa, p4 = t5.ra + 8 * a3 + r3, b4 = t5.Ha, y4 = t5.Ia + 8 * a3 + r3, r3 = 0; 16 > r3; ++r3)
          n2(g4, m4 + r3 * t5.R, c4, u4 + 32 * r3, 16);
        for (r3 = 0; 8 > r3; ++r3)
          n2(v5, p4 + r3 * t5.B, h4, l4 + 32 * r3, 8), n2(b4, y4 + r3 * t5.B, f4, d5 + 32 * r3, 8);
      }
    }
    function Br(t5, n3, i3, a3, o3, s3, c4, u4, h4) {
      var l4 = [0], f4 = [0], d5 = 0, p4 = null != h4 ? h4.kd : 0, g4 = null != h4 ? h4 : new nr();
      if (null == t5 || 12 > i3)
        return 7;
      g4.data = t5, g4.w = n3, g4.ha = i3, n3 = [n3], i3 = [i3], g4.gb = [g4.gb];
      t: {
        var m4 = n3, b4 = i3, y4 = g4.gb;
        if (e2(null != t5), e2(null != b4), e2(null != y4), y4[0] = 0, 12 <= b4[0] && !r2(t5, m4[0], "RIFF")) {
          if (r2(t5, m4[0] + 8, "WEBP")) {
            y4 = 3;
            break t;
          }
          var w4 = j2(t5, m4[0] + 4);
          if (12 > w4 || 4294967286 < w4) {
            y4 = 3;
            break t;
          }
          if (p4 && w4 > b4[0] - 8) {
            y4 = 7;
            break t;
          }
          y4[0] = w4, m4[0] += 12, b4[0] -= 12;
        }
        y4 = 0;
      }
      if (0 != y4)
        return y4;
      for (w4 = 0 < g4.gb[0], i3 = i3[0]; ; ) {
        t: {
          var L4 = t5;
          b4 = n3, y4 = i3;
          var A4 = l4, x3 = f4, S3 = m4 = [0];
          if ((k3 = d5 = [d5])[0] = 0, 8 > y4[0])
            y4 = 7;
          else {
            if (!r2(L4, b4[0], "VP8X")) {
              if (10 != j2(L4, b4[0] + 4)) {
                y4 = 3;
                break t;
              }
              if (18 > y4[0]) {
                y4 = 7;
                break t;
              }
              var _3 = j2(L4, b4[0] + 8), P3 = 1 + C2(L4, b4[0] + 12);
              if (2147483648 <= P3 * (L4 = 1 + C2(L4, b4[0] + 15))) {
                y4 = 3;
                break t;
              }
              null != S3 && (S3[0] = _3), null != A4 && (A4[0] = P3), null != x3 && (x3[0] = L4), b4[0] += 18, y4[0] -= 18, k3[0] = 1;
            }
            y4 = 0;
          }
        }
        if (d5 = d5[0], m4 = m4[0], 0 != y4)
          return y4;
        if (b4 = !!(2 & m4), !w4 && d5)
          return 3;
        if (null != s3 && (s3[0] = !!(16 & m4)), null != c4 && (c4[0] = b4), null != u4 && (u4[0] = 0), c4 = l4[0], m4 = f4[0], d5 && b4 && null == h4) {
          y4 = 0;
          break;
        }
        if (4 > i3) {
          y4 = 7;
          break;
        }
        if (w4 && d5 || !w4 && !d5 && !r2(t5, n3[0], "ALPH")) {
          i3 = [i3], g4.na = [g4.na], g4.P = [g4.P], g4.Sa = [g4.Sa];
          t: {
            _3 = t5, y4 = n3, w4 = i3;
            var k3 = g4.gb;
            A4 = g4.na, x3 = g4.P, S3 = g4.Sa;
            P3 = 22, e2(null != _3), e2(null != w4), L4 = y4[0];
            var I3 = w4[0];
            for (e2(null != A4), e2(null != S3), A4[0] = null, x3[0] = null, S3[0] = 0; ; ) {
              if (y4[0] = L4, w4[0] = I3, 8 > I3) {
                y4 = 7;
                break t;
              }
              var F3 = j2(_3, L4 + 4);
              if (4294967286 < F3) {
                y4 = 3;
                break t;
              }
              var O3 = 8 + F3 + 1 & -2;
              if (P3 += O3, 0 < k3 && P3 > k3) {
                y4 = 3;
                break t;
              }
              if (!r2(_3, L4, "VP8 ") || !r2(_3, L4, "VP8L")) {
                y4 = 0;
                break t;
              }
              if (I3[0] < O3) {
                y4 = 7;
                break t;
              }
              r2(_3, L4, "ALPH") || (A4[0] = _3, x3[0] = L4 + 8, S3[0] = F3), L4 += O3, I3 -= O3;
            }
          }
          if (i3 = i3[0], g4.na = g4.na[0], g4.P = g4.P[0], g4.Sa = g4.Sa[0], 0 != y4)
            break;
        }
        i3 = [i3], g4.Ja = [g4.Ja], g4.xa = [g4.xa];
        t:
          if (k3 = t5, y4 = n3, w4 = i3, A4 = g4.gb[0], x3 = g4.Ja, S3 = g4.xa, _3 = y4[0], L4 = !r2(k3, _3, "VP8 "), P3 = !r2(k3, _3, "VP8L"), e2(null != k3), e2(null != w4), e2(null != x3), e2(null != S3), 8 > w4[0])
            y4 = 7;
          else {
            if (L4 || P3) {
              if (k3 = j2(k3, _3 + 4), 12 <= A4 && k3 > A4 - 12) {
                y4 = 3;
                break t;
              }
              if (p4 && k3 > w4[0] - 8) {
                y4 = 7;
                break t;
              }
              x3[0] = k3, y4[0] += 8, w4[0] -= 8, S3[0] = P3;
            } else
              S3[0] = 5 <= w4[0] && 47 == k3[_3 + 0] && !(k3[_3 + 4] >> 5), x3[0] = w4[0];
            y4 = 0;
          }
        if (i3 = i3[0], g4.Ja = g4.Ja[0], g4.xa = g4.xa[0], n3 = n3[0], 0 != y4)
          break;
        if (4294967286 < g4.Ja)
          return 3;
        if (null == u4 || b4 || (u4[0] = g4.xa ? 2 : 1), c4 = [c4], m4 = [m4], g4.xa) {
          if (5 > i3) {
            y4 = 7;
            break;
          }
          u4 = c4, p4 = m4, b4 = s3, null == t5 || 5 > i3 ? t5 = 0 : 5 <= i3 && 47 == t5[n3 + 0] && !(t5[n3 + 4] >> 5) ? (w4 = [0], k3 = [0], A4 = [0], v3(x3 = new N3(), t5, n3, i3), gt2(x3, w4, k3, A4) ? (null != u4 && (u4[0] = w4[0]), null != p4 && (p4[0] = k3[0]), null != b4 && (b4[0] = A4[0]), t5 = 1) : t5 = 0) : t5 = 0;
        } else {
          if (10 > i3) {
            y4 = 7;
            break;
          }
          u4 = m4, null == t5 || 10 > i3 || !Xt2(t5, n3 + 3, i3 - 3) ? t5 = 0 : (p4 = t5[n3 + 0] | t5[n3 + 1] << 8 | t5[n3 + 2] << 16, b4 = 16383 & (t5[n3 + 7] << 8 | t5[n3 + 6]), t5 = 16383 & (t5[n3 + 9] << 8 | t5[n3 + 8]), 1 & p4 || 3 < (p4 >> 1 & 7) || !(p4 >> 4 & 1) || p4 >> 5 >= g4.Ja || !b4 || !t5 ? t5 = 0 : (c4 && (c4[0] = b4), u4 && (u4[0] = t5), t5 = 1));
        }
        if (!t5)
          return 3;
        if (c4 = c4[0], m4 = m4[0], d5 && (l4[0] != c4 || f4[0] != m4))
          return 3;
        null != h4 && (h4[0] = g4, h4.offset = n3 - h4.w, e2(4294967286 > n3 - h4.w), e2(h4.offset == h4.ha - i3));
        break;
      }
      return 0 == y4 || 7 == y4 && d5 && null == h4 ? (null != s3 && (s3[0] |= null != g4.na && 0 < g4.na.length), null != a3 && (a3[0] = c4), null != o3 && (o3[0] = m4), 0) : y4;
    }
    function Mr(t5, e3, r3) {
      var n3 = e3.width, i3 = e3.height, a3 = 0, o3 = 0, s3 = n3, c4 = i3;
      if (e3.Da = null != t5 && 0 < t5.Da, e3.Da && (s3 = t5.cd, c4 = t5.bd, a3 = t5.v, o3 = t5.j, 11 > r3 || (a3 &= -2, o3 &= -2), 0 > a3 || 0 > o3 || 0 >= s3 || 0 >= c4 || a3 + s3 > n3 || o3 + c4 > i3))
        return 0;
      if (e3.v = a3, e3.j = o3, e3.va = a3 + s3, e3.o = o3 + c4, e3.U = s3, e3.T = c4, e3.da = null != t5 && 0 < t5.da, e3.da) {
        if (!E2(s3, c4, r3 = [t5.ib], a3 = [t5.hb]))
          return 0;
        e3.ib = r3[0], e3.hb = a3[0];
      }
      return e3.ob = null != t5 && t5.ob, e3.Kb = null == t5 || !t5.Sd, e3.da && (e3.ob = e3.ib < 3 * n3 / 4 && e3.hb < 3 * i3 / 4, e3.Kb = 0), 1;
    }
    function Er(t5) {
      if (null == t5)
        return 2;
      if (11 > t5.S) {
        var e3 = t5.f.RGBA;
        e3.fb += (t5.height - 1) * e3.A, e3.A = -e3.A;
      } else
        e3 = t5.f.kb, t5 = t5.height, e3.O += (t5 - 1) * e3.fa, e3.fa = -e3.fa, e3.N += (t5 - 1 >> 1) * e3.Ab, e3.Ab = -e3.Ab, e3.W += (t5 - 1 >> 1) * e3.Db, e3.Db = -e3.Db, null != e3.F && (e3.J += (t5 - 1) * e3.lb, e3.lb = -e3.lb);
      return 0;
    }
    function qr(t5, e3, r3, n3) {
      if (null == n3 || 0 >= t5 || 0 >= e3)
        return 2;
      if (null != r3) {
        if (r3.Da) {
          var i3 = r3.cd, o3 = r3.bd, s3 = -2 & r3.v, c4 = -2 & r3.j;
          if (0 > s3 || 0 > c4 || 0 >= i3 || 0 >= o3 || s3 + i3 > t5 || c4 + o3 > e3)
            return 2;
          t5 = i3, e3 = o3;
        }
        if (r3.da) {
          if (!E2(t5, e3, i3 = [r3.ib], o3 = [r3.hb]))
            return 2;
          t5 = i3[0], e3 = o3[0];
        }
      }
      n3.width = t5, n3.height = e3;
      t: {
        var u4 = n3.width, h4 = n3.height;
        if (t5 = n3.S, 0 >= u4 || 0 >= h4 || !(t5 >= En && 13 > t5))
          t5 = 2;
        else {
          if (0 >= n3.Rd && null == n3.sd) {
            s3 = o3 = i3 = e3 = 0;
            var l4 = (c4 = u4 * zi[t5]) * h4;
            if (11 > t5 || (o3 = (h4 + 1) / 2 * (e3 = (u4 + 1) / 2), 12 == t5 && (s3 = (i3 = u4) * h4)), null == (h4 = a2(l4 + 2 * o3 + s3))) {
              t5 = 1;
              break t;
            }
            n3.sd = h4, 11 > t5 ? ((u4 = n3.f.RGBA).eb = h4, u4.fb = 0, u4.A = c4, u4.size = l4) : ((u4 = n3.f.kb).y = h4, u4.O = 0, u4.fa = c4, u4.Fd = l4, u4.f = h4, u4.N = 0 + l4, u4.Ab = e3, u4.Cd = o3, u4.ea = h4, u4.W = 0 + l4 + o3, u4.Db = e3, u4.Ed = o3, 12 == t5 && (u4.F = h4, u4.J = 0 + l4 + 2 * o3), u4.Tc = s3, u4.lb = i3);
          }
          if (e3 = 1, i3 = n3.S, o3 = n3.width, s3 = n3.height, i3 >= En && 13 > i3)
            if (11 > i3)
              t5 = n3.f.RGBA, e3 &= (c4 = Math.abs(t5.A)) * (s3 - 1) + o3 <= t5.size, e3 &= c4 >= o3 * zi[i3], e3 &= null != t5.eb;
            else {
              t5 = n3.f.kb, c4 = (o3 + 1) / 2, l4 = (s3 + 1) / 2, u4 = Math.abs(t5.fa);
              h4 = Math.abs(t5.Ab);
              var f4 = Math.abs(t5.Db), d5 = Math.abs(t5.lb), p4 = d5 * (s3 - 1) + o3;
              e3 &= u4 * (s3 - 1) + o3 <= t5.Fd, e3 &= h4 * (l4 - 1) + c4 <= t5.Cd, e3 = (e3 &= f4 * (l4 - 1) + c4 <= t5.Ed) & u4 >= o3 & h4 >= c4 & f4 >= c4, e3 &= null != t5.y, e3 &= null != t5.f, e3 &= null != t5.ea, 12 == i3 && (e3 &= d5 >= o3, e3 &= p4 <= t5.Tc, e3 &= null != t5.F);
            }
          else
            e3 = 0;
          t5 = e3 ? 0 : 2;
        }
      }
      return 0 != t5 || null != r3 && r3.fd && (t5 = Er(n3)), t5;
    }
    var Dr = 64, Rr = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215], Tr = 24, Ur = 32, zr = 8, Hr = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
    R2("Predictor0", "PredictorAdd0"), t4.Predictor0 = function() {
      return 4278190080;
    }, t4.Predictor1 = function(t5) {
      return t5;
    }, t4.Predictor2 = function(t5, e3, r3) {
      return e3[r3 + 0];
    }, t4.Predictor3 = function(t5, e3, r3) {
      return e3[r3 + 1];
    }, t4.Predictor4 = function(t5, e3, r3) {
      return e3[r3 - 1];
    }, t4.Predictor5 = function(t5, e3, r3) {
      return U2(U2(t5, e3[r3 + 1]), e3[r3 + 0]);
    }, t4.Predictor6 = function(t5, e3, r3) {
      return U2(t5, e3[r3 - 1]);
    }, t4.Predictor7 = function(t5, e3, r3) {
      return U2(t5, e3[r3 + 0]);
    }, t4.Predictor8 = function(t5, e3, r3) {
      return U2(e3[r3 - 1], e3[r3 + 0]);
    }, t4.Predictor9 = function(t5, e3, r3) {
      return U2(e3[r3 + 0], e3[r3 + 1]);
    }, t4.Predictor10 = function(t5, e3, r3) {
      return U2(U2(t5, e3[r3 - 1]), U2(e3[r3 + 0], e3[r3 + 1]));
    }, t4.Predictor11 = function(t5, e3, r3) {
      var n3 = e3[r3 + 0];
      return 0 >= W2(n3 >> 24 & 255, t5 >> 24 & 255, (e3 = e3[r3 - 1]) >> 24 & 255) + W2(n3 >> 16 & 255, t5 >> 16 & 255, e3 >> 16 & 255) + W2(n3 >> 8 & 255, t5 >> 8 & 255, e3 >> 8 & 255) + W2(255 & n3, 255 & t5, 255 & e3) ? n3 : t5;
    }, t4.Predictor12 = function(t5, e3, r3) {
      var n3 = e3[r3 + 0];
      return (z2((t5 >> 24 & 255) + (n3 >> 24 & 255) - ((e3 = e3[r3 - 1]) >> 24 & 255)) << 24 | z2((t5 >> 16 & 255) + (n3 >> 16 & 255) - (e3 >> 16 & 255)) << 16 | z2((t5 >> 8 & 255) + (n3 >> 8 & 255) - (e3 >> 8 & 255)) << 8 | z2((255 & t5) + (255 & n3) - (255 & e3))) >>> 0;
    }, t4.Predictor13 = function(t5, e3, r3) {
      var n3 = e3[r3 - 1];
      return (H2((t5 = U2(t5, e3[r3 + 0])) >> 24 & 255, n3 >> 24 & 255) << 24 | H2(t5 >> 16 & 255, n3 >> 16 & 255) << 16 | H2(t5 >> 8 & 255, n3 >> 8 & 255) << 8 | H2(t5 >> 0 & 255, n3 >> 0 & 255)) >>> 0;
    };
    var Wr = t4.PredictorAdd0;
    t4.PredictorAdd1 = V2, R2("Predictor2", "PredictorAdd2"), R2("Predictor3", "PredictorAdd3"), R2("Predictor4", "PredictorAdd4"), R2("Predictor5", "PredictorAdd5"), R2("Predictor6", "PredictorAdd6"), R2("Predictor7", "PredictorAdd7"), R2("Predictor8", "PredictorAdd8"), R2("Predictor9", "PredictorAdd9"), R2("Predictor10", "PredictorAdd10"), R2("Predictor11", "PredictorAdd11"), R2("Predictor12", "PredictorAdd12"), R2("Predictor13", "PredictorAdd13");
    var Vr = t4.PredictorAdd2;
    X2("ColorIndexInverseTransform", "MapARGB", "32b", function(t5) {
      return t5 >> 8 & 255;
    }, function(t5) {
      return t5;
    }), X2("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function(t5) {
      return t5;
    }, function(t5) {
      return t5 >> 8 & 255;
    });
    var Gr, Yr = t4.ColorIndexInverseTransform, Jr = t4.MapARGB, Xr = t4.VP8LColorIndexInverseTransformAlpha, Kr = t4.MapAlpha, Zr = t4.VP8LPredictorsAdd = [];
    Zr.length = 16, (t4.VP8LPredictors = []).length = 16, (t4.VP8LPredictorsAdd_C = []).length = 16, (t4.VP8LPredictors_C = []).length = 16;
    var $r, Qr, tn, en, rn, nn, an, on3, sn, cn, un, hn, ln2, fn3, dn, pn, gn, mn, vn, bn, yn, wn, Nn, Ln, An, xn, Sn, _n, Pn = a2(511), kn = a2(2041), In = a2(225), Fn = a2(767), Cn = 0, jn = kn, On = In, Bn = Fn, Mn = Pn, En = 0, qn = 1, Dn = 2, Rn = 3, Tn = 4, Un = 5, zn = 6, Hn = 7, Wn = 8, Vn = 9, Gn = 10, Yn = [2, 3, 7], Jn = [3, 3, 11], Xn = [280, 256, 256, 256, 40], Kn = [0, 1, 1, 1, 0], Zn = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], $n = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112], Qn = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004], ti = 8, ei = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157], ri = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284], ni = null, ii = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]], ai = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15], oi = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9], si = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]], ci = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]], ui = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]], hi = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0], li = [], fi = [], di = [], pi = 1, gi = 2, mi = [], vi = [];
    vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);
    var bi = t4.UpsampleRgbLinePair, yi = t4.UpsampleBgrLinePair, wi = t4.UpsampleRgbaLinePair, Ni = t4.UpsampleBgraLinePair, Li = t4.UpsampleArgbLinePair, Ai = t4.UpsampleRgba4444LinePair, xi = t4.UpsampleRgb565LinePair, Si = 16, _i = 1 << Si - 1, Pi = -227, ki = 482, Ii = 6, Fi = (256 << Ii) - 1, Ci = 0, ji = a2(256), Oi = a2(256), Bi = a2(256), Mi = a2(256), Ei = a2(ki - Pi), qi = a2(ki - Pi);
    Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
    var Di = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396], Ri = [0, 2, 8], Ti = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1], Ui = 1;
    this.WebPDecodeRGBA = function(t5, r3, n3, i3, a3) {
      var o3 = qn, s3 = new rr(), c4 = new ot2();
      s3.ba = c4, c4.S = o3, c4.width = [c4.width], c4.height = [c4.height];
      var u4 = c4.width, h4 = c4.height, l4 = new st2();
      if (null == l4 || null == t5)
        var f4 = 2;
      else
        e2(null != l4), f4 = Br(t5, r3, n3, l4.width, l4.height, l4.Pd, l4.Qd, l4.format, null);
      if (0 != f4 ? u4 = 0 : (null != u4 && (u4[0] = l4.width[0]), null != h4 && (h4[0] = l4.height[0]), u4 = 1), u4) {
        c4.width = c4.width[0], c4.height = c4.height[0], null != i3 && (i3[0] = c4.width), null != a3 && (a3[0] = c4.height);
        t: {
          if (i3 = new Gt2(), (a3 = new nr()).data = t5, a3.w = r3, a3.ha = n3, a3.kd = 1, r3 = [0], e2(null != a3), (0 == (t5 = Br(a3.data, a3.w, a3.ha, null, null, null, r3, null, a3)) || 7 == t5) && r3[0] && (t5 = 4), 0 == (r3 = t5)) {
            if (e2(null != s3), i3.data = a3.data, i3.w = a3.w + a3.offset, i3.ha = a3.ha - a3.offset, i3.put = dt2, i3.ac = ft2, i3.bc = pt2, i3.ma = s3, a3.xa) {
              if (null == (t5 = kt2())) {
                s3 = 1;
                break t;
              }
              if (function(t6, r4) {
                var n4 = [0], i4 = [0], a4 = [0];
                e:
                  for (; ; ) {
                    if (null == t6)
                      return 0;
                    if (null == r4)
                      return t6.a = 2, 0;
                    if (t6.l = r4, t6.a = 0, v3(t6.m, r4.data, r4.w, r4.ha), !gt2(t6.m, n4, i4, a4)) {
                      t6.a = 3;
                      break e;
                    }
                    if (t6.xb = gi, r4.width = n4[0], r4.height = i4[0], !It2(n4[0], i4[0], 1, t6, null))
                      break e;
                    return 1;
                  }
                return e2(0 != t6.a), 0;
              }(t5, i3)) {
                if (i3 = 0 == (r3 = qr(i3.width, i3.height, s3.Oa, s3.ba))) {
                  e: {
                    i3 = t5;
                    r:
                      for (; ; ) {
                        if (null == i3) {
                          i3 = 0;
                          break e;
                        }
                        if (e2(null != i3.s.yc), e2(null != i3.s.Ya), e2(0 < i3.s.Wb), e2(null != (n3 = i3.l)), e2(null != (a3 = n3.ma)), 0 != i3.xb) {
                          if (i3.ca = a3.ba, i3.tb = a3.tb, e2(null != i3.ca), !Mr(a3.Oa, n3, Rn)) {
                            i3.a = 2;
                            break r;
                          }
                          if (!Ft2(i3, n3.width))
                            break r;
                          if (n3.da)
                            break r;
                          if ((n3.da || nt2(i3.ca.S)) && mr(), 11 > i3.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i3.ca.f.kb.F && mr()), i3.Pb && 0 < i3.s.ua && null == i3.s.vb.X && !O2(i3.s.vb, i3.s.Wa.Xa)) {
                            i3.a = 1;
                            break r;
                          }
                          i3.xb = 0;
                        }
                        if (!_t2(i3, i3.V, i3.Ba, i3.c, i3.i, n3.o, Lt2))
                          break r;
                        a3.Dc = i3.Ma, i3 = 1;
                        break e;
                      }
                    e2(0 != i3.a), i3 = 0;
                  }
                  i3 = !i3;
                }
                i3 && (r3 = t5.a);
              } else
                r3 = t5.a;
            } else {
              if (null == (t5 = new Yt2())) {
                s3 = 1;
                break t;
              }
              if (t5.Fa = a3.na, t5.P = a3.P, t5.qc = a3.Sa, Kt2(t5, i3)) {
                if (0 == (r3 = qr(i3.width, i3.height, s3.Oa, s3.ba))) {
                  if (t5.Aa = 0, n3 = s3.Oa, e2(null != (a3 = t5)), null != n3) {
                    if (0 < (u4 = 0 > (u4 = n3.Md) ? 0 : 100 < u4 ? 255 : 255 * u4 / 100)) {
                      for (h4 = l4 = 0; 4 > h4; ++h4)
                        12 > (f4 = a3.pb[h4]).lc && (f4.ia = u4 * Ti[0 > f4.lc ? 0 : f4.lc] >> 3), l4 |= f4.ia;
                      l4 && (alert("todo:VP8InitRandom"), a3.ia = 1);
                    }
                    a3.Ga = n3.Id, 100 < a3.Ga ? a3.Ga = 100 : 0 > a3.Ga && (a3.Ga = 0);
                  }
                  Qt2(t5, i3) || (r3 = t5.a);
                }
              } else
                r3 = t5.a;
            }
            0 == r3 && null != s3.Oa && s3.Oa.fd && (r3 = Er(s3.ba));
          }
          s3 = r3;
        }
        o3 = 0 != s3 ? null : 11 > o3 ? c4.f.RGBA.eb : c4.f.kb.y;
      } else
        o3 = null;
      return o3;
    };
    var zi = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
  };
  function u2(t4, e3) {
    for (var r3 = "", n3 = 0; n3 < 4; n3++)
      r3 += String.fromCharCode(t4[e3++]);
    return r3;
  }
  function h2(t4, e3) {
    return (t4[e3 + 0] << 0 | t4[e3 + 1] << 8 | t4[e3 + 2] << 16) >>> 0;
  }
  function l2(t4, e3) {
    return (t4[e3 + 0] << 0 | t4[e3 + 1] << 8 | t4[e3 + 2] << 16 | t4[e3 + 3] << 24) >>> 0;
  }
  new c2();
  var f2 = [0], d2 = [0], p2 = [], g2 = new c2(), m2 = t3, v2 = function(t4, e3) {
    var r3 = {}, n3 = 0, i3 = false, a3 = 0, o3 = 0;
    if (r3.frames = [], !/** @license
       * Copyright (c) 2017 Dominik Homberger
      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
      The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      https://webpjs.appspot.com
      WebPRiffParser dominikhlbg@gmail.com
      */
    function(t5, e4, r4, n4) {
      for (var i4 = 0; i4 < n4; i4++)
        if (t5[e4 + i4] != r4.charCodeAt(i4))
          return true;
      return false;
    }(t4, e3, "RIFF", 4)) {
      var s3, c3;
      l2(t4, e3 += 4);
      for (e3 += 8; e3 < t4.length; ) {
        var f3 = u2(t4, e3), d4 = l2(t4, e3 += 4);
        e3 += 4;
        var p3 = d4 + (1 & d4);
        switch (f3) {
          case "VP8 ":
          case "VP8L":
            void 0 === r3.frames[n3] && (r3.frames[n3] = {});
            (v3 = r3.frames[n3]).src_off = i3 ? o3 : e3 - 8, v3.src_size = a3 + d4 + 8, n3++, i3 && (i3 = false, a3 = 0, o3 = 0);
            break;
          case "VP8X":
            (v3 = r3.header = {}).feature_flags = t4[e3];
            var g3 = e3 + 4;
            v3.canvas_width = 1 + h2(t4, g3);
            g3 += 3;
            v3.canvas_height = 1 + h2(t4, g3);
            g3 += 3;
            break;
          case "ALPH":
            i3 = true, a3 = p3 + 8, o3 = e3 - 8;
            break;
          case "ANIM":
            (v3 = r3.header).bgcolor = l2(t4, e3);
            g3 = e3 + 4;
            v3.loop_count = (s3 = t4)[(c3 = g3) + 0] << 0 | s3[c3 + 1] << 8;
            g3 += 2;
            break;
          case "ANMF":
            var m3, v3;
            (v3 = r3.frames[n3] = {}).offset_x = 2 * h2(t4, e3), e3 += 3, v3.offset_y = 2 * h2(t4, e3), e3 += 3, v3.width = 1 + h2(t4, e3), e3 += 3, v3.height = 1 + h2(t4, e3), e3 += 3, v3.duration = h2(t4, e3), e3 += 3, m3 = t4[e3++], v3.dispose = 1 & m3, v3.blend = m3 >> 1 & 1;
        }
        "ANMF" != f3 && (e3 += p3);
      }
      return r3;
    }
  }(m2, 0);
  v2.response = m2, v2.rgbaoutput = true, v2.dataurl = false;
  var b2 = v2.header ? v2.header : null, y2 = v2.frames ? v2.frames : null;
  if (b2) {
    b2.loop_counter = b2.loop_count, f2 = [b2.canvas_height], d2 = [b2.canvas_width];
    for (var w2 = 0; w2 < y2.length && 0 != y2[w2].blend; w2++)
      ;
  }
  var N2 = y2[0], L2 = g2.WebPDecodeRGBA(m2, N2.src_off, N2.src_size, d2, f2);
  N2.rgba = L2, N2.imgwidth = d2[0], N2.imgheight = f2[0];
  for (var A2 = 0; A2 < d2[0] * f2[0] * 4; A2++)
    p2[A2] = L2[A2];
  return this.width = d2, this.height = f2, this.data = p2, this;
}
!function(t3) {
  var r2 = function() {
    return "function" == typeof zlibSync;
  }, n2 = function(r3, n3, a3, h3) {
    var l3 = 4, f3 = s2;
    switch (h3) {
      case t3.image_compression.FAST:
        l3 = 1, f3 = o2;
        break;
      case t3.image_compression.MEDIUM:
        l3 = 6, f3 = c2;
        break;
      case t3.image_compression.SLOW:
        l3 = 9, f3 = u2;
    }
    r3 = i2(r3, n3, a3, f3);
    var d2 = zlibSync(r3, { level: l3 });
    return t3.__addimage__.arrayBufferToBinaryString(d2);
  }, i2 = function(t4, e2, r3, n3) {
    for (var i3, a3, o3, s3 = t4.length / e2, c3 = new Uint8Array(t4.length + s3), u3 = l2(), h3 = 0; h3 < s3; h3 += 1) {
      if (o3 = h3 * e2, i3 = t4.subarray(o3, o3 + e2), n3)
        c3.set(n3(i3, r3, a3), o3 + h3);
      else {
        for (var d2, p2 = u3.length, g2 = []; d2 < p2; d2 += 1)
          g2[d2] = u3[d2](i3, r3, a3);
        var m2 = f2(g2.concat());
        c3.set(g2[m2], o3 + h3);
      }
      a3 = i3;
    }
    return c3;
  }, a2 = function(t4) {
    var e2 = Array.apply([], t4);
    return e2.unshift(0), e2;
  }, o2 = function(t4, e2) {
    var r3, n3 = [], i3 = t4.length;
    n3[0] = 1;
    for (var a3 = 0; a3 < i3; a3 += 1)
      r3 = t4[a3 - e2] || 0, n3[a3 + 1] = t4[a3] - r3 + 256 & 255;
    return n3;
  }, s2 = function(t4, e2, r3) {
    var n3, i3 = [], a3 = t4.length;
    i3[0] = 2;
    for (var o3 = 0; o3 < a3; o3 += 1)
      n3 = r3 && r3[o3] || 0, i3[o3 + 1] = t4[o3] - n3 + 256 & 255;
    return i3;
  }, c2 = function(t4, e2, r3) {
    var n3, i3, a3 = [], o3 = t4.length;
    a3[0] = 3;
    for (var s3 = 0; s3 < o3; s3 += 1)
      n3 = t4[s3 - e2] || 0, i3 = r3 && r3[s3] || 0, a3[s3 + 1] = t4[s3] + 256 - (n3 + i3 >>> 1) & 255;
    return a3;
  }, u2 = function(t4, e2, r3) {
    var n3, i3, a3, o3, s3 = [], c3 = t4.length;
    s3[0] = 4;
    for (var u3 = 0; u3 < c3; u3 += 1)
      n3 = t4[u3 - e2] || 0, i3 = r3 && r3[u3] || 0, a3 = r3 && r3[u3 - e2] || 0, o3 = h2(n3, i3, a3), s3[u3 + 1] = t4[u3] - o3 + 256 & 255;
    return s3;
  }, h2 = function(t4, e2, r3) {
    if (t4 === e2 && e2 === r3)
      return t4;
    var n3 = Math.abs(e2 - r3), i3 = Math.abs(t4 - r3), a3 = Math.abs(t4 + e2 - r3 - r3);
    return n3 <= i3 && n3 <= a3 ? t4 : i3 <= a3 ? e2 : r3;
  }, l2 = function() {
    return [a2, o2, s2, c2, u2];
  }, f2 = function(t4) {
    var e2 = t4.map(function(t5) {
      return t5.reduce(function(t6, e3) {
        return t6 + Math.abs(e3);
      }, 0);
    });
    return e2.indexOf(Math.min.apply(null, e2));
  };
  t3.processPNG = function(e2, i3, a3, o3) {
    var s3, c3, u3, h3, l3, f3, d2, p2, g2, m2, v2, b2, y2, w2, N2, L2 = this.decode.FLATE_DECODE, A2 = "";
    if (this.__addimage__.isArrayBuffer(e2) && (e2 = new Uint8Array(e2)), this.__addimage__.isArrayBufferView(e2)) {
      if (e2 = (u3 = new Kt(e2)).imgData, c3 = u3.bits, s3 = u3.colorSpace, l3 = u3.colors, -1 !== [4, 6].indexOf(u3.colorType)) {
        if (8 === u3.bits) {
          g2 = (p2 = 32 == u3.pixelBitlength ? new Uint32Array(u3.decodePixels().buffer) : 16 == u3.pixelBitlength ? new Uint16Array(u3.decodePixels().buffer) : new Uint8Array(u3.decodePixels().buffer)).length, v2 = new Uint8Array(g2 * u3.colors), m2 = new Uint8Array(g2);
          var x2, S2 = u3.pixelBitlength - u3.bits;
          for (w2 = 0, N2 = 0; w2 < g2; w2++) {
            for (y2 = p2[w2], x2 = 0; x2 < S2; )
              v2[N2++] = y2 >>> x2 & 255, x2 += u3.bits;
            m2[w2] = y2 >>> x2 & 255;
          }
        }
        if (16 === u3.bits) {
          g2 = (p2 = new Uint32Array(u3.decodePixels().buffer)).length, v2 = new Uint8Array(g2 * (32 / u3.pixelBitlength) * u3.colors), m2 = new Uint8Array(g2 * (32 / u3.pixelBitlength)), b2 = u3.colors > 1, w2 = 0, N2 = 0;
          for (var _2 = 0; w2 < g2; )
            y2 = p2[w2++], v2[N2++] = y2 >>> 0 & 255, b2 && (v2[N2++] = y2 >>> 16 & 255, y2 = p2[w2++], v2[N2++] = y2 >>> 0 & 255), m2[_2++] = y2 >>> 16 & 255;
          c3 = 8;
        }
        o3 !== t3.image_compression.NONE && r2() ? (e2 = n2(v2, u3.width * u3.colors, u3.colors, o3), d2 = n2(m2, u3.width, 1, o3)) : (e2 = v2, d2 = m2, L2 = void 0);
      }
      if (3 === u3.colorType && (s3 = this.color_spaces.INDEXED, f3 = u3.palette, u3.transparency.indexed)) {
        var P2 = u3.transparency.indexed, k2 = 0;
        for (w2 = 0, g2 = P2.length; w2 < g2; ++w2)
          k2 += P2[w2];
        if ((k2 /= 255) === g2 - 1 && -1 !== P2.indexOf(0))
          h3 = [P2.indexOf(0)];
        else if (k2 !== g2) {
          for (p2 = u3.decodePixels(), m2 = new Uint8Array(p2.length), w2 = 0, g2 = p2.length; w2 < g2; w2++)
            m2[w2] = P2[p2[w2]];
          d2 = n2(m2, u3.width, 1);
        }
      }
      var I2 = function(e3) {
        var r3;
        switch (e3) {
          case t3.image_compression.FAST:
            r3 = 11;
            break;
          case t3.image_compression.MEDIUM:
            r3 = 13;
            break;
          case t3.image_compression.SLOW:
            r3 = 14;
            break;
          default:
            r3 = 12;
        }
        return r3;
      }(o3);
      return L2 === this.decode.FLATE_DECODE && (A2 = "/Predictor " + I2 + " "), A2 += "/Colors " + l3 + " /BitsPerComponent " + c3 + " /Columns " + u3.width, (this.__addimage__.isArrayBuffer(e2) || this.__addimage__.isArrayBufferView(e2)) && (e2 = this.__addimage__.arrayBufferToBinaryString(e2)), (d2 && this.__addimage__.isArrayBuffer(d2) || this.__addimage__.isArrayBufferView(d2)) && (d2 = this.__addimage__.arrayBufferToBinaryString(d2)), { alias: a3, data: e2, index: i3, filter: L2, decodeParameters: A2, transparency: h3, palette: f3, sMask: d2, predictor: I2, width: u3.width, height: u3.height, bitsPerComponent: c3, colorSpace: s3 };
    }
  };
}(E$1.API), function(t3) {
  t3.processGIF89A = function(e2, r2, n2, i2) {
    var a2 = new Zt(e2), o2 = a2.width, s2 = a2.height, c2 = [];
    a2.decodeAndBlitFrameRGBA(0, c2);
    var u2 = { data: c2, width: o2, height: s2 }, h2 = new Qt(100).encode(u2, 100);
    return t3.processJPEG.call(this, h2, r2, n2, i2);
  }, t3.processGIF87A = t3.processGIF89A;
}(E$1.API), te.prototype.parseHeader = function() {
  if (this.fileSize = this.datav.getUint32(this.pos, true), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, true), this.pos += 4, this.offset = this.datav.getUint32(this.pos, true), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, true), this.pos += 4, this.width = this.datav.getUint32(this.pos, true), this.pos += 4, this.height = this.datav.getInt32(this.pos, true), this.pos += 4, this.planes = this.datav.getUint16(this.pos, true), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, true), this.pos += 2, this.compress = this.datav.getUint32(this.pos, true), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, true), this.pos += 4, this.hr = this.datav.getUint32(this.pos, true), this.pos += 4, this.vr = this.datav.getUint32(this.pos, true), this.pos += 4, this.colors = this.datav.getUint32(this.pos, true), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, true), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
    var t3 = 0 === this.colors ? 1 << this.bitPP : this.colors;
    this.palette = new Array(t3);
    for (var e2 = 0; e2 < t3; e2++) {
      var r2 = this.datav.getUint8(this.pos++, true), n2 = this.datav.getUint8(this.pos++, true), i2 = this.datav.getUint8(this.pos++, true), a2 = this.datav.getUint8(this.pos++, true);
      this.palette[e2] = { red: i2, green: n2, blue: r2, quad: a2 };
    }
  }
  this.height < 0 && (this.height *= -1, this.bottom_up = false);
}, te.prototype.parseBGR = function() {
  this.pos = this.offset;
  try {
    var t3 = "bit" + this.bitPP, e2 = this.width * this.height * 4;
    this.data = new Uint8Array(e2), this[t3]();
  } catch (t4) {
    a$1.log("bit decode error:" + t4);
  }
}, te.prototype.bit1 = function() {
  var t3, e2 = Math.ceil(this.width / 8), r2 = e2 % 4;
  for (t3 = this.height - 1; t3 >= 0; t3--) {
    for (var n2 = this.bottom_up ? t3 : this.height - 1 - t3, i2 = 0; i2 < e2; i2++)
      for (var a2 = this.datav.getUint8(this.pos++, true), o2 = n2 * this.width * 4 + 8 * i2 * 4, s2 = 0; s2 < 8 && 8 * i2 + s2 < this.width; s2++) {
        var c2 = this.palette[a2 >> 7 - s2 & 1];
        this.data[o2 + 4 * s2] = c2.blue, this.data[o2 + 4 * s2 + 1] = c2.green, this.data[o2 + 4 * s2 + 2] = c2.red, this.data[o2 + 4 * s2 + 3] = 255;
      }
    0 !== r2 && (this.pos += 4 - r2);
  }
}, te.prototype.bit4 = function() {
  for (var t3 = Math.ceil(this.width / 2), e2 = t3 % 4, r2 = this.height - 1; r2 >= 0; r2--) {
    for (var n2 = this.bottom_up ? r2 : this.height - 1 - r2, i2 = 0; i2 < t3; i2++) {
      var a2 = this.datav.getUint8(this.pos++, true), o2 = n2 * this.width * 4 + 2 * i2 * 4, s2 = a2 >> 4, c2 = 15 & a2, u2 = this.palette[s2];
      if (this.data[o2] = u2.blue, this.data[o2 + 1] = u2.green, this.data[o2 + 2] = u2.red, this.data[o2 + 3] = 255, 2 * i2 + 1 >= this.width)
        break;
      u2 = this.palette[c2], this.data[o2 + 4] = u2.blue, this.data[o2 + 4 + 1] = u2.green, this.data[o2 + 4 + 2] = u2.red, this.data[o2 + 4 + 3] = 255;
    }
    0 !== e2 && (this.pos += 4 - e2);
  }
}, te.prototype.bit8 = function() {
  for (var t3 = this.width % 4, e2 = this.height - 1; e2 >= 0; e2--) {
    for (var r2 = this.bottom_up ? e2 : this.height - 1 - e2, n2 = 0; n2 < this.width; n2++) {
      var i2 = this.datav.getUint8(this.pos++, true), a2 = r2 * this.width * 4 + 4 * n2;
      if (i2 < this.palette.length) {
        var o2 = this.palette[i2];
        this.data[a2] = o2.red, this.data[a2 + 1] = o2.green, this.data[a2 + 2] = o2.blue, this.data[a2 + 3] = 255;
      } else
        this.data[a2] = 255, this.data[a2 + 1] = 255, this.data[a2 + 2] = 255, this.data[a2 + 3] = 255;
    }
    0 !== t3 && (this.pos += 4 - t3);
  }
}, te.prototype.bit15 = function() {
  for (var t3 = this.width % 3, e2 = parseInt("11111", 2), r2 = this.height - 1; r2 >= 0; r2--) {
    for (var n2 = this.bottom_up ? r2 : this.height - 1 - r2, i2 = 0; i2 < this.width; i2++) {
      var a2 = this.datav.getUint16(this.pos, true);
      this.pos += 2;
      var o2 = (a2 & e2) / e2 * 255 | 0, s2 = (a2 >> 5 & e2) / e2 * 255 | 0, c2 = (a2 >> 10 & e2) / e2 * 255 | 0, u2 = a2 >> 15 ? 255 : 0, h2 = n2 * this.width * 4 + 4 * i2;
      this.data[h2] = c2, this.data[h2 + 1] = s2, this.data[h2 + 2] = o2, this.data[h2 + 3] = u2;
    }
    this.pos += t3;
  }
}, te.prototype.bit16 = function() {
  for (var t3 = this.width % 3, e2 = parseInt("11111", 2), r2 = parseInt("111111", 2), n2 = this.height - 1; n2 >= 0; n2--) {
    for (var i2 = this.bottom_up ? n2 : this.height - 1 - n2, a2 = 0; a2 < this.width; a2++) {
      var o2 = this.datav.getUint16(this.pos, true);
      this.pos += 2;
      var s2 = (o2 & e2) / e2 * 255 | 0, c2 = (o2 >> 5 & r2) / r2 * 255 | 0, u2 = (o2 >> 11) / e2 * 255 | 0, h2 = i2 * this.width * 4 + 4 * a2;
      this.data[h2] = u2, this.data[h2 + 1] = c2, this.data[h2 + 2] = s2, this.data[h2 + 3] = 255;
    }
    this.pos += t3;
  }
}, te.prototype.bit24 = function() {
  for (var t3 = this.height - 1; t3 >= 0; t3--) {
    for (var e2 = this.bottom_up ? t3 : this.height - 1 - t3, r2 = 0; r2 < this.width; r2++) {
      var n2 = this.datav.getUint8(this.pos++, true), i2 = this.datav.getUint8(this.pos++, true), a2 = this.datav.getUint8(this.pos++, true), o2 = e2 * this.width * 4 + 4 * r2;
      this.data[o2] = a2, this.data[o2 + 1] = i2, this.data[o2 + 2] = n2, this.data[o2 + 3] = 255;
    }
    this.pos += this.width % 4;
  }
}, te.prototype.bit32 = function() {
  for (var t3 = this.height - 1; t3 >= 0; t3--)
    for (var e2 = this.bottom_up ? t3 : this.height - 1 - t3, r2 = 0; r2 < this.width; r2++) {
      var n2 = this.datav.getUint8(this.pos++, true), i2 = this.datav.getUint8(this.pos++, true), a2 = this.datav.getUint8(this.pos++, true), o2 = this.datav.getUint8(this.pos++, true), s2 = e2 * this.width * 4 + 4 * r2;
      this.data[s2] = a2, this.data[s2 + 1] = i2, this.data[s2 + 2] = n2, this.data[s2 + 3] = o2;
    }
}, te.prototype.getData = function() {
  return this.data;
}, /**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  t3.processBMP = function(e2, r2, n2, i2) {
    var a2 = new te(e2, false), o2 = a2.width, s2 = a2.height, c2 = { data: a2.getData(), width: o2, height: s2 }, u2 = new Qt(100).encode(c2, 100);
    return t3.processJPEG.call(this, u2, r2, n2, i2);
  };
}(E$1.API), ee.prototype.getData = function() {
  return this.data;
}, /**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  t3.processWEBP = function(e2, r2, n2, i2) {
    var a2 = new ee(e2), o2 = a2.width, s2 = a2.height, c2 = { data: a2.getData(), width: o2, height: s2 }, u2 = new Qt(100).encode(c2, 100);
    return t3.processJPEG.call(this, u2, r2, n2, i2);
  };
}(E$1.API), E$1.API.processRGBA = function(t3, e2, r2) {
  for (var n2 = t3.data, i2 = n2.length, a2 = new Uint8Array(i2 / 4 * 3), o2 = new Uint8Array(i2 / 4), s2 = 0, c2 = 0, u2 = 0; u2 < i2; u2 += 4) {
    var h2 = n2[u2], l2 = n2[u2 + 1], f2 = n2[u2 + 2], d2 = n2[u2 + 3];
    a2[s2++] = h2, a2[s2++] = l2, a2[s2++] = f2, o2[c2++] = d2;
  }
  var p2 = this.__addimage__.arrayBufferToBinaryString(a2);
  return { alpha: this.__addimage__.arrayBufferToBinaryString(o2), data: p2, index: e2, alias: r2, colorSpace: "DeviceRGB", bitsPerComponent: 8, width: t3.width, height: t3.height };
}, E$1.API.setLanguage = function(t3) {
  return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = false), void 0 !== { af: "Afrikaans", sq: "Albanian", ar: "Arabic (Standard)", "ar-DZ": "Arabic (Algeria)", "ar-BH": "Arabic (Bahrain)", "ar-EG": "Arabic (Egypt)", "ar-IQ": "Arabic (Iraq)", "ar-JO": "Arabic (Jordan)", "ar-KW": "Arabic (Kuwait)", "ar-LB": "Arabic (Lebanon)", "ar-LY": "Arabic (Libya)", "ar-MA": "Arabic (Morocco)", "ar-OM": "Arabic (Oman)", "ar-QA": "Arabic (Qatar)", "ar-SA": "Arabic (Saudi Arabia)", "ar-SY": "Arabic (Syria)", "ar-TN": "Arabic (Tunisia)", "ar-AE": "Arabic (U.A.E.)", "ar-YE": "Arabic (Yemen)", an: "Aragonese", hy: "Armenian", as: "Assamese", ast: "Asturian", az: "Azerbaijani", eu: "Basque", be: "Belarusian", bn: "Bengali", bs: "Bosnian", br: "Breton", bg: "Bulgarian", my: "Burmese", ca: "Catalan", ch: "Chamorro", ce: "Chechen", zh: "Chinese", "zh-HK": "Chinese (Hong Kong)", "zh-CN": "Chinese (PRC)", "zh-SG": "Chinese (Singapore)", "zh-TW": "Chinese (Taiwan)", cv: "Chuvash", co: "Corsican", cr: "Cree", hr: "Croatian", cs: "Czech", da: "Danish", nl: "Dutch (Standard)", "nl-BE": "Dutch (Belgian)", en: "English", "en-AU": "English (Australia)", "en-BZ": "English (Belize)", "en-CA": "English (Canada)", "en-IE": "English (Ireland)", "en-JM": "English (Jamaica)", "en-NZ": "English (New Zealand)", "en-PH": "English (Philippines)", "en-ZA": "English (South Africa)", "en-TT": "English (Trinidad & Tobago)", "en-GB": "English (United Kingdom)", "en-US": "English (United States)", "en-ZW": "English (Zimbabwe)", eo: "Esperanto", et: "Estonian", fo: "Faeroese", fj: "Fijian", fi: "Finnish", fr: "French (Standard)", "fr-BE": "French (Belgium)", "fr-CA": "French (Canada)", "fr-FR": "French (France)", "fr-LU": "French (Luxembourg)", "fr-MC": "French (Monaco)", "fr-CH": "French (Switzerland)", fy: "Frisian", fur: "Friulian", gd: "Gaelic (Scots)", "gd-IE": "Gaelic (Irish)", gl: "Galacian", ka: "Georgian", de: "German (Standard)", "de-AT": "German (Austria)", "de-DE": "German (Germany)", "de-LI": "German (Liechtenstein)", "de-LU": "German (Luxembourg)", "de-CH": "German (Switzerland)", el: "Greek", gu: "Gujurati", ht: "Haitian", he: "Hebrew", hi: "Hindi", hu: "Hungarian", is: "Icelandic", id: "Indonesian", iu: "Inuktitut", ga: "Irish", it: "Italian (Standard)", "it-CH": "Italian (Switzerland)", ja: "Japanese", kn: "Kannada", ks: "Kashmiri", kk: "Kazakh", km: "Khmer", ky: "Kirghiz", tlh: "Klingon", ko: "Korean", "ko-KP": "Korean (North Korea)", "ko-KR": "Korean (South Korea)", la: "Latin", lv: "Latvian", lt: "Lithuanian", lb: "Luxembourgish", mk: "North Macedonia", ms: "Malay", ml: "Malayalam", mt: "Maltese", mi: "Maori", mr: "Marathi", mo: "Moldavian", nv: "Navajo", ng: "Ndonga", ne: "Nepali", no: "Norwegian", nb: "Norwegian (Bokmal)", nn: "Norwegian (Nynorsk)", oc: "Occitan", or: "Oriya", om: "Oromo", fa: "Persian", "fa-IR": "Persian/Iran", pl: "Polish", pt: "Portuguese", "pt-BR": "Portuguese (Brazil)", pa: "Punjabi", "pa-IN": "Punjabi (India)", "pa-PK": "Punjabi (Pakistan)", qu: "Quechua", rm: "Rhaeto-Romanic", ro: "Romanian", "ro-MO": "Romanian (Moldavia)", ru: "Russian", "ru-MO": "Russian (Moldavia)", sz: "Sami (Lappish)", sg: "Sango", sa: "Sanskrit", sc: "Sardinian", sd: "Sindhi", si: "Singhalese", sr: "Serbian", sk: "Slovak", sl: "Slovenian", so: "Somani", sb: "Sorbian", es: "Spanish", "es-AR": "Spanish (Argentina)", "es-BO": "Spanish (Bolivia)", "es-CL": "Spanish (Chile)", "es-CO": "Spanish (Colombia)", "es-CR": "Spanish (Costa Rica)", "es-DO": "Spanish (Dominican Republic)", "es-EC": "Spanish (Ecuador)", "es-SV": "Spanish (El Salvador)", "es-GT": "Spanish (Guatemala)", "es-HN": "Spanish (Honduras)", "es-MX": "Spanish (Mexico)", "es-NI": "Spanish (Nicaragua)", "es-PA": "Spanish (Panama)", "es-PY": "Spanish (Paraguay)", "es-PE": "Spanish (Peru)", "es-PR": "Spanish (Puerto Rico)", "es-ES": "Spanish (Spain)", "es-UY": "Spanish (Uruguay)", "es-VE": "Spanish (Venezuela)", sx: "Sutu", sw: "Swahili", sv: "Swedish", "sv-FI": "Swedish (Finland)", "sv-SV": "Swedish (Sweden)", ta: "Tamil", tt: "Tatar", te: "Teluga", th: "Thai", tig: "Tigre", ts: "Tsonga", tn: "Tswana", tr: "Turkish", tk: "Turkmen", uk: "Ukrainian", hsb: "Upper Sorbian", ur: "Urdu", ve: "Venda", vi: "Vietnamese", vo: "Volapuk", wa: "Walloon", cy: "Welsh", xh: "Xhosa", ji: "Yiddish", zu: "Zulu" }[t3] && (this.internal.languageSettings.languageCode = t3, false === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
    this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
  }), this.internal.languageSettings.isSubscribed = true)), this;
}, Vt$1 = E$1.API, Gt$1 = Vt$1.getCharWidthsArray = function(e2, r2) {
  var n2, i2, a2 = (r2 = r2 || {}).font || this.internal.getFont(), o2 = r2.fontSize || this.internal.getFontSize(), s2 = r2.charSpace || this.internal.getCharSpace(), c2 = r2.widths ? r2.widths : a2.metadata.Unicode.widths, u2 = c2.fof ? c2.fof : 1, h2 = r2.kerning ? r2.kerning : a2.metadata.Unicode.kerning, l2 = h2.fof ? h2.fof : 1, f2 = false !== r2.doKerning, d2 = 0, p2 = e2.length, g2 = 0, m2 = c2[0] || u2, v2 = [];
  for (n2 = 0; n2 < p2; n2++)
    i2 = e2.charCodeAt(n2), "function" == typeof a2.metadata.widthOfString ? v2.push((a2.metadata.widthOfGlyph(a2.metadata.characterToGlyph(i2)) + s2 * (1e3 / o2) || 0) / 1e3) : (d2 = f2 && "object" === _typeof(h2[i2]) && !isNaN(parseInt(h2[i2][g2], 10)) ? h2[i2][g2] / l2 : 0, v2.push((c2[i2] || m2) / u2 + d2)), g2 = i2;
  return v2;
}, Yt = Vt$1.getStringUnitWidth = function(t3, e2) {
  var r2 = (e2 = e2 || {}).fontSize || this.internal.getFontSize(), n2 = e2.font || this.internal.getFont(), i2 = e2.charSpace || this.internal.getCharSpace();
  return Vt$1.processArabic && (t3 = Vt$1.processArabic(t3)), "function" == typeof n2.metadata.widthOfString ? n2.metadata.widthOfString(t3, r2, i2) / r2 : Gt$1.apply(this, arguments).reduce(function(t4, e3) {
    return t4 + e3;
  }, 0);
}, Jt = function(t3, e2, r2, n2) {
  for (var i2 = [], a2 = 0, o2 = t3.length, s2 = 0; a2 !== o2 && s2 + e2[a2] < r2; )
    s2 += e2[a2], a2++;
  i2.push(t3.slice(0, a2));
  var c2 = a2;
  for (s2 = 0; a2 !== o2; )
    s2 + e2[a2] > n2 && (i2.push(t3.slice(c2, a2)), s2 = 0, c2 = a2), s2 += e2[a2], a2++;
  return c2 !== a2 && i2.push(t3.slice(c2, a2)), i2;
}, Xt = function(t3, e2, r2) {
  r2 || (r2 = {});
  var n2, i2, a2, o2, s2, c2, u2, h2 = [], l2 = [h2], f2 = r2.textIndent || 0, d2 = 0, p2 = 0, g2 = t3.split(" "), m2 = Gt$1.apply(this, [" ", r2])[0];
  if (c2 = -1 === r2.lineIndent ? g2[0].length + 2 : r2.lineIndent || 0) {
    var v2 = Array(c2).join(" "), b2 = [];
    g2.map(function(t4) {
      (t4 = t4.split(/\s*\n/)).length > 1 ? b2 = b2.concat(t4.map(function(t5, e3) {
        return (e3 && t5.length ? "\n" : "") + t5;
      })) : b2.push(t4[0]);
    }), g2 = b2, c2 = Yt.apply(this, [v2, r2]);
  }
  for (a2 = 0, o2 = g2.length; a2 < o2; a2++) {
    var y2 = 0;
    if (n2 = g2[a2], c2 && "\n" == n2[0] && (n2 = n2.substr(1), y2 = 1), f2 + d2 + (p2 = (i2 = Gt$1.apply(this, [n2, r2])).reduce(function(t4, e3) {
      return t4 + e3;
    }, 0)) > e2 || y2) {
      if (p2 > e2) {
        for (s2 = Jt.apply(this, [n2, i2, e2 - (f2 + d2), e2]), h2.push(s2.shift()), h2 = [s2.pop()]; s2.length; )
          l2.push([s2.shift()]);
        p2 = i2.slice(n2.length - (h2[0] ? h2[0].length : 0)).reduce(function(t4, e3) {
          return t4 + e3;
        }, 0);
      } else
        h2 = [n2];
      l2.push(h2), f2 = p2 + c2, d2 = m2;
    } else
      h2.push(n2), f2 += d2 + p2, d2 = m2;
  }
  return u2 = c2 ? function(t4, e3) {
    return (e3 ? v2 : "") + t4.join(" ");
  } : function(t4) {
    return t4.join(" ");
  }, l2.map(u2);
}, Vt$1.splitTextToSize = function(t3, e2, r2) {
  var n2, i2 = (r2 = r2 || {}).fontSize || this.internal.getFontSize(), a2 = (function(t4) {
    if (t4.widths && t4.kerning)
      return { widths: t4.widths, kerning: t4.kerning };
    var e3 = this.internal.getFont(t4.fontName, t4.fontStyle);
    return e3.metadata.Unicode ? { widths: e3.metadata.Unicode.widths || { 0: 1 }, kerning: e3.metadata.Unicode.kerning || {} } : { font: e3.metadata, fontSize: this.internal.getFontSize(), charSpace: this.internal.getCharSpace() };
  }).call(this, r2);
  n2 = Array.isArray(t3) ? t3 : String(t3).split(/\r?\n/);
  var o2 = 1 * this.internal.scaleFactor * e2 / i2;
  a2.textIndent = r2.textIndent ? 1 * r2.textIndent * this.internal.scaleFactor / i2 : 0, a2.lineIndent = r2.lineIndent;
  var s2, c2, u2 = [];
  for (s2 = 0, c2 = n2.length; s2 < c2; s2++)
    u2 = u2.concat(Xt.apply(this, [n2[s2], o2, a2]));
  return u2;
}, function(e2) {
  e2.__fontmetrics__ = e2.__fontmetrics__ || {};
  for (var r2 = "klmnopqrstuvwxyz", n2 = {}, i2 = {}, a2 = 0; a2 < r2.length; a2++)
    n2[r2[a2]] = "0123456789abcdef"[a2], i2["0123456789abcdef"[a2]] = r2[a2];
  var o2 = function(t3) {
    return "0x" + parseInt(t3, 10).toString(16);
  }, s2 = e2.__fontmetrics__.compress = function(e3) {
    var r3, n3, a3, c3, u3 = ["{"];
    for (var h3 in e3) {
      if (r3 = e3[h3], isNaN(parseInt(h3, 10)) ? n3 = "'" + h3 + "'" : (h3 = parseInt(h3, 10), n3 = (n3 = o2(h3).slice(2)).slice(0, -1) + i2[n3.slice(-1)]), "number" == typeof r3)
        r3 < 0 ? (a3 = o2(r3).slice(3), c3 = "-") : (a3 = o2(r3).slice(2), c3 = ""), a3 = c3 + a3.slice(0, -1) + i2[a3.slice(-1)];
      else {
        if ("object" !== _typeof(r3))
          throw new Error("Don't know what to do with value type " + _typeof(r3) + ".");
        a3 = s2(r3);
      }
      u3.push(n3 + a3);
    }
    return u3.push("}"), u3.join("");
  }, c2 = e2.__fontmetrics__.uncompress = function(t3) {
    if ("string" != typeof t3)
      throw new Error("Invalid argument passed to uncompress.");
    for (var e3, r3, i3, a3, o3 = {}, s3 = 1, c3 = o3, u3 = [], h3 = "", l3 = "", f2 = t3.length - 1, d2 = 1; d2 < f2; d2 += 1)
      "'" == (a3 = t3[d2]) ? e3 ? (i3 = e3.join(""), e3 = void 0) : e3 = [] : e3 ? e3.push(a3) : "{" == a3 ? (u3.push([c3, i3]), c3 = {}, i3 = void 0) : "}" == a3 ? ((r3 = u3.pop())[0][r3[1]] = c3, i3 = void 0, c3 = r3[0]) : "-" == a3 ? s3 = -1 : void 0 === i3 ? n2.hasOwnProperty(a3) ? (h3 += n2[a3], i3 = parseInt(h3, 16) * s3, s3 = 1, h3 = "") : h3 += a3 : n2.hasOwnProperty(a3) ? (l3 += n2[a3], c3[i3] = parseInt(l3, 16) * s3, s3 = 1, i3 = void 0, l3 = "") : l3 += a3;
    return o3;
  }, u2 = { codePages: ["WinAnsiEncoding"], WinAnsiEncoding: c2("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}") }, h2 = { Unicode: { Courier: u2, "Courier-Bold": u2, "Courier-BoldOblique": u2, "Courier-Oblique": u2, Helvetica: u2, "Helvetica-Bold": u2, "Helvetica-BoldOblique": u2, "Helvetica-Oblique": u2, "Times-Roman": u2, "Times-Bold": u2, "Times-BoldItalic": u2, "Times-Italic": u2 } }, l2 = { Unicode: { "Courier-Oblique": c2("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"), "Times-BoldItalic": c2("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"), "Helvetica-Bold": c2("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"), Courier: c2("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"), "Courier-BoldOblique": c2("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"), "Times-Bold": c2("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"), Symbol: c2("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"), Helvetica: c2("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"), "Helvetica-BoldOblique": c2("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"), ZapfDingbats: c2("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"), "Courier-Bold": c2("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"), "Times-Italic": c2("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"), "Times-Roman": c2("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"), "Helvetica-Oblique": c2("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}") } };
  e2.events.push(["addFont", function(t3) {
    var e3 = t3.font, r3 = l2.Unicode[e3.postScriptName];
    r3 && (e3.metadata.Unicode = {}, e3.metadata.Unicode.widths = r3.widths, e3.metadata.Unicode.kerning = r3.kerning);
    var n3 = h2.Unicode[e3.postScriptName];
    n3 && (e3.metadata.Unicode.encoding = n3, e3.encoding = n3.codePages[0]);
  }]);
}(E$1.API), /**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = function(t4) {
    for (var e3 = t4.length, r2 = new Uint8Array(e3), n2 = 0; n2 < e3; n2++)
      r2[n2] = t4.charCodeAt(n2);
    return r2;
  };
  t3.API.events.push(["addFont", function(r2) {
    var n2 = void 0, i2 = r2.font, a2 = r2.instance;
    if (!i2.isStandardFont) {
      if (void 0 === a2)
        throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i2.postScriptName + "').");
      if ("string" != typeof (n2 = false === a2.existsFileInVFS(i2.postScriptName) ? a2.loadFile(i2.postScriptName) : a2.getFileFromVFS(i2.postScriptName)))
        throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i2.postScriptName + "').");
      !function(r3, n3) {
        n3 = /^\x00\x01\x00\x00/.test(n3) ? e2(n3) : e2(u$2(n3)), r3.metadata = t3.API.TTFFont.open(n3), r3.metadata.Unicode = r3.metadata.Unicode || { encoding: {}, kerning: {}, widths: [] }, r3.metadata.glyIdsUsed = [0];
      }(i2, n2);
    }
  }]);
}(E$1), /** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function(t3) {
  function e2() {
    return (n$1.canvg ? Promise.resolve(n$1.canvg) : __vitePreload(() => import("./index.es-276e31d6.js"), true ? [] : void 0)).catch(function(t4) {
      return Promise.reject(new Error("Could not load canvg: " + t4));
    }).then(function(t4) {
      return t4.default ? t4.default : t4;
    });
  }
  E$1.API.addSvgAsImage = function(t4, r2, n2, i2, o2, s2, c2, u2) {
    if (isNaN(r2) || isNaN(n2))
      throw a$1.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
    if (isNaN(i2) || isNaN(o2))
      throw a$1.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
    var h2 = document.createElement("canvas");
    h2.width = i2, h2.height = o2;
    var l2 = h2.getContext("2d");
    l2.fillStyle = "#fff", l2.fillRect(0, 0, h2.width, h2.height);
    var f2 = { ignoreMouse: true, ignoreAnimation: true, ignoreDimensions: true }, d2 = this;
    return e2().then(function(e3) {
      return e3.fromString(l2, t4, f2);
    }, function() {
      return Promise.reject(new Error("Could not load canvg."));
    }).then(function(t5) {
      return t5.render(f2);
    }).then(function() {
      d2.addImage(h2.toDataURL("image/jpeg", 1), r2, n2, i2, o2, c2, u2);
    });
  };
}(), E$1.API.putTotalPages = function(t3) {
  var e2, r2 = 0;
  parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e2 = new RegExp(t3, "g"), r2 = this.internal.getNumberOfPages()) : (e2 = new RegExp(this.pdfEscape16(t3, this.internal.getFont()), "g"), r2 = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
  for (var n2 = 1; n2 <= this.internal.getNumberOfPages(); n2++)
    for (var i2 = 0; i2 < this.internal.pages[n2].length; i2++)
      this.internal.pages[n2][i2] = this.internal.pages[n2][i2].replace(e2, r2);
  return this;
}, E$1.API.viewerPreferences = function(e2, r2) {
  var n2;
  e2 = e2 || {}, r2 = r2 || false;
  var i2, a2, o2, s2 = { HideToolbar: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.3 }, HideMenubar: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.3 }, HideWindowUI: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.3 }, FitWindow: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.3 }, CenterWindow: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.3 }, DisplayDocTitle: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.4 }, NonFullScreenPageMode: { defaultValue: "UseNone", value: "UseNone", type: "name", explicitSet: false, valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"], pdfVersion: 1.3 }, Direction: { defaultValue: "L2R", value: "L2R", type: "name", explicitSet: false, valueSet: ["L2R", "R2L"], pdfVersion: 1.3 }, ViewArea: { defaultValue: "CropBox", value: "CropBox", type: "name", explicitSet: false, valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"], pdfVersion: 1.4 }, ViewClip: { defaultValue: "CropBox", value: "CropBox", type: "name", explicitSet: false, valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"], pdfVersion: 1.4 }, PrintArea: { defaultValue: "CropBox", value: "CropBox", type: "name", explicitSet: false, valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"], pdfVersion: 1.4 }, PrintClip: { defaultValue: "CropBox", value: "CropBox", type: "name", explicitSet: false, valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"], pdfVersion: 1.4 }, PrintScaling: { defaultValue: "AppDefault", value: "AppDefault", type: "name", explicitSet: false, valueSet: ["AppDefault", "None"], pdfVersion: 1.6 }, Duplex: { defaultValue: "", value: "none", type: "name", explicitSet: false, valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"], pdfVersion: 1.7 }, PickTrayByPDFSize: { defaultValue: false, value: false, type: "boolean", explicitSet: false, valueSet: [true, false], pdfVersion: 1.7 }, PrintPageRange: { defaultValue: "", value: "", type: "array", explicitSet: false, valueSet: null, pdfVersion: 1.7 }, NumCopies: { defaultValue: 1, value: 1, type: "integer", explicitSet: false, valueSet: null, pdfVersion: 1.7 } }, c2 = Object.keys(s2), u2 = [], h2 = 0, l2 = 0, f2 = 0;
  function d2(t3, e3) {
    var r3, n3 = false;
    for (r3 = 0; r3 < t3.length; r3 += 1)
      t3[r3] === e3 && (n3 = true);
    return n3;
  }
  if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s2)), this.internal.viewerpreferences.isSubscribed = false), n2 = this.internal.viewerpreferences.configuration, "reset" === e2 || true === r2) {
    var p2 = c2.length;
    for (f2 = 0; f2 < p2; f2 += 1)
      n2[c2[f2]].value = n2[c2[f2]].defaultValue, n2[c2[f2]].explicitSet = false;
  }
  if ("object" === _typeof(e2)) {
    for (a2 in e2)
      if (o2 = e2[a2], d2(c2, a2) && void 0 !== o2) {
        if ("boolean" === n2[a2].type && "boolean" == typeof o2)
          n2[a2].value = o2;
        else if ("name" === n2[a2].type && d2(n2[a2].valueSet, o2))
          n2[a2].value = o2;
        else if ("integer" === n2[a2].type && Number.isInteger(o2))
          n2[a2].value = o2;
        else if ("array" === n2[a2].type) {
          for (h2 = 0; h2 < o2.length; h2 += 1)
            if (i2 = true, 1 === o2[h2].length && "number" == typeof o2[h2][0])
              u2.push(String(o2[h2] - 1));
            else if (o2[h2].length > 1) {
              for (l2 = 0; l2 < o2[h2].length; l2 += 1)
                "number" != typeof o2[h2][l2] && (i2 = false);
              true === i2 && u2.push([o2[h2][0] - 1, o2[h2][1] - 1].join(" "));
            }
          n2[a2].value = "[" + u2.join(" ") + "]";
        } else
          n2[a2].value = n2[a2].defaultValue;
        n2[a2].explicitSet = true;
      }
  }
  return false === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
    var t3, e3 = [];
    for (t3 in n2)
      true === n2[t3].explicitSet && ("name" === n2[t3].type ? e3.push("/" + t3 + " /" + n2[t3].value) : e3.push("/" + t3 + " " + n2[t3].value));
    0 !== e3.length && this.internal.write("/ViewerPreferences\n<<\n" + e3.join("\n") + "\n>>");
  }), this.internal.viewerpreferences.isSubscribed = true), this.internal.viewerpreferences.configuration = n2, this;
}, /** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function(t3) {
  var e2 = function() {
    var t4 = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>', e3 = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')), r3 = unescape(encodeURIComponent(t4)), n2 = unescape(encodeURIComponent(this.internal.__metadata__.metadata)), i2 = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")), a2 = unescape(encodeURIComponent("</x:xmpmeta>")), o2 = r3.length + n2.length + i2.length + e3.length + a2.length;
    this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o2 + " >>"), this.internal.write("stream"), this.internal.write(e3 + r3 + n2 + i2 + a2), this.internal.write("endstream"), this.internal.write("endobj");
  }, r2 = function() {
    this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
  };
  t3.addMetadata = function(t4, n2) {
    return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = { metadata: t4, namespaceuri: n2 || "http://jspdf.default.namespaceuri/" }, this.internal.events.subscribe("putCatalog", r2), this.internal.events.subscribe("postPutResources", e2)), this;
  };
}(E$1.API), function(t3) {
  var e2 = t3.API, r2 = e2.pdfEscape16 = function(t4, e3) {
    for (var r3, n3 = e3.metadata.Unicode.widths, i3 = ["", "0", "00", "000", "0000"], a2 = [""], o2 = 0, s2 = t4.length; o2 < s2; ++o2) {
      if (r3 = e3.metadata.characterToGlyph(t4.charCodeAt(o2)), e3.metadata.glyIdsUsed.push(r3), e3.metadata.toUnicode[r3] = t4.charCodeAt(o2), -1 == n3.indexOf(r3) && (n3.push(r3), n3.push([parseInt(e3.metadata.widthOfGlyph(r3), 10)])), "0" == r3)
        return a2.join("");
      r3 = r3.toString(16), a2.push(i3[4 - r3.length], r3);
    }
    return a2.join("");
  }, n2 = function(t4) {
    var e3, r3, n3, i3, a2, o2, s2;
    for (a2 = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n3 = [], o2 = 0, s2 = (r3 = Object.keys(t4).sort(function(t5, e4) {
      return t5 - e4;
    })).length; o2 < s2; o2++)
      e3 = r3[o2], n3.length >= 100 && (a2 += "\n" + n3.length + " beginbfchar\n" + n3.join("\n") + "\nendbfchar", n3 = []), void 0 !== t4[e3] && null !== t4[e3] && "function" == typeof t4[e3].toString && (i3 = ("0000" + t4[e3].toString(16)).slice(-4), e3 = ("0000" + (+e3).toString(16)).slice(-4), n3.push("<" + e3 + "><" + i3 + ">"));
    return n3.length && (a2 += "\n" + n3.length + " beginbfchar\n" + n3.join("\n") + "\nendbfchar\n"), a2 += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
  };
  e2.events.push(["putFont", function(e3) {
    !function(e4) {
      var r3 = e4.font, i3 = e4.out, a2 = e4.newObject, o2 = e4.putStream;
      if (r3.metadata instanceof t3.API.TTFFont && "Identity-H" === r3.encoding) {
        for (var s2 = r3.metadata.Unicode.widths, c2 = r3.metadata.subset.encode(r3.metadata.glyIdsUsed, 1), u2 = "", h2 = 0; h2 < c2.length; h2++)
          u2 += String.fromCharCode(c2[h2]);
        var l2 = a2();
        o2({ data: u2, addLength1: true, objectId: l2 }), i3("endobj");
        var f2 = a2();
        o2({ data: n2(r3.metadata.toUnicode), addLength1: true, objectId: f2 }), i3("endobj");
        var d2 = a2();
        i3("<<"), i3("/Type /FontDescriptor"), i3("/FontName /" + F$1(r3.fontName)), i3("/FontFile2 " + l2 + " 0 R"), i3("/FontBBox " + t3.API.PDFObject.convert(r3.metadata.bbox)), i3("/Flags " + r3.metadata.flags), i3("/StemV " + r3.metadata.stemV), i3("/ItalicAngle " + r3.metadata.italicAngle), i3("/Ascent " + r3.metadata.ascender), i3("/Descent " + r3.metadata.decender), i3("/CapHeight " + r3.metadata.capHeight), i3(">>"), i3("endobj");
        var p2 = a2();
        i3("<<"), i3("/Type /Font"), i3("/BaseFont /" + F$1(r3.fontName)), i3("/FontDescriptor " + d2 + " 0 R"), i3("/W " + t3.API.PDFObject.convert(s2)), i3("/CIDToGIDMap /Identity"), i3("/DW 1000"), i3("/Subtype /CIDFontType2"), i3("/CIDSystemInfo"), i3("<<"), i3("/Supplement 0"), i3("/Registry (Adobe)"), i3("/Ordering (" + r3.encoding + ")"), i3(">>"), i3(">>"), i3("endobj"), r3.objectNumber = a2(), i3("<<"), i3("/Type /Font"), i3("/Subtype /Type0"), i3("/ToUnicode " + f2 + " 0 R"), i3("/BaseFont /" + F$1(r3.fontName)), i3("/Encoding /" + r3.encoding), i3("/DescendantFonts [" + p2 + " 0 R]"), i3(">>"), i3("endobj"), r3.isAlreadyPutted = true;
      }
    }(e3);
  }]);
  e2.events.push(["putFont", function(e3) {
    !function(e4) {
      var r3 = e4.font, i3 = e4.out, a2 = e4.newObject, o2 = e4.putStream;
      if (r3.metadata instanceof t3.API.TTFFont && "WinAnsiEncoding" === r3.encoding) {
        for (var s2 = r3.metadata.rawData, c2 = "", u2 = 0; u2 < s2.length; u2++)
          c2 += String.fromCharCode(s2[u2]);
        var h2 = a2();
        o2({ data: c2, addLength1: true, objectId: h2 }), i3("endobj");
        var l2 = a2();
        o2({ data: n2(r3.metadata.toUnicode), addLength1: true, objectId: l2 }), i3("endobj");
        var f2 = a2();
        i3("<<"), i3("/Descent " + r3.metadata.decender), i3("/CapHeight " + r3.metadata.capHeight), i3("/StemV " + r3.metadata.stemV), i3("/Type /FontDescriptor"), i3("/FontFile2 " + h2 + " 0 R"), i3("/Flags 96"), i3("/FontBBox " + t3.API.PDFObject.convert(r3.metadata.bbox)), i3("/FontName /" + F$1(r3.fontName)), i3("/ItalicAngle " + r3.metadata.italicAngle), i3("/Ascent " + r3.metadata.ascender), i3(">>"), i3("endobj"), r3.objectNumber = a2();
        for (var d2 = 0; d2 < r3.metadata.hmtx.widths.length; d2++)
          r3.metadata.hmtx.widths[d2] = parseInt(r3.metadata.hmtx.widths[d2] * (1e3 / r3.metadata.head.unitsPerEm));
        i3("<</Subtype/TrueType/Type/Font/ToUnicode " + l2 + " 0 R/BaseFont/" + F$1(r3.fontName) + "/FontDescriptor " + f2 + " 0 R/Encoding/" + r3.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t3.API.PDFObject.convert(r3.metadata.hmtx.widths) + ">>"), i3("endobj"), r3.isAlreadyPutted = true;
      }
    }(e3);
  }]);
  var i2 = function(t4) {
    var e3, n3 = t4.text || "", i3 = t4.x, a2 = t4.y, o2 = t4.options || {}, s2 = t4.mutex || {}, c2 = s2.pdfEscape, u2 = s2.activeFontKey, h2 = s2.fonts, l2 = u2, f2 = "", d2 = 0, p2 = "", g2 = h2[l2].encoding;
    if ("Identity-H" !== h2[l2].encoding)
      return { text: n3, x: i3, y: a2, options: o2, mutex: s2 };
    for (p2 = n3, l2 = u2, Array.isArray(n3) && (p2 = n3[0]), d2 = 0; d2 < p2.length; d2 += 1)
      h2[l2].metadata.hasOwnProperty("cmap") && (e3 = h2[l2].metadata.cmap.unicode.codeMap[p2[d2].charCodeAt(0)]), e3 || p2[d2].charCodeAt(0) < 256 && h2[l2].metadata.hasOwnProperty("Unicode") ? f2 += p2[d2] : f2 += "";
    var m2 = "";
    return parseInt(l2.slice(1)) < 14 || "WinAnsiEncoding" === g2 ? m2 = c2(f2, l2).split("").map(function(t5) {
      return t5.charCodeAt(0).toString(16);
    }).join("") : "Identity-H" === g2 && (m2 = r2(f2, h2[l2])), s2.isHex = true, { text: m2, x: i3, y: a2, options: o2, mutex: s2 };
  };
  e2.events.push(["postProcessText", function(t4) {
    var e3 = t4.text || "", r3 = [], n3 = { text: e3, x: t4.x, y: t4.y, options: t4.options, mutex: t4.mutex };
    if (Array.isArray(e3)) {
      var a2 = 0;
      for (a2 = 0; a2 < e3.length; a2 += 1)
        Array.isArray(e3[a2]) && 3 === e3[a2].length ? r3.push([i2(Object.assign({}, n3, { text: e3[a2][0] })).text, e3[a2][1], e3[a2][2]]) : r3.push(i2(Object.assign({}, n3, { text: e3[a2] })).text);
      t4.text = r3;
    } else
      t4.text = i2(Object.assign({}, n3, { text: e3 })).text;
  }]);
}(E$1), /**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t3) {
  var e2 = function() {
    return void 0 === this.internal.vFS && (this.internal.vFS = {}), true;
  };
  t3.existsFileInVFS = function(t4) {
    return e2.call(this), void 0 !== this.internal.vFS[t4];
  }, t3.addFileToVFS = function(t4, r2) {
    return e2.call(this), this.internal.vFS[t4] = r2, this;
  }, t3.getFileFromVFS = function(t4) {
    return e2.call(this), void 0 !== this.internal.vFS[t4] ? this.internal.vFS[t4] : null;
  };
}(E$1.API), /**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */
function(t3) {
  t3.__bidiEngine__ = t3.prototype.__bidiEngine__ = function(t4) {
    var r3, n2, i2, a2, o2, s2, c2, u2 = e2, h2 = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]], l2 = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]], f2 = { L: 0, R: 1, EN: 2, AN: 3, N: 4, B: 5, S: 6 }, d2 = { 0: 0, 5: 1, 6: 2, 7: 3, 32: 4, 251: 5, 254: 6, 255: 7 }, p2 = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"], g2 = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/), m2 = false, v2 = 0;
    this.__bidiEngine__ = {};
    var b2 = function(t5) {
      var e3 = t5.charCodeAt(), r4 = e3 >> 8, n3 = d2[r4];
      return void 0 !== n3 ? u2[256 * n3 + (255 & e3)] : 252 === r4 || 253 === r4 ? "AL" : g2.test(r4) ? "L" : 8 === r4 ? "R" : "N";
    }, y2 = function(t5) {
      for (var e3, r4 = 0; r4 < t5.length; r4++) {
        if ("L" === (e3 = b2(t5.charAt(r4))))
          return false;
        if ("R" === e3)
          return true;
      }
      return false;
    }, w2 = function(t5, e3, o3, s3) {
      var c3, u3, h3, l3, f3 = e3[s3];
      switch (f3) {
        case "L":
        case "R":
          m2 = false;
          break;
        case "N":
        case "AN":
          break;
        case "EN":
          m2 && (f3 = "AN");
          break;
        case "AL":
          m2 = true, f3 = "R";
          break;
        case "WS":
          f3 = "N";
          break;
        case "CS":
          s3 < 1 || s3 + 1 >= e3.length || "EN" !== (c3 = o3[s3 - 1]) && "AN" !== c3 || "EN" !== (u3 = e3[s3 + 1]) && "AN" !== u3 ? f3 = "N" : m2 && (u3 = "AN"), f3 = u3 === c3 ? u3 : "N";
          break;
        case "ES":
          f3 = "EN" === (c3 = s3 > 0 ? o3[s3 - 1] : "B") && s3 + 1 < e3.length && "EN" === e3[s3 + 1] ? "EN" : "N";
          break;
        case "ET":
          if (s3 > 0 && "EN" === o3[s3 - 1]) {
            f3 = "EN";
            break;
          }
          if (m2) {
            f3 = "N";
            break;
          }
          for (h3 = s3 + 1, l3 = e3.length; h3 < l3 && "ET" === e3[h3]; )
            h3++;
          f3 = h3 < l3 && "EN" === e3[h3] ? "EN" : "N";
          break;
        case "NSM":
          if (i2 && !a2) {
            for (l3 = e3.length, h3 = s3 + 1; h3 < l3 && "NSM" === e3[h3]; )
              h3++;
            if (h3 < l3) {
              var d4 = t5[s3], p3 = d4 >= 1425 && d4 <= 2303 || 64286 === d4;
              if (c3 = e3[h3], p3 && ("R" === c3 || "AL" === c3)) {
                f3 = "R";
                break;
              }
            }
          }
          f3 = s3 < 1 || "B" === (c3 = e3[s3 - 1]) ? "N" : o3[s3 - 1];
          break;
        case "B":
          m2 = false, r3 = true, f3 = v2;
          break;
        case "S":
          n2 = true, f3 = "N";
          break;
        case "LRE":
        case "RLE":
        case "LRO":
        case "RLO":
        case "PDF":
          m2 = false;
          break;
        case "BN":
          f3 = "N";
      }
      return f3;
    }, N2 = function(t5, e3, r4) {
      var n3 = t5.split("");
      return r4 && L2(n3, r4, { hiLevel: v2 }), n3.reverse(), e3 && e3.reverse(), n3.join("");
    }, L2 = function(t5, e3, i3) {
      var a3, o3, s3, c3, u3, d4 = -1, p3 = t5.length, g3 = 0, y3 = [], N3 = v2 ? l2 : h2, L3 = [];
      for (m2 = false, r3 = false, n2 = false, o3 = 0; o3 < p3; o3++)
        L3[o3] = b2(t5[o3]);
      for (s3 = 0; s3 < p3; s3++) {
        if (u3 = g3, y3[s3] = w2(t5, L3, y3, s3), a3 = 240 & (g3 = N3[u3][f2[y3[s3]]]), g3 &= 15, e3[s3] = c3 = N3[g3][5], a3 > 0)
          if (16 === a3) {
            for (o3 = d4; o3 < s3; o3++)
              e3[o3] = 1;
            d4 = -1;
          } else
            d4 = -1;
        if (N3[g3][6])
          -1 === d4 && (d4 = s3);
        else if (d4 > -1) {
          for (o3 = d4; o3 < s3; o3++)
            e3[o3] = c3;
          d4 = -1;
        }
        "B" === L3[s3] && (e3[s3] = 0), i3.hiLevel |= c3;
      }
      n2 && function(t6, e4, r4) {
        for (var n3 = 0; n3 < r4; n3++)
          if ("S" === t6[n3]) {
            e4[n3] = v2;
            for (var i4 = n3 - 1; i4 >= 0 && "WS" === t6[i4]; i4--)
              e4[i4] = v2;
          }
      }(L3, e3, p3);
    }, A2 = function(t5, e3, n3, i3, a3) {
      if (!(a3.hiLevel < t5)) {
        if (1 === t5 && 1 === v2 && !r3)
          return e3.reverse(), void (n3 && n3.reverse());
        for (var o3, s3, c3, u3, h3 = e3.length, l3 = 0; l3 < h3; ) {
          if (i3[l3] >= t5) {
            for (c3 = l3 + 1; c3 < h3 && i3[c3] >= t5; )
              c3++;
            for (u3 = l3, s3 = c3 - 1; u3 < s3; u3++, s3--)
              o3 = e3[u3], e3[u3] = e3[s3], e3[s3] = o3, n3 && (o3 = n3[u3], n3[u3] = n3[s3], n3[s3] = o3);
            l3 = c3;
          }
          l3++;
        }
      }
    }, x2 = function(t5, e3, r4) {
      var n3 = t5.split(""), i3 = { hiLevel: v2 };
      return r4 || (r4 = []), L2(n3, r4, i3), function(t6, e4, r5) {
        if (0 !== r5.hiLevel && c2)
          for (var n4, i4 = 0; i4 < t6.length; i4++)
            1 === e4[i4] && (n4 = p2.indexOf(t6[i4])) >= 0 && (t6[i4] = p2[n4 + 1]);
      }(n3, r4, i3), A2(2, n3, e3, r4, i3), A2(1, n3, e3, r4, i3), n3.join("");
    };
    return this.__bidiEngine__.doBidiReorder = function(t5, e3, r4) {
      if (function(t6, e4) {
        if (e4)
          for (var r5 = 0; r5 < t6.length; r5++)
            e4[r5] = r5;
        void 0 === a2 && (a2 = y2(t6)), void 0 === s2 && (s2 = y2(t6));
      }(t5, e3), i2 || !o2 || s2)
        if (i2 && o2 && a2 ^ s2)
          v2 = a2 ? 1 : 0, t5 = N2(t5, e3, r4);
        else if (!i2 && o2 && s2)
          v2 = a2 ? 1 : 0, t5 = x2(t5, e3, r4), t5 = N2(t5, e3);
        else if (!i2 || a2 || o2 || s2) {
          if (i2 && !o2 && a2 ^ s2)
            t5 = N2(t5, e3), a2 ? (v2 = 0, t5 = x2(t5, e3, r4)) : (v2 = 1, t5 = x2(t5, e3, r4), t5 = N2(t5, e3));
          else if (i2 && a2 && !o2 && s2)
            v2 = 1, t5 = x2(t5, e3, r4), t5 = N2(t5, e3);
          else if (!i2 && !o2 && a2 ^ s2) {
            var n3 = c2;
            a2 ? (v2 = 1, t5 = x2(t5, e3, r4), v2 = 0, c2 = false, t5 = x2(t5, e3, r4), c2 = n3) : (v2 = 0, t5 = x2(t5, e3, r4), t5 = N2(t5, e3), v2 = 1, c2 = false, t5 = x2(t5, e3, r4), c2 = n3, t5 = N2(t5, e3));
          }
        } else
          v2 = 0, t5 = x2(t5, e3, r4);
      else
        v2 = a2 ? 1 : 0, t5 = x2(t5, e3, r4);
      return t5;
    }, this.__bidiEngine__.setOptions = function(t5) {
      t5 && (i2 = t5.isInputVisual, o2 = t5.isOutputVisual, a2 = t5.isInputRtl, s2 = t5.isOutputRtl, c2 = t5.isSymmetricSwapping);
    }, this.__bidiEngine__.setOptions(t4), this.__bidiEngine__;
  };
  var e2 = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"], r2 = new t3.__bidiEngine__({ isInputVisual: true });
  t3.API.events.push(["postProcessText", function(t4) {
    var e3 = t4.text, n2 = (t4.x, t4.y, t4.options || {}), i2 = (t4.mutex, n2.lang, []);
    if (n2.isInputVisual = "boolean" != typeof n2.isInputVisual || n2.isInputVisual, r2.setOptions(n2), "[object Array]" === Object.prototype.toString.call(e3)) {
      var a2 = 0;
      for (i2 = [], a2 = 0; a2 < e3.length; a2 += 1)
        "[object Array]" === Object.prototype.toString.call(e3[a2]) ? i2.push([r2.doBidiReorder(e3[a2][0]), e3[a2][1], e3[a2][2]]) : i2.push([r2.doBidiReorder(e3[a2])]);
      t4.text = i2;
    } else
      t4.text = r2.doBidiReorder(e3);
    r2.setOptions({ isInputVisual: true });
  }]);
}(E$1), E$1.API.TTFFont = function() {
  function t3(t4) {
    var e2;
    if (this.rawData = t4, e2 = this.contents = new ne(t4), this.contents.pos = 4, "ttcf" === e2.readString(4))
      throw new Error("TTCF not supported.");
    e2.pos = 0, this.parse(), this.subset = new Le(this), this.registerTTF();
  }
  return t3.open = function(e2) {
    return new t3(e2);
  }, t3.prototype.parse = function() {
    return this.directory = new ie(this.contents), this.head = new se(this), this.name = new pe(this), this.cmap = new ue(this), this.toUnicode = {}, this.hhea = new he(this), this.maxp = new ge(this), this.hmtx = new me(this), this.post = new fe(this), this.os2 = new le(this), this.loca = new Ne(this), this.glyf = new be(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
  }, t3.prototype.registerTTF = function() {
    var t4, e2, r2, n2, i2;
    if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = (function() {
      var e3, r3, n3, i3;
      for (i3 = [], e3 = 0, r3 = (n3 = this.bbox).length; e3 < r3; e3++)
        t4 = n3[e3], i3.push(Math.round(t4 * this.scaleFactor));
      return i3;
    }).call(this), this.stemV = 0, this.post.exists ? (r2 = 255 & (n2 = this.post.italic_angle), 0 != (32768 & (e2 = n2 >> 16)) && (e2 = -(1 + (65535 ^ e2))), this.italicAngle = +(e2 + "." + r2)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i2 = this.familyClass) || 2 === i2 || 3 === i2 || 4 === i2 || 5 === i2 || 7 === i2, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode)
      throw new Error("No unicode cmap for font");
  }, t3.prototype.characterToGlyph = function(t4) {
    var e2;
    return (null != (e2 = this.cmap.unicode) ? e2.codeMap[t4] : void 0) || 0;
  }, t3.prototype.widthOfGlyph = function(t4) {
    var e2;
    return e2 = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t4).advance * e2;
  }, t3.prototype.widthOfString = function(t4, e2, r2) {
    var n2, i2, a2, o2;
    for (a2 = 0, i2 = 0, o2 = (t4 = "" + t4).length; 0 <= o2 ? i2 < o2 : i2 > o2; i2 = 0 <= o2 ? ++i2 : --i2)
      n2 = t4.charCodeAt(i2), a2 += this.widthOfGlyph(this.characterToGlyph(n2)) + r2 * (1e3 / e2) || 0;
    return a2 * (e2 / 1e3);
  }, t3.prototype.lineHeight = function(t4, e2) {
    var r2;
    return null == e2 && (e2 = false), r2 = e2 ? this.lineGap : 0, (this.ascender + r2 - this.decender) / 1e3 * t4;
  }, t3;
}();
var re, ne = function() {
  function t3(t4) {
    this.data = null != t4 ? t4 : [], this.pos = 0, this.length = this.data.length;
  }
  return t3.prototype.readByte = function() {
    return this.data[this.pos++];
  }, t3.prototype.writeByte = function(t4) {
    return this.data[this.pos++] = t4;
  }, t3.prototype.readUInt32 = function() {
    return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
  }, t3.prototype.writeUInt32 = function(t4) {
    return this.writeByte(t4 >>> 24 & 255), this.writeByte(t4 >> 16 & 255), this.writeByte(t4 >> 8 & 255), this.writeByte(255 & t4);
  }, t3.prototype.readInt32 = function() {
    var t4;
    return (t4 = this.readUInt32()) >= 2147483648 ? t4 - 4294967296 : t4;
  }, t3.prototype.writeInt32 = function(t4) {
    return t4 < 0 && (t4 += 4294967296), this.writeUInt32(t4);
  }, t3.prototype.readUInt16 = function() {
    return this.readByte() << 8 | this.readByte();
  }, t3.prototype.writeUInt16 = function(t4) {
    return this.writeByte(t4 >> 8 & 255), this.writeByte(255 & t4);
  }, t3.prototype.readInt16 = function() {
    var t4;
    return (t4 = this.readUInt16()) >= 32768 ? t4 - 65536 : t4;
  }, t3.prototype.writeInt16 = function(t4) {
    return t4 < 0 && (t4 += 65536), this.writeUInt16(t4);
  }, t3.prototype.readString = function(t4) {
    var e2, r2;
    for (r2 = [], e2 = 0; 0 <= t4 ? e2 < t4 : e2 > t4; e2 = 0 <= t4 ? ++e2 : --e2)
      r2[e2] = String.fromCharCode(this.readByte());
    return r2.join("");
  }, t3.prototype.writeString = function(t4) {
    var e2, r2, n2;
    for (n2 = [], e2 = 0, r2 = t4.length; 0 <= r2 ? e2 < r2 : e2 > r2; e2 = 0 <= r2 ? ++e2 : --e2)
      n2.push(this.writeByte(t4.charCodeAt(e2)));
    return n2;
  }, t3.prototype.readShort = function() {
    return this.readInt16();
  }, t3.prototype.writeShort = function(t4) {
    return this.writeInt16(t4);
  }, t3.prototype.readLongLong = function() {
    var t4, e2, r2, n2, i2, a2, o2, s2;
    return t4 = this.readByte(), e2 = this.readByte(), r2 = this.readByte(), n2 = this.readByte(), i2 = this.readByte(), a2 = this.readByte(), o2 = this.readByte(), s2 = this.readByte(), 128 & t4 ? -1 * (72057594037927940 * (255 ^ t4) + 281474976710656 * (255 ^ e2) + 1099511627776 * (255 ^ r2) + 4294967296 * (255 ^ n2) + 16777216 * (255 ^ i2) + 65536 * (255 ^ a2) + 256 * (255 ^ o2) + (255 ^ s2) + 1) : 72057594037927940 * t4 + 281474976710656 * e2 + 1099511627776 * r2 + 4294967296 * n2 + 16777216 * i2 + 65536 * a2 + 256 * o2 + s2;
  }, t3.prototype.writeLongLong = function(t4) {
    var e2, r2;
    return e2 = Math.floor(t4 / 4294967296), r2 = 4294967295 & t4, this.writeByte(e2 >> 24 & 255), this.writeByte(e2 >> 16 & 255), this.writeByte(e2 >> 8 & 255), this.writeByte(255 & e2), this.writeByte(r2 >> 24 & 255), this.writeByte(r2 >> 16 & 255), this.writeByte(r2 >> 8 & 255), this.writeByte(255 & r2);
  }, t3.prototype.readInt = function() {
    return this.readInt32();
  }, t3.prototype.writeInt = function(t4) {
    return this.writeInt32(t4);
  }, t3.prototype.read = function(t4) {
    var e2, r2;
    for (e2 = [], r2 = 0; 0 <= t4 ? r2 < t4 : r2 > t4; r2 = 0 <= t4 ? ++r2 : --r2)
      e2.push(this.readByte());
    return e2;
  }, t3.prototype.write = function(t4) {
    var e2, r2, n2, i2;
    for (i2 = [], r2 = 0, n2 = t4.length; r2 < n2; r2++)
      e2 = t4[r2], i2.push(this.writeByte(e2));
    return i2;
  }, t3;
}(), ie = function() {
  var t3;
  function e2(t4) {
    var e3, r2, n2;
    for (this.scalarType = t4.readInt(), this.tableCount = t4.readShort(), this.searchRange = t4.readShort(), this.entrySelector = t4.readShort(), this.rangeShift = t4.readShort(), this.tables = {}, r2 = 0, n2 = this.tableCount; 0 <= n2 ? r2 < n2 : r2 > n2; r2 = 0 <= n2 ? ++r2 : --r2)
      e3 = { tag: t4.readString(4), checksum: t4.readInt(), offset: t4.readInt(), length: t4.readInt() }, this.tables[e3.tag] = e3;
  }
  return e2.prototype.encode = function(e3) {
    var r2, n2, i2, a2, o2, s2, c2, u2, h2, l2, f2, d2, p2;
    for (p2 in f2 = Object.keys(e3).length, s2 = Math.log(2), h2 = 16 * Math.floor(Math.log(f2) / s2), a2 = Math.floor(h2 / s2), u2 = 16 * f2 - h2, (n2 = new ne()).writeInt(this.scalarType), n2.writeShort(f2), n2.writeShort(h2), n2.writeShort(a2), n2.writeShort(u2), i2 = 16 * f2, c2 = n2.pos + i2, o2 = null, d2 = [], e3)
      for (l2 = e3[p2], n2.writeString(p2), n2.writeInt(t3(l2)), n2.writeInt(c2), n2.writeInt(l2.length), d2 = d2.concat(l2), "head" === p2 && (o2 = c2), c2 += l2.length; c2 % 4; )
        d2.push(0), c2++;
    return n2.write(d2), r2 = 2981146554 - t3(n2.data), n2.pos = o2 + 8, n2.writeUInt32(r2), n2.data;
  }, t3 = function(t4) {
    var e3, r2, n2, i2;
    for (t4 = ve.call(t4); t4.length % 4; )
      t4.push(0);
    for (n2 = new ne(t4), r2 = 0, e3 = 0, i2 = t4.length; e3 < i2; e3 = e3 += 4)
      r2 += n2.readUInt32();
    return 4294967295 & r2;
  }, e2;
}(), ae = {}.hasOwnProperty, oe = function(t3, e2) {
  for (var r2 in e2)
    ae.call(e2, r2) && (t3[r2] = e2[r2]);
  function n2() {
    this.constructor = t3;
  }
  return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
};
re = function() {
  function t3(t4) {
    var e2;
    this.file = t4, e2 = this.file.directory.tables[this.tag], this.exists = !!e2, e2 && (this.offset = e2.offset, this.length = e2.length, this.parse(this.file.contents));
  }
  return t3.prototype.parse = function() {
  }, t3.prototype.encode = function() {
  }, t3.prototype.raw = function() {
    return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
  }, t3;
}();
var se = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "head", e2.prototype.parse = function(t4) {
    return t4.pos = this.offset, this.version = t4.readInt(), this.revision = t4.readInt(), this.checkSumAdjustment = t4.readInt(), this.magicNumber = t4.readInt(), this.flags = t4.readShort(), this.unitsPerEm = t4.readShort(), this.created = t4.readLongLong(), this.modified = t4.readLongLong(), this.xMin = t4.readShort(), this.yMin = t4.readShort(), this.xMax = t4.readShort(), this.yMax = t4.readShort(), this.macStyle = t4.readShort(), this.lowestRecPPEM = t4.readShort(), this.fontDirectionHint = t4.readShort(), this.indexToLocFormat = t4.readShort(), this.glyphDataFormat = t4.readShort();
  }, e2.prototype.encode = function(t4) {
    var e3;
    return (e3 = new ne()).writeInt(this.version), e3.writeInt(this.revision), e3.writeInt(this.checkSumAdjustment), e3.writeInt(this.magicNumber), e3.writeShort(this.flags), e3.writeShort(this.unitsPerEm), e3.writeLongLong(this.created), e3.writeLongLong(this.modified), e3.writeShort(this.xMin), e3.writeShort(this.yMin), e3.writeShort(this.xMax), e3.writeShort(this.yMax), e3.writeShort(this.macStyle), e3.writeShort(this.lowestRecPPEM), e3.writeShort(this.fontDirectionHint), e3.writeShort(t4), e3.writeShort(this.glyphDataFormat), e3.data;
  }, e2;
}(), ce = function() {
  function t3(t4, e2) {
    var r2, n2, i2, a2, o2, s2, c2, u2, h2, l2, f2, d2, p2, g2, m2, v2, b2;
    switch (this.platformID = t4.readUInt16(), this.encodingID = t4.readShort(), this.offset = e2 + t4.readInt(), h2 = t4.pos, t4.pos = this.offset, this.format = t4.readUInt16(), this.length = t4.readUInt16(), this.language = t4.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format) {
      case 0:
        for (s2 = 0; s2 < 256; ++s2)
          this.codeMap[s2] = t4.readByte();
        break;
      case 4:
        for (f2 = t4.readUInt16(), l2 = f2 / 2, t4.pos += 6, i2 = function() {
          var e3, r3;
          for (r3 = [], s2 = e3 = 0; 0 <= l2 ? e3 < l2 : e3 > l2; s2 = 0 <= l2 ? ++e3 : --e3)
            r3.push(t4.readUInt16());
          return r3;
        }(), t4.pos += 2, p2 = function() {
          var e3, r3;
          for (r3 = [], s2 = e3 = 0; 0 <= l2 ? e3 < l2 : e3 > l2; s2 = 0 <= l2 ? ++e3 : --e3)
            r3.push(t4.readUInt16());
          return r3;
        }(), c2 = function() {
          var e3, r3;
          for (r3 = [], s2 = e3 = 0; 0 <= l2 ? e3 < l2 : e3 > l2; s2 = 0 <= l2 ? ++e3 : --e3)
            r3.push(t4.readUInt16());
          return r3;
        }(), u2 = function() {
          var e3, r3;
          for (r3 = [], s2 = e3 = 0; 0 <= l2 ? e3 < l2 : e3 > l2; s2 = 0 <= l2 ? ++e3 : --e3)
            r3.push(t4.readUInt16());
          return r3;
        }(), n2 = (this.length - t4.pos + this.offset) / 2, o2 = function() {
          var e3, r3;
          for (r3 = [], s2 = e3 = 0; 0 <= n2 ? e3 < n2 : e3 > n2; s2 = 0 <= n2 ? ++e3 : --e3)
            r3.push(t4.readUInt16());
          return r3;
        }(), s2 = m2 = 0, b2 = i2.length; m2 < b2; s2 = ++m2)
          for (g2 = i2[s2], r2 = v2 = d2 = p2[s2]; d2 <= g2 ? v2 <= g2 : v2 >= g2; r2 = d2 <= g2 ? ++v2 : --v2)
            0 === u2[s2] ? a2 = r2 + c2[s2] : 0 !== (a2 = o2[u2[s2] / 2 + (r2 - d2) - (l2 - s2)] || 0) && (a2 += c2[s2]), this.codeMap[r2] = 65535 & a2;
    }
    t4.pos = h2;
  }
  return t3.encode = function(t4, e2) {
    var r2, n2, i2, a2, o2, s2, c2, u2, h2, l2, f2, d2, p2, g2, m2, v2, b2, y2, w2, N2, L2, A2, x2, S2, _2, P2, k2, I2, F2, C2, j2, O2, B2, M2, E2, q2, D2, R2, T2, U2, z2, H2, W2, V2, G2, Y2;
    switch (I2 = new ne(), a2 = Object.keys(t4).sort(function(t5, e3) {
      return t5 - e3;
    }), e2) {
      case "macroman":
        for (p2 = 0, g2 = function() {
          var t5 = [];
          for (d2 = 0; d2 < 256; ++d2)
            t5.push(0);
          return t5;
        }(), v2 = { 0: 0 }, i2 = {}, F2 = 0, B2 = a2.length; F2 < B2; F2++)
          null == v2[W2 = t4[n2 = a2[F2]]] && (v2[W2] = ++p2), i2[n2] = { old: t4[n2], new: v2[t4[n2]] }, g2[n2] = v2[t4[n2]];
        return I2.writeUInt16(1), I2.writeUInt16(0), I2.writeUInt32(12), I2.writeUInt16(0), I2.writeUInt16(262), I2.writeUInt16(0), I2.write(g2), { charMap: i2, subtable: I2.data, maxGlyphID: p2 + 1 };
      case "unicode":
        for (P2 = [], h2 = [], b2 = 0, v2 = {}, r2 = {}, m2 = c2 = null, C2 = 0, M2 = a2.length; C2 < M2; C2++)
          null == v2[w2 = t4[n2 = a2[C2]]] && (v2[w2] = ++b2), r2[n2] = { old: w2, new: v2[w2] }, o2 = v2[w2] - n2, null != m2 && o2 === c2 || (m2 && h2.push(m2), P2.push(n2), c2 = o2), m2 = n2;
        for (m2 && h2.push(m2), h2.push(65535), P2.push(65535), S2 = 2 * (x2 = P2.length), A2 = 2 * Math.pow(Math.log(x2) / Math.LN2, 2), l2 = Math.log(A2 / 2) / Math.LN2, L2 = 2 * x2 - A2, s2 = [], N2 = [], f2 = [], d2 = j2 = 0, E2 = P2.length; j2 < E2; d2 = ++j2) {
          if (_2 = P2[d2], u2 = h2[d2], 65535 === _2) {
            s2.push(0), N2.push(0);
            break;
          }
          if (_2 - (k2 = r2[_2].new) >= 32768)
            for (s2.push(0), N2.push(2 * (f2.length + x2 - d2)), n2 = O2 = _2; _2 <= u2 ? O2 <= u2 : O2 >= u2; n2 = _2 <= u2 ? ++O2 : --O2)
              f2.push(r2[n2].new);
          else
            s2.push(k2 - _2), N2.push(0);
        }
        for (I2.writeUInt16(3), I2.writeUInt16(1), I2.writeUInt32(12), I2.writeUInt16(4), I2.writeUInt16(16 + 8 * x2 + 2 * f2.length), I2.writeUInt16(0), I2.writeUInt16(S2), I2.writeUInt16(A2), I2.writeUInt16(l2), I2.writeUInt16(L2), z2 = 0, q2 = h2.length; z2 < q2; z2++)
          n2 = h2[z2], I2.writeUInt16(n2);
        for (I2.writeUInt16(0), H2 = 0, D2 = P2.length; H2 < D2; H2++)
          n2 = P2[H2], I2.writeUInt16(n2);
        for (V2 = 0, R2 = s2.length; V2 < R2; V2++)
          o2 = s2[V2], I2.writeUInt16(o2);
        for (G2 = 0, T2 = N2.length; G2 < T2; G2++)
          y2 = N2[G2], I2.writeUInt16(y2);
        for (Y2 = 0, U2 = f2.length; Y2 < U2; Y2++)
          p2 = f2[Y2], I2.writeUInt16(p2);
        return { charMap: r2, subtable: I2.data, maxGlyphID: b2 + 1 };
    }
  }, t3;
}(), ue = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "cmap", e2.prototype.parse = function(t4) {
    var e3, r2, n2;
    for (t4.pos = this.offset, this.version = t4.readUInt16(), n2 = t4.readUInt16(), this.tables = [], this.unicode = null, r2 = 0; 0 <= n2 ? r2 < n2 : r2 > n2; r2 = 0 <= n2 ? ++r2 : --r2)
      e3 = new ce(t4, this.offset), this.tables.push(e3), e3.isUnicode && null == this.unicode && (this.unicode = e3);
    return true;
  }, e2.encode = function(t4, e3) {
    var r2, n2;
    return null == e3 && (e3 = "macroman"), r2 = ce.encode(t4, e3), (n2 = new ne()).writeUInt16(0), n2.writeUInt16(1), r2.table = n2.data.concat(r2.subtable), r2;
  }, e2;
}(), he = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "hhea", e2.prototype.parse = function(t4) {
    return t4.pos = this.offset, this.version = t4.readInt(), this.ascender = t4.readShort(), this.decender = t4.readShort(), this.lineGap = t4.readShort(), this.advanceWidthMax = t4.readShort(), this.minLeftSideBearing = t4.readShort(), this.minRightSideBearing = t4.readShort(), this.xMaxExtent = t4.readShort(), this.caretSlopeRise = t4.readShort(), this.caretSlopeRun = t4.readShort(), this.caretOffset = t4.readShort(), t4.pos += 8, this.metricDataFormat = t4.readShort(), this.numberOfMetrics = t4.readUInt16();
  }, e2;
}(), le = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "OS/2", e2.prototype.parse = function(t4) {
    if (t4.pos = this.offset, this.version = t4.readUInt16(), this.averageCharWidth = t4.readShort(), this.weightClass = t4.readUInt16(), this.widthClass = t4.readUInt16(), this.type = t4.readShort(), this.ySubscriptXSize = t4.readShort(), this.ySubscriptYSize = t4.readShort(), this.ySubscriptXOffset = t4.readShort(), this.ySubscriptYOffset = t4.readShort(), this.ySuperscriptXSize = t4.readShort(), this.ySuperscriptYSize = t4.readShort(), this.ySuperscriptXOffset = t4.readShort(), this.ySuperscriptYOffset = t4.readShort(), this.yStrikeoutSize = t4.readShort(), this.yStrikeoutPosition = t4.readShort(), this.familyClass = t4.readShort(), this.panose = function() {
      var e3, r2;
      for (r2 = [], e3 = 0; e3 < 10; ++e3)
        r2.push(t4.readByte());
      return r2;
    }(), this.charRange = function() {
      var e3, r2;
      for (r2 = [], e3 = 0; e3 < 4; ++e3)
        r2.push(t4.readInt());
      return r2;
    }(), this.vendorID = t4.readString(4), this.selection = t4.readShort(), this.firstCharIndex = t4.readShort(), this.lastCharIndex = t4.readShort(), this.version > 0 && (this.ascent = t4.readShort(), this.descent = t4.readShort(), this.lineGap = t4.readShort(), this.winAscent = t4.readShort(), this.winDescent = t4.readShort(), this.codePageRange = function() {
      var e3, r2;
      for (r2 = [], e3 = 0; e3 < 2; e3 = ++e3)
        r2.push(t4.readInt());
      return r2;
    }(), this.version > 1))
      return this.xHeight = t4.readShort(), this.capHeight = t4.readShort(), this.defaultChar = t4.readShort(), this.breakChar = t4.readShort(), this.maxContext = t4.readShort();
  }, e2;
}(), fe = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "post", e2.prototype.parse = function(t4) {
    var e3, r2, n2;
    switch (t4.pos = this.offset, this.format = t4.readInt(), this.italicAngle = t4.readInt(), this.underlinePosition = t4.readShort(), this.underlineThickness = t4.readShort(), this.isFixedPitch = t4.readInt(), this.minMemType42 = t4.readInt(), this.maxMemType42 = t4.readInt(), this.minMemType1 = t4.readInt(), this.maxMemType1 = t4.readInt(), this.format) {
      case 65536:
        break;
      case 131072:
        var i2;
        for (r2 = t4.readUInt16(), this.glyphNameIndex = [], i2 = 0; 0 <= r2 ? i2 < r2 : i2 > r2; i2 = 0 <= r2 ? ++i2 : --i2)
          this.glyphNameIndex.push(t4.readUInt16());
        for (this.names = [], n2 = []; t4.pos < this.offset + this.length; )
          e3 = t4.readByte(), n2.push(this.names.push(t4.readString(e3)));
        return n2;
      case 151552:
        return r2 = t4.readUInt16(), this.offsets = t4.read(r2);
      case 196608:
        break;
      case 262144:
        return this.map = (function() {
          var e4, r3, n3;
          for (n3 = [], i2 = e4 = 0, r3 = this.file.maxp.numGlyphs; 0 <= r3 ? e4 < r3 : e4 > r3; i2 = 0 <= r3 ? ++e4 : --e4)
            n3.push(t4.readUInt32());
          return n3;
        }).call(this);
    }
  }, e2;
}(), de = function(t3, e2) {
  this.raw = t3, this.length = t3.length, this.platformID = e2.platformID, this.encodingID = e2.encodingID, this.languageID = e2.languageID;
}, pe = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "name", e2.prototype.parse = function(t4) {
    var e3, r2, n2, i2, a2, o2, s2, c2, u2, h2, l2;
    for (t4.pos = this.offset, t4.readShort(), e3 = t4.readShort(), o2 = t4.readShort(), r2 = [], i2 = 0; 0 <= e3 ? i2 < e3 : i2 > e3; i2 = 0 <= e3 ? ++i2 : --i2)
      r2.push({ platformID: t4.readShort(), encodingID: t4.readShort(), languageID: t4.readShort(), nameID: t4.readShort(), length: t4.readShort(), offset: this.offset + o2 + t4.readShort() });
    for (s2 = {}, i2 = u2 = 0, h2 = r2.length; u2 < h2; i2 = ++u2)
      n2 = r2[i2], t4.pos = n2.offset, c2 = t4.readString(n2.length), a2 = new de(c2, n2), null == s2[l2 = n2.nameID] && (s2[l2] = []), s2[n2.nameID].push(a2);
    this.strings = s2, this.copyright = s2[0], this.fontFamily = s2[1], this.fontSubfamily = s2[2], this.uniqueSubfamily = s2[3], this.fontName = s2[4], this.version = s2[5];
    try {
      this.postscriptName = s2[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
    } catch (t5) {
      this.postscriptName = s2[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
    }
    return this.trademark = s2[7], this.manufacturer = s2[8], this.designer = s2[9], this.description = s2[10], this.vendorUrl = s2[11], this.designerUrl = s2[12], this.license = s2[13], this.licenseUrl = s2[14], this.preferredFamily = s2[15], this.preferredSubfamily = s2[17], this.compatibleFull = s2[18], this.sampleText = s2[19];
  }, e2;
}(), ge = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "maxp", e2.prototype.parse = function(t4) {
    return t4.pos = this.offset, this.version = t4.readInt(), this.numGlyphs = t4.readUInt16(), this.maxPoints = t4.readUInt16(), this.maxContours = t4.readUInt16(), this.maxCompositePoints = t4.readUInt16(), this.maxComponentContours = t4.readUInt16(), this.maxZones = t4.readUInt16(), this.maxTwilightPoints = t4.readUInt16(), this.maxStorage = t4.readUInt16(), this.maxFunctionDefs = t4.readUInt16(), this.maxInstructionDefs = t4.readUInt16(), this.maxStackElements = t4.readUInt16(), this.maxSizeOfInstructions = t4.readUInt16(), this.maxComponentElements = t4.readUInt16(), this.maxComponentDepth = t4.readUInt16();
  }, e2;
}(), me = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "hmtx", e2.prototype.parse = function(t4) {
    var e3, r2, n2, i2, a2, o2, s2;
    for (t4.pos = this.offset, this.metrics = [], e3 = 0, o2 = this.file.hhea.numberOfMetrics; 0 <= o2 ? e3 < o2 : e3 > o2; e3 = 0 <= o2 ? ++e3 : --e3)
      this.metrics.push({ advance: t4.readUInt16(), lsb: t4.readInt16() });
    for (n2 = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function() {
      var r3, i3;
      for (i3 = [], e3 = r3 = 0; 0 <= n2 ? r3 < n2 : r3 > n2; e3 = 0 <= n2 ? ++r3 : --r3)
        i3.push(t4.readInt16());
      return i3;
    }(), this.widths = (function() {
      var t5, e4, r3, n3;
      for (n3 = [], t5 = 0, e4 = (r3 = this.metrics).length; t5 < e4; t5++)
        i2 = r3[t5], n3.push(i2.advance);
      return n3;
    }).call(this), r2 = this.widths[this.widths.length - 1], s2 = [], e3 = a2 = 0; 0 <= n2 ? a2 < n2 : a2 > n2; e3 = 0 <= n2 ? ++a2 : --a2)
      s2.push(this.widths.push(r2));
    return s2;
  }, e2.prototype.forGlyph = function(t4) {
    return t4 in this.metrics ? this.metrics[t4] : { advance: this.metrics[this.metrics.length - 1].advance, lsb: this.leftSideBearings[t4 - this.metrics.length] };
  }, e2;
}(), ve = [].slice, be = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "glyf", e2.prototype.parse = function() {
    return this.cache = {};
  }, e2.prototype.glyphFor = function(t4) {
    var e3, r2, n2, i2, a2, o2, s2, c2, u2, h2;
    return t4 in this.cache ? this.cache[t4] : (i2 = this.file.loca, e3 = this.file.contents, r2 = i2.indexOf(t4), 0 === (n2 = i2.lengthOf(t4)) ? this.cache[t4] = null : (e3.pos = this.offset + r2, a2 = (o2 = new ne(e3.read(n2))).readShort(), c2 = o2.readShort(), h2 = o2.readShort(), s2 = o2.readShort(), u2 = o2.readShort(), this.cache[t4] = -1 === a2 ? new we(o2, c2, h2, s2, u2) : new ye(o2, a2, c2, h2, s2, u2), this.cache[t4]));
  }, e2.prototype.encode = function(t4, e3, r2) {
    var n2, i2, a2, o2, s2;
    for (a2 = [], i2 = [], o2 = 0, s2 = e3.length; o2 < s2; o2++)
      n2 = t4[e3[o2]], i2.push(a2.length), n2 && (a2 = a2.concat(n2.encode(r2)));
    return i2.push(a2.length), { table: a2, offsets: i2 };
  }, e2;
}(), ye = function() {
  function t3(t4, e2, r2, n2, i2, a2) {
    this.raw = t4, this.numberOfContours = e2, this.xMin = r2, this.yMin = n2, this.xMax = i2, this.yMax = a2, this.compound = false;
  }
  return t3.prototype.encode = function() {
    return this.raw.data;
  }, t3;
}(), we = function() {
  function t3(t4, e2, r2, n2, i2) {
    var a2, o2;
    for (this.raw = t4, this.xMin = e2, this.yMin = r2, this.xMax = n2, this.yMax = i2, this.compound = true, this.glyphIDs = [], this.glyphOffsets = [], a2 = this.raw; o2 = a2.readShort(), this.glyphOffsets.push(a2.pos), this.glyphIDs.push(a2.readUInt16()), 32 & o2; )
      a2.pos += 1 & o2 ? 4 : 2, 128 & o2 ? a2.pos += 8 : 64 & o2 ? a2.pos += 4 : 8 & o2 && (a2.pos += 2);
  }
  return t3.prototype.encode = function() {
    var t4, e2, r2;
    for (e2 = new ne(ve.call(this.raw.data)), t4 = 0, r2 = this.glyphIDs.length; t4 < r2; ++t4)
      e2.pos = this.glyphOffsets[t4];
    return e2.data;
  }, t3;
}(), Ne = function(t3) {
  function e2() {
    return e2.__super__.constructor.apply(this, arguments);
  }
  return oe(e2, re), e2.prototype.tag = "loca", e2.prototype.parse = function(t4) {
    var e3, r2;
    return t4.pos = this.offset, e3 = this.file.head.indexToLocFormat, this.offsets = 0 === e3 ? (function() {
      var e4, n2;
      for (n2 = [], r2 = 0, e4 = this.length; r2 < e4; r2 += 2)
        n2.push(2 * t4.readUInt16());
      return n2;
    }).call(this) : (function() {
      var e4, n2;
      for (n2 = [], r2 = 0, e4 = this.length; r2 < e4; r2 += 4)
        n2.push(t4.readUInt32());
      return n2;
    }).call(this);
  }, e2.prototype.indexOf = function(t4) {
    return this.offsets[t4];
  }, e2.prototype.lengthOf = function(t4) {
    return this.offsets[t4 + 1] - this.offsets[t4];
  }, e2.prototype.encode = function(t4, e3) {
    for (var r2 = new Uint32Array(this.offsets.length), n2 = 0, i2 = 0, a2 = 0; a2 < r2.length; ++a2)
      if (r2[a2] = n2, i2 < e3.length && e3[i2] == a2) {
        ++i2, r2[a2] = n2;
        var o2 = this.offsets[a2], s2 = this.offsets[a2 + 1] - o2;
        s2 > 0 && (n2 += s2);
      }
    for (var c2 = new Array(4 * r2.length), u2 = 0; u2 < r2.length; ++u2)
      c2[4 * u2 + 3] = 255 & r2[u2], c2[4 * u2 + 2] = (65280 & r2[u2]) >> 8, c2[4 * u2 + 1] = (16711680 & r2[u2]) >> 16, c2[4 * u2] = (4278190080 & r2[u2]) >> 24;
    return c2;
  }, e2;
}(), Le = function() {
  function t3(t4) {
    this.font = t4, this.subset = {}, this.unicodes = {}, this.next = 33;
  }
  return t3.prototype.generateCmap = function() {
    var t4, e2, r2, n2, i2;
    for (e2 in n2 = this.font.cmap.tables[0].codeMap, t4 = {}, i2 = this.subset)
      r2 = i2[e2], t4[e2] = n2[r2];
    return t4;
  }, t3.prototype.glyphsFor = function(t4) {
    var e2, r2, n2, i2, a2, o2, s2;
    for (n2 = {}, a2 = 0, o2 = t4.length; a2 < o2; a2++)
      n2[i2 = t4[a2]] = this.font.glyf.glyphFor(i2);
    for (i2 in e2 = [], n2)
      (null != (r2 = n2[i2]) ? r2.compound : void 0) && e2.push.apply(e2, r2.glyphIDs);
    if (e2.length > 0)
      for (i2 in s2 = this.glyphsFor(e2))
        r2 = s2[i2], n2[i2] = r2;
    return n2;
  }, t3.prototype.encode = function(t4, e2) {
    var r2, n2, i2, a2, o2, s2, c2, u2, h2, l2, f2, d2, p2, g2, m2;
    for (n2 in r2 = ue.encode(this.generateCmap(), "unicode"), a2 = this.glyphsFor(t4), f2 = { 0: 0 }, m2 = r2.charMap)
      f2[(s2 = m2[n2]).old] = s2.new;
    for (d2 in l2 = r2.maxGlyphID, a2)
      d2 in f2 || (f2[d2] = l2++);
    return u2 = function(t5) {
      var e3, r3;
      for (e3 in r3 = {}, t5)
        r3[t5[e3]] = e3;
      return r3;
    }(f2), h2 = Object.keys(u2).sort(function(t5, e3) {
      return t5 - e3;
    }), p2 = function() {
      var t5, e3, r3;
      for (r3 = [], t5 = 0, e3 = h2.length; t5 < e3; t5++)
        o2 = h2[t5], r3.push(u2[o2]);
      return r3;
    }(), i2 = this.font.glyf.encode(a2, p2, f2), c2 = this.font.loca.encode(i2.offsets, p2), g2 = { cmap: this.font.cmap.raw(), glyf: i2.table, loca: c2, hmtx: this.font.hmtx.raw(), hhea: this.font.hhea.raw(), maxp: this.font.maxp.raw(), post: this.font.post.raw(), name: this.font.name.raw(), head: this.font.head.encode(e2) }, this.font.os2.exists && (g2["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g2);
  }, t3;
}();
E$1.API.PDFObject = function() {
  var t3;
  function e2() {
  }
  return t3 = function(t4, e3) {
    return (Array(e3 + 1).join("0") + t4).slice(-e3);
  }, e2.convert = function(r2) {
    var n2, i2, a2, o2;
    if (Array.isArray(r2))
      return "[" + function() {
        var t4, i3, a3;
        for (a3 = [], t4 = 0, i3 = r2.length; t4 < i3; t4++)
          n2 = r2[t4], a3.push(e2.convert(n2));
        return a3;
      }().join(" ") + "]";
    if ("string" == typeof r2)
      return "/" + r2;
    if (null != r2 ? r2.isString : void 0)
      return "(" + r2 + ")";
    if (r2 instanceof Date)
      return "(D:" + t3(r2.getUTCFullYear(), 4) + t3(r2.getUTCMonth(), 2) + t3(r2.getUTCDate(), 2) + t3(r2.getUTCHours(), 2) + t3(r2.getUTCMinutes(), 2) + t3(r2.getUTCSeconds(), 2) + "Z)";
    if ("[object Object]" === {}.toString.call(r2)) {
      for (i2 in a2 = ["<<"], r2)
        o2 = r2[i2], a2.push("/" + i2 + " " + e2.convert(o2));
      return a2.push(">>"), a2.join("\n");
    }
    return "" + r2;
  }, e2;
}();
/*! https://mths.be/cssesc v3.0.0 by @mathias */
var object2 = {};
var hasOwnProperty = object2.hasOwnProperty;
var merge2 = function merge3(options2, defaults3) {
  if (!options2) {
    return defaults3;
  }
  var result = {};
  for (var key in defaults3) {
    result[key] = hasOwnProperty.call(options2, key) ? options2[key] : defaults3[key];
  }
  return result;
};
var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
var cssesc = function cssesc2(string3, options2) {
  options2 = merge2(options2, cssesc2.options);
  if (options2.quotes != "single" && options2.quotes != "double") {
    options2.quotes = "single";
  }
  var quote = options2.quotes == "double" ? '"' : "'";
  var isIdentifier = options2.isIdentifier;
  var firstChar = string3.charAt(0);
  var output2 = "";
  var counter2 = 0;
  var length = string3.length;
  while (counter2 < length) {
    var character = string3.charAt(counter2++);
    var codePoint = character.charCodeAt();
    var value = void 0;
    if (codePoint < 32 || codePoint > 126) {
      if (codePoint >= 55296 && codePoint <= 56319 && counter2 < length) {
        var extra = string3.charCodeAt(counter2++);
        if ((extra & 64512) == 56320) {
          codePoint = ((codePoint & 1023) << 10) + (extra & 1023) + 65536;
        } else {
          counter2--;
        }
      }
      value = "\\" + codePoint.toString(16).toUpperCase() + " ";
    } else {
      if (options2.escapeEverything) {
        if (regexAnySingleEscape.test(character)) {
          value = "\\" + character;
        } else {
          value = "\\" + codePoint.toString(16).toUpperCase() + " ";
        }
      } else if (/[\t\n\f\r\x0B]/.test(character)) {
        value = "\\" + codePoint.toString(16).toUpperCase() + " ";
      } else if (character == "\\" || !isIdentifier && (character == '"' && quote == character || character == "'" && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
        value = "\\" + character;
      } else {
        value = character;
      }
    }
    output2 += value;
  }
  if (isIdentifier) {
    if (/^-[-\d]/.test(output2)) {
      output2 = "\\-" + output2.slice(1);
    } else if (/\d/.test(firstChar)) {
      output2 = "\\3" + firstChar + " " + output2.slice(1);
    }
  }
  output2 = output2.replace(regexExcessiveSpaces, function($0, $1, $22) {
    if ($1 && $1.length % 2) {
      return $0;
    }
    return ($1 || "") + $22;
  });
  if (!isIdentifier && options2.wrap) {
    return quote + output2 + quote;
  }
  return output2;
};
cssesc.options = {
  "escapeEverything": false,
  "isIdentifier": false,
  "quotes": "single",
  "wrap": false
};
cssesc.version = "3.0.0";
var cssesc_1 = cssesc;
const t$1 = /* @__PURE__ */ getDefaultExportFromCjs(cssesc_1);
var PLAIN = 0;
var STRINGS = 1;
var ESCAPING = 2;
var IDENTIFIER = 3;
var SEPARATING = 4;
var SPACEAFTERIDENTIFIER = 5;
var ESCAPINGIDENTIFIER = 6;
var identifierPattern = /[a-z0-9_-]/i;
var spacePattern = /[\s\t]/;
var parse2 = function(str) {
  var starting = true;
  var state = PLAIN;
  var buffer = "";
  var i2 = 0;
  var quote;
  var c2;
  var names = [];
  while (true) {
    c2 = str[i2];
    if (state === PLAIN) {
      if (!c2 && starting) {
        break;
      } else if (!c2 && !starting) {
        throw new Error("Parse error");
      } else if (c2 === '"' || c2 === "'") {
        quote = c2;
        state = STRINGS;
        starting = false;
      } else if (spacePattern.test(c2))
        ;
      else if (identifierPattern.test(c2)) {
        state = IDENTIFIER;
        starting = false;
        i2--;
      } else {
        throw new Error("Parse error");
      }
    } else if (state === STRINGS) {
      if (!c2) {
        throw new Error("Parse Error");
      } else if (c2 === "\\") {
        state = ESCAPING;
      } else if (c2 === quote) {
        names.push(buffer);
        buffer = "";
        state = SEPARATING;
      } else {
        buffer += c2;
      }
    } else if (state === ESCAPING) {
      if (c2 === quote || c2 === "\\") {
        buffer += c2;
        state = STRINGS;
      } else {
        throw new Error("Parse error");
      }
    } else if (state === IDENTIFIER) {
      if (!c2) {
        names.push(buffer);
        break;
      } else if (identifierPattern.test(c2)) {
        buffer += c2;
      } else if (c2 === ",") {
        names.push(buffer);
        buffer = "";
        state = PLAIN;
      } else if (spacePattern.test(c2)) {
        state = SPACEAFTERIDENTIFIER;
      } else if (c2 === "\\") {
        state = ESCAPINGIDENTIFIER;
      } else
        ;
    } else if (state === ESCAPINGIDENTIFIER) {
      if (/[0-9a-f]/i.test(c2)) {
        throw new Error("Parse error");
      } else {
        buffer += c2;
        state = IDENTIFIER;
      }
    } else if (state === SPACEAFTERIDENTIFIER) {
      if (!c2) {
        names.push(buffer);
        break;
      } else if (identifierPattern.test(c2)) {
        buffer += " " + c2;
        state = IDENTIFIER;
      } else if (c2 === ",") {
        names.push(buffer);
        buffer = "";
        state = PLAIN;
      } else if (spacePattern.test(c2))
        ;
      else {
        throw new Error("Parse error");
      }
    } else if (state === SEPARATING) {
      if (!c2) {
        break;
      } else if (c2 === ",") {
        state = PLAIN;
      } else if (spacePattern.test(c2))
        ;
      else {
        throw new Error("Parse error");
      }
    }
    i2++;
  }
  return names;
};
var stringsPattern = /[^a-z0-9_-]/i;
var stringify = function(names, options2) {
  var quote = options2 && options2.quote || '"';
  if (quote !== '"' && quote !== "'") {
    throw new Error("Quote must be `'` or `\"`");
  }
  var quotePattern = new RegExp(quote, "g");
  var safeNames = [];
  for (var i2 = 0; i2 < names.length; ++i2) {
    var name2 = names[i2];
    if (stringsPattern.test(name2)) {
      name2 = name2.replace(/\\/g, "\\\\").replace(quotePattern, "\\" + quote);
      name2 = quote + name2 + quote;
    }
    safeNames.push(name2);
  }
  return safeNames.join(", ");
};
var fontFamilyPapandreou = {
  parse: parse2,
  stringify
};
const e$1 = /* @__PURE__ */ getDefaultExportFromCjs(fontFamilyPapandreou);
var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };
var SPECIAL_SPACES = [
  5760,
  6158,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8239,
  8287,
  12288,
  65279
];
function isSpace(ch) {
  return ch === 10 || ch === 13 || ch === 8232 || ch === 8233 || // Line terminators
  // White spaces
  ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && SPECIAL_SPACES.indexOf(ch) >= 0;
}
function isCommand(code) {
  switch (code | 32) {
    case 109:
    case 122:
    case 108:
    case 104:
    case 118:
    case 99:
    case 115:
    case 113:
    case 116:
    case 97:
    case 114:
      return true;
  }
  return false;
}
function isArc(code) {
  return (code | 32) === 97;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isDigitStart(code) {
  return code >= 48 && code <= 57 || /* 0..9 */
  code === 43 || /* + */
  code === 45 || /* - */
  code === 46;
}
function State(path) {
  this.index = 0;
  this.path = path;
  this.max = path.length;
  this.result = [];
  this.param = 0;
  this.err = "";
  this.segmentStart = 0;
  this.data = [];
}
function skipSpaces(state) {
  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {
    state.index++;
  }
}
function scanFlag(state) {
  var ch = state.path.charCodeAt(state.index);
  if (ch === 48) {
    state.param = 0;
    state.index++;
    return;
  }
  if (ch === 49) {
    state.param = 1;
    state.index++;
    return;
  }
  state.err = "SvgPath: arc flag can be 0 or 1 only (at pos " + state.index + ")";
}
function scanParam(state) {
  var start = state.index, index = start, max5 = state.max, zeroFirst = false, hasCeiling = false, hasDecimal = false, hasDot = false, ch;
  if (index >= max5) {
    state.err = "SvgPath: missed param (at pos " + index + ")";
    return;
  }
  ch = state.path.charCodeAt(index);
  if (ch === 43 || ch === 45) {
    index++;
    ch = index < max5 ? state.path.charCodeAt(index) : 0;
  }
  if (!isDigit(ch) && ch !== 46) {
    state.err = "SvgPath: param should start with 0..9 or `.` (at pos " + index + ")";
    return;
  }
  if (ch !== 46) {
    zeroFirst = ch === 48;
    index++;
    ch = index < max5 ? state.path.charCodeAt(index) : 0;
    if (zeroFirst && index < max5) {
      if (ch && isDigit(ch)) {
        state.err = "SvgPath: numbers started with `0` such as `09` are illegal (at pos " + start + ")";
        return;
      }
    }
    while (index < max5 && isDigit(state.path.charCodeAt(index))) {
      index++;
      hasCeiling = true;
    }
    ch = index < max5 ? state.path.charCodeAt(index) : 0;
  }
  if (ch === 46) {
    hasDot = true;
    index++;
    while (isDigit(state.path.charCodeAt(index))) {
      index++;
      hasDecimal = true;
    }
    ch = index < max5 ? state.path.charCodeAt(index) : 0;
  }
  if (ch === 101 || ch === 69) {
    if (hasDot && !hasCeiling && !hasDecimal) {
      state.err = "SvgPath: invalid float exponent (at pos " + index + ")";
      return;
    }
    index++;
    ch = index < max5 ? state.path.charCodeAt(index) : 0;
    if (ch === 43 || ch === 45) {
      index++;
    }
    if (index < max5 && isDigit(state.path.charCodeAt(index))) {
      while (index < max5 && isDigit(state.path.charCodeAt(index))) {
        index++;
      }
    } else {
      state.err = "SvgPath: invalid float exponent (at pos " + index + ")";
      return;
    }
  }
  state.index = index;
  state.param = parseFloat(state.path.slice(start, index)) + 0;
}
function finalizeSegment(state) {
  var cmd, cmdLC;
  cmd = state.path[state.segmentStart];
  cmdLC = cmd.toLowerCase();
  var params = state.data;
  if (cmdLC === "m" && params.length > 2) {
    state.result.push([cmd, params[0], params[1]]);
    params = params.slice(2);
    cmdLC = "l";
    cmd = cmd === "m" ? "l" : "L";
  }
  if (cmdLC === "r") {
    state.result.push([cmd].concat(params));
  } else {
    while (params.length >= paramCounts[cmdLC]) {
      state.result.push([cmd].concat(params.splice(0, paramCounts[cmdLC])));
      if (!paramCounts[cmdLC]) {
        break;
      }
    }
  }
}
function scanSegment(state) {
  var max5 = state.max, cmdCode, is_arc, comma_found, need_params, i2;
  state.segmentStart = state.index;
  cmdCode = state.path.charCodeAt(state.index);
  is_arc = isArc(cmdCode);
  if (!isCommand(cmdCode)) {
    state.err = "SvgPath: bad command " + state.path[state.index] + " (at pos " + state.index + ")";
    return;
  }
  need_params = paramCounts[state.path[state.index].toLowerCase()];
  state.index++;
  skipSpaces(state);
  state.data = [];
  if (!need_params) {
    finalizeSegment(state);
    return;
  }
  comma_found = false;
  for (; ; ) {
    for (i2 = need_params; i2 > 0; i2--) {
      if (is_arc && (i2 === 3 || i2 === 4))
        scanFlag(state);
      else
        scanParam(state);
      if (state.err.length) {
        finalizeSegment(state);
        return;
      }
      state.data.push(state.param);
      skipSpaces(state);
      comma_found = false;
      if (state.index < max5 && state.path.charCodeAt(state.index) === 44) {
        state.index++;
        skipSpaces(state);
        comma_found = true;
      }
    }
    if (comma_found) {
      continue;
    }
    if (state.index >= state.max) {
      break;
    }
    if (!isDigitStart(state.path.charCodeAt(state.index))) {
      break;
    }
  }
  finalizeSegment(state);
}
var path_parse = function pathParse(svgPath) {
  var state = new State(svgPath);
  var max5 = state.max;
  skipSpaces(state);
  while (state.index < max5 && !state.err.length) {
    scanSegment(state);
  }
  if (state.result.length) {
    if ("mM".indexOf(state.result[0][0]) < 0) {
      state.err = "SvgPath: string should start with `M` or `m`";
      state.result = [];
    } else {
      state.result[0][0] = "M";
    }
  }
  return {
    err: state.err,
    segments: state.result
  };
};
function combine(m1, m2) {
  return [
    m1[0] * m2[0] + m1[2] * m2[1],
    m1[1] * m2[0] + m1[3] * m2[1],
    m1[0] * m2[2] + m1[2] * m2[3],
    m1[1] * m2[2] + m1[3] * m2[3],
    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]
  ];
}
function Matrix$1() {
  if (!(this instanceof Matrix$1)) {
    return new Matrix$1();
  }
  this.queue = [];
  this.cache = null;
}
Matrix$1.prototype.matrix = function(m2) {
  if (m2[0] === 1 && m2[1] === 0 && m2[2] === 0 && m2[3] === 1 && m2[4] === 0 && m2[5] === 0) {
    return this;
  }
  this.cache = null;
  this.queue.push(m2);
  return this;
};
Matrix$1.prototype.translate = function(tx, ty) {
  if (tx !== 0 || ty !== 0) {
    this.cache = null;
    this.queue.push([1, 0, 0, 1, tx, ty]);
  }
  return this;
};
Matrix$1.prototype.scale = function(sx, sy) {
  if (sx !== 1 || sy !== 1) {
    this.cache = null;
    this.queue.push([sx, 0, 0, sy, 0, 0]);
  }
  return this;
};
Matrix$1.prototype.rotate = function(angle, rx, ry) {
  var rad, cos2, sin2;
  if (angle !== 0) {
    this.translate(rx, ry);
    rad = angle * Math.PI / 180;
    cos2 = Math.cos(rad);
    sin2 = Math.sin(rad);
    this.queue.push([cos2, sin2, -sin2, cos2, 0, 0]);
    this.cache = null;
    this.translate(-rx, -ry);
  }
  return this;
};
Matrix$1.prototype.skewX = function(angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0]);
  }
  return this;
};
Matrix$1.prototype.skewY = function(angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0]);
  }
  return this;
};
Matrix$1.prototype.toArray = function() {
  if (this.cache) {
    return this.cache;
  }
  if (!this.queue.length) {
    this.cache = [1, 0, 0, 1, 0, 0];
    return this.cache;
  }
  this.cache = this.queue[0];
  if (this.queue.length === 1) {
    return this.cache;
  }
  for (var i2 = 1; i2 < this.queue.length; i2++) {
    this.cache = combine(this.cache, this.queue[i2]);
  }
  return this.cache;
};
Matrix$1.prototype.calc = function(x2, y2, isRelative) {
  var m2;
  if (!this.queue.length) {
    return [x2, y2];
  }
  if (!this.cache) {
    this.cache = this.toArray();
  }
  m2 = this.cache;
  return [
    x2 * m2[0] + y2 * m2[2] + (isRelative ? 0 : m2[4]),
    x2 * m2[1] + y2 * m2[3] + (isRelative ? 0 : m2[5])
  ];
};
var matrix$1 = Matrix$1;
var Matrix = matrix$1;
var operations = {
  matrix: true,
  scale: true,
  rotate: true,
  translate: true,
  skewX: true,
  skewY: true
};
var CMD_SPLIT_RE = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
var PARAMS_SPLIT_RE = /[\s,]+/;
var transform_parse = function transformParse(transformString) {
  var matrix2 = new Matrix();
  var cmd, params;
  transformString.split(CMD_SPLIT_RE).forEach(function(item) {
    if (!item.length) {
      return;
    }
    if (typeof operations[item] !== "undefined") {
      cmd = item;
      return;
    }
    params = item.split(PARAMS_SPLIT_RE).map(function(i2) {
      return +i2 || 0;
    });
    switch (cmd) {
      case "matrix":
        if (params.length === 6) {
          matrix2.matrix(params);
        }
        return;
      case "scale":
        if (params.length === 1) {
          matrix2.scale(params[0], params[0]);
        } else if (params.length === 2) {
          matrix2.scale(params[0], params[1]);
        }
        return;
      case "rotate":
        if (params.length === 1) {
          matrix2.rotate(params[0], 0, 0);
        } else if (params.length === 3) {
          matrix2.rotate(params[0], params[1], params[2]);
        }
        return;
      case "translate":
        if (params.length === 1) {
          matrix2.translate(params[0], 0);
        } else if (params.length === 2) {
          matrix2.translate(params[0], params[1]);
        }
        return;
      case "skewX":
        if (params.length === 1) {
          matrix2.skewX(params[0]);
        }
        return;
      case "skewY":
        if (params.length === 1) {
          matrix2.skewY(params[0]);
        }
        return;
    }
  });
  return matrix2;
};
var TAU$1 = Math.PI * 2;
function unit_vector_angle(ux, uy, vx, vy) {
  var sign = ux * vy - uy * vx < 0 ? -1 : 1;
  var dot = ux * vx + uy * vy;
  if (dot > 1) {
    dot = 1;
  }
  if (dot < -1) {
    dot = -1;
  }
  return sign * Math.acos(dot);
}
function get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {
  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
  var rx_sq = rx * rx;
  var ry_sq = ry * ry;
  var x1p_sq = x1p * x1p;
  var y1p_sq = y1p * y1p;
  var radicant = rx_sq * ry_sq - rx_sq * y1p_sq - ry_sq * x1p_sq;
  if (radicant < 0) {
    radicant = 0;
  }
  radicant /= rx_sq * y1p_sq + ry_sq * x1p_sq;
  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);
  var cxp = radicant * rx / ry * y1p;
  var cyp = radicant * -ry / rx * x1p;
  var cx = cos_phi * cxp - sin_phi * cyp + (x1 + x2) / 2;
  var cy2 = sin_phi * cxp + cos_phi * cyp + (y1 + y2) / 2;
  var v1x = (x1p - cxp) / rx;
  var v1y = (y1p - cyp) / ry;
  var v2x = (-x1p - cxp) / rx;
  var v2y = (-y1p - cyp) / ry;
  var theta1 = unit_vector_angle(1, 0, v1x, v1y);
  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);
  if (fs === 0 && delta_theta > 0) {
    delta_theta -= TAU$1;
  }
  if (fs === 1 && delta_theta < 0) {
    delta_theta += TAU$1;
  }
  return [cx, cy2, theta1, delta_theta];
}
function approximate_unit_arc(theta1, delta_theta) {
  var alpha = 4 / 3 * Math.tan(delta_theta / 4);
  var x1 = Math.cos(theta1);
  var y1 = Math.sin(theta1);
  var x2 = Math.cos(theta1 + delta_theta);
  var y2 = Math.sin(theta1 + delta_theta);
  return [x1, y1, x1 - y1 * alpha, y1 + x1 * alpha, x2 + y2 * alpha, y2 - x2 * alpha, x2, y2];
}
var a2c$1 = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {
  var sin_phi = Math.sin(phi * TAU$1 / 360);
  var cos_phi = Math.cos(phi * TAU$1 / 360);
  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
  if (x1p === 0 && y1p === 0) {
    return [];
  }
  if (rx === 0 || ry === 0) {
    return [];
  }
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var lambda = x1p * x1p / (rx * rx) + y1p * y1p / (ry * ry);
  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }
  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);
  var result = [];
  var theta1 = cc[2];
  var delta_theta = cc[3];
  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU$1 / 4)), 1);
  delta_theta /= segments;
  for (var i2 = 0; i2 < segments; i2++) {
    result.push(approximate_unit_arc(theta1, delta_theta));
    theta1 += delta_theta;
  }
  return result.map(function(curve) {
    for (var i3 = 0; i3 < curve.length; i3 += 2) {
      var x3 = curve[i3 + 0];
      var y3 = curve[i3 + 1];
      x3 *= rx;
      y3 *= ry;
      var xp = cos_phi * x3 - sin_phi * y3;
      var yp = sin_phi * x3 + cos_phi * y3;
      curve[i3 + 0] = xp + cc[0];
      curve[i3 + 1] = yp + cc[1];
    }
    return curve;
  });
};
var epsilon = 1e-10;
var torad = Math.PI / 180;
function Ellipse$2(rx, ry, ax) {
  if (!(this instanceof Ellipse$2)) {
    return new Ellipse$2(rx, ry, ax);
  }
  this.rx = rx;
  this.ry = ry;
  this.ax = ax;
}
Ellipse$2.prototype.transform = function(m2) {
  var c2 = Math.cos(this.ax * torad), s2 = Math.sin(this.ax * torad);
  var ma = [
    this.rx * (m2[0] * c2 + m2[2] * s2),
    this.rx * (m2[1] * c2 + m2[3] * s2),
    this.ry * (-m2[0] * s2 + m2[2] * c2),
    this.ry * (-m2[1] * s2 + m2[3] * c2)
  ];
  var J2 = ma[0] * ma[0] + ma[2] * ma[2], K2 = ma[1] * ma[1] + ma[3] * ma[3];
  var D2 = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1]));
  var JK = (J2 + K2) / 2;
  if (D2 < epsilon * JK) {
    this.rx = this.ry = Math.sqrt(JK);
    this.ax = 0;
    return this;
  }
  var L2 = ma[0] * ma[1] + ma[2] * ma[3];
  D2 = Math.sqrt(D2);
  var l1 = JK + D2 / 2, l2 = JK - D2 / 2;
  this.ax = Math.abs(L2) < epsilon && Math.abs(l1 - K2) < epsilon ? 90 : Math.atan(
    Math.abs(L2) > Math.abs(l1 - K2) ? (l1 - J2) / L2 : L2 / (l1 - K2)
  ) * 180 / Math.PI;
  if (this.ax >= 0) {
    this.rx = Math.sqrt(l1);
    this.ry = Math.sqrt(l2);
  } else {
    this.ax += 90;
    this.rx = Math.sqrt(l2);
    this.ry = Math.sqrt(l1);
  }
  return this;
};
Ellipse$2.prototype.isDegenerate = function() {
  return this.rx < epsilon * this.ry || this.ry < epsilon * this.rx;
};
var ellipse$1 = Ellipse$2;
var pathParse2 = path_parse;
var transformParse2 = transform_parse;
var matrix = matrix$1;
var a2c2 = a2c$1;
var ellipse = ellipse$1;
function SvgPath(path) {
  if (!(this instanceof SvgPath)) {
    return new SvgPath(path);
  }
  var pstate = pathParse2(path);
  this.segments = pstate.segments;
  this.err = pstate.err;
  this.__stack = [];
}
SvgPath.from = function(src2) {
  if (typeof src2 === "string")
    return new SvgPath(src2);
  if (src2 instanceof SvgPath) {
    var s2 = new SvgPath("");
    s2.err = src2.err;
    s2.segments = src2.segments.map(function(sgm) {
      return sgm.slice();
    });
    s2.__stack = src2.__stack.map(function(m2) {
      return matrix().matrix(m2.toArray());
    });
    return s2;
  }
  throw new Error("SvgPath.from: invalid param type " + src2);
};
SvgPath.prototype.__matrix = function(m2) {
  var self2 = this, i2;
  if (!m2.queue.length) {
    return;
  }
  this.iterate(function(s2, index, x2, y2) {
    var p2, result, name2, isRelative;
    switch (s2[0]) {
      case "v":
        p2 = m2.calc(0, s2[1], true);
        result = p2[0] === 0 ? ["v", p2[1]] : ["l", p2[0], p2[1]];
        break;
      case "V":
        p2 = m2.calc(x2, s2[1], false);
        result = p2[0] === m2.calc(x2, y2, false)[0] ? ["V", p2[1]] : ["L", p2[0], p2[1]];
        break;
      case "h":
        p2 = m2.calc(s2[1], 0, true);
        result = p2[1] === 0 ? ["h", p2[0]] : ["l", p2[0], p2[1]];
        break;
      case "H":
        p2 = m2.calc(s2[1], y2, false);
        result = p2[1] === m2.calc(x2, y2, false)[1] ? ["H", p2[0]] : ["L", p2[0], p2[1]];
        break;
      case "a":
      case "A":
        var ma = m2.toArray();
        var e2 = ellipse(s2[1], s2[2], s2[3]).transform(ma);
        if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {
          s2[5] = s2[5] ? "0" : "1";
        }
        p2 = m2.calc(s2[6], s2[7], s2[0] === "a");
        if (s2[0] === "A" && s2[6] === x2 && s2[7] === y2 || s2[0] === "a" && s2[6] === 0 && s2[7] === 0) {
          result = [s2[0] === "a" ? "l" : "L", p2[0], p2[1]];
          break;
        }
        if (e2.isDegenerate()) {
          result = [s2[0] === "a" ? "l" : "L", p2[0], p2[1]];
        } else {
          result = [s2[0], e2.rx, e2.ry, e2.ax, s2[4], s2[5], p2[0], p2[1]];
        }
        break;
      case "m":
        isRelative = index > 0;
        p2 = m2.calc(s2[1], s2[2], isRelative);
        result = ["m", p2[0], p2[1]];
        break;
      default:
        name2 = s2[0];
        result = [name2];
        isRelative = name2.toLowerCase() === name2;
        for (i2 = 1; i2 < s2.length; i2 += 2) {
          p2 = m2.calc(s2[i2], s2[i2 + 1], isRelative);
          result.push(p2[0], p2[1]);
        }
    }
    self2.segments[index] = result;
  }, true);
};
SvgPath.prototype.__evaluateStack = function() {
  var m2, i2;
  if (!this.__stack.length) {
    return;
  }
  if (this.__stack.length === 1) {
    this.__matrix(this.__stack[0]);
    this.__stack = [];
    return;
  }
  m2 = matrix();
  i2 = this.__stack.length;
  while (--i2 >= 0) {
    m2.matrix(this.__stack[i2].toArray());
  }
  this.__matrix(m2);
  this.__stack = [];
};
SvgPath.prototype.toString = function() {
  var result = "", prevCmd = "", cmdSkipped = false;
  this.__evaluateStack();
  for (var i2 = 0, len = this.segments.length; i2 < len; i2++) {
    var segment = this.segments[i2];
    var cmd = segment[0];
    if (cmd !== prevCmd || cmd === "m" || cmd === "M") {
      if (cmd === "m" && prevCmd === "z")
        result += " ";
      result += cmd;
      cmdSkipped = false;
    } else {
      cmdSkipped = true;
    }
    for (var pos = 1; pos < segment.length; pos++) {
      var val = segment[pos];
      if (pos === 1) {
        if (cmdSkipped && val >= 0)
          result += " ";
      } else if (val >= 0)
        result += " ";
      result += val;
    }
    prevCmd = cmd;
  }
  return result;
};
SvgPath.prototype.translate = function(x2, y2) {
  this.__stack.push(matrix().translate(x2, y2 || 0));
  return this;
};
SvgPath.prototype.scale = function(sx, sy) {
  this.__stack.push(matrix().scale(sx, !sy && sy !== 0 ? sx : sy));
  return this;
};
SvgPath.prototype.rotate = function(angle, rx, ry) {
  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));
  return this;
};
SvgPath.prototype.skewX = function(degrees) {
  this.__stack.push(matrix().skewX(degrees));
  return this;
};
SvgPath.prototype.skewY = function(degrees) {
  this.__stack.push(matrix().skewY(degrees));
  return this;
};
SvgPath.prototype.matrix = function(m2) {
  this.__stack.push(matrix().matrix(m2));
  return this;
};
SvgPath.prototype.transform = function(transformString) {
  if (!transformString.trim()) {
    return this;
  }
  this.__stack.push(transformParse2(transformString));
  return this;
};
SvgPath.prototype.round = function(d2) {
  var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l2;
  d2 = d2 || 0;
  this.__evaluateStack();
  this.segments.forEach(function(s2) {
    var isRelative = s2[0].toLowerCase() === s2[0];
    switch (s2[0]) {
      case "H":
      case "h":
        if (isRelative) {
          s2[1] += deltaX;
        }
        deltaX = s2[1] - s2[1].toFixed(d2);
        s2[1] = +s2[1].toFixed(d2);
        return;
      case "V":
      case "v":
        if (isRelative) {
          s2[1] += deltaY;
        }
        deltaY = s2[1] - s2[1].toFixed(d2);
        s2[1] = +s2[1].toFixed(d2);
        return;
      case "Z":
      case "z":
        deltaX = contourStartDeltaX;
        deltaY = contourStartDeltaY;
        return;
      case "M":
      case "m":
        if (isRelative) {
          s2[1] += deltaX;
          s2[2] += deltaY;
        }
        deltaX = s2[1] - s2[1].toFixed(d2);
        deltaY = s2[2] - s2[2].toFixed(d2);
        contourStartDeltaX = deltaX;
        contourStartDeltaY = deltaY;
        s2[1] = +s2[1].toFixed(d2);
        s2[2] = +s2[2].toFixed(d2);
        return;
      case "A":
      case "a":
        if (isRelative) {
          s2[6] += deltaX;
          s2[7] += deltaY;
        }
        deltaX = s2[6] - s2[6].toFixed(d2);
        deltaY = s2[7] - s2[7].toFixed(d2);
        s2[1] = +s2[1].toFixed(d2);
        s2[2] = +s2[2].toFixed(d2);
        s2[3] = +s2[3].toFixed(d2 + 2);
        s2[6] = +s2[6].toFixed(d2);
        s2[7] = +s2[7].toFixed(d2);
        return;
      default:
        l2 = s2.length;
        if (isRelative) {
          s2[l2 - 2] += deltaX;
          s2[l2 - 1] += deltaY;
        }
        deltaX = s2[l2 - 2] - s2[l2 - 2].toFixed(d2);
        deltaY = s2[l2 - 1] - s2[l2 - 1].toFixed(d2);
        s2.forEach(function(val, i2) {
          if (!i2) {
            return;
          }
          s2[i2] = +s2[i2].toFixed(d2);
        });
        return;
    }
  });
  return this;
};
SvgPath.prototype.iterate = function(iterator, keepLazyStack) {
  var segments = this.segments, replacements = {}, needReplace = false, lastX = 0, lastY = 0, countourStartX = 0, countourStartY = 0;
  var i2, j2, newSegments;
  if (!keepLazyStack) {
    this.__evaluateStack();
  }
  segments.forEach(function(s2, index) {
    var res = iterator(s2, index, lastX, lastY);
    if (Array.isArray(res)) {
      replacements[index] = res;
      needReplace = true;
    }
    var isRelative = s2[0] === s2[0].toLowerCase();
    switch (s2[0]) {
      case "m":
      case "M":
        lastX = s2[1] + (isRelative ? lastX : 0);
        lastY = s2[2] + (isRelative ? lastY : 0);
        countourStartX = lastX;
        countourStartY = lastY;
        return;
      case "h":
      case "H":
        lastX = s2[1] + (isRelative ? lastX : 0);
        return;
      case "v":
      case "V":
        lastY = s2[1] + (isRelative ? lastY : 0);
        return;
      case "z":
      case "Z":
        lastX = countourStartX;
        lastY = countourStartY;
        return;
      default:
        lastX = s2[s2.length - 2] + (isRelative ? lastX : 0);
        lastY = s2[s2.length - 1] + (isRelative ? lastY : 0);
    }
  });
  if (!needReplace) {
    return this;
  }
  newSegments = [];
  for (i2 = 0; i2 < segments.length; i2++) {
    if (typeof replacements[i2] !== "undefined") {
      for (j2 = 0; j2 < replacements[i2].length; j2++) {
        newSegments.push(replacements[i2][j2]);
      }
    } else {
      newSegments.push(segments[i2]);
    }
  }
  this.segments = newSegments;
  return this;
};
SvgPath.prototype.abs = function() {
  this.iterate(function(s2, index, x2, y2) {
    var name2 = s2[0], nameUC = name2.toUpperCase(), i2;
    if (name2 === nameUC) {
      return;
    }
    s2[0] = nameUC;
    switch (name2) {
      case "v":
        s2[1] += y2;
        return;
      case "a":
        s2[6] += x2;
        s2[7] += y2;
        return;
      default:
        for (i2 = 1; i2 < s2.length; i2++) {
          s2[i2] += i2 % 2 ? x2 : y2;
        }
    }
  }, true);
  return this;
};
SvgPath.prototype.rel = function() {
  this.iterate(function(s2, index, x2, y2) {
    var name2 = s2[0], nameLC = name2.toLowerCase(), i2;
    if (name2 === nameLC) {
      return;
    }
    if (index === 0 && name2 === "M") {
      return;
    }
    s2[0] = nameLC;
    switch (name2) {
      case "V":
        s2[1] -= y2;
        return;
      case "A":
        s2[6] -= x2;
        s2[7] -= y2;
        return;
      default:
        for (i2 = 1; i2 < s2.length; i2++) {
          s2[i2] -= i2 % 2 ? x2 : y2;
        }
    }
  }, true);
  return this;
};
SvgPath.prototype.unarc = function() {
  this.iterate(function(s2, index, x2, y2) {
    var new_segments, nextX, nextY, result = [], name2 = s2[0];
    if (name2 !== "A" && name2 !== "a") {
      return null;
    }
    if (name2 === "a") {
      nextX = x2 + s2[6];
      nextY = y2 + s2[7];
    } else {
      nextX = s2[6];
      nextY = s2[7];
    }
    new_segments = a2c2(x2, y2, nextX, nextY, s2[4], s2[5], s2[1], s2[2], s2[3]);
    if (new_segments.length === 0) {
      return [[s2[0] === "a" ? "l" : "L", s2[6], s2[7]]];
    }
    new_segments.forEach(function(s3) {
      result.push(["C", s3[2], s3[3], s3[4], s3[5], s3[6], s3[7]]);
    });
    return result;
  });
  return this;
};
SvgPath.prototype.unshort = function() {
  var segments = this.segments;
  var prevControlX, prevControlY, prevSegment;
  var curControlX, curControlY;
  this.iterate(function(s2, idx, x2, y2) {
    var name2 = s2[0], nameUC = name2.toUpperCase(), isRelative;
    if (!idx) {
      return;
    }
    if (nameUC === "T") {
      isRelative = name2 === "t";
      prevSegment = segments[idx - 1];
      if (prevSegment[0] === "Q") {
        prevControlX = prevSegment[1] - x2;
        prevControlY = prevSegment[2] - y2;
      } else if (prevSegment[0] === "q") {
        prevControlX = prevSegment[1] - prevSegment[3];
        prevControlY = prevSegment[2] - prevSegment[4];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }
      curControlX = -prevControlX;
      curControlY = -prevControlY;
      if (!isRelative) {
        curControlX += x2;
        curControlY += y2;
      }
      segments[idx] = [
        isRelative ? "q" : "Q",
        curControlX,
        curControlY,
        s2[1],
        s2[2]
      ];
    } else if (nameUC === "S") {
      isRelative = name2 === "s";
      prevSegment = segments[idx - 1];
      if (prevSegment[0] === "C") {
        prevControlX = prevSegment[3] - x2;
        prevControlY = prevSegment[4] - y2;
      } else if (prevSegment[0] === "c") {
        prevControlX = prevSegment[3] - prevSegment[5];
        prevControlY = prevSegment[4] - prevSegment[6];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }
      curControlX = -prevControlX;
      curControlY = -prevControlY;
      if (!isRelative) {
        curControlX += x2;
        curControlY += y2;
      }
      segments[idx] = [
        isRelative ? "c" : "C",
        curControlX,
        curControlY,
        s2[1],
        s2[2],
        s2[3],
        s2[4]
      ];
    }
  });
  return this;
};
var svgpath$1 = SvgPath;
var svgpath = svgpath$1;
const o = /* @__PURE__ */ getDefaultExportFromCjs(svgpath);
var calculateSingle = function(input) {
  var selector = input, findMatch, typeCount = {
    "a": 0,
    "b": 0,
    "c": 0
  }, parts = [], attributeRegex = /(\[[^\]]+\])/g, idRegex = /(#[^\#\s\+>~\.\[:\)]+)/g, classRegex = /(\.[^\s\+>~\.\[:\)]+)/g, pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi, pseudoClassWithBracketsRegex = /(:(?!not|global|local)[\w-]+\([^\)]*\))/gi, pseudoClassRegex = /(:(?!not|global|local)[^\s\+>~\.\[:]+)/g, elementRegex = /([^\s\+>~\.\[:]+)/g;
  findMatch = function(regex, type) {
    var matches33, i2, len, match2, index, length;
    if (regex.test(selector)) {
      matches33 = selector.match(regex);
      for (i2 = 0, len = matches33.length; i2 < len; i2 += 1) {
        typeCount[type] += 1;
        match2 = matches33[i2];
        index = selector.indexOf(match2);
        length = match2.length;
        parts.push({
          selector: input.substr(index, length),
          type,
          index,
          length
        });
        selector = selector.replace(match2, Array(length + 1).join(" "));
      }
    }
  };
  (function() {
    var replaceWithPlainText = function(regex) {
      var matches33, i2, len, match2;
      if (regex.test(selector)) {
        matches33 = selector.match(regex);
        for (i2 = 0, len = matches33.length; i2 < len; i2 += 1) {
          match2 = matches33[i2];
          selector = selector.replace(match2, Array(match2.length + 1).join("A"));
        }
      }
    }, escapeHexadecimalRegex = /\\[0-9A-Fa-f]{6}\s?/g, escapeHexadecimalRegex2 = /\\[0-9A-Fa-f]{1,5}\s/g, escapeSpecialCharacter = /\\./g;
    replaceWithPlainText(escapeHexadecimalRegex);
    replaceWithPlainText(escapeHexadecimalRegex2);
    replaceWithPlainText(escapeSpecialCharacter);
  })();
  (function() {
    var regex = /{[^]*/gm, matches33, i2, len, match2;
    if (regex.test(selector)) {
      matches33 = selector.match(regex);
      for (i2 = 0, len = matches33.length; i2 < len; i2 += 1) {
        match2 = matches33[i2];
        selector = selector.replace(match2, Array(match2.length + 1).join(" "));
      }
    }
  })();
  findMatch(attributeRegex, "b");
  findMatch(idRegex, "a");
  findMatch(classRegex, "b");
  findMatch(pseudoElementRegex, "c");
  findMatch(pseudoClassWithBracketsRegex, "b");
  findMatch(pseudoClassRegex, "b");
  selector = selector.replace(/[\*\s\+>~]/g, " ");
  selector = selector.replace(/[#\.]/g, " ");
  selector = selector.replace(/:not/g, "    ");
  selector = selector.replace(/:local/g, "      ");
  selector = selector.replace(/:global/g, "       ");
  selector = selector.replace(/[\(\)]/g, " ");
  findMatch(elementRegex, "c");
  parts.sort(function(a2, b2) {
    return a2.index - b2.index;
  });
  return {
    selector: input,
    specificity: "0," + typeCount.a.toString() + "," + typeCount.b.toString() + "," + typeCount.c.toString(),
    specificityArray: [0, typeCount.a, typeCount.b, typeCount.c],
    parts
  };
};
var compare = function(a2, b2) {
  var aSpecificity, bSpecificity, i2;
  if (typeof a2 === "string") {
    if (a2.indexOf(",") !== -1) {
      throw "Invalid CSS selector";
    } else {
      aSpecificity = calculateSingle(a2)["specificityArray"];
    }
  } else if (Array.isArray(a2)) {
    if (a2.filter(function(e2) {
      return typeof e2 === "number";
    }).length !== 4) {
      throw "Invalid specificity array";
    } else {
      aSpecificity = a2;
    }
  } else {
    throw "Invalid CSS selector or specificity array";
  }
  if (typeof b2 === "string") {
    if (b2.indexOf(",") !== -1) {
      throw "Invalid CSS selector";
    } else {
      bSpecificity = calculateSingle(b2)["specificityArray"];
    }
  } else if (Array.isArray(b2)) {
    if (b2.filter(function(e2) {
      return typeof e2 === "number";
    }).length !== 4) {
      throw "Invalid specificity array";
    } else {
      bSpecificity = b2;
    }
  } else {
    throw "Invalid CSS selector or specificity array";
  }
  for (i2 = 0; i2 < 4; i2 += 1) {
    if (aSpecificity[i2] < bSpecificity[i2]) {
      return -1;
    } else if (aSpecificity[i2] > bSpecificity[i2]) {
      return 1;
    }
  }
  return 0;
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var u$1 = function(t3, e2) {
  return (u$1 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e3) {
    t4.__proto__ = e3;
  } || function(t4, e3) {
    for (var r2 in e3)
      e3.hasOwnProperty(r2) && (t4[r2] = e3[r2]);
  })(t3, e2);
};
function h$1(t3, e2) {
  function r2() {
    this.constructor = t3;
  }
  u$1(t3, e2), t3.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
}
var f$1 = function() {
  return (f$1 = Object.assign || function(t3) {
    for (var e2, r2 = 1, i2 = arguments.length; r2 < i2; r2++)
      for (var n2 in e2 = arguments[r2])
        Object.prototype.hasOwnProperty.call(e2, n2) && (t3[n2] = e2[n2]);
    return t3;
  }).apply(this, arguments);
};
function c$1(t3, e2, r2, i2) {
  return new (r2 || (r2 = Promise))(function(n2, a2) {
    function s2(t4) {
      try {
        l2(i2.next(t4));
      } catch (t5) {
        a2(t5);
      }
    }
    function o2(t4) {
      try {
        l2(i2.throw(t4));
      } catch (t5) {
        a2(t5);
      }
    }
    function l2(t4) {
      var e3;
      t4.done ? n2(t4.value) : (e3 = t4.value, e3 instanceof r2 ? e3 : new r2(function(t5) {
        t5(e3);
      })).then(s2, o2);
    }
    l2((i2 = i2.apply(t3, e2 || [])).next());
  });
}
function p(t3, e2) {
  var r2, i2, n2, a2, s2 = { label: 0, sent: function() {
    if (1 & n2[0])
      throw n2[1];
    return n2[1];
  }, trys: [], ops: [] };
  return a2 = { next: o2(0), throw: o2(1), return: o2(2) }, "function" == typeof Symbol && (a2[Symbol.iterator] = function() {
    return this;
  }), a2;
  function o2(a3) {
    return function(o3) {
      return function(a4) {
        if (r2)
          throw new TypeError("Generator is already executing.");
        for (; s2; )
          try {
            if (r2 = 1, i2 && (n2 = 2 & a4[0] ? i2.return : a4[0] ? i2.throw || ((n2 = i2.return) && n2.call(i2), 0) : i2.next) && !(n2 = n2.call(i2, a4[1])).done)
              return n2;
            switch (i2 = 0, n2 && (a4 = [2 & a4[0], n2.value]), a4[0]) {
              case 0:
              case 1:
                n2 = a4;
                break;
              case 4:
                return s2.label++, { value: a4[1], done: false };
              case 5:
                s2.label++, i2 = a4[1], a4 = [0];
                continue;
              case 7:
                a4 = s2.ops.pop(), s2.trys.pop();
                continue;
              default:
                if (!(n2 = s2.trys, (n2 = n2.length > 0 && n2[n2.length - 1]) || 6 !== a4[0] && 2 !== a4[0])) {
                  s2 = 0;
                  continue;
                }
                if (3 === a4[0] && (!n2 || a4[1] > n2[0] && a4[1] < n2[3])) {
                  s2.label = a4[1];
                  break;
                }
                if (6 === a4[0] && s2.label < n2[1]) {
                  s2.label = n2[1], n2 = a4;
                  break;
                }
                if (n2 && s2.label < n2[2]) {
                  s2.label = n2[2], s2.ops.push(a4);
                  break;
                }
                n2[2] && s2.ops.pop(), s2.trys.pop();
                continue;
            }
            a4 = e2.call(t3, s2);
          } catch (t4) {
            a4 = [6, t4], i2 = 0;
          } finally {
            r2 = n2 = 0;
          }
        if (5 & a4[0])
          throw a4[1];
        return { value: a4[0] ? a4[1] : void 0, done: true };
      }([a3, o3]);
    };
  }
}
var d$1 = function() {
  function t3(t4) {
    if (this.a = void 0, this.r = 0, this.g = 0, this.b = 0, this.simpleColors = {}, this.colorDefs = [], this.ok = false, t4) {
      for (var e2 in "#" == t4.charAt(0) && (t4 = t4.substr(1, 6)), t4 = (t4 = t4.replace(/ /g, "")).toLowerCase(), this.simpleColors = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd", blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", feldspar: "d19275", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", grey: "808080", green: "008000", greenyellow: "adff2f", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslateblue: "8470ff", lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32", linen: "faf0e6", magenta: "ff00ff", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", red: "ff0000", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", violetred: "d02090", wheat: "f5deb3", white: "ffffff", whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32" }, this.simpleColors)
        t4 == e2 && (t4 = this.simpleColors[e2]);
      this.colorDefs = [{ re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/, example: ["rgb(123, 234, 45)", "rgb(255,234,245)"], process: function(t5) {
        return [parseInt(t5[1]), parseInt(t5[2]), parseInt(t5[3])];
      } }, { re: /^(\w{2})(\w{2})(\w{2})$/, example: ["#00ff00", "336699"], process: function(t5) {
        return [parseInt(t5[1], 16), parseInt(t5[2], 16), parseInt(t5[3], 16)];
      } }, { re: /^(\w{1})(\w{1})(\w{1})$/, example: ["#fb0", "f0f"], process: function(t5) {
        return [parseInt(t5[1] + t5[1], 16), parseInt(t5[2] + t5[2], 16), parseInt(t5[3] + t5[3], 16)];
      } }];
      for (var r2 = 0; r2 < this.colorDefs.length; r2++) {
        var i2 = this.colorDefs[r2].re, n2 = this.colorDefs[r2].process, a2 = i2.exec(t4);
        if (a2) {
          var s2 = n2(a2);
          this.r = s2[0], this.g = s2[1], this.b = s2[2], this.ok = true;
        }
      }
      this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
    }
  }
  return t3.prototype.toRGB = function() {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  }, t3.prototype.toRGBA = function() {
    return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + (this.a || "1") + ")";
  }, t3.prototype.toHex = function() {
    var t4 = this.r.toString(16), e2 = this.g.toString(16), r2 = this.b.toString(16);
    return 1 == t4.length && (t4 = "0" + t4), 1 == e2.length && (e2 = "0" + e2), 1 == r2.length && (r2 = "0" + r2), "#" + t4 + e2 + r2;
  }, t3.prototype.getHelpXML = function() {
    for (var e2 = [], r2 = 0; r2 < this.colorDefs.length; r2++)
      for (var i2 = this.colorDefs[r2].example, n2 = 0; n2 < i2.length; n2++)
        e2[e2.length] = i2[n2];
    for (var a2 in this.simpleColors)
      e2[e2.length] = a2;
    var s2 = document.createElement("ul");
    s2.setAttribute("id", "rgbcolor-examples");
    for (r2 = 0; r2 < e2.length; r2++)
      try {
        var o2 = document.createElement("li"), l2 = new t3(e2[r2]), u2 = document.createElement("div");
        u2.style.cssText = "margin: 3px; border: 1px solid black; background:" + l2.toHex() + "; color:" + l2.toHex(), u2.appendChild(document.createTextNode("test"));
        var h2 = document.createTextNode(" " + e2[r2] + " -> " + l2.toRGB() + " -> " + l2.toHex());
        o2.appendChild(u2), o2.appendChild(h2), s2.appendChild(o2);
      } catch (t4) {
      }
    return s2;
  }, t3;
}(), m$1 = function() {
  function t3(t4) {
    this.color = t4;
  }
  return t3.prototype.getFillData = function(t4, e2) {
    return c$1(this, void 0, void 0, function() {
      return p(this, function(t5) {
        return [2, void 0];
      });
    });
  }, t3;
}(), g$1 = function() {
  function t3() {
    this.xmlSpace = "", this.fill = null, this.fillOpacity = 1, this.fontFamily = "", this.fontSize = 16, this.fontStyle = "", this.fontWeight = "", this.opacity = 1, this.stroke = null, this.strokeDasharray = null, this.strokeDashoffset = 0, this.strokeLinecap = "", this.strokeLinejoin = "", this.strokeMiterlimit = 4, this.strokeOpacity = 1, this.strokeWidth = 1, this.alignmentBaseline = "", this.textAnchor = "", this.visibility = "", this.color = null;
  }
  return t3.prototype.clone = function() {
    var e2 = new t3();
    return e2.xmlSpace = this.xmlSpace, e2.fill = this.fill, e2.fillOpacity = this.fillOpacity, e2.fontFamily = this.fontFamily, e2.fontSize = this.fontSize, e2.fontStyle = this.fontStyle, e2.fontWeight = this.fontWeight, e2.opacity = this.opacity, e2.stroke = this.stroke, e2.strokeDasharray = this.strokeDasharray, e2.strokeDashoffset = this.strokeDashoffset, e2.strokeLinecap = this.strokeLinecap, e2.strokeLinejoin = this.strokeLinejoin, e2.strokeMiterlimit = this.strokeMiterlimit, e2.strokeOpacity = this.strokeOpacity, e2.strokeWidth = this.strokeWidth, e2.textAnchor = this.textAnchor, e2.alignmentBaseline = this.alignmentBaseline, e2.visibility = this.visibility, e2.color = this.color, e2;
  }, t3.default = function() {
    var e2 = new t3();
    return e2.xmlSpace = "default", e2.fill = new m$1(new d$1("rgb(0, 0, 0)")), e2.fillOpacity = 1, e2.fontFamily = "times", e2.fontSize = 16, e2.fontStyle = "normal", e2.fontWeight = "normal", e2.opacity = 1, e2.stroke = null, e2.strokeDasharray = null, e2.strokeDashoffset = 0, e2.strokeLinecap = "butt", e2.strokeLinejoin = "miter", e2.strokeMiterlimit = 4, e2.strokeOpacity = 1, e2.strokeWidth = 1, e2.alignmentBaseline = "baseline", e2.textAnchor = "start", e2.visibility = "visible", e2.color = new d$1("rgb(0, 0, 0)"), e2;
  }, t3;
}(), y$1 = function() {
  function t3(t4, e2) {
    var r2, i2, n2;
    this.pdf = t4, this.svg2pdfParameters = e2.svg2pdfParameters, this.attributeState = e2.attributeState ? e2.attributeState.clone() : g$1.default(), this.viewport = e2.viewport, this.refsHandler = e2.refsHandler, this.styleSheets = e2.styleSheets, this.textMeasure = e2.textMeasure, this.transform = null !== (r2 = e2.transform) && void 0 !== r2 ? r2 : this.pdf.unitMatrix, this.withinClipPath = null !== (i2 = e2.withinClipPath) && void 0 !== i2 && i2, this.withinUse = null !== (n2 = e2.withinUse) && void 0 !== n2 && n2;
  }
  return t3.prototype.clone = function(e2) {
    var r2, i2, n2, a2;
    return void 0 === e2 && (e2 = {}), new t3(this.pdf, { svg2pdfParameters: this.svg2pdfParameters, attributeState: e2.attributeState ? e2.attributeState.clone() : this.attributeState.clone(), viewport: null !== (r2 = e2.viewport) && void 0 !== r2 ? r2 : this.viewport, refsHandler: this.refsHandler, styleSheets: this.styleSheets, textMeasure: this.textMeasure, transform: null !== (i2 = e2.transform) && void 0 !== i2 ? i2 : this.transform, withinClipPath: null !== (n2 = e2.withinClipPath) && void 0 !== n2 ? n2 : this.withinClipPath, withinUse: null !== (a2 = e2.withinUse) && void 0 !== a2 ? a2 : this.withinUse });
  }, t3;
}(), b$1 = function() {
  function e2(t3) {
    this.renderedElements = {}, this.idMap = t3, this.idPrefix = String(e2.instanceCounter++);
  }
  return e2.prototype.getRendered = function(t3, e3, r2) {
    return c$1(this, void 0, void 0, function() {
      var i2, n2;
      return p(this, function(a2) {
        switch (a2.label) {
          case 0:
            return i2 = this.generateKey(t3, e3), this.renderedElements.hasOwnProperty(i2) ? [2, this.renderedElements[t3]] : (n2 = this.get(t3), this.renderedElements[i2] = n2, [4, r2(n2)]);
          case 1:
            return a2.sent(), [2, n2];
        }
      });
    });
  }, e2.prototype.get = function(e3) {
    return this.idMap[t$1(e3, { isIdentifier: true })];
  }, e2.prototype.generateKey = function(t3, e3) {
    return this.idPrefix + "|" + t3 + "|" + (e3 || new d$1("rgb(0,0,0)")).toRGBA();
  }, e2.instanceCounter = 0, e2;
}();
function v$1(t3, e2) {
  return Math.atan2(e2[1] - t3[1], e2[0] - t3[0]);
}
function x$1(t3, e2) {
  return [2 / 3 * (e2[0] - t3[0]) + t3[0], 2 / 3 * (e2[1] - t3[1]) + t3[1]];
}
function S(t3) {
  var e2 = Math.sqrt(t3[0] * t3[0] + t3[1] * t3[1]);
  return [t3[0] / e2, t3[1] / e2];
}
function w$1(t3, e2) {
  return S([e2[0] - t3[0], e2[1] - t3[1]]);
}
function k$1(t3, e2) {
  return [t3[0] + e2[0], t3[1] + e2[1]];
}
function M(t3, e2) {
  var r2 = t3[0], i2 = t3[1];
  return [e2.a * r2 + e2.c * i2 + e2.e, e2.b * r2 + e2.d * i2 + e2.f];
}
var T$1 = function() {
  function t3() {
    this.segments = [];
  }
  return t3.prototype.moveTo = function(t4, e2) {
    return this.segments.push(new C$1(t4, e2)), this;
  }, t3.prototype.lineTo = function(t4, e2) {
    return this.segments.push(new F(t4, e2)), this;
  }, t3.prototype.curveTo = function(t4, e2, r2, i2, n2, a2) {
    return this.segments.push(new A$1(t4, e2, r2, i2, n2, a2)), this;
  }, t3.prototype.close = function() {
    return this.segments.push(new P$1()), this;
  }, t3.prototype.transform = function(t4) {
    this.segments.forEach(function(e2) {
      if (e2 instanceof C$1 || e2 instanceof F || e2 instanceof A$1) {
        var r2 = M([e2.x, e2.y], t4);
        e2.x = r2[0], e2.y = r2[1];
      }
      if (e2 instanceof A$1) {
        var i2 = M([e2.x1, e2.y1], t4), n2 = M([e2.x2, e2.y2], t4);
        e2.x1 = i2[0], e2.y1 = i2[1], e2.x2 = n2[0], e2.y2 = n2[1];
      }
    });
  }, t3.prototype.draw = function(t4) {
    var e2 = t4.pdf;
    this.segments.forEach(function(t5) {
      t5 instanceof C$1 ? e2.moveTo(t5.x, t5.y) : t5 instanceof F ? e2.lineTo(t5.x, t5.y) : t5 instanceof A$1 ? e2.curveTo(t5.x1, t5.y1, t5.x2, t5.y2, t5.x, t5.y) : e2.close();
    });
  }, t3;
}(), C$1 = function(t3, e2) {
  this.x = t3, this.y = e2;
}, F = function(t3, e2) {
  this.x = t3, this.y = e2;
}, A$1 = function(t3, e2, r2, i2, n2, a2) {
  this.x1 = t3, this.y1 = e2, this.x2 = r2, this.y2 = i2, this.x = n2, this.y = a2;
}, P$1 = function() {
};
function B(t3, e2) {
  return e2.split(",").indexOf((t3.nodeName || t3.tagName).toLowerCase()) >= 0;
}
function N$1(t3, e2, r2, i2) {
  var n2;
  void 0 === i2 && (i2 = r2);
  var a2 = null === (n2 = t3.style) || void 0 === n2 ? void 0 : n2.getPropertyValue(i2);
  if (a2)
    return a2;
  var s2 = e2.getPropertyValue(t3, i2);
  return s2 || (t3.hasAttribute(r2) && t3.getAttribute(r2) || void 0);
}
function O(t3, e2, r2) {
  if ("none" === N$1(t3.element, r2.styleSheets, "display"))
    return false;
  var i2 = e2, n2 = N$1(t3.element, r2.styleSheets, "visibility");
  return n2 && (i2 = "hidden" !== n2), i2;
}
function L(t3, e2, r2) {
  var i2 = O(t3, e2, r2);
  return 0 !== t3.element.childNodes.length && (t3.children.forEach(function(t4) {
    t4.isVisible(i2, r2) && (i2 = true);
  }), i2);
}
var E = function() {
  function t3() {
    this.markers = [];
  }
  return t3.prototype.addMarker = function(t4) {
    this.markers.push(t4);
  }, t3.prototype.draw = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e2, r2, i2, n2, a2, s2, o2;
      return p(this, function(l2) {
        switch (l2.label) {
          case 0:
            e2 = 0, l2.label = 1;
          case 1:
            return e2 < this.markers.length ? (r2 = this.markers[e2], i2 = void 0, n2 = r2.angle, a2 = r2.anchor, s2 = Math.cos(n2), o2 = Math.sin(n2), i2 = t4.pdf.Matrix(s2, o2, -o2, s2, a2[0], a2[1]), i2 = t4.pdf.matrixMult(t4.pdf.Matrix(t4.attributeState.strokeWidth, 0, 0, t4.attributeState.strokeWidth, 0, 0), i2), i2 = t4.pdf.matrixMult(i2, t4.transform), t4.pdf.saveGraphicsState(), [4, t4.refsHandler.getRendered(r2.id, null, function(e3) {
              return e3.apply(t4);
            })]) : [3, 4];
          case 2:
            l2.sent(), t4.pdf.doFormObject(r2.id, i2), t4.pdf.restoreGraphicsState(), l2.label = 3;
          case 3:
            return e2++, [3, 1];
          case 4:
            return [2];
        }
      });
    });
  }, t3;
}(), I$1 = function(t3, e2, r2) {
  this.id = t3, this.anchor = e2, this.angle = r2;
}, D$1 = /url\(["']?#([^"']+)["']?\)/, H$1 = { bottom: "bottom", "text-bottom": "bottom", top: "top", "text-top": "top", hanging: "hanging", middle: "middle", central: "middle", center: "middle", mathematical: "middle", ideographic: "ideographic", alphabetic: "alphabetic", baseline: "alphabetic" };
function R(t3, e2) {
  var r2;
  return (r2 = t3 && t3.toString().match(/^([\-0-9.]+)em$/)) ? parseFloat(r2[1]) * e2 : (r2 = t3 && t3.toString().match(/^([\-0-9.]+)(px|)$/)) ? parseFloat(r2[1]) : 0;
}
function V(t3) {
  return H$1[t3] || "alphabetic";
}
function W(t3) {
  for (var e2, r2 = [], i2 = /[+-]?(?:(?:\d+\.?\d*)|(?:\d*\.?\d+))(?:[eE][+-]?\d+)?/g; e2 = i2.exec(t3); )
    r2.push(parseFloat(e2[0]));
  return r2;
}
function j$1(t3, e2) {
  if ("transparent" === t3) {
    var r2 = new d$1("rgb(0,0,0)");
    return r2.a = 0, r2;
  }
  if ("currentcolor" === t3.toLowerCase())
    return e2 || new d$1("rgb(0,0,0)");
  var i2 = /\s*rgba\(((?:[^,\)]*,){3}[^,\)]*)\)\s*/.exec(t3);
  if (i2) {
    var n2 = W(i2[1]), a2 = new d$1("rgb(" + n2.slice(0, 3).join(",") + ")");
    return a2.a = n2[3], a2;
  }
  return new d$1(t3);
}
var G = { "sans-serif": "helvetica", verdana: "helvetica", arial: "helvetica", fixed: "courier", monospace: "courier", terminal: "courier", serif: "times", cursive: "times", fantasy: "times" };
var U, z$1 = (U = E$1.version.split("."), 2 === parseFloat(U[0]) && 3 === parseFloat(U[1]));
function Y(t3, e2) {
  return z$1 ? 400 == e2 ? "italic" == t3 ? "italic" : "normal" : 700 == e2 && "italic" !== t3 ? "bold" : t3 + "" + e2 : 400 == e2 || "normal" === e2 ? "italic" === t3 ? "italic" : "normal" : 700 != e2 && "bold" !== e2 || "normal" !== t3 ? (700 == e2 ? "bold" : e2) + "" + t3 : "bold";
}
function X(t3, e2) {
  if ("none" === N$1(e2.element, t3.styleSheets, "display"))
    return [0, 0, 0, 0];
  var r2 = [0, 0, 0, 0];
  return e2.children.forEach(function(e3) {
    var i2 = e3.getBoundingBox(t3);
    r2 = [Math.min(r2[0], i2[0]), Math.min(r2[1], i2[1]), Math.max(r2[0] + r2[2], i2[0] + i2[2]) - Math.min(r2[0], i2[0]), Math.max(r2[1] + r2[3], i2[1] + i2[3]) - Math.min(r2[1], i2[1])];
  }), r2;
}
function q(t3, e2) {
  var r2 = parseFloat, i2 = r2(t3.getAttribute("x1")) || r2(N$1(t3, e2.styleSheets, "x")) || r2(N$1(t3, e2.styleSheets, "cx")) - r2(N$1(t3, e2.styleSheets, "r")) || 0, n2 = r2(t3.getAttribute("x2")) || i2 + r2(N$1(t3, e2.styleSheets, "width")) || r2(N$1(t3, e2.styleSheets, "cx")) + r2(N$1(t3, e2.styleSheets, "r")) || 0, a2 = r2(t3.getAttribute("y1")) || r2(N$1(t3, e2.styleSheets, "y")) || r2(N$1(t3, e2.styleSheets, "cy")) - r2(N$1(t3, e2.styleSheets, "r")) || 0, s2 = r2(t3.getAttribute("y2")) || a2 + r2(N$1(t3, e2.styleSheets, "height")) || r2(N$1(t3, e2.styleSheets, "cy")) + r2(N$1(t3, e2.styleSheets, "r")) || 0;
  return [Math.min(i2, n2), Math.min(a2, s2), Math.max(i2, n2) - Math.min(i2, n2), Math.max(a2, s2) - Math.min(a2, s2)];
}
function _$1(t3, e2, r2, i2, n2, a2, s2, o2) {
  void 0 === o2 && (o2 = false);
  var l2, u2, h2 = e2[0], f2 = e2[1], c2 = e2[2], p2 = e2[3], d2 = n2 / c2, m2 = a2 / p2, g2 = t3.getAttribute("preserveAspectRatio");
  if (g2) {
    var y2 = g2.split(" ");
    "defer" === y2[0] && (y2 = y2.slice(1)), l2 = y2[0], u2 = y2[1] || "meet";
  } else
    l2 = "xMidYMid", u2 = "meet";
  if ("none" !== l2 && ("meet" === u2 ? d2 = m2 = Math.min(d2, m2) : "slice" === u2 && (d2 = m2 = Math.max(d2, m2))), o2)
    return s2.pdf.Matrix(d2, 0, 0, m2, 0, 0);
  var b2 = r2 - h2 * d2, v2 = i2 - f2 * m2;
  l2.indexOf("xMid") >= 0 ? b2 += (n2 - c2 * d2) / 2 : l2.indexOf("xMax") >= 0 && (b2 += n2 - c2 * d2), l2.indexOf("YMid") >= 0 ? v2 += (a2 - p2 * m2) / 2 : l2.indexOf("YMax") >= 0 && (v2 += a2 - p2 * m2);
  var x2 = s2.pdf.Matrix(1, 0, 0, 1, b2, v2), S2 = s2.pdf.Matrix(d2, 0, 0, m2, 0, 0);
  return s2.pdf.matrixMult(S2, x2);
}
function $$2(t3, e2) {
  if (!t3 || "none" === t3)
    return e2.pdf.unitMatrix;
  for (var r2, i2, n2 = /^[\s,]*matrix\(([^)]+)\)\s*/, a2 = /^[\s,]*translate\(([^)]+)\)\s*/, s2 = /^[\s,]*rotate\(([^)]+)\)\s*/, o2 = /^[\s,]*scale\(([^)]+)\)\s*/, l2 = /^[\s,]*skewX\(([^)]+)\)\s*/, u2 = /^[\s,]*skewY\(([^)]+)\)\s*/, h2 = e2.pdf.unitMatrix; t3.length > 0 && t3.length !== i2; ) {
    i2 = t3.length;
    var f2 = n2.exec(t3);
    if (f2 && (r2 = W(f2[1]), h2 = e2.pdf.matrixMult(e2.pdf.Matrix(r2[0], r2[1], r2[2], r2[3], r2[4], r2[5]), h2), t3 = t3.substr(f2[0].length)), f2 = s2.exec(t3)) {
      r2 = W(f2[1]);
      var c2 = Math.PI * r2[0] / 180;
      if (h2 = e2.pdf.matrixMult(e2.pdf.Matrix(Math.cos(c2), Math.sin(c2), -Math.sin(c2), Math.cos(c2), 0, 0), h2), r2[1] || r2[2]) {
        var p2 = e2.pdf.Matrix(1, 0, 0, 1, r2[1], r2[2]), d2 = e2.pdf.Matrix(1, 0, 0, 1, -r2[1], -r2[2]);
        h2 = e2.pdf.matrixMult(d2, e2.pdf.matrixMult(h2, p2));
      }
      t3 = t3.substr(f2[0].length);
    }
    (f2 = a2.exec(t3)) && (r2 = W(f2[1]), h2 = e2.pdf.matrixMult(e2.pdf.Matrix(1, 0, 0, 1, r2[0], r2[1] || 0), h2), t3 = t3.substr(f2[0].length)), (f2 = o2.exec(t3)) && ((r2 = W(f2[1]))[1] || (r2[1] = r2[0]), h2 = e2.pdf.matrixMult(e2.pdf.Matrix(r2[0], 0, 0, r2[1], 0, 0), h2), t3 = t3.substr(f2[0].length)), (f2 = l2.exec(t3)) && (r2 = parseFloat(f2[1]), r2 *= Math.PI / 180, h2 = e2.pdf.matrixMult(e2.pdf.Matrix(1, 0, Math.tan(r2), 1, 0, 0), h2), t3 = t3.substr(f2[0].length)), (f2 = u2.exec(t3)) && (r2 = parseFloat(f2[1]), r2 *= Math.PI / 180, h2 = e2.pdf.matrixMult(e2.pdf.Matrix(1, Math.tan(r2), 0, 1, 0, 0), h2), t3 = t3.substr(f2[0].length));
  }
  return h2;
}
var Q = function() {
  function t3(t4, e2) {
    this.element = t4, this.children = e2, this.parent = null;
  }
  return t3.prototype.setParent = function(t4) {
    this.parent = t4;
  }, t3.prototype.getParent = function() {
    return this.parent;
  }, t3.prototype.getBoundingBox = function(t4) {
    return "none" === N$1(this.element, t4.styleSheets, "display") ? [0, 0, 0, 0] : this.getBoundingBoxCore(t4);
  }, t3.prototype.computeNodeTransform = function(t4) {
    var e2 = this.computeNodeTransformCore(t4), r2 = N$1(this.element, t4.styleSheets, "transform");
    return r2 ? t4.pdf.matrixMult(e2, $$2(r2, t4)) : e2;
  }, t3;
}(), K = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.render = function(t4) {
    return Promise.resolve();
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return [];
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2;
}(Q), J = function(t3) {
  function e2(e3, r2, i2) {
    var n2 = t3.call(this, r2, i2) || this;
    return n2.pdfGradientType = e3, n2.contextColor = void 0, n2;
  }
  return h$1(e2, t3), e2.prototype.apply = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, a2, s2, o2, l2;
      return p(this, function(u2) {
        return (e3 = this.element.getAttribute("id")) ? (r2 = this.getStops(t4.styleSheets), a2 = 0, s2 = false, r2.forEach(function(t5) {
          var e4 = t5.opacity;
          e4 && 1 !== e4 && (a2 += e4, s2 = true);
        }), s2 && (o2 = new j$2({ opacity: a2 / r2.length })), l2 = new B$1(this.pdfGradientType, this.getCoordinates(), r2, o2), t4.pdf.addShadingPattern(e3, l2), [2]) : [2];
      });
    });
  }, e2.prototype.getStops = function(t4) {
    var r2 = this;
    if (this.stops)
      return this.stops;
    if (void 0 === this.contextColor) {
      this.contextColor = null;
      for (var i2 = this; i2; ) {
        var n2 = N$1(i2.element, t4, "color");
        if (n2) {
          this.contextColor = j$1(n2, null);
          break;
        }
        i2 = i2.getParent();
      }
    }
    var a2 = [];
    return this.children.forEach(function(i3) {
      if ("stop" === i3.element.tagName.toLowerCase()) {
        var n3 = N$1(i3.element, t4, "color"), s2 = j$1(N$1(i3.element, t4, "stop-color") || "", n3 ? j$1(n3, null) : r2.contextColor), o2 = parseFloat(N$1(i3.element, t4, "stop-opacity") || "1");
        a2.push({ offset: e2.parseGradientOffset(i3.element.getAttribute("offset") || "0"), color: [s2.r, s2.g, s2.b], opacity: o2 });
      }
    }), this.stops = a2;
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return q(this.element, t4);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2.parseGradientOffset = function(t4) {
    var e3 = parseFloat(t4);
    return !isNaN(e3) && t4.indexOf("%") >= 0 ? e3 / 100 : e3;
  }, e2;
}(K), Z = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, "axial", e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getCoordinates = function() {
    return [parseFloat(this.element.getAttribute("x1") || "0"), parseFloat(this.element.getAttribute("y1") || "0"), parseFloat(this.element.getAttribute("x2") || "1"), parseFloat(this.element.getAttribute("y2") || "0")];
  }, e2;
}(J), tt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, "radial", e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getCoordinates = function() {
    var t4 = this.element.getAttribute("cx"), e3 = this.element.getAttribute("cy"), r2 = this.element.getAttribute("fx"), i2 = this.element.getAttribute("fy");
    return [parseFloat(r2 || t4 || "0.5"), parseFloat(i2 || e3 || "0.5"), 0, parseFloat(t4 || "0.5"), parseFloat(e3 || "0.5"), parseFloat(this.element.getAttribute("r") || "0.5")];
  }, e2;
}(J), et = function() {
  function t3(t4, e2) {
    this.key = t4, this.gradient = e2;
  }
  return t3.prototype.getFillData = function(t4, e2) {
    return c$1(this, void 0, void 0, function() {
      var r2, i2, n2;
      return p(this, function(a2) {
        switch (a2.label) {
          case 0:
            return [4, e2.refsHandler.getRendered(this.key, null, function(t5) {
              return t5.apply(new y$1(e2.pdf, { refsHandler: e2.refsHandler, textMeasure: e2.textMeasure, styleSheets: e2.styleSheets, viewport: e2.viewport, svg2pdfParameters: e2.svg2pdfParameters }));
            })];
          case 1:
            return a2.sent(), this.gradient.element.hasAttribute("gradientUnits") && "objectboundingbox" !== this.gradient.element.getAttribute("gradientUnits").toLowerCase() ? r2 = e2.pdf.unitMatrix : (i2 = t4.getBoundingBox(e2), r2 = e2.pdf.Matrix(i2[2], 0, 0, i2[3], i2[0], i2[1])), n2 = $$2(N$1(this.gradient.element, e2.styleSheets, "gradientTransform", "transform"), e2), [2, { key: this.key, matrix: e2.pdf.matrixMult(n2, r2) }];
        }
      });
    });
  }, t3;
}(), rt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.apply = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2, s2;
      return p(this, function(o2) {
        switch (o2.label) {
          case 0:
            if (!(e3 = this.element.getAttribute("id")))
              return [2];
            r2 = this.getBoundingBox(t4), i2 = new M$1([r2[0], r2[1], r2[0] + r2[2], r2[1] + r2[3]], r2[2], r2[3]), t4.pdf.beginTilingPattern(i2), n2 = 0, s2 = this.children, o2.label = 1;
          case 1:
            return n2 < s2.length ? [4, s2[n2].render(new y$1(t4.pdf, { attributeState: t4.attributeState, refsHandler: t4.refsHandler, styleSheets: t4.styleSheets, viewport: t4.viewport, svg2pdfParameters: t4.svg2pdfParameters, textMeasure: t4.textMeasure }))] : [3, 4];
          case 2:
            o2.sent(), o2.label = 3;
          case 3:
            return n2++, [3, 1];
          case 4:
            return t4.pdf.endTilingPattern(e3, i2), [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return q(this.element, t4);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2;
}(K), it = function() {
  function t3(t4, e2) {
    this.key = t4, this.pattern = e2;
  }
  return t3.prototype.getFillData = function(t4, e2) {
    return c$1(this, void 0, void 0, function() {
      var r2, i2, n2, a2, s2, o2, l2, u2, h2, f2, c2, d2;
      return p(this, function(p2) {
        switch (p2.label) {
          case 0:
            return [4, e2.refsHandler.getRendered(this.key, null, function(t5) {
              return t5.apply(new y$1(e2.pdf, { refsHandler: e2.refsHandler, textMeasure: e2.textMeasure, styleSheets: e2.styleSheets, viewport: e2.viewport, svg2pdfParameters: e2.svg2pdfParameters }));
            })];
          case 1:
            return p2.sent(), r2 = { key: this.key, boundingBox: void 0, xStep: 0, yStep: 0, matrix: void 0 }, n2 = e2.pdf.unitMatrix, this.pattern.element.hasAttribute("patternUnits") && "objectboundingbox" !== this.pattern.element.getAttribute("patternUnits").toLowerCase() || (i2 = t4.getBoundingBox(e2), n2 = e2.pdf.Matrix(1, 0, 0, 1, i2[0], i2[1]), s2 = this.pattern.getBoundingBox(e2), o2 = s2[0] * i2[0] || 0, l2 = s2[1] * i2[1] || 0, u2 = s2[2] * i2[2] || 0, h2 = s2[3] * i2[3] || 0, r2.boundingBox = [o2, l2, o2 + u2, l2 + h2], r2.xStep = u2, r2.yStep = h2), a2 = e2.pdf.unitMatrix, this.pattern.element.hasAttribute("patternContentUnits") && "objectboundingbox" === this.pattern.element.getAttribute("patternContentUnits").toLowerCase() && (i2 || (i2 = t4.getBoundingBox(e2)), a2 = e2.pdf.Matrix(i2[2], 0, 0, i2[3], 0, 0), s2 = r2.boundingBox || this.pattern.getBoundingBox(e2), o2 = s2[0] / i2[0] || 0, l2 = s2[1] / i2[1] || 0, u2 = s2[2] / i2[2] || 0, h2 = s2[3] / i2[3] || 0, r2.boundingBox = [o2, l2, o2 + u2, l2 + h2], r2.xStep = u2, r2.yStep = h2), f2 = e2.pdf.unitMatrix, (c2 = N$1(this.pattern.element, e2.styleSheets, "patternTransform", "transform")) && (f2 = $$2(c2, e2)), d2 = a2, d2 = e2.pdf.matrixMult(d2, n2), d2 = e2.pdf.matrixMult(d2, f2), d2 = e2.pdf.matrixMult(d2, e2.transform), r2.matrix = d2, [2, r2];
        }
      });
    });
  }, t3;
}();
function nt(t3, e2) {
  var r2 = D$1.exec(t3);
  if (r2) {
    var i2 = r2[1], n2 = e2.refsHandler.get(i2);
    return n2 && (n2 instanceof Z || n2 instanceof tt) ? function(t4, e3, r3) {
      var i3 = e3.getStops(r3.styleSheets);
      if (0 === i3.length)
        return null;
      if (1 === i3.length) {
        var n3 = i3[0].color, a3 = new d$1();
        return a3.ok = true, a3.r = n3[0], a3.g = n3[1], a3.b = n3[2], a3.a = i3[0].opacity, new m$1(a3);
      }
      return new et(t4, e3);
    }(i2, n2, e2) : n2 && n2 instanceof rt ? new it(i2, n2) : new m$1(new d$1("rgb(0, 0, 0)"));
  }
  var a2 = j$1(t3, e2.attributeState.color);
  return a2.ok ? new m$1(a2) : null;
}
function at(t3, r2, i2) {
  var n2 = i2 || r2.element, a2 = N$1(n2, t3.styleSheets, "color");
  if (a2) {
    var s2 = j$1(a2, t3.attributeState.color);
    s2.ok ? t3.attributeState.color = s2 : t3.attributeState.color = new d$1("rgb(0,0,0)");
  }
  var o2 = N$1(n2, t3.styleSheets, "visibility");
  o2 && (t3.attributeState.visibility = o2);
  var l2 = N$1(n2, t3.styleSheets, "fill");
  l2 && (t3.attributeState.fill = nt(l2, t3));
  var u2 = N$1(n2, t3.styleSheets, "fill-opacity");
  u2 && (t3.attributeState.fillOpacity = parseFloat(u2));
  var h2 = N$1(n2, t3.styleSheets, "stroke-opacity");
  h2 && (t3.attributeState.strokeOpacity = parseFloat(h2));
  var f2 = N$1(n2, t3.styleSheets, "opacity");
  f2 && (t3.attributeState.opacity = parseFloat(f2));
  var c2 = N$1(n2, t3.styleSheets, "stroke-width");
  void 0 !== c2 && "" !== c2 && (t3.attributeState.strokeWidth = Math.abs(parseFloat(c2)));
  var p2 = N$1(n2, t3.styleSheets, "stroke");
  if (p2)
    if ("none" === p2)
      t3.attributeState.stroke = null;
    else {
      var g2 = j$1(p2, t3.attributeState.color);
      g2.ok && (t3.attributeState.stroke = new m$1(g2));
    }
  var y2 = N$1(n2, t3.styleSheets, "stroke-linecap");
  y2 && (t3.attributeState.strokeLinecap = y2);
  var b2 = N$1(n2, t3.styleSheets, "stroke-linejoin");
  b2 && (t3.attributeState.strokeLinejoin = b2);
  var v2 = N$1(n2, t3.styleSheets, "stroke-dasharray");
  if (v2) {
    var x2 = parseInt(N$1(n2, t3.styleSheets, "stroke-dashoffset") || "0");
    t3.attributeState.strokeDasharray = W(v2), t3.attributeState.strokeDashoffset = x2;
  }
  var S2 = N$1(n2, t3.styleSheets, "stroke-miterlimit");
  void 0 !== S2 && "" !== S2 && (t3.attributeState.strokeMiterlimit = parseFloat(S2));
  var w2 = n2.getAttribute("xml:space");
  w2 && (t3.attributeState.xmlSpace = w2);
  var k2 = N$1(n2, t3.styleSheets, "font-weight");
  k2 && (t3.attributeState.fontWeight = k2);
  var M2 = N$1(n2, t3.styleSheets, "font-style");
  M2 && (t3.attributeState.fontStyle = M2);
  var T2 = N$1(n2, t3.styleSheets, "font-family");
  if (T2) {
    var C2 = e$1.parse(T2);
    t3.attributeState.fontFamily = function(t4, e2, r3) {
      var i3 = Y(t4.fontStyle, t4.fontWeight), n3 = r3.pdf.getFontList(), a3 = "";
      return e2.some(function(t5) {
        var e3 = n3[t5];
        return e3 && e3.indexOf(i3) >= 0 ? (a3 = t5, true) : (t5 = t5.toLowerCase(), !!G.hasOwnProperty(t5) && (a3 = t5, true));
      }) || (a3 = "times"), a3;
    }(t3.attributeState, C2, t3);
  }
  var F2 = N$1(n2, t3.styleSheets, "font-size");
  if (F2) {
    var A2 = t3.pdf.getFontSize();
    t3.attributeState.fontSize = R(F2, A2);
  }
  var P2 = N$1(n2, t3.styleSheets, "vertical-align") || N$1(n2, t3.styleSheets, "alignment-baseline");
  if (P2) {
    var B2 = P2.match(/(baseline|text-bottom|alphabetic|ideographic|middle|central|mathematical|text-top|bottom|center|top|hanging)/);
    B2 && (t3.attributeState.alignmentBaseline = B2[0]);
  }
  var O2 = N$1(n2, t3.styleSheets, "text-anchor");
  O2 && (t3.attributeState.textAnchor = O2);
}
function st(t3, e2, r2) {
  var n2 = 1, a2 = 1;
  n2 *= t3.attributeState.fillOpacity, n2 *= t3.attributeState.opacity, t3.attributeState.fill instanceof m$1 && void 0 !== t3.attributeState.fill.color.a && (n2 *= t3.attributeState.fill.color.a), a2 *= t3.attributeState.strokeOpacity, a2 *= t3.attributeState.opacity, t3.attributeState.stroke instanceof m$1 && void 0 !== t3.attributeState.stroke.color.a && (a2 *= t3.attributeState.stroke.color.a);
  var s2, o2, l2 = n2 < 1, u2 = a2 < 1;
  if (B(r2, "use") ? (l2 = true, u2 = true, n2 *= t3.attributeState.fill ? 1 : 0, a2 *= t3.attributeState.stroke ? 1 : 0) : t3.withinUse && (t3.attributeState.fill !== e2.attributeState.fill ? (l2 = true, n2 *= t3.attributeState.fill ? 1 : 0) : l2 && !t3.attributeState.fill && (n2 = 0), t3.attributeState.stroke !== e2.attributeState.stroke ? (u2 = true, a2 *= t3.attributeState.stroke ? 1 : 0) : u2 && !t3.attributeState.stroke && (a2 = 0)), l2 || u2) {
    var h2 = {};
    l2 && (h2.opacity = n2), u2 && (h2["stroke-opacity"] = a2), t3.pdf.setGState(new j$2(h2));
  }
  if (t3.attributeState.fill && t3.attributeState.fill !== e2.attributeState.fill && t3.attributeState.fill instanceof m$1 && t3.attributeState.fill.color.ok && !B(r2, "text") && t3.pdf.setFillColor(t3.attributeState.fill.color.r, t3.attributeState.fill.color.g, t3.attributeState.fill.color.b), t3.attributeState.strokeWidth !== e2.attributeState.strokeWidth && t3.pdf.setLineWidth(t3.attributeState.strokeWidth), t3.attributeState.stroke !== e2.attributeState.stroke && t3.attributeState.stroke instanceof m$1 && t3.pdf.setDrawColor(t3.attributeState.stroke.color.r, t3.attributeState.stroke.color.g, t3.attributeState.stroke.color.b), t3.attributeState.strokeLinecap !== e2.attributeState.strokeLinecap && t3.pdf.setLineCap(t3.attributeState.strokeLinecap), t3.attributeState.strokeLinejoin !== e2.attributeState.strokeLinejoin && t3.pdf.setLineJoin(t3.attributeState.strokeLinejoin), t3.attributeState.strokeDasharray === e2.attributeState.strokeDasharray && t3.attributeState.strokeDashoffset === e2.attributeState.strokeDashoffset || !t3.attributeState.strokeDasharray || t3.pdf.setLineDashPattern(t3.attributeState.strokeDasharray, t3.attributeState.strokeDashoffset), t3.attributeState.strokeMiterlimit !== e2.attributeState.strokeMiterlimit && t3.pdf.setLineMiterLimit(t3.attributeState.strokeMiterlimit), t3.attributeState.fontFamily !== e2.attributeState.fontFamily && (s2 = G.hasOwnProperty(t3.attributeState.fontFamily) ? G[t3.attributeState.fontFamily] : t3.attributeState.fontFamily), t3.attributeState.fill && t3.attributeState.fill !== e2.attributeState.fill && t3.attributeState.fill instanceof m$1 && t3.attributeState.fill.color.ok) {
    var f2 = t3.attributeState.fill.color;
    t3.pdf.setTextColor(f2.r, f2.g, f2.b);
  }
  t3.attributeState.fontWeight === e2.attributeState.fontWeight && t3.attributeState.fontStyle === e2.attributeState.fontStyle || (o2 = Y(t3.attributeState.fontStyle, t3.attributeState.fontWeight)), void 0 === s2 && void 0 === o2 || (void 0 === s2 && (s2 = G.hasOwnProperty(t3.attributeState.fontFamily) ? G[t3.attributeState.fontFamily] : t3.attributeState.fontFamily), t3.pdf.setFont(s2, o2)), t3.attributeState.fontSize !== e2.attributeState.fontSize && t3.pdf.setFontSize(t3.attributeState.fontSize * t3.pdf.internal.scaleFactor);
}
function ot(t3, e2, r2) {
  var i2 = D$1.exec(t3);
  if (i2) {
    var n2 = i2[1];
    return r2.refsHandler.get(n2) || void 0;
  }
}
function lt(t3, e2, r2) {
  return c$1(this, void 0, void 0, function() {
    var i2, n2;
    return p(this, function(a2) {
      switch (a2.label) {
        case 0:
          return i2 = r2.clone(), e2.element.hasAttribute("clipPathUnits") && "objectboundingbox" === e2.element.getAttribute("clipPathUnits").toLowerCase() && (n2 = t3.getBoundingBox(r2), i2.transform = r2.pdf.matrixMult(r2.pdf.Matrix(n2[2], 0, 0, n2[3], n2[0], n2[1]), r2.transform)), [4, e2.apply(i2)];
        case 1:
          return a2.sent(), [2];
      }
    });
  });
}
var ut = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.render = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2;
      return p(this, function(a2) {
        switch (a2.label) {
          case 0:
            return this.isVisible("hidden" !== t4.attributeState.visibility, t4) ? ((e3 = t4.clone()).transform = e3.pdf.matrixMult(this.computeNodeTransform(e3), t4.transform), at(e3, this), r2 = N$1(this.element, e3.styleSheets, "clip-path"), (i2 = r2 && "none" !== r2) ? (n2 = ot(r2, 0, e3)) ? n2.isVisible(true, e3) ? (e3.pdf.saveGraphicsState(), [4, lt(this, n2, e3)]) : [3, 2] : [3, 4] : [3, 5]) : [2];
          case 1:
            return a2.sent(), [3, 3];
          case 2:
            return [2];
          case 3:
            return [3, 5];
          case 4:
            i2 = false, a2.label = 5;
          case 5:
            return e3.withinClipPath || e3.pdf.saveGraphicsState(), st(e3, t4, this.element), [4, this.renderCore(e3)];
          case 6:
            return a2.sent(), e3.withinClipPath || e3.pdf.restoreGraphicsState(), i2 && e3.pdf.restoreGraphicsState(), [2];
        }
      });
    });
  }, e2;
}(Q), ht = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2;
}(ut), ft = function(t3) {
  function e2(e3, r2, i2) {
    var n2 = t3.call(this, r2, i2) || this;
    return n2.cachedPath = null, n2.hasMarkers = e3, n2;
  }
  return h$1(e2, t3), e2.prototype.renderCore = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3;
      return p(this, function(r2) {
        switch (r2.label) {
          case 0:
            return null === (e3 = this.getCachedPath(t4)) || 0 === e3.segments.length ? [2] : (t4.withinClipPath ? e3.transform(t4.transform) : t4.pdf.setCurrentTransformationMatrix(t4.transform), e3.draw(t4), [4, this.fillOrStroke(t4)]);
          case 1:
            return r2.sent(), this.hasMarkers ? [4, this.drawMarkers(t4, e3)] : [3, 3];
          case 2:
            r2.sent(), r2.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }, e2.prototype.getCachedPath = function(t4) {
    return this.cachedPath || (this.cachedPath = this.getPath(t4));
  }, e2.prototype.drawMarkers = function(t4, e3) {
    return c$1(this, void 0, void 0, function() {
      return p(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this.getMarkers(e3, t4).draw(t4.clone({ transform: t4.pdf.unitMatrix }))];
          case 1:
            return r2.sent(), [2];
        }
      });
    });
  }, e2.prototype.fillOrStroke = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2, a2;
      return p(this, function(s2) {
        switch (s2.label) {
          case 0:
            return t4.withinClipPath ? [2] : (e3 = t4.attributeState.fill, r2 = t4.attributeState.stroke && 0 !== t4.attributeState.strokeWidth, e3 ? [4, e3.getFillData(this, t4)] : [3, 2]);
          case 1:
            return n2 = s2.sent(), [3, 3];
          case 2:
            n2 = void 0, s2.label = 3;
          case 3:
            return i2 = n2, a2 = "evenodd" === N$1(this.element, t4.styleSheets, "fill-rule"), e3 && r2 || t4.withinUse ? a2 ? t4.pdf.fillStrokeEvenOdd(i2) : t4.pdf.fillStroke(i2) : e3 ? a2 ? t4.pdf.fillEvenOdd(i2) : t4.pdf.fill(i2) : r2 ? t4.pdf.stroke() : t4.pdf.discardPath(), [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    var e3 = this.getCachedPath(t4);
    if (!e3 || !e3.segments.length)
      return [0, 0, 0, 0];
    for (var r2 = Number.POSITIVE_INFINITY, i2 = Number.POSITIVE_INFINITY, n2 = Number.NEGATIVE_INFINITY, a2 = Number.NEGATIVE_INFINITY, s2 = 0, o2 = 0, l2 = 0; l2 < e3.segments.length; l2++) {
      var u2 = e3.segments[l2];
      (u2 instanceof C$1 || u2 instanceof F || u2 instanceof A$1) && (s2 = u2.x, o2 = u2.y), u2 instanceof A$1 ? (r2 = Math.min(r2, s2, u2.x1, u2.x2, u2.x), n2 = Math.max(n2, s2, u2.x1, u2.x2, u2.x), i2 = Math.min(i2, o2, u2.y1, u2.y2, u2.y), a2 = Math.max(a2, o2, u2.y1, u2.y2, u2.y)) : (r2 = Math.min(r2, s2), n2 = Math.max(n2, s2), i2 = Math.min(i2, o2), a2 = Math.max(a2, o2));
    }
    return [r2, i2, n2 - r2, a2 - i2];
  }, e2.prototype.getMarkers = function(t4, e3) {
    var r2 = N$1(this.element, e3.styleSheets, "marker-start"), i2 = N$1(this.element, e3.styleSheets, "marker-mid"), n2 = N$1(this.element, e3.styleSheets, "marker-end"), a2 = new E();
    if (r2 || i2 || n2) {
      n2 && (n2 = ct(n2)), r2 && (r2 = ct(r2)), i2 && (i2 = ct(i2));
      for (var s2 = t4.segments, o2 = [1, 0], l2 = void 0, u2 = false, h2 = [1, 0], f2 = false, c2 = function(t5) {
        var e4 = s2[t5], c3 = r2 && (1 === t5 || !(s2[t5] instanceof C$1) && s2[t5 - 1] instanceof C$1);
        c3 && s2.forEach(function(e5, r3) {
          if (!f2 && e5 instanceof P$1 && r3 > t5) {
            var i3 = s2[r3 - 1];
            f2 = (i3 instanceof C$1 || i3 instanceof F || i3 instanceof A$1) && i3;
          }
        });
        var p3 = n2 && (t5 === s2.length - 1 || !(s2[t5] instanceof C$1) && s2[t5 + 1] instanceof C$1), d2 = i2 && t5 > 0 && !(1 === t5 && s2[t5 - 1] instanceof C$1), m2 = s2[t5 - 1] || null;
        if (m2 instanceof C$1 || m2 instanceof F || m2 instanceof A$1) {
          if (e4 instanceof A$1)
            c3 && a2.addMarker(new I$1(r2, [m2.x, m2.y], v$1(f2 ? [f2.x, f2.y] : [m2.x, m2.y], [e4.x1, e4.y1]))), p3 && a2.addMarker(new I$1(n2, [e4.x, e4.y], v$1([e4.x2, e4.y2], [e4.x, e4.y]))), d2 && (l2 = w$1([m2.x, m2.y], [e4.x1, e4.y1]), l2 = m2 instanceof C$1 ? l2 : S(k$1(o2, l2)), a2.addMarker(new I$1(i2, [m2.x, m2.y], Math.atan2(l2[1], l2[0])))), o2 = w$1([e4.x2, e4.y2], [e4.x, e4.y]);
          else if (e4 instanceof C$1 || e4 instanceof F) {
            if (l2 = w$1([m2.x, m2.y], [e4.x, e4.y]), c3) {
              var g2 = f2 ? w$1([f2.x, f2.y], [e4.x, e4.y]) : l2;
              a2.addMarker(new I$1(r2, [m2.x, m2.y], Math.atan2(g2[1], g2[0])));
            }
            if (p3 && a2.addMarker(new I$1(n2, [e4.x, e4.y], Math.atan2(l2[1], l2[0]))), d2) {
              g2 = e4 instanceof C$1 ? o2 : m2 instanceof C$1 ? l2 : S(k$1(o2, l2));
              a2.addMarker(new I$1(i2, [m2.x, m2.y], Math.atan2(g2[1], g2[0])));
            }
            o2 = l2;
          } else if (e4 instanceof P$1) {
            if (l2 = w$1([m2.x, m2.y], [u2.x, u2.y]), d2) {
              g2 = m2 instanceof C$1 ? l2 : S(k$1(o2, l2));
              a2.addMarker(new I$1(i2, [m2.x, m2.y], Math.atan2(g2[1], g2[0])));
            }
            if (p3) {
              g2 = S(k$1(l2, h2));
              a2.addMarker(new I$1(n2, [u2.x, u2.y], Math.atan2(g2[1], g2[0])));
            }
            o2 = l2;
          }
        } else {
          u2 = e4 instanceof C$1 && e4;
          var y2 = s2[t5 + 1];
          (y2 instanceof C$1 || y2 instanceof F || y2 instanceof A$1) && (h2 = w$1([u2.x, u2.y], [y2.x, y2.y]));
        }
      }, p2 = 0; p2 < s2.length; p2++)
        c2(p2);
    }
    return a2;
  }, e2;
}(ht);
function ct(t3) {
  var e2 = D$1.exec(t3);
  return e2 && e2[1] || void 0;
}
var pt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, true, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getPath = function(t4) {
    if (t4.withinClipPath || null === t4.attributeState.stroke)
      return null;
    var e3 = parseFloat(this.element.getAttribute("x1") || "0"), r2 = parseFloat(this.element.getAttribute("y1") || "0"), i2 = parseFloat(this.element.getAttribute("x2") || "0"), n2 = parseFloat(this.element.getAttribute("y2") || "0");
    return e3 || i2 || r2 || n2 ? new T$1().moveTo(e3, r2).lineTo(i2, n2) : null;
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2.prototype.fillOrStroke = function(e3) {
    return c$1(this, void 0, void 0, function() {
      return p(this, function(r2) {
        switch (r2.label) {
          case 0:
            return e3.attributeState.fill = null, [4, t3.prototype.fillOrStroke.call(this, e3)];
          case 1:
            return r2.sent(), [2];
        }
      });
    });
  }, e2;
}(ft), dt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.apply = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2, a2;
      return p(this, function(s2) {
        switch (s2.label) {
          case 0:
            return this.isVisible("hidden" !== t4.attributeState.visibility, t4) ? ((e3 = t4.clone()).transform = e3.pdf.unitMatrix, at(e3, this), r2 = N$1(this.element, e3.styleSheets, "clip-path"), r2 && "none" !== r2 && (i2 = ot(r2, 0, e3)) ? i2.isVisible(true, e3) ? [4, lt(this, i2, e3)] : [3, 2] : [3, 3]) : [2];
          case 1:
            return s2.sent(), [3, 3];
          case 2:
            return [2];
          case 3:
            st(e3, t4, this.element), n2 = 0, a2 = this.children, s2.label = 4;
          case 4:
            return n2 < a2.length ? [4, a2[n2].render(e3)] : [3, 7];
          case 5:
            s2.sent(), s2.label = 6;
          case 6:
            return n2++, [3, 4];
          case 7:
            return [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return X(t4, this);
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    var e3 = parseFloat(N$1(this.element, t4.styleSheets, "x") || "0"), r2 = parseFloat(N$1(this.element, t4.styleSheets, "y") || "0"), i2 = this.element.getAttribute("viewBox");
    if (i2) {
      var n2 = W(i2), a2 = parseFloat(N$1(this.element, t4.styleSheets, "width") || N$1(this.element.ownerSVGElement, t4.styleSheets, "width") || i2[2]), s2 = parseFloat(N$1(this.element, t4.styleSheets, "height") || N$1(this.element.ownerSVGElement, t4.styleSheets, "height") || i2[3]);
      return _$1(this.element, n2, e3, r2, a2, s2, t4);
    }
    return t4.pdf.Matrix(1, 0, 0, 1, e3, r2);
  }, e2;
}(K), mt = function(t3, e2) {
  this.width = t3, this.height = e2;
}, gt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.renderCore = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var r2, i2, n2, a2, s2, o2, l2, u2, h2, f2, c2, d2, m2;
      return p(this, function(p2) {
        switch (p2.label) {
          case 0:
            return r2 = parseFloat, (i2 = this.element.getAttribute("href") || this.element.getAttribute("xlink:href")) ? (n2 = i2.substring(1), a2 = t4.refsHandler.get(n2), s2 = B(a2.element, "symbol,svg") && a2.element.hasAttribute("viewBox"), o2 = r2(N$1(this.element, t4.styleSheets, "x") || "0"), l2 = r2(N$1(this.element, t4.styleSheets, "y") || "0"), u2 = void 0, h2 = void 0, s2 ? (u2 = r2(N$1(this.element, t4.styleSheets, "width") || N$1(a2.element, t4.styleSheets, "width") || "0"), h2 = r2(N$1(this.element, t4.styleSheets, "height") || N$1(a2.element, t4.styleSheets, "height") || "0"), o2 += r2(N$1(a2.element, t4.styleSheets, "x") || "0"), l2 += r2(N$1(a2.element, t4.styleSheets, "y") || "0"), c2 = W(a2.element.getAttribute("viewBox")), f2 = _$1(a2.element, c2, o2, l2, u2, h2, t4)) : f2 = t4.pdf.Matrix(1, 0, 0, 1, o2, l2), d2 = new y$1(t4.pdf, { refsHandler: t4.refsHandler, styleSheets: t4.styleSheets, withinUse: true, viewport: s2 ? new mt(u2, h2) : t4.viewport, svg2pdfParameters: t4.svg2pdfParameters, textMeasure: t4.textMeasure }), m2 = t4.attributeState.color, [4, t4.refsHandler.getRendered(n2, m2, function(t5) {
              return e2.renderReferencedNode(t5, n2, m2, d2);
            })]) : [2];
          case 1:
            return p2.sent(), t4.pdf.saveGraphicsState(), t4.pdf.setCurrentTransformationMatrix(t4.transform), s2 && "visible" !== N$1(a2.element, t4.styleSheets, "overflow") && (t4.pdf.rect(o2, l2, u2, h2), t4.pdf.clip().discardPath()), t4.pdf.doFormObject(t4.refsHandler.generateKey(n2, m2), f2), t4.pdf.restoreGraphicsState(), [2];
        }
      });
    });
  }, e2.renderReferencedNode = function(t4, e3, r2, i2) {
    return c$1(this, void 0, void 0, function() {
      var n2;
      return p(this, function(a2) {
        switch (a2.label) {
          case 0:
            return n2 = [(n2 = t4.getBoundingBox(i2))[0] - 0.5 * n2[2], n2[1] - 0.5 * n2[3], 2 * n2[2], 2 * n2[3]], i2.attributeState.color = r2, i2.pdf.beginFormObject(n2[0], n2[1], n2[2], n2[3], i2.pdf.unitMatrix), t4 instanceof dt ? [4, t4.apply(i2)] : [3, 2];
          case 1:
            return a2.sent(), [3, 4];
          case 2:
            return [4, t4.render(i2)];
          case 3:
            a2.sent(), a2.label = 4;
          case 4:
            return i2.pdf.endFormObject(i2.refsHandler.generateKey(e3, r2)), [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return q(this.element, t4);
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2;
}(ht), yt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, false, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getPath = function(t4) {
    var e3 = parseFloat(N$1(this.element, t4.styleSheets, "width") || "0"), r2 = parseFloat(N$1(this.element, t4.styleSheets, "height") || "0");
    if (!isFinite(e3) || e3 <= 0 || !isFinite(r2) || r2 <= 0)
      return null;
    var i2 = N$1(this.element, t4.styleSheets, "rx"), n2 = N$1(this.element, t4.styleSheets, "ry"), a2 = Math.min(parseFloat(i2 || n2 || "0"), 0.5 * e3), s2 = Math.min(parseFloat(n2 || i2 || "0"), 0.5 * r2), o2 = parseFloat(N$1(this.element, t4.styleSheets, "x") || "0"), l2 = parseFloat(N$1(this.element, t4.styleSheets, "y") || "0"), u2 = 4 / 3 * (Math.SQRT2 - 1);
    return 0 === a2 && 0 === s2 ? new T$1().moveTo(o2, l2).lineTo(o2 + e3, l2).lineTo(o2 + e3, l2 + r2).lineTo(o2, l2 + r2).close() : new T$1().moveTo(o2 += a2, l2).lineTo(o2 += e3 - 2 * a2, l2).curveTo(o2 + a2 * u2, l2, o2 + a2, l2 + (s2 - s2 * u2), o2 += a2, l2 += s2).lineTo(o2, l2 += r2 - 2 * s2).curveTo(o2, l2 + s2 * u2, o2 - a2 * u2, l2 + s2, o2 -= a2, l2 += s2).lineTo(o2 += 2 * a2 - e3, l2).curveTo(o2 - a2 * u2, l2, o2 - a2, l2 - s2 * u2, o2 -= a2, l2 -= s2).lineTo(o2, l2 += 2 * s2 - r2).curveTo(o2, l2 - s2 * u2, o2 + a2 * u2, l2 - s2, o2 += a2, l2 -= s2).close();
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2;
}(ft), bt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, false, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getPath = function(t4) {
    var e3 = this.getRx(t4), r2 = this.getRy(t4);
    if (!isFinite(e3) || r2 <= 0 || !isFinite(r2) || r2 <= 0)
      return null;
    var i2 = parseFloat(N$1(this.element, t4.styleSheets, "cx") || "0"), n2 = parseFloat(N$1(this.element, t4.styleSheets, "cy") || "0"), a2 = 4 / 3 * (Math.SQRT2 - 1) * e3, s2 = 4 / 3 * (Math.SQRT2 - 1) * r2;
    return new T$1().moveTo(i2 + e3, n2).curveTo(i2 + e3, n2 - s2, i2 + a2, n2 - r2, i2, n2 - r2).curveTo(i2 - a2, n2 - r2, i2 - e3, n2 - s2, i2 - e3, n2).curveTo(i2 - e3, n2 + s2, i2 - a2, n2 + r2, i2, n2 + r2).curveTo(i2 + a2, n2 + r2, i2 + e3, n2 + s2, i2 + e3, n2);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2;
}(ft), vt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getRx = function(t4) {
    return parseFloat(N$1(this.element, t4.styleSheets, "rx") || "0");
  }, e2.prototype.getRy = function(t4) {
    return parseFloat(N$1(this.element, t4.styleSheets, "ry") || "0");
  }, e2;
}(bt);
function xt(t3) {
  var e2 = "invisible", r2 = t3.stroke && 0 !== t3.strokeWidth, i2 = t3.fill;
  return i2 && r2 ? e2 = "fillThenStroke" : i2 ? e2 = "fill" : r2 && (e2 = "stroke"), e2;
}
function St(t3) {
  return t3.replace(/[\n\r]/g, "");
}
function wt(t3) {
  return t3.replace(/[\t]/g, " ");
}
function kt(t3) {
  return t3.replace(/ +/g, " ");
}
function Mt(t3, e2, r2) {
  switch (N$1(t3, r2.styleSheets, "text-transform")) {
    case "uppercase":
      return e2.toUpperCase();
    case "lowercase":
      return e2.toLowerCase();
    default:
      return e2;
  }
}
var Tt = function() {
  function t3(t4, e2, r2, i2) {
    this.textNode = t4, this.texts = [], this.textNodes = [], this.contexts = [], this.textAnchor = e2, this.originX = r2, this.originY = i2, this.textMeasures = [];
  }
  return t3.prototype.setX = function(t4) {
    this.originX = t4;
  }, t3.prototype.setY = function(t4) {
    this.originY = t4;
  }, t3.prototype.add = function(t4, e2, r2) {
    this.texts.push(e2), this.textNodes.push(t4), this.contexts.push(r2);
  }, t3.prototype.rightTrimText = function() {
    for (var t4 = this.texts.length - 1; t4 >= 0; t4--)
      if ("default" === this.contexts[t4].attributeState.xmlSpace && (this.texts[t4] = this.texts[t4].replace(/\s+$/, "")), this.texts[t4].match(/[^\s]/))
        return false;
    return true;
  }, t3.prototype.measureText = function(t4) {
    for (var e2 = 0; e2 < this.texts.length; e2++)
      this.textMeasures.push({ width: t4.textMeasure.measureTextWidth(this.texts[e2], this.contexts[e2].attributeState), length: this.texts[e2].length });
  }, t3.prototype.put = function(e2, r2) {
    var i2, n2, a2, s2, o2 = [], l2 = [], u2 = [], h2 = this.originX, f2 = this.originY, c2 = h2, p2 = h2;
    for (i2 = 0; i2 < this.textNodes.length; i2++) {
      n2 = this.textNodes[i2], a2 = this.contexts[i2], s2 = this.textMeasures[i2] || { width: e2.textMeasure.measureTextWidth(this.texts[i2], this.contexts[i2].attributeState), length: this.texts[i2].length };
      var d2 = h2, m2 = f2;
      if ("#text" !== n2.nodeName && !o2.includes(n2)) {
        o2.push(n2);
        var g2 = t3.resolveRelativePositionAttribute(n2, "dx");
        null !== g2 && (d2 += R(g2, a2.attributeState.fontSize));
        var y2 = t3.resolveRelativePositionAttribute(n2, "dy");
        null !== y2 && (m2 += R(y2, a2.attributeState.fontSize));
      }
      l2[i2] = d2, u2[i2] = m2, h2 = d2 + s2.width + s2.length * r2, f2 = m2, c2 = Math.min(c2, d2), p2 = Math.max(p2, h2);
    }
    var b2 = 0;
    switch (this.textAnchor) {
      case "start":
        b2 = 0;
        break;
      case "middle":
        b2 = (p2 - c2) / 2;
        break;
      case "end":
        b2 = p2 - c2;
    }
    for (i2 = 0; i2 < this.textNodes.length; i2++)
      if (n2 = this.textNodes[i2], a2 = this.contexts[i2], "#text" === n2.nodeName || "hidden" !== a2.attributeState.visibility) {
        e2.pdf.saveGraphicsState(), st(a2, e2, n2);
        var v2 = a2.attributeState.alignmentBaseline, x2 = xt(a2.attributeState);
        e2.pdf.text(this.texts[i2], l2[i2] - b2, u2[i2], { baseline: V(v2), angle: e2.transform, renderingMode: "fill" === x2 ? void 0 : x2, charSpace: 0 === r2 ? void 0 : r2 }), e2.pdf.restoreGraphicsState();
      }
    return [h2, f2];
  }, t3.resolveRelativePositionAttribute = function(t4, e2) {
    for (var r2, i2 = t4; i2 && B(i2, "tspan"); ) {
      if (i2.hasAttribute(e2))
        return i2.getAttribute(e2);
      if ((null === (r2 = t4.parentElement) || void 0 === r2 ? void 0 : r2.firstChild) !== t4)
        break;
      i2 = i2.parentElement;
    }
    return null;
  }, t3;
}(), Ct = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.processTSpans = function(t4, e3, r2, i2, n2, a2) {
    for (var s2 = r2.pdf.getFontSize(), o2 = r2.attributeState.xmlSpace, l2 = true, u2 = false, h2 = 0; h2 < e3.childNodes.length; h2++) {
      var f2 = e3.childNodes[h2];
      if (f2.textContent) {
        var c2 = f2.textContent;
        if ("#text" === f2.nodeName) {
          var p2 = St(c2);
          p2 = wt(p2), "default" === o2 && (p2 = kt(p2), l2 && p2.match(/^\s/) && (u2 = true), p2.match(/[^\s]/) && (l2 = false), a2.prevText.match(/\s$/) && (p2 = p2.replace(/^\s+/, "")));
          var d2 = Mt(e3, p2, r2);
          n2.add(e3, d2, r2), a2.prevText = c2, a2.prevContext = r2;
        } else if (B(f2, "title"))
          ;
        else if (B(f2, "tspan")) {
          var m2 = f2, g2 = m2.getAttribute("x");
          if (null !== g2) {
            var y2 = R(g2, s2);
            n2 = new Tt(this, N$1(m2, r2.styleSheets, "text-anchor") || r2.attributeState.textAnchor, y2, 0), i2.push({ type: "y", chunk: n2 });
          }
          var b2 = m2.getAttribute("y");
          if (null !== b2) {
            var v2 = R(b2, s2);
            n2 = new Tt(this, N$1(m2, r2.styleSheets, "text-anchor") || r2.attributeState.textAnchor, 0, v2), i2.push({ type: "x", chunk: n2 });
          }
          var x2 = r2.clone();
          at(x2, t4, m2), this.processTSpans(t4, m2, x2, i2, n2, a2);
        }
      }
    }
    return u2;
  }, e2.prototype.renderCore = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2, a2, s2, o2, l2, u2, h2, f2, c2, d2, m2, g2, y2, b2, v2, x2, S2, w2, k2, M2;
      return p(this, function(p2) {
        if (t4.pdf.saveGraphicsState(), e3 = 0, r2 = 0, i2 = 1, n2 = t4.pdf.getFontSize(), a2 = R(this.element.getAttribute("x"), n2), s2 = R(this.element.getAttribute("y"), n2), o2 = R(this.element.getAttribute("dx"), n2), l2 = R(this.element.getAttribute("dy"), n2), u2 = parseFloat(this.element.getAttribute("textLength") || "0"), h2 = t4.attributeState.visibility, 0 === this.element.childElementCount)
          f2 = this.element.textContent || "", c2 = function(t5, e4) {
            return t5 = wt(t5 = St(t5)), "default" === e4.xmlSpace && (t5 = kt(t5 = t5.trim())), t5;
          }(f2, t4.attributeState), d2 = Mt(this.element, c2, t4), e3 = t4.textMeasure.getTextOffset(d2, t4.attributeState), u2 > 0 && (m2 = t4.textMeasure.measureTextWidth(d2, t4.attributeState), "default" === t4.attributeState.xmlSpace && f2.match(/^\s/) && (i2 = 0), r2 = (u2 - m2) / (d2.length - i2) || 0), "visible" === h2 && (g2 = t4.attributeState.alignmentBaseline, y2 = xt(t4.attributeState), t4.pdf.text(d2, a2 + o2 - e3, s2 + l2, { baseline: V(g2), angle: t4.transform, renderingMode: "fill" === y2 ? void 0 : y2, charSpace: 0 === r2 ? void 0 : r2 }));
        else {
          for (b2 = [], v2 = new Tt(this, t4.attributeState.textAnchor, a2 + o2, s2 + l2), b2.push({ type: "", chunk: v2 }), x2 = this.processTSpans(this, this.element, t4, b2, v2, { prevText: " ", prevContext: t4 }), i2 = x2 ? 0 : 1, S2 = true, w2 = b2.length - 1; w2 >= 0; w2--)
            S2 && (S2 = b2[w2].chunk.rightTrimText());
          u2 > 0 && (k2 = 0, M2 = 0, b2.forEach(function(e4) {
            var r3 = e4.chunk;
            r3.measureText(t4), r3.textMeasures.forEach(function(t5) {
              var e5 = t5.width, r4 = t5.length;
              k2 += e5, M2 += r4;
            });
          }), r2 = (u2 - k2) / (M2 - i2)), b2.reduce(function(e4, i3) {
            var n3 = i3.type, a3 = i3.chunk;
            return "x" === n3 ? a3.setX(e4[0]) : "y" === n3 && a3.setY(e4[1]), a3.put(t4, r2);
          }, [0, 0]);
        }
        return t4.pdf.restoreGraphicsState(), [2];
      });
    });
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return q(this.element, t4);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2;
}(ht), Ft = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, true, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2.prototype.getPath = function(t4) {
    var e3, r2, i2 = new o(N$1(this.element, t4.styleSheets, "d") || "").unshort().unarc().abs(), n2 = new T$1();
    return i2.iterate(function(t5) {
      switch (t5[0]) {
        case "M":
          n2.moveTo(t5[1], t5[2]);
          break;
        case "L":
          n2.lineTo(t5[1], t5[2]);
          break;
        case "H":
          n2.lineTo(t5[1], r2);
          break;
        case "V":
          n2.lineTo(e3, t5[1]);
          break;
        case "C":
          n2.curveTo(t5[1], t5[2], t5[3], t5[4], t5[5], t5[6]);
          break;
        case "Q":
          var i3 = x$1([e3, r2], [t5[1], t5[2]]), a2 = x$1([t5[3], t5[4]], [t5[1], t5[2]]);
          n2.curveTo(i3[0], i3[1], a2[0], a2[1], t5[3], t5[4]);
          break;
        case "Z":
          n2.close();
      }
      switch (t5[0]) {
        case "M":
        case "L":
          e3 = t5[1], r2 = t5[2];
          break;
        case "H":
          e3 = t5[1];
          break;
        case "V":
          r2 = t5[1];
          break;
        case "C":
          e3 = t5[5], r2 = t5[6];
          break;
        case "Q":
          e3 = t5[3], r2 = t5[4];
      }
    }), n2;
  }, e2;
}(ft), At = /^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,((?:.|\s)*)$/i, Pt = function(t3) {
  function e2(r2, i2) {
    var n2 = t3.call(this, r2, i2) || this;
    return n2.imageLoadingPromise = null, n2.imageUrl = n2.element.getAttribute("xlink:href") || n2.element.getAttribute("href"), n2.imageUrl && (n2.imageLoadingPromise = e2.fetchImageData(n2.imageUrl)), n2;
  }
  return h$1(e2, t3), e2.prototype.renderCore = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2, n2, a2, s2, o2, l2, u2, h2, f2, c2;
      return p(this, function(p2) {
        switch (p2.label) {
          case 0:
            return this.imageLoadingPromise ? (t4.pdf.setCurrentTransformationMatrix(t4.transform), e3 = parseFloat(N$1(this.element, t4.styleSheets, "width") || "0"), r2 = parseFloat(N$1(this.element, t4.styleSheets, "height") || "0"), i2 = parseFloat(N$1(this.element, t4.styleSheets, "x") || "0"), n2 = parseFloat(N$1(this.element, t4.styleSheets, "y") || "0"), !isFinite(e3) || e3 <= 0 || !isFinite(r2) || r2 <= 0 ? [2] : [4, this.imageLoadingPromise]) : [2];
          case 1:
            return a2 = p2.sent(), s2 = a2.data, 0 !== (o2 = a2.format).indexOf("svg") ? [3, 3] : (l2 = new DOMParser(), u2 = l2.parseFromString(s2, "image/svg+xml").firstElementChild, (!(h2 = this.element.getAttribute("preserveAspectRatio")) || h2.indexOf("defer") < 0 || !u2.getAttribute("preserveAspectRatio")) && u2.setAttribute("preserveAspectRatio", h2 || ""), u2.setAttribute("x", String(i2)), u2.setAttribute("y", String(n2)), u2.setAttribute("width", String(e3)), u2.setAttribute("height", String(r2)), [4, Wt(u2, f2 = {}).render(new y$1(t4.pdf, { refsHandler: new b$1(f2), styleSheets: t4.styleSheets, viewport: new mt(e3, r2), svg2pdfParameters: t4.svg2pdfParameters, textMeasure: t4.textMeasure }))]);
          case 2:
            return p2.sent(), [2];
          case 3:
            c2 = "data:image/" + o2 + ";base64," + btoa(s2);
            try {
              t4.pdf.addImage(c2, "", i2, n2, e3, r2);
            } catch (t5) {
              "object" == typeof console && console.warn && console.warn("Could not load image " + this.imageUrl + ". \n" + t5);
            }
            p2.label = 4;
          case 4:
            return [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return q(this.element, t4);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2.fetchImageData = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var r2, i2, n2, a2, s2;
      return p(this, function(o2) {
        switch (o2.label) {
          case 0:
            if (!(n2 = t4.match(At)))
              return [3, 1];
            if (a2 = n2[2], "image" !== (s2 = a2.split("/"))[0])
              throw new Error("Unsupported image URL: " + t4);
            return i2 = s2[1], r2 = n2[5], "base64" === n2[4] ? (r2 = r2.replace(/\s/g, ""), r2 = atob(r2)) : r2 = decodeURIComponent(r2), [3, 3];
          case 1:
            return [4, e2.fetchImage(t4)];
          case 2:
            r2 = o2.sent(), i2 = t4.substring(t4.lastIndexOf(".") + 1), o2.label = 3;
          case 3:
            return [2, { data: r2, format: i2 }];
        }
      });
    });
  }, e2.fetchImage = function(t4) {
    return new Promise(function(e3, r2) {
      var i2 = new XMLHttpRequest();
      i2.open("GET", t4, true), i2.responseType = "arraybuffer", i2.onload = function() {
        if (200 !== i2.status)
          throw new Error("Error " + i2.status + ": Failed to load image '" + t4 + "'");
        for (var r3 = new Uint8Array(i2.response), n2 = "", a2 = 0; a2 < r3.length; a2++)
          n2 += String.fromCharCode(r3[a2]);
        e3(n2);
      }, i2.onerror = r2, i2.onabort = r2, i2.send(null);
    });
  }, e2.getMimeType = function(t4) {
    switch (t4 = t4.toLowerCase()) {
      case "jpg":
      case "jpeg":
        return "image/jpeg";
      default:
        return "image/" + t4;
    }
  }, e2;
}(ht), Bt = function(t3) {
  function e2(e3, r2, i2) {
    var n2 = t3.call(this, true, r2, i2) || this;
    return n2.closed = e3, n2;
  }
  return h$1(e2, t3), e2.prototype.getPath = function(t4) {
    if (!this.element.hasAttribute("points") || "" === this.element.getAttribute("points"))
      return null;
    var r2 = e2.parsePointsString(this.element.getAttribute("points")), i2 = new T$1();
    if (r2.length < 1)
      return i2;
    i2.moveTo(r2[0][0], r2[0][1]);
    for (var n2 = 1; n2 < r2.length; n2++)
      i2.lineTo(r2[n2][0], r2[n2][1]);
    return this.closed && i2.close(), i2;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.parsePointsString = function(t4) {
    for (var e3 = W(t4), r2 = [], i2 = 0; i2 < e3.length - 1; i2 += 2) {
      var n2 = e3[i2], a2 = e3[i2 + 1];
      r2.push([n2, a2]);
    }
    return r2;
  }, e2;
}(ft), Nt = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, true, e3, r2) || this;
  }
  return h$1(e2, t3), e2;
}(Bt), Ot = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.render = function(t4) {
    return Promise.resolve();
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return [0, 0, 0, 0];
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2.prototype.isVisible = function(t4, e3) {
    return O(this, t4, e3);
  }, e2;
}(Q), Lt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.apply = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, n2, a2, s2;
      return p(this, function(o2) {
        switch (o2.label) {
          case 0:
            e3 = this.computeNodeTransform(t4), r2 = this.getBoundingBox(t4), t4.pdf.beginFormObject(r2[0], r2[1], r2[2], r2[3], e3), function(t5) {
              var e4 = t5.attributeState, r3 = t5.pdf, n3 = 1, a3 = 1;
              n3 *= e4.fillOpacity, n3 *= e4.opacity, e4.fill instanceof m$1 && void 0 !== e4.fill.color.a && (n3 *= e4.fill.color.a), a3 *= e4.strokeOpacity, a3 *= e4.opacity, e4.stroke instanceof m$1 && void 0 !== e4.stroke.color.a && (a3 *= e4.stroke.color.a);
              var s3, o3 = {};
              if (o3.opacity = n3, o3["stroke-opacity"] = a3, r3.setGState(new j$2(o3)), e4.fill && e4.fill instanceof m$1 && e4.fill.color.ok ? r3.setFillColor(e4.fill.color.r, e4.fill.color.g, e4.fill.color.b) : r3.setFillColor(0, 0, 0), r3.setLineWidth(e4.strokeWidth), e4.stroke instanceof m$1 ? r3.setDrawColor(e4.stroke.color.r, e4.stroke.color.g, e4.stroke.color.b) : r3.setDrawColor(0, 0, 0), r3.setLineCap(e4.strokeLinecap), r3.setLineJoin(e4.strokeLinejoin), e4.strokeDasharray ? r3.setLineDashPattern(e4.strokeDasharray, e4.strokeDashoffset) : r3.setLineDashPattern([], 0), r3.setLineMiterLimit(e4.strokeMiterlimit), s3 = G.hasOwnProperty(e4.fontFamily) ? G[e4.fontFamily] : e4.fontFamily, e4.fill && e4.fill instanceof m$1 && e4.fill.color.ok) {
                var l2 = e4.fill.color;
                r3.setTextColor(l2.r, l2.g, l2.b);
              } else
                r3.setTextColor(0, 0, 0);
              var u2 = "";
              "bold" === e4.fontWeight && (u2 = "bold"), "italic" === e4.fontStyle && (u2 += "italic"), "" === u2 && (u2 = "normal"), void 0 !== s3 || void 0 !== u2 ? (void 0 === s3 && (s3 = G.hasOwnProperty(e4.fontFamily) ? G[e4.fontFamily] : e4.fontFamily), r3.setFont(s3, u2)) : r3.setFont("helvetica", u2), r3.setFontSize(e4.fontSize * r3.internal.scaleFactor);
            }(n2 = new y$1(t4.pdf, { refsHandler: t4.refsHandler, styleSheets: t4.styleSheets, viewport: t4.viewport, svg2pdfParameters: t4.svg2pdfParameters, textMeasure: t4.textMeasure })), a2 = 0, s2 = this.children, o2.label = 1;
          case 1:
            return a2 < s2.length ? [4, s2[a2].render(n2)] : [3, 4];
          case 2:
            o2.sent(), o2.label = 3;
          case 3:
            return a2++, [3, 1];
          case 4:
            return t4.pdf.endFormObject(this.element.getAttribute("id")), [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    var e3, r2 = this.element.getAttribute("viewBox");
    return r2 && (e3 = W(r2)), [e3 && e3[0] || 0, e3 && e3[1] || 0, e3 && e3[2] || parseFloat(this.element.getAttribute("markerWidth") || "3"), e3 && e3[3] || parseFloat(this.element.getAttribute("markerHeight") || "3")];
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    var e3, r2 = parseFloat(this.element.getAttribute("refX") || "0"), i2 = parseFloat(this.element.getAttribute("refY") || "0"), n2 = this.element.getAttribute("viewBox");
    if (n2) {
      var a2 = W(n2);
      e3 = _$1(this.element, a2, 0, 0, parseFloat(this.element.getAttribute("markerWidth") || "3"), parseFloat(this.element.getAttribute("markerHeight") || "3"), t4, true), e3 = t4.pdf.matrixMult(t4.pdf.Matrix(1, 0, 0, 1, -r2, -i2), e3);
    } else
      e3 = t4.pdf.Matrix(1, 0, 0, 1, -r2, -i2);
    return e3;
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2;
}(K), Et = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, e3, r2) || this;
  }
  return h$1(e2, t3), e2.prototype.getR = function(t4) {
    var e3;
    return null !== (e3 = this.r) && void 0 !== e3 ? e3 : this.r = parseFloat(N$1(this.element, t4.styleSheets, "r") || "0");
  }, e2.prototype.getRx = function(t4) {
    return this.getR(t4);
  }, e2.prototype.getRy = function(t4) {
    return this.getR(t4);
  }, e2;
}(bt), It = function(t3) {
  function e2(e3, r2) {
    return t3.call(this, false, e3, r2) || this;
  }
  return h$1(e2, t3), e2;
}(Bt), Dt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.renderCore = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2;
      return p(this, function(i2) {
        switch (i2.label) {
          case 0:
            e3 = 0, r2 = this.children, i2.label = 1;
          case 1:
            return e3 < r2.length ? [4, r2[e3].render(t4)] : [3, 4];
          case 2:
            i2.sent(), i2.label = 3;
          case 3:
            return e3++, [3, 1];
          case 4:
            return [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return X(t4, this);
  }, e2;
}(ut), Ht = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2.prototype.render = function(e3) {
    return c$1(this, void 0, void 0, function() {
      var r2, i2, n2, a2, s2;
      return p(this, function(o2) {
        switch (o2.label) {
          case 0:
            return this.isVisible("hidden" !== e3.attributeState.visibility, e3) ? (r2 = this.getX(e3), i2 = this.getY(e3), n2 = this.getWidth(e3), a2 = this.getHeight(e3), e3.pdf.saveGraphicsState(), s2 = e3.transform, this.element.hasAttribute("transform") && (s2 = e3.pdf.matrixMult($$2(this.element.getAttribute("transform"), e3), s2)), e3.pdf.setCurrentTransformationMatrix(s2), e3.withinUse || "visible" === N$1(this.element, e3.styleSheets, "overflow") || e3.pdf.rect(r2, i2, n2, a2).clip().discardPath(), [4, t3.prototype.render.call(this, e3.clone({ transform: e3.pdf.unitMatrix, viewport: e3.withinUse ? e3.viewport : new mt(n2, a2) }))]) : [2];
          case 1:
            return o2.sent(), e3.pdf.restoreGraphicsState(), [2];
        }
      });
    });
  }, e2.prototype.computeNodeTransform = function(t4) {
    return this.computeNodeTransformCore(t4);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    if (t4.withinUse)
      return t4.pdf.unitMatrix;
    var e3, r2 = this.getX(t4), i2 = this.getY(t4), n2 = this.getViewBox();
    if (n2) {
      var a2 = this.getWidth(t4), s2 = this.getHeight(t4);
      e3 = _$1(this.element, n2, r2, i2, a2, s2, t4);
    } else
      e3 = t4.pdf.Matrix(1, 0, 0, 1, r2, i2);
    return e3;
  }, e2.prototype.getWidth = function(t4) {
    if (void 0 !== this.width)
      return this.width;
    var e3, r2, i2 = t4.svg2pdfParameters;
    if (this.isOutermostSvg(t4))
      if (null != i2.width)
        e3 = i2.width;
      else if (r2 = N$1(this.element, t4.styleSheets, "width"))
        e3 = parseFloat(r2);
      else {
        var n2 = this.getViewBox();
        if (n2 && (null != i2.height || N$1(this.element, t4.styleSheets, "height"))) {
          var a2 = n2[2] / n2[3];
          e3 = this.getHeight(t4) * a2;
        } else
          e3 = Math.min(300, t4.viewport.width, 2 * t4.viewport.height);
      }
    else
      e3 = (r2 = N$1(this.element, t4.styleSheets, "width")) ? parseFloat(r2) : t4.viewport.width;
    return this.width = e3;
  }, e2.prototype.getHeight = function(t4) {
    if (void 0 !== this.height)
      return this.height;
    var e3, r2, i2 = t4.svg2pdfParameters;
    if (this.isOutermostSvg(t4))
      if (null != i2.height)
        e3 = i2.height;
      else if (r2 = N$1(this.element, t4.styleSheets, "height"))
        e3 = parseFloat(r2);
      else {
        var n2 = this.getViewBox();
        if (n2) {
          var a2 = n2[2] / n2[3];
          e3 = this.getWidth(t4) / a2;
        } else
          e3 = Math.min(150, t4.viewport.width / 2, t4.viewport.height);
      }
    else
      e3 = (r2 = N$1(this.element, t4.styleSheets, "height")) ? parseFloat(r2) : t4.viewport.height;
    return this.height = e3;
  }, e2.prototype.getX = function(t4) {
    if (void 0 !== this.x)
      return this.x;
    if (this.isOutermostSvg(t4))
      return this.x = 0;
    var e3 = N$1(this.element, t4.styleSheets, "x");
    return this.x = e3 ? parseFloat(e3) : 0;
  }, e2.prototype.getY = function(t4) {
    if (void 0 !== this.y)
      return this.y;
    if (this.isOutermostSvg(t4))
      return this.y = 0;
    var e3 = N$1(this.element, t4.styleSheets, "y");
    return this.y = e3 ? parseFloat(e3) : 0;
  }, e2.prototype.getViewBox = function() {
    if (void 0 !== this.viewBox)
      return this.viewBox;
    var t4 = this.element.getAttribute("viewBox");
    return this.viewBox = t4 ? W(t4) : void 0;
  }, e2.prototype.isOutermostSvg = function(t4) {
    return t4.svg2pdfParameters.element === this.element;
  }, e2;
}(Dt), Rt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2.prototype.computeNodeTransformCore = function(t4) {
    return t4.pdf.unitMatrix;
  }, e2;
}(Dt), Vt = function(t3) {
  function e2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$1(e2, t3), e2.prototype.apply = function(t4) {
    return c$1(this, void 0, void 0, function() {
      var e3, r2, i2;
      return p(this, function(n2) {
        switch (n2.label) {
          case 0:
            if (!this.isVisible(true, t4))
              return [2];
            e3 = t4.pdf.matrixMult(this.computeNodeTransform(t4), t4.transform), t4.pdf.setCurrentTransformationMatrix(e3), r2 = 0, i2 = this.children, n2.label = 1;
          case 1:
            return r2 < i2.length ? [4, i2[r2].render(new y$1(t4.pdf, { refsHandler: t4.refsHandler, styleSheets: t4.styleSheets, viewport: t4.viewport, withinClipPath: true, svg2pdfParameters: t4.svg2pdfParameters, textMeasure: t4.textMeasure }))] : [3, 4];
          case 2:
            n2.sent(), n2.label = 3;
          case 3:
            return r2++, [3, 1];
          case 4:
            return t4.pdf.clip().discardPath(), t4.pdf.setCurrentTransformationMatrix(e3.inversed()), [2];
        }
      });
    });
  }, e2.prototype.getBoundingBoxCore = function(t4) {
    return X(t4, this);
  }, e2.prototype.isVisible = function(t4, e3) {
    return L(this, t4, e3);
  }, e2;
}(K);
function Wt(e2, r2) {
  var i2, n2 = [];
  switch (function(t3, e3) {
    for (var r3 = [], i3 = 0; i3 < t3.childNodes.length; i3++) {
      var n3 = t3.childNodes[i3];
      "#" !== n3.nodeName.charAt(0) && r3.push(n3);
    }
    for (i3 = 0; i3 < r3.length; i3++)
      e3(i3, r3[i3]);
  }(e2, function(t3, e3) {
    return n2.push(Wt(e3, r2));
  }), e2.tagName.toLowerCase()) {
    case "a":
    case "g":
      i2 = new Rt(e2, n2);
      break;
    case "circle":
      i2 = new Et(e2, n2);
      break;
    case "clippath":
      i2 = new Vt(e2, n2);
      break;
    case "ellipse":
      i2 = new vt(e2, n2);
      break;
    case "lineargradient":
      i2 = new Z(e2, n2);
      break;
    case "image":
      i2 = new Pt(e2, n2);
      break;
    case "line":
      i2 = new pt(e2, n2);
      break;
    case "marker":
      i2 = new Lt(e2, n2);
      break;
    case "path":
      i2 = new Ft(e2, n2);
      break;
    case "pattern":
      i2 = new rt(e2, n2);
      break;
    case "polygon":
      i2 = new Nt(e2, n2);
      break;
    case "polyline":
      i2 = new It(e2, n2);
      break;
    case "radialgradient":
      i2 = new tt(e2, n2);
      break;
    case "rect":
      i2 = new yt(e2, n2);
      break;
    case "svg":
      i2 = new Ht(e2, n2);
      break;
    case "symbol":
      i2 = new dt(e2, n2);
      break;
    case "text":
      i2 = new Ct(e2, n2);
      break;
    case "use":
      i2 = new gt(e2, n2);
      break;
    default:
      i2 = new Ot(e2, n2);
  }
  if (null != r2 && i2.element.hasAttribute("id")) {
    var a2 = t$1(i2.element.id, { isIdentifier: true });
    r2[a2] = r2[a2] || i2;
  }
  return i2.children.forEach(function(t3) {
    return t3.setParent(i2);
  }), i2;
}
var jt = function() {
  function t3(t4, e2) {
    this.rootSvg = t4, this.loadExternalSheets = e2, this.styleSheets = [];
  }
  return t3.prototype.load = function() {
    return c$1(this, void 0, void 0, function() {
      var t4;
      return p(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, this.collectStyleSheetTexts()];
          case 1:
            return t4 = e2.sent(), this.parseCssSheets(t4), [2];
        }
      });
    });
  }, t3.prototype.collectStyleSheetTexts = function() {
    return c$1(this, void 0, void 0, function() {
      var e2, r2, i2, n2, a2;
      return p(this, function(s2) {
        switch (s2.label) {
          case 0:
            if (e2 = [], this.loadExternalSheets && this.rootSvg.ownerDocument)
              for (n2 = 0; n2 < this.rootSvg.ownerDocument.childNodes.length; n2++)
                "xml-stylesheet" === (r2 = this.rootSvg.ownerDocument.childNodes[n2]).nodeName && "string" == typeof r2.data && e2.push(t3.loadSheet(r2.data.match(/href=["'].*?["']/)[0].split("=")[1].slice(1, -1)));
            for (i2 = this.rootSvg.querySelectorAll("style,link"), n2 = 0; n2 < i2.length; n2++)
              B(a2 = i2[n2], "style") ? e2.push(a2.textContent) : this.loadExternalSheets && B(a2, "link") && "stylesheet" === a2.getAttribute("rel") && a2.hasAttribute("href") && e2.push(t3.loadSheet(a2.getAttribute("href")));
            return [4, Promise.all(e2)];
          case 1:
            return [2, s2.sent().filter(function(t4) {
              return null !== t4;
            })];
        }
      });
    });
  }, t3.prototype.parseCssSheets = function(e2) {
    for (var r2 = document.implementation.createHTMLDocument(""), i2 = 0, n2 = e2; i2 < n2.length; i2++) {
      var a2 = n2[i2], s2 = r2.createElement("style");
      s2.textContent = a2, r2.body.appendChild(s2);
      var o2 = s2.sheet;
      if (o2 instanceof CSSStyleSheet) {
        for (var l2 = o2.cssRules.length - 1; l2 >= 0; l2--) {
          var u2 = o2.cssRules[l2];
          if (u2 instanceof CSSStyleRule) {
            var h2 = u2;
            if (h2.selectorText.indexOf(",") >= 0) {
              o2.deleteRule(l2);
              for (var f2 = h2.cssText.substring(h2.selectorText.length), c2 = t3.splitSelectorAtCommas(h2.selectorText), p2 = 0; p2 < c2.length; p2++)
                o2.insertRule(c2[p2] + f2, l2 + p2);
            }
          } else
            o2.deleteRule(l2);
        }
        this.styleSheets.push(o2);
      }
    }
  }, t3.splitSelectorAtCommas = function(t4) {
    for (var e2, r2 = /,|["']/g, i2 = /[^\\]["]/g, n2 = /[^\\][']/g, a2 = [], s2 = "initial", o2 = -1, l2 = i2, u2 = 0; u2 < t4.length; )
      switch (s2) {
        case "initial":
          r2.lastIndex = u2, (e2 = r2.exec(t4)) ? ("," === e2[0] ? (a2.push(t4.substring(o2 + 1, r2.lastIndex - 1).trim()), o2 = r2.lastIndex - 1) : (s2 = "withinQuotes", l2 = '"' === e2[0] ? i2 : n2), u2 = r2.lastIndex) : (a2.push(t4.substring(o2 + 1).trim()), u2 = t4.length);
          break;
        case "withinQuotes":
          l2.lastIndex = u2, (e2 = l2.exec(t4)) && (u2 = l2.lastIndex, s2 = "initial");
      }
    return a2;
  }, t3.loadSheet = function(t4) {
    return new Promise(function(e2, r2) {
      var i2 = new XMLHttpRequest();
      i2.open("GET", t4, true), i2.responseType = "text", i2.onload = function() {
        200 !== i2.status && r2(new Error("Error " + i2.status + ": Failed to load '" + t4 + "'")), e2(i2.responseText);
      }, i2.onerror = r2, i2.onabort = r2, i2.send(null);
    }).catch(function() {
      return null;
    });
  }, t3.prototype.getPropertyValue = function(t4, e2) {
    for (var r2 = [], i2 = 0, n2 = this.styleSheets; i2 < n2.length; i2++)
      for (var a2 = n2[i2], s2 = 0; s2 < a2.cssRules.length; s2++) {
        var o2 = a2.cssRules[s2];
        o2.style.getPropertyValue(e2) && t4.matches(o2.selectorText) && r2.push(o2);
      }
    if (0 !== r2.length) {
      return r2.reduce(function(t5, r3) {
        return 1 === (n3 = r3, (a3 = (i3 = t5).style.getPropertyPriority(e2)) !== n3.style.getPropertyPriority(e2) ? "important" === a3 ? 1 : -1 : compare(i3.selectorText, n3.selectorText)) ? t5 : r3;
        var i3, n3, a3;
      }).style.getPropertyValue(e2) || void 0;
    }
  }, t3;
}(), Gt = function() {
  function t3() {
    this.measureMethods = {};
  }
  return t3.prototype.getTextOffset = function(t4, e2) {
    var r2 = e2.textAnchor;
    if ("start" === r2)
      return 0;
    var i2 = this.measureTextWidth(t4, e2), n2 = 0;
    switch (r2) {
      case "end":
        n2 = i2;
        break;
      case "middle":
        n2 = i2 / 2;
    }
    return n2;
  }, t3.prototype.measureTextWidth = function(t4, e2) {
    if (0 === t4.length)
      return 0;
    var r2 = e2.fontFamily;
    return this.getMeasureFunction(r2).call(this, t4, e2.fontFamily, e2.fontSize + "px", e2.fontStyle, e2.fontWeight);
  }, t3.prototype.getMeasurementTextNode = function() {
    if (!this.textMeasuringTextElement) {
      this.textMeasuringTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");
      var t4 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      t4.appendChild(this.textMeasuringTextElement), t4.style.setProperty("position", "absolute"), t4.style.setProperty("visibility", "hidden"), document.body.appendChild(t4);
    }
    return this.textMeasuringTextElement;
  }, t3.prototype.canvasTextMeasure = function(t4, e2, r2, i2, n2) {
    var a2 = document.createElement("canvas").getContext("2d");
    return null != a2 ? (a2.font = [i2, n2, r2, e2].join(" "), a2.measureText(t4).width) : 0;
  }, t3.prototype.svgTextMeasure = function(t4, e2, r2, i2, n2, a2) {
    void 0 === a2 && (a2 = this.getMeasurementTextNode());
    var s2 = a2;
    return s2.setAttribute("font-family", e2), s2.setAttribute("font-size", r2), s2.setAttribute("font-style", i2), s2.setAttribute("font-weight", n2), s2.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve"), s2.textContent = t4, s2.getBBox().width;
  }, t3.prototype.getMeasureFunction = function(e2) {
    var r2 = this.measureMethods[e2];
    if (!r2) {
      var i2 = this.canvasTextMeasure(t3.testString, e2, "16px", "normal", "normal"), n2 = this.svgTextMeasure(t3.testString, e2, "16px", "normal", "normal");
      r2 = Math.abs(i2 - n2) < t3.epsilon ? this.canvasTextMeasure : this.svgTextMeasure, this.measureMethods[e2] = r2;
    }
    return r2;
  }, t3.prototype.cleanupTextMeasuring = function() {
    if (this.textMeasuringTextElement) {
      var t4 = this.textMeasuringTextElement.parentNode;
      t4 && document.body.removeChild(t4), this.textMeasuringTextElement = void 0;
    }
  }, t3.testString = `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789!"$%&/()=?'\\+*-_.:,;^}][{#~|<>`, t3.epsilon = 0.1, t3;
}();
function Ut(t3, e2, r2) {
  var i2, n2, a2;
  return void 0 === r2 && (r2 = {}), c$1(this, void 0, void 0, function() {
    var s2, o2, l2, u2, h2, c2, d2, m2, g2, v2, x2;
    return p(this, function(p2) {
      switch (p2.label) {
        case 0:
          return s2 = null !== (i2 = r2.x) && void 0 !== i2 ? i2 : 0, o2 = null !== (n2 = r2.y) && void 0 !== n2 ? n2 : 0, l2 = null !== (a2 = r2.loadExternalStyleSheets) && void 0 !== a2 && a2, h2 = new b$1(u2 = {}), [4, (c2 = new jt(t3, l2)).load()];
        case 1:
          return p2.sent(), d2 = new mt(e2.internal.pageSize.getWidth(), e2.internal.pageSize.getHeight()), m2 = f$1(f$1({}, r2), { element: t3 }), g2 = new Gt(), v2 = new y$1(e2, { refsHandler: h2, styleSheets: c2, viewport: d2, svg2pdfParameters: m2, textMeasure: g2 }), e2.advancedAPI(), e2.saveGraphicsState(), e2.setCurrentTransformationMatrix(e2.Matrix(1, 0, 0, 1, s2, o2)), e2.setLineWidth(v2.attributeState.strokeWidth), x2 = v2.attributeState.fill.color, e2.setFillColor(x2.r, x2.g, x2.b), e2.setFont(v2.attributeState.fontFamily), e2.setFontSize(v2.attributeState.fontSize * e2.internal.scaleFactor), [4, Wt(t3, u2).render(v2)];
        case 2:
          return p2.sent(), e2.restoreGraphicsState(), e2.compatAPI(), v2.textMeasure.cleanupTextMeasuring(), [2, e2];
      }
    });
  });
}
E$1.API.svg = function(t3, e2) {
  return void 0 === e2 && (e2 = {}), Ut(t3, this, e2);
};
function create_fragment$l(ctx) {
  let dropdownlinks;
  let current;
  dropdownlinks = new DropDownLinks({
    props: {
      name: "File",
      menuItems: (
        /*menuItems*/
        ctx[1]
      ),
      minimal: !/*full*/
      ctx[0]
    }
  });
  return {
    c() {
      create_component(dropdownlinks.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdownlinks, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdownlinks_changes = {};
      if (dirty & /*menuItems*/
      2)
        dropdownlinks_changes.menuItems = /*menuItems*/
        ctx2[1];
      if (dirty & /*full*/
      1)
        dropdownlinks_changes.minimal = !/*full*/
        ctx2[0];
      dropdownlinks.$set(dropdownlinks_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdownlinks.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdownlinks.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdownlinks, detaching);
    }
  };
}
function mergeExistingProperties(target, source) {
  for (let key in source) {
    if (source.hasOwnProperty(key) && source[key] !== void 0) {
      target[key] = source[key];
    }
  }
}
function loadData() {
  document.getElementById("dataUpload-fileInput").click();
}
function getDate() {
  const now2 = /* @__PURE__ */ new Date();
  const formattedDate = `${now2.getFullYear()}-${String(now2.getMonth() + 1).padStart(2, "0")}-${String(now2.getDate()).padStart(2, "0")}_${String(now2.getHours()).padStart(2, "0")}-${String(now2.getMinutes()).padStart(2, "0")}-${String(now2.getSeconds()).padStart(2, "0")}`;
  return formattedDate;
}
async function downloadModelData() {
  Shiny.setInputValue("down-requestData", Math.random());
}
function instance$y($$self, $$props, $$invalidate) {
  let $appState;
  let $dataInfo;
  let $fitCache;
  let $modelOptions;
  let $gridViewOptions;
  component_subscribe($$self, appState, ($$value) => $$invalidate(2, $appState = $$value));
  component_subscribe($$self, dataInfo, ($$value) => $$invalidate(3, $dataInfo = $$value));
  component_subscribe($$self, fitCache, ($$value) => $$invalidate(4, $fitCache = $$value));
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(5, $modelOptions = $$value));
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(6, $gridViewOptions = $$value));
  let { full = true } = $$props;
  cytoscape$2.use(svg);
  function newModel() {
    if (!$appState.modelEmpty) {
      bootbox.confirm("Are you sure you want to create a new model? This will delete the current model.", function(result) {
        if (result) {
          reset2();
        }
      });
    } else {
      reset2();
    }
  }
  function reset2() {
    let cy2 = get_store_value(cyStore);
    cy2.elements().remove();
    resetCounters();
    set_store_value(appState, $appState.parsedModel = false, $appState);
    set_store_value(modelOptions, $modelOptions.fix_first = true, $modelOptions);
    set_store_value(modelOptions, $modelOptions.mode = "user model", $modelOptions);
    Shiny.setInputValue("show_help", Math.random());
    for (let key in $fitCache) {
      set_store_value(fitCache, $fitCache[key] = null, $fitCache);
    }
  }
  function startDownload(object3, fileEnding) {
    FileSaver_minExports.saveAs(object3, "model." + fileEnding);
  }
  function parseModel(content) {
    reset2();
    let combinedData = JSON.parse(content);
    let cy2 = get_store_value(cyStore);
    let json3;
    json3 = JSON.parse(combinedData.model);
    const modelOpt = JSON.parse(combinedData.modelOpt);
    const gridViewOpt = JSON.parse(combinedData.gridViewOpt);
    mergeExistingProperties($modelOptions, modelOpt);
    mergeExistingProperties($gridViewOptions, gridViewOpt);
    if (combinedData.fitCache != void 0) {
      const localCache = JSON.parse(combinedData.fitCache);
      set_store_value(fitCache, $fitCache = localCache, $fitCache);
    }
    set_store_value(appState, $appState.loadingMode = true, $appState);
    cy2.json({ elements: json3 });
    cy2.style(graphStyles);
    cy2.edgeEditing(edgeBendingSettings);
    cy2.style().update();
    cy2.minZoom(graphSettings.minZoom);
    cy2.maxZoom(graphSettings.maxZoom);
    cy2.autolock(graphSettings.autolock);
    cy2.autoungrabify(graphSettings.autoungrabify);
    cy2.nodeEditing({
      resizeToContentCueImage: "",
      undoable: true
    });
    cy2.nodes().forEach((node) => {
      console.log(node.data("width"));
      node.style({ width: node.data("width") });
      node.style({ height: node.data("height") });
    });
    if ($appState.dataAvail) {
      applyLinkedClass($appState.columnNames);
    }
    if ($modelOptions.mode !== "user model") {
      set_store_value(gridViewOptions, $gridViewOptions.showLav = true, $gridViewOptions);
    } else {
      set_store_value(gridViewOptions, $gridViewOptions.showLav = false, $gridViewOptions);
    }
    cy2.nodes().forEach((node) => {
      checkNodeLoop(node.id());
    });
    set_store_value(appState, $appState.loadingMode = false, $appState);
  }
  async function uploadModel() {
    const input = document.createElement("input");
    input.setAttribute("type", "file");
    input.setAttribute("accept", ".lvm");
    const file = await new Promise((resolve3) => {
      input.addEventListener("change", (e2) => resolve3(e2.target.files[0]));
      input.click();
    });
    const fileContent = await new Promise((resolve3) => {
      const reader = new FileReader();
      reader.readAsText(file, "UTF-8");
      reader.onload = () => resolve3(reader.result);
    });
    parseModel(fileContent);
  }
  function loadModel() {
    if (!$appState.modelEmpty) {
      bootbox.confirm("Are you sure you want to load a model? This will delete the current model.", function(result) {
        if (result) {
          uploadModel();
        }
      });
    } else {
      uploadModel();
    }
  }
  function loadModelData() {
    if (!$appState.modelEmpty) {
      bootbox.confirm("Are you sure you want to load a model? This will delete the current model.", function(result) {
        if (result) {
          uploadModelData();
        }
      });
    } else {
      uploadModelData();
    }
  }
  function uploadModelData() {
    const input = document.createElement("input");
    input.setAttribute("type", "file");
    input.setAttribute("accept", ".lvd");
    input.addEventListener("change", function(e2) {
      const file = e2.target.files[0];
      const reader = new FileReader();
      reader.readAsArrayBuffer(file);
      reader.onload = function() {
        const arrayBuffer = reader.result;
        JSZip.loadAsync(arrayBuffer).then(function(zip) {
          zip.file("data.csv").async("base64").then(function(dataCsvContent) {
            Shiny.setInputValue("dataUpload-fileInput", { content: dataCsvContent });
            const checkDataAvailability = setInterval(
              () => {
                if ($appState.dataAvail) {
                  clearInterval(checkDataAvailability);
                  zip.file("model.lvm").async("text").then(function(modelJsonContent) {
                    parseModel(modelJsonContent);
                  });
                }
              },
              100
            );
          });
        });
      };
    });
    input.click();
  }
  function jsonModel() {
    const cy2 = get_store_value(cyStore);
    cytoscape$2();
    cy2.nodes().forEach((node) => {
      node.data("width", node.width());
      node.data("height", node.height());
    });
    let json3 = cy2.json().elements;
    json3.nodes.forEach((node) => {
      node.classes = node.classes.split(" ").filter((c2) => c2 !== LINKED).join(" ");
    });
    const model = JSON.stringify(json3);
    const modelOpt = JSON.stringify($modelOptions);
    const gridViewOpt = JSON.stringify($modelOptions);
    const fitCacheLocal = JSON.stringify($fitCache);
    const combinedData = JSON.stringify({
      model,
      modelOpt,
      gridViewOpt,
      fitCache: fitCacheLocal
    });
    return combinedData;
  }
  function downloadModel() {
    const model = jsonModel();
    let blob = new Blob([model], { type: "application/json;charset=utf-8" });
    FileSaver_minExports.saveAs(blob, "model_" + getDate() + ".lvm");
  }
  Shiny.addCustomMessageHandler("dataForDownload", function(data4) {
    (async () => {
      const model = jsonModel();
      const zip = new JSZip();
      zip.file("model.lvm", model);
      zip.file("data.csv", data4);
      const content = await zip.generateAsync({ type: "blob" });
      const file = new File([content], "model_" + getDate() + ".lvd", { type: "application/zip" });
      FileSaver_minExports.saveAs(file);
    })();
  });
  function removeData2() {
    const cy2 = get_store_value(cyStore);
    set_store_value(appState, $appState.dataAvail = false, $appState);
    set_store_value(appState, $appState.columnNames = null, $appState);
    set_store_value(appState, $appState.loadedFileName = null, $appState);
    set_store_value(appState, $appState.ids = null, $appState);
    set_store_value(dataInfo, $dataInfo = null, $dataInfo);
    cy2.nodes().unlink();
    Shiny.setInputValue("dataUpload-deleteData", Math.random());
  }
  function exportPNG() {
    const cy2 = get_store_value(cyStore);
    startDownload(cy2.png({ bg: "white" }), "png");
  }
  function exportJPG() {
    const cy2 = get_store_value(cyStore);
    startDownload(cy2.jpg(), "jpg");
  }
  function getSVG() {
    const cy2 = get_store_value(cyStore);
    const svgContent = cy2.svg({ scale: 1, full: true });
    return svgContent;
  }
  function exportSVG() {
    const svgContent = getSVG();
    const blob = new Blob([svgContent], { type: "image/svg+xml;charset=utf-8" });
    startDownload(blob, "svg");
  }
  async function exportPDF() {
    const svgContent = getSVG();
    const parser = new DOMParser();
    const svgElement = parser.parseFromString(svgContent, "image/svg+xml").documentElement;
    svgElement.style.position = "absolute";
    svgElement.style.left = "-9999px";
    document.body.appendChild(svgElement);
    const rect = svgElement.getBoundingClientRect();
    document.body.removeChild(svgElement);
    const width2 = rect.width;
    const height2 = rect.height;
    const pdf = new E$1({
      orientation: width2 > height2 ? "landscape" : "portrait",
      unit: "pt",
      format: [width2, height2]
    });
    await Ut(svgElement, pdf, { width: width2, height: height2 });
    pdf.save("model.pdf");
  }
  let menuItems;
  $$self.$$set = ($$props2) => {
    if ("full" in $$props2)
      $$invalidate(0, full = $$props2.full);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$appState, full*/
    5) {
      {
        let allMenuItems = [
          { name: "New Model", action: newModel },
          { name: "Load Model", action: loadModel },
          { name: "Load Data", action: loadData },
          {
            name: "Load Model and Data",
            action: loadModelData
          },
          {
            name: "Download Model",
            action: downloadModel,
            disable: $appState.modelEmpty
          },
          {
            name: "Remove Data",
            action: removeData2,
            disable: !$appState.dataAvail
          },
          {
            name: "Download Model and Data",
            disable: $appState.modelEmpty || !$appState.dataAvail,
            action: downloadModelData,
            divider: true
          },
          {
            name: "Export Diagram to PNG",
            disable: $appState.modelEmpty,
            action: exportPNG
          },
          {
            name: "Export Diagram to JPG",
            disable: $appState.modelEmpty,
            action: exportJPG
          },
          {
            name: "Export Diagram to SVG",
            disable: $appState.modelEmpty,
            action: exportSVG
          },
          {
            name: "Export Diagram to PDF",
            disable: $appState.modelEmpty,
            action: exportPDF
          }
        ];
        if (full) {
          $$invalidate(1, menuItems = allMenuItems);
        } else {
          $$invalidate(1, menuItems = allMenuItems.filter((item) => ["Download Model", "Load Model"].includes(item.name) || allMenuItems.indexOf(item) >= allMenuItems.length - 4));
        }
      }
    }
  };
  return [full, menuItems, $appState];
}
class FileMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$y, create_fragment$l, safe_not_equal, { full: 0 });
  }
}
const CheckItem_svelte_svelte_type_style_lang = "";
function create_else_block$2(ctx) {
  let span;
  return {
    c() {
      span = element$1("span");
      attr(span, "class", "glyphicon glyphicon-ok check-mark invisible");
      attr(span, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block$4(ctx) {
  let span;
  return {
    c() {
      span = element$1("span");
      attr(span, "class", "glyphicon glyphicon-ok check-mark");
      attr(span, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment$k(ctx) {
  let li;
  let label;
  let input;
  let t0;
  let t1;
  let t22;
  let label_class_value;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*checked*/
      ctx2[0]
    )
      return create_if_block$4;
    return create_else_block$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      li = element$1("li");
      label = element$1("label");
      input = element$1("input");
      t0 = space();
      if_block.c();
      t1 = space();
      t22 = text(
        /*name*/
        ctx[1]
      );
      attr(input, "type", "checkbox");
      attr(input, "class", "check-box svelte-17cge7g");
      input.disabled = /*disable*/
      ctx[2];
      attr(label, "class", label_class_value = null_to_empty(
        /*disable*/
        ctx[2] ? "disabled-label" : ""
      ) + " svelte-17cge7g");
      attr(li, "class", "svelte-17cge7g");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, label);
      append(label, input);
      input.checked = /*checked*/
      ctx[0];
      append(label, t0);
      if_block.m(label, null);
      append(label, t1);
      append(label, t22);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*input_change_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*disable*/
      4) {
        input.disabled = /*disable*/
        ctx2[2];
      }
      if (dirty & /*checked*/
      1) {
        input.checked = /*checked*/
        ctx2[0];
      }
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(label, t1);
        }
      }
      if (dirty & /*name*/
      2)
        set_data(
          t22,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*disable*/
      4 && label_class_value !== (label_class_value = null_to_empty(
        /*disable*/
        ctx2[2] ? "disabled-label" : ""
      ) + " svelte-17cge7g")) {
        attr(label, "class", label_class_value);
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(li);
      if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$x($$self, $$props, $$invalidate) {
  let { name: name2 } = $$props;
  let { checked } = $$props;
  let { disable = false } = $$props;
  function input_change_handler() {
    checked = this.checked;
    $$invalidate(0, checked);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
    if ("disable" in $$props2)
      $$invalidate(2, disable = $$props2.disable);
  };
  return [checked, name2, disable, input_change_handler];
}
class CheckItem extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$x, create_fragment$k, safe_not_equal, { name: 1, checked: 0, disable: 2 });
  }
}
const RadioItem_svelte_svelte_type_style_lang = "";
function create_else_block$1(ctx) {
  let span;
  return {
    c() {
      span = element$1("span");
      attr(span, "class", "glyphicon glyphicon-ok check-mark invisible");
      attr(span, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block$3(ctx) {
  let span;
  return {
    c() {
      span = element$1("span");
      attr(span, "class", "glyphicon glyphicon-ok check-mark");
      attr(span, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment$j(ctx) {
  let div;
  let label;
  let input;
  let value_has_changed = false;
  let t0;
  let t1;
  let t22;
  let label_class_value;
  let div_class_value;
  let binding_group;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*group*/
      ctx2[0] === /*value*/
      ctx2[2]
    )
      return create_if_block$3;
    return create_else_block$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  binding_group = init_binding_group(
    /*$$binding_groups*/
    ctx[5][0]
  );
  return {
    c() {
      div = element$1("div");
      label = element$1("label");
      input = element$1("input");
      t0 = space();
      if_block.c();
      t1 = space();
      t22 = text(
        /*name*/
        ctx[1]
      );
      attr(input, "type", "radio");
      attr(input, "name", "meanStruc");
      input.__value = /*value*/
      ctx[2];
      input.value = input.__value;
      input.disabled = /*isDisabled*/
      ctx[3];
      attr(input, "class", "svelte-lbhkwe");
      attr(label, "class", label_class_value = null_to_empty(
        /*isDisabled*/
        ctx[3] ? "text-muted" : ""
      ) + " svelte-lbhkwe");
      attr(div, "class", div_class_value = null_to_empty(
        /*isDisabled*/
        ctx[3] ? "radio disabled" : "radio"
      ) + " svelte-lbhkwe");
      binding_group.p(input);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label);
      append(label, input);
      input.checked = input.__value === /*group*/
      ctx[0];
      append(label, t0);
      if_block.m(label, null);
      append(label, t1);
      append(label, t22);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*input_change_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      4) {
        input.__value = /*value*/
        ctx2[2];
        input.value = input.__value;
        value_has_changed = true;
      }
      if (dirty & /*isDisabled*/
      8) {
        input.disabled = /*isDisabled*/
        ctx2[3];
      }
      if (value_has_changed || dirty & /*group*/
      1) {
        input.checked = input.__value === /*group*/
        ctx2[0];
      }
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(label, t1);
        }
      }
      if (dirty & /*name*/
      2)
        set_data(
          t22,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*isDisabled*/
      8 && label_class_value !== (label_class_value = null_to_empty(
        /*isDisabled*/
        ctx2[3] ? "text-muted" : ""
      ) + " svelte-lbhkwe")) {
        attr(label, "class", label_class_value);
      }
      if (dirty & /*isDisabled*/
      8 && div_class_value !== (div_class_value = null_to_empty(
        /*isDisabled*/
        ctx2[3] ? "radio disabled" : "radio"
      ) + " svelte-lbhkwe")) {
        attr(div, "class", div_class_value);
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
      binding_group.r();
      mounted = false;
      dispose();
    }
  };
}
function instance$w($$self, $$props, $$invalidate) {
  let { name: name2 } = $$props;
  let { value } = $$props;
  let { group: group2 } = $$props;
  let { isDisabled = false } = $$props;
  const $$binding_groups = [[]];
  function input_change_handler() {
    group2 = this.__value;
    $$invalidate(0, group2);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("value" in $$props2)
      $$invalidate(2, value = $$props2.value);
    if ("group" in $$props2)
      $$invalidate(0, group2 = $$props2.group);
    if ("isDisabled" in $$props2)
      $$invalidate(3, isDisabled = $$props2.isDisabled);
  };
  return [group2, name2, value, isDisabled, input_change_handler, $$binding_groups];
}
class RadioItem extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$w, create_fragment$j, safe_not_equal, {
      name: 1,
      value: 2,
      group: 0,
      isDisabled: 3
    });
  }
}
const edgeItems = [
  {
    name: "Arrows Created by Lavaan",
    modelSlot: "showLav"
  },
  { name: "Variance Arrows", modelSlot: "showVar" },
  { name: "Mean Arrows", modelSlot: "showMean" }
];
let viewRadios = [
  { name: "Estimate", value: "est" },
  { name: "Confidence Interval", value: "ci" },
  { name: "Estimate + p-value (stars)", value: "estPVal" },
  { name: "Estimate + Standard Error", value: "estSE" }
];
function updateLabels(viewOption, std, number_digits) {
  const cy2 = get_store_value(cyStore);
  const postfix = std ? "_std" : "";
  const styleEst = generateStyleEst(viewOption, postfix, number_digits);
  cy2.style().selector("edge.hasEst").style({ label: styleEst }).update();
  const labeledStyleEst = generateLabeledStyleEst(viewOption, postfix, number_digits);
  cy2.style().selector("edge.hasEst.label").style({ label: labeledStyleEst }).update();
  const fixedEstStyle = generateFixedEstStyle(viewOption, postfix, number_digits);
  cy2.style().selector("edge.hasEstFixed").style({ label: fixedEstStyle }).update();
}
function updateVisibility(showVar, showLav, showMean, menuItems) {
  function which(logicalVector2) {
    return logicalVector2.reduce((indices, value, index) => {
      if (value) {
        indices.push(index);
      }
      return indices;
    }, []);
  }
  const cy2 = get_store_value(cyStore);
  const logicalVector = [showLav, showVar, showMean];
  const trueIndices = which(logicalVector);
  const falseIndices = which(logicalVector.map((x2) => !x2));
  function applyFunction(i2, elements) {
    const functionsArray = [
      (elements2) => elements2.isLavaanAdded(),
      (elements2) => elements2.isLoop(),
      (elements2) => elements2.isMean()
      // Add more functions as needed
    ];
    return functionsArray[i2](elements);
  }
  for (let i2 of trueIndices) {
    cy2.elements(function(ele) {
      return applyFunction(i2, ele);
    }).show();
  }
  for (let i2 of falseIndices) {
    cy2.elements(function(ele) {
      return applyFunction(i2, ele);
    }).hide();
  }
}
function getStars(pval) {
  if (pval === null)
    return "NA";
  if (pval < 1e-3) {
    return "***";
  } else if (pval < 0.01) {
    return "**";
  } else if (pval < 0.05) {
    return "*";
  } else {
    return "";
  }
}
function generateStyleEst(viewOption, postfix, number_digits) {
  const formatValue = (value) => value === null ? "NA" : value.toFixed(number_digits);
  switch (viewOption) {
    case "est":
      return (edge) => formatValue(edge.data("estimates")["est" + postfix]);
    case "ci":
      return (edge) => `[${formatValue(edge.data("estimates")["ciLow" + postfix])}, ${formatValue(edge.data("estimates")["ciHigh" + postfix])}]`;
    case "estPVal":
      return (edge) => `${formatValue(edge.data("estimates")["est" + postfix])}${getStars(edge.data("estimates")["p_value"])}`;
    case "estSE":
      return (edge) => `${formatValue(edge.data("estimates")["est" + postfix])} (${formatValue(edge.data("estimates")["se" + postfix])})`;
    default:
      return () => "NA";
  }
}
function generateLabeledStyleEst(viewOption, postfix, number_digits) {
  const baseStyle = generateStyleEst(viewOption, postfix, number_digits);
  return (edge) => `${edge.data("label")} = ${baseStyle(edge)}`;
}
function generateFixedEstStyle(viewOption, postfix, number_digits) {
  const formatValue = (value) => value === null ? "NA" : value.toFixed(number_digits);
  return (edge) => {
    return "@" + formatValue(edge.data("estimates")["estFixed" + postfix]);
  };
}
function create_fragment$i(ctx) {
  let li;
  let t0;
  let t1;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      li = element$1("li");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      input = element$1("input");
      set_style(input, "width", "4em");
      attr(input, "type", "number");
      attr(
        input,
        "min",
        /*min*/
        ctx[2]
      );
      set_style(li, "padding-left", "28px");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, t0);
      append(li, t1);
      append(li, input);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*min*/
      4) {
        attr(
          input,
          "min",
          /*min*/
          ctx2[2]
        );
      }
      if (dirty & /*value*/
      1 && to_number(input.value) !== /*value*/
      ctx2[0]) {
        set_input_value(
          input,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(li);
      mounted = false;
      dispose();
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let { name: name2 } = $$props;
  let { value } = $$props;
  let { min: min4 } = $$props;
  function input_input_handler() {
    value = to_number(this.value);
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("min" in $$props2)
      $$invalidate(2, min4 = $$props2.min);
  };
  return [value, name2, min4, input_input_handler];
}
class TextItem extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$v, create_fragment$i, safe_not_equal, { name: 1, value: 0, min: 2 });
  }
}
function get_each_context$3(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list2[i2];
  return child_ctx;
}
function get_each_context_1$1(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list2[i2];
  child_ctx[12] = list2;
  child_ctx[13] = i2;
  return child_ctx;
}
function create_each_block_1$1(ctx) {
  let checkitem;
  let updating_name;
  let updating_checked;
  let current;
  function checkitem_name_binding(value) {
    ctx[3](
      value,
      /*item*/
      ctx[9]
    );
  }
  function checkitem_checked_binding(value) {
    ctx[4](
      value,
      /*item*/
      ctx[9]
    );
  }
  let checkitem_props = { disable: false };
  if (
    /*item*/
    ctx[9].name !== void 0
  ) {
    checkitem_props.name = /*item*/
    ctx[9].name;
  }
  if (
    /*$gridViewOptions*/
    ctx[1][
      /*item*/
      ctx[9].modelSlot
    ] !== void 0
  ) {
    checkitem_props.checked = /*$gridViewOptions*/
    ctx[1][
      /*item*/
      ctx[9].modelSlot
    ];
  }
  checkitem = new CheckItem({ props: checkitem_props });
  binding_callbacks.push(() => bind(checkitem, "name", checkitem_name_binding));
  binding_callbacks.push(() => bind(checkitem, "checked", checkitem_checked_binding));
  return {
    c() {
      create_component(checkitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(checkitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const checkitem_changes = {};
      if (!updating_name && dirty & /*edgeItems*/
      4) {
        updating_name = true;
        checkitem_changes.name = /*item*/
        ctx[9].name;
        add_flush_callback(() => updating_name = false);
      }
      if (!updating_checked && dirty & /*$gridViewOptions, edgeItems*/
      6) {
        updating_checked = true;
        checkitem_changes.checked = /*$gridViewOptions*/
        ctx[1][
          /*item*/
          ctx[9].modelSlot
        ];
        add_flush_callback(() => updating_checked = false);
      }
      checkitem.$set(checkitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkitem, detaching);
    }
  };
}
function create_each_block$3(ctx) {
  let radioitem;
  let updating_group;
  let current;
  function radioitem_group_binding(value) {
    ctx[6](value);
  }
  let radioitem_props = {
    name: (
      /*item*/
      ctx[9].name
    ),
    value: (
      /*item*/
      ctx[9].value
    )
  };
  if (
    /*$gridViewOptions*/
    ctx[1].view !== void 0
  ) {
    radioitem_props.group = /*$gridViewOptions*/
    ctx[1].view;
  }
  radioitem = new RadioItem({ props: radioitem_props });
  binding_callbacks.push(() => bind(radioitem, "group", radioitem_group_binding));
  return {
    c() {
      create_component(radioitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(radioitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radioitem_changes = {};
      if (!updating_group && dirty & /*$gridViewOptions*/
      2) {
        updating_group = true;
        radioitem_changes.group = /*$gridViewOptions*/
        ctx2[1].view;
        add_flush_callback(() => updating_group = false);
      }
      radioitem.$set(radioitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radioitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radioitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radioitem, detaching);
    }
  };
}
function create_default_slot$7(ctx) {
  let t0;
  let li0;
  let t1;
  let checkitem;
  let updating_checked;
  let t22;
  let li1;
  let t3;
  let t4;
  let li2;
  let t5;
  let li3;
  let t6;
  let input;
  let t7;
  let textitem;
  let updating_value;
  let current;
  let mounted;
  let dispose;
  let each_value_1 = (
    /*edgeItems*/
    ctx[2]
  );
  let each_blocks_1 = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks_1[i2] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks_1[i2], 1, 1, () => {
    each_blocks_1[i2] = null;
  });
  function checkitem_checked_binding_1(value) {
    ctx[5](value);
  }
  let checkitem_props = {
    name: "Standardized Estimates",
    disable: false
  };
  if (
    /*$gridViewOptions*/
    ctx[1].std !== void 0
  ) {
    checkitem_props.checked = /*$gridViewOptions*/
    ctx[1].std;
  }
  checkitem = new CheckItem({ props: checkitem_props });
  binding_callbacks.push(() => bind(checkitem, "checked", checkitem_checked_binding_1));
  let each_value = viewRadios;
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$3(get_each_context$3(ctx, each_value, i2));
  }
  const out_1 = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  function textitem_value_binding(value) {
    ctx[8](value);
  }
  let textitem_props = { name: "Number Digits", min: 0 };
  if (
    /*$gridViewOptions*/
    ctx[1].number_digits !== void 0
  ) {
    textitem_props.value = /*$gridViewOptions*/
    ctx[1].number_digits;
  }
  textitem = new TextItem({ props: textitem_props });
  binding_callbacks.push(() => bind(textitem, "value", textitem_value_binding));
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].c();
      }
      t0 = space();
      li0 = element$1("li");
      t1 = space();
      create_component(checkitem.$$.fragment);
      t22 = space();
      li1 = element$1("li");
      t3 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t4 = space();
      li2 = element$1("li");
      t5 = space();
      li3 = element$1("li");
      t6 = text("Confidence Level\n    ");
      input = element$1("input");
      t7 = space();
      create_component(textitem.$$.fragment);
      attr(li0, "class", "divider");
      attr(li1, "class", "divider");
      attr(li2, "class", "divider");
      attr(input, "type", "number");
      attr(input, "min", "0");
      attr(input, "max", "0.999999");
      attr(input, "step", "0.01");
      set_style(input, "width", "4em");
      set_style(li3, "padding-left", "28px");
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        if (each_blocks_1[i2]) {
          each_blocks_1[i2].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      insert(target, li0, anchor);
      insert(target, t1, anchor);
      mount_component(checkitem, target, anchor);
      insert(target, t22, anchor);
      insert(target, li1, anchor);
      insert(target, t3, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, t4, anchor);
      insert(target, li2, anchor);
      insert(target, t5, anchor);
      insert(target, li3, anchor);
      append(li3, t6);
      append(li3, input);
      set_input_value(
        input,
        /*$gridViewOptions*/
        ctx[1].ci
      );
      insert(target, t7, anchor);
      mount_component(textitem, target, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*edgeItems, $gridViewOptions*/
      6) {
        each_value_1 = /*edgeItems*/
        ctx2[2];
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i2);
          if (each_blocks_1[i2]) {
            each_blocks_1[i2].p(child_ctx, dirty);
            transition_in(each_blocks_1[i2], 1);
          } else {
            each_blocks_1[i2] = create_each_block_1$1(child_ctx);
            each_blocks_1[i2].c();
            transition_in(each_blocks_1[i2], 1);
            each_blocks_1[i2].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks_1.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      const checkitem_changes = {};
      if (!updating_checked && dirty & /*$gridViewOptions*/
      2) {
        updating_checked = true;
        checkitem_changes.checked = /*$gridViewOptions*/
        ctx2[1].std;
        add_flush_callback(() => updating_checked = false);
      }
      checkitem.$set(checkitem_changes);
      if (dirty & /*viewRadios, $gridViewOptions*/
      2) {
        each_value = viewRadios;
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$3(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(t4.parentNode, t4);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out_1(i2);
        }
        check_outros();
      }
      if (dirty & /*$gridViewOptions*/
      2 && to_number(input.value) !== /*$gridViewOptions*/
      ctx2[1].ci) {
        set_input_value(
          input,
          /*$gridViewOptions*/
          ctx2[1].ci
        );
      }
      const textitem_changes = {};
      if (!updating_value && dirty & /*$gridViewOptions*/
      2) {
        updating_value = true;
        textitem_changes.value = /*$gridViewOptions*/
        ctx2[1].number_digits;
        add_flush_callback(() => updating_value = false);
      }
      textitem.$set(textitem_changes);
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks_1[i2]);
      }
      transition_in(checkitem.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      transition_in(textitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        transition_out(each_blocks_1[i2]);
      }
      transition_out(checkitem.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      transition_out(textitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks_1, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(li0);
      if (detaching)
        detach(t1);
      destroy_component(checkitem, detaching);
      if (detaching)
        detach(t22);
      if (detaching)
        detach(li1);
      if (detaching)
        detach(t3);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(li2);
      if (detaching)
        detach(t5);
      if (detaching)
        detach(li3);
      if (detaching)
        detach(t7);
      destroy_component(textitem, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$h(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      name: "View",
      minimal: (
        /*minimal*/
        ctx[0]
      ),
      $$slots: { default: [create_default_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*minimal*/
      1)
        dropdown_changes.minimal = /*minimal*/
        ctx2[0];
      if (dirty & /*$$scope, $gridViewOptions, edgeItems*/
      16390) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function instance$u($$self, $$props, $$invalidate) {
  let $gridViewOptions;
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(1, $gridViewOptions = $$value));
  let { minimal = false } = $$props;
  function checkitem_name_binding(value, item) {
    if ($$self.$$.not_equal(item.name, value)) {
      item.name = value;
      $$invalidate(2, edgeItems);
    }
  }
  function checkitem_checked_binding(value, item) {
    if ($$self.$$.not_equal($gridViewOptions[item.modelSlot], value)) {
      $gridViewOptions[item.modelSlot] = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function checkitem_checked_binding_1(value) {
    if ($$self.$$.not_equal($gridViewOptions.std, value)) {
      $gridViewOptions.std = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function radioitem_group_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.view, value)) {
      $gridViewOptions.view = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function input_input_handler() {
    $gridViewOptions.ci = to_number(this.value);
    gridViewOptions.set($gridViewOptions);
  }
  function textitem_value_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.number_digits, value)) {
      $gridViewOptions.number_digits = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("minimal" in $$props2)
      $$invalidate(0, minimal = $$props2.minimal);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$gridViewOptions*/
    2) {
      {
        Shiny.setInputValue("ests-confindence_level", $gridViewOptions.ci);
      }
    }
  };
  return [
    minimal,
    $gridViewOptions,
    edgeItems,
    checkitem_name_binding,
    checkitem_checked_binding,
    checkitem_checked_binding_1,
    radioitem_group_binding,
    input_input_handler,
    textitem_value_binding
  ];
}
class ViewMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$u, create_fragment$h, safe_not_equal, { minimal: 0 });
  }
}
const MeanMenu_svelte_svelte_type_style_lang = "";
function get_each_context$2(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list2[i2];
  return child_ctx;
}
function create_each_block$2(ctx) {
  let radioitem;
  let updating_group;
  let current;
  function radioitem_group_binding(value) {
    ctx[3](value);
  }
  let radioitem_props = {
    name: (
      /*item*/
      ctx[8].name
    ),
    value: (
      /*item*/
      ctx[8].value
    )
  };
  if (
    /*$modelOptions*/
    ctx[0].meanStruc !== void 0
  ) {
    radioitem_props.group = /*$modelOptions*/
    ctx[0].meanStruc;
  }
  radioitem = new RadioItem({ props: radioitem_props });
  binding_callbacks.push(() => bind(radioitem, "group", radioitem_group_binding));
  return {
    c() {
      create_component(radioitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(radioitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radioitem_changes = {};
      if (!updating_group && dirty & /*$modelOptions*/
      1) {
        updating_group = true;
        radioitem_changes.group = /*$modelOptions*/
        ctx2[0].meanStruc;
        add_flush_callback(() => updating_group = false);
      }
      radioitem.$set(radioitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radioitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radioitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radioitem, detaching);
    }
  };
}
function create_default_slot$6(ctx) {
  let li;
  let a2;
  let t1;
  let ul;
  let t22;
  let checkitem0;
  let updating_checked;
  let updating_disable;
  let t3;
  let checkitem1;
  let updating_checked_1;
  let updating_disable_1;
  let current;
  let each_value = (
    /*structureRadios*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$2(get_each_context$2(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  function checkitem0_checked_binding(value) {
    ctx[4](value);
  }
  function checkitem0_disable_binding(value) {
    ctx[5](value);
  }
  let checkitem0_props = {
    name: "Add Intercepts for all Observed Variables"
  };
  if (
    /*$modelOptions*/
    ctx[0].intOvFree !== void 0
  ) {
    checkitem0_props.checked = /*$modelOptions*/
    ctx[0].intOvFree;
  }
  if (
    /*disabledInts*/
    ctx[1] !== void 0
  ) {
    checkitem0_props.disable = /*disabledInts*/
    ctx[1];
  }
  checkitem0 = new CheckItem({ props: checkitem0_props });
  binding_callbacks.push(() => bind(checkitem0, "checked", checkitem0_checked_binding));
  binding_callbacks.push(() => bind(checkitem0, "disable", checkitem0_disable_binding));
  function checkitem1_checked_binding(value) {
    ctx[6](value);
  }
  function checkitem1_disable_binding(value) {
    ctx[7](value);
  }
  let checkitem1_props = {
    name: "Add Intercepts for all Latent Variables"
  };
  if (
    /*$modelOptions*/
    ctx[0].intLvFree !== void 0
  ) {
    checkitem1_props.checked = /*$modelOptions*/
    ctx[0].intLvFree;
  }
  if (
    /*disabledInts*/
    ctx[1] !== void 0
  ) {
    checkitem1_props.disable = /*disabledInts*/
    ctx[1];
  }
  checkitem1 = new CheckItem({ props: checkitem1_props });
  binding_callbacks.push(() => bind(checkitem1, "checked", checkitem1_checked_binding));
  binding_callbacks.push(() => bind(checkitem1, "disable", checkitem1_disable_binding));
  return {
    c() {
      li = element$1("li");
      a2 = element$1("a");
      a2.textContent = "Model Means?";
      t1 = space();
      ul = element$1("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t22 = space();
      create_component(checkitem0.$$.fragment);
      t3 = space();
      create_component(checkitem1.$$.fragment);
      attr(a2, "tabindex", "-1");
      attr(a2, "href", "#");
      attr(a2, "class", "svelte-143y7r6");
      attr(ul, "class", "dropdown-menu svelte-143y7r6");
      attr(li, "class", "dropdown-submenu svelte-143y7r6");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, a2);
      append(li, t1);
      append(li, ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul, null);
        }
      }
      insert(target, t22, anchor);
      mount_component(checkitem0, target, anchor);
      insert(target, t3, anchor);
      mount_component(checkitem1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*structureRadios, $modelOptions*/
      5) {
        each_value = /*structureRadios*/
        ctx2[2];
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(ul, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      const checkitem0_changes = {};
      if (!updating_checked && dirty & /*$modelOptions*/
      1) {
        updating_checked = true;
        checkitem0_changes.checked = /*$modelOptions*/
        ctx2[0].intOvFree;
        add_flush_callback(() => updating_checked = false);
      }
      if (!updating_disable && dirty & /*disabledInts*/
      2) {
        updating_disable = true;
        checkitem0_changes.disable = /*disabledInts*/
        ctx2[1];
        add_flush_callback(() => updating_disable = false);
      }
      checkitem0.$set(checkitem0_changes);
      const checkitem1_changes = {};
      if (!updating_checked_1 && dirty & /*$modelOptions*/
      1) {
        updating_checked_1 = true;
        checkitem1_changes.checked = /*$modelOptions*/
        ctx2[0].intLvFree;
        add_flush_callback(() => updating_checked_1 = false);
      }
      if (!updating_disable_1 && dirty & /*disabledInts*/
      2) {
        updating_disable_1 = true;
        checkitem1_changes.disable = /*disabledInts*/
        ctx2[1];
        add_flush_callback(() => updating_disable_1 = false);
      }
      checkitem1.$set(checkitem1_changes);
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      transition_in(checkitem0.$$.fragment, local);
      transition_in(checkitem1.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      transition_out(checkitem0.$$.fragment, local);
      transition_out(checkitem1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t22);
      destroy_component(checkitem0, detaching);
      if (detaching)
        detach(t3);
      destroy_component(checkitem1, detaching);
    }
  };
}
function create_fragment$g(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      name: name$2,
      $$slots: { default: [create_default_slot$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*$$scope, $modelOptions, disabledInts*/
      2051) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
let name$2 = "Mean Options";
function instance$t($$self, $$props, $$invalidate) {
  let disabledInts;
  let $modelOptions;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(0, $modelOptions = $$value));
  let structureRadios = [
    { name: "Automatic", value: "default" },
    { name: "Yes", value: "true" },
    { name: "No", value: "false" }
  ];
  function radioitem_group_binding(value) {
    if ($$self.$$.not_equal($modelOptions.meanStruc, value)) {
      $modelOptions.meanStruc = value;
      modelOptions.set($modelOptions);
    }
  }
  function checkitem0_checked_binding(value) {
    if ($$self.$$.not_equal($modelOptions.intOvFree, value)) {
      $modelOptions.intOvFree = value;
      modelOptions.set($modelOptions);
    }
  }
  function checkitem0_disable_binding(value) {
    disabledInts = value;
    $$invalidate(1, disabledInts), $$invalidate(0, $modelOptions);
  }
  function checkitem1_checked_binding(value) {
    if ($$self.$$.not_equal($modelOptions.intLvFree, value)) {
      $modelOptions.intLvFree = value;
      modelOptions.set($modelOptions);
    }
  }
  function checkitem1_disable_binding(value) {
    disabledInts = value;
    $$invalidate(1, disabledInts), $$invalidate(0, $modelOptions);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$modelOptions*/
    1) {
      $$invalidate(1, disabledInts = $modelOptions.meanStruc === "false");
    }
  };
  return [
    $modelOptions,
    disabledInts,
    structureRadios,
    radioitem_group_binding,
    checkitem0_checked_binding,
    checkitem0_disable_binding,
    checkitem1_checked_binding,
    checkitem1_disable_binding
  ];
}
class MeanMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$t, create_fragment$g, safe_not_equal, {});
  }
}
const EstimationMenu_svelte_svelte_type_style_lang = "";
function get_each_context$1(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list2[i2];
  return child_ctx;
}
function get_each_context_1(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list2[i2];
  return child_ctx;
}
function get_each_context_2(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list2[i2];
  return child_ctx;
}
function create_each_block_2(ctx) {
  let radioitem;
  let updating_group;
  let current;
  function radioitem_group_binding(value) {
    ctx[4](value);
  }
  let radioitem_props = {
    name: (
      /*item*/
      ctx[9].name
    ),
    value: (
      /*item*/
      ctx[9].value
    )
  };
  if (
    /*$modelOptions*/
    ctx[0].estimator !== void 0
  ) {
    radioitem_props.group = /*$modelOptions*/
    ctx[0].estimator;
  }
  radioitem = new RadioItem({ props: radioitem_props });
  binding_callbacks.push(() => bind(radioitem, "group", radioitem_group_binding));
  return {
    c() {
      create_component(radioitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(radioitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radioitem_changes = {};
      if (!updating_group && dirty & /*$modelOptions*/
      1) {
        updating_group = true;
        radioitem_changes.group = /*$modelOptions*/
        ctx2[0].estimator;
        add_flush_callback(() => updating_group = false);
      }
      radioitem.$set(radioitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radioitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radioitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radioitem, detaching);
    }
  };
}
function create_each_block_1(ctx) {
  let radioitem;
  let updating_group;
  let current;
  function radioitem_group_binding_1(value) {
    ctx[5](value);
  }
  let radioitem_props = {
    name: (
      /*item*/
      ctx[9].name
    ),
    value: (
      /*item*/
      ctx[9].value
    )
  };
  if (
    /*$modelOptions*/
    ctx[0].se !== void 0
  ) {
    radioitem_props.group = /*$modelOptions*/
    ctx[0].se;
  }
  radioitem = new RadioItem({ props: radioitem_props });
  binding_callbacks.push(() => bind(radioitem, "group", radioitem_group_binding_1));
  return {
    c() {
      create_component(radioitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(radioitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radioitem_changes = {};
      if (!updating_group && dirty & /*$modelOptions*/
      1) {
        updating_group = true;
        radioitem_changes.group = /*$modelOptions*/
        ctx2[0].se;
        add_flush_callback(() => updating_group = false);
      }
      radioitem.$set(radioitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radioitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radioitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radioitem, detaching);
    }
  };
}
function create_each_block$1(ctx) {
  let radioitem;
  let updating_group;
  let current;
  function radioitem_group_binding_2(value) {
    ctx[7](value);
  }
  let radioitem_props = {
    name: (
      /*item*/
      ctx[9].name
    ),
    value: (
      /*item*/
      ctx[9].value
    )
  };
  if (
    /*$modelOptions*/
    ctx[0].missing !== void 0
  ) {
    radioitem_props.group = /*$modelOptions*/
    ctx[0].missing;
  }
  radioitem = new RadioItem({ props: radioitem_props });
  binding_callbacks.push(() => bind(radioitem, "group", radioitem_group_binding_2));
  return {
    c() {
      create_component(radioitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(radioitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radioitem_changes = {};
      if (!updating_group && dirty & /*$modelOptions*/
      1) {
        updating_group = true;
        radioitem_changes.group = /*$modelOptions*/
        ctx2[0].missing;
        add_flush_callback(() => updating_group = false);
      }
      radioitem.$set(radioitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radioitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radioitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radioitem, detaching);
    }
  };
}
function create_default_slot$5(ctx) {
  let li0;
  let a0;
  let t1;
  let ul0;
  let t22;
  let li1;
  let a1;
  let t4;
  let ul1;
  let t5;
  let textitem;
  let updating_value;
  let t6;
  let li2;
  let a2;
  let t8;
  let ul2;
  let current;
  let each_value_2 = (
    /*estimatorRadios*/
    ctx[1]
  );
  let each_blocks_2 = [];
  for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
    each_blocks_2[i2] = create_each_block_2(get_each_context_2(ctx, each_value_2, i2));
  }
  const out = (i2) => transition_out(each_blocks_2[i2], 1, 1, () => {
    each_blocks_2[i2] = null;
  });
  let each_value_1 = (
    /*standardErrors*/
    ctx[2]
  );
  let each_blocks_1 = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks_1[i2] = create_each_block_1(get_each_context_1(ctx, each_value_1, i2));
  }
  const out_1 = (i2) => transition_out(each_blocks_1[i2], 1, 1, () => {
    each_blocks_1[i2] = null;
  });
  function textitem_value_binding(value) {
    ctx[6](value);
  }
  let textitem_props = {
    name: "Number of Bootstrap Samples:",
    min: 5
  };
  if (
    /*$modelOptions*/
    ctx[0].n_boot !== void 0
  ) {
    textitem_props.value = /*$modelOptions*/
    ctx[0].n_boot;
  }
  textitem = new TextItem({ props: textitem_props });
  binding_callbacks.push(() => bind(textitem, "value", textitem_value_binding));
  let each_value = (
    /*missingValues*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$1(get_each_context$1(ctx, each_value, i2));
  }
  const out_2 = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      li0 = element$1("li");
      a0 = element$1("a");
      a0.textContent = "Estimator";
      t1 = space();
      ul0 = element$1("ul");
      for (let i2 = 0; i2 < each_blocks_2.length; i2 += 1) {
        each_blocks_2[i2].c();
      }
      t22 = space();
      li1 = element$1("li");
      a1 = element$1("a");
      a1.textContent = "Standard Error";
      t4 = space();
      ul1 = element$1("ul");
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].c();
      }
      t5 = space();
      create_component(textitem.$$.fragment);
      t6 = space();
      li2 = element$1("li");
      a2 = element$1("a");
      a2.textContent = "Missing Values";
      t8 = space();
      ul2 = element$1("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      attr(a0, "tabindex", "-1");
      attr(a0, "href", "#");
      attr(a0, "class", "svelte-143y7r6");
      attr(ul0, "class", "dropdown-menu svelte-143y7r6");
      attr(li0, "class", "dropdown-submenu svelte-143y7r6");
      attr(a1, "tabindex", "-1");
      attr(a1, "href", "#");
      attr(a1, "class", "svelte-143y7r6");
      attr(ul1, "class", "dropdown-menu svelte-143y7r6");
      attr(li1, "class", "dropdown-submenu svelte-143y7r6");
      attr(a2, "tabindex", "-1");
      attr(a2, "href", "#");
      attr(a2, "class", "svelte-143y7r6");
      attr(ul2, "class", "dropdown-menu svelte-143y7r6");
      attr(li2, "class", "dropdown-submenu svelte-143y7r6");
    },
    m(target, anchor) {
      insert(target, li0, anchor);
      append(li0, a0);
      append(li0, t1);
      append(li0, ul0);
      for (let i2 = 0; i2 < each_blocks_2.length; i2 += 1) {
        if (each_blocks_2[i2]) {
          each_blocks_2[i2].m(ul0, null);
        }
      }
      insert(target, t22, anchor);
      insert(target, li1, anchor);
      append(li1, a1);
      append(li1, t4);
      append(li1, ul1);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        if (each_blocks_1[i2]) {
          each_blocks_1[i2].m(ul1, null);
        }
      }
      append(ul1, t5);
      mount_component(textitem, ul1, null);
      insert(target, t6, anchor);
      insert(target, li2, anchor);
      append(li2, a2);
      append(li2, t8);
      append(li2, ul2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul2, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*estimatorRadios, $modelOptions*/
      3) {
        each_value_2 = /*estimatorRadios*/
        ctx2[1];
        let i2;
        for (i2 = 0; i2 < each_value_2.length; i2 += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i2);
          if (each_blocks_2[i2]) {
            each_blocks_2[i2].p(child_ctx, dirty);
            transition_in(each_blocks_2[i2], 1);
          } else {
            each_blocks_2[i2] = create_each_block_2(child_ctx);
            each_blocks_2[i2].c();
            transition_in(each_blocks_2[i2], 1);
            each_blocks_2[i2].m(ul0, null);
          }
        }
        group_outros();
        for (i2 = each_value_2.length; i2 < each_blocks_2.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      if (dirty & /*standardErrors, $modelOptions*/
      5) {
        each_value_1 = /*standardErrors*/
        ctx2[2];
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i2);
          if (each_blocks_1[i2]) {
            each_blocks_1[i2].p(child_ctx, dirty);
            transition_in(each_blocks_1[i2], 1);
          } else {
            each_blocks_1[i2] = create_each_block_1(child_ctx);
            each_blocks_1[i2].c();
            transition_in(each_blocks_1[i2], 1);
            each_blocks_1[i2].m(ul1, t5);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks_1.length; i2 += 1) {
          out_1(i2);
        }
        check_outros();
      }
      const textitem_changes = {};
      if (!updating_value && dirty & /*$modelOptions*/
      1) {
        updating_value = true;
        textitem_changes.value = /*$modelOptions*/
        ctx2[0].n_boot;
        add_flush_callback(() => updating_value = false);
      }
      textitem.$set(textitem_changes);
      if (dirty & /*missingValues, $modelOptions*/
      9) {
        each_value = /*missingValues*/
        ctx2[3];
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(ul2, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out_2(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
        transition_in(each_blocks_2[i2]);
      }
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks_1[i2]);
      }
      transition_in(textitem.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks_2 = each_blocks_2.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks_2.length; i2 += 1) {
        transition_out(each_blocks_2[i2]);
      }
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        transition_out(each_blocks_1[i2]);
      }
      transition_out(textitem.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li0);
      destroy_each(each_blocks_2, detaching);
      if (detaching)
        detach(t22);
      if (detaching)
        detach(li1);
      destroy_each(each_blocks_1, detaching);
      destroy_component(textitem);
      if (detaching)
        detach(t6);
      if (detaching)
        detach(li2);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$f(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      name: name$1,
      $$slots: { default: [create_default_slot$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*$$scope, $modelOptions*/
      65537) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
const name$1 = "Estimation";
function instance$s($$self, $$props, $$invalidate) {
  let $modelOptions;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(0, $modelOptions = $$value));
  const estimatorRadios = [
    { value: "default", name: "Default" },
    {
      value: "ML",
      name: "Maximum Likelihood (ML)"
    },
    {
      value: "GLS",
      name: "Generalized Least Squares (GLS)"
    },
    {
      value: "WLS",
      name: "Weighted Least Squares (WLS)"
    },
    {
      value: "ULS",
      name: "Unweighted Least Squares (ULS)"
    },
    {
      value: "DLS",
      name: "Distributionally-weighted Least Squares (DLW)"
    }
  ];
  const standardErrors = [
    { value: "default", name: "Default" },
    { value: "robust", name: "Robust" },
    { value: "boot", name: "Bootstrap" }
  ];
  const missingValues = [
    {
      value: "listwise",
      name: "Listwise Deletion"
    },
    {
      value: "ml",
      name: "Full Information Maximum Likelihood (FIML)"
    }
  ];
  function radioitem_group_binding(value) {
    if ($$self.$$.not_equal($modelOptions.estimator, value)) {
      $modelOptions.estimator = value;
      modelOptions.set($modelOptions);
    }
  }
  function radioitem_group_binding_1(value) {
    if ($$self.$$.not_equal($modelOptions.se, value)) {
      $modelOptions.se = value;
      modelOptions.set($modelOptions);
    }
  }
  function textitem_value_binding(value) {
    if ($$self.$$.not_equal($modelOptions.n_boot, value)) {
      $modelOptions.n_boot = value;
      modelOptions.set($modelOptions);
    }
  }
  function radioitem_group_binding_2(value) {
    if ($$self.$$.not_equal($modelOptions.missing, value)) {
      $modelOptions.missing = value;
      modelOptions.set($modelOptions);
    }
  }
  return [
    $modelOptions,
    estimatorRadios,
    standardErrors,
    missingValues,
    radioitem_group_binding,
    radioitem_group_binding_1,
    textitem_value_binding,
    radioitem_group_binding_2
  ];
}
class EstimationMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$s, create_fragment$f, safe_not_equal, {});
  }
}
var cytoscapeDagre = { exports: {} };
var _stackClear;
var hasRequired_stackClear;
function require_stackClear() {
  if (hasRequired_stackClear)
    return _stackClear;
  hasRequired_stackClear = 1;
  var ListCache2 = _ListCache;
  function stackClear() {
    this.__data__ = new ListCache2();
    this.size = 0;
  }
  _stackClear = stackClear;
  return _stackClear;
}
var _stackDelete;
var hasRequired_stackDelete;
function require_stackDelete() {
  if (hasRequired_stackDelete)
    return _stackDelete;
  hasRequired_stackDelete = 1;
  function stackDelete(key) {
    var data4 = this.__data__, result = data4["delete"](key);
    this.size = data4.size;
    return result;
  }
  _stackDelete = stackDelete;
  return _stackDelete;
}
var _stackGet;
var hasRequired_stackGet;
function require_stackGet() {
  if (hasRequired_stackGet)
    return _stackGet;
  hasRequired_stackGet = 1;
  function stackGet(key) {
    return this.__data__.get(key);
  }
  _stackGet = stackGet;
  return _stackGet;
}
var _stackHas;
var hasRequired_stackHas;
function require_stackHas() {
  if (hasRequired_stackHas)
    return _stackHas;
  hasRequired_stackHas = 1;
  function stackHas(key) {
    return this.__data__.has(key);
  }
  _stackHas = stackHas;
  return _stackHas;
}
var _stackSet;
var hasRequired_stackSet;
function require_stackSet() {
  if (hasRequired_stackSet)
    return _stackSet;
  hasRequired_stackSet = 1;
  var ListCache2 = _ListCache, Map2 = _Map, MapCache2 = _MapCache;
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data4 = this.__data__;
    if (data4 instanceof ListCache2) {
      var pairs = data4.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data4.size;
        return this;
      }
      data4 = this.__data__ = new MapCache2(pairs);
    }
    data4.set(key, value);
    this.size = data4.size;
    return this;
  }
  _stackSet = stackSet;
  return _stackSet;
}
var _Stack;
var hasRequired_Stack;
function require_Stack() {
  if (hasRequired_Stack)
    return _Stack;
  hasRequired_Stack = 1;
  var ListCache2 = _ListCache, stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
  function Stack(entries) {
    var data4 = this.__data__ = new ListCache2(entries);
    this.size = data4.size;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  _Stack = Stack;
  return _Stack;
}
var _arrayEach;
var hasRequired_arrayEach;
function require_arrayEach() {
  if (hasRequired_arrayEach)
    return _arrayEach;
  hasRequired_arrayEach = 1;
  function arrayEach(array3, iteratee) {
    var index = -1, length = array3 == null ? 0 : array3.length;
    while (++index < length) {
      if (iteratee(array3[index], index, array3) === false) {
        break;
      }
    }
    return array3;
  }
  _arrayEach = arrayEach;
  return _arrayEach;
}
var _copyObject;
var hasRequired_copyObject;
function require_copyObject() {
  if (hasRequired_copyObject)
    return _copyObject;
  hasRequired_copyObject = 1;
  var assignValue2 = _assignValue, baseAssignValue2 = _baseAssignValue;
  function copyObject(source, props, object3, customizer) {
    var isNew = !object3;
    object3 || (object3 = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue2(object3, key, newValue);
      } else {
        assignValue2(object3, key, newValue);
      }
    }
    return object3;
  }
  _copyObject = copyObject;
  return _copyObject;
}
var _baseTimes;
var hasRequired_baseTimes;
function require_baseTimes() {
  if (hasRequired_baseTimes)
    return _baseTimes;
  hasRequired_baseTimes = 1;
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  _baseTimes = baseTimes;
  return _baseTimes;
}
var _baseIsArguments;
var hasRequired_baseIsArguments;
function require_baseIsArguments() {
  if (hasRequired_baseIsArguments)
    return _baseIsArguments;
  hasRequired_baseIsArguments = 1;
  var baseGetTag2 = _baseGetTag, isObjectLike2 = isObjectLike_1;
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike2(value) && baseGetTag2(value) == argsTag;
  }
  _baseIsArguments = baseIsArguments;
  return _baseIsArguments;
}
var isArguments_1;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments)
    return isArguments_1;
  hasRequiredIsArguments = 1;
  var baseIsArguments = require_baseIsArguments(), isObjectLike2 = isObjectLike_1;
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
  var isArguments = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  isArguments_1 = isArguments;
  return isArguments_1;
}
var isBuffer = { exports: {} };
var stubFalse_1;
var hasRequiredStubFalse;
function requireStubFalse() {
  if (hasRequiredStubFalse)
    return stubFalse_1;
  hasRequiredStubFalse = 1;
  function stubFalse() {
    return false;
  }
  stubFalse_1 = stubFalse;
  return stubFalse_1;
}
isBuffer.exports;
var hasRequiredIsBuffer;
function requireIsBuffer() {
  if (hasRequiredIsBuffer)
    return isBuffer.exports;
  hasRequiredIsBuffer = 1;
  (function(module, exports) {
    var root2 = _root, stubFalse = requireStubFalse();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer || stubFalse;
    module.exports = isBuffer2;
  })(isBuffer, isBuffer.exports);
  return isBuffer.exports;
}
var isLength_1;
var hasRequiredIsLength;
function requireIsLength() {
  if (hasRequiredIsLength)
    return isLength_1;
  hasRequiredIsLength = 1;
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
  }
  isLength_1 = isLength;
  return isLength_1;
}
var _baseIsTypedArray;
var hasRequired_baseIsTypedArray;
function require_baseIsTypedArray() {
  if (hasRequired_baseIsTypedArray)
    return _baseIsTypedArray;
  hasRequired_baseIsTypedArray = 1;
  var baseGetTag2 = _baseGetTag, isLength = requireIsLength(), isObjectLike2 = isObjectLike_1;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike2(value) && isLength(value.length) && !!typedArrayTags[baseGetTag2(value)];
  }
  _baseIsTypedArray = baseIsTypedArray;
  return _baseIsTypedArray;
}
var _baseUnary;
var hasRequired_baseUnary;
function require_baseUnary() {
  if (hasRequired_baseUnary)
    return _baseUnary;
  hasRequired_baseUnary = 1;
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  _baseUnary = baseUnary;
  return _baseUnary;
}
var _nodeUtil = { exports: {} };
_nodeUtil.exports;
var hasRequired_nodeUtil;
function require_nodeUtil() {
  if (hasRequired_nodeUtil)
    return _nodeUtil.exports;
  hasRequired_nodeUtil = 1;
  (function(module, exports) {
    var freeGlobal2 = _freeGlobal;
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal2.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);
  return _nodeUtil.exports;
}
var isTypedArray_1;
var hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray)
    return isTypedArray_1;
  hasRequiredIsTypedArray = 1;
  var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  isTypedArray_1 = isTypedArray;
  return isTypedArray_1;
}
var _arrayLikeKeys;
var hasRequired_arrayLikeKeys;
function require_arrayLikeKeys() {
  if (hasRequired_arrayLikeKeys)
    return _arrayLikeKeys;
  hasRequired_arrayLikeKeys = 1;
  var baseTimes = require_baseTimes(), isArguments = requireIsArguments(), isArray2 = isArray_1, isBuffer2 = requireIsBuffer(), isIndex2 = _isIndex, isTypedArray = requireIsTypedArray();
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex2(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  _arrayLikeKeys = arrayLikeKeys;
  return _arrayLikeKeys;
}
var _isPrototype;
var hasRequired_isPrototype;
function require_isPrototype() {
  if (hasRequired_isPrototype)
    return _isPrototype;
  hasRequired_isPrototype = 1;
  var objectProto2 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
    return value === proto;
  }
  _isPrototype = isPrototype;
  return _isPrototype;
}
var _overArg;
var hasRequired_overArg;
function require_overArg() {
  if (hasRequired_overArg)
    return _overArg;
  hasRequired_overArg = 1;
  function overArg(func, transform7) {
    return function(arg) {
      return func(transform7(arg));
    };
  }
  _overArg = overArg;
  return _overArg;
}
var _nativeKeys;
var hasRequired_nativeKeys;
function require_nativeKeys() {
  if (hasRequired_nativeKeys)
    return _nativeKeys;
  hasRequired_nativeKeys = 1;
  var overArg = require_overArg();
  var nativeKeys = overArg(Object.keys, Object);
  _nativeKeys = nativeKeys;
  return _nativeKeys;
}
var _baseKeys;
var hasRequired_baseKeys;
function require_baseKeys() {
  if (hasRequired_baseKeys)
    return _baseKeys;
  hasRequired_baseKeys = 1;
  var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function baseKeys(object3) {
    if (!isPrototype(object3)) {
      return nativeKeys(object3);
    }
    var result = [];
    for (var key in Object(object3)) {
      if (hasOwnProperty2.call(object3, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeys = baseKeys;
  return _baseKeys;
}
var isArrayLike_1;
var hasRequiredIsArrayLike;
function requireIsArrayLike() {
  if (hasRequiredIsArrayLike)
    return isArrayLike_1;
  hasRequiredIsArrayLike = 1;
  var isFunction2 = isFunction_1, isLength = requireIsLength();
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction2(value);
  }
  isArrayLike_1 = isArrayLike;
  return isArrayLike_1;
}
var keys_1;
var hasRequiredKeys;
function requireKeys() {
  if (hasRequiredKeys)
    return keys_1;
  hasRequiredKeys = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
  function keys(object3) {
    return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
  }
  keys_1 = keys;
  return keys_1;
}
var _baseAssign;
var hasRequired_baseAssign;
function require_baseAssign() {
  if (hasRequired_baseAssign)
    return _baseAssign;
  hasRequired_baseAssign = 1;
  var copyObject = require_copyObject(), keys = requireKeys();
  function baseAssign(object3, source) {
    return object3 && copyObject(source, keys(source), object3);
  }
  _baseAssign = baseAssign;
  return _baseAssign;
}
var _nativeKeysIn;
var hasRequired_nativeKeysIn;
function require_nativeKeysIn() {
  if (hasRequired_nativeKeysIn)
    return _nativeKeysIn;
  hasRequired_nativeKeysIn = 1;
  function nativeKeysIn(object3) {
    var result = [];
    if (object3 != null) {
      for (var key in Object(object3)) {
        result.push(key);
      }
    }
    return result;
  }
  _nativeKeysIn = nativeKeysIn;
  return _nativeKeysIn;
}
var _baseKeysIn;
var hasRequired_baseKeysIn;
function require_baseKeysIn() {
  if (hasRequired_baseKeysIn)
    return _baseKeysIn;
  hasRequired_baseKeysIn = 1;
  var isObject2 = isObject_1, isPrototype = require_isPrototype(), nativeKeysIn = require_nativeKeysIn();
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function baseKeysIn(object3) {
    if (!isObject2(object3)) {
      return nativeKeysIn(object3);
    }
    var isProto = isPrototype(object3), result = [];
    for (var key in object3) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object3, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeysIn = baseKeysIn;
  return _baseKeysIn;
}
var keysIn_1;
var hasRequiredKeysIn;
function requireKeysIn() {
  if (hasRequiredKeysIn)
    return keysIn_1;
  hasRequiredKeysIn = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeysIn = require_baseKeysIn(), isArrayLike = requireIsArrayLike();
  function keysIn(object3) {
    return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
  }
  keysIn_1 = keysIn;
  return keysIn_1;
}
var _baseAssignIn;
var hasRequired_baseAssignIn;
function require_baseAssignIn() {
  if (hasRequired_baseAssignIn)
    return _baseAssignIn;
  hasRequired_baseAssignIn = 1;
  var copyObject = require_copyObject(), keysIn = requireKeysIn();
  function baseAssignIn(object3, source) {
    return object3 && copyObject(source, keysIn(source), object3);
  }
  _baseAssignIn = baseAssignIn;
  return _baseAssignIn;
}
var _cloneBuffer = { exports: {} };
_cloneBuffer.exports;
var hasRequired_cloneBuffer;
function require_cloneBuffer() {
  if (hasRequired_cloneBuffer)
    return _cloneBuffer.exports;
  hasRequired_cloneBuffer = 1;
  (function(module, exports) {
    var root2 = _root;
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);
  return _cloneBuffer.exports;
}
var _arrayFilter;
var hasRequired_arrayFilter;
function require_arrayFilter() {
  if (hasRequired_arrayFilter)
    return _arrayFilter;
  hasRequired_arrayFilter = 1;
  function arrayFilter(array3, predicate) {
    var index = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array3[index];
      if (predicate(value, index, array3)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  _arrayFilter = arrayFilter;
  return _arrayFilter;
}
var stubArray_1;
var hasRequiredStubArray;
function requireStubArray() {
  if (hasRequiredStubArray)
    return stubArray_1;
  hasRequiredStubArray = 1;
  function stubArray() {
    return [];
  }
  stubArray_1 = stubArray;
  return stubArray_1;
}
var _getSymbols;
var hasRequired_getSymbols;
function require_getSymbols() {
  if (hasRequired_getSymbols)
    return _getSymbols;
  hasRequired_getSymbols = 1;
  var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
  var objectProto2 = Object.prototype;
  var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function(object3) {
    if (object3 == null) {
      return [];
    }
    object3 = Object(object3);
    return arrayFilter(nativeGetSymbols(object3), function(symbol) {
      return propertyIsEnumerable.call(object3, symbol);
    });
  };
  _getSymbols = getSymbols;
  return _getSymbols;
}
var _copySymbols;
var hasRequired_copySymbols;
function require_copySymbols() {
  if (hasRequired_copySymbols)
    return _copySymbols;
  hasRequired_copySymbols = 1;
  var copyObject = require_copyObject(), getSymbols = require_getSymbols();
  function copySymbols(source, object3) {
    return copyObject(source, getSymbols(source), object3);
  }
  _copySymbols = copySymbols;
  return _copySymbols;
}
var _arrayPush;
var hasRequired_arrayPush;
function require_arrayPush() {
  if (hasRequired_arrayPush)
    return _arrayPush;
  hasRequired_arrayPush = 1;
  function arrayPush(array3, values) {
    var index = -1, length = values.length, offset = array3.length;
    while (++index < length) {
      array3[offset + index] = values[index];
    }
    return array3;
  }
  _arrayPush = arrayPush;
  return _arrayPush;
}
var _getPrototype;
var hasRequired_getPrototype;
function require_getPrototype() {
  if (hasRequired_getPrototype)
    return _getPrototype;
  hasRequired_getPrototype = 1;
  var overArg = require_overArg();
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  _getPrototype = getPrototype;
  return _getPrototype;
}
var _getSymbolsIn;
var hasRequired_getSymbolsIn;
function require_getSymbolsIn() {
  if (hasRequired_getSymbolsIn)
    return _getSymbolsIn;
  hasRequired_getSymbolsIn = 1;
  var arrayPush = require_arrayPush(), getPrototype = require_getPrototype(), getSymbols = require_getSymbols(), stubArray = requireStubArray();
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
    var result = [];
    while (object3) {
      arrayPush(result, getSymbols(object3));
      object3 = getPrototype(object3);
    }
    return result;
  };
  _getSymbolsIn = getSymbolsIn;
  return _getSymbolsIn;
}
var _copySymbolsIn;
var hasRequired_copySymbolsIn;
function require_copySymbolsIn() {
  if (hasRequired_copySymbolsIn)
    return _copySymbolsIn;
  hasRequired_copySymbolsIn = 1;
  var copyObject = require_copyObject(), getSymbolsIn = require_getSymbolsIn();
  function copySymbolsIn(source, object3) {
    return copyObject(source, getSymbolsIn(source), object3);
  }
  _copySymbolsIn = copySymbolsIn;
  return _copySymbolsIn;
}
var _baseGetAllKeys;
var hasRequired_baseGetAllKeys;
function require_baseGetAllKeys() {
  if (hasRequired_baseGetAllKeys)
    return _baseGetAllKeys;
  hasRequired_baseGetAllKeys = 1;
  var arrayPush = require_arrayPush(), isArray2 = isArray_1;
  function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
    var result = keysFunc(object3);
    return isArray2(object3) ? result : arrayPush(result, symbolsFunc(object3));
  }
  _baseGetAllKeys = baseGetAllKeys;
  return _baseGetAllKeys;
}
var _getAllKeys;
var hasRequired_getAllKeys;
function require_getAllKeys() {
  if (hasRequired_getAllKeys)
    return _getAllKeys;
  hasRequired_getAllKeys = 1;
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys = requireKeys();
  function getAllKeys(object3) {
    return baseGetAllKeys(object3, keys, getSymbols);
  }
  _getAllKeys = getAllKeys;
  return _getAllKeys;
}
var _getAllKeysIn;
var hasRequired_getAllKeysIn;
function require_getAllKeysIn() {
  if (hasRequired_getAllKeysIn)
    return _getAllKeysIn;
  hasRequired_getAllKeysIn = 1;
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbolsIn = require_getSymbolsIn(), keysIn = requireKeysIn();
  function getAllKeysIn(object3) {
    return baseGetAllKeys(object3, keysIn, getSymbolsIn);
  }
  _getAllKeysIn = getAllKeysIn;
  return _getAllKeysIn;
}
var _DataView;
var hasRequired_DataView;
function require_DataView() {
  if (hasRequired_DataView)
    return _DataView;
  hasRequired_DataView = 1;
  var getNative2 = _getNative, root2 = _root;
  var DataView2 = getNative2(root2, "DataView");
  _DataView = DataView2;
  return _DataView;
}
var _Promise;
var hasRequired_Promise;
function require_Promise() {
  if (hasRequired_Promise)
    return _Promise;
  hasRequired_Promise = 1;
  var getNative2 = _getNative, root2 = _root;
  var Promise2 = getNative2(root2, "Promise");
  _Promise = Promise2;
  return _Promise;
}
var _Set;
var hasRequired_Set;
function require_Set() {
  if (hasRequired_Set)
    return _Set;
  hasRequired_Set = 1;
  var getNative2 = _getNative, root2 = _root;
  var Set2 = getNative2(root2, "Set");
  _Set = Set2;
  return _Set;
}
var _WeakMap;
var hasRequired_WeakMap;
function require_WeakMap() {
  if (hasRequired_WeakMap)
    return _WeakMap;
  hasRequired_WeakMap = 1;
  var getNative2 = _getNative, root2 = _root;
  var WeakMap = getNative2(root2, "WeakMap");
  _WeakMap = WeakMap;
  return _WeakMap;
}
var _getTag;
var hasRequired_getTag;
function require_getTag() {
  if (hasRequired_getTag)
    return _getTag;
  hasRequired_getTag = 1;
  var DataView2 = require_DataView(), Map2 = _Map, Promise2 = require_Promise(), Set2 = require_Set(), WeakMap = require_WeakMap(), baseGetTag2 = _baseGetTag, toSource2 = _toSource;
  var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
  var dataViewTag = "[object DataView]";
  var dataViewCtorString = toSource2(DataView2), mapCtorString = toSource2(Map2), promiseCtorString = toSource2(Promise2), setCtorString = toSource2(Set2), weakMapCtorString = toSource2(WeakMap);
  var getTag = baseGetTag2;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag2(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  _getTag = getTag;
  return _getTag;
}
var _initCloneArray;
var hasRequired_initCloneArray;
function require_initCloneArray() {
  if (hasRequired_initCloneArray)
    return _initCloneArray;
  hasRequired_initCloneArray = 1;
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function initCloneArray(array3) {
    var length = array3.length, result = new array3.constructor(length);
    if (length && typeof array3[0] == "string" && hasOwnProperty2.call(array3, "index")) {
      result.index = array3.index;
      result.input = array3.input;
    }
    return result;
  }
  _initCloneArray = initCloneArray;
  return _initCloneArray;
}
var _Uint8Array;
var hasRequired_Uint8Array;
function require_Uint8Array() {
  if (hasRequired_Uint8Array)
    return _Uint8Array;
  hasRequired_Uint8Array = 1;
  var root2 = _root;
  var Uint8Array2 = root2.Uint8Array;
  _Uint8Array = Uint8Array2;
  return _Uint8Array;
}
var _cloneArrayBuffer;
var hasRequired_cloneArrayBuffer;
function require_cloneArrayBuffer() {
  if (hasRequired_cloneArrayBuffer)
    return _cloneArrayBuffer;
  hasRequired_cloneArrayBuffer = 1;
  var Uint8Array2 = require_Uint8Array();
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  _cloneArrayBuffer = cloneArrayBuffer;
  return _cloneArrayBuffer;
}
var _cloneDataView;
var hasRequired_cloneDataView;
function require_cloneDataView() {
  if (hasRequired_cloneDataView)
    return _cloneDataView;
  hasRequired_cloneDataView = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer();
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  _cloneDataView = cloneDataView;
  return _cloneDataView;
}
var _cloneRegExp;
var hasRequired_cloneRegExp;
function require_cloneRegExp() {
  if (hasRequired_cloneRegExp)
    return _cloneRegExp;
  hasRequired_cloneRegExp = 1;
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  _cloneRegExp = cloneRegExp;
  return _cloneRegExp;
}
var _cloneSymbol;
var hasRequired_cloneSymbol;
function require_cloneSymbol() {
  if (hasRequired_cloneSymbol)
    return _cloneSymbol;
  hasRequired_cloneSymbol = 1;
  var Symbol2 = _Symbol;
  var symbolProto2 = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  _cloneSymbol = cloneSymbol;
  return _cloneSymbol;
}
var _cloneTypedArray;
var hasRequired_cloneTypedArray;
function require_cloneTypedArray() {
  if (hasRequired_cloneTypedArray)
    return _cloneTypedArray;
  hasRequired_cloneTypedArray = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer();
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  _cloneTypedArray = cloneTypedArray;
  return _cloneTypedArray;
}
var _initCloneByTag;
var hasRequired_initCloneByTag;
function require_initCloneByTag() {
  if (hasRequired_initCloneByTag)
    return _initCloneByTag;
  hasRequired_initCloneByTag = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer(), cloneDataView = require_cloneDataView(), cloneRegExp = require_cloneRegExp(), cloneSymbol = require_cloneSymbol(), cloneTypedArray = require_cloneTypedArray();
  var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  function initCloneByTag(object3, tag, isDeep) {
    var Ctor = object3.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object3);
      case boolTag:
      case dateTag:
        return new Ctor(+object3);
      case dataViewTag:
        return cloneDataView(object3, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object3, isDeep);
      case mapTag:
        return new Ctor();
      case numberTag:
      case stringTag:
        return new Ctor(object3);
      case regexpTag:
        return cloneRegExp(object3);
      case setTag:
        return new Ctor();
      case symbolTag2:
        return cloneSymbol(object3);
    }
  }
  _initCloneByTag = initCloneByTag;
  return _initCloneByTag;
}
var _baseCreate;
var hasRequired_baseCreate;
function require_baseCreate() {
  if (hasRequired_baseCreate)
    return _baseCreate;
  hasRequired_baseCreate = 1;
  var isObject2 = isObject_1;
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object3() {
    }
    return function(proto) {
      if (!isObject2(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object3.prototype = proto;
      var result = new object3();
      object3.prototype = void 0;
      return result;
    };
  }();
  _baseCreate = baseCreate;
  return _baseCreate;
}
var _initCloneObject;
var hasRequired_initCloneObject;
function require_initCloneObject() {
  if (hasRequired_initCloneObject)
    return _initCloneObject;
  hasRequired_initCloneObject = 1;
  var baseCreate = require_baseCreate(), getPrototype = require_getPrototype(), isPrototype = require_isPrototype();
  function initCloneObject(object3) {
    return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate(getPrototype(object3)) : {};
  }
  _initCloneObject = initCloneObject;
  return _initCloneObject;
}
var _baseIsMap;
var hasRequired_baseIsMap;
function require_baseIsMap() {
  if (hasRequired_baseIsMap)
    return _baseIsMap;
  hasRequired_baseIsMap = 1;
  var getTag = require_getTag(), isObjectLike2 = isObjectLike_1;
  var mapTag = "[object Map]";
  function baseIsMap(value) {
    return isObjectLike2(value) && getTag(value) == mapTag;
  }
  _baseIsMap = baseIsMap;
  return _baseIsMap;
}
var isMap_1;
var hasRequiredIsMap;
function requireIsMap() {
  if (hasRequiredIsMap)
    return isMap_1;
  hasRequiredIsMap = 1;
  var baseIsMap = require_baseIsMap(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  isMap_1 = isMap;
  return isMap_1;
}
var _baseIsSet;
var hasRequired_baseIsSet;
function require_baseIsSet() {
  if (hasRequired_baseIsSet)
    return _baseIsSet;
  hasRequired_baseIsSet = 1;
  var getTag = require_getTag(), isObjectLike2 = isObjectLike_1;
  var setTag = "[object Set]";
  function baseIsSet(value) {
    return isObjectLike2(value) && getTag(value) == setTag;
  }
  _baseIsSet = baseIsSet;
  return _baseIsSet;
}
var isSet_1;
var hasRequiredIsSet;
function requireIsSet() {
  if (hasRequiredIsSet)
    return isSet_1;
  hasRequiredIsSet = 1;
  var baseIsSet = require_baseIsSet(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  isSet_1 = isSet;
  return isSet_1;
}
var _baseClone;
var hasRequired_baseClone;
function require_baseClone() {
  if (hasRequired_baseClone)
    return _baseClone;
  hasRequired_baseClone = 1;
  var Stack = require_Stack(), arrayEach = require_arrayEach(), assignValue2 = _assignValue, baseAssign = require_baseAssign(), baseAssignIn = require_baseAssignIn(), cloneBuffer = require_cloneBuffer(), copyArray3 = _copyArray, copySymbols = require_copySymbols(), copySymbolsIn = require_copySymbolsIn(), getAllKeys = require_getAllKeys(), getAllKeysIn = require_getAllKeysIn(), getTag = require_getTag(), initCloneArray = require_initCloneArray(), initCloneByTag = require_initCloneByTag(), initCloneObject = require_initCloneObject(), isArray2 = isArray_1, isBuffer2 = requireIsBuffer(), isMap = requireIsMap(), isObject2 = isObject_1, isSet = requireIsSet(), keys = requireKeys(), keysIn = requireKeysIn();
  var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag2] = cloneableTags[weakMapTag] = false;
  function baseClone(value, bitmask, customizer, key, object3, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result = object3 ? customizer(value, key, object3, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject2(value)) {
      return value;
    }
    var isArr = isArray2(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray3(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag2 || tag == genTag2;
      if (isBuffer2(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object3) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object3 ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? void 0 : keysFunc(value);
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue2(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  _baseClone = baseClone;
  return _baseClone;
}
var clone_1;
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone)
    return clone_1;
  hasRequiredClone = 1;
  var baseClone = require_baseClone();
  var CLONE_SYMBOLS_FLAG = 4;
  function clone3(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
  }
  clone_1 = clone3;
  return clone_1;
}
var constant_1;
var hasRequiredConstant;
function requireConstant() {
  if (hasRequiredConstant)
    return constant_1;
  hasRequiredConstant = 1;
  function constant(value) {
    return function() {
      return value;
    };
  }
  constant_1 = constant;
  return constant_1;
}
var _createBaseFor;
var hasRequired_createBaseFor;
function require_createBaseFor() {
  if (hasRequired_createBaseFor)
    return _createBaseFor;
  hasRequired_createBaseFor = 1;
  function createBaseFor(fromRight) {
    return function(object3, iteratee, keysFunc) {
      var index = -1, iterable = Object(object3), props = keysFunc(object3), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object3;
    };
  }
  _createBaseFor = createBaseFor;
  return _createBaseFor;
}
var _baseFor;
var hasRequired_baseFor;
function require_baseFor() {
  if (hasRequired_baseFor)
    return _baseFor;
  hasRequired_baseFor = 1;
  var createBaseFor = require_createBaseFor();
  var baseFor = createBaseFor();
  _baseFor = baseFor;
  return _baseFor;
}
var _baseForOwn;
var hasRequired_baseForOwn;
function require_baseForOwn() {
  if (hasRequired_baseForOwn)
    return _baseForOwn;
  hasRequired_baseForOwn = 1;
  var baseFor = require_baseFor(), keys = requireKeys();
  function baseForOwn(object3, iteratee) {
    return object3 && baseFor(object3, iteratee, keys);
  }
  _baseForOwn = baseForOwn;
  return _baseForOwn;
}
var _createBaseEach;
var hasRequired_createBaseEach;
function require_createBaseEach() {
  if (hasRequired_createBaseEach)
    return _createBaseEach;
  hasRequired_createBaseEach = 1;
  var isArrayLike = requireIsArrayLike();
  function createBaseEach(eachFunc, fromRight) {
    return function(collection4, iteratee) {
      if (collection4 == null) {
        return collection4;
      }
      if (!isArrayLike(collection4)) {
        return eachFunc(collection4, iteratee);
      }
      var length = collection4.length, index = fromRight ? length : -1, iterable = Object(collection4);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection4;
    };
  }
  _createBaseEach = createBaseEach;
  return _createBaseEach;
}
var _baseEach;
var hasRequired_baseEach;
function require_baseEach() {
  if (hasRequired_baseEach)
    return _baseEach;
  hasRequired_baseEach = 1;
  var baseForOwn = require_baseForOwn(), createBaseEach = require_createBaseEach();
  var baseEach = createBaseEach(baseForOwn);
  _baseEach = baseEach;
  return _baseEach;
}
var identity_1;
var hasRequiredIdentity;
function requireIdentity() {
  if (hasRequiredIdentity)
    return identity_1;
  hasRequiredIdentity = 1;
  function identity3(value) {
    return value;
  }
  identity_1 = identity3;
  return identity_1;
}
var _castFunction;
var hasRequired_castFunction;
function require_castFunction() {
  if (hasRequired_castFunction)
    return _castFunction;
  hasRequired_castFunction = 1;
  var identity3 = requireIdentity();
  function castFunction(value) {
    return typeof value == "function" ? value : identity3;
  }
  _castFunction = castFunction;
  return _castFunction;
}
var forEach_1;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach)
    return forEach_1;
  hasRequiredForEach = 1;
  var arrayEach = require_arrayEach(), baseEach = require_baseEach(), castFunction = require_castFunction(), isArray2 = isArray_1;
  function forEach2(collection4, iteratee) {
    var func = isArray2(collection4) ? arrayEach : baseEach;
    return func(collection4, castFunction(iteratee));
  }
  forEach_1 = forEach2;
  return forEach_1;
}
var each;
var hasRequiredEach;
function requireEach() {
  if (hasRequiredEach)
    return each;
  hasRequiredEach = 1;
  each = requireForEach();
  return each;
}
var _baseFilter;
var hasRequired_baseFilter;
function require_baseFilter() {
  if (hasRequired_baseFilter)
    return _baseFilter;
  hasRequired_baseFilter = 1;
  var baseEach = require_baseEach();
  function baseFilter(collection4, predicate) {
    var result = [];
    baseEach(collection4, function(value, index, collection5) {
      if (predicate(value, index, collection5)) {
        result.push(value);
      }
    });
    return result;
  }
  _baseFilter = baseFilter;
  return _baseFilter;
}
var _setCacheAdd;
var hasRequired_setCacheAdd;
function require_setCacheAdd() {
  if (hasRequired_setCacheAdd)
    return _setCacheAdd;
  hasRequired_setCacheAdd = 1;
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED2);
    return this;
  }
  _setCacheAdd = setCacheAdd;
  return _setCacheAdd;
}
var _setCacheHas;
var hasRequired_setCacheHas;
function require_setCacheHas() {
  if (hasRequired_setCacheHas)
    return _setCacheHas;
  hasRequired_setCacheHas = 1;
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  _setCacheHas = setCacheHas;
  return _setCacheHas;
}
var _SetCache;
var hasRequired_SetCache;
function require_SetCache() {
  if (hasRequired_SetCache)
    return _SetCache;
  hasRequired_SetCache = 1;
  var MapCache2 = _MapCache, setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
  function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache2();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  _SetCache = SetCache;
  return _SetCache;
}
var _arraySome;
var hasRequired_arraySome;
function require_arraySome() {
  if (hasRequired_arraySome)
    return _arraySome;
  hasRequired_arraySome = 1;
  function arraySome(array3, predicate) {
    var index = -1, length = array3 == null ? 0 : array3.length;
    while (++index < length) {
      if (predicate(array3[index], index, array3)) {
        return true;
      }
    }
    return false;
  }
  _arraySome = arraySome;
  return _arraySome;
}
var _cacheHas;
var hasRequired_cacheHas;
function require_cacheHas() {
  if (hasRequired_cacheHas)
    return _cacheHas;
  hasRequired_cacheHas = 1;
  function cacheHas(cache3, key) {
    return cache3.has(key);
  }
  _cacheHas = cacheHas;
  return _cacheHas;
}
var _equalArrays;
var hasRequired_equalArrays;
function require_equalArrays() {
  if (hasRequired_equalArrays)
    return _equalArrays;
  hasRequired_equalArrays = 1;
  var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array3.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array3);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array3;
    }
    var index = -1, result = true, seen2 = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
    stack.set(array3, other);
    stack.set(other, array3);
    while (++index < arrLength) {
      var arrValue = array3[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array3, stack) : customizer(arrValue, othValue, index, array3, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen2) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen2, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen2.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array3);
    stack["delete"](other);
    return result;
  }
  _equalArrays = equalArrays;
  return _equalArrays;
}
var _mapToArray;
var hasRequired_mapToArray;
function require_mapToArray() {
  if (hasRequired_mapToArray)
    return _mapToArray;
  hasRequired_mapToArray = 1;
  function mapToArray(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  _mapToArray = mapToArray;
  return _mapToArray;
}
var _setToArray;
var hasRequired_setToArray;
function require_setToArray() {
  if (hasRequired_setToArray)
    return _setToArray;
  hasRequired_setToArray = 1;
  function setToArray(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  _setToArray = setToArray;
  return _setToArray;
}
var _equalByTag;
var hasRequired_equalByTag;
function require_equalByTag() {
  if (hasRequired_equalByTag)
    return _equalByTag;
  hasRequired_equalByTag = 1;
  var Symbol2 = _Symbol, Uint8Array2 = require_Uint8Array(), eq3 = eq_1, equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
  var symbolProto2 = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
  function equalByTag(object3, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
          return false;
        }
        object3 = object3.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object3), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq3(+object3, +other);
      case errorTag:
        return object3.name == other.name && object3.message == other.message;
      case regexpTag:
      case stringTag:
        return object3 == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);
        if (object3.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object3);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object3, other);
        var result = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object3);
        return result;
      case symbolTag2:
        if (symbolValueOf) {
          return symbolValueOf.call(object3) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  _equalByTag = equalByTag;
  return _equalByTag;
}
var _equalObjects;
var hasRequired_equalObjects;
function require_equalObjects() {
  if (hasRequired_equalObjects)
    return _equalObjects;
  hasRequired_equalObjects = 1;
  var getAllKeys = require_getAllKeys();
  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object3);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object3;
    }
    var result = true;
    stack.set(object3, other);
    stack.set(other, object3);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object3[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object3.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object3);
    stack["delete"](other);
    return result;
  }
  _equalObjects = equalObjects;
  return _equalObjects;
}
var _baseIsEqualDeep;
var hasRequired_baseIsEqualDeep;
function require_baseIsEqualDeep() {
  if (hasRequired_baseIsEqualDeep)
    return _baseIsEqualDeep;
  hasRequired_baseIsEqualDeep = 1;
  var Stack = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag = require_getTag(), isArray2 = isArray_1, isBuffer2 = requireIsBuffer(), isTypedArray = requireIsTypedArray();
  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray2(object3), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object3), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer2(object3)) {
      if (!isBuffer2(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty2.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
  }
  _baseIsEqualDeep = baseIsEqualDeep;
  return _baseIsEqualDeep;
}
var _baseIsEqual;
var hasRequired_baseIsEqual;
function require_baseIsEqual() {
  if (hasRequired_baseIsEqual)
    return _baseIsEqual;
  hasRequired_baseIsEqual = 1;
  var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike2 = isObjectLike_1;
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  _baseIsEqual = baseIsEqual;
  return _baseIsEqual;
}
var _baseIsMatch;
var hasRequired_baseIsMatch;
function require_baseIsMatch() {
  if (hasRequired_baseIsMatch)
    return _baseIsMatch;
  hasRequired_baseIsMatch = 1;
  var Stack = require_Stack(), baseIsEqual = require_baseIsEqual();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseIsMatch(object3, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object3 == null) {
      return !length;
    }
    object3 = Object(object3);
    while (index--) {
      var data4 = matchData[index];
      if (noCustomizer && data4[2] ? data4[1] !== object3[data4[0]] : !(data4[0] in object3)) {
        return false;
      }
    }
    while (++index < length) {
      data4 = matchData[index];
      var key = data4[0], objValue = object3[key], srcValue = data4[1];
      if (noCustomizer && data4[2]) {
        if (objValue === void 0 && !(key in object3)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object3, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  _baseIsMatch = baseIsMatch;
  return _baseIsMatch;
}
var _isStrictComparable;
var hasRequired_isStrictComparable;
function require_isStrictComparable() {
  if (hasRequired_isStrictComparable)
    return _isStrictComparable;
  hasRequired_isStrictComparable = 1;
  var isObject2 = isObject_1;
  function isStrictComparable(value) {
    return value === value && !isObject2(value);
  }
  _isStrictComparable = isStrictComparable;
  return _isStrictComparable;
}
var _getMatchData;
var hasRequired_getMatchData;
function require_getMatchData() {
  if (hasRequired_getMatchData)
    return _getMatchData;
  hasRequired_getMatchData = 1;
  var isStrictComparable = require_isStrictComparable(), keys = requireKeys();
  function getMatchData(object3) {
    var result = keys(object3), length = result.length;
    while (length--) {
      var key = result[length], value = object3[key];
      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }
  _getMatchData = getMatchData;
  return _getMatchData;
}
var _matchesStrictComparable;
var hasRequired_matchesStrictComparable;
function require_matchesStrictComparable() {
  if (hasRequired_matchesStrictComparable)
    return _matchesStrictComparable;
  hasRequired_matchesStrictComparable = 1;
  function matchesStrictComparable(key, srcValue) {
    return function(object3) {
      if (object3 == null) {
        return false;
      }
      return object3[key] === srcValue && (srcValue !== void 0 || key in Object(object3));
    };
  }
  _matchesStrictComparable = matchesStrictComparable;
  return _matchesStrictComparable;
}
var _baseMatches;
var hasRequired_baseMatches;
function require_baseMatches() {
  if (hasRequired_baseMatches)
    return _baseMatches;
  hasRequired_baseMatches = 1;
  var baseIsMatch = require_baseIsMatch(), getMatchData = require_getMatchData(), matchesStrictComparable = require_matchesStrictComparable();
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object3) {
      return object3 === source || baseIsMatch(object3, source, matchData);
    };
  }
  _baseMatches = baseMatches;
  return _baseMatches;
}
var _baseHasIn;
var hasRequired_baseHasIn;
function require_baseHasIn() {
  if (hasRequired_baseHasIn)
    return _baseHasIn;
  hasRequired_baseHasIn = 1;
  function baseHasIn(object3, key) {
    return object3 != null && key in Object(object3);
  }
  _baseHasIn = baseHasIn;
  return _baseHasIn;
}
var _hasPath;
var hasRequired_hasPath;
function require_hasPath() {
  if (hasRequired_hasPath)
    return _hasPath;
  hasRequired_hasPath = 1;
  var castPath2 = _castPath, isArguments = requireIsArguments(), isArray2 = isArray_1, isIndex2 = _isIndex, isLength = requireIsLength(), toKey2 = _toKey;
  function hasPath(object3, path, hasFunc) {
    path = castPath2(path, object3);
    var index = -1, length = path.length, result = false;
    while (++index < length) {
      var key = toKey2(path[index]);
      if (!(result = object3 != null && hasFunc(object3, key))) {
        break;
      }
      object3 = object3[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object3 == null ? 0 : object3.length;
    return !!length && isLength(length) && isIndex2(key, length) && (isArray2(object3) || isArguments(object3));
  }
  _hasPath = hasPath;
  return _hasPath;
}
var hasIn_1;
var hasRequiredHasIn;
function requireHasIn() {
  if (hasRequiredHasIn)
    return hasIn_1;
  hasRequiredHasIn = 1;
  var baseHasIn = require_baseHasIn(), hasPath = require_hasPath();
  function hasIn(object3, path) {
    return object3 != null && hasPath(object3, path, baseHasIn);
  }
  hasIn_1 = hasIn;
  return hasIn_1;
}
var _baseMatchesProperty;
var hasRequired_baseMatchesProperty;
function require_baseMatchesProperty() {
  if (hasRequired_baseMatchesProperty)
    return _baseMatchesProperty;
  hasRequired_baseMatchesProperty = 1;
  var baseIsEqual = require_baseIsEqual(), get2 = get_1, hasIn = requireHasIn(), isKey2 = _isKey, isStrictComparable = require_isStrictComparable(), matchesStrictComparable = require_matchesStrictComparable(), toKey2 = _toKey;
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey2(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey2(path), srcValue);
    }
    return function(object3) {
      var objValue = get2(object3, path);
      return objValue === void 0 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }
  _baseMatchesProperty = baseMatchesProperty;
  return _baseMatchesProperty;
}
var _baseProperty;
var hasRequired_baseProperty;
function require_baseProperty() {
  if (hasRequired_baseProperty)
    return _baseProperty;
  hasRequired_baseProperty = 1;
  function baseProperty(key) {
    return function(object3) {
      return object3 == null ? void 0 : object3[key];
    };
  }
  _baseProperty = baseProperty;
  return _baseProperty;
}
var _basePropertyDeep;
var hasRequired_basePropertyDeep;
function require_basePropertyDeep() {
  if (hasRequired_basePropertyDeep)
    return _basePropertyDeep;
  hasRequired_basePropertyDeep = 1;
  var baseGet2 = _baseGet;
  function basePropertyDeep(path) {
    return function(object3) {
      return baseGet2(object3, path);
    };
  }
  _basePropertyDeep = basePropertyDeep;
  return _basePropertyDeep;
}
var property_1;
var hasRequiredProperty;
function requireProperty() {
  if (hasRequiredProperty)
    return property_1;
  hasRequiredProperty = 1;
  var baseProperty = require_baseProperty(), basePropertyDeep = require_basePropertyDeep(), isKey2 = _isKey, toKey2 = _toKey;
  function property(path) {
    return isKey2(path) ? baseProperty(toKey2(path)) : basePropertyDeep(path);
  }
  property_1 = property;
  return property_1;
}
var _baseIteratee;
var hasRequired_baseIteratee;
function require_baseIteratee() {
  if (hasRequired_baseIteratee)
    return _baseIteratee;
  hasRequired_baseIteratee = 1;
  var baseMatches = require_baseMatches(), baseMatchesProperty = require_baseMatchesProperty(), identity3 = requireIdentity(), isArray2 = isArray_1, property = requireProperty();
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity3;
    }
    if (typeof value == "object") {
      return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }
  _baseIteratee = baseIteratee;
  return _baseIteratee;
}
var filter_1;
var hasRequiredFilter;
function requireFilter() {
  if (hasRequiredFilter)
    return filter_1;
  hasRequiredFilter = 1;
  var arrayFilter = require_arrayFilter(), baseFilter = require_baseFilter(), baseIteratee = require_baseIteratee(), isArray2 = isArray_1;
  function filter4(collection4, predicate) {
    var func = isArray2(collection4) ? arrayFilter : baseFilter;
    return func(collection4, baseIteratee(predicate, 3));
  }
  filter_1 = filter4;
  return filter_1;
}
var _baseHas;
var hasRequired_baseHas;
function require_baseHas() {
  if (hasRequired_baseHas)
    return _baseHas;
  hasRequired_baseHas = 1;
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function baseHas(object3, key) {
    return object3 != null && hasOwnProperty2.call(object3, key);
  }
  _baseHas = baseHas;
  return _baseHas;
}
var has_1;
var hasRequiredHas;
function requireHas() {
  if (hasRequiredHas)
    return has_1;
  hasRequiredHas = 1;
  var baseHas = require_baseHas(), hasPath = require_hasPath();
  function has(object3, path) {
    return object3 != null && hasPath(object3, path, baseHas);
  }
  has_1 = has;
  return has_1;
}
var isEmpty_1;
var hasRequiredIsEmpty;
function requireIsEmpty() {
  if (hasRequiredIsEmpty)
    return isEmpty_1;
  hasRequiredIsEmpty = 1;
  var baseKeys = require_baseKeys(), getTag = require_getTag(), isArguments = requireIsArguments(), isArray2 = isArray_1, isArrayLike = requireIsArrayLike(), isBuffer2 = requireIsBuffer(), isPrototype = require_isPrototype(), isTypedArray = requireIsTypedArray();
  var mapTag = "[object Map]", setTag = "[object Set]";
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty2.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  isEmpty_1 = isEmpty;
  return isEmpty_1;
}
var isUndefined_1;
var hasRequiredIsUndefined;
function requireIsUndefined() {
  if (hasRequiredIsUndefined)
    return isUndefined_1;
  hasRequiredIsUndefined = 1;
  function isUndefined(value) {
    return value === void 0;
  }
  isUndefined_1 = isUndefined;
  return isUndefined_1;
}
var _baseMap;
var hasRequired_baseMap;
function require_baseMap() {
  if (hasRequired_baseMap)
    return _baseMap;
  hasRequired_baseMap = 1;
  var baseEach = require_baseEach(), isArrayLike = requireIsArrayLike();
  function baseMap(collection4, iteratee) {
    var index = -1, result = isArrayLike(collection4) ? Array(collection4.length) : [];
    baseEach(collection4, function(value, key, collection5) {
      result[++index] = iteratee(value, key, collection5);
    });
    return result;
  }
  _baseMap = baseMap;
  return _baseMap;
}
var map_1;
var hasRequiredMap;
function requireMap() {
  if (hasRequiredMap)
    return map_1;
  hasRequiredMap = 1;
  var arrayMap2 = _arrayMap, baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), isArray2 = isArray_1;
  function map2(collection4, iteratee) {
    var func = isArray2(collection4) ? arrayMap2 : baseMap;
    return func(collection4, baseIteratee(iteratee, 3));
  }
  map_1 = map2;
  return map_1;
}
var _arrayReduce;
var hasRequired_arrayReduce;
function require_arrayReduce() {
  if (hasRequired_arrayReduce)
    return _arrayReduce;
  hasRequired_arrayReduce = 1;
  function arrayReduce(array3, iteratee, accumulator, initAccum) {
    var index = -1, length = array3 == null ? 0 : array3.length;
    if (initAccum && length) {
      accumulator = array3[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array3[index], index, array3);
    }
    return accumulator;
  }
  _arrayReduce = arrayReduce;
  return _arrayReduce;
}
var _baseReduce;
var hasRequired_baseReduce;
function require_baseReduce() {
  if (hasRequired_baseReduce)
    return _baseReduce;
  hasRequired_baseReduce = 1;
  function baseReduce(collection4, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection4, function(value, index, collection5) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection5);
    });
    return accumulator;
  }
  _baseReduce = baseReduce;
  return _baseReduce;
}
var reduce_1;
var hasRequiredReduce;
function requireReduce() {
  if (hasRequiredReduce)
    return reduce_1;
  hasRequiredReduce = 1;
  var arrayReduce = require_arrayReduce(), baseEach = require_baseEach(), baseIteratee = require_baseIteratee(), baseReduce = require_baseReduce(), isArray2 = isArray_1;
  function reduce2(collection4, iteratee, accumulator) {
    var func = isArray2(collection4) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
    return func(collection4, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
  }
  reduce_1 = reduce2;
  return reduce_1;
}
var isString_1;
var hasRequiredIsString;
function requireIsString() {
  if (hasRequiredIsString)
    return isString_1;
  hasRequiredIsString = 1;
  var baseGetTag2 = _baseGetTag, isArray2 = isArray_1, isObjectLike2 = isObjectLike_1;
  var stringTag = "[object String]";
  function isString(value) {
    return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag;
  }
  isString_1 = isString;
  return isString_1;
}
var _asciiSize;
var hasRequired_asciiSize;
function require_asciiSize() {
  if (hasRequired_asciiSize)
    return _asciiSize;
  hasRequired_asciiSize = 1;
  var baseProperty = require_baseProperty();
  var asciiSize = baseProperty("length");
  _asciiSize = asciiSize;
  return _asciiSize;
}
var _hasUnicode;
var hasRequired_hasUnicode;
function require_hasUnicode() {
  if (hasRequired_hasUnicode)
    return _hasUnicode;
  hasRequired_hasUnicode = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsZWJ = "\\u200d";
  var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
  function hasUnicode(string3) {
    return reHasUnicode.test(string3);
  }
  _hasUnicode = hasUnicode;
  return _hasUnicode;
}
var _unicodeSize;
var hasRequired_unicodeSize;
function require_unicodeSize() {
  if (hasRequired_unicodeSize)
    return _unicodeSize;
  hasRequired_unicodeSize = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
  var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
  var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
  function unicodeSize(string3) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string3)) {
      ++result;
    }
    return result;
  }
  _unicodeSize = unicodeSize;
  return _unicodeSize;
}
var _stringSize;
var hasRequired_stringSize;
function require_stringSize() {
  if (hasRequired_stringSize)
    return _stringSize;
  hasRequired_stringSize = 1;
  var asciiSize = require_asciiSize(), hasUnicode = require_hasUnicode(), unicodeSize = require_unicodeSize();
  function stringSize(string3) {
    return hasUnicode(string3) ? unicodeSize(string3) : asciiSize(string3);
  }
  _stringSize = stringSize;
  return _stringSize;
}
var size_1;
var hasRequiredSize;
function requireSize() {
  if (hasRequiredSize)
    return size_1;
  hasRequiredSize = 1;
  var baseKeys = require_baseKeys(), getTag = require_getTag(), isArrayLike = requireIsArrayLike(), isString = requireIsString(), stringSize = require_stringSize();
  var mapTag = "[object Map]", setTag = "[object Set]";
  function size3(collection4) {
    if (collection4 == null) {
      return 0;
    }
    if (isArrayLike(collection4)) {
      return isString(collection4) ? stringSize(collection4) : collection4.length;
    }
    var tag = getTag(collection4);
    if (tag == mapTag || tag == setTag) {
      return collection4.size;
    }
    return baseKeys(collection4).length;
  }
  size_1 = size3;
  return size_1;
}
var transform_1;
var hasRequiredTransform;
function requireTransform() {
  if (hasRequiredTransform)
    return transform_1;
  hasRequiredTransform = 1;
  var arrayEach = require_arrayEach(), baseCreate = require_baseCreate(), baseForOwn = require_baseForOwn(), baseIteratee = require_baseIteratee(), getPrototype = require_getPrototype(), isArray2 = isArray_1, isBuffer2 = requireIsBuffer(), isFunction2 = isFunction_1, isObject2 = isObject_1, isTypedArray = requireIsTypedArray();
  function transform7(object3, iteratee, accumulator) {
    var isArr = isArray2(object3), isArrLike = isArr || isBuffer2(object3) || isTypedArray(object3);
    iteratee = baseIteratee(iteratee, 4);
    if (accumulator == null) {
      var Ctor = object3 && object3.constructor;
      if (isArrLike) {
        accumulator = isArr ? new Ctor() : [];
      } else if (isObject2(object3)) {
        accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object3)) : {};
      } else {
        accumulator = {};
      }
    }
    (isArrLike ? arrayEach : baseForOwn)(object3, function(value, index, object4) {
      return iteratee(accumulator, value, index, object4);
    });
    return accumulator;
  }
  transform_1 = transform7;
  return transform_1;
}
var _isFlattenable;
var hasRequired_isFlattenable;
function require_isFlattenable() {
  if (hasRequired_isFlattenable)
    return _isFlattenable;
  hasRequired_isFlattenable = 1;
  var Symbol2 = _Symbol, isArguments = requireIsArguments(), isArray2 = isArray_1;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  _isFlattenable = isFlattenable;
  return _isFlattenable;
}
var _baseFlatten;
var hasRequired_baseFlatten;
function require_baseFlatten() {
  if (hasRequired_baseFlatten)
    return _baseFlatten;
  hasRequired_baseFlatten = 1;
  var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
  function baseFlatten(array3, depth, predicate, isStrict, result) {
    var index = -1, length = array3.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array3[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  _baseFlatten = baseFlatten;
  return _baseFlatten;
}
var _apply;
var hasRequired_apply;
function require_apply() {
  if (hasRequired_apply)
    return _apply;
  hasRequired_apply = 1;
  function apply2(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  _apply = apply2;
  return _apply;
}
var _overRest;
var hasRequired_overRest;
function require_overRest() {
  if (hasRequired_overRest)
    return _overRest;
  hasRequired_overRest = 1;
  var apply2 = require_apply();
  var nativeMax2 = Math.max;
  function overRest(func, start, transform7) {
    start = nativeMax2(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax2(args.length - start, 0), array3 = Array(length);
      while (++index < length) {
        array3[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform7(array3);
      return apply2(func, this, otherArgs);
    };
  }
  _overRest = overRest;
  return _overRest;
}
var _baseSetToString;
var hasRequired_baseSetToString;
function require_baseSetToString() {
  if (hasRequired_baseSetToString)
    return _baseSetToString;
  hasRequired_baseSetToString = 1;
  var constant = requireConstant(), defineProperty2 = _defineProperty$1, identity3 = requireIdentity();
  var baseSetToString = !defineProperty2 ? identity3 : function(func, string3) {
    return defineProperty2(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string3),
      "writable": true
    });
  };
  _baseSetToString = baseSetToString;
  return _baseSetToString;
}
var _shortOut;
var hasRequired_shortOut;
function require_shortOut() {
  if (hasRequired_shortOut)
    return _shortOut;
  hasRequired_shortOut = 1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  _shortOut = shortOut;
  return _shortOut;
}
var _setToString;
var hasRequired_setToString;
function require_setToString() {
  if (hasRequired_setToString)
    return _setToString;
  hasRequired_setToString = 1;
  var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
  var setToString = shortOut(baseSetToString);
  _setToString = setToString;
  return _setToString;
}
var _baseRest;
var hasRequired_baseRest;
function require_baseRest() {
  if (hasRequired_baseRest)
    return _baseRest;
  hasRequired_baseRest = 1;
  var identity3 = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity3), func + "");
  }
  _baseRest = baseRest;
  return _baseRest;
}
var _baseFindIndex;
var hasRequired_baseFindIndex;
function require_baseFindIndex() {
  if (hasRequired_baseFindIndex)
    return _baseFindIndex;
  hasRequired_baseFindIndex = 1;
  function baseFindIndex(array3, predicate, fromIndex, fromRight) {
    var length = array3.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array3[index], index, array3)) {
        return index;
      }
    }
    return -1;
  }
  _baseFindIndex = baseFindIndex;
  return _baseFindIndex;
}
var _baseIsNaN;
var hasRequired_baseIsNaN;
function require_baseIsNaN() {
  if (hasRequired_baseIsNaN)
    return _baseIsNaN;
  hasRequired_baseIsNaN = 1;
  function baseIsNaN(value) {
    return value !== value;
  }
  _baseIsNaN = baseIsNaN;
  return _baseIsNaN;
}
var _strictIndexOf;
var hasRequired_strictIndexOf;
function require_strictIndexOf() {
  if (hasRequired_strictIndexOf)
    return _strictIndexOf;
  hasRequired_strictIndexOf = 1;
  function strictIndexOf(array3, value, fromIndex) {
    var index = fromIndex - 1, length = array3.length;
    while (++index < length) {
      if (array3[index] === value) {
        return index;
      }
    }
    return -1;
  }
  _strictIndexOf = strictIndexOf;
  return _strictIndexOf;
}
var _baseIndexOf;
var hasRequired_baseIndexOf;
function require_baseIndexOf() {
  if (hasRequired_baseIndexOf)
    return _baseIndexOf;
  hasRequired_baseIndexOf = 1;
  var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
  function baseIndexOf(array3, value, fromIndex) {
    return value === value ? strictIndexOf(array3, value, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
  }
  _baseIndexOf = baseIndexOf;
  return _baseIndexOf;
}
var _arrayIncludes;
var hasRequired_arrayIncludes;
function require_arrayIncludes() {
  if (hasRequired_arrayIncludes)
    return _arrayIncludes;
  hasRequired_arrayIncludes = 1;
  var baseIndexOf = require_baseIndexOf();
  function arrayIncludes(array3, value) {
    var length = array3 == null ? 0 : array3.length;
    return !!length && baseIndexOf(array3, value, 0) > -1;
  }
  _arrayIncludes = arrayIncludes;
  return _arrayIncludes;
}
var _arrayIncludesWith;
var hasRequired_arrayIncludesWith;
function require_arrayIncludesWith() {
  if (hasRequired_arrayIncludesWith)
    return _arrayIncludesWith;
  hasRequired_arrayIncludesWith = 1;
  function arrayIncludesWith(array3, value, comparator) {
    var index = -1, length = array3 == null ? 0 : array3.length;
    while (++index < length) {
      if (comparator(value, array3[index])) {
        return true;
      }
    }
    return false;
  }
  _arrayIncludesWith = arrayIncludesWith;
  return _arrayIncludesWith;
}
var noop_1;
var hasRequiredNoop;
function requireNoop() {
  if (hasRequiredNoop)
    return noop_1;
  hasRequiredNoop = 1;
  function noop4() {
  }
  noop_1 = noop4;
  return noop_1;
}
var _createSet;
var hasRequired_createSet;
function require_createSet() {
  if (hasRequired_createSet)
    return _createSet;
  hasRequired_createSet = 1;
  var Set2 = require_Set(), noop4 = requireNoop(), setToArray = require_setToArray();
  var INFINITY2 = 1 / 0;
  var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY2) ? noop4 : function(values) {
    return new Set2(values);
  };
  _createSet = createSet;
  return _createSet;
}
var _baseUniq;
var hasRequired_baseUniq;
function require_baseUniq() {
  if (hasRequired_baseUniq)
    return _baseUniq;
  hasRequired_baseUniq = 1;
  var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas(), createSet = require_createSet(), setToArray = require_setToArray();
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq(array3, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, length = array3.length, isCommon = true, result = [], seen2 = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set2 = iteratee ? null : createSet(array3);
      if (set2) {
        return setToArray(set2);
      }
      isCommon = false;
      includes = cacheHas;
      seen2 = new SetCache();
    } else {
      seen2 = iteratee ? [] : result;
    }
    outer:
      while (++index < length) {
        var value = array3[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen2.length;
          while (seenIndex--) {
            if (seen2[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen2.push(computed);
          }
          result.push(value);
        } else if (!includes(seen2, computed, comparator)) {
          if (seen2 !== result) {
            seen2.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  _baseUniq = baseUniq;
  return _baseUniq;
}
var isArrayLikeObject_1;
var hasRequiredIsArrayLikeObject;
function requireIsArrayLikeObject() {
  if (hasRequiredIsArrayLikeObject)
    return isArrayLikeObject_1;
  hasRequiredIsArrayLikeObject = 1;
  var isArrayLike = requireIsArrayLike(), isObjectLike2 = isObjectLike_1;
  function isArrayLikeObject(value) {
    return isObjectLike2(value) && isArrayLike(value);
  }
  isArrayLikeObject_1 = isArrayLikeObject;
  return isArrayLikeObject_1;
}
var union_1;
var hasRequiredUnion;
function requireUnion() {
  if (hasRequiredUnion)
    return union_1;
  hasRequiredUnion = 1;
  var baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), baseUniq = require_baseUniq(), isArrayLikeObject = requireIsArrayLikeObject();
  var union = baseRest(function(arrays) {
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });
  union_1 = union;
  return union_1;
}
var _baseValues;
var hasRequired_baseValues;
function require_baseValues() {
  if (hasRequired_baseValues)
    return _baseValues;
  hasRequired_baseValues = 1;
  var arrayMap2 = _arrayMap;
  function baseValues(object3, props) {
    return arrayMap2(props, function(key) {
      return object3[key];
    });
  }
  _baseValues = baseValues;
  return _baseValues;
}
var values_1;
var hasRequiredValues;
function requireValues() {
  if (hasRequiredValues)
    return values_1;
  hasRequiredValues = 1;
  var baseValues = require_baseValues(), keys = requireKeys();
  function values(object3) {
    return object3 == null ? [] : baseValues(object3, keys(object3));
  }
  values_1 = values;
  return values_1;
}
var lodash_1$1;
var hasRequiredLodash$1;
function requireLodash$1() {
  if (hasRequiredLodash$1)
    return lodash_1$1;
  hasRequiredLodash$1 = 1;
  var lodash;
  if (typeof commonjsRequire === "function") {
    try {
      lodash = {
        clone: requireClone(),
        constant: requireConstant(),
        each: requireEach(),
        filter: requireFilter(),
        has: requireHas(),
        isArray: isArray_1,
        isEmpty: requireIsEmpty(),
        isFunction: isFunction_1,
        isUndefined: requireIsUndefined(),
        keys: requireKeys(),
        map: requireMap(),
        reduce: requireReduce(),
        size: requireSize(),
        transform: requireTransform(),
        union: requireUnion(),
        values: requireValues()
      };
    } catch (e2) {
    }
  }
  if (!lodash) {
    lodash = window._;
  }
  lodash_1$1 = lodash;
  return lodash_1$1;
}
var graph;
var hasRequiredGraph;
function requireGraph() {
  if (hasRequiredGraph)
    return graph;
  hasRequiredGraph = 1;
  var _2 = requireLodash$1();
  graph = Graph;
  var DEFAULT_EDGE_NAME = "\0";
  var GRAPH_NODE = "\0";
  var EDGE_KEY_DELIM = "";
  function Graph(opts) {
    this._isDirected = _2.has(opts, "directed") ? opts.directed : true;
    this._isMultigraph = _2.has(opts, "multigraph") ? opts.multigraph : false;
    this._isCompound = _2.has(opts, "compound") ? opts.compound : false;
    this._label = void 0;
    this._defaultNodeLabelFn = _2.constant(void 0);
    this._defaultEdgeLabelFn = _2.constant(void 0);
    this._nodes = {};
    if (this._isCompound) {
      this._parent = {};
      this._children = {};
      this._children[GRAPH_NODE] = {};
    }
    this._in = {};
    this._preds = {};
    this._out = {};
    this._sucs = {};
    this._edgeObjs = {};
    this._edgeLabels = {};
  }
  Graph.prototype._nodeCount = 0;
  Graph.prototype._edgeCount = 0;
  Graph.prototype.isDirected = function() {
    return this._isDirected;
  };
  Graph.prototype.isMultigraph = function() {
    return this._isMultigraph;
  };
  Graph.prototype.isCompound = function() {
    return this._isCompound;
  };
  Graph.prototype.setGraph = function(label) {
    this._label = label;
    return this;
  };
  Graph.prototype.graph = function() {
    return this._label;
  };
  Graph.prototype.setDefaultNodeLabel = function(newDefault) {
    if (!_2.isFunction(newDefault)) {
      newDefault = _2.constant(newDefault);
    }
    this._defaultNodeLabelFn = newDefault;
    return this;
  };
  Graph.prototype.nodeCount = function() {
    return this._nodeCount;
  };
  Graph.prototype.nodes = function() {
    return _2.keys(this._nodes);
  };
  Graph.prototype.sources = function() {
    var self2 = this;
    return _2.filter(this.nodes(), function(v2) {
      return _2.isEmpty(self2._in[v2]);
    });
  };
  Graph.prototype.sinks = function() {
    var self2 = this;
    return _2.filter(this.nodes(), function(v2) {
      return _2.isEmpty(self2._out[v2]);
    });
  };
  Graph.prototype.setNodes = function(vs, value) {
    var args = arguments;
    var self2 = this;
    _2.each(vs, function(v2) {
      if (args.length > 1) {
        self2.setNode(v2, value);
      } else {
        self2.setNode(v2);
      }
    });
    return this;
  };
  Graph.prototype.setNode = function(v2, value) {
    if (_2.has(this._nodes, v2)) {
      if (arguments.length > 1) {
        this._nodes[v2] = value;
      }
      return this;
    }
    this._nodes[v2] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v2);
    if (this._isCompound) {
      this._parent[v2] = GRAPH_NODE;
      this._children[v2] = {};
      this._children[GRAPH_NODE][v2] = true;
    }
    this._in[v2] = {};
    this._preds[v2] = {};
    this._out[v2] = {};
    this._sucs[v2] = {};
    ++this._nodeCount;
    return this;
  };
  Graph.prototype.node = function(v2) {
    return this._nodes[v2];
  };
  Graph.prototype.hasNode = function(v2) {
    return _2.has(this._nodes, v2);
  };
  Graph.prototype.removeNode = function(v2) {
    var self2 = this;
    if (_2.has(this._nodes, v2)) {
      var removeEdge = function(e2) {
        self2.removeEdge(self2._edgeObjs[e2]);
      };
      delete this._nodes[v2];
      if (this._isCompound) {
        this._removeFromParentsChildList(v2);
        delete this._parent[v2];
        _2.each(this.children(v2), function(child) {
          self2.setParent(child);
        });
        delete this._children[v2];
      }
      _2.each(_2.keys(this._in[v2]), removeEdge);
      delete this._in[v2];
      delete this._preds[v2];
      _2.each(_2.keys(this._out[v2]), removeEdge);
      delete this._out[v2];
      delete this._sucs[v2];
      --this._nodeCount;
    }
    return this;
  };
  Graph.prototype.setParent = function(v2, parent4) {
    if (!this._isCompound) {
      throw new Error("Cannot set parent in a non-compound graph");
    }
    if (_2.isUndefined(parent4)) {
      parent4 = GRAPH_NODE;
    } else {
      parent4 += "";
      for (var ancestor = parent4; !_2.isUndefined(ancestor); ancestor = this.parent(ancestor)) {
        if (ancestor === v2) {
          throw new Error("Setting " + parent4 + " as parent of " + v2 + " would create a cycle");
        }
      }
      this.setNode(parent4);
    }
    this.setNode(v2);
    this._removeFromParentsChildList(v2);
    this._parent[v2] = parent4;
    this._children[parent4][v2] = true;
    return this;
  };
  Graph.prototype._removeFromParentsChildList = function(v2) {
    delete this._children[this._parent[v2]][v2];
  };
  Graph.prototype.parent = function(v2) {
    if (this._isCompound) {
      var parent4 = this._parent[v2];
      if (parent4 !== GRAPH_NODE) {
        return parent4;
      }
    }
  };
  Graph.prototype.children = function(v2) {
    if (_2.isUndefined(v2)) {
      v2 = GRAPH_NODE;
    }
    if (this._isCompound) {
      var children2 = this._children[v2];
      if (children2) {
        return _2.keys(children2);
      }
    } else if (v2 === GRAPH_NODE) {
      return this.nodes();
    } else if (this.hasNode(v2)) {
      return [];
    }
  };
  Graph.prototype.predecessors = function(v2) {
    var predsV = this._preds[v2];
    if (predsV) {
      return _2.keys(predsV);
    }
  };
  Graph.prototype.successors = function(v2) {
    var sucsV = this._sucs[v2];
    if (sucsV) {
      return _2.keys(sucsV);
    }
  };
  Graph.prototype.neighbors = function(v2) {
    var preds = this.predecessors(v2);
    if (preds) {
      return _2.union(preds, this.successors(v2));
    }
  };
  Graph.prototype.isLeaf = function(v2) {
    var neighbors;
    if (this.isDirected()) {
      neighbors = this.successors(v2);
    } else {
      neighbors = this.neighbors(v2);
    }
    return neighbors.length === 0;
  };
  Graph.prototype.filterNodes = function(filter4) {
    var copy3 = new this.constructor({
      directed: this._isDirected,
      multigraph: this._isMultigraph,
      compound: this._isCompound
    });
    copy3.setGraph(this.graph());
    var self2 = this;
    _2.each(this._nodes, function(value, v2) {
      if (filter4(v2)) {
        copy3.setNode(v2, value);
      }
    });
    _2.each(this._edgeObjs, function(e2) {
      if (copy3.hasNode(e2.v) && copy3.hasNode(e2.w)) {
        copy3.setEdge(e2, self2.edge(e2));
      }
    });
    var parents2 = {};
    function findParent(v2) {
      var parent4 = self2.parent(v2);
      if (parent4 === void 0 || copy3.hasNode(parent4)) {
        parents2[v2] = parent4;
        return parent4;
      } else if (parent4 in parents2) {
        return parents2[parent4];
      } else {
        return findParent(parent4);
      }
    }
    if (this._isCompound) {
      _2.each(copy3.nodes(), function(v2) {
        copy3.setParent(v2, findParent(v2));
      });
    }
    return copy3;
  };
  Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
    if (!_2.isFunction(newDefault)) {
      newDefault = _2.constant(newDefault);
    }
    this._defaultEdgeLabelFn = newDefault;
    return this;
  };
  Graph.prototype.edgeCount = function() {
    return this._edgeCount;
  };
  Graph.prototype.edges = function() {
    return _2.values(this._edgeObjs);
  };
  Graph.prototype.setPath = function(vs, value) {
    var self2 = this;
    var args = arguments;
    _2.reduce(vs, function(v2, w2) {
      if (args.length > 1) {
        self2.setEdge(v2, w2, value);
      } else {
        self2.setEdge(v2, w2);
      }
      return w2;
    });
    return this;
  };
  Graph.prototype.setEdge = function() {
    var v2, w2, name2, value;
    var valueSpecified = false;
    var arg0 = arguments[0];
    if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
      v2 = arg0.v;
      w2 = arg0.w;
      name2 = arg0.name;
      if (arguments.length === 2) {
        value = arguments[1];
        valueSpecified = true;
      }
    } else {
      v2 = arg0;
      w2 = arguments[1];
      name2 = arguments[3];
      if (arguments.length > 2) {
        value = arguments[2];
        valueSpecified = true;
      }
    }
    v2 = "" + v2;
    w2 = "" + w2;
    if (!_2.isUndefined(name2)) {
      name2 = "" + name2;
    }
    var e2 = edgeArgsToId(this._isDirected, v2, w2, name2);
    if (_2.has(this._edgeLabels, e2)) {
      if (valueSpecified) {
        this._edgeLabels[e2] = value;
      }
      return this;
    }
    if (!_2.isUndefined(name2) && !this._isMultigraph) {
      throw new Error("Cannot set a named edge when isMultigraph = false");
    }
    this.setNode(v2);
    this.setNode(w2);
    this._edgeLabels[e2] = valueSpecified ? value : this._defaultEdgeLabelFn(v2, w2, name2);
    var edgeObj = edgeArgsToObj(this._isDirected, v2, w2, name2);
    v2 = edgeObj.v;
    w2 = edgeObj.w;
    Object.freeze(edgeObj);
    this._edgeObjs[e2] = edgeObj;
    incrementOrInitEntry(this._preds[w2], v2);
    incrementOrInitEntry(this._sucs[v2], w2);
    this._in[w2][e2] = edgeObj;
    this._out[v2][e2] = edgeObj;
    this._edgeCount++;
    return this;
  };
  Graph.prototype.edge = function(v2, w2, name2) {
    var e2 = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v2, w2, name2);
    return this._edgeLabels[e2];
  };
  Graph.prototype.hasEdge = function(v2, w2, name2) {
    var e2 = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v2, w2, name2);
    return _2.has(this._edgeLabels, e2);
  };
  Graph.prototype.removeEdge = function(v2, w2, name2) {
    var e2 = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v2, w2, name2);
    var edge = this._edgeObjs[e2];
    if (edge) {
      v2 = edge.v;
      w2 = edge.w;
      delete this._edgeLabels[e2];
      delete this._edgeObjs[e2];
      decrementOrRemoveEntry(this._preds[w2], v2);
      decrementOrRemoveEntry(this._sucs[v2], w2);
      delete this._in[w2][e2];
      delete this._out[v2][e2];
      this._edgeCount--;
    }
    return this;
  };
  Graph.prototype.inEdges = function(v2, u2) {
    var inV = this._in[v2];
    if (inV) {
      var edges3 = _2.values(inV);
      if (!u2) {
        return edges3;
      }
      return _2.filter(edges3, function(edge) {
        return edge.v === u2;
      });
    }
  };
  Graph.prototype.outEdges = function(v2, w2) {
    var outV = this._out[v2];
    if (outV) {
      var edges3 = _2.values(outV);
      if (!w2) {
        return edges3;
      }
      return _2.filter(edges3, function(edge) {
        return edge.w === w2;
      });
    }
  };
  Graph.prototype.nodeEdges = function(v2, w2) {
    var inEdges = this.inEdges(v2, w2);
    if (inEdges) {
      return inEdges.concat(this.outEdges(v2, w2));
    }
  };
  function incrementOrInitEntry(map2, k2) {
    if (map2[k2]) {
      map2[k2]++;
    } else {
      map2[k2] = 1;
    }
  }
  function decrementOrRemoveEntry(map2, k2) {
    if (!--map2[k2]) {
      delete map2[k2];
    }
  }
  function edgeArgsToId(isDirected, v_, w_, name2) {
    var v2 = "" + v_;
    var w2 = "" + w_;
    if (!isDirected && v2 > w2) {
      var tmp = v2;
      v2 = w2;
      w2 = tmp;
    }
    return v2 + EDGE_KEY_DELIM + w2 + EDGE_KEY_DELIM + (_2.isUndefined(name2) ? DEFAULT_EDGE_NAME : name2);
  }
  function edgeArgsToObj(isDirected, v_, w_, name2) {
    var v2 = "" + v_;
    var w2 = "" + w_;
    if (!isDirected && v2 > w2) {
      var tmp = v2;
      v2 = w2;
      w2 = tmp;
    }
    var edgeObj = { v: v2, w: w2 };
    if (name2) {
      edgeObj.name = name2;
    }
    return edgeObj;
  }
  function edgeObjToId(isDirected, edgeObj) {
    return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
  }
  return graph;
}
var version$1;
var hasRequiredVersion$1;
function requireVersion$1() {
  if (hasRequiredVersion$1)
    return version$1;
  hasRequiredVersion$1 = 1;
  version$1 = "2.1.8";
  return version$1;
}
var lib$1;
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib)
    return lib$1;
  hasRequiredLib = 1;
  lib$1 = {
    Graph: requireGraph(),
    version: requireVersion$1()
  };
  return lib$1;
}
var json2;
var hasRequiredJson;
function requireJson() {
  if (hasRequiredJson)
    return json2;
  hasRequiredJson = 1;
  var _2 = requireLodash$1();
  var Graph = requireGraph();
  json2 = {
    write,
    read
  };
  function write(g2) {
    var json3 = {
      options: {
        directed: g2.isDirected(),
        multigraph: g2.isMultigraph(),
        compound: g2.isCompound()
      },
      nodes: writeNodes(g2),
      edges: writeEdges(g2)
    };
    if (!_2.isUndefined(g2.graph())) {
      json3.value = _2.clone(g2.graph());
    }
    return json3;
  }
  function writeNodes(g2) {
    return _2.map(g2.nodes(), function(v2) {
      var nodeValue = g2.node(v2);
      var parent4 = g2.parent(v2);
      var node = { v: v2 };
      if (!_2.isUndefined(nodeValue)) {
        node.value = nodeValue;
      }
      if (!_2.isUndefined(parent4)) {
        node.parent = parent4;
      }
      return node;
    });
  }
  function writeEdges(g2) {
    return _2.map(g2.edges(), function(e2) {
      var edgeValue = g2.edge(e2);
      var edge = { v: e2.v, w: e2.w };
      if (!_2.isUndefined(e2.name)) {
        edge.name = e2.name;
      }
      if (!_2.isUndefined(edgeValue)) {
        edge.value = edgeValue;
      }
      return edge;
    });
  }
  function read(json3) {
    var g2 = new Graph(json3.options).setGraph(json3.value);
    _2.each(json3.nodes, function(entry) {
      g2.setNode(entry.v, entry.value);
      if (entry.parent) {
        g2.setParent(entry.v, entry.parent);
      }
    });
    _2.each(json3.edges, function(entry) {
      g2.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
    });
    return g2;
  }
  return json2;
}
var components_1;
var hasRequiredComponents;
function requireComponents() {
  if (hasRequiredComponents)
    return components_1;
  hasRequiredComponents = 1;
  var _2 = requireLodash$1();
  components_1 = components2;
  function components2(g2) {
    var visited = {};
    var cmpts = [];
    var cmpt;
    function dfs(v2) {
      if (_2.has(visited, v2))
        return;
      visited[v2] = true;
      cmpt.push(v2);
      _2.each(g2.successors(v2), dfs);
      _2.each(g2.predecessors(v2), dfs);
    }
    _2.each(g2.nodes(), function(v2) {
      cmpt = [];
      dfs(v2);
      if (cmpt.length) {
        cmpts.push(cmpt);
      }
    });
    return cmpts;
  }
  return components_1;
}
var priorityQueue;
var hasRequiredPriorityQueue;
function requirePriorityQueue() {
  if (hasRequiredPriorityQueue)
    return priorityQueue;
  hasRequiredPriorityQueue = 1;
  var _2 = requireLodash$1();
  priorityQueue = PriorityQueue;
  function PriorityQueue() {
    this._arr = [];
    this._keyIndices = {};
  }
  PriorityQueue.prototype.size = function() {
    return this._arr.length;
  };
  PriorityQueue.prototype.keys = function() {
    return this._arr.map(function(x2) {
      return x2.key;
    });
  };
  PriorityQueue.prototype.has = function(key) {
    return _2.has(this._keyIndices, key);
  };
  PriorityQueue.prototype.priority = function(key) {
    var index = this._keyIndices[key];
    if (index !== void 0) {
      return this._arr[index].priority;
    }
  };
  PriorityQueue.prototype.min = function() {
    if (this.size() === 0) {
      throw new Error("Queue underflow");
    }
    return this._arr[0].key;
  };
  PriorityQueue.prototype.add = function(key, priority3) {
    var keyIndices = this._keyIndices;
    key = String(key);
    if (!_2.has(keyIndices, key)) {
      var arr = this._arr;
      var index = arr.length;
      keyIndices[key] = index;
      arr.push({ key, priority: priority3 });
      this._decrease(index);
      return true;
    }
    return false;
  };
  PriorityQueue.prototype.removeMin = function() {
    this._swap(0, this._arr.length - 1);
    var min4 = this._arr.pop();
    delete this._keyIndices[min4.key];
    this._heapify(0);
    return min4.key;
  };
  PriorityQueue.prototype.decrease = function(key, priority3) {
    var index = this._keyIndices[key];
    if (priority3 > this._arr[index].priority) {
      throw new Error("New priority is greater than current priority. Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority3);
    }
    this._arr[index].priority = priority3;
    this._decrease(index);
  };
  PriorityQueue.prototype._heapify = function(i2) {
    var arr = this._arr;
    var l2 = 2 * i2;
    var r2 = l2 + 1;
    var largest = i2;
    if (l2 < arr.length) {
      largest = arr[l2].priority < arr[largest].priority ? l2 : largest;
      if (r2 < arr.length) {
        largest = arr[r2].priority < arr[largest].priority ? r2 : largest;
      }
      if (largest !== i2) {
        this._swap(i2, largest);
        this._heapify(largest);
      }
    }
  };
  PriorityQueue.prototype._decrease = function(index) {
    var arr = this._arr;
    var priority3 = arr[index].priority;
    var parent4;
    while (index !== 0) {
      parent4 = index >> 1;
      if (arr[parent4].priority < priority3) {
        break;
      }
      this._swap(index, parent4);
      index = parent4;
    }
  };
  PriorityQueue.prototype._swap = function(i2, j2) {
    var arr = this._arr;
    var keyIndices = this._keyIndices;
    var origArrI = arr[i2];
    var origArrJ = arr[j2];
    arr[i2] = origArrJ;
    arr[j2] = origArrI;
    keyIndices[origArrJ.key] = i2;
    keyIndices[origArrI.key] = j2;
  };
  return priorityQueue;
}
var dijkstra_1;
var hasRequiredDijkstra;
function requireDijkstra() {
  if (hasRequiredDijkstra)
    return dijkstra_1;
  hasRequiredDijkstra = 1;
  var _2 = requireLodash$1();
  var PriorityQueue = requirePriorityQueue();
  dijkstra_1 = dijkstra2;
  var DEFAULT_WEIGHT_FUNC = _2.constant(1);
  function dijkstra2(g2, source, weightFn, edgeFn) {
    return runDijkstra(
      g2,
      String(source),
      weightFn || DEFAULT_WEIGHT_FUNC,
      edgeFn || function(v2) {
        return g2.outEdges(v2);
      }
    );
  }
  function runDijkstra(g2, source, weightFn, edgeFn) {
    var results = {};
    var pq = new PriorityQueue();
    var v2, vEntry;
    var updateNeighbors = function(edge) {
      var w2 = edge.v !== v2 ? edge.v : edge.w;
      var wEntry = results[w2];
      var weight8 = weightFn(edge);
      var distance = vEntry.distance + weight8;
      if (weight8 < 0) {
        throw new Error("dijkstra does not allow negative edge weights. Bad edge: " + edge + " Weight: " + weight8);
      }
      if (distance < wEntry.distance) {
        wEntry.distance = distance;
        wEntry.predecessor = v2;
        pq.decrease(w2, distance);
      }
    };
    g2.nodes().forEach(function(v3) {
      var distance = v3 === source ? 0 : Number.POSITIVE_INFINITY;
      results[v3] = { distance };
      pq.add(v3, distance);
    });
    while (pq.size() > 0) {
      v2 = pq.removeMin();
      vEntry = results[v2];
      if (vEntry.distance === Number.POSITIVE_INFINITY) {
        break;
      }
      edgeFn(v2).forEach(updateNeighbors);
    }
    return results;
  }
  return dijkstra_1;
}
var dijkstraAll_1;
var hasRequiredDijkstraAll;
function requireDijkstraAll() {
  if (hasRequiredDijkstraAll)
    return dijkstraAll_1;
  hasRequiredDijkstraAll = 1;
  var dijkstra2 = requireDijkstra();
  var _2 = requireLodash$1();
  dijkstraAll_1 = dijkstraAll;
  function dijkstraAll(g2, weightFunc, edgeFunc) {
    return _2.transform(g2.nodes(), function(acc, v2) {
      acc[v2] = dijkstra2(g2, v2, weightFunc, edgeFunc);
    }, {});
  }
  return dijkstraAll_1;
}
var tarjan_1;
var hasRequiredTarjan;
function requireTarjan() {
  if (hasRequiredTarjan)
    return tarjan_1;
  hasRequiredTarjan = 1;
  var _2 = requireLodash$1();
  tarjan_1 = tarjan;
  function tarjan(g2) {
    var index = 0;
    var stack = [];
    var visited = {};
    var results = [];
    function dfs(v2) {
      var entry = visited[v2] = {
        onStack: true,
        lowlink: index,
        index: index++
      };
      stack.push(v2);
      g2.successors(v2).forEach(function(w3) {
        if (!_2.has(visited, w3)) {
          dfs(w3);
          entry.lowlink = Math.min(entry.lowlink, visited[w3].lowlink);
        } else if (visited[w3].onStack) {
          entry.lowlink = Math.min(entry.lowlink, visited[w3].index);
        }
      });
      if (entry.lowlink === entry.index) {
        var cmpt = [];
        var w2;
        do {
          w2 = stack.pop();
          visited[w2].onStack = false;
          cmpt.push(w2);
        } while (v2 !== w2);
        results.push(cmpt);
      }
    }
    g2.nodes().forEach(function(v2) {
      if (!_2.has(visited, v2)) {
        dfs(v2);
      }
    });
    return results;
  }
  return tarjan_1;
}
var findCycles_1;
var hasRequiredFindCycles;
function requireFindCycles() {
  if (hasRequiredFindCycles)
    return findCycles_1;
  hasRequiredFindCycles = 1;
  var _2 = requireLodash$1();
  var tarjan = requireTarjan();
  findCycles_1 = findCycles;
  function findCycles(g2) {
    return _2.filter(tarjan(g2), function(cmpt) {
      return cmpt.length > 1 || cmpt.length === 1 && g2.hasEdge(cmpt[0], cmpt[0]);
    });
  }
  return findCycles_1;
}
var floydWarshall_1;
var hasRequiredFloydWarshall;
function requireFloydWarshall() {
  if (hasRequiredFloydWarshall)
    return floydWarshall_1;
  hasRequiredFloydWarshall = 1;
  var _2 = requireLodash$1();
  floydWarshall_1 = floydWarshall2;
  var DEFAULT_WEIGHT_FUNC = _2.constant(1);
  function floydWarshall2(g2, weightFn, edgeFn) {
    return runFloydWarshall(
      g2,
      weightFn || DEFAULT_WEIGHT_FUNC,
      edgeFn || function(v2) {
        return g2.outEdges(v2);
      }
    );
  }
  function runFloydWarshall(g2, weightFn, edgeFn) {
    var results = {};
    var nodes3 = g2.nodes();
    nodes3.forEach(function(v2) {
      results[v2] = {};
      results[v2][v2] = { distance: 0 };
      nodes3.forEach(function(w2) {
        if (v2 !== w2) {
          results[v2][w2] = { distance: Number.POSITIVE_INFINITY };
        }
      });
      edgeFn(v2).forEach(function(edge) {
        var w2 = edge.v === v2 ? edge.w : edge.v;
        var d2 = weightFn(edge);
        results[v2][w2] = { distance: d2, predecessor: v2 };
      });
    });
    nodes3.forEach(function(k2) {
      var rowK = results[k2];
      nodes3.forEach(function(i2) {
        var rowI = results[i2];
        nodes3.forEach(function(j2) {
          var ik = rowI[k2];
          var kj = rowK[j2];
          var ij = rowI[j2];
          var altDistance = ik.distance + kj.distance;
          if (altDistance < ij.distance) {
            ij.distance = altDistance;
            ij.predecessor = kj.predecessor;
          }
        });
      });
    });
    return results;
  }
  return floydWarshall_1;
}
var topsort_1;
var hasRequiredTopsort;
function requireTopsort() {
  if (hasRequiredTopsort)
    return topsort_1;
  hasRequiredTopsort = 1;
  var _2 = requireLodash$1();
  topsort_1 = topsort;
  topsort.CycleException = CycleException;
  function topsort(g2) {
    var visited = {};
    var stack = {};
    var results = [];
    function visit(node) {
      if (_2.has(stack, node)) {
        throw new CycleException();
      }
      if (!_2.has(visited, node)) {
        stack[node] = true;
        visited[node] = true;
        _2.each(g2.predecessors(node), visit);
        delete stack[node];
        results.push(node);
      }
    }
    _2.each(g2.sinks(), visit);
    if (_2.size(visited) !== g2.nodeCount()) {
      throw new CycleException();
    }
    return results;
  }
  function CycleException() {
  }
  CycleException.prototype = new Error();
  return topsort_1;
}
var isAcyclic_1;
var hasRequiredIsAcyclic;
function requireIsAcyclic() {
  if (hasRequiredIsAcyclic)
    return isAcyclic_1;
  hasRequiredIsAcyclic = 1;
  var topsort = requireTopsort();
  isAcyclic_1 = isAcyclic;
  function isAcyclic(g2) {
    try {
      topsort(g2);
    } catch (e2) {
      if (e2 instanceof topsort.CycleException) {
        return false;
      }
      throw e2;
    }
    return true;
  }
  return isAcyclic_1;
}
var dfs_1;
var hasRequiredDfs;
function requireDfs() {
  if (hasRequiredDfs)
    return dfs_1;
  hasRequiredDfs = 1;
  var _2 = requireLodash$1();
  dfs_1 = dfs;
  function dfs(g2, vs, order) {
    if (!_2.isArray(vs)) {
      vs = [vs];
    }
    var navigation = (g2.isDirected() ? g2.successors : g2.neighbors).bind(g2);
    var acc = [];
    var visited = {};
    _2.each(vs, function(v2) {
      if (!g2.hasNode(v2)) {
        throw new Error("Graph does not have node: " + v2);
      }
      doDfs(g2, v2, order === "post", visited, navigation, acc);
    });
    return acc;
  }
  function doDfs(g2, v2, postorder, visited, navigation, acc) {
    if (!_2.has(visited, v2)) {
      visited[v2] = true;
      if (!postorder) {
        acc.push(v2);
      }
      _2.each(navigation(v2), function(w2) {
        doDfs(g2, w2, postorder, visited, navigation, acc);
      });
      if (postorder) {
        acc.push(v2);
      }
    }
  }
  return dfs_1;
}
var postorder_1;
var hasRequiredPostorder;
function requirePostorder() {
  if (hasRequiredPostorder)
    return postorder_1;
  hasRequiredPostorder = 1;
  var dfs = requireDfs();
  postorder_1 = postorder;
  function postorder(g2, vs) {
    return dfs(g2, vs, "post");
  }
  return postorder_1;
}
var preorder_1;
var hasRequiredPreorder;
function requirePreorder() {
  if (hasRequiredPreorder)
    return preorder_1;
  hasRequiredPreorder = 1;
  var dfs = requireDfs();
  preorder_1 = preorder;
  function preorder(g2, vs) {
    return dfs(g2, vs, "pre");
  }
  return preorder_1;
}
var prim_1;
var hasRequiredPrim;
function requirePrim() {
  if (hasRequiredPrim)
    return prim_1;
  hasRequiredPrim = 1;
  var _2 = requireLodash$1();
  var Graph = requireGraph();
  var PriorityQueue = requirePriorityQueue();
  prim_1 = prim;
  function prim(g2, weightFunc) {
    var result = new Graph();
    var parents2 = {};
    var pq = new PriorityQueue();
    var v2;
    function updateNeighbors(edge) {
      var w2 = edge.v === v2 ? edge.w : edge.v;
      var pri = pq.priority(w2);
      if (pri !== void 0) {
        var edgeWeight = weightFunc(edge);
        if (edgeWeight < pri) {
          parents2[w2] = v2;
          pq.decrease(w2, edgeWeight);
        }
      }
    }
    if (g2.nodeCount() === 0) {
      return result;
    }
    _2.each(g2.nodes(), function(v3) {
      pq.add(v3, Number.POSITIVE_INFINITY);
      result.setNode(v3);
    });
    pq.decrease(g2.nodes()[0], 0);
    var init2 = false;
    while (pq.size() > 0) {
      v2 = pq.removeMin();
      if (_2.has(parents2, v2)) {
        result.setEdge(v2, parents2[v2]);
      } else if (init2) {
        throw new Error("Input graph is not connected: " + g2);
      } else {
        init2 = true;
      }
      g2.nodeEdges(v2).forEach(updateNeighbors);
    }
    return result;
  }
  return prim_1;
}
var alg;
var hasRequiredAlg;
function requireAlg() {
  if (hasRequiredAlg)
    return alg;
  hasRequiredAlg = 1;
  alg = {
    components: requireComponents(),
    dijkstra: requireDijkstra(),
    dijkstraAll: requireDijkstraAll(),
    findCycles: requireFindCycles(),
    floydWarshall: requireFloydWarshall(),
    isAcyclic: requireIsAcyclic(),
    postorder: requirePostorder(),
    preorder: requirePreorder(),
    prim: requirePrim(),
    tarjan: requireTarjan(),
    topsort: requireTopsort()
  };
  return alg;
}
var graphlib;
var hasRequiredGraphlib$1;
function requireGraphlib$1() {
  if (hasRequiredGraphlib$1)
    return graphlib;
  hasRequiredGraphlib$1 = 1;
  var lib2 = requireLib();
  graphlib = {
    Graph: lib2.Graph,
    json: requireJson(),
    alg: requireAlg(),
    version: lib2.version
  };
  return graphlib;
}
var graphlib_1;
var hasRequiredGraphlib;
function requireGraphlib() {
  if (hasRequiredGraphlib)
    return graphlib_1;
  hasRequiredGraphlib = 1;
  var graphlib2;
  if (typeof commonjsRequire === "function") {
    try {
      graphlib2 = requireGraphlib$1();
    } catch (e2) {
    }
  }
  if (!graphlib2) {
    graphlib2 = window.graphlib;
  }
  graphlib_1 = graphlib2;
  return graphlib_1;
}
var cloneDeep_1;
var hasRequiredCloneDeep;
function requireCloneDeep() {
  if (hasRequiredCloneDeep)
    return cloneDeep_1;
  hasRequiredCloneDeep = 1;
  var baseClone = require_baseClone();
  var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }
  cloneDeep_1 = cloneDeep;
  return cloneDeep_1;
}
var _isIterateeCall;
var hasRequired_isIterateeCall;
function require_isIterateeCall() {
  if (hasRequired_isIterateeCall)
    return _isIterateeCall;
  hasRequired_isIterateeCall = 1;
  var eq3 = eq_1, isArrayLike = requireIsArrayLike(), isIndex2 = _isIndex, isObject2 = isObject_1;
  function isIterateeCall(value, index, object3) {
    if (!isObject2(object3)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike(object3) && isIndex2(index, object3.length) : type == "string" && index in object3) {
      return eq3(object3[index], value);
    }
    return false;
  }
  _isIterateeCall = isIterateeCall;
  return _isIterateeCall;
}
var defaults_1;
var hasRequiredDefaults;
function requireDefaults() {
  if (hasRequiredDefaults)
    return defaults_1;
  hasRequiredDefaults = 1;
  var baseRest = require_baseRest(), eq3 = eq_1, isIterateeCall = require_isIterateeCall(), keysIn = requireKeysIn();
  var objectProto2 = Object.prototype;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  var defaults3 = baseRest(function(object3, sources) {
    object3 = Object(object3);
    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }
    while (++index < length) {
      var source = sources[index];
      var props = keysIn(source);
      var propsIndex = -1;
      var propsLength = props.length;
      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object3[key];
        if (value === void 0 || eq3(value, objectProto2[key]) && !hasOwnProperty2.call(object3, key)) {
          object3[key] = source[key];
        }
      }
    }
    return object3;
  });
  defaults_1 = defaults3;
  return defaults_1;
}
var _createFind;
var hasRequired_createFind;
function require_createFind() {
  if (hasRequired_createFind)
    return _createFind;
  hasRequired_createFind = 1;
  var baseIteratee = require_baseIteratee(), isArrayLike = requireIsArrayLike(), keys = requireKeys();
  function createFind(findIndexFunc) {
    return function(collection4, predicate, fromIndex) {
      var iterable = Object(collection4);
      if (!isArrayLike(collection4)) {
        var iteratee = baseIteratee(predicate, 3);
        collection4 = keys(collection4);
        predicate = function(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }
      var index = findIndexFunc(collection4, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection4[index] : index] : void 0;
    };
  }
  _createFind = createFind;
  return _createFind;
}
var toFinite_1;
var hasRequiredToFinite;
function requireToFinite() {
  if (hasRequiredToFinite)
    return toFinite_1;
  hasRequiredToFinite = 1;
  var toNumber2 = toNumber_1;
  var INFINITY2 = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber2(value);
    if (value === INFINITY2 || value === -INFINITY2) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  toFinite_1 = toFinite;
  return toFinite_1;
}
var toInteger_1;
var hasRequiredToInteger;
function requireToInteger() {
  if (hasRequiredToInteger)
    return toInteger_1;
  hasRequiredToInteger = 1;
  var toFinite = requireToFinite();
  function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  toInteger_1 = toInteger;
  return toInteger_1;
}
var findIndex_1;
var hasRequiredFindIndex;
function requireFindIndex() {
  if (hasRequiredFindIndex)
    return findIndex_1;
  hasRequiredFindIndex = 1;
  var baseFindIndex = require_baseFindIndex(), baseIteratee = require_baseIteratee(), toInteger = requireToInteger();
  var nativeMax2 = Math.max;
  function findIndex(array3, predicate, fromIndex) {
    var length = array3 == null ? 0 : array3.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax2(length + index, 0);
    }
    return baseFindIndex(array3, baseIteratee(predicate, 3), index);
  }
  findIndex_1 = findIndex;
  return findIndex_1;
}
var find_1;
var hasRequiredFind;
function requireFind() {
  if (hasRequiredFind)
    return find_1;
  hasRequiredFind = 1;
  var createFind = require_createFind(), findIndex = requireFindIndex();
  var find = createFind(findIndex);
  find_1 = find;
  return find_1;
}
var flatten_1;
var hasRequiredFlatten;
function requireFlatten() {
  if (hasRequiredFlatten)
    return flatten_1;
  hasRequiredFlatten = 1;
  var baseFlatten = require_baseFlatten();
  function flatten(array3) {
    var length = array3 == null ? 0 : array3.length;
    return length ? baseFlatten(array3, 1) : [];
  }
  flatten_1 = flatten;
  return flatten_1;
}
var forIn_1;
var hasRequiredForIn;
function requireForIn() {
  if (hasRequiredForIn)
    return forIn_1;
  hasRequiredForIn = 1;
  var baseFor = require_baseFor(), castFunction = require_castFunction(), keysIn = requireKeysIn();
  function forIn(object3, iteratee) {
    return object3 == null ? object3 : baseFor(object3, castFunction(iteratee), keysIn);
  }
  forIn_1 = forIn;
  return forIn_1;
}
var last_1;
var hasRequiredLast;
function requireLast() {
  if (hasRequiredLast)
    return last_1;
  hasRequiredLast = 1;
  function last2(array3) {
    var length = array3 == null ? 0 : array3.length;
    return length ? array3[length - 1] : void 0;
  }
  last_1 = last2;
  return last_1;
}
var mapValues_1;
var hasRequiredMapValues;
function requireMapValues() {
  if (hasRequiredMapValues)
    return mapValues_1;
  hasRequiredMapValues = 1;
  var baseAssignValue2 = _baseAssignValue, baseForOwn = require_baseForOwn(), baseIteratee = require_baseIteratee();
  function mapValues(object3, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object3, function(value, key, object4) {
      baseAssignValue2(result, key, iteratee(value, key, object4));
    });
    return result;
  }
  mapValues_1 = mapValues;
  return mapValues_1;
}
var _baseExtremum;
var hasRequired_baseExtremum;
function require_baseExtremum() {
  if (hasRequired_baseExtremum)
    return _baseExtremum;
  hasRequired_baseExtremum = 1;
  var isSymbol2 = isSymbol_1;
  function baseExtremum(array3, iteratee, comparator) {
    var index = -1, length = array3.length;
    while (++index < length) {
      var value = array3[index], current = iteratee(value);
      if (current != null && (computed === void 0 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
        var computed = current, result = value;
      }
    }
    return result;
  }
  _baseExtremum = baseExtremum;
  return _baseExtremum;
}
var _baseGt;
var hasRequired_baseGt;
function require_baseGt() {
  if (hasRequired_baseGt)
    return _baseGt;
  hasRequired_baseGt = 1;
  function baseGt(value, other) {
    return value > other;
  }
  _baseGt = baseGt;
  return _baseGt;
}
var max_1;
var hasRequiredMax;
function requireMax() {
  if (hasRequiredMax)
    return max_1;
  hasRequiredMax = 1;
  var baseExtremum = require_baseExtremum(), baseGt = require_baseGt(), identity3 = requireIdentity();
  function max5(array3) {
    return array3 && array3.length ? baseExtremum(array3, identity3, baseGt) : void 0;
  }
  max_1 = max5;
  return max_1;
}
var _assignMergeValue;
var hasRequired_assignMergeValue;
function require_assignMergeValue() {
  if (hasRequired_assignMergeValue)
    return _assignMergeValue;
  hasRequired_assignMergeValue = 1;
  var baseAssignValue2 = _baseAssignValue, eq3 = eq_1;
  function assignMergeValue(object3, key, value) {
    if (value !== void 0 && !eq3(object3[key], value) || value === void 0 && !(key in object3)) {
      baseAssignValue2(object3, key, value);
    }
  }
  _assignMergeValue = assignMergeValue;
  return _assignMergeValue;
}
var isPlainObject_1;
var hasRequiredIsPlainObject;
function requireIsPlainObject() {
  if (hasRequiredIsPlainObject)
    return isPlainObject_1;
  hasRequiredIsPlainObject = 1;
  var baseGetTag2 = _baseGetTag, getPrototype = require_getPrototype(), isObjectLike2 = isObjectLike_1;
  var objectTag = "[object Object]";
  var funcProto2 = Function.prototype, objectProto2 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  var objectCtorString = funcToString2.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike2(value) || baseGetTag2(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString;
  }
  isPlainObject_1 = isPlainObject;
  return isPlainObject_1;
}
var _safeGet;
var hasRequired_safeGet;
function require_safeGet() {
  if (hasRequired_safeGet)
    return _safeGet;
  hasRequired_safeGet = 1;
  function safeGet(object3, key) {
    if (key === "constructor" && typeof object3[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object3[key];
  }
  _safeGet = safeGet;
  return _safeGet;
}
var toPlainObject_1;
var hasRequiredToPlainObject;
function requireToPlainObject() {
  if (hasRequiredToPlainObject)
    return toPlainObject_1;
  hasRequiredToPlainObject = 1;
  var copyObject = require_copyObject(), keysIn = requireKeysIn();
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  toPlainObject_1 = toPlainObject;
  return toPlainObject_1;
}
var _baseMergeDeep;
var hasRequired_baseMergeDeep;
function require_baseMergeDeep() {
  if (hasRequired_baseMergeDeep)
    return _baseMergeDeep;
  hasRequired_baseMergeDeep = 1;
  var assignMergeValue = require_assignMergeValue(), cloneBuffer = require_cloneBuffer(), cloneTypedArray = require_cloneTypedArray(), copyArray3 = _copyArray, initCloneObject = require_initCloneObject(), isArguments = requireIsArguments(), isArray2 = isArray_1, isArrayLikeObject = requireIsArrayLikeObject(), isBuffer2 = requireIsBuffer(), isFunction2 = isFunction_1, isObject2 = isObject_1, isPlainObject = requireIsPlainObject(), isTypedArray = requireIsTypedArray(), safeGet = require_safeGet(), toPlainObject = requireToPlainObject();
  function baseMergeDeep(object3, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object3, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object3, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object3, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray2(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray3(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject2(objValue) || isFunction2(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object3, key, newValue);
  }
  _baseMergeDeep = baseMergeDeep;
  return _baseMergeDeep;
}
var _baseMerge;
var hasRequired_baseMerge;
function require_baseMerge() {
  if (hasRequired_baseMerge)
    return _baseMerge;
  hasRequired_baseMerge = 1;
  var Stack = require_Stack(), assignMergeValue = require_assignMergeValue(), baseFor = require_baseFor(), baseMergeDeep = require_baseMergeDeep(), isObject2 = isObject_1, keysIn = requireKeysIn(), safeGet = require_safeGet();
  function baseMerge(object3, source, srcIndex, customizer, stack) {
    if (object3 === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack());
      if (isObject2(srcValue)) {
        baseMergeDeep(object3, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object3, key), srcValue, key + "", object3, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object3, key, newValue);
      }
    }, keysIn);
  }
  _baseMerge = baseMerge;
  return _baseMerge;
}
var _createAssigner;
var hasRequired_createAssigner;
function require_createAssigner() {
  if (hasRequired_createAssigner)
    return _createAssigner;
  hasRequired_createAssigner = 1;
  var baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
  function createAssigner(assigner) {
    return baseRest(function(object3, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object3 = Object(object3);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object3, source, index, customizer);
        }
      }
      return object3;
    });
  }
  _createAssigner = createAssigner;
  return _createAssigner;
}
var merge_1;
var hasRequiredMerge;
function requireMerge() {
  if (hasRequiredMerge)
    return merge_1;
  hasRequiredMerge = 1;
  var baseMerge = require_baseMerge(), createAssigner = require_createAssigner();
  var merge4 = createAssigner(function(object3, source, srcIndex) {
    baseMerge(object3, source, srcIndex);
  });
  merge_1 = merge4;
  return merge_1;
}
var _baseLt;
var hasRequired_baseLt;
function require_baseLt() {
  if (hasRequired_baseLt)
    return _baseLt;
  hasRequired_baseLt = 1;
  function baseLt(value, other) {
    return value < other;
  }
  _baseLt = baseLt;
  return _baseLt;
}
var min_1;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin)
    return min_1;
  hasRequiredMin = 1;
  var baseExtremum = require_baseExtremum(), baseLt = require_baseLt(), identity3 = requireIdentity();
  function min4(array3) {
    return array3 && array3.length ? baseExtremum(array3, identity3, baseLt) : void 0;
  }
  min_1 = min4;
  return min_1;
}
var minBy_1;
var hasRequiredMinBy;
function requireMinBy() {
  if (hasRequiredMinBy)
    return minBy_1;
  hasRequiredMinBy = 1;
  var baseExtremum = require_baseExtremum(), baseIteratee = require_baseIteratee(), baseLt = require_baseLt();
  function minBy(array3, iteratee) {
    return array3 && array3.length ? baseExtremum(array3, baseIteratee(iteratee, 2), baseLt) : void 0;
  }
  minBy_1 = minBy;
  return minBy_1;
}
var _basePickBy;
var hasRequired_basePickBy;
function require_basePickBy() {
  if (hasRequired_basePickBy)
    return _basePickBy;
  hasRequired_basePickBy = 1;
  var baseGet2 = _baseGet, baseSet2 = _baseSet, castPath2 = _castPath;
  function basePickBy(object3, paths, predicate) {
    var index = -1, length = paths.length, result = {};
    while (++index < length) {
      var path = paths[index], value = baseGet2(object3, path);
      if (predicate(value, path)) {
        baseSet2(result, castPath2(path, object3), value);
      }
    }
    return result;
  }
  _basePickBy = basePickBy;
  return _basePickBy;
}
var _basePick;
var hasRequired_basePick;
function require_basePick() {
  if (hasRequired_basePick)
    return _basePick;
  hasRequired_basePick = 1;
  var basePickBy = require_basePickBy(), hasIn = requireHasIn();
  function basePick(object3, paths) {
    return basePickBy(object3, paths, function(value, path) {
      return hasIn(object3, path);
    });
  }
  _basePick = basePick;
  return _basePick;
}
var _flatRest;
var hasRequired_flatRest;
function require_flatRest() {
  if (hasRequired_flatRest)
    return _flatRest;
  hasRequired_flatRest = 1;
  var flatten = requireFlatten(), overRest = require_overRest(), setToString = require_setToString();
  function flatRest(func) {
    return setToString(overRest(func, void 0, flatten), func + "");
  }
  _flatRest = flatRest;
  return _flatRest;
}
var pick_1;
var hasRequiredPick;
function requirePick() {
  if (hasRequiredPick)
    return pick_1;
  hasRequiredPick = 1;
  var basePick = require_basePick(), flatRest = require_flatRest();
  var pick = flatRest(function(object3, paths) {
    return object3 == null ? {} : basePick(object3, paths);
  });
  pick_1 = pick;
  return pick_1;
}
var _baseRange;
var hasRequired_baseRange;
function require_baseRange() {
  if (hasRequired_baseRange)
    return _baseRange;
  hasRequired_baseRange = 1;
  var nativeCeil = Math.ceil, nativeMax2 = Math.max;
  function baseRange(start, end, step3, fromRight) {
    var index = -1, length = nativeMax2(nativeCeil((end - start) / (step3 || 1)), 0), result = Array(length);
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step3;
    }
    return result;
  }
  _baseRange = baseRange;
  return _baseRange;
}
var _createRange;
var hasRequired_createRange;
function require_createRange() {
  if (hasRequired_createRange)
    return _createRange;
  hasRequired_createRange = 1;
  var baseRange = require_baseRange(), isIterateeCall = require_isIterateeCall(), toFinite = requireToFinite();
  function createRange(fromRight) {
    return function(start, end, step3) {
      if (step3 && typeof step3 != "number" && isIterateeCall(start, end, step3)) {
        end = step3 = void 0;
      }
      start = toFinite(start);
      if (end === void 0) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      step3 = step3 === void 0 ? start < end ? 1 : -1 : toFinite(step3);
      return baseRange(start, end, step3, fromRight);
    };
  }
  _createRange = createRange;
  return _createRange;
}
var range_1;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange)
    return range_1;
  hasRequiredRange = 1;
  var createRange = require_createRange();
  var range = createRange();
  range_1 = range;
  return range_1;
}
var _baseSortBy;
var hasRequired_baseSortBy;
function require_baseSortBy() {
  if (hasRequired_baseSortBy)
    return _baseSortBy;
  hasRequired_baseSortBy = 1;
  function baseSortBy(array3, comparer) {
    var length = array3.length;
    array3.sort(comparer);
    while (length--) {
      array3[length] = array3[length].value;
    }
    return array3;
  }
  _baseSortBy = baseSortBy;
  return _baseSortBy;
}
var _compareAscending;
var hasRequired_compareAscending;
function require_compareAscending() {
  if (hasRequired_compareAscending)
    return _compareAscending;
  hasRequired_compareAscending = 1;
  var isSymbol2 = isSymbol_1;
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
      var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
      if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
        return 1;
      }
      if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }
  _compareAscending = compareAscending;
  return _compareAscending;
}
var _compareMultiple;
var hasRequired_compareMultiple;
function require_compareMultiple() {
  if (hasRequired_compareMultiple)
    return _compareMultiple;
  hasRequired_compareMultiple = 1;
  var compareAscending = require_compareAscending();
  function compareMultiple(object3, other, orders) {
    var index = -1, objCriteria = object3.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == "desc" ? -1 : 1);
      }
    }
    return object3.index - other.index;
  }
  _compareMultiple = compareMultiple;
  return _compareMultiple;
}
var _baseOrderBy;
var hasRequired_baseOrderBy;
function require_baseOrderBy() {
  if (hasRequired_baseOrderBy)
    return _baseOrderBy;
  hasRequired_baseOrderBy = 1;
  var arrayMap2 = _arrayMap, baseGet2 = _baseGet, baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), baseSortBy = require_baseSortBy(), baseUnary = require_baseUnary(), compareMultiple = require_compareMultiple(), identity3 = requireIdentity(), isArray2 = isArray_1;
  function baseOrderBy(collection4, iteratees, orders) {
    if (iteratees.length) {
      iteratees = arrayMap2(iteratees, function(iteratee) {
        if (isArray2(iteratee)) {
          return function(value) {
            return baseGet2(value, iteratee.length === 1 ? iteratee[0] : iteratee);
          };
        }
        return iteratee;
      });
    } else {
      iteratees = [identity3];
    }
    var index = -1;
    iteratees = arrayMap2(iteratees, baseUnary(baseIteratee));
    var result = baseMap(collection4, function(value, key, collection5) {
      var criteria = arrayMap2(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return { "criteria": criteria, "index": ++index, "value": value };
    });
    return baseSortBy(result, function(object3, other) {
      return compareMultiple(object3, other, orders);
    });
  }
  _baseOrderBy = baseOrderBy;
  return _baseOrderBy;
}
var sortBy_1;
var hasRequiredSortBy;
function requireSortBy() {
  if (hasRequiredSortBy)
    return sortBy_1;
  hasRequiredSortBy = 1;
  var baseFlatten = require_baseFlatten(), baseOrderBy = require_baseOrderBy(), baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
  var sortBy = baseRest(function(collection4, iteratees) {
    if (collection4 == null) {
      return [];
    }
    var length = iteratees.length;
    if (length > 1 && isIterateeCall(collection4, iteratees[0], iteratees[1])) {
      iteratees = [];
    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
      iteratees = [iteratees[0]];
    }
    return baseOrderBy(collection4, baseFlatten(iteratees, 1), []);
  });
  sortBy_1 = sortBy;
  return sortBy_1;
}
var uniqueId_1;
var hasRequiredUniqueId;
function requireUniqueId() {
  if (hasRequiredUniqueId)
    return uniqueId_1;
  hasRequiredUniqueId = 1;
  var toString3 = toString_1;
  var idCounter = 0;
  function uniqueId(prefix) {
    var id2 = ++idCounter;
    return toString3(prefix) + id2;
  }
  uniqueId_1 = uniqueId;
  return uniqueId_1;
}
var _baseZipObject;
var hasRequired_baseZipObject;
function require_baseZipObject() {
  if (hasRequired_baseZipObject)
    return _baseZipObject;
  hasRequired_baseZipObject = 1;
  function baseZipObject(props, values, assignFunc) {
    var index = -1, length = props.length, valsLength = values.length, result = {};
    while (++index < length) {
      var value = index < valsLength ? values[index] : void 0;
      assignFunc(result, props[index], value);
    }
    return result;
  }
  _baseZipObject = baseZipObject;
  return _baseZipObject;
}
var zipObject_1;
var hasRequiredZipObject;
function requireZipObject() {
  if (hasRequiredZipObject)
    return zipObject_1;
  hasRequiredZipObject = 1;
  var assignValue2 = _assignValue, baseZipObject = require_baseZipObject();
  function zipObject(props, values) {
    return baseZipObject(props || [], values || [], assignValue2);
  }
  zipObject_1 = zipObject;
  return zipObject_1;
}
var lodash_1;
var hasRequiredLodash;
function requireLodash() {
  if (hasRequiredLodash)
    return lodash_1;
  hasRequiredLodash = 1;
  var lodash;
  if (typeof commonjsRequire === "function") {
    try {
      lodash = {
        cloneDeep: requireCloneDeep(),
        constant: requireConstant(),
        defaults: requireDefaults(),
        each: requireEach(),
        filter: requireFilter(),
        find: requireFind(),
        flatten: requireFlatten(),
        forEach: requireForEach(),
        forIn: requireForIn(),
        has: requireHas(),
        isUndefined: requireIsUndefined(),
        last: requireLast(),
        map: requireMap(),
        mapValues: requireMapValues(),
        max: requireMax(),
        merge: requireMerge(),
        min: requireMin(),
        minBy: requireMinBy(),
        now: now_1,
        pick: requirePick(),
        range: requireRange(),
        reduce: requireReduce(),
        sortBy: requireSortBy(),
        uniqueId: requireUniqueId(),
        values: requireValues(),
        zipObject: requireZipObject()
      };
    } catch (e2) {
    }
  }
  if (!lodash) {
    lodash = window._;
  }
  lodash_1 = lodash;
  return lodash_1;
}
var list;
var hasRequiredList;
function requireList() {
  if (hasRequiredList)
    return list;
  hasRequiredList = 1;
  list = List;
  function List() {
    var sentinel = {};
    sentinel._next = sentinel._prev = sentinel;
    this._sentinel = sentinel;
  }
  List.prototype.dequeue = function() {
    var sentinel = this._sentinel;
    var entry = sentinel._prev;
    if (entry !== sentinel) {
      unlink(entry);
      return entry;
    }
  };
  List.prototype.enqueue = function(entry) {
    var sentinel = this._sentinel;
    if (entry._prev && entry._next) {
      unlink(entry);
    }
    entry._next = sentinel._next;
    sentinel._next._prev = entry;
    sentinel._next = entry;
    entry._prev = sentinel;
  };
  List.prototype.toString = function() {
    var strs = [];
    var sentinel = this._sentinel;
    var curr = sentinel._prev;
    while (curr !== sentinel) {
      strs.push(JSON.stringify(curr, filterOutLinks));
      curr = curr._prev;
    }
    return "[" + strs.join(", ") + "]";
  };
  function unlink(entry) {
    entry._prev._next = entry._next;
    entry._next._prev = entry._prev;
    delete entry._next;
    delete entry._prev;
  }
  function filterOutLinks(k2, v2) {
    if (k2 !== "_next" && k2 !== "_prev") {
      return v2;
    }
  }
  return list;
}
var greedyFas;
var hasRequiredGreedyFas;
function requireGreedyFas() {
  if (hasRequiredGreedyFas)
    return greedyFas;
  hasRequiredGreedyFas = 1;
  var _2 = requireLodash();
  var Graph = requireGraphlib().Graph;
  var List = requireList();
  greedyFas = greedyFAS;
  var DEFAULT_WEIGHT_FN = _2.constant(1);
  function greedyFAS(g2, weightFn) {
    if (g2.nodeCount() <= 1) {
      return [];
    }
    var state = buildState(g2, weightFn || DEFAULT_WEIGHT_FN);
    var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);
    return _2.flatten(_2.map(results, function(e2) {
      return g2.outEdges(e2.v, e2.w);
    }), true);
  }
  function doGreedyFAS(g2, buckets, zeroIdx) {
    var results = [];
    var sources = buckets[buckets.length - 1];
    var sinks = buckets[0];
    var entry;
    while (g2.nodeCount()) {
      while (entry = sinks.dequeue()) {
        removeNode(g2, buckets, zeroIdx, entry);
      }
      while (entry = sources.dequeue()) {
        removeNode(g2, buckets, zeroIdx, entry);
      }
      if (g2.nodeCount()) {
        for (var i2 = buckets.length - 2; i2 > 0; --i2) {
          entry = buckets[i2].dequeue();
          if (entry) {
            results = results.concat(removeNode(g2, buckets, zeroIdx, entry, true));
            break;
          }
        }
      }
    }
    return results;
  }
  function removeNode(g2, buckets, zeroIdx, entry, collectPredecessors) {
    var results = collectPredecessors ? [] : void 0;
    _2.forEach(g2.inEdges(entry.v), function(edge) {
      var weight8 = g2.edge(edge);
      var uEntry = g2.node(edge.v);
      if (collectPredecessors) {
        results.push({ v: edge.v, w: edge.w });
      }
      uEntry.out -= weight8;
      assignBucket(buckets, zeroIdx, uEntry);
    });
    _2.forEach(g2.outEdges(entry.v), function(edge) {
      var weight8 = g2.edge(edge);
      var w2 = edge.w;
      var wEntry = g2.node(w2);
      wEntry["in"] -= weight8;
      assignBucket(buckets, zeroIdx, wEntry);
    });
    g2.removeNode(entry.v);
    return results;
  }
  function buildState(g2, weightFn) {
    var fasGraph = new Graph();
    var maxIn = 0;
    var maxOut = 0;
    _2.forEach(g2.nodes(), function(v2) {
      fasGraph.setNode(v2, { v: v2, "in": 0, out: 0 });
    });
    _2.forEach(g2.edges(), function(e2) {
      var prevWeight = fasGraph.edge(e2.v, e2.w) || 0;
      var weight8 = weightFn(e2);
      var edgeWeight = prevWeight + weight8;
      fasGraph.setEdge(e2.v, e2.w, edgeWeight);
      maxOut = Math.max(maxOut, fasGraph.node(e2.v).out += weight8);
      maxIn = Math.max(maxIn, fasGraph.node(e2.w)["in"] += weight8);
    });
    var buckets = _2.range(maxOut + maxIn + 3).map(function() {
      return new List();
    });
    var zeroIdx = maxIn + 1;
    _2.forEach(fasGraph.nodes(), function(v2) {
      assignBucket(buckets, zeroIdx, fasGraph.node(v2));
    });
    return { graph: fasGraph, buckets, zeroIdx };
  }
  function assignBucket(buckets, zeroIdx, entry) {
    if (!entry.out) {
      buckets[0].enqueue(entry);
    } else if (!entry["in"]) {
      buckets[buckets.length - 1].enqueue(entry);
    } else {
      buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
    }
  }
  return greedyFas;
}
var acyclic;
var hasRequiredAcyclic;
function requireAcyclic() {
  if (hasRequiredAcyclic)
    return acyclic;
  hasRequiredAcyclic = 1;
  var _2 = requireLodash();
  var greedyFAS = requireGreedyFas();
  acyclic = {
    run: run2,
    undo: undo2
  };
  function run2(g2) {
    var fas = g2.graph().acyclicer === "greedy" ? greedyFAS(g2, weightFn(g2)) : dfsFAS(g2);
    _2.forEach(fas, function(e2) {
      var label = g2.edge(e2);
      g2.removeEdge(e2);
      label.forwardName = e2.name;
      label.reversed = true;
      g2.setEdge(e2.w, e2.v, label, _2.uniqueId("rev"));
    });
    function weightFn(g3) {
      return function(e2) {
        return g3.edge(e2).weight;
      };
    }
  }
  function dfsFAS(g2) {
    var fas = [];
    var stack = {};
    var visited = {};
    function dfs(v2) {
      if (_2.has(visited, v2)) {
        return;
      }
      visited[v2] = true;
      stack[v2] = true;
      _2.forEach(g2.outEdges(v2), function(e2) {
        if (_2.has(stack, e2.w)) {
          fas.push(e2);
        } else {
          dfs(e2.w);
        }
      });
      delete stack[v2];
    }
    _2.forEach(g2.nodes(), dfs);
    return fas;
  }
  function undo2(g2) {
    _2.forEach(g2.edges(), function(e2) {
      var label = g2.edge(e2);
      if (label.reversed) {
        g2.removeEdge(e2);
        var forwardName = label.forwardName;
        delete label.reversed;
        delete label.forwardName;
        g2.setEdge(e2.w, e2.v, label, forwardName);
      }
    });
  }
  return acyclic;
}
var util$1;
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1)
    return util$1;
  hasRequiredUtil$1 = 1;
  var _2 = requireLodash();
  var Graph = requireGraphlib().Graph;
  util$1 = {
    addDummyNode,
    simplify,
    asNonCompoundGraph,
    successorWeights,
    predecessorWeights,
    intersectRect,
    buildLayerMatrix,
    normalizeRanks,
    removeEmptyRanks,
    addBorderNode,
    maxRank,
    partition,
    time: time2,
    notime
  };
  function addDummyNode(g2, type, attrs, name2) {
    var v2;
    do {
      v2 = _2.uniqueId(name2);
    } while (g2.hasNode(v2));
    attrs.dummy = type;
    g2.setNode(v2, attrs);
    return v2;
  }
  function simplify(g2) {
    var simplified = new Graph().setGraph(g2.graph());
    _2.forEach(g2.nodes(), function(v2) {
      simplified.setNode(v2, g2.node(v2));
    });
    _2.forEach(g2.edges(), function(e2) {
      var simpleLabel = simplified.edge(e2.v, e2.w) || { weight: 0, minlen: 1 };
      var label = g2.edge(e2);
      simplified.setEdge(e2.v, e2.w, {
        weight: simpleLabel.weight + label.weight,
        minlen: Math.max(simpleLabel.minlen, label.minlen)
      });
    });
    return simplified;
  }
  function asNonCompoundGraph(g2) {
    var simplified = new Graph({ multigraph: g2.isMultigraph() }).setGraph(g2.graph());
    _2.forEach(g2.nodes(), function(v2) {
      if (!g2.children(v2).length) {
        simplified.setNode(v2, g2.node(v2));
      }
    });
    _2.forEach(g2.edges(), function(e2) {
      simplified.setEdge(e2, g2.edge(e2));
    });
    return simplified;
  }
  function successorWeights(g2) {
    var weightMap = _2.map(g2.nodes(), function(v2) {
      var sucs = {};
      _2.forEach(g2.outEdges(v2), function(e2) {
        sucs[e2.w] = (sucs[e2.w] || 0) + g2.edge(e2).weight;
      });
      return sucs;
    });
    return _2.zipObject(g2.nodes(), weightMap);
  }
  function predecessorWeights(g2) {
    var weightMap = _2.map(g2.nodes(), function(v2) {
      var preds = {};
      _2.forEach(g2.inEdges(v2), function(e2) {
        preds[e2.v] = (preds[e2.v] || 0) + g2.edge(e2).weight;
      });
      return preds;
    });
    return _2.zipObject(g2.nodes(), weightMap);
  }
  function intersectRect(rect, point) {
    var x2 = rect.x;
    var y2 = rect.y;
    var dx = point.x - x2;
    var dy = point.y - y2;
    var w2 = rect.width / 2;
    var h2 = rect.height / 2;
    if (!dx && !dy) {
      throw new Error("Not possible to find intersection inside of the rectangle");
    }
    var sx, sy;
    if (Math.abs(dy) * w2 > Math.abs(dx) * h2) {
      if (dy < 0) {
        h2 = -h2;
      }
      sx = h2 * dx / dy;
      sy = h2;
    } else {
      if (dx < 0) {
        w2 = -w2;
      }
      sx = w2;
      sy = w2 * dy / dx;
    }
    return { x: x2 + sx, y: y2 + sy };
  }
  function buildLayerMatrix(g2) {
    var layering = _2.map(_2.range(maxRank(g2) + 1), function() {
      return [];
    });
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      var rank = node.rank;
      if (!_2.isUndefined(rank)) {
        layering[rank][node.order] = v2;
      }
    });
    return layering;
  }
  function normalizeRanks(g2) {
    var min4 = _2.min(_2.map(g2.nodes(), function(v2) {
      return g2.node(v2).rank;
    }));
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      if (_2.has(node, "rank")) {
        node.rank -= min4;
      }
    });
  }
  function removeEmptyRanks(g2) {
    var offset = _2.min(_2.map(g2.nodes(), function(v2) {
      return g2.node(v2).rank;
    }));
    var layers = [];
    _2.forEach(g2.nodes(), function(v2) {
      var rank = g2.node(v2).rank - offset;
      if (!layers[rank]) {
        layers[rank] = [];
      }
      layers[rank].push(v2);
    });
    var delta = 0;
    var nodeRankFactor = g2.graph().nodeRankFactor;
    _2.forEach(layers, function(vs, i2) {
      if (_2.isUndefined(vs) && i2 % nodeRankFactor !== 0) {
        --delta;
      } else if (delta) {
        _2.forEach(vs, function(v2) {
          g2.node(v2).rank += delta;
        });
      }
    });
  }
  function addBorderNode(g2, prefix, rank, order) {
    var node = {
      width: 0,
      height: 0
    };
    if (arguments.length >= 4) {
      node.rank = rank;
      node.order = order;
    }
    return addDummyNode(g2, "border", node, prefix);
  }
  function maxRank(g2) {
    return _2.max(_2.map(g2.nodes(), function(v2) {
      var rank = g2.node(v2).rank;
      if (!_2.isUndefined(rank)) {
        return rank;
      }
    }));
  }
  function partition(collection4, fn3) {
    var result = { lhs: [], rhs: [] };
    _2.forEach(collection4, function(value) {
      if (fn3(value)) {
        result.lhs.push(value);
      } else {
        result.rhs.push(value);
      }
    });
    return result;
  }
  function time2(name2, fn3) {
    var start = _2.now();
    try {
      return fn3();
    } finally {
      console.log(name2 + " time: " + (_2.now() - start) + "ms");
    }
  }
  function notime(name2, fn3) {
    return fn3();
  }
  return util$1;
}
var normalize2;
var hasRequiredNormalize;
function requireNormalize() {
  if (hasRequiredNormalize)
    return normalize2;
  hasRequiredNormalize = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  normalize2 = {
    run: run2,
    undo: undo2
  };
  function run2(g2) {
    g2.graph().dummyChains = [];
    _2.forEach(g2.edges(), function(edge) {
      normalizeEdge(g2, edge);
    });
  }
  function normalizeEdge(g2, e2) {
    var v2 = e2.v;
    var vRank = g2.node(v2).rank;
    var w2 = e2.w;
    var wRank = g2.node(w2).rank;
    var name2 = e2.name;
    var edgeLabel = g2.edge(e2);
    var labelRank = edgeLabel.labelRank;
    if (wRank === vRank + 1)
      return;
    g2.removeEdge(e2);
    var dummy, attrs, i2;
    for (i2 = 0, ++vRank; vRank < wRank; ++i2, ++vRank) {
      edgeLabel.points = [];
      attrs = {
        width: 0,
        height: 0,
        edgeLabel,
        edgeObj: e2,
        rank: vRank
      };
      dummy = util2.addDummyNode(g2, "edge", attrs, "_d");
      if (vRank === labelRank) {
        attrs.width = edgeLabel.width;
        attrs.height = edgeLabel.height;
        attrs.dummy = "edge-label";
        attrs.labelpos = edgeLabel.labelpos;
      }
      g2.setEdge(v2, dummy, { weight: edgeLabel.weight }, name2);
      if (i2 === 0) {
        g2.graph().dummyChains.push(dummy);
      }
      v2 = dummy;
    }
    g2.setEdge(v2, w2, { weight: edgeLabel.weight }, name2);
  }
  function undo2(g2) {
    _2.forEach(g2.graph().dummyChains, function(v2) {
      var node = g2.node(v2);
      var origLabel = node.edgeLabel;
      var w2;
      g2.setEdge(node.edgeObj, origLabel);
      while (node.dummy) {
        w2 = g2.successors(v2)[0];
        g2.removeNode(v2);
        origLabel.points.push({ x: node.x, y: node.y });
        if (node.dummy === "edge-label") {
          origLabel.x = node.x;
          origLabel.y = node.y;
          origLabel.width = node.width;
          origLabel.height = node.height;
        }
        v2 = w2;
        node = g2.node(v2);
      }
    });
  }
  return normalize2;
}
var util;
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil)
    return util;
  hasRequiredUtil = 1;
  var _2 = requireLodash();
  util = {
    longestPath,
    slack
  };
  function longestPath(g2) {
    var visited = {};
    function dfs(v2) {
      var label = g2.node(v2);
      if (_2.has(visited, v2)) {
        return label.rank;
      }
      visited[v2] = true;
      var rank = _2.min(_2.map(g2.outEdges(v2), function(e2) {
        return dfs(e2.w) - g2.edge(e2).minlen;
      }));
      if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
      rank === void 0 || // return value of _.map([]) for Lodash 4
      rank === null) {
        rank = 0;
      }
      return label.rank = rank;
    }
    _2.forEach(g2.sources(), dfs);
  }
  function slack(g2, e2) {
    return g2.node(e2.w).rank - g2.node(e2.v).rank - g2.edge(e2).minlen;
  }
  return util;
}
var feasibleTree_1;
var hasRequiredFeasibleTree;
function requireFeasibleTree() {
  if (hasRequiredFeasibleTree)
    return feasibleTree_1;
  hasRequiredFeasibleTree = 1;
  var _2 = requireLodash();
  var Graph = requireGraphlib().Graph;
  var slack = requireUtil().slack;
  feasibleTree_1 = feasibleTree;
  function feasibleTree(g2) {
    var t3 = new Graph({ directed: false });
    var start = g2.nodes()[0];
    var size3 = g2.nodeCount();
    t3.setNode(start, {});
    var edge, delta;
    while (tightTree(t3, g2) < size3) {
      edge = findMinSlackEdge(t3, g2);
      delta = t3.hasNode(edge.v) ? slack(g2, edge) : -slack(g2, edge);
      shiftRanks(t3, g2, delta);
    }
    return t3;
  }
  function tightTree(t3, g2) {
    function dfs(v2) {
      _2.forEach(g2.nodeEdges(v2), function(e2) {
        var edgeV = e2.v, w2 = v2 === edgeV ? e2.w : edgeV;
        if (!t3.hasNode(w2) && !slack(g2, e2)) {
          t3.setNode(w2, {});
          t3.setEdge(v2, w2, {});
          dfs(w2);
        }
      });
    }
    _2.forEach(t3.nodes(), dfs);
    return t3.nodeCount();
  }
  function findMinSlackEdge(t3, g2) {
    return _2.minBy(g2.edges(), function(e2) {
      if (t3.hasNode(e2.v) !== t3.hasNode(e2.w)) {
        return slack(g2, e2);
      }
    });
  }
  function shiftRanks(t3, g2, delta) {
    _2.forEach(t3.nodes(), function(v2) {
      g2.node(v2).rank += delta;
    });
  }
  return feasibleTree_1;
}
var networkSimplex_1;
var hasRequiredNetworkSimplex;
function requireNetworkSimplex() {
  if (hasRequiredNetworkSimplex)
    return networkSimplex_1;
  hasRequiredNetworkSimplex = 1;
  var _2 = requireLodash();
  var feasibleTree = requireFeasibleTree();
  var slack = requireUtil().slack;
  var initRank = requireUtil().longestPath;
  var preorder = requireGraphlib().alg.preorder;
  var postorder = requireGraphlib().alg.postorder;
  var simplify = requireUtil$1().simplify;
  networkSimplex_1 = networkSimplex;
  networkSimplex.initLowLimValues = initLowLimValues;
  networkSimplex.initCutValues = initCutValues;
  networkSimplex.calcCutValue = calcCutValue;
  networkSimplex.leaveEdge = leaveEdge;
  networkSimplex.enterEdge = enterEdge;
  networkSimplex.exchangeEdges = exchangeEdges;
  function networkSimplex(g2) {
    g2 = simplify(g2);
    initRank(g2);
    var t3 = feasibleTree(g2);
    initLowLimValues(t3);
    initCutValues(t3, g2);
    var e2, f2;
    while (e2 = leaveEdge(t3)) {
      f2 = enterEdge(t3, g2, e2);
      exchangeEdges(t3, g2, e2, f2);
    }
  }
  function initCutValues(t3, g2) {
    var vs = postorder(t3, t3.nodes());
    vs = vs.slice(0, vs.length - 1);
    _2.forEach(vs, function(v2) {
      assignCutValue(t3, g2, v2);
    });
  }
  function assignCutValue(t3, g2, child) {
    var childLab = t3.node(child);
    var parent4 = childLab.parent;
    t3.edge(child, parent4).cutvalue = calcCutValue(t3, g2, child);
  }
  function calcCutValue(t3, g2, child) {
    var childLab = t3.node(child);
    var parent4 = childLab.parent;
    var childIsTail = true;
    var graphEdge = g2.edge(child, parent4);
    var cutValue = 0;
    if (!graphEdge) {
      childIsTail = false;
      graphEdge = g2.edge(parent4, child);
    }
    cutValue = graphEdge.weight;
    _2.forEach(g2.nodeEdges(child), function(e2) {
      var isOutEdge = e2.v === child, other = isOutEdge ? e2.w : e2.v;
      if (other !== parent4) {
        var pointsToHead = isOutEdge === childIsTail, otherWeight = g2.edge(e2).weight;
        cutValue += pointsToHead ? otherWeight : -otherWeight;
        if (isTreeEdge(t3, child, other)) {
          var otherCutValue = t3.edge(child, other).cutvalue;
          cutValue += pointsToHead ? -otherCutValue : otherCutValue;
        }
      }
    });
    return cutValue;
  }
  function initLowLimValues(tree, root2) {
    if (arguments.length < 2) {
      root2 = tree.nodes()[0];
    }
    dfsAssignLowLim(tree, {}, 1, root2);
  }
  function dfsAssignLowLim(tree, visited, nextLim, v2, parent4) {
    var low = nextLim;
    var label = tree.node(v2);
    visited[v2] = true;
    _2.forEach(tree.neighbors(v2), function(w2) {
      if (!_2.has(visited, w2)) {
        nextLim = dfsAssignLowLim(tree, visited, nextLim, w2, v2);
      }
    });
    label.low = low;
    label.lim = nextLim++;
    if (parent4) {
      label.parent = parent4;
    } else {
      delete label.parent;
    }
    return nextLim;
  }
  function leaveEdge(tree) {
    return _2.find(tree.edges(), function(e2) {
      return tree.edge(e2).cutvalue < 0;
    });
  }
  function enterEdge(t3, g2, edge) {
    var v2 = edge.v;
    var w2 = edge.w;
    if (!g2.hasEdge(v2, w2)) {
      v2 = edge.w;
      w2 = edge.v;
    }
    var vLabel = t3.node(v2);
    var wLabel = t3.node(w2);
    var tailLabel = vLabel;
    var flip = false;
    if (vLabel.lim > wLabel.lim) {
      tailLabel = wLabel;
      flip = true;
    }
    var candidates = _2.filter(g2.edges(), function(edge2) {
      return flip === isDescendant(t3, t3.node(edge2.v), tailLabel) && flip !== isDescendant(t3, t3.node(edge2.w), tailLabel);
    });
    return _2.minBy(candidates, function(edge2) {
      return slack(g2, edge2);
    });
  }
  function exchangeEdges(t3, g2, e2, f2) {
    var v2 = e2.v;
    var w2 = e2.w;
    t3.removeEdge(v2, w2);
    t3.setEdge(f2.v, f2.w, {});
    initLowLimValues(t3);
    initCutValues(t3, g2);
    updateRanks(t3, g2);
  }
  function updateRanks(t3, g2) {
    var root2 = _2.find(t3.nodes(), function(v2) {
      return !g2.node(v2).parent;
    });
    var vs = preorder(t3, root2);
    vs = vs.slice(1);
    _2.forEach(vs, function(v2) {
      var parent4 = t3.node(v2).parent, edge = g2.edge(v2, parent4), flipped = false;
      if (!edge) {
        edge = g2.edge(parent4, v2);
        flipped = true;
      }
      g2.node(v2).rank = g2.node(parent4).rank + (flipped ? edge.minlen : -edge.minlen);
    });
  }
  function isTreeEdge(tree, u2, v2) {
    return tree.hasEdge(u2, v2);
  }
  function isDescendant(tree, vLabel, rootLabel) {
    return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
  }
  return networkSimplex_1;
}
var rank_1;
var hasRequiredRank;
function requireRank() {
  if (hasRequiredRank)
    return rank_1;
  hasRequiredRank = 1;
  var rankUtil = requireUtil();
  var longestPath = rankUtil.longestPath;
  var feasibleTree = requireFeasibleTree();
  var networkSimplex = requireNetworkSimplex();
  rank_1 = rank;
  function rank(g2) {
    switch (g2.graph().ranker) {
      case "network-simplex":
        networkSimplexRanker(g2);
        break;
      case "tight-tree":
        tightTreeRanker(g2);
        break;
      case "longest-path":
        longestPathRanker(g2);
        break;
      default:
        networkSimplexRanker(g2);
    }
  }
  var longestPathRanker = longestPath;
  function tightTreeRanker(g2) {
    longestPath(g2);
    feasibleTree(g2);
  }
  function networkSimplexRanker(g2) {
    networkSimplex(g2);
  }
  return rank_1;
}
var parentDummyChains_1;
var hasRequiredParentDummyChains;
function requireParentDummyChains() {
  if (hasRequiredParentDummyChains)
    return parentDummyChains_1;
  hasRequiredParentDummyChains = 1;
  var _2 = requireLodash();
  parentDummyChains_1 = parentDummyChains;
  function parentDummyChains(g2) {
    var postorderNums = postorder(g2);
    _2.forEach(g2.graph().dummyChains, function(v2) {
      var node = g2.node(v2);
      var edgeObj = node.edgeObj;
      var pathData = findPath(g2, postorderNums, edgeObj.v, edgeObj.w);
      var path = pathData.path;
      var lca = pathData.lca;
      var pathIdx = 0;
      var pathV = path[pathIdx];
      var ascending3 = true;
      while (v2 !== edgeObj.w) {
        node = g2.node(v2);
        if (ascending3) {
          while ((pathV = path[pathIdx]) !== lca && g2.node(pathV).maxRank < node.rank) {
            pathIdx++;
          }
          if (pathV === lca) {
            ascending3 = false;
          }
        }
        if (!ascending3) {
          while (pathIdx < path.length - 1 && g2.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
            pathIdx++;
          }
          pathV = path[pathIdx];
        }
        g2.setParent(v2, pathV);
        v2 = g2.successors(v2)[0];
      }
    });
  }
  function findPath(g2, postorderNums, v2, w2) {
    var vPath = [];
    var wPath = [];
    var low = Math.min(postorderNums[v2].low, postorderNums[w2].low);
    var lim = Math.max(postorderNums[v2].lim, postorderNums[w2].lim);
    var parent4;
    var lca;
    parent4 = v2;
    do {
      parent4 = g2.parent(parent4);
      vPath.push(parent4);
    } while (parent4 && (postorderNums[parent4].low > low || lim > postorderNums[parent4].lim));
    lca = parent4;
    parent4 = w2;
    while ((parent4 = g2.parent(parent4)) !== lca) {
      wPath.push(parent4);
    }
    return { path: vPath.concat(wPath.reverse()), lca };
  }
  function postorder(g2) {
    var result = {};
    var lim = 0;
    function dfs(v2) {
      var low = lim;
      _2.forEach(g2.children(v2), dfs);
      result[v2] = { low, lim: lim++ };
    }
    _2.forEach(g2.children(), dfs);
    return result;
  }
  return parentDummyChains_1;
}
var nestingGraph;
var hasRequiredNestingGraph;
function requireNestingGraph() {
  if (hasRequiredNestingGraph)
    return nestingGraph;
  hasRequiredNestingGraph = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  nestingGraph = {
    run: run2,
    cleanup
  };
  function run2(g2) {
    var root2 = util2.addDummyNode(g2, "root", {}, "_root");
    var depths = treeDepths(g2);
    var height2 = _2.max(_2.values(depths)) - 1;
    var nodeSep = 2 * height2 + 1;
    g2.graph().nestingRoot = root2;
    _2.forEach(g2.edges(), function(e2) {
      g2.edge(e2).minlen *= nodeSep;
    });
    var weight8 = sumWeights(g2) + 1;
    _2.forEach(g2.children(), function(child) {
      dfs(g2, root2, nodeSep, weight8, height2, depths, child);
    });
    g2.graph().nodeRankFactor = nodeSep;
  }
  function dfs(g2, root2, nodeSep, weight8, height2, depths, v2) {
    var children2 = g2.children(v2);
    if (!children2.length) {
      if (v2 !== root2) {
        g2.setEdge(root2, v2, { weight: 0, minlen: nodeSep });
      }
      return;
    }
    var top = util2.addBorderNode(g2, "_bt");
    var bottom = util2.addBorderNode(g2, "_bb");
    var label = g2.node(v2);
    g2.setParent(top, v2);
    label.borderTop = top;
    g2.setParent(bottom, v2);
    label.borderBottom = bottom;
    _2.forEach(children2, function(child) {
      dfs(g2, root2, nodeSep, weight8, height2, depths, child);
      var childNode = g2.node(child);
      var childTop = childNode.borderTop ? childNode.borderTop : child;
      var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
      var thisWeight = childNode.borderTop ? weight8 : 2 * weight8;
      var minlen = childTop !== childBottom ? 1 : height2 - depths[v2] + 1;
      g2.setEdge(top, childTop, {
        weight: thisWeight,
        minlen,
        nestingEdge: true
      });
      g2.setEdge(childBottom, bottom, {
        weight: thisWeight,
        minlen,
        nestingEdge: true
      });
    });
    if (!g2.parent(v2)) {
      g2.setEdge(root2, top, { weight: 0, minlen: height2 + depths[v2] });
    }
  }
  function treeDepths(g2) {
    var depths = {};
    function dfs2(v2, depth) {
      var children2 = g2.children(v2);
      if (children2 && children2.length) {
        _2.forEach(children2, function(child) {
          dfs2(child, depth + 1);
        });
      }
      depths[v2] = depth;
    }
    _2.forEach(g2.children(), function(v2) {
      dfs2(v2, 1);
    });
    return depths;
  }
  function sumWeights(g2) {
    return _2.reduce(g2.edges(), function(acc, e2) {
      return acc + g2.edge(e2).weight;
    }, 0);
  }
  function cleanup(g2) {
    var graphLabel = g2.graph();
    g2.removeNode(graphLabel.nestingRoot);
    delete graphLabel.nestingRoot;
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      if (edge.nestingEdge) {
        g2.removeEdge(e2);
      }
    });
  }
  return nestingGraph;
}
var addBorderSegments_1;
var hasRequiredAddBorderSegments;
function requireAddBorderSegments() {
  if (hasRequiredAddBorderSegments)
    return addBorderSegments_1;
  hasRequiredAddBorderSegments = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  addBorderSegments_1 = addBorderSegments;
  function addBorderSegments(g2) {
    function dfs(v2) {
      var children2 = g2.children(v2);
      var node = g2.node(v2);
      if (children2.length) {
        _2.forEach(children2, dfs);
      }
      if (_2.has(node, "minRank")) {
        node.borderLeft = [];
        node.borderRight = [];
        for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {
          addBorderNode(g2, "borderLeft", "_bl", v2, node, rank);
          addBorderNode(g2, "borderRight", "_br", v2, node, rank);
        }
      }
    }
    _2.forEach(g2.children(), dfs);
  }
  function addBorderNode(g2, prop, prefix, sg, sgNode, rank) {
    var label = { width: 0, height: 0, rank, borderType: prop };
    var prev = sgNode[prop][rank - 1];
    var curr = util2.addDummyNode(g2, "border", label, prefix);
    sgNode[prop][rank] = curr;
    g2.setParent(curr, sg);
    if (prev) {
      g2.setEdge(prev, curr, { weight: 1 });
    }
  }
  return addBorderSegments_1;
}
var coordinateSystem;
var hasRequiredCoordinateSystem;
function requireCoordinateSystem() {
  if (hasRequiredCoordinateSystem)
    return coordinateSystem;
  hasRequiredCoordinateSystem = 1;
  var _2 = requireLodash();
  coordinateSystem = {
    adjust,
    undo: undo2
  };
  function adjust(g2) {
    var rankDir = g2.graph().rankdir.toLowerCase();
    if (rankDir === "lr" || rankDir === "rl") {
      swapWidthHeight(g2);
    }
  }
  function undo2(g2) {
    var rankDir = g2.graph().rankdir.toLowerCase();
    if (rankDir === "bt" || rankDir === "rl") {
      reverseY(g2);
    }
    if (rankDir === "lr" || rankDir === "rl") {
      swapXY(g2);
      swapWidthHeight(g2);
    }
  }
  function swapWidthHeight(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      swapWidthHeightOne(g2.node(v2));
    });
    _2.forEach(g2.edges(), function(e2) {
      swapWidthHeightOne(g2.edge(e2));
    });
  }
  function swapWidthHeightOne(attrs) {
    var w2 = attrs.width;
    attrs.width = attrs.height;
    attrs.height = w2;
  }
  function reverseY(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      reverseYOne(g2.node(v2));
    });
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      _2.forEach(edge.points, reverseYOne);
      if (_2.has(edge, "y")) {
        reverseYOne(edge);
      }
    });
  }
  function reverseYOne(attrs) {
    attrs.y = -attrs.y;
  }
  function swapXY(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      swapXYOne(g2.node(v2));
    });
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      _2.forEach(edge.points, swapXYOne);
      if (_2.has(edge, "x")) {
        swapXYOne(edge);
      }
    });
  }
  function swapXYOne(attrs) {
    var x2 = attrs.x;
    attrs.x = attrs.y;
    attrs.y = x2;
  }
  return coordinateSystem;
}
var initOrder_1;
var hasRequiredInitOrder;
function requireInitOrder() {
  if (hasRequiredInitOrder)
    return initOrder_1;
  hasRequiredInitOrder = 1;
  var _2 = requireLodash();
  initOrder_1 = initOrder;
  function initOrder(g2) {
    var visited = {};
    var simpleNodes = _2.filter(g2.nodes(), function(v2) {
      return !g2.children(v2).length;
    });
    var maxRank = _2.max(_2.map(simpleNodes, function(v2) {
      return g2.node(v2).rank;
    }));
    var layers = _2.map(_2.range(maxRank + 1), function() {
      return [];
    });
    function dfs(v2) {
      if (_2.has(visited, v2))
        return;
      visited[v2] = true;
      var node = g2.node(v2);
      layers[node.rank].push(v2);
      _2.forEach(g2.successors(v2), dfs);
    }
    var orderedVs = _2.sortBy(simpleNodes, function(v2) {
      return g2.node(v2).rank;
    });
    _2.forEach(orderedVs, dfs);
    return layers;
  }
  return initOrder_1;
}
var crossCount_1;
var hasRequiredCrossCount;
function requireCrossCount() {
  if (hasRequiredCrossCount)
    return crossCount_1;
  hasRequiredCrossCount = 1;
  var _2 = requireLodash();
  crossCount_1 = crossCount;
  function crossCount(g2, layering) {
    var cc = 0;
    for (var i2 = 1; i2 < layering.length; ++i2) {
      cc += twoLayerCrossCount(g2, layering[i2 - 1], layering[i2]);
    }
    return cc;
  }
  function twoLayerCrossCount(g2, northLayer, southLayer) {
    var southPos = _2.zipObject(
      southLayer,
      _2.map(southLayer, function(v2, i2) {
        return i2;
      })
    );
    var southEntries = _2.flatten(_2.map(northLayer, function(v2) {
      return _2.sortBy(_2.map(g2.outEdges(v2), function(e2) {
        return { pos: southPos[e2.w], weight: g2.edge(e2).weight };
      }), "pos");
    }), true);
    var firstIndex = 1;
    while (firstIndex < southLayer.length)
      firstIndex <<= 1;
    var treeSize = 2 * firstIndex - 1;
    firstIndex -= 1;
    var tree = _2.map(new Array(treeSize), function() {
      return 0;
    });
    var cc = 0;
    _2.forEach(southEntries.forEach(function(entry) {
      var index = entry.pos + firstIndex;
      tree[index] += entry.weight;
      var weightSum = 0;
      while (index > 0) {
        if (index % 2) {
          weightSum += tree[index + 1];
        }
        index = index - 1 >> 1;
        tree[index] += entry.weight;
      }
      cc += entry.weight * weightSum;
    }));
    return cc;
  }
  return crossCount_1;
}
var barycenter_1;
var hasRequiredBarycenter;
function requireBarycenter() {
  if (hasRequiredBarycenter)
    return barycenter_1;
  hasRequiredBarycenter = 1;
  var _2 = requireLodash();
  barycenter_1 = barycenter;
  function barycenter(g2, movable) {
    return _2.map(movable, function(v2) {
      var inV = g2.inEdges(v2);
      if (!inV.length) {
        return { v: v2 };
      } else {
        var result = _2.reduce(inV, function(acc, e2) {
          var edge = g2.edge(e2), nodeU = g2.node(e2.v);
          return {
            sum: acc.sum + edge.weight * nodeU.order,
            weight: acc.weight + edge.weight
          };
        }, { sum: 0, weight: 0 });
        return {
          v: v2,
          barycenter: result.sum / result.weight,
          weight: result.weight
        };
      }
    });
  }
  return barycenter_1;
}
var resolveConflicts_1;
var hasRequiredResolveConflicts;
function requireResolveConflicts() {
  if (hasRequiredResolveConflicts)
    return resolveConflicts_1;
  hasRequiredResolveConflicts = 1;
  var _2 = requireLodash();
  resolveConflicts_1 = resolveConflicts;
  function resolveConflicts(entries, cg) {
    var mappedEntries = {};
    _2.forEach(entries, function(entry, i2) {
      var tmp = mappedEntries[entry.v] = {
        indegree: 0,
        "in": [],
        out: [],
        vs: [entry.v],
        i: i2
      };
      if (!_2.isUndefined(entry.barycenter)) {
        tmp.barycenter = entry.barycenter;
        tmp.weight = entry.weight;
      }
    });
    _2.forEach(cg.edges(), function(e2) {
      var entryV = mappedEntries[e2.v];
      var entryW = mappedEntries[e2.w];
      if (!_2.isUndefined(entryV) && !_2.isUndefined(entryW)) {
        entryW.indegree++;
        entryV.out.push(mappedEntries[e2.w]);
      }
    });
    var sourceSet = _2.filter(mappedEntries, function(entry) {
      return !entry.indegree;
    });
    return doResolveConflicts(sourceSet);
  }
  function doResolveConflicts(sourceSet) {
    var entries = [];
    function handleIn(vEntry) {
      return function(uEntry) {
        if (uEntry.merged) {
          return;
        }
        if (_2.isUndefined(uEntry.barycenter) || _2.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {
          mergeEntries(vEntry, uEntry);
        }
      };
    }
    function handleOut(vEntry) {
      return function(wEntry) {
        wEntry["in"].push(vEntry);
        if (--wEntry.indegree === 0) {
          sourceSet.push(wEntry);
        }
      };
    }
    while (sourceSet.length) {
      var entry = sourceSet.pop();
      entries.push(entry);
      _2.forEach(entry["in"].reverse(), handleIn(entry));
      _2.forEach(entry.out, handleOut(entry));
    }
    return _2.map(
      _2.filter(entries, function(entry2) {
        return !entry2.merged;
      }),
      function(entry2) {
        return _2.pick(entry2, ["vs", "i", "barycenter", "weight"]);
      }
    );
  }
  function mergeEntries(target, source) {
    var sum = 0;
    var weight8 = 0;
    if (target.weight) {
      sum += target.barycenter * target.weight;
      weight8 += target.weight;
    }
    if (source.weight) {
      sum += source.barycenter * source.weight;
      weight8 += source.weight;
    }
    target.vs = source.vs.concat(target.vs);
    target.barycenter = sum / weight8;
    target.weight = weight8;
    target.i = Math.min(source.i, target.i);
    source.merged = true;
  }
  return resolveConflicts_1;
}
var sort_1;
var hasRequiredSort;
function requireSort() {
  if (hasRequiredSort)
    return sort_1;
  hasRequiredSort = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  sort_1 = sort2;
  function sort2(entries, biasRight) {
    var parts = util2.partition(entries, function(entry) {
      return _2.has(entry, "barycenter");
    });
    var sortable = parts.lhs, unsortable = _2.sortBy(parts.rhs, function(entry) {
      return -entry.i;
    }), vs = [], sum = 0, weight8 = 0, vsIndex = 0;
    sortable.sort(compareWithBias(!!biasRight));
    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
    _2.forEach(sortable, function(entry) {
      vsIndex += entry.vs.length;
      vs.push(entry.vs);
      sum += entry.barycenter * entry.weight;
      weight8 += entry.weight;
      vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
    });
    var result = { vs: _2.flatten(vs, true) };
    if (weight8) {
      result.barycenter = sum / weight8;
      result.weight = weight8;
    }
    return result;
  }
  function consumeUnsortable(vs, unsortable, index) {
    var last2;
    while (unsortable.length && (last2 = _2.last(unsortable)).i <= index) {
      unsortable.pop();
      vs.push(last2.vs);
      index++;
    }
    return index;
  }
  function compareWithBias(bias) {
    return function(entryV, entryW) {
      if (entryV.barycenter < entryW.barycenter) {
        return -1;
      } else if (entryV.barycenter > entryW.barycenter) {
        return 1;
      }
      return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
    };
  }
  return sort_1;
}
var sortSubgraph_1;
var hasRequiredSortSubgraph;
function requireSortSubgraph() {
  if (hasRequiredSortSubgraph)
    return sortSubgraph_1;
  hasRequiredSortSubgraph = 1;
  var _2 = requireLodash();
  var barycenter = requireBarycenter();
  var resolveConflicts = requireResolveConflicts();
  var sort2 = requireSort();
  sortSubgraph_1 = sortSubgraph;
  function sortSubgraph(g2, v2, cg, biasRight) {
    var movable = g2.children(v2);
    var node = g2.node(v2);
    var bl = node ? node.borderLeft : void 0;
    var br = node ? node.borderRight : void 0;
    var subgraphs = {};
    if (bl) {
      movable = _2.filter(movable, function(w2) {
        return w2 !== bl && w2 !== br;
      });
    }
    var barycenters = barycenter(g2, movable);
    _2.forEach(barycenters, function(entry) {
      if (g2.children(entry.v).length) {
        var subgraphResult = sortSubgraph(g2, entry.v, cg, biasRight);
        subgraphs[entry.v] = subgraphResult;
        if (_2.has(subgraphResult, "barycenter")) {
          mergeBarycenters(entry, subgraphResult);
        }
      }
    });
    var entries = resolveConflicts(barycenters, cg);
    expandSubgraphs(entries, subgraphs);
    var result = sort2(entries, biasRight);
    if (bl) {
      result.vs = _2.flatten([bl, result.vs, br], true);
      if (g2.predecessors(bl).length) {
        var blPred = g2.node(g2.predecessors(bl)[0]), brPred = g2.node(g2.predecessors(br)[0]);
        if (!_2.has(result, "barycenter")) {
          result.barycenter = 0;
          result.weight = 0;
        }
        result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);
        result.weight += 2;
      }
    }
    return result;
  }
  function expandSubgraphs(entries, subgraphs) {
    _2.forEach(entries, function(entry) {
      entry.vs = _2.flatten(entry.vs.map(function(v2) {
        if (subgraphs[v2]) {
          return subgraphs[v2].vs;
        }
        return v2;
      }), true);
    });
  }
  function mergeBarycenters(target, other) {
    if (!_2.isUndefined(target.barycenter)) {
      target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);
      target.weight += other.weight;
    } else {
      target.barycenter = other.barycenter;
      target.weight = other.weight;
    }
  }
  return sortSubgraph_1;
}
var buildLayerGraph_1;
var hasRequiredBuildLayerGraph;
function requireBuildLayerGraph() {
  if (hasRequiredBuildLayerGraph)
    return buildLayerGraph_1;
  hasRequiredBuildLayerGraph = 1;
  var _2 = requireLodash();
  var Graph = requireGraphlib().Graph;
  buildLayerGraph_1 = buildLayerGraph;
  function buildLayerGraph(g2, rank, relationship) {
    var root2 = createRootNode(g2), result = new Graph({ compound: true }).setGraph({ root: root2 }).setDefaultNodeLabel(function(v2) {
      return g2.node(v2);
    });
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2), parent4 = g2.parent(v2);
      if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
        result.setNode(v2);
        result.setParent(v2, parent4 || root2);
        _2.forEach(g2[relationship](v2), function(e2) {
          var u2 = e2.v === v2 ? e2.w : e2.v, edge = result.edge(u2, v2), weight8 = !_2.isUndefined(edge) ? edge.weight : 0;
          result.setEdge(u2, v2, { weight: g2.edge(e2).weight + weight8 });
        });
        if (_2.has(node, "minRank")) {
          result.setNode(v2, {
            borderLeft: node.borderLeft[rank],
            borderRight: node.borderRight[rank]
          });
        }
      }
    });
    return result;
  }
  function createRootNode(g2) {
    var v2;
    while (g2.hasNode(v2 = _2.uniqueId("_root")))
      ;
    return v2;
  }
  return buildLayerGraph_1;
}
var addSubgraphConstraints_1;
var hasRequiredAddSubgraphConstraints;
function requireAddSubgraphConstraints() {
  if (hasRequiredAddSubgraphConstraints)
    return addSubgraphConstraints_1;
  hasRequiredAddSubgraphConstraints = 1;
  var _2 = requireLodash();
  addSubgraphConstraints_1 = addSubgraphConstraints;
  function addSubgraphConstraints(g2, cg, vs) {
    var prev = {}, rootPrev;
    _2.forEach(vs, function(v2) {
      var child = g2.parent(v2), parent4, prevChild;
      while (child) {
        parent4 = g2.parent(child);
        if (parent4) {
          prevChild = prev[parent4];
          prev[parent4] = child;
        } else {
          prevChild = rootPrev;
          rootPrev = child;
        }
        if (prevChild && prevChild !== child) {
          cg.setEdge(prevChild, child);
          return;
        }
        child = parent4;
      }
    });
  }
  return addSubgraphConstraints_1;
}
var order_1;
var hasRequiredOrder;
function requireOrder() {
  if (hasRequiredOrder)
    return order_1;
  hasRequiredOrder = 1;
  var _2 = requireLodash();
  var initOrder = requireInitOrder();
  var crossCount = requireCrossCount();
  var sortSubgraph = requireSortSubgraph();
  var buildLayerGraph = requireBuildLayerGraph();
  var addSubgraphConstraints = requireAddSubgraphConstraints();
  var Graph = requireGraphlib().Graph;
  var util2 = requireUtil$1();
  order_1 = order;
  function order(g2) {
    var maxRank = util2.maxRank(g2), downLayerGraphs = buildLayerGraphs(g2, _2.range(1, maxRank + 1), "inEdges"), upLayerGraphs = buildLayerGraphs(g2, _2.range(maxRank - 1, -1, -1), "outEdges");
    var layering = initOrder(g2);
    assignOrder(g2, layering);
    var bestCC = Number.POSITIVE_INFINITY, best;
    for (var i2 = 0, lastBest = 0; lastBest < 4; ++i2, ++lastBest) {
      sweepLayerGraphs(i2 % 2 ? downLayerGraphs : upLayerGraphs, i2 % 4 >= 2);
      layering = util2.buildLayerMatrix(g2);
      var cc = crossCount(g2, layering);
      if (cc < bestCC) {
        lastBest = 0;
        best = _2.cloneDeep(layering);
        bestCC = cc;
      }
    }
    assignOrder(g2, best);
  }
  function buildLayerGraphs(g2, ranks, relationship) {
    return _2.map(ranks, function(rank) {
      return buildLayerGraph(g2, rank, relationship);
    });
  }
  function sweepLayerGraphs(layerGraphs, biasRight) {
    var cg = new Graph();
    _2.forEach(layerGraphs, function(lg) {
      var root2 = lg.graph().root;
      var sorted = sortSubgraph(lg, root2, cg, biasRight);
      _2.forEach(sorted.vs, function(v2, i2) {
        lg.node(v2).order = i2;
      });
      addSubgraphConstraints(lg, cg, sorted.vs);
    });
  }
  function assignOrder(g2, layering) {
    _2.forEach(layering, function(layer) {
      _2.forEach(layer, function(v2, i2) {
        g2.node(v2).order = i2;
      });
    });
  }
  return order_1;
}
var bk;
var hasRequiredBk;
function requireBk() {
  if (hasRequiredBk)
    return bk;
  hasRequiredBk = 1;
  var _2 = requireLodash();
  var Graph = requireGraphlib().Graph;
  var util2 = requireUtil$1();
  bk = {
    positionX,
    findType1Conflicts,
    findType2Conflicts,
    addConflict,
    hasConflict,
    verticalAlignment,
    horizontalCompaction,
    alignCoordinates,
    findSmallestWidthAlignment,
    balance
  };
  function findType1Conflicts(g2, layering) {
    var conflicts = {};
    function visitLayer(prevLayer, layer) {
      var k0 = 0, scanPos = 0, prevLayerLength = prevLayer.length, lastNode = _2.last(layer);
      _2.forEach(layer, function(v2, i2) {
        var w2 = findOtherInnerSegmentNode(g2, v2), k1 = w2 ? g2.node(w2).order : prevLayerLength;
        if (w2 || v2 === lastNode) {
          _2.forEach(layer.slice(scanPos, i2 + 1), function(scanNode) {
            _2.forEach(g2.predecessors(scanNode), function(u2) {
              var uLabel = g2.node(u2), uPos = uLabel.order;
              if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g2.node(scanNode).dummy)) {
                addConflict(conflicts, u2, scanNode);
              }
            });
          });
          scanPos = i2 + 1;
          k0 = k1;
        }
      });
      return layer;
    }
    _2.reduce(layering, visitLayer);
    return conflicts;
  }
  function findType2Conflicts(g2, layering) {
    var conflicts = {};
    function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
      var v2;
      _2.forEach(_2.range(southPos, southEnd), function(i2) {
        v2 = south[i2];
        if (g2.node(v2).dummy) {
          _2.forEach(g2.predecessors(v2), function(u2) {
            var uNode = g2.node(u2);
            if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
              addConflict(conflicts, u2, v2);
            }
          });
        }
      });
    }
    function visitLayer(north, south) {
      var prevNorthPos = -1, nextNorthPos, southPos = 0;
      _2.forEach(south, function(v2, southLookahead) {
        if (g2.node(v2).dummy === "border") {
          var predecessors = g2.predecessors(v2);
          if (predecessors.length) {
            nextNorthPos = g2.node(predecessors[0]).order;
            scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
            southPos = southLookahead;
            prevNorthPos = nextNorthPos;
          }
        }
        scan(south, southPos, south.length, nextNorthPos, north.length);
      });
      return south;
    }
    _2.reduce(layering, visitLayer);
    return conflicts;
  }
  function findOtherInnerSegmentNode(g2, v2) {
    if (g2.node(v2).dummy) {
      return _2.find(g2.predecessors(v2), function(u2) {
        return g2.node(u2).dummy;
      });
    }
  }
  function addConflict(conflicts, v2, w2) {
    if (v2 > w2) {
      var tmp = v2;
      v2 = w2;
      w2 = tmp;
    }
    var conflictsV = conflicts[v2];
    if (!conflictsV) {
      conflicts[v2] = conflictsV = {};
    }
    conflictsV[w2] = true;
  }
  function hasConflict(conflicts, v2, w2) {
    if (v2 > w2) {
      var tmp = v2;
      v2 = w2;
      w2 = tmp;
    }
    return _2.has(conflicts[v2], w2);
  }
  function verticalAlignment(g2, layering, conflicts, neighborFn) {
    var root2 = {}, align = {}, pos = {};
    _2.forEach(layering, function(layer) {
      _2.forEach(layer, function(v2, order) {
        root2[v2] = v2;
        align[v2] = v2;
        pos[v2] = order;
      });
    });
    _2.forEach(layering, function(layer) {
      var prevIdx = -1;
      _2.forEach(layer, function(v2) {
        var ws = neighborFn(v2);
        if (ws.length) {
          ws = _2.sortBy(ws, function(w3) {
            return pos[w3];
          });
          var mp = (ws.length - 1) / 2;
          for (var i2 = Math.floor(mp), il = Math.ceil(mp); i2 <= il; ++i2) {
            var w2 = ws[i2];
            if (align[v2] === v2 && prevIdx < pos[w2] && !hasConflict(conflicts, v2, w2)) {
              align[w2] = v2;
              align[v2] = root2[v2] = root2[w2];
              prevIdx = pos[w2];
            }
          }
        }
      });
    });
    return { root: root2, align };
  }
  function horizontalCompaction(g2, layering, root2, align, reverseSep) {
    var xs = {}, blockG = buildBlockGraph(g2, layering, root2, reverseSep), borderType = reverseSep ? "borderLeft" : "borderRight";
    function iterate(setXsFunc, nextNodesFunc) {
      var stack = blockG.nodes();
      var elem = stack.pop();
      var visited = {};
      while (elem) {
        if (visited[elem]) {
          setXsFunc(elem);
        } else {
          visited[elem] = true;
          stack.push(elem);
          stack = stack.concat(nextNodesFunc(elem));
        }
        elem = stack.pop();
      }
    }
    function pass1(elem) {
      xs[elem] = blockG.inEdges(elem).reduce(function(acc, e2) {
        return Math.max(acc, xs[e2.v] + blockG.edge(e2));
      }, 0);
    }
    function pass2(elem) {
      var min4 = blockG.outEdges(elem).reduce(function(acc, e2) {
        return Math.min(acc, xs[e2.w] - blockG.edge(e2));
      }, Number.POSITIVE_INFINITY);
      var node = g2.node(elem);
      if (min4 !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
        xs[elem] = Math.max(xs[elem], min4);
      }
    }
    iterate(pass1, blockG.predecessors.bind(blockG));
    iterate(pass2, blockG.successors.bind(blockG));
    _2.forEach(align, function(v2) {
      xs[v2] = xs[root2[v2]];
    });
    return xs;
  }
  function buildBlockGraph(g2, layering, root2, reverseSep) {
    var blockGraph = new Graph(), graphLabel = g2.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);
    _2.forEach(layering, function(layer) {
      var u2;
      _2.forEach(layer, function(v2) {
        var vRoot = root2[v2];
        blockGraph.setNode(vRoot);
        if (u2) {
          var uRoot = root2[u2], prevMax = blockGraph.edge(uRoot, vRoot);
          blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g2, v2, u2), prevMax || 0));
        }
        u2 = v2;
      });
    });
    return blockGraph;
  }
  function findSmallestWidthAlignment(g2, xss) {
    return _2.minBy(_2.values(xss), function(xs) {
      var max5 = Number.NEGATIVE_INFINITY;
      var min4 = Number.POSITIVE_INFINITY;
      _2.forIn(xs, function(x2, v2) {
        var halfWidth = width2(g2, v2) / 2;
        max5 = Math.max(x2 + halfWidth, max5);
        min4 = Math.min(x2 - halfWidth, min4);
      });
      return max5 - min4;
    });
  }
  function alignCoordinates(xss, alignTo) {
    var alignToVals = _2.values(alignTo), alignToMin = _2.min(alignToVals), alignToMax = _2.max(alignToVals);
    _2.forEach(["u", "d"], function(vert) {
      _2.forEach(["l", "r"], function(horiz) {
        var alignment2 = vert + horiz, xs = xss[alignment2], delta;
        if (xs === alignTo)
          return;
        var xsVals = _2.values(xs);
        delta = horiz === "l" ? alignToMin - _2.min(xsVals) : alignToMax - _2.max(xsVals);
        if (delta) {
          xss[alignment2] = _2.mapValues(xs, function(x2) {
            return x2 + delta;
          });
        }
      });
    });
  }
  function balance(xss, align) {
    return _2.mapValues(xss.ul, function(ignore, v2) {
      if (align) {
        return xss[align.toLowerCase()][v2];
      } else {
        var xs = _2.sortBy(_2.map(xss, v2));
        return (xs[1] + xs[2]) / 2;
      }
    });
  }
  function positionX(g2) {
    var layering = util2.buildLayerMatrix(g2);
    var conflicts = _2.merge(
      findType1Conflicts(g2, layering),
      findType2Conflicts(g2, layering)
    );
    var xss = {};
    var adjustedLayering;
    _2.forEach(["u", "d"], function(vert) {
      adjustedLayering = vert === "u" ? layering : _2.values(layering).reverse();
      _2.forEach(["l", "r"], function(horiz) {
        if (horiz === "r") {
          adjustedLayering = _2.map(adjustedLayering, function(inner) {
            return _2.values(inner).reverse();
          });
        }
        var neighborFn = (vert === "u" ? g2.predecessors : g2.successors).bind(g2);
        var align = verticalAlignment(g2, adjustedLayering, conflicts, neighborFn);
        var xs = horizontalCompaction(
          g2,
          adjustedLayering,
          align.root,
          align.align,
          horiz === "r"
        );
        if (horiz === "r") {
          xs = _2.mapValues(xs, function(x2) {
            return -x2;
          });
        }
        xss[vert + horiz] = xs;
      });
    });
    var smallestWidth = findSmallestWidthAlignment(g2, xss);
    alignCoordinates(xss, smallestWidth);
    return balance(xss, g2.graph().align);
  }
  function sep(nodeSep, edgeSep, reverseSep) {
    return function(g2, v2, w2) {
      var vLabel = g2.node(v2);
      var wLabel = g2.node(w2);
      var sum = 0;
      var delta;
      sum += vLabel.width / 2;
      if (_2.has(vLabel, "labelpos")) {
        switch (vLabel.labelpos.toLowerCase()) {
          case "l":
            delta = -vLabel.width / 2;
            break;
          case "r":
            delta = vLabel.width / 2;
            break;
        }
      }
      if (delta) {
        sum += reverseSep ? delta : -delta;
      }
      delta = 0;
      sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
      sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;
      sum += wLabel.width / 2;
      if (_2.has(wLabel, "labelpos")) {
        switch (wLabel.labelpos.toLowerCase()) {
          case "l":
            delta = wLabel.width / 2;
            break;
          case "r":
            delta = -wLabel.width / 2;
            break;
        }
      }
      if (delta) {
        sum += reverseSep ? delta : -delta;
      }
      delta = 0;
      return sum;
    };
  }
  function width2(g2, v2) {
    return g2.node(v2).width;
  }
  return bk;
}
var position_1;
var hasRequiredPosition;
function requirePosition() {
  if (hasRequiredPosition)
    return position_1;
  hasRequiredPosition = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  var positionX = requireBk().positionX;
  position_1 = position3;
  function position3(g2) {
    g2 = util2.asNonCompoundGraph(g2);
    positionY(g2);
    _2.forEach(positionX(g2), function(x2, v2) {
      g2.node(v2).x = x2;
    });
  }
  function positionY(g2) {
    var layering = util2.buildLayerMatrix(g2);
    var rankSep = g2.graph().ranksep;
    var prevY = 0;
    _2.forEach(layering, function(layer) {
      var maxHeight = _2.max(_2.map(layer, function(v2) {
        return g2.node(v2).height;
      }));
      _2.forEach(layer, function(v2) {
        g2.node(v2).y = prevY + maxHeight / 2;
      });
      prevY += maxHeight + rankSep;
    });
  }
  return position_1;
}
var layout_1;
var hasRequiredLayout$1;
function requireLayout$1() {
  if (hasRequiredLayout$1)
    return layout_1;
  hasRequiredLayout$1 = 1;
  var _2 = requireLodash();
  var acyclic2 = requireAcyclic();
  var normalize3 = requireNormalize();
  var rank = requireRank();
  var normalizeRanks = requireUtil$1().normalizeRanks;
  var parentDummyChains = requireParentDummyChains();
  var removeEmptyRanks = requireUtil$1().removeEmptyRanks;
  var nestingGraph2 = requireNestingGraph();
  var addBorderSegments = requireAddBorderSegments();
  var coordinateSystem2 = requireCoordinateSystem();
  var order = requireOrder();
  var position3 = requirePosition();
  var util2 = requireUtil$1();
  var Graph = requireGraphlib().Graph;
  layout_1 = layout4;
  function layout4(g2, opts) {
    var time2 = opts && opts.debugTiming ? util2.time : util2.notime;
    time2("layout", function() {
      var layoutGraph = time2("  buildLayoutGraph", function() {
        return buildLayoutGraph(g2);
      });
      time2("  runLayout", function() {
        runLayout(layoutGraph, time2);
      });
      time2("  updateInputGraph", function() {
        updateInputGraph(g2, layoutGraph);
      });
    });
  }
  function runLayout(g2, time2) {
    time2("    makeSpaceForEdgeLabels", function() {
      makeSpaceForEdgeLabels(g2);
    });
    time2("    removeSelfEdges", function() {
      removeSelfEdges(g2);
    });
    time2("    acyclic", function() {
      acyclic2.run(g2);
    });
    time2("    nestingGraph.run", function() {
      nestingGraph2.run(g2);
    });
    time2("    rank", function() {
      rank(util2.asNonCompoundGraph(g2));
    });
    time2("    injectEdgeLabelProxies", function() {
      injectEdgeLabelProxies(g2);
    });
    time2("    removeEmptyRanks", function() {
      removeEmptyRanks(g2);
    });
    time2("    nestingGraph.cleanup", function() {
      nestingGraph2.cleanup(g2);
    });
    time2("    normalizeRanks", function() {
      normalizeRanks(g2);
    });
    time2("    assignRankMinMax", function() {
      assignRankMinMax(g2);
    });
    time2("    removeEdgeLabelProxies", function() {
      removeEdgeLabelProxies(g2);
    });
    time2("    normalize.run", function() {
      normalize3.run(g2);
    });
    time2("    parentDummyChains", function() {
      parentDummyChains(g2);
    });
    time2("    addBorderSegments", function() {
      addBorderSegments(g2);
    });
    time2("    order", function() {
      order(g2);
    });
    time2("    insertSelfEdges", function() {
      insertSelfEdges(g2);
    });
    time2("    adjustCoordinateSystem", function() {
      coordinateSystem2.adjust(g2);
    });
    time2("    position", function() {
      position3(g2);
    });
    time2("    positionSelfEdges", function() {
      positionSelfEdges(g2);
    });
    time2("    removeBorderNodes", function() {
      removeBorderNodes(g2);
    });
    time2("    normalize.undo", function() {
      normalize3.undo(g2);
    });
    time2("    fixupEdgeLabelCoords", function() {
      fixupEdgeLabelCoords(g2);
    });
    time2("    undoCoordinateSystem", function() {
      coordinateSystem2.undo(g2);
    });
    time2("    translateGraph", function() {
      translateGraph(g2);
    });
    time2("    assignNodeIntersects", function() {
      assignNodeIntersects(g2);
    });
    time2("    reversePoints", function() {
      reversePointsForReversedEdges(g2);
    });
    time2("    acyclic.undo", function() {
      acyclic2.undo(g2);
    });
  }
  function updateInputGraph(inputGraph, layoutGraph) {
    _2.forEach(inputGraph.nodes(), function(v2) {
      var inputLabel = inputGraph.node(v2);
      var layoutLabel = layoutGraph.node(v2);
      if (inputLabel) {
        inputLabel.x = layoutLabel.x;
        inputLabel.y = layoutLabel.y;
        if (layoutGraph.children(v2).length) {
          inputLabel.width = layoutLabel.width;
          inputLabel.height = layoutLabel.height;
        }
      }
    });
    _2.forEach(inputGraph.edges(), function(e2) {
      var inputLabel = inputGraph.edge(e2);
      var layoutLabel = layoutGraph.edge(e2);
      inputLabel.points = layoutLabel.points;
      if (_2.has(layoutLabel, "x")) {
        inputLabel.x = layoutLabel.x;
        inputLabel.y = layoutLabel.y;
      }
    });
    inputGraph.graph().width = layoutGraph.graph().width;
    inputGraph.graph().height = layoutGraph.graph().height;
  }
  var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
  var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
  var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
  var nodeNumAttrs = ["width", "height"];
  var nodeDefaults = { width: 0, height: 0 };
  var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
  var edgeDefaults = {
    minlen: 1,
    weight: 1,
    width: 0,
    height: 0,
    labeloffset: 10,
    labelpos: "r"
  };
  var edgeAttrs = ["labelpos"];
  function buildLayoutGraph(inputGraph) {
    var g2 = new Graph({ multigraph: true, compound: true });
    var graph2 = canonicalize(inputGraph.graph());
    g2.setGraph(_2.merge(
      {},
      graphDefaults,
      selectNumberAttrs(graph2, graphNumAttrs),
      _2.pick(graph2, graphAttrs)
    ));
    _2.forEach(inputGraph.nodes(), function(v2) {
      var node = canonicalize(inputGraph.node(v2));
      g2.setNode(v2, _2.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
      g2.setParent(v2, inputGraph.parent(v2));
    });
    _2.forEach(inputGraph.edges(), function(e2) {
      var edge = canonicalize(inputGraph.edge(e2));
      g2.setEdge(e2, _2.merge(
        {},
        edgeDefaults,
        selectNumberAttrs(edge, edgeNumAttrs),
        _2.pick(edge, edgeAttrs)
      ));
    });
    return g2;
  }
  function makeSpaceForEdgeLabels(g2) {
    var graph2 = g2.graph();
    graph2.ranksep /= 2;
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      edge.minlen *= 2;
      if (edge.labelpos.toLowerCase() !== "c") {
        if (graph2.rankdir === "TB" || graph2.rankdir === "BT") {
          edge.width += edge.labeloffset;
        } else {
          edge.height += edge.labeloffset;
        }
      }
    });
  }
  function injectEdgeLabelProxies(g2) {
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      if (edge.width && edge.height) {
        var v2 = g2.node(e2.v);
        var w2 = g2.node(e2.w);
        var label = { rank: (w2.rank - v2.rank) / 2 + v2.rank, e: e2 };
        util2.addDummyNode(g2, "edge-proxy", label, "_ep");
      }
    });
  }
  function assignRankMinMax(g2) {
    var maxRank = 0;
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      if (node.borderTop) {
        node.minRank = g2.node(node.borderTop).rank;
        node.maxRank = g2.node(node.borderBottom).rank;
        maxRank = _2.max(maxRank, node.maxRank);
      }
    });
    g2.graph().maxRank = maxRank;
  }
  function removeEdgeLabelProxies(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      if (node.dummy === "edge-proxy") {
        g2.edge(node.e).labelRank = node.rank;
        g2.removeNode(v2);
      }
    });
  }
  function translateGraph(g2) {
    var minX = Number.POSITIVE_INFINITY;
    var maxX = 0;
    var minY = Number.POSITIVE_INFINITY;
    var maxY = 0;
    var graphLabel = g2.graph();
    var marginX = graphLabel.marginx || 0;
    var marginY = graphLabel.marginy || 0;
    function getExtremes(attrs) {
      var x2 = attrs.x;
      var y2 = attrs.y;
      var w2 = attrs.width;
      var h2 = attrs.height;
      minX = Math.min(minX, x2 - w2 / 2);
      maxX = Math.max(maxX, x2 + w2 / 2);
      minY = Math.min(minY, y2 - h2 / 2);
      maxY = Math.max(maxY, y2 + h2 / 2);
    }
    _2.forEach(g2.nodes(), function(v2) {
      getExtremes(g2.node(v2));
    });
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      if (_2.has(edge, "x")) {
        getExtremes(edge);
      }
    });
    minX -= marginX;
    minY -= marginY;
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      node.x -= minX;
      node.y -= minY;
    });
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      _2.forEach(edge.points, function(p2) {
        p2.x -= minX;
        p2.y -= minY;
      });
      if (_2.has(edge, "x")) {
        edge.x -= minX;
      }
      if (_2.has(edge, "y")) {
        edge.y -= minY;
      }
    });
    graphLabel.width = maxX - minX + marginX;
    graphLabel.height = maxY - minY + marginY;
  }
  function assignNodeIntersects(g2) {
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      var nodeV = g2.node(e2.v);
      var nodeW = g2.node(e2.w);
      var p1, p2;
      if (!edge.points) {
        edge.points = [];
        p1 = nodeW;
        p2 = nodeV;
      } else {
        p1 = edge.points[0];
        p2 = edge.points[edge.points.length - 1];
      }
      edge.points.unshift(util2.intersectRect(nodeV, p1));
      edge.points.push(util2.intersectRect(nodeW, p2));
    });
  }
  function fixupEdgeLabelCoords(g2) {
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      if (_2.has(edge, "x")) {
        if (edge.labelpos === "l" || edge.labelpos === "r") {
          edge.width -= edge.labeloffset;
        }
        switch (edge.labelpos) {
          case "l":
            edge.x -= edge.width / 2 + edge.labeloffset;
            break;
          case "r":
            edge.x += edge.width / 2 + edge.labeloffset;
            break;
        }
      }
    });
  }
  function reversePointsForReversedEdges(g2) {
    _2.forEach(g2.edges(), function(e2) {
      var edge = g2.edge(e2);
      if (edge.reversed) {
        edge.points.reverse();
      }
    });
  }
  function removeBorderNodes(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      if (g2.children(v2).length) {
        var node = g2.node(v2);
        var t3 = g2.node(node.borderTop);
        var b2 = g2.node(node.borderBottom);
        var l2 = g2.node(_2.last(node.borderLeft));
        var r2 = g2.node(_2.last(node.borderRight));
        node.width = Math.abs(r2.x - l2.x);
        node.height = Math.abs(b2.y - t3.y);
        node.x = l2.x + node.width / 2;
        node.y = t3.y + node.height / 2;
      }
    });
    _2.forEach(g2.nodes(), function(v2) {
      if (g2.node(v2).dummy === "border") {
        g2.removeNode(v2);
      }
    });
  }
  function removeSelfEdges(g2) {
    _2.forEach(g2.edges(), function(e2) {
      if (e2.v === e2.w) {
        var node = g2.node(e2.v);
        if (!node.selfEdges) {
          node.selfEdges = [];
        }
        node.selfEdges.push({ e: e2, label: g2.edge(e2) });
        g2.removeEdge(e2);
      }
    });
  }
  function insertSelfEdges(g2) {
    var layers = util2.buildLayerMatrix(g2);
    _2.forEach(layers, function(layer) {
      var orderShift = 0;
      _2.forEach(layer, function(v2, i2) {
        var node = g2.node(v2);
        node.order = i2 + orderShift;
        _2.forEach(node.selfEdges, function(selfEdge) {
          util2.addDummyNode(g2, "selfedge", {
            width: selfEdge.label.width,
            height: selfEdge.label.height,
            rank: node.rank,
            order: i2 + ++orderShift,
            e: selfEdge.e,
            label: selfEdge.label
          }, "_se");
        });
        delete node.selfEdges;
      });
    });
  }
  function positionSelfEdges(g2) {
    _2.forEach(g2.nodes(), function(v2) {
      var node = g2.node(v2);
      if (node.dummy === "selfedge") {
        var selfNode = g2.node(node.e.v);
        var x2 = selfNode.x + selfNode.width / 2;
        var y2 = selfNode.y;
        var dx = node.x - x2;
        var dy = selfNode.height / 2;
        g2.setEdge(node.e, node.label);
        g2.removeNode(v2);
        node.label.points = [
          { x: x2 + 2 * dx / 3, y: y2 - dy },
          { x: x2 + 5 * dx / 6, y: y2 - dy },
          { x: x2 + dx, y: y2 },
          { x: x2 + 5 * dx / 6, y: y2 + dy },
          { x: x2 + 2 * dx / 3, y: y2 + dy }
        ];
        node.label.x = node.x;
        node.label.y = node.y;
      }
    });
  }
  function selectNumberAttrs(obj, attrs) {
    return _2.mapValues(_2.pick(obj, attrs), Number);
  }
  function canonicalize(attrs) {
    var newAttrs = {};
    _2.forEach(attrs, function(v2, k2) {
      newAttrs[k2.toLowerCase()] = v2;
    });
    return newAttrs;
  }
  return layout_1;
}
var debug;
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug)
    return debug;
  hasRequiredDebug = 1;
  var _2 = requireLodash();
  var util2 = requireUtil$1();
  var Graph = requireGraphlib().Graph;
  debug = {
    debugOrdering
  };
  function debugOrdering(g2) {
    var layerMatrix = util2.buildLayerMatrix(g2);
    var h2 = new Graph({ compound: true, multigraph: true }).setGraph({});
    _2.forEach(g2.nodes(), function(v2) {
      h2.setNode(v2, { label: v2 });
      h2.setParent(v2, "layer" + g2.node(v2).rank);
    });
    _2.forEach(g2.edges(), function(e2) {
      h2.setEdge(e2.v, e2.w, {}, e2.name);
    });
    _2.forEach(layerMatrix, function(layer, i2) {
      var layerV = "layer" + i2;
      h2.setNode(layerV, { rank: "same" });
      _2.reduce(layer, function(u2, v2) {
        h2.setEdge(u2, v2, { style: "invis" });
        return v2;
      });
    });
    return h2;
  }
  return debug;
}
var version;
var hasRequiredVersion;
function requireVersion() {
  if (hasRequiredVersion)
    return version;
  hasRequiredVersion = 1;
  version = "0.8.5";
  return version;
}
var dagre$1;
var hasRequiredDagre;
function requireDagre() {
  if (hasRequiredDagre)
    return dagre$1;
  hasRequiredDagre = 1;
  dagre$1 = {
    graphlib: requireGraphlib(),
    layout: requireLayout$1(),
    debug: requireDebug(),
    util: {
      time: requireUtil$1().time,
      notime: requireUtil$1().notime
    },
    version: requireVersion()
  };
  return dagre$1;
}
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory(requireDagre());
  })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__4__) {
    return (
      /******/
      function(modules2) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
          };
          modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules2;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports2, name2, getter) {
          if (!__webpack_require__.o(exports2, name2)) {
            Object.defineProperty(exports2, name2, { enumerable: true, get: getter });
          }
        };
        __webpack_require__.r = function(exports2) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports2, "__esModule", { value: true });
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = /* @__PURE__ */ Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", { enumerable: true, value });
          if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(ns, key, (function(key2) {
                return value[key2];
              }).bind(null, key));
          return ns;
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function getDefault() {
              return module2["default"];
            }
          ) : (
            /******/
            function getModuleExports() {
              return module2;
            }
          );
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object3, property) {
          return Object.prototype.hasOwnProperty.call(object3, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 0);
      }([
        /* 0 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var impl2 = __webpack_require__(1);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "dagre", impl2);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof2 = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof2 = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof2(obj);
          }
          var isFunction2 = function isFunction3(o2) {
            return typeof o2 === "function";
          };
          var defaults3 = __webpack_require__(2);
          var assign5 = __webpack_require__(3);
          var dagre2 = __webpack_require__(4);
          function DagreLayout(options2) {
            this.options = assign5({}, defaults3, options2);
          }
          DagreLayout.prototype.run = function() {
            var options2 = this.options;
            var layout4 = this;
            var cy2 = options2.cy;
            var eles = options2.eles;
            var getVal = function getVal2(ele, val) {
              return isFunction2(val) ? val.apply(ele, [ele]) : val;
            };
            var bb = options2.boundingBox || {
              x1: 0,
              y1: 0,
              w: cy2.width(),
              h: cy2.height()
            };
            if (bb.x2 === void 0) {
              bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w === void 0) {
              bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 === void 0) {
              bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h === void 0) {
              bb.h = bb.y2 - bb.y1;
            }
            var g2 = new dagre2.graphlib.Graph({
              multigraph: true,
              compound: true
            });
            var gObj = {};
            var setGObj = function setGObj2(name2, val) {
              if (val != null) {
                gObj[name2] = val;
              }
            };
            setGObj("nodesep", options2.nodeSep);
            setGObj("edgesep", options2.edgeSep);
            setGObj("ranksep", options2.rankSep);
            setGObj("rankdir", options2.rankDir);
            setGObj("align", options2.align);
            setGObj("ranker", options2.ranker);
            setGObj("acyclicer", options2.acyclicer);
            g2.setGraph(gObj);
            g2.setDefaultEdgeLabel(function() {
              return {};
            });
            g2.setDefaultNodeLabel(function() {
              return {};
            });
            var nodes3 = eles.nodes();
            if (isFunction2(options2.sort)) {
              nodes3 = nodes3.sort(options2.sort);
            }
            for (var i2 = 0; i2 < nodes3.length; i2++) {
              var node = nodes3[i2];
              var nbb = node.layoutDimensions(options2);
              g2.setNode(node.id(), {
                width: nbb.w,
                height: nbb.h,
                name: node.id()
              });
            }
            for (var _i = 0; _i < nodes3.length; _i++) {
              var _node = nodes3[_i];
              if (_node.isChild()) {
                g2.setParent(_node.id(), _node.parent().id());
              }
            }
            var edges3 = eles.edges().stdFilter(function(edge2) {
              return !edge2.source().isParent() && !edge2.target().isParent();
            });
            if (isFunction2(options2.sort)) {
              edges3 = edges3.sort(options2.sort);
            }
            for (var _i2 = 0; _i2 < edges3.length; _i2++) {
              var edge = edges3[_i2];
              g2.setEdge(edge.source().id(), edge.target().id(), {
                minlen: getVal(edge, options2.minLen),
                weight: getVal(edge, options2.edgeWeight),
                name: edge.id()
              }, edge.id());
            }
            dagre2.layout(g2);
            var gNodeIds = g2.nodes();
            for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {
              var id2 = gNodeIds[_i3];
              var n2 = g2.node(id2);
              cy2.getElementById(id2).scratch().dagre = n2;
            }
            var dagreBB;
            if (options2.boundingBox) {
              dagreBB = {
                x1: Infinity,
                x2: -Infinity,
                y1: Infinity,
                y2: -Infinity
              };
              nodes3.forEach(function(node2) {
                var dModel = node2.scratch().dagre;
                dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
                dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);
                dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
                dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
              });
              dagreBB.w = dagreBB.x2 - dagreBB.x1;
              dagreBB.h = dagreBB.y2 - dagreBB.y1;
            } else {
              dagreBB = bb;
            }
            var constrainPos = function constrainPos2(p2) {
              if (options2.boundingBox) {
                var xPct = dagreBB.w === 0 ? 0 : (p2.x - dagreBB.x1) / dagreBB.w;
                var yPct = dagreBB.h === 0 ? 0 : (p2.y - dagreBB.y1) / dagreBB.h;
                return {
                  x: bb.x1 + xPct * bb.w,
                  y: bb.y1 + yPct * bb.h
                };
              } else {
                return p2;
              }
            };
            nodes3.layoutPositions(layout4, options2, function(ele) {
              ele = _typeof2(ele) === "object" ? ele : this;
              var dModel = ele.scratch().dagre;
              return constrainPos({
                x: dModel.x,
                y: dModel.y
              });
            });
            return this;
          };
          module2.exports = DagreLayout;
        },
        /* 2 */
        /***/
        function(module2, exports2) {
          var defaults3 = {
            // dagre algo options, uses default value on undefined
            nodeSep: void 0,
            // the separation between adjacent nodes in the same rank
            edgeSep: void 0,
            // the separation between adjacent edges in the same rank
            rankSep: void 0,
            // the separation between adjacent nodes in the same rank
            rankDir: void 0,
            // 'TB' for top to bottom flow, 'LR' for left to right,
            align: void 0,
            // alignment for rank nodes. Can be 'UL', 'UR', 'DL', or 'DR', where U = up, D = down, L = left, and R = right
            acyclicer: void 0,
            // If set to 'greedy', uses a greedy heuristic for finding a feedback arc set for a graph.
            // A feedback arc set is a set of edges that can be removed to make a graph acyclic.
            ranker: void 0,
            // Type of algorithm to assigns a rank to each node in the input graph.
            // Possible values: network-simplex, tight-tree or longest-path
            minLen: function minLen(edge) {
              return 1;
            },
            // number of ranks to keep between the source and target of the edge
            edgeWeight: function edgeWeight(edge) {
              return 1;
            },
            // higher weight edges are generally made shorter and straighter than lower weight edges
            // general layout options
            fit: true,
            // whether to fit to viewport
            padding: 30,
            // fit padding
            spacingFactor: void 0,
            // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
            nodeDimensionsIncludeLabels: false,
            // whether labels should be included in determining the space used by a node
            animate: false,
            // whether to transition the node positions
            animateFilter: function animateFilter8(node, i2) {
              return true;
            },
            // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
            animationDuration: 500,
            // duration of animation in ms if enabled
            animationEasing: void 0,
            // easing of animation if enabled
            boundingBox: void 0,
            // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
            transform: function transform7(node, pos) {
              return pos;
            },
            // a function that applies a transform to the final node position
            ready: function ready4() {
            },
            // on layoutready
            sort: void 0,
            // a sorting function to order the nodes and edges; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
            // because cytoscape dagre creates a directed graph, and directed graphs use the node order as a tie breaker when
            // defining the topology of a graph, this sort function can help ensure the correct order of the nodes/edges.
            // this feature is most useful when adding and removing the same nodes and edges multiple times in a graph.
            stop: function stop5() {
            }
            // on layoutstop
          };
          module2.exports = defaults3;
        },
        /* 3 */
        /***/
        function(module2, exports2) {
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.forEach(function(src2) {
              Object.keys(src2).forEach(function(k2) {
                return tgt[k2] = src2[k2];
              });
            });
            return tgt;
          };
        },
        /* 4 */
        /***/
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE__4__;
        }
        /******/
      ])
    );
  });
})(cytoscapeDagre);
var cytoscapeDagreExports = cytoscapeDagre.exports;
const dagre = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeDagreExports);
var cytoscapeFcose = { exports: {} };
var coseBase = { exports: {} };
var layoutBase = { exports: {} };
var hasRequiredLayoutBase;
function requireLayoutBase() {
  if (hasRequiredLayoutBase)
    return layoutBase.exports;
  hasRequiredLayoutBase = 1;
  (function(module, exports) {
    (function webpackUniversalModuleDefinition(root2, factory) {
      module.exports = factory();
    })(commonjsGlobal, function() {
      return (
        /******/
        function(modules2) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules2;
          __webpack_require__.c = installedModules;
          __webpack_require__.i = function(value) {
            return value;
          };
          __webpack_require__.d = function(exports2, name2, getter) {
            if (!__webpack_require__.o(exports2, name2)) {
              Object.defineProperty(exports2, name2, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object3, property) {
            return Object.prototype.hasOwnProperty.call(object3, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 28);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function LayoutConstants() {
            }
            LayoutConstants.QUALITY = 1;
            LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;
            LayoutConstants.DEFAULT_INCREMENTAL = false;
            LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;
            LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;
            LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;
            LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;
            LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;
            LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;
            LayoutConstants.SIMPLE_NODE_SIZE = 40;
            LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;
            LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;
            LayoutConstants.MIN_EDGE_LENGTH = 1;
            LayoutConstants.WORLD_BOUNDARY = 1e6;
            LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1e3;
            LayoutConstants.WORLD_CENTER_X = 1200;
            LayoutConstants.WORLD_CENTER_Y = 900;
            module2.exports = LayoutConstants;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LGraphObject = __webpack_require__(2);
            var IGeometry = __webpack_require__(8);
            var IMath = __webpack_require__(9);
            function LEdge(source, target, vEdge) {
              LGraphObject.call(this, vEdge);
              this.isOverlapingSourceAndTarget = false;
              this.vGraphObject = vEdge;
              this.bendpoints = [];
              this.source = source;
              this.target = target;
            }
            LEdge.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LEdge[prop] = LGraphObject[prop];
            }
            LEdge.prototype.getSource = function() {
              return this.source;
            };
            LEdge.prototype.getTarget = function() {
              return this.target;
            };
            LEdge.prototype.isInterGraph = function() {
              return this.isInterGraph;
            };
            LEdge.prototype.getLength = function() {
              return this.length;
            };
            LEdge.prototype.isOverlapingSourceAndTarget = function() {
              return this.isOverlapingSourceAndTarget;
            };
            LEdge.prototype.getBendpoints = function() {
              return this.bendpoints;
            };
            LEdge.prototype.getLca = function() {
              return this.lca;
            };
            LEdge.prototype.getSourceInLca = function() {
              return this.sourceInLca;
            };
            LEdge.prototype.getTargetInLca = function() {
              return this.targetInLca;
            };
            LEdge.prototype.getOtherEnd = function(node) {
              if (this.source === node) {
                return this.target;
              } else if (this.target === node) {
                return this.source;
              } else {
                throw "Node is not incident with this edge";
              }
            };
            LEdge.prototype.getOtherEndInGraph = function(node, graph2) {
              var otherEnd = this.getOtherEnd(node);
              var root2 = graph2.getGraphManager().getRoot();
              while (true) {
                if (otherEnd.getOwner() == graph2) {
                  return otherEnd;
                }
                if (otherEnd.getOwner() == root2) {
                  break;
                }
                otherEnd = otherEnd.getOwner().getParent();
              }
              return null;
            };
            LEdge.prototype.updateLength = function() {
              var clipPointCoordinates = new Array(4);
              this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);
              if (!this.isOverlapingSourceAndTarget) {
                this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];
                this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];
                if (Math.abs(this.lengthX) < 1) {
                  this.lengthX = IMath.sign(this.lengthX);
                }
                if (Math.abs(this.lengthY) < 1) {
                  this.lengthY = IMath.sign(this.lengthY);
                }
                this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
              }
            };
            LEdge.prototype.updateLengthSimple = function() {
              this.lengthX = this.target.getCenterX() - this.source.getCenterX();
              this.lengthY = this.target.getCenterY() - this.source.getCenterY();
              if (Math.abs(this.lengthX) < 1) {
                this.lengthX = IMath.sign(this.lengthX);
              }
              if (Math.abs(this.lengthY) < 1) {
                this.lengthY = IMath.sign(this.lengthY);
              }
              this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
            };
            module2.exports = LEdge;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function LGraphObject(vGraphObject) {
              this.vGraphObject = vGraphObject;
            }
            module2.exports = LGraphObject;
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LGraphObject = __webpack_require__(2);
            var Integer = __webpack_require__(10);
            var RectangleD = __webpack_require__(13);
            var LayoutConstants = __webpack_require__(0);
            var RandomSeed = __webpack_require__(16);
            var PointD = __webpack_require__(5);
            function LNode(gm, loc, size3, vNode) {
              if (size3 == null && vNode == null) {
                vNode = loc;
              }
              LGraphObject.call(this, vNode);
              if (gm.graphManager != null)
                gm = gm.graphManager;
              this.estimatedSize = Integer.MIN_VALUE;
              this.inclusionTreeDepth = Integer.MAX_VALUE;
              this.vGraphObject = vNode;
              this.edges = [];
              this.graphManager = gm;
              if (size3 != null && loc != null)
                this.rect = new RectangleD(loc.x, loc.y, size3.width, size3.height);
              else
                this.rect = new RectangleD();
            }
            LNode.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LNode[prop] = LGraphObject[prop];
            }
            LNode.prototype.getEdges = function() {
              return this.edges;
            };
            LNode.prototype.getChild = function() {
              return this.child;
            };
            LNode.prototype.getOwner = function() {
              return this.owner;
            };
            LNode.prototype.getWidth = function() {
              return this.rect.width;
            };
            LNode.prototype.setWidth = function(width2) {
              this.rect.width = width2;
            };
            LNode.prototype.getHeight = function() {
              return this.rect.height;
            };
            LNode.prototype.setHeight = function(height2) {
              this.rect.height = height2;
            };
            LNode.prototype.getCenterX = function() {
              return this.rect.x + this.rect.width / 2;
            };
            LNode.prototype.getCenterY = function() {
              return this.rect.y + this.rect.height / 2;
            };
            LNode.prototype.getCenter = function() {
              return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);
            };
            LNode.prototype.getLocation = function() {
              return new PointD(this.rect.x, this.rect.y);
            };
            LNode.prototype.getRect = function() {
              return this.rect;
            };
            LNode.prototype.getDiagonal = function() {
              return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);
            };
            LNode.prototype.getHalfTheDiagonal = function() {
              return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;
            };
            LNode.prototype.setRect = function(upperLeft, dimension) {
              this.rect.x = upperLeft.x;
              this.rect.y = upperLeft.y;
              this.rect.width = dimension.width;
              this.rect.height = dimension.height;
            };
            LNode.prototype.setCenter = function(cx, cy2) {
              this.rect.x = cx - this.rect.width / 2;
              this.rect.y = cy2 - this.rect.height / 2;
            };
            LNode.prototype.setLocation = function(x2, y2) {
              this.rect.x = x2;
              this.rect.y = y2;
            };
            LNode.prototype.moveBy = function(dx, dy) {
              this.rect.x += dx;
              this.rect.y += dy;
            };
            LNode.prototype.getEdgeListToNode = function(to) {
              var edgeList = [];
              var self2 = this;
              self2.edges.forEach(function(edge) {
                if (edge.target == to) {
                  if (edge.source != self2)
                    throw "Incorrect edge source!";
                  edgeList.push(edge);
                }
              });
              return edgeList;
            };
            LNode.prototype.getEdgesBetween = function(other) {
              var edgeList = [];
              var self2 = this;
              self2.edges.forEach(function(edge) {
                if (!(edge.source == self2 || edge.target == self2))
                  throw "Incorrect edge source and/or target";
                if (edge.target == other || edge.source == other) {
                  edgeList.push(edge);
                }
              });
              return edgeList;
            };
            LNode.prototype.getNeighborsList = function() {
              var neighbors = /* @__PURE__ */ new Set();
              var self2 = this;
              self2.edges.forEach(function(edge) {
                if (edge.source == self2) {
                  neighbors.add(edge.target);
                } else {
                  if (edge.target != self2) {
                    throw "Incorrect incidency!";
                  }
                  neighbors.add(edge.source);
                }
              });
              return neighbors;
            };
            LNode.prototype.withChildren = function() {
              var withNeighborsList = /* @__PURE__ */ new Set();
              var childNode;
              var children2;
              withNeighborsList.add(this);
              if (this.child != null) {
                var nodes3 = this.child.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  childNode = nodes3[i2];
                  children2 = childNode.withChildren();
                  children2.forEach(function(node) {
                    withNeighborsList.add(node);
                  });
                }
              }
              return withNeighborsList;
            };
            LNode.prototype.getNoOfChildren = function() {
              var noOfChildren = 0;
              var childNode;
              if (this.child == null) {
                noOfChildren = 1;
              } else {
                var nodes3 = this.child.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  childNode = nodes3[i2];
                  noOfChildren += childNode.getNoOfChildren();
                }
              }
              if (noOfChildren == 0) {
                noOfChildren = 1;
              }
              return noOfChildren;
            };
            LNode.prototype.getEstimatedSize = function() {
              if (this.estimatedSize == Integer.MIN_VALUE) {
                throw "assert failed";
              }
              return this.estimatedSize;
            };
            LNode.prototype.calcEstimatedSize = function() {
              if (this.child == null) {
                return this.estimatedSize = (this.rect.width + this.rect.height) / 2;
              } else {
                this.estimatedSize = this.child.calcEstimatedSize();
                this.rect.width = this.estimatedSize;
                this.rect.height = this.estimatedSize;
                return this.estimatedSize;
              }
            };
            LNode.prototype.scatter = function() {
              var randomCenterX;
              var randomCenterY;
              var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
              var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;
              randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;
              var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
              var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;
              randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;
              this.rect.x = randomCenterX;
              this.rect.y = randomCenterY;
            };
            LNode.prototype.updateBounds = function() {
              if (this.getChild() == null) {
                throw "assert failed";
              }
              if (this.getChild().getNodes().length != 0) {
                var childGraph = this.getChild();
                childGraph.updateBounds(true);
                this.rect.x = childGraph.getLeft();
                this.rect.y = childGraph.getTop();
                this.setWidth(childGraph.getRight() - childGraph.getLeft());
                this.setHeight(childGraph.getBottom() - childGraph.getTop());
                if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {
                  var width2 = childGraph.getRight() - childGraph.getLeft();
                  var height2 = childGraph.getBottom() - childGraph.getTop();
                  if (this.labelWidth) {
                    if (this.labelPosHorizontal == "left") {
                      this.rect.x -= this.labelWidth;
                      this.setWidth(width2 + this.labelWidth);
                    } else if (this.labelPosHorizontal == "center" && this.labelWidth > width2) {
                      this.rect.x -= (this.labelWidth - width2) / 2;
                      this.setWidth(this.labelWidth);
                    } else if (this.labelPosHorizontal == "right") {
                      this.setWidth(width2 + this.labelWidth);
                    }
                  }
                  if (this.labelHeight) {
                    if (this.labelPosVertical == "top") {
                      this.rect.y -= this.labelHeight;
                      this.setHeight(height2 + this.labelHeight);
                    } else if (this.labelPosVertical == "center" && this.labelHeight > height2) {
                      this.rect.y -= (this.labelHeight - height2) / 2;
                      this.setHeight(this.labelHeight);
                    } else if (this.labelPosVertical == "bottom") {
                      this.setHeight(height2 + this.labelHeight);
                    }
                  }
                }
              }
            };
            LNode.prototype.getInclusionTreeDepth = function() {
              if (this.inclusionTreeDepth == Integer.MAX_VALUE) {
                throw "assert failed";
              }
              return this.inclusionTreeDepth;
            };
            LNode.prototype.transform = function(trans) {
              var left = this.rect.x;
              if (left > LayoutConstants.WORLD_BOUNDARY) {
                left = LayoutConstants.WORLD_BOUNDARY;
              } else if (left < -LayoutConstants.WORLD_BOUNDARY) {
                left = -LayoutConstants.WORLD_BOUNDARY;
              }
              var top = this.rect.y;
              if (top > LayoutConstants.WORLD_BOUNDARY) {
                top = LayoutConstants.WORLD_BOUNDARY;
              } else if (top < -LayoutConstants.WORLD_BOUNDARY) {
                top = -LayoutConstants.WORLD_BOUNDARY;
              }
              var leftTop = new PointD(left, top);
              var vLeftTop = trans.inverseTransformPoint(leftTop);
              this.setLocation(vLeftTop.x, vLeftTop.y);
            };
            LNode.prototype.getLeft = function() {
              return this.rect.x;
            };
            LNode.prototype.getRight = function() {
              return this.rect.x + this.rect.width;
            };
            LNode.prototype.getTop = function() {
              return this.rect.y;
            };
            LNode.prototype.getBottom = function() {
              return this.rect.y + this.rect.height;
            };
            LNode.prototype.getParent = function() {
              if (this.owner == null) {
                return null;
              }
              return this.owner.getParent();
            };
            module2.exports = LNode;
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LayoutConstants = __webpack_require__(0);
            function FDLayoutConstants() {
            }
            for (var prop in LayoutConstants) {
              FDLayoutConstants[prop] = LayoutConstants[prop];
            }
            FDLayoutConstants.MAX_ITERATIONS = 2500;
            FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
            FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;
            FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500;
            FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;
            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1;
            FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;
            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;
            FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;
            FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;
            FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;
            FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;
            FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1e3;
            FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5e3;
            FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100;
            FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;
            FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10;
            FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;
            FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;
            FDLayoutConstants.MIN_EDGE_LENGTH = 1;
            FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;
            module2.exports = FDLayoutConstants;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function PointD(x2, y2) {
              if (x2 == null && y2 == null) {
                this.x = 0;
                this.y = 0;
              } else {
                this.x = x2;
                this.y = y2;
              }
            }
            PointD.prototype.getX = function() {
              return this.x;
            };
            PointD.prototype.getY = function() {
              return this.y;
            };
            PointD.prototype.setX = function(x2) {
              this.x = x2;
            };
            PointD.prototype.setY = function(y2) {
              this.y = y2;
            };
            PointD.prototype.getDifference = function(pt2) {
              return new DimensionD(this.x - pt2.x, this.y - pt2.y);
            };
            PointD.prototype.getCopy = function() {
              return new PointD(this.x, this.y);
            };
            PointD.prototype.translate = function(dim) {
              this.x += dim.width;
              this.y += dim.height;
              return this;
            };
            module2.exports = PointD;
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LGraphObject = __webpack_require__(2);
            var Integer = __webpack_require__(10);
            var LayoutConstants = __webpack_require__(0);
            var LGraphManager = __webpack_require__(7);
            var LNode = __webpack_require__(3);
            var LEdge = __webpack_require__(1);
            var RectangleD = __webpack_require__(13);
            var Point2 = __webpack_require__(12);
            var LinkedList = __webpack_require__(11);
            function LGraph(parent4, obj2, vGraph) {
              LGraphObject.call(this, vGraph);
              this.estimatedSize = Integer.MIN_VALUE;
              this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;
              this.edges = [];
              this.nodes = [];
              this.isConnected = false;
              this.parent = parent4;
              if (obj2 != null && obj2 instanceof LGraphManager) {
                this.graphManager = obj2;
              } else if (obj2 != null && obj2 instanceof Layout) {
                this.graphManager = obj2.graphManager;
              }
            }
            LGraph.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LGraph[prop] = LGraphObject[prop];
            }
            LGraph.prototype.getNodes = function() {
              return this.nodes;
            };
            LGraph.prototype.getEdges = function() {
              return this.edges;
            };
            LGraph.prototype.getGraphManager = function() {
              return this.graphManager;
            };
            LGraph.prototype.getParent = function() {
              return this.parent;
            };
            LGraph.prototype.getLeft = function() {
              return this.left;
            };
            LGraph.prototype.getRight = function() {
              return this.right;
            };
            LGraph.prototype.getTop = function() {
              return this.top;
            };
            LGraph.prototype.getBottom = function() {
              return this.bottom;
            };
            LGraph.prototype.isConnected = function() {
              return this.isConnected;
            };
            LGraph.prototype.add = function(obj1, sourceNode, targetNode) {
              if (sourceNode == null && targetNode == null) {
                var newNode = obj1;
                if (this.graphManager == null) {
                  throw "Graph has no graph mgr!";
                }
                if (this.getNodes().indexOf(newNode) > -1) {
                  throw "Node already in graph!";
                }
                newNode.owner = this;
                this.getNodes().push(newNode);
                return newNode;
              } else {
                var newEdge = obj1;
                if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {
                  throw "Source or target not in graph!";
                }
                if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {
                  throw "Both owners must be this graph!";
                }
                if (sourceNode.owner != targetNode.owner) {
                  return null;
                }
                newEdge.source = sourceNode;
                newEdge.target = targetNode;
                newEdge.isInterGraph = false;
                this.getEdges().push(newEdge);
                sourceNode.edges.push(newEdge);
                if (targetNode != sourceNode) {
                  targetNode.edges.push(newEdge);
                }
                return newEdge;
              }
            };
            LGraph.prototype.remove = function(obj) {
              var node = obj;
              if (obj instanceof LNode) {
                if (node == null) {
                  throw "Node is null!";
                }
                if (!(node.owner != null && node.owner == this)) {
                  throw "Owner graph is invalid!";
                }
                if (this.graphManager == null) {
                  throw "Owner graph manager is invalid!";
                }
                var edgesToBeRemoved = node.edges.slice();
                var edge;
                var s2 = edgesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  edge = edgesToBeRemoved[i2];
                  if (edge.isInterGraph) {
                    this.graphManager.remove(edge);
                  } else {
                    edge.source.owner.remove(edge);
                  }
                }
                var index = this.nodes.indexOf(node);
                if (index == -1) {
                  throw "Node not in owner node list!";
                }
                this.nodes.splice(index, 1);
              } else if (obj instanceof LEdge) {
                var edge = obj;
                if (edge == null) {
                  throw "Edge is null!";
                }
                if (!(edge.source != null && edge.target != null)) {
                  throw "Source and/or target is null!";
                }
                if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {
                  throw "Source and/or target owner is invalid!";
                }
                var sourceIndex = edge.source.edges.indexOf(edge);
                var targetIndex = edge.target.edges.indexOf(edge);
                if (!(sourceIndex > -1 && targetIndex > -1)) {
                  throw "Source and/or target doesn't know this edge!";
                }
                edge.source.edges.splice(sourceIndex, 1);
                if (edge.target != edge.source) {
                  edge.target.edges.splice(targetIndex, 1);
                }
                var index = edge.source.owner.getEdges().indexOf(edge);
                if (index == -1) {
                  throw "Not in owner's edge list!";
                }
                edge.source.owner.getEdges().splice(index, 1);
              }
            };
            LGraph.prototype.updateLeftTop = function() {
              var top = Integer.MAX_VALUE;
              var left = Integer.MAX_VALUE;
              var nodeTop;
              var nodeLeft;
              var margin;
              var nodes3 = this.getNodes();
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                nodeTop = lNode.getTop();
                nodeLeft = lNode.getLeft();
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
              }
              if (top == Integer.MAX_VALUE) {
                return null;
              }
              if (nodes3[0].getParent().paddingLeft != void 0) {
                margin = nodes3[0].getParent().paddingLeft;
              } else {
                margin = this.margin;
              }
              this.left = left - margin;
              this.top = top - margin;
              return new Point2(this.left, this.top);
            };
            LGraph.prototype.updateBounds = function(recursive) {
              var left = Integer.MAX_VALUE;
              var right = -Integer.MAX_VALUE;
              var top = Integer.MAX_VALUE;
              var bottom = -Integer.MAX_VALUE;
              var nodeLeft;
              var nodeRight;
              var nodeTop;
              var nodeBottom;
              var margin;
              var nodes3 = this.nodes;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                if (recursive && lNode.child != null) {
                  lNode.updateBounds();
                }
                nodeLeft = lNode.getLeft();
                nodeRight = lNode.getRight();
                nodeTop = lNode.getTop();
                nodeBottom = lNode.getBottom();
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
                if (right < nodeRight) {
                  right = nodeRight;
                }
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (bottom < nodeBottom) {
                  bottom = nodeBottom;
                }
              }
              var boundingRect = new RectangleD(left, top, right - left, bottom - top);
              if (left == Integer.MAX_VALUE) {
                this.left = this.parent.getLeft();
                this.right = this.parent.getRight();
                this.top = this.parent.getTop();
                this.bottom = this.parent.getBottom();
              }
              if (nodes3[0].getParent().paddingLeft != void 0) {
                margin = nodes3[0].getParent().paddingLeft;
              } else {
                margin = this.margin;
              }
              this.left = boundingRect.x - margin;
              this.right = boundingRect.x + boundingRect.width + margin;
              this.top = boundingRect.y - margin;
              this.bottom = boundingRect.y + boundingRect.height + margin;
            };
            LGraph.calculateBounds = function(nodes3) {
              var left = Integer.MAX_VALUE;
              var right = -Integer.MAX_VALUE;
              var top = Integer.MAX_VALUE;
              var bottom = -Integer.MAX_VALUE;
              var nodeLeft;
              var nodeRight;
              var nodeTop;
              var nodeBottom;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                nodeLeft = lNode.getLeft();
                nodeRight = lNode.getRight();
                nodeTop = lNode.getTop();
                nodeBottom = lNode.getBottom();
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
                if (right < nodeRight) {
                  right = nodeRight;
                }
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (bottom < nodeBottom) {
                  bottom = nodeBottom;
                }
              }
              var boundingRect = new RectangleD(left, top, right - left, bottom - top);
              return boundingRect;
            };
            LGraph.prototype.getInclusionTreeDepth = function() {
              if (this == this.graphManager.getRoot()) {
                return 1;
              } else {
                return this.parent.getInclusionTreeDepth();
              }
            };
            LGraph.prototype.getEstimatedSize = function() {
              if (this.estimatedSize == Integer.MIN_VALUE) {
                throw "assert failed";
              }
              return this.estimatedSize;
            };
            LGraph.prototype.calcEstimatedSize = function() {
              var size3 = 0;
              var nodes3 = this.nodes;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                size3 += lNode.calcEstimatedSize();
              }
              if (size3 == 0) {
                this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;
              } else {
                this.estimatedSize = size3 / Math.sqrt(this.nodes.length);
              }
              return this.estimatedSize;
            };
            LGraph.prototype.updateConnected = function() {
              var self2 = this;
              if (this.nodes.length == 0) {
                this.isConnected = true;
                return;
              }
              var queue = new LinkedList();
              var visited = /* @__PURE__ */ new Set();
              var currentNode = this.nodes[0];
              var neighborEdges;
              var currentNeighbor;
              var childrenOfNode = currentNode.withChildren();
              childrenOfNode.forEach(function(node) {
                queue.push(node);
                visited.add(node);
              });
              while (queue.length !== 0) {
                currentNode = queue.shift();
                neighborEdges = currentNode.getEdges();
                var size3 = neighborEdges.length;
                for (var i2 = 0; i2 < size3; i2++) {
                  var neighborEdge = neighborEdges[i2];
                  currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);
                  if (currentNeighbor != null && !visited.has(currentNeighbor)) {
                    var childrenOfNeighbor = currentNeighbor.withChildren();
                    childrenOfNeighbor.forEach(function(node) {
                      queue.push(node);
                      visited.add(node);
                    });
                  }
                }
              }
              this.isConnected = false;
              if (visited.size >= this.nodes.length) {
                var noOfVisitedInThisGraph = 0;
                visited.forEach(function(visitedNode) {
                  if (visitedNode.owner == self2) {
                    noOfVisitedInThisGraph++;
                  }
                });
                if (noOfVisitedInThisGraph == this.nodes.length) {
                  this.isConnected = true;
                }
              }
            };
            module2.exports = LGraph;
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LGraph;
            var LEdge = __webpack_require__(1);
            function LGraphManager(layout4) {
              LGraph = __webpack_require__(6);
              this.layout = layout4;
              this.graphs = [];
              this.edges = [];
            }
            LGraphManager.prototype.addRoot = function() {
              var ngraph = this.layout.newGraph();
              var nnode = this.layout.newNode(null);
              var root2 = this.add(ngraph, nnode);
              this.setRootGraph(root2);
              return this.rootGraph;
            };
            LGraphManager.prototype.add = function(newGraph, parentNode, newEdge, sourceNode, targetNode) {
              if (newEdge == null && sourceNode == null && targetNode == null) {
                if (newGraph == null) {
                  throw "Graph is null!";
                }
                if (parentNode == null) {
                  throw "Parent node is null!";
                }
                if (this.graphs.indexOf(newGraph) > -1) {
                  throw "Graph already in this graph mgr!";
                }
                this.graphs.push(newGraph);
                if (newGraph.parent != null) {
                  throw "Already has a parent!";
                }
                if (parentNode.child != null) {
                  throw "Already has a child!";
                }
                newGraph.parent = parentNode;
                parentNode.child = newGraph;
                return newGraph;
              } else {
                targetNode = newEdge;
                sourceNode = parentNode;
                newEdge = newGraph;
                var sourceGraph = sourceNode.getOwner();
                var targetGraph = targetNode.getOwner();
                if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {
                  throw "Source not in this graph mgr!";
                }
                if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {
                  throw "Target not in this graph mgr!";
                }
                if (sourceGraph == targetGraph) {
                  newEdge.isInterGraph = false;
                  return sourceGraph.add(newEdge, sourceNode, targetNode);
                } else {
                  newEdge.isInterGraph = true;
                  newEdge.source = sourceNode;
                  newEdge.target = targetNode;
                  if (this.edges.indexOf(newEdge) > -1) {
                    throw "Edge already in inter-graph edge list!";
                  }
                  this.edges.push(newEdge);
                  if (!(newEdge.source != null && newEdge.target != null)) {
                    throw "Edge source and/or target is null!";
                  }
                  if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {
                    throw "Edge already in source and/or target incidency list!";
                  }
                  newEdge.source.edges.push(newEdge);
                  newEdge.target.edges.push(newEdge);
                  return newEdge;
                }
              }
            };
            LGraphManager.prototype.remove = function(lObj) {
              if (lObj instanceof LGraph) {
                var graph2 = lObj;
                if (graph2.getGraphManager() != this) {
                  throw "Graph not in this graph mgr";
                }
                if (!(graph2 == this.rootGraph || graph2.parent != null && graph2.parent.graphManager == this)) {
                  throw "Invalid parent node!";
                }
                var edgesToBeRemoved = [];
                edgesToBeRemoved = edgesToBeRemoved.concat(graph2.getEdges());
                var edge;
                var s2 = edgesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  edge = edgesToBeRemoved[i2];
                  graph2.remove(edge);
                }
                var nodesToBeRemoved = [];
                nodesToBeRemoved = nodesToBeRemoved.concat(graph2.getNodes());
                var node;
                s2 = nodesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  node = nodesToBeRemoved[i2];
                  graph2.remove(node);
                }
                if (graph2 == this.rootGraph) {
                  this.setRootGraph(null);
                }
                var index = this.graphs.indexOf(graph2);
                this.graphs.splice(index, 1);
                graph2.parent = null;
              } else if (lObj instanceof LEdge) {
                edge = lObj;
                if (edge == null) {
                  throw "Edge is null!";
                }
                if (!edge.isInterGraph) {
                  throw "Not an inter-graph edge!";
                }
                if (!(edge.source != null && edge.target != null)) {
                  throw "Source and/or target is null!";
                }
                if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {
                  throw "Source and/or target doesn't know this edge!";
                }
                var index = edge.source.edges.indexOf(edge);
                edge.source.edges.splice(index, 1);
                index = edge.target.edges.indexOf(edge);
                edge.target.edges.splice(index, 1);
                if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {
                  throw "Edge owner graph or owner graph manager is null!";
                }
                if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {
                  throw "Not in owner graph manager's edge list!";
                }
                var index = edge.source.owner.getGraphManager().edges.indexOf(edge);
                edge.source.owner.getGraphManager().edges.splice(index, 1);
              }
            };
            LGraphManager.prototype.updateBounds = function() {
              this.rootGraph.updateBounds(true);
            };
            LGraphManager.prototype.getGraphs = function() {
              return this.graphs;
            };
            LGraphManager.prototype.getAllNodes = function() {
              if (this.allNodes == null) {
                var nodeList = [];
                var graphs = this.getGraphs();
                var s2 = graphs.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  nodeList = nodeList.concat(graphs[i2].getNodes());
                }
                this.allNodes = nodeList;
              }
              return this.allNodes;
            };
            LGraphManager.prototype.resetAllNodes = function() {
              this.allNodes = null;
            };
            LGraphManager.prototype.resetAllEdges = function() {
              this.allEdges = null;
            };
            LGraphManager.prototype.resetAllNodesToApplyGravitation = function() {
              this.allNodesToApplyGravitation = null;
            };
            LGraphManager.prototype.getAllEdges = function() {
              if (this.allEdges == null) {
                var edgeList = [];
                var graphs = this.getGraphs();
                graphs.length;
                for (var i2 = 0; i2 < graphs.length; i2++) {
                  edgeList = edgeList.concat(graphs[i2].getEdges());
                }
                edgeList = edgeList.concat(this.edges);
                this.allEdges = edgeList;
              }
              return this.allEdges;
            };
            LGraphManager.prototype.getAllNodesToApplyGravitation = function() {
              return this.allNodesToApplyGravitation;
            };
            LGraphManager.prototype.setAllNodesToApplyGravitation = function(nodeList) {
              if (this.allNodesToApplyGravitation != null) {
                throw "assert failed";
              }
              this.allNodesToApplyGravitation = nodeList;
            };
            LGraphManager.prototype.getRoot = function() {
              return this.rootGraph;
            };
            LGraphManager.prototype.setRootGraph = function(graph2) {
              if (graph2.getGraphManager() != this) {
                throw "Root not in this graph mgr!";
              }
              this.rootGraph = graph2;
              if (graph2.parent == null) {
                graph2.parent = this.layout.newNode("Root node");
              }
            };
            LGraphManager.prototype.getLayout = function() {
              return this.layout;
            };
            LGraphManager.prototype.isOneAncestorOfOther = function(firstNode, secondNode) {
              if (!(firstNode != null && secondNode != null)) {
                throw "assert failed";
              }
              if (firstNode == secondNode) {
                return true;
              }
              var ownerGraph = firstNode.getOwner();
              var parentNode;
              do {
                parentNode = ownerGraph.getParent();
                if (parentNode == null) {
                  break;
                }
                if (parentNode == secondNode) {
                  return true;
                }
                ownerGraph = parentNode.getOwner();
                if (ownerGraph == null) {
                  break;
                }
              } while (true);
              ownerGraph = secondNode.getOwner();
              do {
                parentNode = ownerGraph.getParent();
                if (parentNode == null) {
                  break;
                }
                if (parentNode == firstNode) {
                  return true;
                }
                ownerGraph = parentNode.getOwner();
                if (ownerGraph == null) {
                  break;
                }
              } while (true);
              return false;
            };
            LGraphManager.prototype.calcLowestCommonAncestors = function() {
              var edge;
              var sourceNode;
              var targetNode;
              var sourceAncestorGraph;
              var targetAncestorGraph;
              var edges3 = this.getAllEdges();
              var s2 = edges3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                edge = edges3[i2];
                sourceNode = edge.source;
                targetNode = edge.target;
                edge.lca = null;
                edge.sourceInLca = sourceNode;
                edge.targetInLca = targetNode;
                if (sourceNode == targetNode) {
                  edge.lca = sourceNode.getOwner();
                  continue;
                }
                sourceAncestorGraph = sourceNode.getOwner();
                while (edge.lca == null) {
                  edge.targetInLca = targetNode;
                  targetAncestorGraph = targetNode.getOwner();
                  while (edge.lca == null) {
                    if (targetAncestorGraph == sourceAncestorGraph) {
                      edge.lca = targetAncestorGraph;
                      break;
                    }
                    if (targetAncestorGraph == this.rootGraph) {
                      break;
                    }
                    if (edge.lca != null) {
                      throw "assert failed";
                    }
                    edge.targetInLca = targetAncestorGraph.getParent();
                    targetAncestorGraph = edge.targetInLca.getOwner();
                  }
                  if (sourceAncestorGraph == this.rootGraph) {
                    break;
                  }
                  if (edge.lca == null) {
                    edge.sourceInLca = sourceAncestorGraph.getParent();
                    sourceAncestorGraph = edge.sourceInLca.getOwner();
                  }
                }
                if (edge.lca == null) {
                  throw "assert failed";
                }
              }
            };
            LGraphManager.prototype.calcLowestCommonAncestor = function(firstNode, secondNode) {
              if (firstNode == secondNode) {
                return firstNode.getOwner();
              }
              var firstOwnerGraph = firstNode.getOwner();
              do {
                if (firstOwnerGraph == null) {
                  break;
                }
                var secondOwnerGraph = secondNode.getOwner();
                do {
                  if (secondOwnerGraph == null) {
                    break;
                  }
                  if (secondOwnerGraph == firstOwnerGraph) {
                    return secondOwnerGraph;
                  }
                  secondOwnerGraph = secondOwnerGraph.getParent().getOwner();
                } while (true);
                firstOwnerGraph = firstOwnerGraph.getParent().getOwner();
              } while (true);
              return firstOwnerGraph;
            };
            LGraphManager.prototype.calcInclusionTreeDepths = function(graph2, depth) {
              if (graph2 == null && depth == null) {
                graph2 = this.rootGraph;
                depth = 1;
              }
              var node;
              var nodes3 = graph2.getNodes();
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                node = nodes3[i2];
                node.inclusionTreeDepth = depth;
                if (node.child != null) {
                  this.calcInclusionTreeDepths(node.child, depth + 1);
                }
              }
            };
            LGraphManager.prototype.includesInvalidEdge = function() {
              var edge;
              var edgesToRemove = [];
              var s2 = this.edges.length;
              for (var i2 = 0; i2 < s2; i2++) {
                edge = this.edges[i2];
                if (this.isOneAncestorOfOther(edge.source, edge.target)) {
                  edgesToRemove.push(edge);
                }
              }
              for (var i2 = 0; i2 < edgesToRemove.length; i2++) {
                this.remove(edgesToRemove[i2]);
              }
              return false;
            };
            module2.exports = LGraphManager;
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var Point2 = __webpack_require__(12);
            function IGeometry() {
            }
            IGeometry.calcSeparationAmount = function(rectA, rectB, overlapAmount, separationBuffer) {
              if (!rectA.intersects(rectB)) {
                throw "assert failed";
              }
              var directions = new Array(2);
              this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);
              overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);
              overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);
              if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {
                overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());
              } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {
                overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());
              }
              if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {
                overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());
              } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {
                overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());
              }
              var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));
              if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {
                slope = 1;
              }
              var moveByY = slope * overlapAmount[0];
              var moveByX = overlapAmount[1] / slope;
              if (overlapAmount[0] < moveByX) {
                moveByX = overlapAmount[0];
              } else {
                moveByY = overlapAmount[1];
              }
              overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);
              overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);
            };
            IGeometry.decideDirectionsForOverlappingNodes = function(rectA, rectB, directions) {
              if (rectA.getCenterX() < rectB.getCenterX()) {
                directions[0] = -1;
              } else {
                directions[0] = 1;
              }
              if (rectA.getCenterY() < rectB.getCenterY()) {
                directions[1] = -1;
              } else {
                directions[1] = 1;
              }
            };
            IGeometry.getIntersection2 = function(rectA, rectB, result) {
              var p1x = rectA.getCenterX();
              var p1y = rectA.getCenterY();
              var p2x = rectB.getCenterX();
              var p2y = rectB.getCenterY();
              if (rectA.intersects(rectB)) {
                result[0] = p1x;
                result[1] = p1y;
                result[2] = p2x;
                result[3] = p2y;
                return true;
              }
              var topLeftAx = rectA.getX();
              var topLeftAy = rectA.getY();
              var topRightAx = rectA.getRight();
              var bottomLeftAx = rectA.getX();
              var bottomLeftAy = rectA.getBottom();
              var bottomRightAx = rectA.getRight();
              var halfWidthA = rectA.getWidthHalf();
              var halfHeightA = rectA.getHeightHalf();
              var topLeftBx = rectB.getX();
              var topLeftBy = rectB.getY();
              var topRightBx = rectB.getRight();
              var bottomLeftBx = rectB.getX();
              var bottomLeftBy = rectB.getBottom();
              var bottomRightBx = rectB.getRight();
              var halfWidthB = rectB.getWidthHalf();
              var halfHeightB = rectB.getHeightHalf();
              var clipPointAFound = false;
              var clipPointBFound = false;
              if (p1x === p2x) {
                if (p1y > p2y) {
                  result[0] = p1x;
                  result[1] = topLeftAy;
                  result[2] = p2x;
                  result[3] = bottomLeftBy;
                  return false;
                } else if (p1y < p2y) {
                  result[0] = p1x;
                  result[1] = bottomLeftAy;
                  result[2] = p2x;
                  result[3] = topLeftBy;
                  return false;
                } else
                  ;
              } else if (p1y === p2y) {
                if (p1x > p2x) {
                  result[0] = topLeftAx;
                  result[1] = p1y;
                  result[2] = topRightBx;
                  result[3] = p2y;
                  return false;
                } else if (p1x < p2x) {
                  result[0] = topRightAx;
                  result[1] = p1y;
                  result[2] = topLeftBx;
                  result[3] = p2y;
                  return false;
                } else
                  ;
              } else {
                var slopeA = rectA.height / rectA.width;
                var slopeB = rectB.height / rectB.width;
                var slopePrime = (p2y - p1y) / (p2x - p1x);
                var cardinalDirectionA = void 0;
                var cardinalDirectionB = void 0;
                var tempPointAx = void 0;
                var tempPointAy = void 0;
                var tempPointBx = void 0;
                var tempPointBy = void 0;
                if (-slopeA === slopePrime) {
                  if (p1x > p2x) {
                    result[0] = bottomLeftAx;
                    result[1] = bottomLeftAy;
                    clipPointAFound = true;
                  } else {
                    result[0] = topRightAx;
                    result[1] = topLeftAy;
                    clipPointAFound = true;
                  }
                } else if (slopeA === slopePrime) {
                  if (p1x > p2x) {
                    result[0] = topLeftAx;
                    result[1] = topLeftAy;
                    clipPointAFound = true;
                  } else {
                    result[0] = bottomRightAx;
                    result[1] = bottomLeftAy;
                    clipPointAFound = true;
                  }
                }
                if (-slopeB === slopePrime) {
                  if (p2x > p1x) {
                    result[2] = bottomLeftBx;
                    result[3] = bottomLeftBy;
                    clipPointBFound = true;
                  } else {
                    result[2] = topRightBx;
                    result[3] = topLeftBy;
                    clipPointBFound = true;
                  }
                } else if (slopeB === slopePrime) {
                  if (p2x > p1x) {
                    result[2] = topLeftBx;
                    result[3] = topLeftBy;
                    clipPointBFound = true;
                  } else {
                    result[2] = bottomRightBx;
                    result[3] = bottomLeftBy;
                    clipPointBFound = true;
                  }
                }
                if (clipPointAFound && clipPointBFound) {
                  return false;
                }
                if (p1x > p2x) {
                  if (p1y > p2y) {
                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);
                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);
                  } else {
                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);
                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);
                  }
                } else {
                  if (p1y > p2y) {
                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);
                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);
                  } else {
                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);
                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);
                  }
                }
                if (!clipPointAFound) {
                  switch (cardinalDirectionA) {
                    case 1:
                      tempPointAy = topLeftAy;
                      tempPointAx = p1x + -halfHeightA / slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 2:
                      tempPointAx = bottomRightAx;
                      tempPointAy = p1y + halfWidthA * slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 3:
                      tempPointAy = bottomLeftAy;
                      tempPointAx = p1x + halfHeightA / slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 4:
                      tempPointAx = bottomLeftAx;
                      tempPointAy = p1y + -halfWidthA * slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                  }
                }
                if (!clipPointBFound) {
                  switch (cardinalDirectionB) {
                    case 1:
                      tempPointBy = topLeftBy;
                      tempPointBx = p2x + -halfHeightB / slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 2:
                      tempPointBx = bottomRightBx;
                      tempPointBy = p2y + halfWidthB * slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 3:
                      tempPointBy = bottomLeftBy;
                      tempPointBx = p2x + halfHeightB / slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 4:
                      tempPointBx = bottomLeftBx;
                      tempPointBy = p2y + -halfWidthB * slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                  }
                }
              }
              return false;
            };
            IGeometry.getCardinalDirection = function(slope, slopePrime, line) {
              if (slope > slopePrime) {
                return line;
              } else {
                return 1 + line % 4;
              }
            };
            IGeometry.getIntersection = function(s1, s2, f1, f2) {
              if (f2 == null) {
                return this.getIntersection2(s1, s2, f1);
              }
              var x1 = s1.x;
              var y1 = s1.y;
              var x2 = s2.x;
              var y2 = s2.y;
              var x3 = f1.x;
              var y3 = f1.y;
              var x4 = f2.x;
              var y4 = f2.y;
              var x5 = void 0, y5 = void 0;
              var a1 = void 0, a2 = void 0, b1 = void 0, b2 = void 0, c1 = void 0, c2 = void 0;
              var denom = void 0;
              a1 = y2 - y1;
              b1 = x1 - x2;
              c1 = x2 * y1 - x1 * y2;
              a2 = y4 - y3;
              b2 = x3 - x4;
              c2 = x4 * y3 - x3 * y4;
              denom = a1 * b2 - a2 * b1;
              if (denom === 0) {
                return null;
              }
              x5 = (b1 * c2 - b2 * c1) / denom;
              y5 = (a2 * c1 - a1 * c2) / denom;
              return new Point2(x5, y5);
            };
            IGeometry.angleOfVector = function(Cx, Cy, Nx, Ny) {
              var C_angle = void 0;
              if (Cx !== Nx) {
                C_angle = Math.atan((Ny - Cy) / (Nx - Cx));
                if (Nx < Cx) {
                  C_angle += Math.PI;
                } else if (Ny < Cy) {
                  C_angle += this.TWO_PI;
                }
              } else if (Ny < Cy) {
                C_angle = this.ONE_AND_HALF_PI;
              } else {
                C_angle = this.HALF_PI;
              }
              return C_angle;
            };
            IGeometry.doIntersect = function(p1, p2, p3, p4) {
              var a2 = p1.x;
              var b2 = p1.y;
              var c2 = p2.x;
              var d2 = p2.y;
              var p5 = p3.x;
              var q2 = p3.y;
              var r2 = p4.x;
              var s2 = p4.y;
              var det = (c2 - a2) * (s2 - q2) - (r2 - p5) * (d2 - b2);
              if (det === 0) {
                return false;
              } else {
                var lambda = ((s2 - q2) * (r2 - a2) + (p5 - r2) * (s2 - b2)) / det;
                var gamma = ((b2 - d2) * (r2 - a2) + (c2 - a2) * (s2 - b2)) / det;
                return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;
              }
            };
            IGeometry.findCircleLineIntersections = function(Ex, Ey, Lx, Ly, Cx, Cy, r2) {
              var a2 = (Lx - Ex) * (Lx - Ex) + (Ly - Ey) * (Ly - Ey);
              var b2 = 2 * ((Ex - Cx) * (Lx - Ex) + (Ey - Cy) * (Ly - Ey));
              var c2 = (Ex - Cx) * (Ex - Cx) + (Ey - Cy) * (Ey - Cy) - r2 * r2;
              var disc = b2 * b2 - 4 * a2 * c2;
              if (disc >= 0) {
                var t1 = (-b2 + Math.sqrt(b2 * b2 - 4 * a2 * c2)) / (2 * a2);
                var t22 = (-b2 - Math.sqrt(b2 * b2 - 4 * a2 * c2)) / (2 * a2);
                var intersections = null;
                if (t1 >= 0 && t1 <= 1) {
                  return [t1];
                }
                if (t22 >= 0 && t22 <= 1) {
                  return [t22];
                }
                return intersections;
              } else
                return null;
            };
            IGeometry.HALF_PI = 0.5 * Math.PI;
            IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;
            IGeometry.TWO_PI = 2 * Math.PI;
            IGeometry.THREE_PI = 3 * Math.PI;
            module2.exports = IGeometry;
          },
          /* 9 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function IMath() {
            }
            IMath.sign = function(value) {
              if (value > 0) {
                return 1;
              } else if (value < 0) {
                return -1;
              } else {
                return 0;
              }
            };
            IMath.floor = function(value) {
              return value < 0 ? Math.ceil(value) : Math.floor(value);
            };
            IMath.ceil = function(value) {
              return value < 0 ? Math.floor(value) : Math.ceil(value);
            };
            module2.exports = IMath;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function Integer() {
            }
            Integer.MAX_VALUE = 2147483647;
            Integer.MIN_VALUE = -2147483648;
            module2.exports = Integer;
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _createClass2 = function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var nodeFrom = function nodeFrom2(value) {
              return { value, next: null, prev: null };
            };
            var add3 = function add4(prev, node, next2, list2) {
              if (prev !== null) {
                prev.next = node;
              } else {
                list2.head = node;
              }
              if (next2 !== null) {
                next2.prev = node;
              } else {
                list2.tail = node;
              }
              node.prev = prev;
              node.next = next2;
              list2.length++;
              return node;
            };
            var _remove = function _remove2(node, list2) {
              var prev = node.prev, next2 = node.next;
              if (prev !== null) {
                prev.next = next2;
              } else {
                list2.head = next2;
              }
              if (next2 !== null) {
                next2.prev = prev;
              } else {
                list2.tail = prev;
              }
              node.prev = node.next = null;
              list2.length--;
              return node;
            };
            var LinkedList = function() {
              function LinkedList2(vals) {
                var _this = this;
                _classCallCheck2(this, LinkedList2);
                this.length = 0;
                this.head = null;
                this.tail = null;
                if (vals != null) {
                  vals.forEach(function(v2) {
                    return _this.push(v2);
                  });
                }
              }
              _createClass2(LinkedList2, [{
                key: "size",
                value: function size3() {
                  return this.length;
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(val, otherNode) {
                  return add3(otherNode.prev, nodeFrom(val), otherNode, this);
                }
              }, {
                key: "insertAfter",
                value: function insertAfter(val, otherNode) {
                  return add3(otherNode, nodeFrom(val), otherNode.next, this);
                }
              }, {
                key: "insertNodeBefore",
                value: function insertNodeBefore(newNode, otherNode) {
                  return add3(otherNode.prev, newNode, otherNode, this);
                }
              }, {
                key: "insertNodeAfter",
                value: function insertNodeAfter(newNode, otherNode) {
                  return add3(otherNode, newNode, otherNode.next, this);
                }
              }, {
                key: "push",
                value: function push3(val) {
                  return add3(this.tail, nodeFrom(val), null, this);
                }
              }, {
                key: "unshift",
                value: function unshift(val) {
                  return add3(null, nodeFrom(val), this.head, this);
                }
              }, {
                key: "remove",
                value: function remove2(node) {
                  return _remove(node, this);
                }
              }, {
                key: "pop",
                value: function pop() {
                  return _remove(this.tail, this).value;
                }
              }, {
                key: "popNode",
                value: function popNode() {
                  return _remove(this.tail, this);
                }
              }, {
                key: "shift",
                value: function shift2() {
                  return _remove(this.head, this).value;
                }
              }, {
                key: "shiftNode",
                value: function shiftNode() {
                  return _remove(this.head, this);
                }
              }, {
                key: "get_object_at",
                value: function get_object_at(index) {
                  if (index <= this.length()) {
                    var i2 = 1;
                    var current = this.head;
                    while (i2 < index) {
                      current = current.next;
                      i2++;
                    }
                    return current.value;
                  }
                }
              }, {
                key: "set_object_at",
                value: function set_object_at(index, value) {
                  if (index <= this.length()) {
                    var i2 = 1;
                    var current = this.head;
                    while (i2 < index) {
                      current = current.next;
                      i2++;
                    }
                    current.value = value;
                  }
                }
              }]);
              return LinkedList2;
            }();
            module2.exports = LinkedList;
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function Point2(x2, y2, p2) {
              this.x = null;
              this.y = null;
              if (x2 == null && y2 == null && p2 == null) {
                this.x = 0;
                this.y = 0;
              } else if (typeof x2 == "number" && typeof y2 == "number" && p2 == null) {
                this.x = x2;
                this.y = y2;
              } else if (x2.constructor.name == "Point" && y2 == null && p2 == null) {
                p2 = x2;
                this.x = p2.x;
                this.y = p2.y;
              }
            }
            Point2.prototype.getX = function() {
              return this.x;
            };
            Point2.prototype.getY = function() {
              return this.y;
            };
            Point2.prototype.getLocation = function() {
              return new Point2(this.x, this.y);
            };
            Point2.prototype.setLocation = function(x2, y2, p2) {
              if (x2.constructor.name == "Point" && y2 == null && p2 == null) {
                p2 = x2;
                this.setLocation(p2.x, p2.y);
              } else if (typeof x2 == "number" && typeof y2 == "number" && p2 == null) {
                if (parseInt(x2) == x2 && parseInt(y2) == y2) {
                  this.move(x2, y2);
                } else {
                  this.x = Math.floor(x2 + 0.5);
                  this.y = Math.floor(y2 + 0.5);
                }
              }
            };
            Point2.prototype.move = function(x2, y2) {
              this.x = x2;
              this.y = y2;
            };
            Point2.prototype.translate = function(dx, dy) {
              this.x += dx;
              this.y += dy;
            };
            Point2.prototype.equals = function(obj) {
              if (obj.constructor.name == "Point") {
                var pt2 = obj;
                return this.x == pt2.x && this.y == pt2.y;
              }
              return this == obj;
            };
            Point2.prototype.toString = function() {
              return new Point2().constructor.name + "[x=" + this.x + ",y=" + this.y + "]";
            };
            module2.exports = Point2;
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function RectangleD(x2, y2, width2, height2) {
              this.x = 0;
              this.y = 0;
              this.width = 0;
              this.height = 0;
              if (x2 != null && y2 != null && width2 != null && height2 != null) {
                this.x = x2;
                this.y = y2;
                this.width = width2;
                this.height = height2;
              }
            }
            RectangleD.prototype.getX = function() {
              return this.x;
            };
            RectangleD.prototype.setX = function(x2) {
              this.x = x2;
            };
            RectangleD.prototype.getY = function() {
              return this.y;
            };
            RectangleD.prototype.setY = function(y2) {
              this.y = y2;
            };
            RectangleD.prototype.getWidth = function() {
              return this.width;
            };
            RectangleD.prototype.setWidth = function(width2) {
              this.width = width2;
            };
            RectangleD.prototype.getHeight = function() {
              return this.height;
            };
            RectangleD.prototype.setHeight = function(height2) {
              this.height = height2;
            };
            RectangleD.prototype.getRight = function() {
              return this.x + this.width;
            };
            RectangleD.prototype.getBottom = function() {
              return this.y + this.height;
            };
            RectangleD.prototype.intersects = function(a2) {
              if (this.getRight() < a2.x) {
                return false;
              }
              if (this.getBottom() < a2.y) {
                return false;
              }
              if (a2.getRight() < this.x) {
                return false;
              }
              if (a2.getBottom() < this.y) {
                return false;
              }
              return true;
            };
            RectangleD.prototype.getCenterX = function() {
              return this.x + this.width / 2;
            };
            RectangleD.prototype.getMinX = function() {
              return this.getX();
            };
            RectangleD.prototype.getMaxX = function() {
              return this.getX() + this.width;
            };
            RectangleD.prototype.getCenterY = function() {
              return this.y + this.height / 2;
            };
            RectangleD.prototype.getMinY = function() {
              return this.getY();
            };
            RectangleD.prototype.getMaxY = function() {
              return this.getY() + this.height;
            };
            RectangleD.prototype.getWidthHalf = function() {
              return this.width / 2;
            };
            RectangleD.prototype.getHeightHalf = function() {
              return this.height / 2;
            };
            module2.exports = RectangleD;
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            function UniqueIDGeneretor() {
            }
            UniqueIDGeneretor.lastID = 0;
            UniqueIDGeneretor.createID = function(obj) {
              if (UniqueIDGeneretor.isPrimitive(obj)) {
                return obj;
              }
              if (obj.uniqueID != null) {
                return obj.uniqueID;
              }
              obj.uniqueID = UniqueIDGeneretor.getString();
              UniqueIDGeneretor.lastID++;
              return obj.uniqueID;
            };
            UniqueIDGeneretor.getString = function(id2) {
              if (id2 == null)
                id2 = UniqueIDGeneretor.lastID;
              return "Object#" + id2;
            };
            UniqueIDGeneretor.isPrimitive = function(arg) {
              var type = typeof arg === "undefined" ? "undefined" : _typeof2(arg);
              return arg == null || type != "object" && type != "function";
            };
            module2.exports = UniqueIDGeneretor;
          },
          /* 15 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            var LayoutConstants = __webpack_require__(0);
            var LGraphManager = __webpack_require__(7);
            var LNode = __webpack_require__(3);
            var LEdge = __webpack_require__(1);
            var LGraph = __webpack_require__(6);
            var PointD = __webpack_require__(5);
            var Transform = __webpack_require__(17);
            var Emitter2 = __webpack_require__(29);
            function Layout2(isRemoteUse) {
              Emitter2.call(this);
              this.layoutQuality = LayoutConstants.QUALITY;
              this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
              this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
              this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
              this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
              this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
              this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
              this.edgeToDummyNodes = /* @__PURE__ */ new Map();
              this.graphManager = new LGraphManager(this);
              this.isLayoutFinished = false;
              this.isSubLayout = false;
              this.isRemoteUse = false;
              if (isRemoteUse != null) {
                this.isRemoteUse = isRemoteUse;
              }
            }
            Layout2.RANDOM_SEED = 1;
            Layout2.prototype = Object.create(Emitter2.prototype);
            Layout2.prototype.getGraphManager = function() {
              return this.graphManager;
            };
            Layout2.prototype.getAllNodes = function() {
              return this.graphManager.getAllNodes();
            };
            Layout2.prototype.getAllEdges = function() {
              return this.graphManager.getAllEdges();
            };
            Layout2.prototype.getAllNodesToApplyGravitation = function() {
              return this.graphManager.getAllNodesToApplyGravitation();
            };
            Layout2.prototype.newGraphManager = function() {
              var gm = new LGraphManager(this);
              this.graphManager = gm;
              return gm;
            };
            Layout2.prototype.newGraph = function(vGraph) {
              return new LGraph(null, this.graphManager, vGraph);
            };
            Layout2.prototype.newNode = function(vNode) {
              return new LNode(this.graphManager, vNode);
            };
            Layout2.prototype.newEdge = function(vEdge) {
              return new LEdge(null, null, vEdge);
            };
            Layout2.prototype.checkLayoutSuccess = function() {
              return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();
            };
            Layout2.prototype.runLayout = function() {
              this.isLayoutFinished = false;
              if (this.tilingPreLayout) {
                this.tilingPreLayout();
              }
              this.initParameters();
              var isLayoutSuccessfull;
              if (this.checkLayoutSuccess()) {
                isLayoutSuccessfull = false;
              } else {
                isLayoutSuccessfull = this.layout();
              }
              if (LayoutConstants.ANIMATE === "during") {
                return false;
              }
              if (isLayoutSuccessfull) {
                if (!this.isSubLayout) {
                  this.doPostLayout();
                }
              }
              if (this.tilingPostLayout) {
                this.tilingPostLayout();
              }
              this.isLayoutFinished = true;
              return isLayoutSuccessfull;
            };
            Layout2.prototype.doPostLayout = function() {
              if (!this.incremental) {
                this.transform();
              }
              this.update();
            };
            Layout2.prototype.update2 = function() {
              if (this.createBendsAsNeeded) {
                this.createBendpointsFromDummyNodes();
                this.graphManager.resetAllEdges();
              }
              if (!this.isRemoteUse) {
                var allEdges = this.graphManager.getAllEdges();
                for (var i2 = 0; i2 < allEdges.length; i2++) {
                  allEdges[i2];
                }
                var nodes3 = this.graphManager.getRoot().getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  nodes3[i2];
                }
                this.update(this.graphManager.getRoot());
              }
            };
            Layout2.prototype.update = function(obj) {
              if (obj == null) {
                this.update2();
              } else if (obj instanceof LNode) {
                var node = obj;
                if (node.getChild() != null) {
                  var nodes3 = node.getChild().getNodes();
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    update(nodes3[i2]);
                  }
                }
                if (node.vGraphObject != null) {
                  var vNode = node.vGraphObject;
                  vNode.update(node);
                }
              } else if (obj instanceof LEdge) {
                var edge = obj;
                if (edge.vGraphObject != null) {
                  var vEdge = edge.vGraphObject;
                  vEdge.update(edge);
                }
              } else if (obj instanceof LGraph) {
                var graph2 = obj;
                if (graph2.vGraphObject != null) {
                  var vGraph = graph2.vGraphObject;
                  vGraph.update(graph2);
                }
              }
            };
            Layout2.prototype.initParameters = function() {
              if (!this.isSubLayout) {
                this.layoutQuality = LayoutConstants.QUALITY;
                this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
                this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
                this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
                this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
                this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
                this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
              }
              if (this.animationDuringLayout) {
                this.animationOnLayout = false;
              }
            };
            Layout2.prototype.transform = function(newLeftTop) {
              if (newLeftTop == void 0) {
                this.transform(new PointD(0, 0));
              } else {
                var trans = new Transform();
                var leftTop = this.graphManager.getRoot().updateLeftTop();
                if (leftTop != null) {
                  trans.setWorldOrgX(newLeftTop.x);
                  trans.setWorldOrgY(newLeftTop.y);
                  trans.setDeviceOrgX(leftTop.x);
                  trans.setDeviceOrgY(leftTop.y);
                  var nodes3 = this.getAllNodes();
                  var node;
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    node = nodes3[i2];
                    node.transform(trans);
                  }
                }
              }
            };
            Layout2.prototype.positionNodesRandomly = function(graph2) {
              if (graph2 == void 0) {
                this.positionNodesRandomly(this.getGraphManager().getRoot());
                this.getGraphManager().getRoot().updateBounds(true);
              } else {
                var lNode;
                var childGraph;
                var nodes3 = graph2.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  lNode = nodes3[i2];
                  childGraph = lNode.getChild();
                  if (childGraph == null) {
                    lNode.scatter();
                  } else if (childGraph.getNodes().length == 0) {
                    lNode.scatter();
                  } else {
                    this.positionNodesRandomly(childGraph);
                    lNode.updateBounds();
                  }
                }
              }
            };
            Layout2.prototype.getFlatForest = function() {
              var flatForest = [];
              var isForest = true;
              var allNodes = this.graphManager.getRoot().getNodes();
              var isFlat = true;
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                if (allNodes[i2].getChild() != null) {
                  isFlat = false;
                }
              }
              if (!isFlat) {
                return flatForest;
              }
              var visited = /* @__PURE__ */ new Set();
              var toBeVisited = [];
              var parents2 = /* @__PURE__ */ new Map();
              var unProcessedNodes = [];
              unProcessedNodes = unProcessedNodes.concat(allNodes);
              while (unProcessedNodes.length > 0 && isForest) {
                toBeVisited.push(unProcessedNodes[0]);
                while (toBeVisited.length > 0 && isForest) {
                  var currentNode = toBeVisited[0];
                  toBeVisited.splice(0, 1);
                  visited.add(currentNode);
                  var neighborEdges = currentNode.getEdges();
                  for (var i2 = 0; i2 < neighborEdges.length; i2++) {
                    var currentNeighbor = neighborEdges[i2].getOtherEnd(currentNode);
                    if (parents2.get(currentNode) != currentNeighbor) {
                      if (!visited.has(currentNeighbor)) {
                        toBeVisited.push(currentNeighbor);
                        parents2.set(currentNeighbor, currentNode);
                      } else {
                        isForest = false;
                        break;
                      }
                    }
                  }
                }
                if (!isForest) {
                  flatForest = [];
                } else {
                  var temp = [].concat(_toConsumableArray(visited));
                  flatForest.push(temp);
                  for (var i2 = 0; i2 < temp.length; i2++) {
                    var value = temp[i2];
                    var index = unProcessedNodes.indexOf(value);
                    if (index > -1) {
                      unProcessedNodes.splice(index, 1);
                    }
                  }
                  visited = /* @__PURE__ */ new Set();
                  parents2 = /* @__PURE__ */ new Map();
                }
              }
              return flatForest;
            };
            Layout2.prototype.createDummyNodesForBendpoints = function(edge) {
              var dummyNodes = [];
              var prev = edge.source;
              var graph2 = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);
              for (var i2 = 0; i2 < edge.bendpoints.length; i2++) {
                var dummyNode = this.newNode(null);
                dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));
                graph2.add(dummyNode);
                var dummyEdge = this.newEdge(null);
                this.graphManager.add(dummyEdge, prev, dummyNode);
                dummyNodes.add(dummyNode);
                prev = dummyNode;
              }
              var dummyEdge = this.newEdge(null);
              this.graphManager.add(dummyEdge, prev, edge.target);
              this.edgeToDummyNodes.set(edge, dummyNodes);
              if (edge.isInterGraph()) {
                this.graphManager.remove(edge);
              } else {
                graph2.remove(edge);
              }
              return dummyNodes;
            };
            Layout2.prototype.createBendpointsFromDummyNodes = function() {
              var edges3 = [];
              edges3 = edges3.concat(this.graphManager.getAllEdges());
              edges3 = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges3);
              for (var k2 = 0; k2 < edges3.length; k2++) {
                var lEdge = edges3[k2];
                if (lEdge.bendpoints.length > 0) {
                  var path = this.edgeToDummyNodes.get(lEdge);
                  for (var i2 = 0; i2 < path.length; i2++) {
                    var dummyNode = path[i2];
                    var p2 = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());
                    var ebp = lEdge.bendpoints.get(i2);
                    ebp.x = p2.x;
                    ebp.y = p2.y;
                    dummyNode.getOwner().remove(dummyNode);
                  }
                  this.graphManager.add(lEdge, lEdge.source, lEdge.target);
                }
              }
            };
            Layout2.transform = function(sliderValue, defaultValue, minDiv, maxMul) {
              if (minDiv != void 0 && maxMul != void 0) {
                var value = defaultValue;
                if (sliderValue <= 50) {
                  var minValue = defaultValue / minDiv;
                  value -= (defaultValue - minValue) / 50 * (50 - sliderValue);
                } else {
                  var maxValue = defaultValue * maxMul;
                  value += (maxValue - defaultValue) / 50 * (sliderValue - 50);
                }
                return value;
              } else {
                var a2, b2;
                if (sliderValue <= 50) {
                  a2 = 9 * defaultValue / 500;
                  b2 = defaultValue / 10;
                } else {
                  a2 = 9 * defaultValue / 50;
                  b2 = -8 * defaultValue;
                }
                return a2 * sliderValue + b2;
              }
            };
            Layout2.findCenterOfTree = function(nodes3) {
              var list2 = [];
              list2 = list2.concat(nodes3);
              var removedNodes = [];
              var remainingDegrees = /* @__PURE__ */ new Map();
              var foundCenter = false;
              var centerNode = null;
              if (list2.length == 1 || list2.length == 2) {
                foundCenter = true;
                centerNode = list2[0];
              }
              for (var i2 = 0; i2 < list2.length; i2++) {
                var node = list2[i2];
                var degree = node.getNeighborsList().size;
                remainingDegrees.set(node, node.getNeighborsList().size);
                if (degree == 1) {
                  removedNodes.push(node);
                }
              }
              var tempList = [];
              tempList = tempList.concat(removedNodes);
              while (!foundCenter) {
                var tempList2 = [];
                tempList2 = tempList2.concat(tempList);
                tempList = [];
                for (var i2 = 0; i2 < list2.length; i2++) {
                  var node = list2[i2];
                  var index = list2.indexOf(node);
                  if (index >= 0) {
                    list2.splice(index, 1);
                  }
                  var neighbours = node.getNeighborsList();
                  neighbours.forEach(function(neighbour) {
                    if (removedNodes.indexOf(neighbour) < 0) {
                      var otherDegree = remainingDegrees.get(neighbour);
                      var newDegree = otherDegree - 1;
                      if (newDegree == 1) {
                        tempList.push(neighbour);
                      }
                      remainingDegrees.set(neighbour, newDegree);
                    }
                  });
                }
                removedNodes = removedNodes.concat(tempList);
                if (list2.length == 1 || list2.length == 2) {
                  foundCenter = true;
                  centerNode = list2[0];
                }
              }
              return centerNode;
            };
            Layout2.prototype.setGraphManager = function(gm) {
              this.graphManager = gm;
            };
            module2.exports = Layout2;
          },
          /* 16 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function RandomSeed() {
            }
            RandomSeed.seed = 1;
            RandomSeed.x = 0;
            RandomSeed.nextDouble = function() {
              RandomSeed.x = Math.sin(RandomSeed.seed++) * 1e4;
              return RandomSeed.x - Math.floor(RandomSeed.x);
            };
            module2.exports = RandomSeed;
          },
          /* 17 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var PointD = __webpack_require__(5);
            function Transform(x2, y2) {
              this.lworldOrgX = 0;
              this.lworldOrgY = 0;
              this.ldeviceOrgX = 0;
              this.ldeviceOrgY = 0;
              this.lworldExtX = 1;
              this.lworldExtY = 1;
              this.ldeviceExtX = 1;
              this.ldeviceExtY = 1;
            }
            Transform.prototype.getWorldOrgX = function() {
              return this.lworldOrgX;
            };
            Transform.prototype.setWorldOrgX = function(wox) {
              this.lworldOrgX = wox;
            };
            Transform.prototype.getWorldOrgY = function() {
              return this.lworldOrgY;
            };
            Transform.prototype.setWorldOrgY = function(woy) {
              this.lworldOrgY = woy;
            };
            Transform.prototype.getWorldExtX = function() {
              return this.lworldExtX;
            };
            Transform.prototype.setWorldExtX = function(wex) {
              this.lworldExtX = wex;
            };
            Transform.prototype.getWorldExtY = function() {
              return this.lworldExtY;
            };
            Transform.prototype.setWorldExtY = function(wey) {
              this.lworldExtY = wey;
            };
            Transform.prototype.getDeviceOrgX = function() {
              return this.ldeviceOrgX;
            };
            Transform.prototype.setDeviceOrgX = function(dox) {
              this.ldeviceOrgX = dox;
            };
            Transform.prototype.getDeviceOrgY = function() {
              return this.ldeviceOrgY;
            };
            Transform.prototype.setDeviceOrgY = function(doy) {
              this.ldeviceOrgY = doy;
            };
            Transform.prototype.getDeviceExtX = function() {
              return this.ldeviceExtX;
            };
            Transform.prototype.setDeviceExtX = function(dex) {
              this.ldeviceExtX = dex;
            };
            Transform.prototype.getDeviceExtY = function() {
              return this.ldeviceExtY;
            };
            Transform.prototype.setDeviceExtY = function(dey) {
              this.ldeviceExtY = dey;
            };
            Transform.prototype.transformX = function(x2) {
              var xDevice = 0;
              var worldExtX = this.lworldExtX;
              if (worldExtX != 0) {
                xDevice = this.ldeviceOrgX + (x2 - this.lworldOrgX) * this.ldeviceExtX / worldExtX;
              }
              return xDevice;
            };
            Transform.prototype.transformY = function(y2) {
              var yDevice = 0;
              var worldExtY = this.lworldExtY;
              if (worldExtY != 0) {
                yDevice = this.ldeviceOrgY + (y2 - this.lworldOrgY) * this.ldeviceExtY / worldExtY;
              }
              return yDevice;
            };
            Transform.prototype.inverseTransformX = function(x2) {
              var xWorld = 0;
              var deviceExtX = this.ldeviceExtX;
              if (deviceExtX != 0) {
                xWorld = this.lworldOrgX + (x2 - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;
              }
              return xWorld;
            };
            Transform.prototype.inverseTransformY = function(y2) {
              var yWorld = 0;
              var deviceExtY = this.ldeviceExtY;
              if (deviceExtY != 0) {
                yWorld = this.lworldOrgY + (y2 - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;
              }
              return yWorld;
            };
            Transform.prototype.inverseTransformPoint = function(inPoint) {
              var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));
              return outPoint;
            };
            module2.exports = Transform;
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            var Layout2 = __webpack_require__(15);
            var FDLayoutConstants = __webpack_require__(4);
            var LayoutConstants = __webpack_require__(0);
            var IGeometry = __webpack_require__(8);
            var IMath = __webpack_require__(9);
            function FDLayout() {
              Layout2.call(this);
              this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
              this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
              this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
              this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
              this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
              this.displacementThresholdPerNode = 3 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
              this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
              this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
              this.totalDisplacement = 0;
              this.oldTotalDisplacement = 0;
              this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;
            }
            FDLayout.prototype = Object.create(Layout2.prototype);
            for (var prop in Layout2) {
              FDLayout[prop] = Layout2[prop];
            }
            FDLayout.prototype.initParameters = function() {
              Layout2.prototype.initParameters.call(this, arguments);
              this.totalIterations = 0;
              this.notAnimatedIterations = 0;
              this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;
              this.grid = [];
            };
            FDLayout.prototype.calcIdealEdgeLengths = function() {
              var edge;
              var originalIdealLength;
              var lcaDepth;
              var source;
              var target;
              var sizeOfSourceInLca;
              var sizeOfTargetInLca;
              var allEdges = this.getGraphManager().getAllEdges();
              for (var i2 = 0; i2 < allEdges.length; i2++) {
                edge = allEdges[i2];
                originalIdealLength = edge.idealLength;
                if (edge.isInterGraph) {
                  source = edge.getSource();
                  target = edge.getTarget();
                  sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();
                  sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();
                  if (this.useSmartIdealEdgeLengthCalculation) {
                    edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;
                  }
                  lcaDepth = edge.getLca().getInclusionTreeDepth();
                  edge.idealLength += originalIdealLength * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);
                }
              }
            };
            FDLayout.prototype.initSpringEmbedder = function() {
              var s2 = this.getAllNodes().length;
              if (this.incremental) {
                if (s2 > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                  this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s2 - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
                }
                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;
              } else {
                if (s2 > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                  this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1 - (s2 - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
                } else {
                  this.coolingFactor = 1;
                }
                this.initialCoolingFactor = this.coolingFactor;
                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;
              }
              this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);
              this.displacementThresholdPerNode = 3 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
              this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;
              this.repulsionRange = this.calcRepulsionRange();
            };
            FDLayout.prototype.calcSpringForces = function() {
              var lEdges = this.getAllEdges();
              var edge;
              for (var i2 = 0; i2 < lEdges.length; i2++) {
                edge = lEdges[i2];
                this.calcSpringForce(edge, edge.idealLength);
              }
            };
            FDLayout.prototype.calcRepulsionForces = function() {
              var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
              var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var i2, j2;
              var nodeA, nodeB;
              var lNodes = this.getAllNodes();
              var processedNodeSet;
              if (this.useFRGridVariant) {
                if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {
                  this.updateGrid();
                }
                processedNodeSet = /* @__PURE__ */ new Set();
                for (i2 = 0; i2 < lNodes.length; i2++) {
                  nodeA = lNodes[i2];
                  this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);
                  processedNodeSet.add(nodeA);
                }
              } else {
                for (i2 = 0; i2 < lNodes.length; i2++) {
                  nodeA = lNodes[i2];
                  for (j2 = i2 + 1; j2 < lNodes.length; j2++) {
                    nodeB = lNodes[j2];
                    if (nodeA.getOwner() != nodeB.getOwner()) {
                      continue;
                    }
                    this.calcRepulsionForce(nodeA, nodeB);
                  }
                }
              }
            };
            FDLayout.prototype.calcGravitationalForces = function() {
              var node;
              var lNodes = this.getAllNodesToApplyGravitation();
              for (var i2 = 0; i2 < lNodes.length; i2++) {
                node = lNodes[i2];
                this.calcGravitationalForce(node);
              }
            };
            FDLayout.prototype.moveNodes = function() {
              var lNodes = this.getAllNodes();
              var node;
              for (var i2 = 0; i2 < lNodes.length; i2++) {
                node = lNodes[i2];
                node.move();
              }
            };
            FDLayout.prototype.calcSpringForce = function(edge, idealLength) {
              var sourceNode = edge.getSource();
              var targetNode = edge.getTarget();
              var length;
              var springForce;
              var springForceX;
              var springForceY;
              if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
                edge.updateLengthSimple();
              } else {
                edge.updateLength();
                if (edge.isOverlapingSourceAndTarget) {
                  return;
                }
              }
              length = edge.getLength();
              if (length == 0)
                return;
              springForce = edge.edgeElasticity * (length - idealLength);
              springForceX = springForce * (edge.lengthX / length);
              springForceY = springForce * (edge.lengthY / length);
              sourceNode.springForceX += springForceX;
              sourceNode.springForceY += springForceY;
              targetNode.springForceX -= springForceX;
              targetNode.springForceY -= springForceY;
            };
            FDLayout.prototype.calcRepulsionForce = function(nodeA, nodeB) {
              var rectA = nodeA.getRect();
              var rectB = nodeB.getRect();
              var overlapAmount = new Array(2);
              var clipPoints = new Array(4);
              var distanceX;
              var distanceY;
              var distanceSquared;
              var distance;
              var repulsionForce;
              var repulsionForceX;
              var repulsionForceY;
              if (rectA.intersects(rectB)) {
                IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2);
                repulsionForceX = 2 * overlapAmount[0];
                repulsionForceY = 2 * overlapAmount[1];
                var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);
                nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
                nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
                nodeB.repulsionForceX += childrenConstant * repulsionForceX;
                nodeB.repulsionForceY += childrenConstant * repulsionForceY;
              } else {
                if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) {
                  distanceX = rectB.getCenterX() - rectA.getCenterX();
                  distanceY = rectB.getCenterY() - rectA.getCenterY();
                } else {
                  IGeometry.getIntersection(rectA, rectB, clipPoints);
                  distanceX = clipPoints[2] - clipPoints[0];
                  distanceY = clipPoints[3] - clipPoints[1];
                }
                if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {
                  distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;
                }
                if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {
                  distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;
                }
                distanceSquared = distanceX * distanceX + distanceY * distanceY;
                distance = Math.sqrt(distanceSquared);
                repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;
                repulsionForceX = repulsionForce * distanceX / distance;
                repulsionForceY = repulsionForce * distanceY / distance;
                nodeA.repulsionForceX -= repulsionForceX;
                nodeA.repulsionForceY -= repulsionForceY;
                nodeB.repulsionForceX += repulsionForceX;
                nodeB.repulsionForceY += repulsionForceY;
              }
            };
            FDLayout.prototype.calcGravitationalForce = function(node) {
              var ownerGraph;
              var ownerCenterX;
              var ownerCenterY;
              var distanceX;
              var distanceY;
              var absDistanceX;
              var absDistanceY;
              var estimatedSize;
              ownerGraph = node.getOwner();
              ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;
              ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;
              distanceX = node.getCenterX() - ownerCenterX;
              distanceY = node.getCenterY() - ownerCenterY;
              absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;
              absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;
              if (node.getOwner() == this.graphManager.getRoot()) {
                estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;
                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                  node.gravitationForceX = -this.gravityConstant * distanceX;
                  node.gravitationForceY = -this.gravityConstant * distanceY;
                }
              } else {
                estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;
                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                  node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;
                  node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;
                }
              }
            };
            FDLayout.prototype.isConverged = function() {
              var converged;
              var oscilating = false;
              if (this.totalIterations > this.maxIterations / 3) {
                oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
              }
              converged = this.totalDisplacement < this.totalDisplacementThreshold;
              this.oldTotalDisplacement = this.totalDisplacement;
              return converged || oscilating;
            };
            FDLayout.prototype.animate = function() {
              if (this.animationDuringLayout && !this.isSubLayout) {
                if (this.notAnimatedIterations == this.animationPeriod) {
                  this.update();
                  this.notAnimatedIterations = 0;
                } else {
                  this.notAnimatedIterations++;
                }
              }
            };
            FDLayout.prototype.calcNoOfChildrenForAllNodes = function() {
              var node;
              var allNodes = this.graphManager.getAllNodes();
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                node = allNodes[i2];
                node.noOfChildren = node.getNoOfChildren();
              }
            };
            FDLayout.prototype.calcGrid = function(graph2) {
              var sizeX = 0;
              var sizeY = 0;
              sizeX = parseInt(Math.ceil((graph2.getRight() - graph2.getLeft()) / this.repulsionRange));
              sizeY = parseInt(Math.ceil((graph2.getBottom() - graph2.getTop()) / this.repulsionRange));
              var grid = new Array(sizeX);
              for (var i2 = 0; i2 < sizeX; i2++) {
                grid[i2] = new Array(sizeY);
              }
              for (var i2 = 0; i2 < sizeX; i2++) {
                for (var j2 = 0; j2 < sizeY; j2++) {
                  grid[i2][j2] = new Array();
                }
              }
              return grid;
            };
            FDLayout.prototype.addNodeToGrid = function(v2, left, top) {
              var startX = 0;
              var finishX = 0;
              var startY = 0;
              var finishY = 0;
              startX = parseInt(Math.floor((v2.getRect().x - left) / this.repulsionRange));
              finishX = parseInt(Math.floor((v2.getRect().width + v2.getRect().x - left) / this.repulsionRange));
              startY = parseInt(Math.floor((v2.getRect().y - top) / this.repulsionRange));
              finishY = parseInt(Math.floor((v2.getRect().height + v2.getRect().y - top) / this.repulsionRange));
              for (var i2 = startX; i2 <= finishX; i2++) {
                for (var j2 = startY; j2 <= finishY; j2++) {
                  this.grid[i2][j2].push(v2);
                  v2.setGridCoordinates(startX, finishX, startY, finishY);
                }
              }
            };
            FDLayout.prototype.updateGrid = function() {
              var i2;
              var nodeA;
              var lNodes = this.getAllNodes();
              this.grid = this.calcGrid(this.graphManager.getRoot());
              for (i2 = 0; i2 < lNodes.length; i2++) {
                nodeA = lNodes[i2];
                this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());
              }
            };
            FDLayout.prototype.calculateRepulsionForceOfANode = function(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {
              if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {
                var surrounding = /* @__PURE__ */ new Set();
                nodeA.surrounding = new Array();
                var nodeB;
                var grid = this.grid;
                for (var i2 = nodeA.startX - 1; i2 < nodeA.finishX + 2; i2++) {
                  for (var j2 = nodeA.startY - 1; j2 < nodeA.finishY + 2; j2++) {
                    if (!(i2 < 0 || j2 < 0 || i2 >= grid.length || j2 >= grid[0].length)) {
                      for (var k2 = 0; k2 < grid[i2][j2].length; k2++) {
                        nodeB = grid[i2][j2][k2];
                        if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {
                          continue;
                        }
                        if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
                          var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);
                          var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);
                          if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {
                            surrounding.add(nodeB);
                          }
                        }
                      }
                    }
                  }
                }
                nodeA.surrounding = [].concat(_toConsumableArray(surrounding));
              }
              for (i2 = 0; i2 < nodeA.surrounding.length; i2++) {
                this.calcRepulsionForce(nodeA, nodeA.surrounding[i2]);
              }
            };
            FDLayout.prototype.calcRepulsionRange = function() {
              return 0;
            };
            module2.exports = FDLayout;
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LEdge = __webpack_require__(1);
            var FDLayoutConstants = __webpack_require__(4);
            function FDLayoutEdge(source, target, vEdge) {
              LEdge.call(this, source, target, vEdge);
              this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
              this.edgeElasticity = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
            }
            FDLayoutEdge.prototype = Object.create(LEdge.prototype);
            for (var prop in LEdge) {
              FDLayoutEdge[prop] = LEdge[prop];
            }
            module2.exports = FDLayoutEdge;
          },
          /* 20 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var LNode = __webpack_require__(3);
            var FDLayoutConstants = __webpack_require__(4);
            function FDLayoutNode(gm, loc, size3, vNode) {
              LNode.call(this, gm, loc, size3, vNode);
              this.nodeRepulsion = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
              this.springForceX = 0;
              this.springForceY = 0;
              this.repulsionForceX = 0;
              this.repulsionForceY = 0;
              this.gravitationForceX = 0;
              this.gravitationForceY = 0;
              this.displacementX = 0;
              this.displacementY = 0;
              this.startX = 0;
              this.finishX = 0;
              this.startY = 0;
              this.finishY = 0;
              this.surrounding = [];
            }
            FDLayoutNode.prototype = Object.create(LNode.prototype);
            for (var prop in LNode) {
              FDLayoutNode[prop] = LNode[prop];
            }
            FDLayoutNode.prototype.setGridCoordinates = function(_startX, _finishX, _startY, _finishY) {
              this.startX = _startX;
              this.finishX = _finishX;
              this.startY = _startY;
              this.finishY = _finishY;
            };
            module2.exports = FDLayoutNode;
          },
          /* 21 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function DimensionD2(width2, height2) {
              this.width = 0;
              this.height = 0;
              if (width2 !== null && height2 !== null) {
                this.height = height2;
                this.width = width2;
              }
            }
            DimensionD2.prototype.getWidth = function() {
              return this.width;
            };
            DimensionD2.prototype.setWidth = function(width2) {
              this.width = width2;
            };
            DimensionD2.prototype.getHeight = function() {
              return this.height;
            };
            DimensionD2.prototype.setHeight = function(height2) {
              this.height = height2;
            };
            module2.exports = DimensionD2;
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var UniqueIDGeneretor = __webpack_require__(14);
            function HashMap() {
              this.map = {};
              this.keys = [];
            }
            HashMap.prototype.put = function(key, value) {
              var theId = UniqueIDGeneretor.createID(key);
              if (!this.contains(theId)) {
                this.map[theId] = value;
                this.keys.push(key);
              }
            };
            HashMap.prototype.contains = function(key) {
              UniqueIDGeneretor.createID(key);
              return this.map[key] != null;
            };
            HashMap.prototype.get = function(key) {
              var theId = UniqueIDGeneretor.createID(key);
              return this.map[theId];
            };
            HashMap.prototype.keySet = function() {
              return this.keys;
            };
            module2.exports = HashMap;
          },
          /* 23 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var UniqueIDGeneretor = __webpack_require__(14);
            function HashSet() {
              this.set = {};
            }
            HashSet.prototype.add = function(obj) {
              var theId = UniqueIDGeneretor.createID(obj);
              if (!this.contains(theId))
                this.set[theId] = obj;
            };
            HashSet.prototype.remove = function(obj) {
              delete this.set[UniqueIDGeneretor.createID(obj)];
            };
            HashSet.prototype.clear = function() {
              this.set = {};
            };
            HashSet.prototype.contains = function(obj) {
              return this.set[UniqueIDGeneretor.createID(obj)] == obj;
            };
            HashSet.prototype.isEmpty = function() {
              return this.size() === 0;
            };
            HashSet.prototype.size = function() {
              return Object.keys(this.set).length;
            };
            HashSet.prototype.addAllTo = function(list2) {
              var keys = Object.keys(this.set);
              var length = keys.length;
              for (var i2 = 0; i2 < length; i2++) {
                list2.push(this.set[keys[i2]]);
              }
            };
            HashSet.prototype.size = function() {
              return Object.keys(this.set).length;
            };
            HashSet.prototype.addAll = function(list2) {
              var s2 = list2.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var v2 = list2[i2];
                this.add(v2);
              }
            };
            module2.exports = HashSet;
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function Matrix2() {
            }
            Matrix2.multMat = function(array1, array22) {
              var result = [];
              for (var i2 = 0; i2 < array1.length; i2++) {
                result[i2] = [];
                for (var j2 = 0; j2 < array22[0].length; j2++) {
                  result[i2][j2] = 0;
                  for (var k2 = 0; k2 < array1[0].length; k2++) {
                    result[i2][j2] += array1[i2][k2] * array22[k2][j2];
                  }
                }
              }
              return result;
            };
            Matrix2.transpose = function(array3) {
              var result = [];
              for (var i2 = 0; i2 < array3[0].length; i2++) {
                result[i2] = [];
                for (var j2 = 0; j2 < array3.length; j2++) {
                  result[i2][j2] = array3[j2][i2];
                }
              }
              return result;
            };
            Matrix2.multCons = function(array3, constant) {
              var result = [];
              for (var i2 = 0; i2 < array3.length; i2++) {
                result[i2] = array3[i2] * constant;
              }
              return result;
            };
            Matrix2.minusOp = function(array1, array22) {
              var result = [];
              for (var i2 = 0; i2 < array1.length; i2++) {
                result[i2] = array1[i2] - array22[i2];
              }
              return result;
            };
            Matrix2.dotProduct = function(array1, array22) {
              var product = 0;
              for (var i2 = 0; i2 < array1.length; i2++) {
                product += array1[i2] * array22[i2];
              }
              return product;
            };
            Matrix2.mag = function(array3) {
              return Math.sqrt(this.dotProduct(array3, array3));
            };
            Matrix2.normalize = function(array3) {
              var result = [];
              var magnitude = this.mag(array3);
              for (var i2 = 0; i2 < array3.length; i2++) {
                result[i2] = array3[i2] / magnitude;
              }
              return result;
            };
            Matrix2.multGamma = function(array3) {
              var result = [];
              var sum = 0;
              for (var i2 = 0; i2 < array3.length; i2++) {
                sum += array3[i2];
              }
              sum *= -1 / array3.length;
              for (var _i = 0; _i < array3.length; _i++) {
                result[_i] = sum + array3[_i];
              }
              return result;
            };
            Matrix2.multL = function(array3, C2, INV) {
              var result = [];
              var temp1 = [];
              var temp2 = [];
              for (var i2 = 0; i2 < C2[0].length; i2++) {
                var sum = 0;
                for (var j2 = 0; j2 < C2.length; j2++) {
                  sum += -0.5 * C2[j2][i2] * array3[j2];
                }
                temp1[i2] = sum;
              }
              for (var _i2 = 0; _i2 < INV.length; _i2++) {
                var _sum = 0;
                for (var _j = 0; _j < INV.length; _j++) {
                  _sum += INV[_i2][_j] * temp1[_j];
                }
                temp2[_i2] = _sum;
              }
              for (var _i3 = 0; _i3 < C2.length; _i3++) {
                var _sum2 = 0;
                for (var _j2 = 0; _j2 < C2[0].length; _j2++) {
                  _sum2 += C2[_i3][_j2] * temp2[_j2];
                }
                result[_i3] = _sum2;
              }
              return result;
            };
            module2.exports = Matrix2;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _createClass2 = function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var LinkedList = __webpack_require__(11);
            var Quicksort = function() {
              function Quicksort2(A2, compareFunction) {
                _classCallCheck2(this, Quicksort2);
                if (compareFunction !== null || compareFunction !== void 0)
                  this.compareFunction = this._defaultCompareFunction;
                var length = void 0;
                if (A2 instanceof LinkedList)
                  length = A2.size();
                else
                  length = A2.length;
                this._quicksort(A2, 0, length - 1);
              }
              _createClass2(Quicksort2, [{
                key: "_quicksort",
                value: function _quicksort(A2, p2, r2) {
                  if (p2 < r2) {
                    var q2 = this._partition(A2, p2, r2);
                    this._quicksort(A2, p2, q2);
                    this._quicksort(A2, q2 + 1, r2);
                  }
                }
              }, {
                key: "_partition",
                value: function _partition(A2, p2, r2) {
                  var x2 = this._get(A2, p2);
                  var i2 = p2;
                  var j2 = r2;
                  while (true) {
                    while (this.compareFunction(x2, this._get(A2, j2))) {
                      j2--;
                    }
                    while (this.compareFunction(this._get(A2, i2), x2)) {
                      i2++;
                    }
                    if (i2 < j2) {
                      this._swap(A2, i2, j2);
                      i2++;
                      j2--;
                    } else
                      return j2;
                  }
                }
              }, {
                key: "_get",
                value: function _get(object3, index) {
                  if (object3 instanceof LinkedList)
                    return object3.get_object_at(index);
                  else
                    return object3[index];
                }
              }, {
                key: "_set",
                value: function _set(object3, index, value) {
                  if (object3 instanceof LinkedList)
                    object3.set_object_at(index, value);
                  else
                    object3[index] = value;
                }
              }, {
                key: "_swap",
                value: function _swap(A2, i2, j2) {
                  var temp = this._get(A2, i2);
                  this._set(A2, i2, this._get(A2, j2));
                  this._set(A2, j2, temp);
                }
              }, {
                key: "_defaultCompareFunction",
                value: function _defaultCompareFunction(a2, b2) {
                  return b2 > a2;
                }
              }]);
              return Quicksort2;
            }();
            module2.exports = Quicksort;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function SVD() {
            }
            SVD.svd = function(A2) {
              this.U = null;
              this.V = null;
              this.s = null;
              this.m = 0;
              this.n = 0;
              this.m = A2.length;
              this.n = A2[0].length;
              var nu = Math.min(this.m, this.n);
              this.s = function(s2) {
                var a2 = [];
                while (s2-- > 0) {
                  a2.push(0);
                }
                return a2;
              }(Math.min(this.m + 1, this.n));
              this.U = function(dims) {
                var allocate = function allocate2(dims2) {
                  if (dims2.length == 0) {
                    return 0;
                  } else {
                    var array3 = [];
                    for (var i3 = 0; i3 < dims2[0]; i3++) {
                      array3.push(allocate2(dims2.slice(1)));
                    }
                    return array3;
                  }
                };
                return allocate(dims);
              }([this.m, nu]);
              this.V = function(dims) {
                var allocate = function allocate2(dims2) {
                  if (dims2.length == 0) {
                    return 0;
                  } else {
                    var array3 = [];
                    for (var i3 = 0; i3 < dims2[0]; i3++) {
                      array3.push(allocate2(dims2.slice(1)));
                    }
                    return array3;
                  }
                };
                return allocate(dims);
              }([this.n, this.n]);
              var e2 = function(s2) {
                var a2 = [];
                while (s2-- > 0) {
                  a2.push(0);
                }
                return a2;
              }(this.n);
              var work = function(s2) {
                var a2 = [];
                while (s2-- > 0) {
                  a2.push(0);
                }
                return a2;
              }(this.m);
              var wantu = true;
              var nct = Math.min(this.m - 1, this.n);
              var nrt = Math.max(0, Math.min(this.n - 2, this.m));
              for (var k2 = 0; k2 < Math.max(nct, nrt); k2++) {
                if (k2 < nct) {
                  this.s[k2] = 0;
                  for (var i2 = k2; i2 < this.m; i2++) {
                    this.s[k2] = SVD.hypot(this.s[k2], A2[i2][k2]);
                  }
                  if (this.s[k2] !== 0) {
                    if (A2[k2][k2] < 0) {
                      this.s[k2] = -this.s[k2];
                    }
                    for (var _i = k2; _i < this.m; _i++) {
                      A2[_i][k2] /= this.s[k2];
                    }
                    A2[k2][k2] += 1;
                  }
                  this.s[k2] = -this.s[k2];
                }
                for (var j2 = k2 + 1; j2 < this.n; j2++) {
                  if (function(lhs, rhs) {
                    return lhs && rhs;
                  }(k2 < nct, this.s[k2] !== 0)) {
                    var t3 = 0;
                    for (var _i2 = k2; _i2 < this.m; _i2++) {
                      t3 += A2[_i2][k2] * A2[_i2][j2];
                    }
                    t3 = -t3 / A2[k2][k2];
                    for (var _i3 = k2; _i3 < this.m; _i3++) {
                      A2[_i3][j2] += t3 * A2[_i3][k2];
                    }
                  }
                  e2[j2] = A2[k2][j2];
                }
                if (function(lhs, rhs) {
                  return lhs && rhs;
                }(wantu, k2 < nct)) {
                  for (var _i4 = k2; _i4 < this.m; _i4++) {
                    this.U[_i4][k2] = A2[_i4][k2];
                  }
                }
                if (k2 < nrt) {
                  e2[k2] = 0;
                  for (var _i5 = k2 + 1; _i5 < this.n; _i5++) {
                    e2[k2] = SVD.hypot(e2[k2], e2[_i5]);
                  }
                  if (e2[k2] !== 0) {
                    if (e2[k2 + 1] < 0) {
                      e2[k2] = -e2[k2];
                    }
                    for (var _i6 = k2 + 1; _i6 < this.n; _i6++) {
                      e2[_i6] /= e2[k2];
                    }
                    e2[k2 + 1] += 1;
                  }
                  e2[k2] = -e2[k2];
                  if (function(lhs, rhs) {
                    return lhs && rhs;
                  }(k2 + 1 < this.m, e2[k2] !== 0)) {
                    for (var _i7 = k2 + 1; _i7 < this.m; _i7++) {
                      work[_i7] = 0;
                    }
                    for (var _j = k2 + 1; _j < this.n; _j++) {
                      for (var _i8 = k2 + 1; _i8 < this.m; _i8++) {
                        work[_i8] += e2[_j] * A2[_i8][_j];
                      }
                    }
                    for (var _j2 = k2 + 1; _j2 < this.n; _j2++) {
                      var _t2 = -e2[_j2] / e2[k2 + 1];
                      for (var _i9 = k2 + 1; _i9 < this.m; _i9++) {
                        A2[_i9][_j2] += _t2 * work[_i9];
                      }
                    }
                  }
                  {
                    for (var _i10 = k2 + 1; _i10 < this.n; _i10++) {
                      this.V[_i10][k2] = e2[_i10];
                    }
                  }
                }
              }
              var p2 = Math.min(this.n, this.m + 1);
              if (nct < this.n) {
                this.s[nct] = A2[nct][nct];
              }
              if (this.m < p2) {
                this.s[p2 - 1] = 0;
              }
              if (nrt + 1 < p2) {
                e2[nrt] = A2[nrt][p2 - 1];
              }
              e2[p2 - 1] = 0;
              {
                for (var _j3 = nct; _j3 < nu; _j3++) {
                  for (var _i11 = 0; _i11 < this.m; _i11++) {
                    this.U[_i11][_j3] = 0;
                  }
                  this.U[_j3][_j3] = 1;
                }
                for (var _k = nct - 1; _k >= 0; _k--) {
                  if (this.s[_k] !== 0) {
                    for (var _j4 = _k + 1; _j4 < nu; _j4++) {
                      var _t22 = 0;
                      for (var _i12 = _k; _i12 < this.m; _i12++) {
                        _t22 += this.U[_i12][_k] * this.U[_i12][_j4];
                      }
                      _t22 = -_t22 / this.U[_k][_k];
                      for (var _i13 = _k; _i13 < this.m; _i13++) {
                        this.U[_i13][_j4] += _t22 * this.U[_i13][_k];
                      }
                    }
                    for (var _i14 = _k; _i14 < this.m; _i14++) {
                      this.U[_i14][_k] = -this.U[_i14][_k];
                    }
                    this.U[_k][_k] = 1 + this.U[_k][_k];
                    for (var _i15 = 0; _i15 < _k - 1; _i15++) {
                      this.U[_i15][_k] = 0;
                    }
                  } else {
                    for (var _i16 = 0; _i16 < this.m; _i16++) {
                      this.U[_i16][_k] = 0;
                    }
                    this.U[_k][_k] = 1;
                  }
                }
              }
              {
                for (var _k2 = this.n - 1; _k2 >= 0; _k2--) {
                  if (function(lhs, rhs) {
                    return lhs && rhs;
                  }(_k2 < nrt, e2[_k2] !== 0)) {
                    for (var _j5 = _k2 + 1; _j5 < nu; _j5++) {
                      var _t3 = 0;
                      for (var _i17 = _k2 + 1; _i17 < this.n; _i17++) {
                        _t3 += this.V[_i17][_k2] * this.V[_i17][_j5];
                      }
                      _t3 = -_t3 / this.V[_k2 + 1][_k2];
                      for (var _i18 = _k2 + 1; _i18 < this.n; _i18++) {
                        this.V[_i18][_j5] += _t3 * this.V[_i18][_k2];
                      }
                    }
                  }
                  for (var _i19 = 0; _i19 < this.n; _i19++) {
                    this.V[_i19][_k2] = 0;
                  }
                  this.V[_k2][_k2] = 1;
                }
              }
              var pp = p2 - 1;
              var eps = Math.pow(2, -52);
              var tiny = Math.pow(2, -966);
              while (p2 > 0) {
                var _k3 = void 0;
                var kase = void 0;
                for (_k3 = p2 - 2; _k3 >= -1; _k3--) {
                  if (_k3 === -1) {
                    break;
                  }
                  if (Math.abs(e2[_k3]) <= tiny + eps * (Math.abs(this.s[_k3]) + Math.abs(this.s[_k3 + 1]))) {
                    e2[_k3] = 0;
                    break;
                  }
                }
                if (_k3 === p2 - 2) {
                  kase = 4;
                } else {
                  var ks = void 0;
                  for (ks = p2 - 1; ks >= _k3; ks--) {
                    if (ks === _k3) {
                      break;
                    }
                    var _t4 = (ks !== p2 ? Math.abs(e2[ks]) : 0) + (ks !== _k3 + 1 ? Math.abs(e2[ks - 1]) : 0);
                    if (Math.abs(this.s[ks]) <= tiny + eps * _t4) {
                      this.s[ks] = 0;
                      break;
                    }
                  }
                  if (ks === _k3) {
                    kase = 3;
                  } else if (ks === p2 - 1) {
                    kase = 1;
                  } else {
                    kase = 2;
                    _k3 = ks;
                  }
                }
                _k3++;
                switch (kase) {
                  case 1:
                    {
                      var f2 = e2[p2 - 2];
                      e2[p2 - 2] = 0;
                      for (var _j6 = p2 - 2; _j6 >= _k3; _j6--) {
                        var _t5 = SVD.hypot(this.s[_j6], f2);
                        var cs = this.s[_j6] / _t5;
                        var sn = f2 / _t5;
                        this.s[_j6] = _t5;
                        if (_j6 !== _k3) {
                          f2 = -sn * e2[_j6 - 1];
                          e2[_j6 - 1] = cs * e2[_j6 - 1];
                        }
                        {
                          for (var _i20 = 0; _i20 < this.n; _i20++) {
                            _t5 = cs * this.V[_i20][_j6] + sn * this.V[_i20][p2 - 1];
                            this.V[_i20][p2 - 1] = -sn * this.V[_i20][_j6] + cs * this.V[_i20][p2 - 1];
                            this.V[_i20][_j6] = _t5;
                          }
                        }
                      }
                    }
                    break;
                  case 2:
                    {
                      var _f = e2[_k3 - 1];
                      e2[_k3 - 1] = 0;
                      for (var _j7 = _k3; _j7 < p2; _j7++) {
                        var _t6 = SVD.hypot(this.s[_j7], _f);
                        var _cs = this.s[_j7] / _t6;
                        var _sn = _f / _t6;
                        this.s[_j7] = _t6;
                        _f = -_sn * e2[_j7];
                        e2[_j7] = _cs * e2[_j7];
                        {
                          for (var _i21 = 0; _i21 < this.m; _i21++) {
                            _t6 = _cs * this.U[_i21][_j7] + _sn * this.U[_i21][_k3 - 1];
                            this.U[_i21][_k3 - 1] = -_sn * this.U[_i21][_j7] + _cs * this.U[_i21][_k3 - 1];
                            this.U[_i21][_j7] = _t6;
                          }
                        }
                      }
                    }
                    break;
                  case 3:
                    {
                      var scale = Math.max(Math.max(Math.max(Math.max(Math.abs(this.s[p2 - 1]), Math.abs(this.s[p2 - 2])), Math.abs(e2[p2 - 2])), Math.abs(this.s[_k3])), Math.abs(e2[_k3]));
                      var sp = this.s[p2 - 1] / scale;
                      var spm1 = this.s[p2 - 2] / scale;
                      var epm1 = e2[p2 - 2] / scale;
                      var sk = this.s[_k3] / scale;
                      var ek = e2[_k3] / scale;
                      var b2 = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                      var c2 = sp * epm1 * (sp * epm1);
                      var shift2 = 0;
                      if (function(lhs, rhs) {
                        return lhs || rhs;
                      }(b2 !== 0, c2 !== 0)) {
                        shift2 = Math.sqrt(b2 * b2 + c2);
                        if (b2 < 0) {
                          shift2 = -shift2;
                        }
                        shift2 = c2 / (b2 + shift2);
                      }
                      var _f2 = (sk + sp) * (sk - sp) + shift2;
                      var g2 = sk * ek;
                      for (var _j8 = _k3; _j8 < p2 - 1; _j8++) {
                        var _t7 = SVD.hypot(_f2, g2);
                        var _cs2 = _f2 / _t7;
                        var _sn2 = g2 / _t7;
                        if (_j8 !== _k3) {
                          e2[_j8 - 1] = _t7;
                        }
                        _f2 = _cs2 * this.s[_j8] + _sn2 * e2[_j8];
                        e2[_j8] = _cs2 * e2[_j8] - _sn2 * this.s[_j8];
                        g2 = _sn2 * this.s[_j8 + 1];
                        this.s[_j8 + 1] = _cs2 * this.s[_j8 + 1];
                        {
                          for (var _i22 = 0; _i22 < this.n; _i22++) {
                            _t7 = _cs2 * this.V[_i22][_j8] + _sn2 * this.V[_i22][_j8 + 1];
                            this.V[_i22][_j8 + 1] = -_sn2 * this.V[_i22][_j8] + _cs2 * this.V[_i22][_j8 + 1];
                            this.V[_i22][_j8] = _t7;
                          }
                        }
                        _t7 = SVD.hypot(_f2, g2);
                        _cs2 = _f2 / _t7;
                        _sn2 = g2 / _t7;
                        this.s[_j8] = _t7;
                        _f2 = _cs2 * e2[_j8] + _sn2 * this.s[_j8 + 1];
                        this.s[_j8 + 1] = -_sn2 * e2[_j8] + _cs2 * this.s[_j8 + 1];
                        g2 = _sn2 * e2[_j8 + 1];
                        e2[_j8 + 1] = _cs2 * e2[_j8 + 1];
                        if (_j8 < this.m - 1) {
                          for (var _i23 = 0; _i23 < this.m; _i23++) {
                            _t7 = _cs2 * this.U[_i23][_j8] + _sn2 * this.U[_i23][_j8 + 1];
                            this.U[_i23][_j8 + 1] = -_sn2 * this.U[_i23][_j8] + _cs2 * this.U[_i23][_j8 + 1];
                            this.U[_i23][_j8] = _t7;
                          }
                        }
                      }
                      e2[p2 - 2] = _f2;
                    }
                    break;
                  case 4:
                    {
                      if (this.s[_k3] <= 0) {
                        this.s[_k3] = this.s[_k3] < 0 ? -this.s[_k3] : 0;
                        {
                          for (var _i24 = 0; _i24 <= pp; _i24++) {
                            this.V[_i24][_k3] = -this.V[_i24][_k3];
                          }
                        }
                      }
                      while (_k3 < pp) {
                        if (this.s[_k3] >= this.s[_k3 + 1]) {
                          break;
                        }
                        var _t8 = this.s[_k3];
                        this.s[_k3] = this.s[_k3 + 1];
                        this.s[_k3 + 1] = _t8;
                        if (_k3 < this.n - 1) {
                          for (var _i25 = 0; _i25 < this.n; _i25++) {
                            _t8 = this.V[_i25][_k3 + 1];
                            this.V[_i25][_k3 + 1] = this.V[_i25][_k3];
                            this.V[_i25][_k3] = _t8;
                          }
                        }
                        if (_k3 < this.m - 1) {
                          for (var _i26 = 0; _i26 < this.m; _i26++) {
                            _t8 = this.U[_i26][_k3 + 1];
                            this.U[_i26][_k3 + 1] = this.U[_i26][_k3];
                            this.U[_i26][_k3] = _t8;
                          }
                        }
                        _k3++;
                      }
                      p2--;
                    }
                    break;
                }
              }
              var result = { U: this.U, V: this.V, S: this.s };
              return result;
            };
            SVD.hypot = function(a2, b2) {
              var r2 = void 0;
              if (Math.abs(a2) > Math.abs(b2)) {
                r2 = b2 / a2;
                r2 = Math.abs(a2) * Math.sqrt(1 + r2 * r2);
              } else if (b2 != 0) {
                r2 = a2 / b2;
                r2 = Math.abs(b2) * Math.sqrt(1 + r2 * r2);
              } else {
                r2 = 0;
              }
              return r2;
            };
            module2.exports = SVD;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _createClass2 = function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var NeedlemanWunsch = function() {
              function NeedlemanWunsch2(sequence1, sequence2) {
                var match_score = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
                var mismatch_penalty = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;
                var gap_penalty = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : -1;
                _classCallCheck2(this, NeedlemanWunsch2);
                this.sequence1 = sequence1;
                this.sequence2 = sequence2;
                this.match_score = match_score;
                this.mismatch_penalty = mismatch_penalty;
                this.gap_penalty = gap_penalty;
                this.iMax = sequence1.length + 1;
                this.jMax = sequence2.length + 1;
                this.grid = new Array(this.iMax);
                for (var i2 = 0; i2 < this.iMax; i2++) {
                  this.grid[i2] = new Array(this.jMax);
                  for (var j2 = 0; j2 < this.jMax; j2++) {
                    this.grid[i2][j2] = 0;
                  }
                }
                this.tracebackGrid = new Array(this.iMax);
                for (var _i = 0; _i < this.iMax; _i++) {
                  this.tracebackGrid[_i] = new Array(this.jMax);
                  for (var _j = 0; _j < this.jMax; _j++) {
                    this.tracebackGrid[_i][_j] = [null, null, null];
                  }
                }
                this.alignments = [];
                this.score = -1;
                this.computeGrids();
              }
              _createClass2(NeedlemanWunsch2, [{
                key: "getScore",
                value: function getScore() {
                  return this.score;
                }
              }, {
                key: "getAlignments",
                value: function getAlignments() {
                  return this.alignments;
                }
                // Main dynamic programming procedure
              }, {
                key: "computeGrids",
                value: function computeGrids() {
                  for (var j2 = 1; j2 < this.jMax; j2++) {
                    this.grid[0][j2] = this.grid[0][j2 - 1] + this.gap_penalty;
                    this.tracebackGrid[0][j2] = [false, false, true];
                  }
                  for (var i2 = 1; i2 < this.iMax; i2++) {
                    this.grid[i2][0] = this.grid[i2 - 1][0] + this.gap_penalty;
                    this.tracebackGrid[i2][0] = [false, true, false];
                  }
                  for (var _i2 = 1; _i2 < this.iMax; _i2++) {
                    for (var _j2 = 1; _j2 < this.jMax; _j2++) {
                      var diag = void 0;
                      if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1])
                        diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;
                      else
                        diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;
                      var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;
                      var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;
                      var maxOf = [diag, up, left];
                      var indices = this.arrayAllMaxIndexes(maxOf);
                      this.grid[_i2][_j2] = maxOf[indices[0]];
                      this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];
                    }
                  }
                  this.score = this.grid[this.iMax - 1][this.jMax - 1];
                }
                // Gets all possible valid sequence combinations
              }, {
                key: "alignmentTraceback",
                value: function alignmentTraceback() {
                  var inProcessAlignments = [];
                  inProcessAlignments.push({
                    pos: [this.sequence1.length, this.sequence2.length],
                    seq1: "",
                    seq2: ""
                  });
                  while (inProcessAlignments[0]) {
                    var current = inProcessAlignments[0];
                    var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];
                    if (directions[0]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0] - 1, current.pos[1] - 1],
                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                      });
                    }
                    if (directions[1]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0] - 1, current.pos[1]],
                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                        seq2: "-" + current.seq2
                      });
                    }
                    if (directions[2]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0], current.pos[1] - 1],
                        seq1: "-" + current.seq1,
                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                      });
                    }
                    if (current.pos[0] === 0 && current.pos[1] === 0)
                      this.alignments.push({
                        sequence1: current.seq1,
                        sequence2: current.seq2
                      });
                    inProcessAlignments.shift();
                  }
                  return this.alignments;
                }
                // Helper Functions
              }, {
                key: "getAllIndexes",
                value: function getAllIndexes(arr, val) {
                  var indexes = [], i2 = -1;
                  while ((i2 = arr.indexOf(val, i2 + 1)) !== -1) {
                    indexes.push(i2);
                  }
                  return indexes;
                }
              }, {
                key: "arrayAllMaxIndexes",
                value: function arrayAllMaxIndexes(array3) {
                  return this.getAllIndexes(array3, Math.max.apply(null, array3));
                }
              }]);
              return NeedlemanWunsch2;
            }();
            module2.exports = NeedlemanWunsch;
          },
          /* 28 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var layoutBase2 = function layoutBase3() {
              return;
            };
            layoutBase2.FDLayout = __webpack_require__(18);
            layoutBase2.FDLayoutConstants = __webpack_require__(4);
            layoutBase2.FDLayoutEdge = __webpack_require__(19);
            layoutBase2.FDLayoutNode = __webpack_require__(20);
            layoutBase2.DimensionD = __webpack_require__(21);
            layoutBase2.HashMap = __webpack_require__(22);
            layoutBase2.HashSet = __webpack_require__(23);
            layoutBase2.IGeometry = __webpack_require__(8);
            layoutBase2.IMath = __webpack_require__(9);
            layoutBase2.Integer = __webpack_require__(10);
            layoutBase2.Point = __webpack_require__(12);
            layoutBase2.PointD = __webpack_require__(5);
            layoutBase2.RandomSeed = __webpack_require__(16);
            layoutBase2.RectangleD = __webpack_require__(13);
            layoutBase2.Transform = __webpack_require__(17);
            layoutBase2.UniqueIDGeneretor = __webpack_require__(14);
            layoutBase2.Quicksort = __webpack_require__(25);
            layoutBase2.LinkedList = __webpack_require__(11);
            layoutBase2.LGraphObject = __webpack_require__(2);
            layoutBase2.LGraph = __webpack_require__(6);
            layoutBase2.LEdge = __webpack_require__(1);
            layoutBase2.LGraphManager = __webpack_require__(7);
            layoutBase2.LNode = __webpack_require__(3);
            layoutBase2.Layout = __webpack_require__(15);
            layoutBase2.LayoutConstants = __webpack_require__(0);
            layoutBase2.NeedlemanWunsch = __webpack_require__(27);
            layoutBase2.Matrix = __webpack_require__(24);
            layoutBase2.SVD = __webpack_require__(26);
            module2.exports = layoutBase2;
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
            function Emitter2() {
              this.listeners = [];
            }
            var p2 = Emitter2.prototype;
            p2.addListener = function(event3, callback) {
              this.listeners.push({
                event: event3,
                callback
              });
            };
            p2.removeListener = function(event3, callback) {
              for (var i2 = this.listeners.length; i2 >= 0; i2--) {
                var l2 = this.listeners[i2];
                if (l2.event === event3 && l2.callback === callback) {
                  this.listeners.splice(i2, 1);
                }
              }
            };
            p2.emit = function(event3, data4) {
              for (var i2 = 0; i2 < this.listeners.length; i2++) {
                var l2 = this.listeners[i2];
                if (event3 === l2.event) {
                  l2.callback(data4);
                }
              }
            };
            module2.exports = Emitter2;
          }
          /******/
        ])
      );
    });
  })(layoutBase);
  return layoutBase.exports;
}
var hasRequiredCoseBase;
function requireCoseBase() {
  if (hasRequiredCoseBase)
    return coseBase.exports;
  hasRequiredCoseBase = 1;
  (function(module, exports) {
    (function webpackUniversalModuleDefinition(root2, factory) {
      module.exports = factory(requireLayoutBase());
    })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__551__) {
      return (
        /******/
        (() => {
          var __webpack_modules__ = {
            /***/
            45: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var coseBase2 = {};
                coseBase2.layoutBase = __webpack_require__2(551);
                coseBase2.CoSEConstants = __webpack_require__2(806);
                coseBase2.CoSEEdge = __webpack_require__2(767);
                coseBase2.CoSEGraph = __webpack_require__2(880);
                coseBase2.CoSEGraphManager = __webpack_require__2(578);
                coseBase2.CoSELayout = __webpack_require__2(765);
                coseBase2.CoSENode = __webpack_require__2(991);
                coseBase2.ConstraintHandler = __webpack_require__2(902);
                module2.exports = coseBase2;
              }
            ),
            /***/
            806: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var FDLayoutConstants = __webpack_require__2(551).FDLayoutConstants;
                function CoSEConstants() {
                }
                for (var prop in FDLayoutConstants) {
                  CoSEConstants[prop] = FDLayoutConstants[prop];
                }
                CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;
                CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
                CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;
                CoSEConstants.TILE = true;
                CoSEConstants.TILING_PADDING_VERTICAL = 10;
                CoSEConstants.TILING_PADDING_HORIZONTAL = 10;
                CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;
                CoSEConstants.ENFORCE_CONSTRAINTS = true;
                CoSEConstants.APPLY_LAYOUT = true;
                CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS = true;
                CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = true;
                CoSEConstants.PURE_INCREMENTAL = CoSEConstants.DEFAULT_INCREMENTAL;
                module2.exports = CoSEConstants;
              }
            ),
            /***/
            767: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var FDLayoutEdge = __webpack_require__2(551).FDLayoutEdge;
                function CoSEEdge(source, target, vEdge) {
                  FDLayoutEdge.call(this, source, target, vEdge);
                }
                CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
                for (var prop in FDLayoutEdge) {
                  CoSEEdge[prop] = FDLayoutEdge[prop];
                }
                module2.exports = CoSEEdge;
              }
            ),
            /***/
            880: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var LGraph = __webpack_require__2(551).LGraph;
                function CoSEGraph(parent4, graphMgr, vGraph) {
                  LGraph.call(this, parent4, graphMgr, vGraph);
                }
                CoSEGraph.prototype = Object.create(LGraph.prototype);
                for (var prop in LGraph) {
                  CoSEGraph[prop] = LGraph[prop];
                }
                module2.exports = CoSEGraph;
              }
            ),
            /***/
            578: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var LGraphManager = __webpack_require__2(551).LGraphManager;
                function CoSEGraphManager(layout4) {
                  LGraphManager.call(this, layout4);
                }
                CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);
                for (var prop in LGraphManager) {
                  CoSEGraphManager[prop] = LGraphManager[prop];
                }
                module2.exports = CoSEGraphManager;
              }
            ),
            /***/
            765: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var FDLayout = __webpack_require__2(551).FDLayout;
                var CoSEGraphManager = __webpack_require__2(578);
                var CoSEGraph = __webpack_require__2(880);
                var CoSENode = __webpack_require__2(991);
                var CoSEEdge = __webpack_require__2(767);
                var CoSEConstants = __webpack_require__2(806);
                var ConstraintHandler = __webpack_require__2(902);
                var FDLayoutConstants = __webpack_require__2(551).FDLayoutConstants;
                var LayoutConstants = __webpack_require__2(551).LayoutConstants;
                var Point2 = __webpack_require__2(551).Point;
                var PointD = __webpack_require__2(551).PointD;
                var DimensionD2 = __webpack_require__2(551).DimensionD;
                var Layout2 = __webpack_require__2(551).Layout;
                var Integer = __webpack_require__2(551).Integer;
                var IGeometry = __webpack_require__2(551).IGeometry;
                var LGraph = __webpack_require__2(551).LGraph;
                var Transform = __webpack_require__2(551).Transform;
                var LinkedList = __webpack_require__2(551).LinkedList;
                function CoSELayout() {
                  FDLayout.call(this);
                  this.toBeTiled = {};
                  this.constraints = {};
                }
                CoSELayout.prototype = Object.create(FDLayout.prototype);
                for (var prop in FDLayout) {
                  CoSELayout[prop] = FDLayout[prop];
                }
                CoSELayout.prototype.newGraphManager = function() {
                  var gm = new CoSEGraphManager(this);
                  this.graphManager = gm;
                  return gm;
                };
                CoSELayout.prototype.newGraph = function(vGraph) {
                  return new CoSEGraph(null, this.graphManager, vGraph);
                };
                CoSELayout.prototype.newNode = function(vNode) {
                  return new CoSENode(this.graphManager, vNode);
                };
                CoSELayout.prototype.newEdge = function(vEdge) {
                  return new CoSEEdge(null, null, vEdge);
                };
                CoSELayout.prototype.initParameters = function() {
                  FDLayout.prototype.initParameters.call(this, arguments);
                  if (!this.isSubLayout) {
                    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {
                      this.idealEdgeLength = 10;
                    } else {
                      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;
                    }
                    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
                    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
                    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
                    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
                    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
                    this.prunedNodesAll = [];
                    this.growTreeIterations = 0;
                    this.afterGrowthIterations = 0;
                    this.isTreeGrowing = false;
                    this.isGrowthFinished = false;
                  }
                };
                CoSELayout.prototype.initSpringEmbedder = function() {
                  FDLayout.prototype.initSpringEmbedder.call(this);
                  this.coolingCycle = 0;
                  this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;
                  this.finalTemperature = 0.04;
                  this.coolingAdjuster = 1;
                };
                CoSELayout.prototype.layout = function() {
                  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
                  if (createBendsAsNeeded) {
                    this.createBendpoints();
                    this.graphManager.resetAllEdges();
                  }
                  this.level = 0;
                  return this.classicLayout();
                };
                CoSELayout.prototype.classicLayout = function() {
                  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();
                  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);
                  this.calcNoOfChildrenForAllNodes();
                  this.graphManager.calcLowestCommonAncestors();
                  this.graphManager.calcInclusionTreeDepths();
                  this.graphManager.getRoot().calcEstimatedSize();
                  this.calcIdealEdgeLengths();
                  if (!this.incremental) {
                    var forest = this.getFlatForest();
                    if (forest.length > 0) {
                      this.positionNodesRadially(forest);
                    } else {
                      this.reduceTrees();
                      this.graphManager.resetAllNodesToApplyGravitation();
                      var allNodes = new Set(this.getAllNodes());
                      var intersection = this.nodesWithGravity.filter(function(x2) {
                        return allNodes.has(x2);
                      });
                      this.graphManager.setAllNodesToApplyGravitation(intersection);
                      this.positionNodesRandomly();
                    }
                  } else {
                    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {
                      this.reduceTrees();
                      this.graphManager.resetAllNodesToApplyGravitation();
                      var allNodes = new Set(this.getAllNodes());
                      var intersection = this.nodesWithGravity.filter(function(x2) {
                        return allNodes.has(x2);
                      });
                      this.graphManager.setAllNodesToApplyGravitation(intersection);
                    }
                  }
                  if (Object.keys(this.constraints).length > 0) {
                    ConstraintHandler.handleConstraints(this);
                    this.initConstraintVariables();
                  }
                  this.initSpringEmbedder();
                  if (CoSEConstants.APPLY_LAYOUT) {
                    this.runSpringEmbedder();
                  }
                  return true;
                };
                CoSELayout.prototype.tick = function() {
                  this.totalIterations++;
                  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {
                    if (this.prunedNodesAll.length > 0) {
                      this.isTreeGrowing = true;
                    } else {
                      return true;
                    }
                  }
                  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {
                    if (this.isConverged()) {
                      if (this.prunedNodesAll.length > 0) {
                        this.isTreeGrowing = true;
                      } else {
                        return true;
                      }
                    }
                    this.coolingCycle++;
                    if (this.layoutQuality == 0) {
                      this.coolingAdjuster = this.coolingCycle;
                    } else if (this.layoutQuality == 1) {
                      this.coolingAdjuster = this.coolingCycle / 3;
                    }
                    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);
                    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));
                  }
                  if (this.isTreeGrowing) {
                    if (this.growTreeIterations % 10 == 0) {
                      if (this.prunedNodesAll.length > 0) {
                        this.graphManager.updateBounds();
                        this.updateGrid();
                        this.growTree(this.prunedNodesAll);
                        this.graphManager.resetAllNodesToApplyGravitation();
                        var allNodes = new Set(this.getAllNodes());
                        var intersection = this.nodesWithGravity.filter(function(x2) {
                          return allNodes.has(x2);
                        });
                        this.graphManager.setAllNodesToApplyGravitation(intersection);
                        this.graphManager.updateBounds();
                        this.updateGrid();
                        if (CoSEConstants.PURE_INCREMENTAL)
                          this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2;
                        else
                          this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
                      } else {
                        this.isTreeGrowing = false;
                        this.isGrowthFinished = true;
                      }
                    }
                    this.growTreeIterations++;
                  }
                  if (this.isGrowthFinished) {
                    if (this.isConverged()) {
                      return true;
                    }
                    if (this.afterGrowthIterations % 10 == 0) {
                      this.graphManager.updateBounds();
                      this.updateGrid();
                    }
                    if (CoSEConstants.PURE_INCREMENTAL)
                      this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2 * ((100 - this.afterGrowthIterations) / 100);
                    else
                      this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);
                    this.afterGrowthIterations++;
                  }
                  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;
                  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;
                  this.totalDisplacement = 0;
                  this.graphManager.updateBounds();
                  this.calcSpringForces();
                  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);
                  this.calcGravitationalForces();
                  this.moveNodes();
                  this.animate();
                  return false;
                };
                CoSELayout.prototype.getPositionsData = function() {
                  var allNodes = this.graphManager.getAllNodes();
                  var pData = {};
                  for (var i2 = 0; i2 < allNodes.length; i2++) {
                    var rect = allNodes[i2].rect;
                    var id2 = allNodes[i2].id;
                    pData[id2] = {
                      id: id2,
                      x: rect.getCenterX(),
                      y: rect.getCenterY(),
                      w: rect.width,
                      h: rect.height
                    };
                  }
                  return pData;
                };
                CoSELayout.prototype.runSpringEmbedder = function() {
                  this.initialAnimationPeriod = 25;
                  this.animationPeriod = this.initialAnimationPeriod;
                  var layoutEnded = false;
                  if (FDLayoutConstants.ANIMATE === "during") {
                    this.emit("layoutstarted");
                  } else {
                    while (!layoutEnded) {
                      layoutEnded = this.tick();
                    }
                    this.graphManager.updateBounds();
                  }
                };
                CoSELayout.prototype.moveNodes = function() {
                  var lNodes = this.getAllNodes();
                  var node;
                  for (var i2 = 0; i2 < lNodes.length; i2++) {
                    node = lNodes[i2];
                    node.calculateDisplacement();
                  }
                  if (Object.keys(this.constraints).length > 0) {
                    this.updateDisplacements();
                  }
                  for (var i2 = 0; i2 < lNodes.length; i2++) {
                    node = lNodes[i2];
                    node.move();
                  }
                };
                CoSELayout.prototype.initConstraintVariables = function() {
                  var self2 = this;
                  this.idToNodeMap = /* @__PURE__ */ new Map();
                  this.fixedNodeSet = /* @__PURE__ */ new Set();
                  var allNodes = this.graphManager.getAllNodes();
                  for (var i2 = 0; i2 < allNodes.length; i2++) {
                    var node = allNodes[i2];
                    this.idToNodeMap.set(node.id, node);
                  }
                  var calculateCompoundWeight = function calculateCompoundWeight2(compoundNode) {
                    var nodes3 = compoundNode.getChild().getNodes();
                    var node2;
                    var fixedNodeWeight2 = 0;
                    for (var i3 = 0; i3 < nodes3.length; i3++) {
                      node2 = nodes3[i3];
                      if (node2.getChild() == null) {
                        if (self2.fixedNodeSet.has(node2.id)) {
                          fixedNodeWeight2 += 100;
                        }
                      } else {
                        fixedNodeWeight2 += calculateCompoundWeight2(node2);
                      }
                    }
                    return fixedNodeWeight2;
                  };
                  if (this.constraints.fixedNodeConstraint) {
                    this.constraints.fixedNodeConstraint.forEach(function(nodeData) {
                      self2.fixedNodeSet.add(nodeData.nodeId);
                    });
                    var allNodes = this.graphManager.getAllNodes();
                    var node;
                    for (var i2 = 0; i2 < allNodes.length; i2++) {
                      node = allNodes[i2];
                      if (node.getChild() != null) {
                        var fixedNodeWeight = calculateCompoundWeight(node);
                        if (fixedNodeWeight > 0) {
                          node.fixedNodeWeight = fixedNodeWeight;
                        }
                      }
                    }
                  }
                  if (this.constraints.relativePlacementConstraint) {
                    var nodeToDummyForVerticalAlignment = /* @__PURE__ */ new Map();
                    var nodeToDummyForHorizontalAlignment = /* @__PURE__ */ new Map();
                    this.dummyToNodeForVerticalAlignment = /* @__PURE__ */ new Map();
                    this.dummyToNodeForHorizontalAlignment = /* @__PURE__ */ new Map();
                    this.fixedNodesOnHorizontal = /* @__PURE__ */ new Set();
                    this.fixedNodesOnVertical = /* @__PURE__ */ new Set();
                    this.fixedNodeSet.forEach(function(nodeId) {
                      self2.fixedNodesOnHorizontal.add(nodeId);
                      self2.fixedNodesOnVertical.add(nodeId);
                    });
                    if (this.constraints.alignmentConstraint) {
                      if (this.constraints.alignmentConstraint.vertical) {
                        var verticalAlignment = this.constraints.alignmentConstraint.vertical;
                        for (var i2 = 0; i2 < verticalAlignment.length; i2++) {
                          this.dummyToNodeForVerticalAlignment.set("dummy" + i2, []);
                          verticalAlignment[i2].forEach(function(nodeId) {
                            nodeToDummyForVerticalAlignment.set(nodeId, "dummy" + i2);
                            self2.dummyToNodeForVerticalAlignment.get("dummy" + i2).push(nodeId);
                            if (self2.fixedNodeSet.has(nodeId)) {
                              self2.fixedNodesOnHorizontal.add("dummy" + i2);
                            }
                          });
                        }
                      }
                      if (this.constraints.alignmentConstraint.horizontal) {
                        var horizontalAlignment = this.constraints.alignmentConstraint.horizontal;
                        for (var i2 = 0; i2 < horizontalAlignment.length; i2++) {
                          this.dummyToNodeForHorizontalAlignment.set("dummy" + i2, []);
                          horizontalAlignment[i2].forEach(function(nodeId) {
                            nodeToDummyForHorizontalAlignment.set(nodeId, "dummy" + i2);
                            self2.dummyToNodeForHorizontalAlignment.get("dummy" + i2).push(nodeId);
                            if (self2.fixedNodeSet.has(nodeId)) {
                              self2.fixedNodesOnVertical.add("dummy" + i2);
                            }
                          });
                        }
                      }
                    }
                    if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {
                      this.shuffle = function(array3) {
                        var j2, x2, i3;
                        for (i3 = array3.length - 1; i3 >= 2 * array3.length / 3; i3--) {
                          j2 = Math.floor(Math.random() * (i3 + 1));
                          x2 = array3[i3];
                          array3[i3] = array3[j2];
                          array3[j2] = x2;
                        }
                        return array3;
                      };
                      this.nodesInRelativeHorizontal = [];
                      this.nodesInRelativeVertical = [];
                      this.nodeToRelativeConstraintMapHorizontal = /* @__PURE__ */ new Map();
                      this.nodeToRelativeConstraintMapVertical = /* @__PURE__ */ new Map();
                      this.nodeToTempPositionMapHorizontal = /* @__PURE__ */ new Map();
                      this.nodeToTempPositionMapVertical = /* @__PURE__ */ new Map();
                      this.constraints.relativePlacementConstraint.forEach(function(constraint) {
                        if (constraint.left) {
                          var nodeIdLeft = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;
                          var nodeIdRight = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;
                          if (!self2.nodesInRelativeHorizontal.includes(nodeIdLeft)) {
                            self2.nodesInRelativeHorizontal.push(nodeIdLeft);
                            self2.nodeToRelativeConstraintMapHorizontal.set(nodeIdLeft, []);
                            if (self2.dummyToNodeForVerticalAlignment.has(nodeIdLeft)) {
                              self2.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self2.idToNodeMap.get(self2.dummyToNodeForVerticalAlignment.get(nodeIdLeft)[0]).getCenterX());
                            } else {
                              self2.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self2.idToNodeMap.get(nodeIdLeft).getCenterX());
                            }
                          }
                          if (!self2.nodesInRelativeHorizontal.includes(nodeIdRight)) {
                            self2.nodesInRelativeHorizontal.push(nodeIdRight);
                            self2.nodeToRelativeConstraintMapHorizontal.set(nodeIdRight, []);
                            if (self2.dummyToNodeForVerticalAlignment.has(nodeIdRight)) {
                              self2.nodeToTempPositionMapHorizontal.set(nodeIdRight, self2.idToNodeMap.get(self2.dummyToNodeForVerticalAlignment.get(nodeIdRight)[0]).getCenterX());
                            } else {
                              self2.nodeToTempPositionMapHorizontal.set(nodeIdRight, self2.idToNodeMap.get(nodeIdRight).getCenterX());
                            }
                          }
                          self2.nodeToRelativeConstraintMapHorizontal.get(nodeIdLeft).push({ right: nodeIdRight, gap: constraint.gap });
                          self2.nodeToRelativeConstraintMapHorizontal.get(nodeIdRight).push({ left: nodeIdLeft, gap: constraint.gap });
                        } else {
                          var nodeIdTop = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;
                          var nodeIdBottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;
                          if (!self2.nodesInRelativeVertical.includes(nodeIdTop)) {
                            self2.nodesInRelativeVertical.push(nodeIdTop);
                            self2.nodeToRelativeConstraintMapVertical.set(nodeIdTop, []);
                            if (self2.dummyToNodeForHorizontalAlignment.has(nodeIdTop)) {
                              self2.nodeToTempPositionMapVertical.set(nodeIdTop, self2.idToNodeMap.get(self2.dummyToNodeForHorizontalAlignment.get(nodeIdTop)[0]).getCenterY());
                            } else {
                              self2.nodeToTempPositionMapVertical.set(nodeIdTop, self2.idToNodeMap.get(nodeIdTop).getCenterY());
                            }
                          }
                          if (!self2.nodesInRelativeVertical.includes(nodeIdBottom)) {
                            self2.nodesInRelativeVertical.push(nodeIdBottom);
                            self2.nodeToRelativeConstraintMapVertical.set(nodeIdBottom, []);
                            if (self2.dummyToNodeForHorizontalAlignment.has(nodeIdBottom)) {
                              self2.nodeToTempPositionMapVertical.set(nodeIdBottom, self2.idToNodeMap.get(self2.dummyToNodeForHorizontalAlignment.get(nodeIdBottom)[0]).getCenterY());
                            } else {
                              self2.nodeToTempPositionMapVertical.set(nodeIdBottom, self2.idToNodeMap.get(nodeIdBottom).getCenterY());
                            }
                          }
                          self2.nodeToRelativeConstraintMapVertical.get(nodeIdTop).push({ bottom: nodeIdBottom, gap: constraint.gap });
                          self2.nodeToRelativeConstraintMapVertical.get(nodeIdBottom).push({ top: nodeIdTop, gap: constraint.gap });
                        }
                      });
                    } else {
                      var subGraphOnHorizontal = /* @__PURE__ */ new Map();
                      var subGraphOnVertical = /* @__PURE__ */ new Map();
                      this.constraints.relativePlacementConstraint.forEach(function(constraint) {
                        if (constraint.left) {
                          var left = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;
                          var right = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;
                          if (subGraphOnHorizontal.has(left)) {
                            subGraphOnHorizontal.get(left).push(right);
                          } else {
                            subGraphOnHorizontal.set(left, [right]);
                          }
                          if (subGraphOnHorizontal.has(right)) {
                            subGraphOnHorizontal.get(right).push(left);
                          } else {
                            subGraphOnHorizontal.set(right, [left]);
                          }
                        } else {
                          var top = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;
                          var bottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;
                          if (subGraphOnVertical.has(top)) {
                            subGraphOnVertical.get(top).push(bottom);
                          } else {
                            subGraphOnVertical.set(top, [bottom]);
                          }
                          if (subGraphOnVertical.has(bottom)) {
                            subGraphOnVertical.get(bottom).push(top);
                          } else {
                            subGraphOnVertical.set(bottom, [top]);
                          }
                        }
                      });
                      var constructComponents = function constructComponents2(graph2, fixedNodes) {
                        var components2 = [];
                        var isFixed = [];
                        var queue = new LinkedList();
                        var visited = /* @__PURE__ */ new Set();
                        var count = 0;
                        graph2.forEach(function(value, key) {
                          if (!visited.has(key)) {
                            components2[count] = [];
                            isFixed[count] = false;
                            var currentNode = key;
                            queue.push(currentNode);
                            visited.add(currentNode);
                            components2[count].push(currentNode);
                            while (queue.length != 0) {
                              currentNode = queue.shift();
                              if (fixedNodes.has(currentNode)) {
                                isFixed[count] = true;
                              }
                              var neighbors = graph2.get(currentNode);
                              neighbors.forEach(function(neighbor) {
                                if (!visited.has(neighbor)) {
                                  queue.push(neighbor);
                                  visited.add(neighbor);
                                  components2[count].push(neighbor);
                                }
                              });
                            }
                            count++;
                          }
                        });
                        return { components: components2, isFixed };
                      };
                      var resultOnHorizontal = constructComponents(subGraphOnHorizontal, self2.fixedNodesOnHorizontal);
                      this.componentsOnHorizontal = resultOnHorizontal.components;
                      this.fixedComponentsOnHorizontal = resultOnHorizontal.isFixed;
                      var resultOnVertical = constructComponents(subGraphOnVertical, self2.fixedNodesOnVertical);
                      this.componentsOnVertical = resultOnVertical.components;
                      this.fixedComponentsOnVertical = resultOnVertical.isFixed;
                    }
                  }
                };
                CoSELayout.prototype.updateDisplacements = function() {
                  var self2 = this;
                  if (this.constraints.fixedNodeConstraint) {
                    this.constraints.fixedNodeConstraint.forEach(function(nodeData) {
                      var fixedNode = self2.idToNodeMap.get(nodeData.nodeId);
                      fixedNode.displacementX = 0;
                      fixedNode.displacementY = 0;
                    });
                  }
                  if (this.constraints.alignmentConstraint) {
                    if (this.constraints.alignmentConstraint.vertical) {
                      var allVerticalAlignments = this.constraints.alignmentConstraint.vertical;
                      for (var i2 = 0; i2 < allVerticalAlignments.length; i2++) {
                        var totalDisplacementX = 0;
                        for (var j2 = 0; j2 < allVerticalAlignments[i2].length; j2++) {
                          if (this.fixedNodeSet.has(allVerticalAlignments[i2][j2])) {
                            totalDisplacementX = 0;
                            break;
                          }
                          totalDisplacementX += this.idToNodeMap.get(allVerticalAlignments[i2][j2]).displacementX;
                        }
                        var averageDisplacementX = totalDisplacementX / allVerticalAlignments[i2].length;
                        for (var j2 = 0; j2 < allVerticalAlignments[i2].length; j2++) {
                          this.idToNodeMap.get(allVerticalAlignments[i2][j2]).displacementX = averageDisplacementX;
                        }
                      }
                    }
                    if (this.constraints.alignmentConstraint.horizontal) {
                      var allHorizontalAlignments = this.constraints.alignmentConstraint.horizontal;
                      for (var i2 = 0; i2 < allHorizontalAlignments.length; i2++) {
                        var totalDisplacementY = 0;
                        for (var j2 = 0; j2 < allHorizontalAlignments[i2].length; j2++) {
                          if (this.fixedNodeSet.has(allHorizontalAlignments[i2][j2])) {
                            totalDisplacementY = 0;
                            break;
                          }
                          totalDisplacementY += this.idToNodeMap.get(allHorizontalAlignments[i2][j2]).displacementY;
                        }
                        var averageDisplacementY = totalDisplacementY / allHorizontalAlignments[i2].length;
                        for (var j2 = 0; j2 < allHorizontalAlignments[i2].length; j2++) {
                          this.idToNodeMap.get(allHorizontalAlignments[i2][j2]).displacementY = averageDisplacementY;
                        }
                      }
                    }
                  }
                  if (this.constraints.relativePlacementConstraint) {
                    if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {
                      if (this.totalIterations % 10 == 0) {
                        this.shuffle(this.nodesInRelativeHorizontal);
                        this.shuffle(this.nodesInRelativeVertical);
                      }
                      this.nodesInRelativeHorizontal.forEach(function(nodeId) {
                        if (!self2.fixedNodesOnHorizontal.has(nodeId)) {
                          var displacement = 0;
                          if (self2.dummyToNodeForVerticalAlignment.has(nodeId)) {
                            displacement = self2.idToNodeMap.get(self2.dummyToNodeForVerticalAlignment.get(nodeId)[0]).displacementX;
                          } else {
                            displacement = self2.idToNodeMap.get(nodeId).displacementX;
                          }
                          self2.nodeToRelativeConstraintMapHorizontal.get(nodeId).forEach(function(constraint) {
                            if (constraint.right) {
                              var diff2 = self2.nodeToTempPositionMapHorizontal.get(constraint.right) - self2.nodeToTempPositionMapHorizontal.get(nodeId) - displacement;
                              if (diff2 < constraint.gap) {
                                displacement -= constraint.gap - diff2;
                              }
                            } else {
                              var diff2 = self2.nodeToTempPositionMapHorizontal.get(nodeId) - self2.nodeToTempPositionMapHorizontal.get(constraint.left) + displacement;
                              if (diff2 < constraint.gap) {
                                displacement += constraint.gap - diff2;
                              }
                            }
                          });
                          self2.nodeToTempPositionMapHorizontal.set(nodeId, self2.nodeToTempPositionMapHorizontal.get(nodeId) + displacement);
                          if (self2.dummyToNodeForVerticalAlignment.has(nodeId)) {
                            self2.dummyToNodeForVerticalAlignment.get(nodeId).forEach(function(nodeId2) {
                              self2.idToNodeMap.get(nodeId2).displacementX = displacement;
                            });
                          } else {
                            self2.idToNodeMap.get(nodeId).displacementX = displacement;
                          }
                        }
                      });
                      this.nodesInRelativeVertical.forEach(function(nodeId) {
                        if (!self2.fixedNodesOnHorizontal.has(nodeId)) {
                          var displacement = 0;
                          if (self2.dummyToNodeForHorizontalAlignment.has(nodeId)) {
                            displacement = self2.idToNodeMap.get(self2.dummyToNodeForHorizontalAlignment.get(nodeId)[0]).displacementY;
                          } else {
                            displacement = self2.idToNodeMap.get(nodeId).displacementY;
                          }
                          self2.nodeToRelativeConstraintMapVertical.get(nodeId).forEach(function(constraint) {
                            if (constraint.bottom) {
                              var diff2 = self2.nodeToTempPositionMapVertical.get(constraint.bottom) - self2.nodeToTempPositionMapVertical.get(nodeId) - displacement;
                              if (diff2 < constraint.gap) {
                                displacement -= constraint.gap - diff2;
                              }
                            } else {
                              var diff2 = self2.nodeToTempPositionMapVertical.get(nodeId) - self2.nodeToTempPositionMapVertical.get(constraint.top) + displacement;
                              if (diff2 < constraint.gap) {
                                displacement += constraint.gap - diff2;
                              }
                            }
                          });
                          self2.nodeToTempPositionMapVertical.set(nodeId, self2.nodeToTempPositionMapVertical.get(nodeId) + displacement);
                          if (self2.dummyToNodeForHorizontalAlignment.has(nodeId)) {
                            self2.dummyToNodeForHorizontalAlignment.get(nodeId).forEach(function(nodeId2) {
                              self2.idToNodeMap.get(nodeId2).displacementY = displacement;
                            });
                          } else {
                            self2.idToNodeMap.get(nodeId).displacementY = displacement;
                          }
                        }
                      });
                    } else {
                      for (var i2 = 0; i2 < this.componentsOnHorizontal.length; i2++) {
                        var component2 = this.componentsOnHorizontal[i2];
                        if (this.fixedComponentsOnHorizontal[i2]) {
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForVerticalAlignment.has(component2[j2])) {
                              this.dummyToNodeForVerticalAlignment.get(component2[j2]).forEach(function(nodeId) {
                                self2.idToNodeMap.get(nodeId).displacementX = 0;
                              });
                            } else {
                              this.idToNodeMap.get(component2[j2]).displacementX = 0;
                            }
                          }
                        } else {
                          var sum = 0;
                          var count = 0;
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForVerticalAlignment.has(component2[j2])) {
                              var actualNodes = this.dummyToNodeForVerticalAlignment.get(component2[j2]);
                              sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementX;
                              count += actualNodes.length;
                            } else {
                              sum += this.idToNodeMap.get(component2[j2]).displacementX;
                              count++;
                            }
                          }
                          var averageDisplacement = sum / count;
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForVerticalAlignment.has(component2[j2])) {
                              this.dummyToNodeForVerticalAlignment.get(component2[j2]).forEach(function(nodeId) {
                                self2.idToNodeMap.get(nodeId).displacementX = averageDisplacement;
                              });
                            } else {
                              this.idToNodeMap.get(component2[j2]).displacementX = averageDisplacement;
                            }
                          }
                        }
                      }
                      for (var i2 = 0; i2 < this.componentsOnVertical.length; i2++) {
                        var component2 = this.componentsOnVertical[i2];
                        if (this.fixedComponentsOnVertical[i2]) {
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForHorizontalAlignment.has(component2[j2])) {
                              this.dummyToNodeForHorizontalAlignment.get(component2[j2]).forEach(function(nodeId) {
                                self2.idToNodeMap.get(nodeId).displacementY = 0;
                              });
                            } else {
                              this.idToNodeMap.get(component2[j2]).displacementY = 0;
                            }
                          }
                        } else {
                          var sum = 0;
                          var count = 0;
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForHorizontalAlignment.has(component2[j2])) {
                              var actualNodes = this.dummyToNodeForHorizontalAlignment.get(component2[j2]);
                              sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementY;
                              count += actualNodes.length;
                            } else {
                              sum += this.idToNodeMap.get(component2[j2]).displacementY;
                              count++;
                            }
                          }
                          var averageDisplacement = sum / count;
                          for (var j2 = 0; j2 < component2.length; j2++) {
                            if (this.dummyToNodeForHorizontalAlignment.has(component2[j2])) {
                              this.dummyToNodeForHorizontalAlignment.get(component2[j2]).forEach(function(nodeId) {
                                self2.idToNodeMap.get(nodeId).displacementY = averageDisplacement;
                              });
                            } else {
                              this.idToNodeMap.get(component2[j2]).displacementY = averageDisplacement;
                            }
                          }
                        }
                      }
                    }
                  }
                };
                CoSELayout.prototype.calculateNodesToApplyGravitationTo = function() {
                  var nodeList = [];
                  var graph2;
                  var graphs = this.graphManager.getGraphs();
                  var size3 = graphs.length;
                  var i2;
                  for (i2 = 0; i2 < size3; i2++) {
                    graph2 = graphs[i2];
                    graph2.updateConnected();
                    if (!graph2.isConnected) {
                      nodeList = nodeList.concat(graph2.getNodes());
                    }
                  }
                  return nodeList;
                };
                CoSELayout.prototype.createBendpoints = function() {
                  var edges3 = [];
                  edges3 = edges3.concat(this.graphManager.getAllEdges());
                  var visited = /* @__PURE__ */ new Set();
                  var i2;
                  for (i2 = 0; i2 < edges3.length; i2++) {
                    var edge = edges3[i2];
                    if (!visited.has(edge)) {
                      var source = edge.getSource();
                      var target = edge.getTarget();
                      if (source == target) {
                        edge.getBendpoints().push(new PointD());
                        edge.getBendpoints().push(new PointD());
                        this.createDummyNodesForBendpoints(edge);
                        visited.add(edge);
                      } else {
                        var edgeList = [];
                        edgeList = edgeList.concat(source.getEdgeListToNode(target));
                        edgeList = edgeList.concat(target.getEdgeListToNode(source));
                        if (!visited.has(edgeList[0])) {
                          if (edgeList.length > 1) {
                            var k2;
                            for (k2 = 0; k2 < edgeList.length; k2++) {
                              var multiEdge = edgeList[k2];
                              multiEdge.getBendpoints().push(new PointD());
                              this.createDummyNodesForBendpoints(multiEdge);
                            }
                          }
                          edgeList.forEach(function(edge2) {
                            visited.add(edge2);
                          });
                        }
                      }
                    }
                    if (visited.size == edges3.length) {
                      break;
                    }
                  }
                };
                CoSELayout.prototype.positionNodesRadially = function(forest) {
                  var currentStartingPoint = new Point2(0, 0);
                  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));
                  var height2 = 0;
                  var currentY = 0;
                  var currentX = 0;
                  var point = new PointD(0, 0);
                  for (var i2 = 0; i2 < forest.length; i2++) {
                    if (i2 % numberOfColumns == 0) {
                      currentX = 0;
                      currentY = height2;
                      if (i2 != 0) {
                        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;
                      }
                      height2 = 0;
                    }
                    var tree = forest[i2];
                    var centerNode = Layout2.findCenterOfTree(tree);
                    currentStartingPoint.x = currentX;
                    currentStartingPoint.y = currentY;
                    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);
                    if (point.y > height2) {
                      height2 = Math.floor(point.y);
                    }
                    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);
                  }
                  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));
                };
                CoSELayout.radialLayout = function(tree, centerNode, startingPoint) {
                  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);
                  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);
                  var bounds2 = LGraph.calculateBounds(tree);
                  var transform7 = new Transform();
                  transform7.setDeviceOrgX(bounds2.getMinX());
                  transform7.setDeviceOrgY(bounds2.getMinY());
                  transform7.setWorldOrgX(startingPoint.x);
                  transform7.setWorldOrgY(startingPoint.y);
                  for (var i2 = 0; i2 < tree.length; i2++) {
                    var node = tree[i2];
                    node.transform(transform7);
                  }
                  var bottomRight = new PointD(bounds2.getMaxX(), bounds2.getMaxY());
                  return transform7.inverseTransformPoint(bottomRight);
                };
                CoSELayout.branchRadialLayout = function(node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {
                  var halfInterval = (endAngle - startAngle + 1) / 2;
                  if (halfInterval < 0) {
                    halfInterval += 180;
                  }
                  var nodeAngle = (halfInterval + startAngle) % 360;
                  var teta = nodeAngle * IGeometry.TWO_PI / 360;
                  var x_ = distance * Math.cos(teta);
                  var y_ = distance * Math.sin(teta);
                  node.setCenter(x_, y_);
                  var neighborEdges = [];
                  neighborEdges = neighborEdges.concat(node.getEdges());
                  var childCount = neighborEdges.length;
                  if (parentOfNode != null) {
                    childCount--;
                  }
                  var branchCount = 0;
                  var incEdgesCount = neighborEdges.length;
                  var startIndex;
                  var edges3 = node.getEdgesBetween(parentOfNode);
                  while (edges3.length > 1) {
                    var temp = edges3[0];
                    edges3.splice(0, 1);
                    var index = neighborEdges.indexOf(temp);
                    if (index >= 0) {
                      neighborEdges.splice(index, 1);
                    }
                    incEdgesCount--;
                    childCount--;
                  }
                  if (parentOfNode != null) {
                    startIndex = (neighborEdges.indexOf(edges3[0]) + 1) % incEdgesCount;
                  } else {
                    startIndex = 0;
                  }
                  var stepAngle = Math.abs(endAngle - startAngle) / childCount;
                  for (var i2 = startIndex; branchCount != childCount; i2 = ++i2 % incEdgesCount) {
                    var currentNeighbor = neighborEdges[i2].getOtherEnd(node);
                    if (currentNeighbor == parentOfNode) {
                      continue;
                    }
                    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;
                    var childEndAngle = (childStartAngle + stepAngle) % 360;
                    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);
                    branchCount++;
                  }
                };
                CoSELayout.maxDiagonalInTree = function(tree) {
                  var maxDiagonal = Integer.MIN_VALUE;
                  for (var i2 = 0; i2 < tree.length; i2++) {
                    var node = tree[i2];
                    var diagonal = node.getDiagonal();
                    if (diagonal > maxDiagonal) {
                      maxDiagonal = diagonal;
                    }
                  }
                  return maxDiagonal;
                };
                CoSELayout.prototype.calcRepulsionRange = function() {
                  return 2 * (this.level + 1) * this.idealEdgeLength;
                };
                CoSELayout.prototype.groupZeroDegreeMembers = function() {
                  var self2 = this;
                  var tempMemberGroups = {};
                  this.memberGroups = {};
                  this.idToDummyNode = {};
                  var zeroDegree = [];
                  var allNodes = this.graphManager.getAllNodes();
                  for (var i2 = 0; i2 < allNodes.length; i2++) {
                    var node = allNodes[i2];
                    var parent4 = node.getParent();
                    if (this.getNodeDegreeWithChildren(node) === 0 && (parent4.id == void 0 || !this.getToBeTiled(parent4))) {
                      zeroDegree.push(node);
                    }
                  }
                  for (var i2 = 0; i2 < zeroDegree.length; i2++) {
                    var node = zeroDegree[i2];
                    var p_id = node.getParent().id;
                    if (typeof tempMemberGroups[p_id] === "undefined")
                      tempMemberGroups[p_id] = [];
                    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node);
                  }
                  Object.keys(tempMemberGroups).forEach(function(p_id2) {
                    if (tempMemberGroups[p_id2].length > 1) {
                      var dummyCompoundId = "DummyCompound_" + p_id2;
                      self2.memberGroups[dummyCompoundId] = tempMemberGroups[p_id2];
                      var parent5 = tempMemberGroups[p_id2][0].getParent();
                      var dummyCompound = new CoSENode(self2.graphManager);
                      dummyCompound.id = dummyCompoundId;
                      dummyCompound.paddingLeft = parent5.paddingLeft || 0;
                      dummyCompound.paddingRight = parent5.paddingRight || 0;
                      dummyCompound.paddingBottom = parent5.paddingBottom || 0;
                      dummyCompound.paddingTop = parent5.paddingTop || 0;
                      self2.idToDummyNode[dummyCompoundId] = dummyCompound;
                      var dummyParentGraph = self2.getGraphManager().add(self2.newGraph(), dummyCompound);
                      var parentGraph = parent5.getChild();
                      parentGraph.add(dummyCompound);
                      for (var i3 = 0; i3 < tempMemberGroups[p_id2].length; i3++) {
                        var node2 = tempMemberGroups[p_id2][i3];
                        parentGraph.remove(node2);
                        dummyParentGraph.add(node2);
                      }
                    }
                  });
                };
                CoSELayout.prototype.clearCompounds = function() {
                  var childGraphMap = {};
                  var idToNode = {};
                  this.performDFSOnCompounds();
                  for (var i2 = 0; i2 < this.compoundOrder.length; i2++) {
                    idToNode[this.compoundOrder[i2].id] = this.compoundOrder[i2];
                    childGraphMap[this.compoundOrder[i2].id] = [].concat(this.compoundOrder[i2].getChild().getNodes());
                    this.graphManager.remove(this.compoundOrder[i2].getChild());
                    this.compoundOrder[i2].child = null;
                  }
                  this.graphManager.resetAllNodes();
                  this.tileCompoundMembers(childGraphMap, idToNode);
                };
                CoSELayout.prototype.clearZeroDegreeMembers = function() {
                  var self2 = this;
                  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];
                  Object.keys(this.memberGroups).forEach(function(id2) {
                    var compoundNode = self2.idToDummyNode[id2];
                    tiledZeroDegreePack[id2] = self2.tileNodes(self2.memberGroups[id2], compoundNode.paddingLeft + compoundNode.paddingRight);
                    compoundNode.rect.width = tiledZeroDegreePack[id2].width;
                    compoundNode.rect.height = tiledZeroDegreePack[id2].height;
                    compoundNode.setCenter(tiledZeroDegreePack[id2].centerX, tiledZeroDegreePack[id2].centerY);
                    compoundNode.labelMarginLeft = 0;
                    compoundNode.labelMarginTop = 0;
                    if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {
                      var width2 = compoundNode.rect.width;
                      var height2 = compoundNode.rect.height;
                      if (compoundNode.labelWidth) {
                        if (compoundNode.labelPosHorizontal == "left") {
                          compoundNode.rect.x -= compoundNode.labelWidth;
                          compoundNode.setWidth(width2 + compoundNode.labelWidth);
                          compoundNode.labelMarginLeft = compoundNode.labelWidth;
                        } else if (compoundNode.labelPosHorizontal == "center" && compoundNode.labelWidth > width2) {
                          compoundNode.rect.x -= (compoundNode.labelWidth - width2) / 2;
                          compoundNode.setWidth(compoundNode.labelWidth);
                          compoundNode.labelMarginLeft = (compoundNode.labelWidth - width2) / 2;
                        } else if (compoundNode.labelPosHorizontal == "right") {
                          compoundNode.setWidth(width2 + compoundNode.labelWidth);
                        }
                      }
                      if (compoundNode.labelHeight) {
                        if (compoundNode.labelPosVertical == "top") {
                          compoundNode.rect.y -= compoundNode.labelHeight;
                          compoundNode.setHeight(height2 + compoundNode.labelHeight);
                          compoundNode.labelMarginTop = compoundNode.labelHeight;
                        } else if (compoundNode.labelPosVertical == "center" && compoundNode.labelHeight > height2) {
                          compoundNode.rect.y -= (compoundNode.labelHeight - height2) / 2;
                          compoundNode.setHeight(compoundNode.labelHeight);
                          compoundNode.labelMarginTop = (compoundNode.labelHeight - height2) / 2;
                        } else if (compoundNode.labelPosVertical == "bottom") {
                          compoundNode.setHeight(height2 + compoundNode.labelHeight);
                        }
                      }
                    }
                  });
                };
                CoSELayout.prototype.repopulateCompounds = function() {
                  for (var i2 = this.compoundOrder.length - 1; i2 >= 0; i2--) {
                    var lCompoundNode = this.compoundOrder[i2];
                    var id2 = lCompoundNode.id;
                    var horizontalMargin = lCompoundNode.paddingLeft;
                    var verticalMargin = lCompoundNode.paddingTop;
                    var labelMarginLeft = lCompoundNode.labelMarginLeft;
                    var labelMarginTop = lCompoundNode.labelMarginTop;
                    this.adjustLocations(this.tiledMemberPack[id2], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);
                  }
                };
                CoSELayout.prototype.repopulateZeroDegreeMembers = function() {
                  var self2 = this;
                  var tiledPack = this.tiledZeroDegreePack;
                  Object.keys(tiledPack).forEach(function(id2) {
                    var compoundNode = self2.idToDummyNode[id2];
                    var horizontalMargin = compoundNode.paddingLeft;
                    var verticalMargin = compoundNode.paddingTop;
                    var labelMarginLeft = compoundNode.labelMarginLeft;
                    var labelMarginTop = compoundNode.labelMarginTop;
                    self2.adjustLocations(tiledPack[id2], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);
                  });
                };
                CoSELayout.prototype.getToBeTiled = function(node) {
                  var id2 = node.id;
                  if (this.toBeTiled[id2] != null) {
                    return this.toBeTiled[id2];
                  }
                  var childGraph = node.getChild();
                  if (childGraph == null) {
                    this.toBeTiled[id2] = false;
                    return false;
                  }
                  var children2 = childGraph.getNodes();
                  for (var i2 = 0; i2 < children2.length; i2++) {
                    var theChild = children2[i2];
                    if (this.getNodeDegree(theChild) > 0) {
                      this.toBeTiled[id2] = false;
                      return false;
                    }
                    if (theChild.getChild() == null) {
                      this.toBeTiled[theChild.id] = false;
                      continue;
                    }
                    if (!this.getToBeTiled(theChild)) {
                      this.toBeTiled[id2] = false;
                      return false;
                    }
                  }
                  this.toBeTiled[id2] = true;
                  return true;
                };
                CoSELayout.prototype.getNodeDegree = function(node) {
                  node.id;
                  var edges3 = node.getEdges();
                  var degree = 0;
                  for (var i2 = 0; i2 < edges3.length; i2++) {
                    var edge = edges3[i2];
                    if (edge.getSource().id !== edge.getTarget().id) {
                      degree = degree + 1;
                    }
                  }
                  return degree;
                };
                CoSELayout.prototype.getNodeDegreeWithChildren = function(node) {
                  var degree = this.getNodeDegree(node);
                  if (node.getChild() == null) {
                    return degree;
                  }
                  var children2 = node.getChild().getNodes();
                  for (var i2 = 0; i2 < children2.length; i2++) {
                    var child = children2[i2];
                    degree += this.getNodeDegreeWithChildren(child);
                  }
                  return degree;
                };
                CoSELayout.prototype.performDFSOnCompounds = function() {
                  this.compoundOrder = [];
                  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());
                };
                CoSELayout.prototype.fillCompexOrderByDFS = function(children2) {
                  for (var i2 = 0; i2 < children2.length; i2++) {
                    var child = children2[i2];
                    if (child.getChild() != null) {
                      this.fillCompexOrderByDFS(child.getChild().getNodes());
                    }
                    if (this.getToBeTiled(child)) {
                      this.compoundOrder.push(child);
                    }
                  }
                };
                CoSELayout.prototype.adjustLocations = function(organization, x2, y2, compoundHorizontalMargin, compoundVerticalMargin, compoundLabelMarginLeft, compoundLabelMarginTop) {
                  x2 += compoundHorizontalMargin + compoundLabelMarginLeft;
                  y2 += compoundVerticalMargin + compoundLabelMarginTop;
                  var left = x2;
                  for (var i2 = 0; i2 < organization.rows.length; i2++) {
                    var row = organization.rows[i2];
                    x2 = left;
                    var maxHeight = 0;
                    for (var j2 = 0; j2 < row.length; j2++) {
                      var lnode = row[j2];
                      lnode.rect.x = x2;
                      lnode.rect.y = y2;
                      x2 += lnode.rect.width + organization.horizontalPadding;
                      if (lnode.rect.height > maxHeight)
                        maxHeight = lnode.rect.height;
                    }
                    y2 += maxHeight + organization.verticalPadding;
                  }
                };
                CoSELayout.prototype.tileCompoundMembers = function(childGraphMap, idToNode) {
                  var self2 = this;
                  this.tiledMemberPack = [];
                  Object.keys(childGraphMap).forEach(function(id2) {
                    var compoundNode = idToNode[id2];
                    self2.tiledMemberPack[id2] = self2.tileNodes(childGraphMap[id2], compoundNode.paddingLeft + compoundNode.paddingRight);
                    compoundNode.rect.width = self2.tiledMemberPack[id2].width;
                    compoundNode.rect.height = self2.tiledMemberPack[id2].height;
                    compoundNode.setCenter(self2.tiledMemberPack[id2].centerX, self2.tiledMemberPack[id2].centerY);
                    compoundNode.labelMarginLeft = 0;
                    compoundNode.labelMarginTop = 0;
                    if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {
                      var width2 = compoundNode.rect.width;
                      var height2 = compoundNode.rect.height;
                      if (compoundNode.labelWidth) {
                        if (compoundNode.labelPosHorizontal == "left") {
                          compoundNode.rect.x -= compoundNode.labelWidth;
                          compoundNode.setWidth(width2 + compoundNode.labelWidth);
                          compoundNode.labelMarginLeft = compoundNode.labelWidth;
                        } else if (compoundNode.labelPosHorizontal == "center" && compoundNode.labelWidth > width2) {
                          compoundNode.rect.x -= (compoundNode.labelWidth - width2) / 2;
                          compoundNode.setWidth(compoundNode.labelWidth);
                          compoundNode.labelMarginLeft = (compoundNode.labelWidth - width2) / 2;
                        } else if (compoundNode.labelPosHorizontal == "right") {
                          compoundNode.setWidth(width2 + compoundNode.labelWidth);
                        }
                      }
                      if (compoundNode.labelHeight) {
                        if (compoundNode.labelPosVertical == "top") {
                          compoundNode.rect.y -= compoundNode.labelHeight;
                          compoundNode.setHeight(height2 + compoundNode.labelHeight);
                          compoundNode.labelMarginTop = compoundNode.labelHeight;
                        } else if (compoundNode.labelPosVertical == "center" && compoundNode.labelHeight > height2) {
                          compoundNode.rect.y -= (compoundNode.labelHeight - height2) / 2;
                          compoundNode.setHeight(compoundNode.labelHeight);
                          compoundNode.labelMarginTop = (compoundNode.labelHeight - height2) / 2;
                        } else if (compoundNode.labelPosVertical == "bottom") {
                          compoundNode.setHeight(height2 + compoundNode.labelHeight);
                        }
                      }
                    }
                  });
                };
                CoSELayout.prototype.tileNodes = function(nodes3, minWidth) {
                  var horizontalOrg = this.tileNodesByFavoringDim(nodes3, minWidth, true);
                  var verticalOrg = this.tileNodesByFavoringDim(nodes3, minWidth, false);
                  var horizontalRatio = this.getOrgRatio(horizontalOrg);
                  var verticalRatio = this.getOrgRatio(verticalOrg);
                  var bestOrg;
                  if (verticalRatio < horizontalRatio) {
                    bestOrg = verticalOrg;
                  } else {
                    bestOrg = horizontalOrg;
                  }
                  return bestOrg;
                };
                CoSELayout.prototype.getOrgRatio = function(organization) {
                  var width2 = organization.width;
                  var height2 = organization.height;
                  var ratio = width2 / height2;
                  if (ratio < 1) {
                    ratio = 1 / ratio;
                  }
                  return ratio;
                };
                CoSELayout.prototype.calcIdealRowWidth = function(members, favorHorizontalDim) {
                  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
                  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
                  var membersSize = members.length;
                  var totalWidth = 0;
                  var totalHeight = 0;
                  var maxWidth = 0;
                  members.forEach(function(node) {
                    totalWidth += node.getWidth();
                    totalHeight += node.getHeight();
                    if (node.getWidth() > maxWidth) {
                      maxWidth = node.getWidth();
                    }
                  });
                  var averageWidth = totalWidth / membersSize;
                  var averageHeight = totalHeight / membersSize;
                  var delta = Math.pow(verticalPadding - horizontalPadding, 2) + 4 * (averageWidth + horizontalPadding) * (averageHeight + verticalPadding) * membersSize;
                  var horizontalCountDouble = (horizontalPadding - verticalPadding + Math.sqrt(delta)) / (2 * (averageWidth + horizontalPadding));
                  var horizontalCount;
                  if (favorHorizontalDim) {
                    horizontalCount = Math.ceil(horizontalCountDouble);
                    if (horizontalCount == horizontalCountDouble) {
                      horizontalCount++;
                    }
                  } else {
                    horizontalCount = Math.floor(horizontalCountDouble);
                  }
                  var idealWidth = horizontalCount * (averageWidth + horizontalPadding) - horizontalPadding;
                  if (maxWidth > idealWidth) {
                    idealWidth = maxWidth;
                  }
                  idealWidth += horizontalPadding * 2;
                  return idealWidth;
                };
                CoSELayout.prototype.tileNodesByFavoringDim = function(nodes3, minWidth, favorHorizontalDim) {
                  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
                  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
                  var tilingCompareBy = CoSEConstants.TILING_COMPARE_BY;
                  var organization = {
                    rows: [],
                    rowWidth: [],
                    rowHeight: [],
                    width: 0,
                    height: minWidth,
                    // assume minHeight equals to minWidth
                    verticalPadding,
                    horizontalPadding,
                    centerX: 0,
                    centerY: 0
                  };
                  if (tilingCompareBy) {
                    organization.idealRowWidth = this.calcIdealRowWidth(nodes3, favorHorizontalDim);
                  }
                  var getNodeArea = function getNodeArea2(n2) {
                    return n2.rect.width * n2.rect.height;
                  };
                  var areaCompareFcn = function areaCompareFcn2(n1, n2) {
                    return getNodeArea(n2) - getNodeArea(n1);
                  };
                  nodes3.sort(function(n1, n2) {
                    var cmpBy = areaCompareFcn;
                    if (organization.idealRowWidth) {
                      cmpBy = tilingCompareBy;
                      return cmpBy(n1.id, n2.id);
                    }
                    return cmpBy(n1, n2);
                  });
                  var sumCenterX = 0;
                  var sumCenterY = 0;
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    var lNode = nodes3[i2];
                    sumCenterX += lNode.getCenterX();
                    sumCenterY += lNode.getCenterY();
                  }
                  organization.centerX = sumCenterX / nodes3.length;
                  organization.centerY = sumCenterY / nodes3.length;
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    var lNode = nodes3[i2];
                    if (organization.rows.length == 0) {
                      this.insertNodeToRow(organization, lNode, 0, minWidth);
                    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {
                      var rowIndex = organization.rows.length - 1;
                      if (!organization.idealRowWidth) {
                        rowIndex = this.getShortestRowIndex(organization);
                      }
                      this.insertNodeToRow(organization, lNode, rowIndex, minWidth);
                    } else {
                      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);
                    }
                    this.shiftToLastRow(organization);
                  }
                  return organization;
                };
                CoSELayout.prototype.insertNodeToRow = function(organization, node, rowIndex, minWidth) {
                  var minCompoundSize = minWidth;
                  if (rowIndex == organization.rows.length) {
                    var secondDimension = [];
                    organization.rows.push(secondDimension);
                    organization.rowWidth.push(minCompoundSize);
                    organization.rowHeight.push(0);
                  }
                  var w2 = organization.rowWidth[rowIndex] + node.rect.width;
                  if (organization.rows[rowIndex].length > 0) {
                    w2 += organization.horizontalPadding;
                  }
                  organization.rowWidth[rowIndex] = w2;
                  if (organization.width < w2) {
                    organization.width = w2;
                  }
                  var h2 = node.rect.height;
                  if (rowIndex > 0)
                    h2 += organization.verticalPadding;
                  var extraHeight = 0;
                  if (h2 > organization.rowHeight[rowIndex]) {
                    extraHeight = organization.rowHeight[rowIndex];
                    organization.rowHeight[rowIndex] = h2;
                    extraHeight = organization.rowHeight[rowIndex] - extraHeight;
                  }
                  organization.height += extraHeight;
                  organization.rows[rowIndex].push(node);
                };
                CoSELayout.prototype.getShortestRowIndex = function(organization) {
                  var r2 = -1;
                  var min4 = Number.MAX_VALUE;
                  for (var i2 = 0; i2 < organization.rows.length; i2++) {
                    if (organization.rowWidth[i2] < min4) {
                      r2 = i2;
                      min4 = organization.rowWidth[i2];
                    }
                  }
                  return r2;
                };
                CoSELayout.prototype.getLongestRowIndex = function(organization) {
                  var r2 = -1;
                  var max5 = Number.MIN_VALUE;
                  for (var i2 = 0; i2 < organization.rows.length; i2++) {
                    if (organization.rowWidth[i2] > max5) {
                      r2 = i2;
                      max5 = organization.rowWidth[i2];
                    }
                  }
                  return r2;
                };
                CoSELayout.prototype.canAddHorizontal = function(organization, extraWidth, extraHeight) {
                  if (organization.idealRowWidth) {
                    var lastRowIndex = organization.rows.length - 1;
                    var lastRowWidth = organization.rowWidth[lastRowIndex];
                    return lastRowWidth + extraWidth + organization.horizontalPadding <= organization.idealRowWidth;
                  }
                  var sri = this.getShortestRowIndex(organization);
                  if (sri < 0) {
                    return true;
                  }
                  var min4 = organization.rowWidth[sri];
                  if (min4 + organization.horizontalPadding + extraWidth <= organization.width)
                    return true;
                  var hDiff = 0;
                  if (organization.rowHeight[sri] < extraHeight) {
                    if (sri > 0)
                      hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];
                  }
                  var add_to_row_ratio;
                  if (organization.width - min4 >= extraWidth + organization.horizontalPadding) {
                    add_to_row_ratio = (organization.height + hDiff) / (min4 + extraWidth + organization.horizontalPadding);
                  } else {
                    add_to_row_ratio = (organization.height + hDiff) / organization.width;
                  }
                  hDiff = extraHeight + organization.verticalPadding;
                  var add_new_row_ratio;
                  if (organization.width < extraWidth) {
                    add_new_row_ratio = (organization.height + hDiff) / extraWidth;
                  } else {
                    add_new_row_ratio = (organization.height + hDiff) / organization.width;
                  }
                  if (add_new_row_ratio < 1)
                    add_new_row_ratio = 1 / add_new_row_ratio;
                  if (add_to_row_ratio < 1)
                    add_to_row_ratio = 1 / add_to_row_ratio;
                  return add_to_row_ratio < add_new_row_ratio;
                };
                CoSELayout.prototype.shiftToLastRow = function(organization) {
                  var longest = this.getLongestRowIndex(organization);
                  var last2 = organization.rowWidth.length - 1;
                  var row = organization.rows[longest];
                  var node = row[row.length - 1];
                  var diff2 = node.width + organization.horizontalPadding;
                  if (organization.width - organization.rowWidth[last2] > diff2 && longest != last2) {
                    row.splice(-1, 1);
                    organization.rows[last2].push(node);
                    organization.rowWidth[longest] = organization.rowWidth[longest] - diff2;
                    organization.rowWidth[last2] = organization.rowWidth[last2] + diff2;
                    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];
                    var maxHeight = Number.MIN_VALUE;
                    for (var i2 = 0; i2 < row.length; i2++) {
                      if (row[i2].height > maxHeight)
                        maxHeight = row[i2].height;
                    }
                    if (longest > 0)
                      maxHeight += organization.verticalPadding;
                    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last2];
                    organization.rowHeight[longest] = maxHeight;
                    if (organization.rowHeight[last2] < node.height + organization.verticalPadding)
                      organization.rowHeight[last2] = node.height + organization.verticalPadding;
                    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last2];
                    organization.height += finalTotal - prevTotal;
                    this.shiftToLastRow(organization);
                  }
                };
                CoSELayout.prototype.tilingPreLayout = function() {
                  if (CoSEConstants.TILE) {
                    this.groupZeroDegreeMembers();
                    this.clearCompounds();
                    this.clearZeroDegreeMembers();
                  }
                };
                CoSELayout.prototype.tilingPostLayout = function() {
                  if (CoSEConstants.TILE) {
                    this.repopulateZeroDegreeMembers();
                    this.repopulateCompounds();
                  }
                };
                CoSELayout.prototype.reduceTrees = function() {
                  var prunedNodesAll = [];
                  var containsLeaf = true;
                  var node;
                  while (containsLeaf) {
                    var allNodes = this.graphManager.getAllNodes();
                    var prunedNodesInStepTemp = [];
                    containsLeaf = false;
                    for (var i2 = 0; i2 < allNodes.length; i2++) {
                      node = allNodes[i2];
                      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {
                        if (CoSEConstants.PURE_INCREMENTAL) {
                          var otherEnd = node.getEdges()[0].getOtherEnd(node);
                          var relativePosition2 = new DimensionD2(node.getCenterX() - otherEnd.getCenterX(), node.getCenterY() - otherEnd.getCenterY());
                          prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner(), relativePosition2]);
                        } else {
                          prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);
                        }
                        containsLeaf = true;
                      }
                    }
                    if (containsLeaf == true) {
                      var prunedNodesInStep = [];
                      for (var j2 = 0; j2 < prunedNodesInStepTemp.length; j2++) {
                        if (prunedNodesInStepTemp[j2][0].getEdges().length == 1) {
                          prunedNodesInStep.push(prunedNodesInStepTemp[j2]);
                          prunedNodesInStepTemp[j2][0].getOwner().remove(prunedNodesInStepTemp[j2][0]);
                        }
                      }
                      prunedNodesAll.push(prunedNodesInStep);
                      this.graphManager.resetAllNodes();
                      this.graphManager.resetAllEdges();
                    }
                  }
                  this.prunedNodesAll = prunedNodesAll;
                };
                CoSELayout.prototype.growTree = function(prunedNodesAll) {
                  var lengthOfPrunedNodesInStep = prunedNodesAll.length;
                  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];
                  var nodeData;
                  for (var i2 = 0; i2 < prunedNodesInStep.length; i2++) {
                    nodeData = prunedNodesInStep[i2];
                    this.findPlaceforPrunedNode(nodeData);
                    nodeData[2].add(nodeData[0]);
                    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);
                  }
                  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);
                  this.graphManager.resetAllNodes();
                  this.graphManager.resetAllEdges();
                };
                CoSELayout.prototype.findPlaceforPrunedNode = function(nodeData) {
                  var gridForPrunedNode;
                  var nodeToConnect;
                  var prunedNode = nodeData[0];
                  if (prunedNode == nodeData[1].source) {
                    nodeToConnect = nodeData[1].target;
                  } else {
                    nodeToConnect = nodeData[1].source;
                  }
                  if (CoSEConstants.PURE_INCREMENTAL) {
                    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeData[3].getWidth(), nodeToConnect.getCenterY() + nodeData[3].getHeight());
                  } else {
                    var startGridX = nodeToConnect.startX;
                    var finishGridX = nodeToConnect.finishX;
                    var startGridY = nodeToConnect.startY;
                    var finishGridY = nodeToConnect.finishY;
                    var upNodeCount = 0;
                    var downNodeCount = 0;
                    var rightNodeCount = 0;
                    var leftNodeCount = 0;
                    var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];
                    if (startGridY > 0) {
                      for (var i2 = startGridX; i2 <= finishGridX; i2++) {
                        controlRegions[0] += this.grid[i2][startGridY - 1].length + this.grid[i2][startGridY].length - 1;
                      }
                    }
                    if (finishGridX < this.grid.length - 1) {
                      for (var i2 = startGridY; i2 <= finishGridY; i2++) {
                        controlRegions[1] += this.grid[finishGridX + 1][i2].length + this.grid[finishGridX][i2].length - 1;
                      }
                    }
                    if (finishGridY < this.grid[0].length - 1) {
                      for (var i2 = startGridX; i2 <= finishGridX; i2++) {
                        controlRegions[2] += this.grid[i2][finishGridY + 1].length + this.grid[i2][finishGridY].length - 1;
                      }
                    }
                    if (startGridX > 0) {
                      for (var i2 = startGridY; i2 <= finishGridY; i2++) {
                        controlRegions[3] += this.grid[startGridX - 1][i2].length + this.grid[startGridX][i2].length - 1;
                      }
                    }
                    var min4 = Integer.MAX_VALUE;
                    var minCount;
                    var minIndex;
                    for (var j2 = 0; j2 < controlRegions.length; j2++) {
                      if (controlRegions[j2] < min4) {
                        min4 = controlRegions[j2];
                        minCount = 1;
                        minIndex = j2;
                      } else if (controlRegions[j2] == min4) {
                        minCount++;
                      }
                    }
                    if (minCount == 3 && min4 == 0) {
                      if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {
                        gridForPrunedNode = 1;
                      } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {
                        gridForPrunedNode = 0;
                      } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                        gridForPrunedNode = 3;
                      } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                        gridForPrunedNode = 2;
                      }
                    } else if (minCount == 2 && min4 == 0) {
                      var random = Math.floor(Math.random() * 2);
                      if (controlRegions[0] == 0 && controlRegions[1] == 0) {
                        if (random == 0) {
                          gridForPrunedNode = 0;
                        } else {
                          gridForPrunedNode = 1;
                        }
                      } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {
                        if (random == 0) {
                          gridForPrunedNode = 0;
                        } else {
                          gridForPrunedNode = 2;
                        }
                      } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {
                        if (random == 0) {
                          gridForPrunedNode = 0;
                        } else {
                          gridForPrunedNode = 3;
                        }
                      } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {
                        if (random == 0) {
                          gridForPrunedNode = 1;
                        } else {
                          gridForPrunedNode = 2;
                        }
                      } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {
                        if (random == 0) {
                          gridForPrunedNode = 1;
                        } else {
                          gridForPrunedNode = 3;
                        }
                      } else {
                        if (random == 0) {
                          gridForPrunedNode = 2;
                        } else {
                          gridForPrunedNode = 3;
                        }
                      }
                    } else if (minCount == 4 && min4 == 0) {
                      var random = Math.floor(Math.random() * 4);
                      gridForPrunedNode = random;
                    } else {
                      gridForPrunedNode = minIndex;
                    }
                    if (gridForPrunedNode == 0) {
                      prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);
                    } else if (gridForPrunedNode == 1) {
                      prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
                    } else if (gridForPrunedNode == 2) {
                      prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);
                    } else {
                      prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
                    }
                  }
                };
                module2.exports = CoSELayout;
              }
            ),
            /***/
            991: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                var FDLayoutNode = __webpack_require__2(551).FDLayoutNode;
                var IMath = __webpack_require__2(551).IMath;
                function CoSENode(gm, loc, size3, vNode) {
                  FDLayoutNode.call(this, gm, loc, size3, vNode);
                }
                CoSENode.prototype = Object.create(FDLayoutNode.prototype);
                for (var prop in FDLayoutNode) {
                  CoSENode[prop] = FDLayoutNode[prop];
                }
                CoSENode.prototype.calculateDisplacement = function() {
                  var layout4 = this.graphManager.getLayout();
                  if (this.getChild() != null && this.fixedNodeWeight) {
                    this.displacementX += layout4.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.fixedNodeWeight;
                    this.displacementY += layout4.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.fixedNodeWeight;
                  } else {
                    this.displacementX += layout4.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;
                    this.displacementY += layout4.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;
                  }
                  if (Math.abs(this.displacementX) > layout4.coolingFactor * layout4.maxNodeDisplacement) {
                    this.displacementX = layout4.coolingFactor * layout4.maxNodeDisplacement * IMath.sign(this.displacementX);
                  }
                  if (Math.abs(this.displacementY) > layout4.coolingFactor * layout4.maxNodeDisplacement) {
                    this.displacementY = layout4.coolingFactor * layout4.maxNodeDisplacement * IMath.sign(this.displacementY);
                  }
                  if (this.child && this.child.getNodes().length > 0) {
                    this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
                  }
                };
                CoSENode.prototype.propogateDisplacementToChildren = function(dX, dY) {
                  var nodes3 = this.getChild().getNodes();
                  var node;
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    node = nodes3[i2];
                    if (node.getChild() == null) {
                      node.displacementX += dX;
                      node.displacementY += dY;
                    } else {
                      node.propogateDisplacementToChildren(dX, dY);
                    }
                  }
                };
                CoSENode.prototype.move = function() {
                  var layout4 = this.graphManager.getLayout();
                  if (this.child == null || this.child.getNodes().length == 0) {
                    this.moveBy(this.displacementX, this.displacementY);
                    layout4.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
                  }
                  this.springForceX = 0;
                  this.springForceY = 0;
                  this.repulsionForceX = 0;
                  this.repulsionForceY = 0;
                  this.gravitationForceX = 0;
                  this.gravitationForceY = 0;
                  this.displacementX = 0;
                  this.displacementY = 0;
                };
                CoSENode.prototype.setPred1 = function(pred12) {
                  this.pred1 = pred12;
                };
                CoSENode.prototype.getPred1 = function() {
                  return pred1;
                };
                CoSENode.prototype.getPred2 = function() {
                  return pred2;
                };
                CoSENode.prototype.setNext = function(next2) {
                  this.next = next2;
                };
                CoSENode.prototype.getNext = function() {
                  return next;
                };
                CoSENode.prototype.setProcessed = function(processed2) {
                  this.processed = processed2;
                };
                CoSENode.prototype.isProcessed = function() {
                  return processed;
                };
                module2.exports = CoSENode;
              }
            ),
            /***/
            902: (
              /***/
              (module2, __unused_webpack_exports, __webpack_require__2) => {
                function _toConsumableArray(arr) {
                  if (Array.isArray(arr)) {
                    for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
                      arr2[i2] = arr[i2];
                    }
                    return arr2;
                  } else {
                    return Array.from(arr);
                  }
                }
                var CoSEConstants = __webpack_require__2(806);
                var LinkedList = __webpack_require__2(551).LinkedList;
                var Matrix2 = __webpack_require__2(551).Matrix;
                var SVD = __webpack_require__2(551).SVD;
                function ConstraintHandler() {
                }
                ConstraintHandler.handleConstraints = function(layout4) {
                  var constraints = {};
                  constraints.fixedNodeConstraint = layout4.constraints.fixedNodeConstraint;
                  constraints.alignmentConstraint = layout4.constraints.alignmentConstraint;
                  constraints.relativePlacementConstraint = layout4.constraints.relativePlacementConstraint;
                  var idToNodeMap = /* @__PURE__ */ new Map();
                  var nodeIndexes = /* @__PURE__ */ new Map();
                  var xCoords = [];
                  var yCoords = [];
                  var allNodes = layout4.getAllNodes();
                  var index = 0;
                  for (var i2 = 0; i2 < allNodes.length; i2++) {
                    var node = allNodes[i2];
                    if (node.getChild() == null) {
                      nodeIndexes.set(node.id, index++);
                      xCoords.push(node.getCenterX());
                      yCoords.push(node.getCenterY());
                      idToNodeMap.set(node.id, node);
                    }
                  }
                  if (constraints.relativePlacementConstraint) {
                    constraints.relativePlacementConstraint.forEach(function(constraint) {
                      if (!constraint.gap && constraint.gap != 0) {
                        if (constraint.left) {
                          constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.left).getWidth() / 2 + idToNodeMap.get(constraint.right).getWidth() / 2;
                        } else {
                          constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.top).getHeight() / 2 + idToNodeMap.get(constraint.bottom).getHeight() / 2;
                        }
                      }
                    });
                  }
                  var calculatePositionDiff = function calculatePositionDiff2(pos1, pos2) {
                    return { x: pos1.x - pos2.x, y: pos1.y - pos2.y };
                  };
                  var calculateAvgPosition = function calculateAvgPosition2(nodeIdSet) {
                    var xPosSum = 0;
                    var yPosSum = 0;
                    nodeIdSet.forEach(function(nodeId) {
                      xPosSum += xCoords[nodeIndexes.get(nodeId)];
                      yPosSum += yCoords[nodeIndexes.get(nodeId)];
                    });
                    return { x: xPosSum / nodeIdSet.size, y: yPosSum / nodeIdSet.size };
                  };
                  var findAppropriatePositionForRelativePlacement = function findAppropriatePositionForRelativePlacement2(graph2, direction, fixedNodes2, dummyPositions, componentSources) {
                    function setUnion(setA, setB) {
                      var union = new Set(setA);
                      var _iteratorNormalCompletion = true;
                      var _didIteratorError = false;
                      var _iteratorError = void 0;
                      try {
                        for (var _iterator = setB[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                          var elem = _step.value;
                          union.add(elem);
                        }
                      } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                          }
                        } finally {
                          if (_didIteratorError) {
                            throw _iteratorError;
                          }
                        }
                      }
                      return union;
                    }
                    var inDegrees = /* @__PURE__ */ new Map();
                    graph2.forEach(function(value, key) {
                      inDegrees.set(key, 0);
                    });
                    graph2.forEach(function(value, key) {
                      value.forEach(function(adjacent) {
                        inDegrees.set(adjacent.id, inDegrees.get(adjacent.id) + 1);
                      });
                    });
                    var positionMap = /* @__PURE__ */ new Map();
                    var pastMap = /* @__PURE__ */ new Map();
                    var queue = new LinkedList();
                    inDegrees.forEach(function(value, key) {
                      if (value == 0) {
                        queue.push(key);
                        if (!fixedNodes2) {
                          if (direction == "horizontal") {
                            positionMap.set(key, nodeIndexes.has(key) ? xCoords[nodeIndexes.get(key)] : dummyPositions.get(key));
                          } else {
                            positionMap.set(key, nodeIndexes.has(key) ? yCoords[nodeIndexes.get(key)] : dummyPositions.get(key));
                          }
                        }
                      } else {
                        positionMap.set(key, Number.NEGATIVE_INFINITY);
                      }
                      if (fixedNodes2) {
                        pastMap.set(key, /* @__PURE__ */ new Set([key]));
                      }
                    });
                    if (fixedNodes2) {
                      componentSources.forEach(function(component2) {
                        var fixedIds = [];
                        component2.forEach(function(nodeId) {
                          if (fixedNodes2.has(nodeId)) {
                            fixedIds.push(nodeId);
                          }
                        });
                        if (fixedIds.length > 0) {
                          var position3 = 0;
                          fixedIds.forEach(function(fixedId) {
                            if (direction == "horizontal") {
                              positionMap.set(fixedId, nodeIndexes.has(fixedId) ? xCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));
                              position3 += positionMap.get(fixedId);
                            } else {
                              positionMap.set(fixedId, nodeIndexes.has(fixedId) ? yCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));
                              position3 += positionMap.get(fixedId);
                            }
                          });
                          position3 = position3 / fixedIds.length;
                          component2.forEach(function(nodeId) {
                            if (!fixedNodes2.has(nodeId)) {
                              positionMap.set(nodeId, position3);
                            }
                          });
                        } else {
                          var _position = 0;
                          component2.forEach(function(nodeId) {
                            if (direction == "horizontal") {
                              _position += nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                            } else {
                              _position += nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                            }
                          });
                          _position = _position / component2.length;
                          component2.forEach(function(nodeId) {
                            positionMap.set(nodeId, _position);
                          });
                        }
                      });
                    }
                    var _loop = function _loop2() {
                      var currentNode = queue.shift();
                      var neighbors = graph2.get(currentNode);
                      neighbors.forEach(function(neighbor) {
                        if (positionMap.get(neighbor.id) < positionMap.get(currentNode) + neighbor.gap) {
                          if (fixedNodes2 && fixedNodes2.has(neighbor.id)) {
                            var fixedPosition = void 0;
                            if (direction == "horizontal") {
                              fixedPosition = nodeIndexes.has(neighbor.id) ? xCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);
                            } else {
                              fixedPosition = nodeIndexes.has(neighbor.id) ? yCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);
                            }
                            positionMap.set(neighbor.id, fixedPosition);
                            if (fixedPosition < positionMap.get(currentNode) + neighbor.gap) {
                              var diff2 = positionMap.get(currentNode) + neighbor.gap - fixedPosition;
                              pastMap.get(currentNode).forEach(function(nodeId) {
                                positionMap.set(nodeId, positionMap.get(nodeId) - diff2);
                              });
                            }
                          } else {
                            positionMap.set(neighbor.id, positionMap.get(currentNode) + neighbor.gap);
                          }
                        }
                        inDegrees.set(neighbor.id, inDegrees.get(neighbor.id) - 1);
                        if (inDegrees.get(neighbor.id) == 0) {
                          queue.push(neighbor.id);
                        }
                        if (fixedNodes2) {
                          pastMap.set(neighbor.id, setUnion(pastMap.get(currentNode), pastMap.get(neighbor.id)));
                        }
                      });
                    };
                    while (queue.length != 0) {
                      _loop();
                    }
                    if (fixedNodes2) {
                      var sinkNodes = /* @__PURE__ */ new Set();
                      graph2.forEach(function(value, key) {
                        if (value.length == 0) {
                          sinkNodes.add(key);
                        }
                      });
                      var _components = [];
                      pastMap.forEach(function(value, key) {
                        if (sinkNodes.has(key)) {
                          var isFixedComponent = false;
                          var _iteratorNormalCompletion2 = true;
                          var _didIteratorError2 = false;
                          var _iteratorError2 = void 0;
                          try {
                            for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                              var nodeId = _step2.value;
                              if (fixedNodes2.has(nodeId)) {
                                isFixedComponent = true;
                              }
                            }
                          } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                          } finally {
                            try {
                              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                              }
                            } finally {
                              if (_didIteratorError2) {
                                throw _iteratorError2;
                              }
                            }
                          }
                          if (!isFixedComponent) {
                            var isExist = false;
                            var existAt = void 0;
                            _components.forEach(function(component2, index2) {
                              if (component2.has([].concat(_toConsumableArray(value))[0])) {
                                isExist = true;
                                existAt = index2;
                              }
                            });
                            if (!isExist) {
                              _components.push(new Set(value));
                            } else {
                              value.forEach(function(ele) {
                                _components[existAt].add(ele);
                              });
                            }
                          }
                        }
                      });
                      _components.forEach(function(component2, index2) {
                        var minBefore = Number.POSITIVE_INFINITY;
                        var minAfter = Number.POSITIVE_INFINITY;
                        var maxBefore = Number.NEGATIVE_INFINITY;
                        var maxAfter = Number.NEGATIVE_INFINITY;
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = void 0;
                        try {
                          for (var _iterator3 = component2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var nodeId = _step3.value;
                            var posBefore = void 0;
                            if (direction == "horizontal") {
                              posBefore = nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                            } else {
                              posBefore = nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                            }
                            var posAfter = positionMap.get(nodeId);
                            if (posBefore < minBefore) {
                              minBefore = posBefore;
                            }
                            if (posBefore > maxBefore) {
                              maxBefore = posBefore;
                            }
                            if (posAfter < minAfter) {
                              minAfter = posAfter;
                            }
                            if (posAfter > maxAfter) {
                              maxAfter = posAfter;
                            }
                          }
                        } catch (err) {
                          _didIteratorError3 = true;
                          _iteratorError3 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                              _iterator3.return();
                            }
                          } finally {
                            if (_didIteratorError3) {
                              throw _iteratorError3;
                            }
                          }
                        }
                        var diff2 = (minBefore + maxBefore) / 2 - (minAfter + maxAfter) / 2;
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = void 0;
                        try {
                          for (var _iterator4 = component2[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var _nodeId = _step4.value;
                            positionMap.set(_nodeId, positionMap.get(_nodeId) + diff2);
                          }
                        } catch (err) {
                          _didIteratorError4 = true;
                          _iteratorError4 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                              _iterator4.return();
                            }
                          } finally {
                            if (_didIteratorError4) {
                              throw _iteratorError4;
                            }
                          }
                        }
                      });
                    }
                    return positionMap;
                  };
                  var applyReflectionForRelativePlacement = function applyReflectionForRelativePlacement2(relativePlacementConstraints) {
                    var reflectOnY = 0, notReflectOnY = 0;
                    var reflectOnX = 0, notReflectOnX = 0;
                    relativePlacementConstraints.forEach(function(constraint) {
                      if (constraint.left) {
                        xCoords[nodeIndexes.get(constraint.left)] - xCoords[nodeIndexes.get(constraint.right)] >= 0 ? reflectOnY++ : notReflectOnY++;
                      } else {
                        yCoords[nodeIndexes.get(constraint.top)] - yCoords[nodeIndexes.get(constraint.bottom)] >= 0 ? reflectOnX++ : notReflectOnX++;
                      }
                    });
                    if (reflectOnY > notReflectOnY && reflectOnX > notReflectOnX) {
                      for (var _i = 0; _i < nodeIndexes.size; _i++) {
                        xCoords[_i] = -1 * xCoords[_i];
                        yCoords[_i] = -1 * yCoords[_i];
                      }
                    } else if (reflectOnY > notReflectOnY) {
                      for (var _i2 = 0; _i2 < nodeIndexes.size; _i2++) {
                        xCoords[_i2] = -1 * xCoords[_i2];
                      }
                    } else if (reflectOnX > notReflectOnX) {
                      for (var _i3 = 0; _i3 < nodeIndexes.size; _i3++) {
                        yCoords[_i3] = -1 * yCoords[_i3];
                      }
                    }
                  };
                  var findComponents = function findComponents2(graph2) {
                    var components3 = [];
                    var queue = new LinkedList();
                    var visited = /* @__PURE__ */ new Set();
                    var count = 0;
                    graph2.forEach(function(value, key) {
                      if (!visited.has(key)) {
                        components3[count] = [];
                        var _currentNode = key;
                        queue.push(_currentNode);
                        visited.add(_currentNode);
                        components3[count].push(_currentNode);
                        while (queue.length != 0) {
                          _currentNode = queue.shift();
                          var neighbors = graph2.get(_currentNode);
                          neighbors.forEach(function(neighbor) {
                            if (!visited.has(neighbor.id)) {
                              queue.push(neighbor.id);
                              visited.add(neighbor.id);
                              components3[count].push(neighbor.id);
                            }
                          });
                        }
                        count++;
                      }
                    });
                    return components3;
                  };
                  var dagToUndirected = function dagToUndirected2(dag2) {
                    var undirected = /* @__PURE__ */ new Map();
                    dag2.forEach(function(value, key) {
                      undirected.set(key, []);
                    });
                    dag2.forEach(function(value, key) {
                      value.forEach(function(adjacent) {
                        undirected.get(key).push(adjacent);
                        undirected.get(adjacent.id).push({ id: key, gap: adjacent.gap, direction: adjacent.direction });
                      });
                    });
                    return undirected;
                  };
                  var dagToReversed = function dagToReversed2(dag2) {
                    var reversed = /* @__PURE__ */ new Map();
                    dag2.forEach(function(value, key) {
                      reversed.set(key, []);
                    });
                    dag2.forEach(function(value, key) {
                      value.forEach(function(adjacent) {
                        reversed.get(adjacent.id).push({ id: key, gap: adjacent.gap, direction: adjacent.direction });
                      });
                    });
                    return reversed;
                  };
                  var targetMatrix = [];
                  var sourceMatrix = [];
                  var standardTransformation = false;
                  var reflectionType = false;
                  var fixedNodes = /* @__PURE__ */ new Set();
                  var dag = /* @__PURE__ */ new Map();
                  var dagUndirected = /* @__PURE__ */ new Map();
                  var components2 = [];
                  if (constraints.fixedNodeConstraint) {
                    constraints.fixedNodeConstraint.forEach(function(nodeData) {
                      fixedNodes.add(nodeData.nodeId);
                    });
                  }
                  if (constraints.relativePlacementConstraint) {
                    constraints.relativePlacementConstraint.forEach(function(constraint) {
                      if (constraint.left) {
                        if (dag.has(constraint.left)) {
                          dag.get(constraint.left).push({ id: constraint.right, gap: constraint.gap, direction: "horizontal" });
                        } else {
                          dag.set(constraint.left, [{ id: constraint.right, gap: constraint.gap, direction: "horizontal" }]);
                        }
                        if (!dag.has(constraint.right)) {
                          dag.set(constraint.right, []);
                        }
                      } else {
                        if (dag.has(constraint.top)) {
                          dag.get(constraint.top).push({ id: constraint.bottom, gap: constraint.gap, direction: "vertical" });
                        } else {
                          dag.set(constraint.top, [{ id: constraint.bottom, gap: constraint.gap, direction: "vertical" }]);
                        }
                        if (!dag.has(constraint.bottom)) {
                          dag.set(constraint.bottom, []);
                        }
                      }
                    });
                    dagUndirected = dagToUndirected(dag);
                    components2 = findComponents(dagUndirected);
                  }
                  if (CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING) {
                    if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 1) {
                      constraints.fixedNodeConstraint.forEach(function(nodeData, i3) {
                        targetMatrix[i3] = [nodeData.position.x, nodeData.position.y];
                        sourceMatrix[i3] = [xCoords[nodeIndexes.get(nodeData.nodeId)], yCoords[nodeIndexes.get(nodeData.nodeId)]];
                      });
                      standardTransformation = true;
                    } else if (constraints.alignmentConstraint) {
                      (function() {
                        var count = 0;
                        if (constraints.alignmentConstraint.vertical) {
                          var verticalAlign = constraints.alignmentConstraint.vertical;
                          var _loop2 = function _loop22(_i42) {
                            var alignmentSet = /* @__PURE__ */ new Set();
                            verticalAlign[_i42].forEach(function(nodeId) {
                              alignmentSet.add(nodeId);
                            });
                            var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x2) {
                              return fixedNodes.has(x2);
                            }));
                            var xPos = void 0;
                            if (intersection.size > 0)
                              xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];
                            else
                              xPos = calculateAvgPosition(alignmentSet).x;
                            verticalAlign[_i42].forEach(function(nodeId) {
                              targetMatrix[count] = [xPos, yCoords[nodeIndexes.get(nodeId)]];
                              sourceMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
                              count++;
                            });
                          };
                          for (var _i4 = 0; _i4 < verticalAlign.length; _i4++) {
                            _loop2(_i4);
                          }
                          standardTransformation = true;
                        }
                        if (constraints.alignmentConstraint.horizontal) {
                          var horizontalAlign = constraints.alignmentConstraint.horizontal;
                          var _loop3 = function _loop32(_i52) {
                            var alignmentSet = /* @__PURE__ */ new Set();
                            horizontalAlign[_i52].forEach(function(nodeId) {
                              alignmentSet.add(nodeId);
                            });
                            var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x2) {
                              return fixedNodes.has(x2);
                            }));
                            var yPos = void 0;
                            if (intersection.size > 0)
                              yPos = xCoords[nodeIndexes.get(intersection.values().next().value)];
                            else
                              yPos = calculateAvgPosition(alignmentSet).y;
                            horizontalAlign[_i52].forEach(function(nodeId) {
                              targetMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yPos];
                              sourceMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
                              count++;
                            });
                          };
                          for (var _i5 = 0; _i5 < horizontalAlign.length; _i5++) {
                            _loop3(_i5);
                          }
                          standardTransformation = true;
                        }
                        if (constraints.relativePlacementConstraint) {
                          reflectionType = true;
                        }
                      })();
                    } else if (constraints.relativePlacementConstraint) {
                      var largestComponentSize = 0;
                      var largestComponentIndex = 0;
                      for (var _i6 = 0; _i6 < components2.length; _i6++) {
                        if (components2[_i6].length > largestComponentSize) {
                          largestComponentSize = components2[_i6].length;
                          largestComponentIndex = _i6;
                        }
                      }
                      if (largestComponentSize < dagUndirected.size / 2) {
                        applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);
                        standardTransformation = false;
                        reflectionType = false;
                      } else {
                        var subGraphOnHorizontal = /* @__PURE__ */ new Map();
                        var subGraphOnVertical = /* @__PURE__ */ new Map();
                        var constraintsInlargestComponent = [];
                        components2[largestComponentIndex].forEach(function(nodeId) {
                          dag.get(nodeId).forEach(function(adjacent) {
                            if (adjacent.direction == "horizontal") {
                              if (subGraphOnHorizontal.has(nodeId)) {
                                subGraphOnHorizontal.get(nodeId).push(adjacent);
                              } else {
                                subGraphOnHorizontal.set(nodeId, [adjacent]);
                              }
                              if (!subGraphOnHorizontal.has(adjacent.id)) {
                                subGraphOnHorizontal.set(adjacent.id, []);
                              }
                              constraintsInlargestComponent.push({ left: nodeId, right: adjacent.id });
                            } else {
                              if (subGraphOnVertical.has(nodeId)) {
                                subGraphOnVertical.get(nodeId).push(adjacent);
                              } else {
                                subGraphOnVertical.set(nodeId, [adjacent]);
                              }
                              if (!subGraphOnVertical.has(adjacent.id)) {
                                subGraphOnVertical.set(adjacent.id, []);
                              }
                              constraintsInlargestComponent.push({ top: nodeId, bottom: adjacent.id });
                            }
                          });
                        });
                        applyReflectionForRelativePlacement(constraintsInlargestComponent);
                        reflectionType = false;
                        var positionMapHorizontal = findAppropriatePositionForRelativePlacement(subGraphOnHorizontal, "horizontal");
                        var positionMapVertical = findAppropriatePositionForRelativePlacement(subGraphOnVertical, "vertical");
                        components2[largestComponentIndex].forEach(function(nodeId, i3) {
                          sourceMatrix[i3] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
                          targetMatrix[i3] = [];
                          if (positionMapHorizontal.has(nodeId)) {
                            targetMatrix[i3][0] = positionMapHorizontal.get(nodeId);
                          } else {
                            targetMatrix[i3][0] = xCoords[nodeIndexes.get(nodeId)];
                          }
                          if (positionMapVertical.has(nodeId)) {
                            targetMatrix[i3][1] = positionMapVertical.get(nodeId);
                          } else {
                            targetMatrix[i3][1] = yCoords[nodeIndexes.get(nodeId)];
                          }
                        });
                        standardTransformation = true;
                      }
                    }
                    if (standardTransformation) {
                      var transformationMatrix = void 0;
                      var targetMatrixTranspose = Matrix2.transpose(targetMatrix);
                      var sourceMatrixTranspose = Matrix2.transpose(sourceMatrix);
                      for (var _i7 = 0; _i7 < targetMatrixTranspose.length; _i7++) {
                        targetMatrixTranspose[_i7] = Matrix2.multGamma(targetMatrixTranspose[_i7]);
                        sourceMatrixTranspose[_i7] = Matrix2.multGamma(sourceMatrixTranspose[_i7]);
                      }
                      var tempMatrix = Matrix2.multMat(targetMatrixTranspose, Matrix2.transpose(sourceMatrixTranspose));
                      var SVDResult = SVD.svd(tempMatrix);
                      transformationMatrix = Matrix2.multMat(SVDResult.V, Matrix2.transpose(SVDResult.U));
                      for (var _i8 = 0; _i8 < nodeIndexes.size; _i8++) {
                        var temp1 = [xCoords[_i8], yCoords[_i8]];
                        var temp2 = [transformationMatrix[0][0], transformationMatrix[1][0]];
                        var temp3 = [transformationMatrix[0][1], transformationMatrix[1][1]];
                        xCoords[_i8] = Matrix2.dotProduct(temp1, temp2);
                        yCoords[_i8] = Matrix2.dotProduct(temp1, temp3);
                      }
                      if (reflectionType) {
                        applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);
                      }
                    }
                  }
                  if (CoSEConstants.ENFORCE_CONSTRAINTS) {
                    if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 0) {
                      var translationAmount = { x: 0, y: 0 };
                      constraints.fixedNodeConstraint.forEach(function(nodeData, i3) {
                        var posInTheory = { x: xCoords[nodeIndexes.get(nodeData.nodeId)], y: yCoords[nodeIndexes.get(nodeData.nodeId)] };
                        var posDesired = nodeData.position;
                        var posDiff = calculatePositionDiff(posDesired, posInTheory);
                        translationAmount.x += posDiff.x;
                        translationAmount.y += posDiff.y;
                      });
                      translationAmount.x /= constraints.fixedNodeConstraint.length;
                      translationAmount.y /= constraints.fixedNodeConstraint.length;
                      xCoords.forEach(function(value, i3) {
                        xCoords[i3] += translationAmount.x;
                      });
                      yCoords.forEach(function(value, i3) {
                        yCoords[i3] += translationAmount.y;
                      });
                      constraints.fixedNodeConstraint.forEach(function(nodeData) {
                        xCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.x;
                        yCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.y;
                      });
                    }
                    if (constraints.alignmentConstraint) {
                      if (constraints.alignmentConstraint.vertical) {
                        var xAlign = constraints.alignmentConstraint.vertical;
                        var _loop4 = function _loop42(_i92) {
                          var alignmentSet = /* @__PURE__ */ new Set();
                          xAlign[_i92].forEach(function(nodeId) {
                            alignmentSet.add(nodeId);
                          });
                          var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x2) {
                            return fixedNodes.has(x2);
                          }));
                          var xPos = void 0;
                          if (intersection.size > 0)
                            xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];
                          else
                            xPos = calculateAvgPosition(alignmentSet).x;
                          alignmentSet.forEach(function(nodeId) {
                            if (!fixedNodes.has(nodeId))
                              xCoords[nodeIndexes.get(nodeId)] = xPos;
                          });
                        };
                        for (var _i9 = 0; _i9 < xAlign.length; _i9++) {
                          _loop4(_i9);
                        }
                      }
                      if (constraints.alignmentConstraint.horizontal) {
                        var yAlign = constraints.alignmentConstraint.horizontal;
                        var _loop5 = function _loop52(_i102) {
                          var alignmentSet = /* @__PURE__ */ new Set();
                          yAlign[_i102].forEach(function(nodeId) {
                            alignmentSet.add(nodeId);
                          });
                          var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x2) {
                            return fixedNodes.has(x2);
                          }));
                          var yPos = void 0;
                          if (intersection.size > 0)
                            yPos = yCoords[nodeIndexes.get(intersection.values().next().value)];
                          else
                            yPos = calculateAvgPosition(alignmentSet).y;
                          alignmentSet.forEach(function(nodeId) {
                            if (!fixedNodes.has(nodeId))
                              yCoords[nodeIndexes.get(nodeId)] = yPos;
                          });
                        };
                        for (var _i10 = 0; _i10 < yAlign.length; _i10++) {
                          _loop5(_i10);
                        }
                      }
                    }
                    if (constraints.relativePlacementConstraint) {
                      (function() {
                        var nodeToDummyForVerticalAlignment = /* @__PURE__ */ new Map();
                        var nodeToDummyForHorizontalAlignment = /* @__PURE__ */ new Map();
                        var dummyToNodeForVerticalAlignment = /* @__PURE__ */ new Map();
                        var dummyToNodeForHorizontalAlignment = /* @__PURE__ */ new Map();
                        var dummyPositionsForVerticalAlignment = /* @__PURE__ */ new Map();
                        var dummyPositionsForHorizontalAlignment = /* @__PURE__ */ new Map();
                        var fixedNodesOnHorizontal = /* @__PURE__ */ new Set();
                        var fixedNodesOnVertical = /* @__PURE__ */ new Set();
                        fixedNodes.forEach(function(nodeId2) {
                          fixedNodesOnHorizontal.add(nodeId2);
                          fixedNodesOnVertical.add(nodeId2);
                        });
                        if (constraints.alignmentConstraint) {
                          if (constraints.alignmentConstraint.vertical) {
                            var verticalAlignment = constraints.alignmentConstraint.vertical;
                            var _loop6 = function _loop62(_i112) {
                              dummyToNodeForVerticalAlignment.set("dummy" + _i112, []);
                              verticalAlignment[_i112].forEach(function(nodeId2) {
                                nodeToDummyForVerticalAlignment.set(nodeId2, "dummy" + _i112);
                                dummyToNodeForVerticalAlignment.get("dummy" + _i112).push(nodeId2);
                                if (fixedNodes.has(nodeId2)) {
                                  fixedNodesOnHorizontal.add("dummy" + _i112);
                                }
                              });
                              dummyPositionsForVerticalAlignment.set("dummy" + _i112, xCoords[nodeIndexes.get(verticalAlignment[_i112][0])]);
                            };
                            for (var _i11 = 0; _i11 < verticalAlignment.length; _i11++) {
                              _loop6(_i11);
                            }
                          }
                          if (constraints.alignmentConstraint.horizontal) {
                            var horizontalAlignment = constraints.alignmentConstraint.horizontal;
                            var _loop7 = function _loop72(_i122) {
                              dummyToNodeForHorizontalAlignment.set("dummy" + _i122, []);
                              horizontalAlignment[_i122].forEach(function(nodeId2) {
                                nodeToDummyForHorizontalAlignment.set(nodeId2, "dummy" + _i122);
                                dummyToNodeForHorizontalAlignment.get("dummy" + _i122).push(nodeId2);
                                if (fixedNodes.has(nodeId2)) {
                                  fixedNodesOnVertical.add("dummy" + _i122);
                                }
                              });
                              dummyPositionsForHorizontalAlignment.set("dummy" + _i122, yCoords[nodeIndexes.get(horizontalAlignment[_i122][0])]);
                            };
                            for (var _i12 = 0; _i12 < horizontalAlignment.length; _i12++) {
                              _loop7(_i12);
                            }
                          }
                        }
                        var dagOnHorizontal = /* @__PURE__ */ new Map();
                        var dagOnVertical = /* @__PURE__ */ new Map();
                        var _loop8 = function _loop82(nodeId2) {
                          dag.get(nodeId2).forEach(function(adjacent) {
                            var sourceId = void 0;
                            var targetNode = void 0;
                            if (adjacent["direction"] == "horizontal") {
                              sourceId = nodeToDummyForVerticalAlignment.get(nodeId2) ? nodeToDummyForVerticalAlignment.get(nodeId2) : nodeId2;
                              if (nodeToDummyForVerticalAlignment.get(adjacent.id)) {
                                targetNode = { id: nodeToDummyForVerticalAlignment.get(adjacent.id), gap: adjacent.gap, direction: adjacent.direction };
                              } else {
                                targetNode = adjacent;
                              }
                              if (dagOnHorizontal.has(sourceId)) {
                                dagOnHorizontal.get(sourceId).push(targetNode);
                              } else {
                                dagOnHorizontal.set(sourceId, [targetNode]);
                              }
                              if (!dagOnHorizontal.has(targetNode.id)) {
                                dagOnHorizontal.set(targetNode.id, []);
                              }
                            } else {
                              sourceId = nodeToDummyForHorizontalAlignment.get(nodeId2) ? nodeToDummyForHorizontalAlignment.get(nodeId2) : nodeId2;
                              if (nodeToDummyForHorizontalAlignment.get(adjacent.id)) {
                                targetNode = { id: nodeToDummyForHorizontalAlignment.get(adjacent.id), gap: adjacent.gap, direction: adjacent.direction };
                              } else {
                                targetNode = adjacent;
                              }
                              if (dagOnVertical.has(sourceId)) {
                                dagOnVertical.get(sourceId).push(targetNode);
                              } else {
                                dagOnVertical.set(sourceId, [targetNode]);
                              }
                              if (!dagOnVertical.has(targetNode.id)) {
                                dagOnVertical.set(targetNode.id, []);
                              }
                            }
                          });
                        };
                        var _iteratorNormalCompletion5 = true;
                        var _didIteratorError5 = false;
                        var _iteratorError5 = void 0;
                        try {
                          for (var _iterator5 = dag.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var nodeId = _step5.value;
                            _loop8(nodeId);
                          }
                        } catch (err) {
                          _didIteratorError5 = true;
                          _iteratorError5 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                              _iterator5.return();
                            }
                          } finally {
                            if (_didIteratorError5) {
                              throw _iteratorError5;
                            }
                          }
                        }
                        var undirectedOnHorizontal = dagToUndirected(dagOnHorizontal);
                        var undirectedOnVertical = dagToUndirected(dagOnVertical);
                        var componentsOnHorizontal = findComponents(undirectedOnHorizontal);
                        var componentsOnVertical = findComponents(undirectedOnVertical);
                        var reversedDagOnHorizontal = dagToReversed(dagOnHorizontal);
                        var reversedDagOnVertical = dagToReversed(dagOnVertical);
                        var componentSourcesOnHorizontal = [];
                        var componentSourcesOnVertical = [];
                        componentsOnHorizontal.forEach(function(component2, index2) {
                          componentSourcesOnHorizontal[index2] = [];
                          component2.forEach(function(nodeId2) {
                            if (reversedDagOnHorizontal.get(nodeId2).length == 0) {
                              componentSourcesOnHorizontal[index2].push(nodeId2);
                            }
                          });
                        });
                        componentsOnVertical.forEach(function(component2, index2) {
                          componentSourcesOnVertical[index2] = [];
                          component2.forEach(function(nodeId2) {
                            if (reversedDagOnVertical.get(nodeId2).length == 0) {
                              componentSourcesOnVertical[index2].push(nodeId2);
                            }
                          });
                        });
                        var positionMapHorizontal2 = findAppropriatePositionForRelativePlacement(dagOnHorizontal, "horizontal", fixedNodesOnHorizontal, dummyPositionsForVerticalAlignment, componentSourcesOnHorizontal);
                        var positionMapVertical2 = findAppropriatePositionForRelativePlacement(dagOnVertical, "vertical", fixedNodesOnVertical, dummyPositionsForHorizontalAlignment, componentSourcesOnVertical);
                        var _loop9 = function _loop92(key2) {
                          if (dummyToNodeForVerticalAlignment.get(key2)) {
                            dummyToNodeForVerticalAlignment.get(key2).forEach(function(nodeId2) {
                              xCoords[nodeIndexes.get(nodeId2)] = positionMapHorizontal2.get(key2);
                            });
                          } else {
                            xCoords[nodeIndexes.get(key2)] = positionMapHorizontal2.get(key2);
                          }
                        };
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = void 0;
                        try {
                          for (var _iterator6 = positionMapHorizontal2.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var key = _step6.value;
                            _loop9(key);
                          }
                        } catch (err) {
                          _didIteratorError6 = true;
                          _iteratorError6 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                              _iterator6.return();
                            }
                          } finally {
                            if (_didIteratorError6) {
                              throw _iteratorError6;
                            }
                          }
                        }
                        var _loop10 = function _loop102(key2) {
                          if (dummyToNodeForHorizontalAlignment.get(key2)) {
                            dummyToNodeForHorizontalAlignment.get(key2).forEach(function(nodeId2) {
                              yCoords[nodeIndexes.get(nodeId2)] = positionMapVertical2.get(key2);
                            });
                          } else {
                            yCoords[nodeIndexes.get(key2)] = positionMapVertical2.get(key2);
                          }
                        };
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = void 0;
                        try {
                          for (var _iterator7 = positionMapVertical2.keys()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var key = _step7.value;
                            _loop10(key);
                          }
                        } catch (err) {
                          _didIteratorError7 = true;
                          _iteratorError7 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                              _iterator7.return();
                            }
                          } finally {
                            if (_didIteratorError7) {
                              throw _iteratorError7;
                            }
                          }
                        }
                      })();
                    }
                  }
                  for (var _i13 = 0; _i13 < allNodes.length; _i13++) {
                    var _node = allNodes[_i13];
                    if (_node.getChild() == null) {
                      _node.setCenter(xCoords[nodeIndexes.get(_node.id)], yCoords[nodeIndexes.get(_node.id)]);
                    }
                  }
                };
                module2.exports = ConstraintHandler;
              }
            ),
            /***/
            551: (
              /***/
              (module2) => {
                module2.exports = __WEBPACK_EXTERNAL_MODULE__551__;
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          var __webpack_exports__ = __webpack_require__(45);
          return __webpack_exports__;
        })()
      );
    });
  })(coseBase);
  return coseBase.exports;
}
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory(requireCoseBase());
  })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__140__) {
    return (
      /******/
      (() => {
        var __webpack_modules__ = {
          /***/
          658: (
            /***/
            (module2) => {
              module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
                for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  srcs[_key - 1] = arguments[_key];
                }
                srcs.forEach(function(src2) {
                  Object.keys(src2).forEach(function(k2) {
                    return tgt[k2] = src2[k2];
                  });
                });
                return tgt;
              };
            }
          ),
          /***/
          548: (
            /***/
            (module2, __unused_webpack_exports, __webpack_require__2) => {
              var _slicedToArray2 = function() {
                function sliceIterator(arr, i2) {
                  var _arr = [];
                  var _n = true;
                  var _d = false;
                  var _e = void 0;
                  try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                      _arr.push(_s.value);
                      if (i2 && _arr.length === i2)
                        break;
                    }
                  } catch (err) {
                    _d = true;
                    _e = err;
                  } finally {
                    try {
                      if (!_n && _i["return"])
                        _i["return"]();
                    } finally {
                      if (_d)
                        throw _e;
                    }
                  }
                  return _arr;
                }
                return function(arr, i2) {
                  if (Array.isArray(arr)) {
                    return arr;
                  } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i2);
                  } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                  }
                };
              }();
              var LinkedList = __webpack_require__2(140).layoutBase.LinkedList;
              var auxiliary = {};
              auxiliary.getTopMostNodes = function(nodes3) {
                var nodesMap = {};
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  nodesMap[nodes3[i2].id()] = true;
                }
                var roots = nodes3.filter(function(ele, i3) {
                  if (typeof ele === "number") {
                    ele = i3;
                  }
                  var parent4 = ele.parent()[0];
                  while (parent4 != null) {
                    if (nodesMap[parent4.id()]) {
                      return false;
                    }
                    parent4 = parent4.parent()[0];
                  }
                  return true;
                });
                return roots;
              };
              auxiliary.connectComponents = function(cy2, eles, topMostNodes, dummyNodes) {
                var queue = new LinkedList();
                var visited = /* @__PURE__ */ new Set();
                var visitedTopMostNodes = [];
                var currentNeighbor = void 0;
                var minDegreeNode = void 0;
                var minDegree = void 0;
                var isConnected = false;
                var count = 1;
                var nodesConnectedToDummy = [];
                var components2 = [];
                var _loop = function _loop2() {
                  var cmpt = cy2.collection();
                  components2.push(cmpt);
                  var currentNode = topMostNodes[0];
                  var childrenOfCurrentNode = cy2.collection();
                  childrenOfCurrentNode.merge(currentNode).merge(currentNode.descendants().intersection(eles));
                  visitedTopMostNodes.push(currentNode);
                  childrenOfCurrentNode.forEach(function(node) {
                    queue.push(node);
                    visited.add(node);
                    cmpt.merge(node);
                  });
                  var _loop22 = function _loop23() {
                    currentNode = queue.shift();
                    var neighborNodes = cy2.collection();
                    currentNode.neighborhood().nodes().forEach(function(node) {
                      if (eles.intersection(currentNode.edgesWith(node)).length > 0) {
                        neighborNodes.merge(node);
                      }
                    });
                    for (var i2 = 0; i2 < neighborNodes.length; i2++) {
                      var neighborNode = neighborNodes[i2];
                      currentNeighbor = topMostNodes.intersection(neighborNode.union(neighborNode.ancestors()));
                      if (currentNeighbor != null && !visited.has(currentNeighbor[0])) {
                        var childrenOfNeighbor = currentNeighbor.union(currentNeighbor.descendants());
                        childrenOfNeighbor.forEach(function(node) {
                          queue.push(node);
                          visited.add(node);
                          cmpt.merge(node);
                          if (topMostNodes.has(node)) {
                            visitedTopMostNodes.push(node);
                          }
                        });
                      }
                    }
                  };
                  while (queue.length != 0) {
                    _loop22();
                  }
                  cmpt.forEach(function(node) {
                    eles.intersection(node.connectedEdges()).forEach(function(e2) {
                      if (cmpt.has(e2.source()) && cmpt.has(e2.target())) {
                        cmpt.merge(e2);
                      }
                    });
                  });
                  if (visitedTopMostNodes.length == topMostNodes.length) {
                    isConnected = true;
                  }
                  if (!isConnected || isConnected && count > 1) {
                    minDegreeNode = visitedTopMostNodes[0];
                    minDegree = minDegreeNode.connectedEdges().length;
                    visitedTopMostNodes.forEach(function(node) {
                      if (node.connectedEdges().length < minDegree) {
                        minDegree = node.connectedEdges().length;
                        minDegreeNode = node;
                      }
                    });
                    nodesConnectedToDummy.push(minDegreeNode.id());
                    var temp = cy2.collection();
                    temp.merge(visitedTopMostNodes[0]);
                    visitedTopMostNodes.forEach(function(node) {
                      temp.merge(node);
                    });
                    visitedTopMostNodes = [];
                    topMostNodes = topMostNodes.difference(temp);
                    count++;
                  }
                };
                do {
                  _loop();
                } while (!isConnected);
                if (dummyNodes) {
                  if (nodesConnectedToDummy.length > 0) {
                    dummyNodes.set("dummy" + (dummyNodes.size + 1), nodesConnectedToDummy);
                  }
                }
                return components2;
              };
              auxiliary.relocateComponent = function(originalCenter, componentResult, options2) {
                if (!options2.fixedNodeConstraint) {
                  var minXCoord = Number.POSITIVE_INFINITY;
                  var maxXCoord = Number.NEGATIVE_INFINITY;
                  var minYCoord = Number.POSITIVE_INFINITY;
                  var maxYCoord = Number.NEGATIVE_INFINITY;
                  if (options2.quality == "draft") {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = void 0;
                    try {
                      for (var _iterator = componentResult.nodeIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;
                        var _ref2 = _slicedToArray2(_ref, 2);
                        var key = _ref2[0];
                        var value = _ref2[1];
                        var cyNode = options2.cy.getElementById(key);
                        if (cyNode) {
                          var nodeBB = cyNode.boundingBox();
                          var leftX = componentResult.xCoords[value] - nodeBB.w / 2;
                          var rightX = componentResult.xCoords[value] + nodeBB.w / 2;
                          var topY = componentResult.yCoords[value] - nodeBB.h / 2;
                          var bottomY = componentResult.yCoords[value] + nodeBB.h / 2;
                          if (leftX < minXCoord)
                            minXCoord = leftX;
                          if (rightX > maxXCoord)
                            maxXCoord = rightX;
                          if (topY < minYCoord)
                            minYCoord = topY;
                          if (bottomY > maxYCoord)
                            maxYCoord = bottomY;
                        }
                      }
                    } catch (err) {
                      _didIteratorError = true;
                      _iteratorError = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                          _iterator.return();
                        }
                      } finally {
                        if (_didIteratorError) {
                          throw _iteratorError;
                        }
                      }
                    }
                    var diffOnX = originalCenter.x - (maxXCoord + minXCoord) / 2;
                    var diffOnY = originalCenter.y - (maxYCoord + minYCoord) / 2;
                    componentResult.xCoords = componentResult.xCoords.map(function(x2) {
                      return x2 + diffOnX;
                    });
                    componentResult.yCoords = componentResult.yCoords.map(function(y2) {
                      return y2 + diffOnY;
                    });
                  } else {
                    Object.keys(componentResult).forEach(function(item) {
                      var node = componentResult[item];
                      var leftX2 = node.getRect().x;
                      var rightX2 = node.getRect().x + node.getRect().width;
                      var topY2 = node.getRect().y;
                      var bottomY2 = node.getRect().y + node.getRect().height;
                      if (leftX2 < minXCoord)
                        minXCoord = leftX2;
                      if (rightX2 > maxXCoord)
                        maxXCoord = rightX2;
                      if (topY2 < minYCoord)
                        minYCoord = topY2;
                      if (bottomY2 > maxYCoord)
                        maxYCoord = bottomY2;
                    });
                    var _diffOnX = originalCenter.x - (maxXCoord + minXCoord) / 2;
                    var _diffOnY = originalCenter.y - (maxYCoord + minYCoord) / 2;
                    Object.keys(componentResult).forEach(function(item) {
                      var node = componentResult[item];
                      node.setCenter(node.getCenterX() + _diffOnX, node.getCenterY() + _diffOnY);
                    });
                  }
                }
              };
              auxiliary.calcBoundingBox = function(parentNode, xCoords, yCoords, nodeIndexes) {
                var left = Number.MAX_SAFE_INTEGER;
                var right = Number.MIN_SAFE_INTEGER;
                var top = Number.MAX_SAFE_INTEGER;
                var bottom = Number.MIN_SAFE_INTEGER;
                var nodeLeft = void 0;
                var nodeRight = void 0;
                var nodeTop = void 0;
                var nodeBottom = void 0;
                var nodes3 = parentNode.descendants().not(":parent");
                var s2 = nodes3.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  var node = nodes3[i2];
                  nodeLeft = xCoords[nodeIndexes.get(node.id())] - node.width() / 2;
                  nodeRight = xCoords[nodeIndexes.get(node.id())] + node.width() / 2;
                  nodeTop = yCoords[nodeIndexes.get(node.id())] - node.height() / 2;
                  nodeBottom = yCoords[nodeIndexes.get(node.id())] + node.height() / 2;
                  if (left > nodeLeft) {
                    left = nodeLeft;
                  }
                  if (right < nodeRight) {
                    right = nodeRight;
                  }
                  if (top > nodeTop) {
                    top = nodeTop;
                  }
                  if (bottom < nodeBottom) {
                    bottom = nodeBottom;
                  }
                }
                var boundingBox3 = {};
                boundingBox3.topLeftX = left;
                boundingBox3.topLeftY = top;
                boundingBox3.width = right - left;
                boundingBox3.height = bottom - top;
                return boundingBox3;
              };
              auxiliary.calcParentsWithoutChildren = function(cy2, eles) {
                var parentsWithoutChildren = cy2.collection();
                eles.nodes(":parent").forEach(function(parent4) {
                  var check = false;
                  parent4.children().forEach(function(child) {
                    if (child.css("display") != "none") {
                      check = true;
                    }
                  });
                  if (!check) {
                    parentsWithoutChildren.merge(parent4);
                  }
                });
                return parentsWithoutChildren;
              };
              module2.exports = auxiliary;
            }
          ),
          /***/
          816: (
            /***/
            (module2, __unused_webpack_exports, __webpack_require__2) => {
              var aux = __webpack_require__2(548);
              var CoSELayout = __webpack_require__2(140).CoSELayout;
              var CoSENode = __webpack_require__2(140).CoSENode;
              var PointD = __webpack_require__2(140).layoutBase.PointD;
              var DimensionD2 = __webpack_require__2(140).layoutBase.DimensionD;
              var LayoutConstants = __webpack_require__2(140).layoutBase.LayoutConstants;
              var FDLayoutConstants = __webpack_require__2(140).layoutBase.FDLayoutConstants;
              var CoSEConstants = __webpack_require__2(140).CoSEConstants;
              var coseLayout = function coseLayout2(options2, spectralResult) {
                var cy2 = options2.cy;
                var eles = options2.eles;
                var nodes3 = eles.nodes();
                var edges3 = eles.edges();
                var nodeIndexes = void 0;
                var xCoords = void 0;
                var yCoords = void 0;
                var idToLNode = {};
                if (options2.randomize) {
                  nodeIndexes = spectralResult["nodeIndexes"];
                  xCoords = spectralResult["xCoords"];
                  yCoords = spectralResult["yCoords"];
                }
                var isFn = function isFn2(fn3) {
                  return typeof fn3 === "function";
                };
                var optFn = function optFn2(opt, ele) {
                  if (isFn(opt)) {
                    return opt(ele);
                  } else {
                    return opt;
                  }
                };
                var parentsWithoutChildren = aux.calcParentsWithoutChildren(cy2, eles);
                var processChildrenList = function processChildrenList2(parent4, children2, layout4, options3) {
                  var size3 = children2.length;
                  for (var i2 = 0; i2 < size3; i2++) {
                    var theChild = children2[i2];
                    var children_of_children = null;
                    if (theChild.intersection(parentsWithoutChildren).length == 0) {
                      children_of_children = theChild.children();
                    }
                    var theNode = void 0;
                    var dimensions2 = theChild.layoutDimensions({
                      nodeDimensionsIncludeLabels: options3.nodeDimensionsIncludeLabels
                    });
                    if (theChild.outerWidth() != null && theChild.outerHeight() != null) {
                      if (options3.randomize) {
                        if (!theChild.isParent()) {
                          theNode = parent4.add(new CoSENode(layout4.graphManager, new PointD(xCoords[nodeIndexes.get(theChild.id())] - dimensions2.w / 2, yCoords[nodeIndexes.get(theChild.id())] - dimensions2.h / 2), new DimensionD2(parseFloat(dimensions2.w), parseFloat(dimensions2.h))));
                        } else {
                          var parentInfo = aux.calcBoundingBox(theChild, xCoords, yCoords, nodeIndexes);
                          if (theChild.intersection(parentsWithoutChildren).length == 0) {
                            theNode = parent4.add(new CoSENode(layout4.graphManager, new PointD(parentInfo.topLeftX, parentInfo.topLeftY), new DimensionD2(parentInfo.width, parentInfo.height)));
                          } else {
                            theNode = parent4.add(new CoSENode(layout4.graphManager, new PointD(parentInfo.topLeftX, parentInfo.topLeftY), new DimensionD2(parseFloat(dimensions2.w), parseFloat(dimensions2.h))));
                          }
                        }
                      } else {
                        theNode = parent4.add(new CoSENode(layout4.graphManager, new PointD(theChild.position("x") - dimensions2.w / 2, theChild.position("y") - dimensions2.h / 2), new DimensionD2(parseFloat(dimensions2.w), parseFloat(dimensions2.h))));
                      }
                    } else {
                      theNode = parent4.add(new CoSENode(this.graphManager));
                    }
                    theNode.id = theChild.data("id");
                    theNode.nodeRepulsion = optFn(options3.nodeRepulsion, theChild);
                    theNode.paddingLeft = parseInt(theChild.css("padding"));
                    theNode.paddingTop = parseInt(theChild.css("padding"));
                    theNode.paddingRight = parseInt(theChild.css("padding"));
                    theNode.paddingBottom = parseInt(theChild.css("padding"));
                    if (options3.nodeDimensionsIncludeLabels) {
                      theNode.labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false, includeOverlays: false }).w;
                      theNode.labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false, includeOverlays: false }).h;
                      theNode.labelPosVertical = theChild.css("text-valign");
                      theNode.labelPosHorizontal = theChild.css("text-halign");
                    }
                    idToLNode[theChild.data("id")] = theNode;
                    if (isNaN(theNode.rect.x)) {
                      theNode.rect.x = 0;
                    }
                    if (isNaN(theNode.rect.y)) {
                      theNode.rect.y = 0;
                    }
                    if (children_of_children != null && children_of_children.length > 0) {
                      var theNewGraph = void 0;
                      theNewGraph = layout4.getGraphManager().add(layout4.newGraph(), theNode);
                      processChildrenList2(theNewGraph, children_of_children, layout4, options3);
                    }
                  }
                };
                var processEdges = function processEdges2(layout4, gm2, edges4) {
                  var idealLengthTotal = 0;
                  var edgeCount = 0;
                  for (var i2 = 0; i2 < edges4.length; i2++) {
                    var edge = edges4[i2];
                    var sourceNode = idToLNode[edge.data("source")];
                    var targetNode = idToLNode[edge.data("target")];
                    if (sourceNode && targetNode && sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {
                      var e1 = gm2.add(layout4.newEdge(), sourceNode, targetNode);
                      e1.id = edge.id();
                      e1.idealLength = optFn(options2.idealEdgeLength, edge);
                      e1.edgeElasticity = optFn(options2.edgeElasticity, edge);
                      idealLengthTotal += e1.idealLength;
                      edgeCount++;
                    }
                  }
                  if (options2.idealEdgeLength != null) {
                    if (edgeCount > 0)
                      CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = idealLengthTotal / edgeCount;
                    else if (!isFn(options2.idealEdgeLength))
                      CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options2.idealEdgeLength;
                    else
                      CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
                    CoSEConstants.MIN_REPULSION_DIST = FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10;
                    CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
                  }
                };
                var processConstraints = function processConstraints2(layout4, options3) {
                  if (options3.fixedNodeConstraint) {
                    layout4.constraints["fixedNodeConstraint"] = options3.fixedNodeConstraint;
                  }
                  if (options3.alignmentConstraint) {
                    layout4.constraints["alignmentConstraint"] = options3.alignmentConstraint;
                  }
                  if (options3.relativePlacementConstraint) {
                    layout4.constraints["relativePlacementConstraint"] = options3.relativePlacementConstraint;
                  }
                };
                if (options2.nestingFactor != null)
                  CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options2.nestingFactor;
                if (options2.gravity != null)
                  CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options2.gravity;
                if (options2.numIter != null)
                  CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options2.numIter;
                if (options2.gravityRange != null)
                  CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options2.gravityRange;
                if (options2.gravityCompound != null)
                  CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options2.gravityCompound;
                if (options2.gravityRangeCompound != null)
                  CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options2.gravityRangeCompound;
                if (options2.initialEnergyOnIncremental != null)
                  CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options2.initialEnergyOnIncremental;
                if (options2.tilingCompareBy != null)
                  CoSEConstants.TILING_COMPARE_BY = options2.tilingCompareBy;
                if (options2.quality == "proof")
                  LayoutConstants.QUALITY = 2;
                else
                  LayoutConstants.QUALITY = 0;
                CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options2.nodeDimensionsIncludeLabels;
                CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options2.randomize;
                CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options2.animate;
                CoSEConstants.TILE = options2.tile;
                CoSEConstants.TILING_PADDING_VERTICAL = typeof options2.tilingPaddingVertical === "function" ? options2.tilingPaddingVertical.call() : options2.tilingPaddingVertical;
                CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options2.tilingPaddingHorizontal === "function" ? options2.tilingPaddingHorizontal.call() : options2.tilingPaddingHorizontal;
                CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = true;
                CoSEConstants.PURE_INCREMENTAL = !options2.randomize;
                LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = options2.uniformNodeDimensions;
                if (options2.step == "transformed") {
                  CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;
                  CoSEConstants.ENFORCE_CONSTRAINTS = false;
                  CoSEConstants.APPLY_LAYOUT = false;
                }
                if (options2.step == "enforced") {
                  CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;
                  CoSEConstants.ENFORCE_CONSTRAINTS = true;
                  CoSEConstants.APPLY_LAYOUT = false;
                }
                if (options2.step == "cose") {
                  CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;
                  CoSEConstants.ENFORCE_CONSTRAINTS = false;
                  CoSEConstants.APPLY_LAYOUT = true;
                }
                if (options2.step == "all") {
                  if (options2.randomize)
                    CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;
                  else
                    CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;
                  CoSEConstants.ENFORCE_CONSTRAINTS = true;
                  CoSEConstants.APPLY_LAYOUT = true;
                }
                if (options2.fixedNodeConstraint || options2.alignmentConstraint || options2.relativePlacementConstraint) {
                  CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false;
                } else {
                  CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = true;
                }
                var coseLayout3 = new CoSELayout();
                var gm = coseLayout3.newGraphManager();
                processChildrenList(gm.addRoot(), aux.getTopMostNodes(nodes3), coseLayout3, options2);
                processEdges(coseLayout3, gm, edges3);
                processConstraints(coseLayout3, options2);
                coseLayout3.runLayout();
                return idToLNode;
              };
              module2.exports = { coseLayout };
            }
          ),
          /***/
          212: (
            /***/
            (module2, __unused_webpack_exports, __webpack_require__2) => {
              var _createClass2 = function() {
                function defineProperties(target, props) {
                  for (var i2 = 0; i2 < props.length; i2++) {
                    var descriptor = props[i2];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor)
                      descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function(Constructor, protoProps, staticProps) {
                  if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                  if (staticProps)
                    defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();
              function _classCallCheck2(instance2, Constructor) {
                if (!(instance2 instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              var assign5 = __webpack_require__2(658);
              var aux = __webpack_require__2(548);
              var _require = __webpack_require__2(657), spectralLayout = _require.spectralLayout;
              var _require2 = __webpack_require__2(816), coseLayout = _require2.coseLayout;
              var defaults3 = Object.freeze({
                // 'draft', 'default' or 'proof' 
                // - 'draft' only applies spectral layout 
                // - 'default' improves the quality with subsequent CoSE layout (fast cooling rate)
                // - 'proof' improves the quality with subsequent CoSE layout (slow cooling rate) 
                quality: "default",
                // Use random node positions at beginning of layout
                // if this is set to false, then quality option must be "proof"
                randomize: true,
                // Whether or not to animate the layout
                animate: true,
                // Duration of animation in ms, if enabled
                animationDuration: 1e3,
                // Easing of animation, if enabled
                animationEasing: void 0,
                // Fit the viewport to the repositioned nodes
                fit: true,
                // Padding around layout
                padding: 30,
                // Whether to include labels in node dimensions. Valid in "proof" quality
                nodeDimensionsIncludeLabels: false,
                // Whether or not simple nodes (non-compound nodes) are of uniform dimensions
                uniformNodeDimensions: false,
                // Whether to pack disconnected components - valid only if randomize: true
                packComponents: true,
                // Layout step - all, transformed, enforced, cose - for debug purpose only
                step: "all",
                /* spectral layout options */
                // False for random, true for greedy
                samplingType: true,
                // Sample size to construct distance matrix
                sampleSize: 25,
                // Separation amount between nodes
                nodeSeparation: 75,
                // Power iteration tolerance
                piTol: 1e-7,
                /* CoSE layout options */
                // Node repulsion (non overlapping) multiplier
                nodeRepulsion: function nodeRepulsion4(node) {
                  return 4500;
                },
                // Ideal edge (non nested) length
                idealEdgeLength: function idealEdgeLength2(edge) {
                  return 50;
                },
                // Divisor to compute edge forces
                edgeElasticity: function edgeElasticity2(edge) {
                  return 0.45;
                },
                // Nesting factor (multiplier) to compute ideal edge length for nested edges
                nestingFactor: 0.1,
                // Gravity force (constant)
                gravity: 0.25,
                // Maximum number of iterations to perform
                numIter: 2500,
                // For enabling tiling
                tile: true,
                // The function that specifies the criteria for comparing nodes while sorting them during tiling operation.
                // Takes the node id as a parameter and the default tiling operation is perfomed when this option is not set.
                tilingCompareBy: void 0,
                // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
                tilingPaddingVertical: 10,
                // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
                tilingPaddingHorizontal: 10,
                // Gravity range (constant) for compounds
                gravityRangeCompound: 1.5,
                // Gravity force (constant) for compounds
                gravityCompound: 1,
                // Gravity range (constant)
                gravityRange: 3.8,
                // Initial cooling factor for incremental layout  
                initialEnergyOnIncremental: 0.3,
                /* constraint options */
                // Fix required nodes to predefined positions
                // [{nodeId: 'n1', position: {x: 100, y: 200}, {...}]
                fixedNodeConstraint: void 0,
                // Align required nodes in vertical/horizontal direction
                // {vertical: [['n1', 'n2')], ['n3', 'n4']], horizontal: ['n2', 'n4']}
                alignmentConstraint: void 0,
                // Place two nodes relatively in vertical/horizontal direction 
                // [{top: 'n1', bottom: 'n2', gap: 100}, {left: 'n3', right: 'n4', gap: 75}]
                relativePlacementConstraint: void 0,
                /* layout event callbacks */
                ready: function ready4() {
                },
                // on layoutready
                stop: function stop5() {
                }
                // on layoutstop
              });
              var Layout2 = function() {
                function Layout3(options2) {
                  _classCallCheck2(this, Layout3);
                  this.options = assign5({}, defaults3, options2);
                }
                _createClass2(Layout3, [{
                  key: "run",
                  value: function run2() {
                    var layout4 = this;
                    var options2 = this.options;
                    var cy2 = options2.cy;
                    var eles = options2.eles;
                    var spectralResult = [];
                    var coseResult = [];
                    var components2 = void 0;
                    var componentCenters = [];
                    if (options2.fixedNodeConstraint && (!Array.isArray(options2.fixedNodeConstraint) || options2.fixedNodeConstraint.length == 0)) {
                      options2.fixedNodeConstraint = void 0;
                    }
                    if (options2.alignmentConstraint) {
                      if (options2.alignmentConstraint.vertical && (!Array.isArray(options2.alignmentConstraint.vertical) || options2.alignmentConstraint.vertical.length == 0)) {
                        options2.alignmentConstraint.vertical = void 0;
                      }
                      if (options2.alignmentConstraint.horizontal && (!Array.isArray(options2.alignmentConstraint.horizontal) || options2.alignmentConstraint.horizontal.length == 0)) {
                        options2.alignmentConstraint.horizontal = void 0;
                      }
                    }
                    if (options2.relativePlacementConstraint && (!Array.isArray(options2.relativePlacementConstraint) || options2.relativePlacementConstraint.length == 0)) {
                      options2.relativePlacementConstraint = void 0;
                    }
                    var constraintExist = options2.fixedNodeConstraint || options2.alignmentConstraint || options2.relativePlacementConstraint;
                    if (constraintExist) {
                      options2.tile = false;
                      options2.packComponents = false;
                    }
                    var layUtil = void 0;
                    var packingEnabled = false;
                    if (cy2.layoutUtilities && options2.packComponents) {
                      layUtil = cy2.layoutUtilities("get");
                      if (!layUtil)
                        layUtil = cy2.layoutUtilities();
                      packingEnabled = true;
                    }
                    if (eles.nodes().length > 0) {
                      if (!packingEnabled) {
                        var boundingBox3 = options2.eles.boundingBox();
                        componentCenters.push({ x: boundingBox3.x1 + boundingBox3.w / 2, y: boundingBox3.y1 + boundingBox3.h / 2 });
                        if (options2.randomize) {
                          var result = spectralLayout(options2);
                          spectralResult.push(result);
                        }
                        if (options2.quality == "default" || options2.quality == "proof") {
                          coseResult.push(coseLayout(options2, spectralResult[0]));
                          aux.relocateComponent(componentCenters[0], coseResult[0], options2);
                        } else {
                          aux.relocateComponent(componentCenters[0], spectralResult[0], options2);
                        }
                      } else {
                        var topMostNodes = aux.getTopMostNodes(options2.eles.nodes());
                        components2 = aux.connectComponents(cy2, options2.eles, topMostNodes);
                        components2.forEach(function(component2) {
                          var boundingBox4 = component2.boundingBox();
                          componentCenters.push({ x: boundingBox4.x1 + boundingBox4.w / 2, y: boundingBox4.y1 + boundingBox4.h / 2 });
                        });
                        if (options2.randomize) {
                          components2.forEach(function(component2) {
                            options2.eles = component2;
                            spectralResult.push(spectralLayout(options2));
                          });
                        }
                        if (options2.quality == "default" || options2.quality == "proof") {
                          var toBeTiledNodes = cy2.collection();
                          if (options2.tile) {
                            var nodeIndexes = /* @__PURE__ */ new Map();
                            var _xCoords = [];
                            var _yCoords = [];
                            var count = 0;
                            var tempSpectralResult = { nodeIndexes, xCoords: _xCoords, yCoords: _yCoords };
                            var indexesToBeDeleted = [];
                            components2.forEach(function(component2, index) {
                              if (component2.edges().length == 0) {
                                component2.nodes().forEach(function(node, i3) {
                                  toBeTiledNodes.merge(component2.nodes()[i3]);
                                  if (!node.isParent()) {
                                    tempSpectralResult.nodeIndexes.set(component2.nodes()[i3].id(), count++);
                                    tempSpectralResult.xCoords.push(component2.nodes()[0].position().x);
                                    tempSpectralResult.yCoords.push(component2.nodes()[0].position().y);
                                  }
                                });
                                indexesToBeDeleted.push(index);
                              }
                            });
                            if (toBeTiledNodes.length > 1) {
                              var _boundingBox = toBeTiledNodes.boundingBox();
                              componentCenters.push({ x: _boundingBox.x1 + _boundingBox.w / 2, y: _boundingBox.y1 + _boundingBox.h / 2 });
                              components2.push(toBeTiledNodes);
                              spectralResult.push(tempSpectralResult);
                              for (var i2 = indexesToBeDeleted.length - 1; i2 >= 0; i2--) {
                                components2.splice(indexesToBeDeleted[i2], 1);
                                spectralResult.splice(indexesToBeDeleted[i2], 1);
                                componentCenters.splice(indexesToBeDeleted[i2], 1);
                              }
                            }
                          }
                          components2.forEach(function(component2, index) {
                            options2.eles = component2;
                            coseResult.push(coseLayout(options2, spectralResult[index]));
                            aux.relocateComponent(componentCenters[index], coseResult[index], options2);
                          });
                        } else {
                          components2.forEach(function(component2, index) {
                            aux.relocateComponent(componentCenters[index], spectralResult[index], options2);
                          });
                        }
                        var componentsEvaluated = /* @__PURE__ */ new Set();
                        if (components2.length > 1) {
                          var subgraphs = [];
                          var hiddenEles = eles.filter(function(ele) {
                            return ele.css("display") == "none";
                          });
                          components2.forEach(function(component2, index) {
                            var nodeIndexes2 = void 0;
                            if (options2.quality == "draft") {
                              nodeIndexes2 = spectralResult[index].nodeIndexes;
                            }
                            if (component2.nodes().not(hiddenEles).length > 0) {
                              var subgraph = {};
                              subgraph.edges = [];
                              subgraph.nodes = [];
                              var nodeIndex = void 0;
                              component2.nodes().not(hiddenEles).forEach(function(node) {
                                if (options2.quality == "draft") {
                                  if (!node.isParent()) {
                                    nodeIndex = nodeIndexes2.get(node.id());
                                    subgraph.nodes.push({ x: spectralResult[index].xCoords[nodeIndex] - node.boundingbox().w / 2, y: spectralResult[index].yCoords[nodeIndex] - node.boundingbox().h / 2, width: node.boundingbox().w, height: node.boundingbox().h });
                                  } else {
                                    var parentInfo = aux.calcBoundingBox(node, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes2);
                                    subgraph.nodes.push({ x: parentInfo.topLeftX, y: parentInfo.topLeftY, width: parentInfo.width, height: parentInfo.height });
                                  }
                                } else {
                                  if (coseResult[index][node.id()]) {
                                    subgraph.nodes.push({ x: coseResult[index][node.id()].getLeft(), y: coseResult[index][node.id()].getTop(), width: coseResult[index][node.id()].getWidth(), height: coseResult[index][node.id()].getHeight() });
                                  }
                                }
                              });
                              component2.edges().forEach(function(edge) {
                                var source = edge.source();
                                var target = edge.target();
                                if (source.css("display") != "none" && target.css("display") != "none") {
                                  if (options2.quality == "draft") {
                                    var sourceNodeIndex = nodeIndexes2.get(source.id());
                                    var targetNodeIndex = nodeIndexes2.get(target.id());
                                    var sourceCenter = [];
                                    var targetCenter = [];
                                    if (source.isParent()) {
                                      var parentInfo = aux.calcBoundingBox(source, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes2);
                                      sourceCenter.push(parentInfo.topLeftX + parentInfo.width / 2);
                                      sourceCenter.push(parentInfo.topLeftY + parentInfo.height / 2);
                                    } else {
                                      sourceCenter.push(spectralResult[index].xCoords[sourceNodeIndex]);
                                      sourceCenter.push(spectralResult[index].yCoords[sourceNodeIndex]);
                                    }
                                    if (target.isParent()) {
                                      var _parentInfo = aux.calcBoundingBox(target, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes2);
                                      targetCenter.push(_parentInfo.topLeftX + _parentInfo.width / 2);
                                      targetCenter.push(_parentInfo.topLeftY + _parentInfo.height / 2);
                                    } else {
                                      targetCenter.push(spectralResult[index].xCoords[targetNodeIndex]);
                                      targetCenter.push(spectralResult[index].yCoords[targetNodeIndex]);
                                    }
                                    subgraph.edges.push({ startX: sourceCenter[0], startY: sourceCenter[1], endX: targetCenter[0], endY: targetCenter[1] });
                                  } else {
                                    if (coseResult[index][source.id()] && coseResult[index][target.id()]) {
                                      subgraph.edges.push({ startX: coseResult[index][source.id()].getCenterX(), startY: coseResult[index][source.id()].getCenterY(), endX: coseResult[index][target.id()].getCenterX(), endY: coseResult[index][target.id()].getCenterY() });
                                    }
                                  }
                                }
                              });
                              if (subgraph.nodes.length > 0) {
                                subgraphs.push(subgraph);
                                componentsEvaluated.add(index);
                              }
                            }
                          });
                          var shiftResult = layUtil.packComponents(subgraphs, options2.randomize).shifts;
                          if (options2.quality == "draft") {
                            spectralResult.forEach(function(result2, index) {
                              var newXCoords = result2.xCoords.map(function(x2) {
                                return x2 + shiftResult[index].dx;
                              });
                              var newYCoords = result2.yCoords.map(function(y2) {
                                return y2 + shiftResult[index].dy;
                              });
                              result2.xCoords = newXCoords;
                              result2.yCoords = newYCoords;
                            });
                          } else {
                            var _count = 0;
                            componentsEvaluated.forEach(function(index) {
                              Object.keys(coseResult[index]).forEach(function(item) {
                                var nodeRectangle = coseResult[index][item];
                                nodeRectangle.setCenter(nodeRectangle.getCenterX() + shiftResult[_count].dx, nodeRectangle.getCenterY() + shiftResult[_count].dy);
                              });
                              _count++;
                            });
                          }
                        }
                      }
                    }
                    var getPositions = function getPositions2(ele, i3) {
                      if (options2.quality == "default" || options2.quality == "proof") {
                        if (typeof ele === "number") {
                          ele = i3;
                        }
                        var pos = void 0;
                        var node = void 0;
                        var theId = ele.data("id");
                        coseResult.forEach(function(result2) {
                          if (theId in result2) {
                            pos = { x: result2[theId].getRect().getCenterX(), y: result2[theId].getRect().getCenterY() };
                            node = result2[theId];
                          }
                        });
                        if (options2.nodeDimensionsIncludeLabels) {
                          if (node.labelWidth) {
                            if (node.labelPosHorizontal == "left") {
                              pos.x += node.labelWidth / 2;
                            } else if (node.labelPosHorizontal == "right") {
                              pos.x -= node.labelWidth / 2;
                            }
                          }
                          if (node.labelHeight) {
                            if (node.labelPosVertical == "top") {
                              pos.y += node.labelHeight / 2;
                            } else if (node.labelPosVertical == "bottom") {
                              pos.y -= node.labelHeight / 2;
                            }
                          }
                        }
                        if (pos == void 0)
                          pos = { x: ele.position("x"), y: ele.position("y") };
                        return {
                          x: pos.x,
                          y: pos.y
                        };
                      } else {
                        var _pos = void 0;
                        spectralResult.forEach(function(result2) {
                          var index = result2.nodeIndexes.get(ele.id());
                          if (index != void 0) {
                            _pos = { x: result2.xCoords[index], y: result2.yCoords[index] };
                          }
                        });
                        if (_pos == void 0)
                          _pos = { x: ele.position("x"), y: ele.position("y") };
                        return {
                          x: _pos.x,
                          y: _pos.y
                        };
                      }
                    };
                    if (options2.quality == "default" || options2.quality == "proof" || options2.randomize) {
                      var parentsWithoutChildren = aux.calcParentsWithoutChildren(cy2, eles);
                      var _hiddenEles = eles.filter(function(ele) {
                        return ele.css("display") == "none";
                      });
                      options2.eles = eles.not(_hiddenEles);
                      eles.nodes().not(":parent").not(_hiddenEles).layoutPositions(layout4, options2, getPositions);
                      if (parentsWithoutChildren.length > 0) {
                        parentsWithoutChildren.forEach(function(ele) {
                          ele.position(getPositions(ele));
                        });
                      }
                    } else {
                      console.log("If randomize option is set to false, then quality option must be 'default' or 'proof'.");
                    }
                  }
                }]);
                return Layout3;
              }();
              module2.exports = Layout2;
            }
          ),
          /***/
          657: (
            /***/
            (module2, __unused_webpack_exports, __webpack_require__2) => {
              var aux = __webpack_require__2(548);
              var Matrix2 = __webpack_require__2(140).layoutBase.Matrix;
              var SVD = __webpack_require__2(140).layoutBase.SVD;
              var spectralLayout = function spectralLayout2(options2) {
                var cy2 = options2.cy;
                var eles = options2.eles;
                var nodes3 = eles.nodes();
                var parentNodes = eles.nodes(":parent");
                var dummyNodes = /* @__PURE__ */ new Map();
                var nodeIndexes = /* @__PURE__ */ new Map();
                var parentChildMap = /* @__PURE__ */ new Map();
                var allNodesNeighborhood = [];
                var xCoords = [];
                var yCoords = [];
                var samplesColumn = [];
                var minDistancesColumn = [];
                var C2 = [];
                var PHI = [];
                var INV = [];
                var nodeSize = void 0;
                var infinity = 1e8;
                var small = 1e-9;
                var piTol = options2.piTol;
                var samplingType = options2.samplingType;
                var nodeSeparation = options2.nodeSeparation;
                var sampleSize = void 0;
                var randomSampleCR = function randomSampleCR2() {
                  var sample2 = 0;
                  var count = 0;
                  var flag = false;
                  while (count < sampleSize) {
                    sample2 = Math.floor(Math.random() * nodeSize);
                    flag = false;
                    for (var i3 = 0; i3 < count; i3++) {
                      if (samplesColumn[i3] == sample2) {
                        flag = true;
                        break;
                      }
                    }
                    if (!flag) {
                      samplesColumn[count] = sample2;
                      count++;
                    } else {
                      continue;
                    }
                  }
                };
                var BFS = function BFS2(pivot, index2, samplingMethod) {
                  var path = [];
                  var front = 0;
                  var back = 0;
                  var current = 0;
                  var temp = void 0;
                  var distance = [];
                  var max_dist = 0;
                  var max_ind = 1;
                  for (var i3 = 0; i3 < nodeSize; i3++) {
                    distance[i3] = infinity;
                  }
                  path[back] = pivot;
                  distance[pivot] = 0;
                  while (back >= front) {
                    current = path[front++];
                    var neighbors = allNodesNeighborhood[current];
                    for (var _i = 0; _i < neighbors.length; _i++) {
                      temp = nodeIndexes.get(neighbors[_i]);
                      if (distance[temp] == infinity) {
                        distance[temp] = distance[current] + 1;
                        path[++back] = temp;
                      }
                    }
                    C2[current][index2] = distance[current] * nodeSeparation;
                  }
                  if (samplingMethod) {
                    for (var _i2 = 0; _i2 < nodeSize; _i2++) {
                      if (C2[_i2][index2] < minDistancesColumn[_i2])
                        minDistancesColumn[_i2] = C2[_i2][index2];
                    }
                    for (var _i3 = 0; _i3 < nodeSize; _i3++) {
                      if (minDistancesColumn[_i3] > max_dist) {
                        max_dist = minDistancesColumn[_i3];
                        max_ind = _i3;
                      }
                    }
                  }
                  return max_ind;
                };
                var allBFS = function allBFS2(samplingMethod) {
                  var sample2 = void 0;
                  if (!samplingMethod) {
                    randomSampleCR();
                    for (var i3 = 0; i3 < sampleSize; i3++) {
                      BFS(samplesColumn[i3], i3, samplingMethod);
                    }
                  } else {
                    sample2 = Math.floor(Math.random() * nodeSize);
                    for (var _i4 = 0; _i4 < nodeSize; _i4++) {
                      minDistancesColumn[_i4] = infinity;
                    }
                    for (var _i5 = 0; _i5 < sampleSize; _i5++) {
                      samplesColumn[_i5] = sample2;
                      sample2 = BFS(sample2, _i5, samplingMethod);
                    }
                  }
                  for (var _i6 = 0; _i6 < nodeSize; _i6++) {
                    for (var j2 = 0; j2 < sampleSize; j2++) {
                      C2[_i6][j2] *= C2[_i6][j2];
                    }
                  }
                  for (var _i7 = 0; _i7 < sampleSize; _i7++) {
                    PHI[_i7] = [];
                  }
                  for (var _i8 = 0; _i8 < sampleSize; _i8++) {
                    for (var _j = 0; _j < sampleSize; _j++) {
                      PHI[_i8][_j] = C2[samplesColumn[_j]][_i8];
                    }
                  }
                };
                var sample = function sample2() {
                  var SVDResult = SVD.svd(PHI);
                  var a_q = SVDResult.S;
                  var a_u = SVDResult.U;
                  var a_v = SVDResult.V;
                  var max_s = a_q[0] * a_q[0] * a_q[0];
                  var a_Sig = [];
                  for (var i3 = 0; i3 < sampleSize; i3++) {
                    a_Sig[i3] = [];
                    for (var j2 = 0; j2 < sampleSize; j2++) {
                      a_Sig[i3][j2] = 0;
                      if (i3 == j2) {
                        a_Sig[i3][j2] = a_q[i3] / (a_q[i3] * a_q[i3] + max_s / (a_q[i3] * a_q[i3]));
                      }
                    }
                  }
                  INV = Matrix2.multMat(Matrix2.multMat(a_v, a_Sig), Matrix2.transpose(a_u));
                };
                var powerIteration = function powerIteration2() {
                  var theta1 = void 0;
                  var theta2 = void 0;
                  var Y1 = [];
                  var Y2 = [];
                  var V1 = [];
                  var V2 = [];
                  for (var i3 = 0; i3 < nodeSize; i3++) {
                    Y1[i3] = Math.random();
                    Y2[i3] = Math.random();
                  }
                  Y1 = Matrix2.normalize(Y1);
                  Y2 = Matrix2.normalize(Y2);
                  var current = small;
                  var previous = small;
                  var temp = void 0;
                  while (true) {
                    for (var _i9 = 0; _i9 < nodeSize; _i9++) {
                      V1[_i9] = Y1[_i9];
                    }
                    Y1 = Matrix2.multGamma(Matrix2.multL(Matrix2.multGamma(V1), C2, INV));
                    theta1 = Matrix2.dotProduct(V1, Y1);
                    Y1 = Matrix2.normalize(Y1);
                    current = Matrix2.dotProduct(V1, Y1);
                    temp = Math.abs(current / previous);
                    if (temp <= 1 + piTol && temp >= 1) {
                      break;
                    }
                    previous = current;
                  }
                  for (var _i10 = 0; _i10 < nodeSize; _i10++) {
                    V1[_i10] = Y1[_i10];
                  }
                  previous = small;
                  while (true) {
                    for (var _i11 = 0; _i11 < nodeSize; _i11++) {
                      V2[_i11] = Y2[_i11];
                    }
                    V2 = Matrix2.minusOp(V2, Matrix2.multCons(V1, Matrix2.dotProduct(V1, V2)));
                    Y2 = Matrix2.multGamma(Matrix2.multL(Matrix2.multGamma(V2), C2, INV));
                    theta2 = Matrix2.dotProduct(V2, Y2);
                    Y2 = Matrix2.normalize(Y2);
                    current = Matrix2.dotProduct(V2, Y2);
                    temp = Math.abs(current / previous);
                    if (temp <= 1 + piTol && temp >= 1) {
                      break;
                    }
                    previous = current;
                  }
                  for (var _i12 = 0; _i12 < nodeSize; _i12++) {
                    V2[_i12] = Y2[_i12];
                  }
                  xCoords = Matrix2.multCons(V1, Math.sqrt(Math.abs(theta1)));
                  yCoords = Matrix2.multCons(V2, Math.sqrt(Math.abs(theta2)));
                };
                aux.connectComponents(cy2, eles, aux.getTopMostNodes(nodes3), dummyNodes);
                parentNodes.forEach(function(ele) {
                  aux.connectComponents(cy2, eles, aux.getTopMostNodes(ele.descendants().intersection(eles)), dummyNodes);
                });
                var index = 0;
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  if (!nodes3[i2].isParent()) {
                    nodeIndexes.set(nodes3[i2].id(), index++);
                  }
                }
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = dummyNodes.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;
                    nodeIndexes.set(key, index++);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
                for (var _i13 = 0; _i13 < nodeIndexes.size; _i13++) {
                  allNodesNeighborhood[_i13] = [];
                }
                parentNodes.forEach(function(ele) {
                  var children2 = ele.children().intersection(eles);
                  while (children2.nodes(":childless").length == 0) {
                    children2 = children2.nodes()[0].children().intersection(eles);
                  }
                  var index2 = 0;
                  var min4 = children2.nodes(":childless")[0].connectedEdges().length;
                  children2.nodes(":childless").forEach(function(ele2, i3) {
                    if (ele2.connectedEdges().length < min4) {
                      min4 = ele2.connectedEdges().length;
                      index2 = i3;
                    }
                  });
                  parentChildMap.set(ele.id(), children2.nodes(":childless")[index2].id());
                });
                nodes3.forEach(function(ele) {
                  var eleIndex = void 0;
                  if (ele.isParent())
                    eleIndex = nodeIndexes.get(parentChildMap.get(ele.id()));
                  else
                    eleIndex = nodeIndexes.get(ele.id());
                  ele.neighborhood().nodes().forEach(function(node) {
                    if (eles.intersection(ele.edgesWith(node)).length > 0) {
                      if (node.isParent())
                        allNodesNeighborhood[eleIndex].push(parentChildMap.get(node.id()));
                      else
                        allNodesNeighborhood[eleIndex].push(node.id());
                    }
                  });
                });
                var _loop = function _loop2(_key2) {
                  var eleIndex = nodeIndexes.get(_key2);
                  var disconnectedId = void 0;
                  dummyNodes.get(_key2).forEach(function(id2) {
                    if (cy2.getElementById(id2).isParent())
                      disconnectedId = parentChildMap.get(id2);
                    else
                      disconnectedId = id2;
                    allNodesNeighborhood[eleIndex].push(disconnectedId);
                    allNodesNeighborhood[nodeIndexes.get(disconnectedId)].push(_key2);
                  });
                };
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = void 0;
                try {
                  for (var _iterator2 = dummyNodes.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _key = _step2.value;
                    _loop(_key);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
                nodeSize = nodeIndexes.size;
                var spectralResult = void 0;
                if (nodeSize > 2) {
                  sampleSize = nodeSize < options2.sampleSize ? nodeSize : options2.sampleSize;
                  for (var _i14 = 0; _i14 < nodeSize; _i14++) {
                    C2[_i14] = [];
                  }
                  for (var _i15 = 0; _i15 < sampleSize; _i15++) {
                    INV[_i15] = [];
                  }
                  if (options2.quality == "draft" || options2.step == "all") {
                    allBFS(samplingType);
                    sample();
                    powerIteration();
                    spectralResult = { nodeIndexes, xCoords, yCoords };
                  } else {
                    nodeIndexes.forEach(function(value, key2) {
                      xCoords.push(cy2.getElementById(key2).position("x"));
                      yCoords.push(cy2.getElementById(key2).position("y"));
                    });
                    spectralResult = { nodeIndexes, xCoords, yCoords };
                  }
                  return spectralResult;
                } else {
                  var iterator = nodeIndexes.keys();
                  var firstNode = cy2.getElementById(iterator.next().value);
                  var firstNodePos = firstNode.position();
                  var firstNodeWidth = firstNode.outerWidth();
                  xCoords.push(firstNodePos.x);
                  yCoords.push(firstNodePos.y);
                  if (nodeSize == 2) {
                    var secondNode = cy2.getElementById(iterator.next().value);
                    var secondNodeWidth = secondNode.outerWidth();
                    xCoords.push(firstNodePos.x + firstNodeWidth / 2 + secondNodeWidth / 2 + options2.idealEdgeLength);
                    yCoords.push(firstNodePos.y);
                  }
                  spectralResult = { nodeIndexes, xCoords, yCoords };
                  return spectralResult;
                }
              };
              module2.exports = { spectralLayout };
            }
          ),
          /***/
          579: (
            /***/
            (module2, __unused_webpack_exports, __webpack_require__2) => {
              var impl2 = __webpack_require__2(212);
              var register = function register2(cytoscape3) {
                if (!cytoscape3) {
                  return;
                }
                cytoscape3("layout", "fcose", impl2);
              };
              if (typeof cytoscape !== "undefined") {
                register(cytoscape);
              }
              module2.exports = register;
            }
          ),
          /***/
          140: (
            /***/
            (module2) => {
              module2.exports = __WEBPACK_EXTERNAL_MODULE__140__;
            }
          )
          /******/
        };
        var __webpack_module_cache__ = {};
        function __webpack_require__(moduleId) {
          var cachedModule = __webpack_module_cache__[moduleId];
          if (cachedModule !== void 0) {
            return cachedModule.exports;
          }
          var module2 = __webpack_module_cache__[moduleId] = {
            /******/
            // no module.id needed
            /******/
            // no module.loaded needed
            /******/
            exports: {}
            /******/
          };
          __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
          return module2.exports;
        }
        var __webpack_exports__ = __webpack_require__(579);
        return __webpack_exports__;
      })()
    );
  });
})(cytoscapeFcose);
var cytoscapeFcoseExports = cytoscapeFcose.exports;
const fcose = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeFcoseExports);
var cytoscapeCola = { exports: {} };
var dist$1 = {};
var adaptor = {};
var layout3 = {};
var powergraph = {};
var hasRequiredPowergraph;
function requirePowergraph() {
  if (hasRequiredPowergraph)
    return powergraph;
  hasRequiredPowergraph = 1;
  Object.defineProperty(powergraph, "__esModule", { value: true });
  var PowerEdge = function() {
    function PowerEdge2(source, target, type) {
      this.source = source;
      this.target = target;
      this.type = type;
    }
    return PowerEdge2;
  }();
  powergraph.PowerEdge = PowerEdge;
  var Configuration = function() {
    function Configuration2(n2, edges3, linkAccessor, rootGroup) {
      var _this = this;
      this.linkAccessor = linkAccessor;
      this.modules = new Array(n2);
      this.roots = [];
      if (rootGroup) {
        this.initModulesFromGroup(rootGroup);
      } else {
        this.roots.push(new ModuleSet());
        for (var i2 = 0; i2 < n2; ++i2)
          this.roots[0].add(this.modules[i2] = new Module(i2));
      }
      this.R = edges3.length;
      edges3.forEach(function(e2) {
        var s2 = _this.modules[linkAccessor.getSourceIndex(e2)], t3 = _this.modules[linkAccessor.getTargetIndex(e2)], type = linkAccessor.getType(e2);
        s2.outgoing.add(type, t3);
        t3.incoming.add(type, s2);
      });
    }
    Configuration2.prototype.initModulesFromGroup = function(group2) {
      var moduleSet = new ModuleSet();
      this.roots.push(moduleSet);
      for (var i2 = 0; i2 < group2.leaves.length; ++i2) {
        var node = group2.leaves[i2];
        var module = new Module(node.id);
        this.modules[node.id] = module;
        moduleSet.add(module);
      }
      if (group2.groups) {
        for (var j2 = 0; j2 < group2.groups.length; ++j2) {
          var child = group2.groups[j2];
          var definition = {};
          for (var prop in child)
            if (prop !== "leaves" && prop !== "groups" && child.hasOwnProperty(prop))
              definition[prop] = child[prop];
          moduleSet.add(new Module(-1 - j2, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));
        }
      }
      return moduleSet;
    };
    Configuration2.prototype.merge = function(a2, b2, k2) {
      if (k2 === void 0) {
        k2 = 0;
      }
      var inInt = a2.incoming.intersection(b2.incoming), outInt = a2.outgoing.intersection(b2.outgoing);
      var children2 = new ModuleSet();
      children2.add(a2);
      children2.add(b2);
      var m2 = new Module(this.modules.length, outInt, inInt, children2);
      this.modules.push(m2);
      var update2 = function(s2, i2, o2) {
        s2.forAll(function(ms3, linktype) {
          ms3.forAll(function(n2) {
            var nls = n2[i2];
            nls.add(linktype, m2);
            nls.remove(linktype, a2);
            nls.remove(linktype, b2);
            a2[o2].remove(linktype, n2);
            b2[o2].remove(linktype, n2);
          });
        });
      };
      update2(outInt, "incoming", "outgoing");
      update2(inInt, "outgoing", "incoming");
      this.R -= inInt.count() + outInt.count();
      this.roots[k2].remove(a2);
      this.roots[k2].remove(b2);
      this.roots[k2].add(m2);
      return m2;
    };
    Configuration2.prototype.rootMerges = function(k2) {
      if (k2 === void 0) {
        k2 = 0;
      }
      var rs = this.roots[k2].modules();
      var n2 = rs.length;
      var merges = new Array(n2 * (n2 - 1));
      var ctr = 0;
      for (var i2 = 0, i_ = n2 - 1; i2 < i_; ++i2) {
        for (var j2 = i2 + 1; j2 < n2; ++j2) {
          var a2 = rs[i2], b2 = rs[j2];
          merges[ctr] = { id: ctr, nEdges: this.nEdges(a2, b2), a: a2, b: b2 };
          ctr++;
        }
      }
      return merges;
    };
    Configuration2.prototype.greedyMerge = function() {
      for (var i2 = 0; i2 < this.roots.length; ++i2) {
        if (this.roots[i2].modules().length < 2)
          continue;
        var ms3 = this.rootMerges(i2).sort(function(a2, b2) {
          return a2.nEdges == b2.nEdges ? a2.id - b2.id : a2.nEdges - b2.nEdges;
        });
        var m2 = ms3[0];
        if (m2.nEdges >= this.R)
          continue;
        this.merge(m2.a, m2.b, i2);
        return true;
      }
    };
    Configuration2.prototype.nEdges = function(a2, b2) {
      var inInt = a2.incoming.intersection(b2.incoming), outInt = a2.outgoing.intersection(b2.outgoing);
      return this.R - inInt.count() - outInt.count();
    };
    Configuration2.prototype.getGroupHierarchy = function(retargetedEdges) {
      var _this = this;
      var groups = [];
      var root2 = {};
      toGroups(this.roots[0], root2, groups);
      var es = this.allEdges();
      es.forEach(function(e2) {
        var a2 = _this.modules[e2.source];
        var b2 = _this.modules[e2.target];
        retargetedEdges.push(new PowerEdge(typeof a2.gid === "undefined" ? e2.source : groups[a2.gid], typeof b2.gid === "undefined" ? e2.target : groups[b2.gid], e2.type));
      });
      return groups;
    };
    Configuration2.prototype.allEdges = function() {
      var es = [];
      Configuration2.getEdges(this.roots[0], es);
      return es;
    };
    Configuration2.getEdges = function(modules2, es) {
      modules2.forAll(function(m2) {
        m2.getEdges(es);
        Configuration2.getEdges(m2.children, es);
      });
    };
    return Configuration2;
  }();
  powergraph.Configuration = Configuration;
  function toGroups(modules2, group2, groups) {
    modules2.forAll(function(m2) {
      if (m2.isLeaf()) {
        if (!group2.leaves)
          group2.leaves = [];
        group2.leaves.push(m2.id);
      } else {
        var g2 = group2;
        m2.gid = groups.length;
        if (!m2.isIsland() || m2.isPredefined()) {
          g2 = { id: m2.gid };
          if (m2.isPredefined())
            for (var prop in m2.definition)
              g2[prop] = m2.definition[prop];
          if (!group2.groups)
            group2.groups = [];
          group2.groups.push(m2.gid);
          groups.push(g2);
        }
        toGroups(m2.children, g2, groups);
      }
    });
  }
  var Module = function() {
    function Module2(id2, outgoing, incoming, children2, definition) {
      if (outgoing === void 0) {
        outgoing = new LinkSets();
      }
      if (incoming === void 0) {
        incoming = new LinkSets();
      }
      if (children2 === void 0) {
        children2 = new ModuleSet();
      }
      this.id = id2;
      this.outgoing = outgoing;
      this.incoming = incoming;
      this.children = children2;
      this.definition = definition;
    }
    Module2.prototype.getEdges = function(es) {
      var _this = this;
      this.outgoing.forAll(function(ms3, edgetype) {
        ms3.forAll(function(target) {
          es.push(new PowerEdge(_this.id, target.id, edgetype));
        });
      });
    };
    Module2.prototype.isLeaf = function() {
      return this.children.count() === 0;
    };
    Module2.prototype.isIsland = function() {
      return this.outgoing.count() === 0 && this.incoming.count() === 0;
    };
    Module2.prototype.isPredefined = function() {
      return typeof this.definition !== "undefined";
    };
    return Module2;
  }();
  powergraph.Module = Module;
  function intersection(m2, n2) {
    var i2 = {};
    for (var v2 in m2)
      if (v2 in n2)
        i2[v2] = m2[v2];
    return i2;
  }
  var ModuleSet = function() {
    function ModuleSet2() {
      this.table = {};
    }
    ModuleSet2.prototype.count = function() {
      return Object.keys(this.table).length;
    };
    ModuleSet2.prototype.intersection = function(other) {
      var result = new ModuleSet2();
      result.table = intersection(this.table, other.table);
      return result;
    };
    ModuleSet2.prototype.intersectionCount = function(other) {
      return this.intersection(other).count();
    };
    ModuleSet2.prototype.contains = function(id2) {
      return id2 in this.table;
    };
    ModuleSet2.prototype.add = function(m2) {
      this.table[m2.id] = m2;
    };
    ModuleSet2.prototype.remove = function(m2) {
      delete this.table[m2.id];
    };
    ModuleSet2.prototype.forAll = function(f2) {
      for (var mid in this.table) {
        f2(this.table[mid]);
      }
    };
    ModuleSet2.prototype.modules = function() {
      var vs = [];
      this.forAll(function(m2) {
        if (!m2.isPredefined())
          vs.push(m2);
      });
      return vs;
    };
    return ModuleSet2;
  }();
  powergraph.ModuleSet = ModuleSet;
  var LinkSets = function() {
    function LinkSets2() {
      this.sets = {};
      this.n = 0;
    }
    LinkSets2.prototype.count = function() {
      return this.n;
    };
    LinkSets2.prototype.contains = function(id2) {
      var result = false;
      this.forAllModules(function(m2) {
        if (!result && m2.id == id2) {
          result = true;
        }
      });
      return result;
    };
    LinkSets2.prototype.add = function(linktype, m2) {
      var s2 = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();
      s2.add(m2);
      ++this.n;
    };
    LinkSets2.prototype.remove = function(linktype, m2) {
      var ms3 = this.sets[linktype];
      ms3.remove(m2);
      if (ms3.count() === 0) {
        delete this.sets[linktype];
      }
      --this.n;
    };
    LinkSets2.prototype.forAll = function(f2) {
      for (var linktype in this.sets) {
        f2(this.sets[linktype], Number(linktype));
      }
    };
    LinkSets2.prototype.forAllModules = function(f2) {
      this.forAll(function(ms3, lt2) {
        return ms3.forAll(f2);
      });
    };
    LinkSets2.prototype.intersection = function(other) {
      var result = new LinkSets2();
      this.forAll(function(ms3, lt2) {
        if (lt2 in other.sets) {
          var i2 = ms3.intersection(other.sets[lt2]), n2 = i2.count();
          if (n2 > 0) {
            result.sets[lt2] = i2;
            result.n += n2;
          }
        }
      });
      return result;
    };
    return LinkSets2;
  }();
  powergraph.LinkSets = LinkSets;
  function getGroups(nodes3, links, la, rootGroup) {
    var n2 = nodes3.length, c2 = new Configuration(n2, links, la, rootGroup);
    while (c2.greedyMerge())
      ;
    var powerEdges = [];
    var g2 = c2.getGroupHierarchy(powerEdges);
    powerEdges.forEach(function(e2) {
      var f2 = function(end) {
        var g3 = e2[end];
        if (typeof g3 == "number")
          e2[end] = nodes3[g3];
      };
      f2("source");
      f2("target");
    });
    return { groups: g2, powerEdges };
  }
  powergraph.getGroups = getGroups;
  return powergraph;
}
var linklengths = {};
var hasRequiredLinklengths;
function requireLinklengths() {
  if (hasRequiredLinklengths)
    return linklengths;
  hasRequiredLinklengths = 1;
  Object.defineProperty(linklengths, "__esModule", { value: true });
  function unionCount(a2, b2) {
    var u2 = {};
    for (var i2 in a2)
      u2[i2] = {};
    for (var i2 in b2)
      u2[i2] = {};
    return Object.keys(u2).length;
  }
  function intersectionCount(a2, b2) {
    var n2 = 0;
    for (var i2 in a2)
      if (typeof b2[i2] !== "undefined")
        ++n2;
    return n2;
  }
  function getNeighbours(links, la) {
    var neighbours = {};
    var addNeighbours = function(u2, v2) {
      if (typeof neighbours[u2] === "undefined")
        neighbours[u2] = {};
      neighbours[u2][v2] = {};
    };
    links.forEach(function(e2) {
      var u2 = la.getSourceIndex(e2), v2 = la.getTargetIndex(e2);
      addNeighbours(u2, v2);
      addNeighbours(v2, u2);
    });
    return neighbours;
  }
  function computeLinkLengths(links, w2, f2, la) {
    var neighbours = getNeighbours(links, la);
    links.forEach(function(l2) {
      var a2 = neighbours[la.getSourceIndex(l2)];
      var b2 = neighbours[la.getTargetIndex(l2)];
      la.setLength(l2, 1 + w2 * f2(a2, b2));
    });
  }
  function symmetricDiffLinkLengths(links, la, w2) {
    if (w2 === void 0) {
      w2 = 1;
    }
    computeLinkLengths(links, w2, function(a2, b2) {
      return Math.sqrt(unionCount(a2, b2) - intersectionCount(a2, b2));
    }, la);
  }
  linklengths.symmetricDiffLinkLengths = symmetricDiffLinkLengths;
  function jaccardLinkLengths(links, la, w2) {
    if (w2 === void 0) {
      w2 = 1;
    }
    computeLinkLengths(links, w2, function(a2, b2) {
      return Math.min(Object.keys(a2).length, Object.keys(b2).length) < 1.1 ? 0 : intersectionCount(a2, b2) / unionCount(a2, b2);
    }, la);
  }
  linklengths.jaccardLinkLengths = jaccardLinkLengths;
  function generateDirectedEdgeConstraints(n2, links, axis, la) {
    var components2 = stronglyConnectedComponents(n2, links, la);
    var nodes3 = {};
    components2.forEach(function(c2, i2) {
      return c2.forEach(function(v2) {
        return nodes3[v2] = i2;
      });
    });
    var constraints = [];
    links.forEach(function(l2) {
      var ui = la.getSourceIndex(l2), vi = la.getTargetIndex(l2), u2 = nodes3[ui], v2 = nodes3[vi];
      if (u2 !== v2) {
        constraints.push({
          axis,
          left: ui,
          right: vi,
          gap: la.getMinSeparation(l2)
        });
      }
    });
    return constraints;
  }
  linklengths.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;
  function stronglyConnectedComponents(numVertices, edges3, la) {
    var nodes3 = [];
    var index = 0;
    var stack = [];
    var components2 = [];
    function strongConnect(v3) {
      v3.index = v3.lowlink = index++;
      stack.push(v3);
      v3.onStack = true;
      for (var _i2 = 0, _a3 = v3.out; _i2 < _a3.length; _i2++) {
        var w3 = _a3[_i2];
        if (typeof w3.index === "undefined") {
          strongConnect(w3);
          v3.lowlink = Math.min(v3.lowlink, w3.lowlink);
        } else if (w3.onStack) {
          v3.lowlink = Math.min(v3.lowlink, w3.index);
        }
      }
      if (v3.lowlink === v3.index) {
        var component2 = [];
        while (stack.length) {
          w3 = stack.pop();
          w3.onStack = false;
          component2.push(w3);
          if (w3 === v3)
            break;
        }
        components2.push(component2.map(function(v5) {
          return v5.id;
        }));
      }
    }
    for (var i2 = 0; i2 < numVertices; i2++) {
      nodes3.push({ id: i2, out: [] });
    }
    for (var _i = 0, edges_1 = edges3; _i < edges_1.length; _i++) {
      var e2 = edges_1[_i];
      var v_1 = nodes3[la.getSourceIndex(e2)], w2 = nodes3[la.getTargetIndex(e2)];
      v_1.out.push(w2);
    }
    for (var _a2 = 0, nodes_1 = nodes3; _a2 < nodes_1.length; _a2++) {
      var v2 = nodes_1[_a2];
      if (typeof v2.index === "undefined")
        strongConnect(v2);
    }
    return components2;
  }
  linklengths.stronglyConnectedComponents = stronglyConnectedComponents;
  return linklengths;
}
var descent = {};
var hasRequiredDescent;
function requireDescent() {
  if (hasRequiredDescent)
    return descent;
  hasRequiredDescent = 1;
  Object.defineProperty(descent, "__esModule", { value: true });
  var Locks = function() {
    function Locks2() {
      this.locks = {};
    }
    Locks2.prototype.add = function(id2, x2) {
      this.locks[id2] = x2;
    };
    Locks2.prototype.clear = function() {
      this.locks = {};
    };
    Locks2.prototype.isEmpty = function() {
      for (var l2 in this.locks)
        return false;
      return true;
    };
    Locks2.prototype.apply = function(f2) {
      for (var l2 in this.locks) {
        f2(Number(l2), this.locks[l2]);
      }
    };
    return Locks2;
  }();
  descent.Locks = Locks;
  var Descent = function() {
    function Descent2(x2, D2, G2) {
      if (G2 === void 0) {
        G2 = null;
      }
      this.D = D2;
      this.G = G2;
      this.threshold = 1e-4;
      this.numGridSnapNodes = 0;
      this.snapGridSize = 100;
      this.snapStrength = 1e3;
      this.scaleSnapByMaxH = false;
      this.random = new PseudoRandom();
      this.project = null;
      this.x = x2;
      this.k = x2.length;
      var n2 = this.n = x2[0].length;
      this.H = new Array(this.k);
      this.g = new Array(this.k);
      this.Hd = new Array(this.k);
      this.a = new Array(this.k);
      this.b = new Array(this.k);
      this.c = new Array(this.k);
      this.d = new Array(this.k);
      this.e = new Array(this.k);
      this.ia = new Array(this.k);
      this.ib = new Array(this.k);
      this.xtmp = new Array(this.k);
      this.locks = new Locks();
      this.minD = Number.MAX_VALUE;
      var i2 = n2, j2;
      while (i2--) {
        j2 = n2;
        while (--j2 > i2) {
          var d2 = D2[i2][j2];
          if (d2 > 0 && d2 < this.minD) {
            this.minD = d2;
          }
        }
      }
      if (this.minD === Number.MAX_VALUE)
        this.minD = 1;
      i2 = this.k;
      while (i2--) {
        this.g[i2] = new Array(n2);
        this.H[i2] = new Array(n2);
        j2 = n2;
        while (j2--) {
          this.H[i2][j2] = new Array(n2);
        }
        this.Hd[i2] = new Array(n2);
        this.a[i2] = new Array(n2);
        this.b[i2] = new Array(n2);
        this.c[i2] = new Array(n2);
        this.d[i2] = new Array(n2);
        this.e[i2] = new Array(n2);
        this.ia[i2] = new Array(n2);
        this.ib[i2] = new Array(n2);
        this.xtmp[i2] = new Array(n2);
      }
    }
    Descent2.createSquareMatrix = function(n2, f2) {
      var M2 = new Array(n2);
      for (var i2 = 0; i2 < n2; ++i2) {
        M2[i2] = new Array(n2);
        for (var j2 = 0; j2 < n2; ++j2) {
          M2[i2][j2] = f2(i2, j2);
        }
      }
      return M2;
    };
    Descent2.prototype.offsetDir = function() {
      var _this = this;
      var u2 = new Array(this.k);
      var l2 = 0;
      for (var i2 = 0; i2 < this.k; ++i2) {
        var x2 = u2[i2] = this.random.getNextBetween(0.01, 1) - 0.5;
        l2 += x2 * x2;
      }
      l2 = Math.sqrt(l2);
      return u2.map(function(x3) {
        return x3 *= _this.minD / l2;
      });
    };
    Descent2.prototype.computeDerivatives = function(x2) {
      var _this = this;
      var n2 = this.n;
      if (n2 < 1)
        return;
      var i2;
      var d2 = new Array(this.k);
      var d22 = new Array(this.k);
      var Huu = new Array(this.k);
      var maxH = 0;
      for (var u2 = 0; u2 < n2; ++u2) {
        for (i2 = 0; i2 < this.k; ++i2)
          Huu[i2] = this.g[i2][u2] = 0;
        for (var v2 = 0; v2 < n2; ++v2) {
          if (u2 === v2)
            continue;
          var maxDisplaces = n2;
          while (maxDisplaces--) {
            var sd2 = 0;
            for (i2 = 0; i2 < this.k; ++i2) {
              var dx = d2[i2] = x2[i2][u2] - x2[i2][v2];
              sd2 += d22[i2] = dx * dx;
            }
            if (sd2 > 1e-9)
              break;
            var rd = this.offsetDir();
            for (i2 = 0; i2 < this.k; ++i2)
              x2[i2][v2] += rd[i2];
          }
          var l2 = Math.sqrt(sd2);
          var D2 = this.D[u2][v2];
          var weight8 = this.G != null ? this.G[u2][v2] : 1;
          if (weight8 > 1 && l2 > D2 || !isFinite(D2)) {
            for (i2 = 0; i2 < this.k; ++i2)
              this.H[i2][u2][v2] = 0;
            continue;
          }
          if (weight8 > 1) {
            weight8 = 1;
          }
          var D22 = D2 * D2;
          var gs = 2 * weight8 * (l2 - D2) / (D22 * l2);
          var l3 = l2 * l2 * l2;
          var hs = 2 * -weight8 / (D22 * l3);
          if (!isFinite(gs))
            console.log(gs);
          for (i2 = 0; i2 < this.k; ++i2) {
            this.g[i2][u2] += d2[i2] * gs;
            Huu[i2] -= this.H[i2][u2][v2] = hs * (l3 + D2 * (d22[i2] - sd2) + l2 * sd2);
          }
        }
        for (i2 = 0; i2 < this.k; ++i2)
          maxH = Math.max(maxH, this.H[i2][u2][u2] = Huu[i2]);
      }
      var r2 = this.snapGridSize / 2;
      var g2 = this.snapGridSize;
      var w2 = this.snapStrength;
      var k2 = w2 / (r2 * r2);
      var numNodes = this.numGridSnapNodes;
      for (var u2 = 0; u2 < numNodes; ++u2) {
        for (i2 = 0; i2 < this.k; ++i2) {
          var xiu = this.x[i2][u2];
          var m2 = xiu / g2;
          var f2 = m2 % 1;
          var q2 = m2 - f2;
          var a2 = Math.abs(f2);
          var dx = a2 <= 0.5 ? xiu - q2 * g2 : xiu > 0 ? xiu - (q2 + 1) * g2 : xiu - (q2 - 1) * g2;
          if (-r2 < dx && dx <= r2) {
            if (this.scaleSnapByMaxH) {
              this.g[i2][u2] += maxH * k2 * dx;
              this.H[i2][u2][u2] += maxH * k2;
            } else {
              this.g[i2][u2] += k2 * dx;
              this.H[i2][u2][u2] += k2;
            }
          }
        }
      }
      if (!this.locks.isEmpty()) {
        this.locks.apply(function(u3, p2) {
          for (i2 = 0; i2 < _this.k; ++i2) {
            _this.H[i2][u3][u3] += maxH;
            _this.g[i2][u3] -= maxH * (p2[i2] - x2[i2][u3]);
          }
        });
      }
    };
    Descent2.dotProd = function(a2, b2) {
      var x2 = 0, i2 = a2.length;
      while (i2--)
        x2 += a2[i2] * b2[i2];
      return x2;
    };
    Descent2.rightMultiply = function(m2, v2, r2) {
      var i2 = m2.length;
      while (i2--)
        r2[i2] = Descent2.dotProd(m2[i2], v2);
    };
    Descent2.prototype.computeStepSize = function(d2) {
      var numerator = 0, denominator = 0;
      for (var i2 = 0; i2 < this.k; ++i2) {
        numerator += Descent2.dotProd(this.g[i2], d2[i2]);
        Descent2.rightMultiply(this.H[i2], d2[i2], this.Hd[i2]);
        denominator += Descent2.dotProd(d2[i2], this.Hd[i2]);
      }
      if (denominator === 0 || !isFinite(denominator))
        return 0;
      return 1 * numerator / denominator;
    };
    Descent2.prototype.reduceStress = function() {
      this.computeDerivatives(this.x);
      var alpha = this.computeStepSize(this.g);
      for (var i2 = 0; i2 < this.k; ++i2) {
        this.takeDescentStep(this.x[i2], this.g[i2], alpha);
      }
      return this.computeStress();
    };
    Descent2.copy = function(a2, b2) {
      var m2 = a2.length, n2 = b2[0].length;
      for (var i2 = 0; i2 < m2; ++i2) {
        for (var j2 = 0; j2 < n2; ++j2) {
          b2[i2][j2] = a2[i2][j2];
        }
      }
    };
    Descent2.prototype.stepAndProject = function(x0, r2, d2, stepSize) {
      Descent2.copy(x0, r2);
      this.takeDescentStep(r2[0], d2[0], stepSize);
      if (this.project)
        this.project[0](x0[0], x0[1], r2[0]);
      this.takeDescentStep(r2[1], d2[1], stepSize);
      if (this.project)
        this.project[1](r2[0], x0[1], r2[1]);
      for (var i2 = 2; i2 < this.k; i2++)
        this.takeDescentStep(r2[i2], d2[i2], stepSize);
    };
    Descent2.mApply = function(m2, n2, f2) {
      var i2 = m2;
      while (i2-- > 0) {
        var j2 = n2;
        while (j2-- > 0)
          f2(i2, j2);
      }
    };
    Descent2.prototype.matrixApply = function(f2) {
      Descent2.mApply(this.k, this.n, f2);
    };
    Descent2.prototype.computeNextPosition = function(x0, r2) {
      var _this = this;
      this.computeDerivatives(x0);
      var alpha = this.computeStepSize(this.g);
      this.stepAndProject(x0, r2, this.g, alpha);
      if (this.project) {
        this.matrixApply(function(i2, j2) {
          return _this.e[i2][j2] = x0[i2][j2] - r2[i2][j2];
        });
        var beta = this.computeStepSize(this.e);
        beta = Math.max(0.2, Math.min(beta, 1));
        this.stepAndProject(x0, r2, this.e, beta);
      }
    };
    Descent2.prototype.run = function(iterations) {
      var stress = Number.MAX_VALUE, converged = false;
      while (!converged && iterations-- > 0) {
        var s2 = this.rungeKutta();
        converged = Math.abs(stress / s2 - 1) < this.threshold;
        stress = s2;
      }
      return stress;
    };
    Descent2.prototype.rungeKutta = function() {
      var _this = this;
      this.computeNextPosition(this.x, this.a);
      Descent2.mid(this.x, this.a, this.ia);
      this.computeNextPosition(this.ia, this.b);
      Descent2.mid(this.x, this.b, this.ib);
      this.computeNextPosition(this.ib, this.c);
      this.computeNextPosition(this.c, this.d);
      var disp = 0;
      this.matrixApply(function(i2, j2) {
        var x2 = (_this.a[i2][j2] + 2 * _this.b[i2][j2] + 2 * _this.c[i2][j2] + _this.d[i2][j2]) / 6, d2 = _this.x[i2][j2] - x2;
        disp += d2 * d2;
        _this.x[i2][j2] = x2;
      });
      return disp;
    };
    Descent2.mid = function(a2, b2, m2) {
      Descent2.mApply(a2.length, a2[0].length, function(i2, j2) {
        return m2[i2][j2] = a2[i2][j2] + (b2[i2][j2] - a2[i2][j2]) / 2;
      });
    };
    Descent2.prototype.takeDescentStep = function(x2, d2, stepSize) {
      for (var i2 = 0; i2 < this.n; ++i2) {
        x2[i2] = x2[i2] - stepSize * d2[i2];
      }
    };
    Descent2.prototype.computeStress = function() {
      var stress = 0;
      for (var u2 = 0, nMinus1 = this.n - 1; u2 < nMinus1; ++u2) {
        for (var v2 = u2 + 1, n2 = this.n; v2 < n2; ++v2) {
          var l2 = 0;
          for (var i2 = 0; i2 < this.k; ++i2) {
            var dx = this.x[i2][u2] - this.x[i2][v2];
            l2 += dx * dx;
          }
          l2 = Math.sqrt(l2);
          var d2 = this.D[u2][v2];
          if (!isFinite(d2))
            continue;
          var rl = d2 - l2;
          var d22 = d2 * d2;
          stress += rl * rl / d22;
        }
      }
      return stress;
    };
    Descent2.zeroDistance = 1e-10;
    return Descent2;
  }();
  descent.Descent = Descent;
  var PseudoRandom = function() {
    function PseudoRandom2(seed) {
      if (seed === void 0) {
        seed = 1;
      }
      this.seed = seed;
      this.a = 214013;
      this.c = 2531011;
      this.m = 2147483648;
      this.range = 32767;
    }
    PseudoRandom2.prototype.getNext = function() {
      this.seed = (this.seed * this.a + this.c) % this.m;
      return (this.seed >> 16) / this.range;
    };
    PseudoRandom2.prototype.getNextBetween = function(min4, max5) {
      return min4 + this.getNext() * (max5 - min4);
    };
    return PseudoRandom2;
  }();
  descent.PseudoRandom = PseudoRandom;
  return descent;
}
var rectangle = {};
var vpsc = {};
var hasRequiredVpsc;
function requireVpsc() {
  if (hasRequiredVpsc)
    return vpsc;
  hasRequiredVpsc = 1;
  Object.defineProperty(vpsc, "__esModule", { value: true });
  var PositionStats = function() {
    function PositionStats2(scale) {
      this.scale = scale;
      this.AB = 0;
      this.AD = 0;
      this.A2 = 0;
    }
    PositionStats2.prototype.addVariable = function(v2) {
      var ai = this.scale / v2.scale;
      var bi = v2.offset / v2.scale;
      var wi = v2.weight;
      this.AB += wi * ai * bi;
      this.AD += wi * ai * v2.desiredPosition;
      this.A2 += wi * ai * ai;
    };
    PositionStats2.prototype.getPosn = function() {
      return (this.AD - this.AB) / this.A2;
    };
    return PositionStats2;
  }();
  vpsc.PositionStats = PositionStats;
  var Constraint = function() {
    function Constraint2(left, right, gap, equality) {
      if (equality === void 0) {
        equality = false;
      }
      this.left = left;
      this.right = right;
      this.gap = gap;
      this.equality = equality;
      this.active = false;
      this.unsatisfiable = false;
      this.left = left;
      this.right = right;
      this.gap = gap;
      this.equality = equality;
    }
    Constraint2.prototype.slack = function() {
      return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();
    };
    return Constraint2;
  }();
  vpsc.Constraint = Constraint;
  var Variable = function() {
    function Variable2(desiredPosition, weight8, scale) {
      if (weight8 === void 0) {
        weight8 = 1;
      }
      if (scale === void 0) {
        scale = 1;
      }
      this.desiredPosition = desiredPosition;
      this.weight = weight8;
      this.scale = scale;
      this.offset = 0;
    }
    Variable2.prototype.dfdv = function() {
      return 2 * this.weight * (this.position() - this.desiredPosition);
    };
    Variable2.prototype.position = function() {
      return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;
    };
    Variable2.prototype.visitNeighbours = function(prev, f2) {
      var ff = function(c2, next2) {
        return c2.active && prev !== next2 && f2(c2, next2);
      };
      this.cOut.forEach(function(c2) {
        return ff(c2, c2.right);
      });
      this.cIn.forEach(function(c2) {
        return ff(c2, c2.left);
      });
    };
    return Variable2;
  }();
  vpsc.Variable = Variable;
  var Block = function() {
    function Block2(v2) {
      this.vars = [];
      v2.offset = 0;
      this.ps = new PositionStats(v2.scale);
      this.addVariable(v2);
    }
    Block2.prototype.addVariable = function(v2) {
      v2.block = this;
      this.vars.push(v2);
      this.ps.addVariable(v2);
      this.posn = this.ps.getPosn();
    };
    Block2.prototype.updateWeightedPosition = function() {
      this.ps.AB = this.ps.AD = this.ps.A2 = 0;
      for (var i2 = 0, n2 = this.vars.length; i2 < n2; ++i2)
        this.ps.addVariable(this.vars[i2]);
      this.posn = this.ps.getPosn();
    };
    Block2.prototype.compute_lm = function(v2, u2, postAction) {
      var _this = this;
      var dfdv = v2.dfdv();
      v2.visitNeighbours(u2, function(c2, next2) {
        var _dfdv = _this.compute_lm(next2, v2, postAction);
        if (next2 === c2.right) {
          dfdv += _dfdv * c2.left.scale;
          c2.lm = _dfdv;
        } else {
          dfdv += _dfdv * c2.right.scale;
          c2.lm = -_dfdv;
        }
        postAction(c2);
      });
      return dfdv / v2.scale;
    };
    Block2.prototype.populateSplitBlock = function(v2, prev) {
      var _this = this;
      v2.visitNeighbours(prev, function(c2, next2) {
        next2.offset = v2.offset + (next2 === c2.right ? c2.gap : -c2.gap);
        _this.addVariable(next2);
        _this.populateSplitBlock(next2, v2);
      });
    };
    Block2.prototype.traverse = function(visit, acc, v2, prev) {
      var _this = this;
      if (v2 === void 0) {
        v2 = this.vars[0];
      }
      if (prev === void 0) {
        prev = null;
      }
      v2.visitNeighbours(prev, function(c2, next2) {
        acc.push(visit(c2));
        _this.traverse(visit, acc, next2, v2);
      });
    };
    Block2.prototype.findMinLM = function() {
      var m2 = null;
      this.compute_lm(this.vars[0], null, function(c2) {
        if (!c2.equality && (m2 === null || c2.lm < m2.lm))
          m2 = c2;
      });
      return m2;
    };
    Block2.prototype.findMinLMBetween = function(lv, rv) {
      this.compute_lm(lv, null, function() {
      });
      var m2 = null;
      this.findPath(lv, null, rv, function(c2, next2) {
        if (!c2.equality && c2.right === next2 && (m2 === null || c2.lm < m2.lm))
          m2 = c2;
      });
      return m2;
    };
    Block2.prototype.findPath = function(v2, prev, to, visit) {
      var _this = this;
      var endFound = false;
      v2.visitNeighbours(prev, function(c2, next2) {
        if (!endFound && (next2 === to || _this.findPath(next2, v2, to, visit))) {
          endFound = true;
          visit(c2, next2);
        }
      });
      return endFound;
    };
    Block2.prototype.isActiveDirectedPathBetween = function(u2, v2) {
      if (u2 === v2)
        return true;
      var i2 = u2.cOut.length;
      while (i2--) {
        var c2 = u2.cOut[i2];
        if (c2.active && this.isActiveDirectedPathBetween(c2.right, v2))
          return true;
      }
      return false;
    };
    Block2.split = function(c2) {
      c2.active = false;
      return [Block2.createSplitBlock(c2.left), Block2.createSplitBlock(c2.right)];
    };
    Block2.createSplitBlock = function(startVar) {
      var b2 = new Block2(startVar);
      b2.populateSplitBlock(startVar, null);
      return b2;
    };
    Block2.prototype.splitBetween = function(vl, vr) {
      var c2 = this.findMinLMBetween(vl, vr);
      if (c2 !== null) {
        var bs = Block2.split(c2);
        return { constraint: c2, lb: bs[0], rb: bs[1] };
      }
      return null;
    };
    Block2.prototype.mergeAcross = function(b2, c2, dist4) {
      c2.active = true;
      for (var i2 = 0, n2 = b2.vars.length; i2 < n2; ++i2) {
        var v2 = b2.vars[i2];
        v2.offset += dist4;
        this.addVariable(v2);
      }
      this.posn = this.ps.getPosn();
    };
    Block2.prototype.cost = function() {
      var sum = 0, i2 = this.vars.length;
      while (i2--) {
        var v2 = this.vars[i2], d2 = v2.position() - v2.desiredPosition;
        sum += d2 * d2 * v2.weight;
      }
      return sum;
    };
    return Block2;
  }();
  vpsc.Block = Block;
  var Blocks = function() {
    function Blocks2(vs) {
      this.vs = vs;
      var n2 = vs.length;
      this.list = new Array(n2);
      while (n2--) {
        var b2 = new Block(vs[n2]);
        this.list[n2] = b2;
        b2.blockInd = n2;
      }
    }
    Blocks2.prototype.cost = function() {
      var sum = 0, i2 = this.list.length;
      while (i2--)
        sum += this.list[i2].cost();
      return sum;
    };
    Blocks2.prototype.insert = function(b2) {
      b2.blockInd = this.list.length;
      this.list.push(b2);
    };
    Blocks2.prototype.remove = function(b2) {
      var last2 = this.list.length - 1;
      var swapBlock = this.list[last2];
      this.list.length = last2;
      if (b2 !== swapBlock) {
        this.list[b2.blockInd] = swapBlock;
        swapBlock.blockInd = b2.blockInd;
      }
    };
    Blocks2.prototype.merge = function(c2) {
      var l2 = c2.left.block, r2 = c2.right.block;
      var dist4 = c2.right.offset - c2.left.offset - c2.gap;
      if (l2.vars.length < r2.vars.length) {
        r2.mergeAcross(l2, c2, dist4);
        this.remove(l2);
      } else {
        l2.mergeAcross(r2, c2, -dist4);
        this.remove(r2);
      }
    };
    Blocks2.prototype.forEach = function(f2) {
      this.list.forEach(f2);
    };
    Blocks2.prototype.updateBlockPositions = function() {
      this.list.forEach(function(b2) {
        return b2.updateWeightedPosition();
      });
    };
    Blocks2.prototype.split = function(inactive) {
      var _this = this;
      this.updateBlockPositions();
      this.list.forEach(function(b2) {
        var v2 = b2.findMinLM();
        if (v2 !== null && v2.lm < Solver.LAGRANGIAN_TOLERANCE) {
          b2 = v2.left.block;
          Block.split(v2).forEach(function(nb) {
            return _this.insert(nb);
          });
          _this.remove(b2);
          inactive.push(v2);
        }
      });
    };
    return Blocks2;
  }();
  vpsc.Blocks = Blocks;
  var Solver = function() {
    function Solver2(vs, cs) {
      this.vs = vs;
      this.cs = cs;
      this.vs = vs;
      vs.forEach(function(v2) {
        v2.cIn = [], v2.cOut = [];
      });
      this.cs = cs;
      cs.forEach(function(c2) {
        c2.left.cOut.push(c2);
        c2.right.cIn.push(c2);
      });
      this.inactive = cs.map(function(c2) {
        c2.active = false;
        return c2;
      });
      this.bs = null;
    }
    Solver2.prototype.cost = function() {
      return this.bs.cost();
    };
    Solver2.prototype.setStartingPositions = function(ps) {
      this.inactive = this.cs.map(function(c2) {
        c2.active = false;
        return c2;
      });
      this.bs = new Blocks(this.vs);
      this.bs.forEach(function(b2, i2) {
        return b2.posn = ps[i2];
      });
    };
    Solver2.prototype.setDesiredPositions = function(ps) {
      this.vs.forEach(function(v2, i2) {
        return v2.desiredPosition = ps[i2];
      });
    };
    Solver2.prototype.mostViolated = function() {
      var minSlack = Number.MAX_VALUE, v2 = null, l2 = this.inactive, n2 = l2.length, deletePoint = n2;
      for (var i2 = 0; i2 < n2; ++i2) {
        var c2 = l2[i2];
        if (c2.unsatisfiable)
          continue;
        var slack = c2.slack();
        if (c2.equality || slack < minSlack) {
          minSlack = slack;
          v2 = c2;
          deletePoint = i2;
          if (c2.equality)
            break;
        }
      }
      if (deletePoint !== n2 && (minSlack < Solver2.ZERO_UPPERBOUND && !v2.active || v2.equality)) {
        l2[deletePoint] = l2[n2 - 1];
        l2.length = n2 - 1;
      }
      return v2;
    };
    Solver2.prototype.satisfy = function() {
      if (this.bs == null) {
        this.bs = new Blocks(this.vs);
      }
      this.bs.split(this.inactive);
      var v2 = null;
      while ((v2 = this.mostViolated()) && (v2.equality || v2.slack() < Solver2.ZERO_UPPERBOUND && !v2.active)) {
        var lb = v2.left.block, rb = v2.right.block;
        if (lb !== rb) {
          this.bs.merge(v2);
        } else {
          if (lb.isActiveDirectedPathBetween(v2.right, v2.left)) {
            v2.unsatisfiable = true;
            continue;
          }
          var split = lb.splitBetween(v2.left, v2.right);
          if (split !== null) {
            this.bs.insert(split.lb);
            this.bs.insert(split.rb);
            this.bs.remove(lb);
            this.inactive.push(split.constraint);
          } else {
            v2.unsatisfiable = true;
            continue;
          }
          if (v2.slack() >= 0) {
            this.inactive.push(v2);
          } else {
            this.bs.merge(v2);
          }
        }
      }
    };
    Solver2.prototype.solve = function() {
      this.satisfy();
      var lastcost = Number.MAX_VALUE, cost = this.bs.cost();
      while (Math.abs(lastcost - cost) > 1e-4) {
        this.satisfy();
        lastcost = cost;
        cost = this.bs.cost();
      }
      return cost;
    };
    Solver2.LAGRANGIAN_TOLERANCE = -1e-4;
    Solver2.ZERO_UPPERBOUND = -1e-10;
    return Solver2;
  }();
  vpsc.Solver = Solver;
  function removeOverlapInOneDimension(spans, lowerBound, upperBound) {
    var vs = spans.map(function(s2) {
      return new Variable(s2.desiredCenter);
    });
    var cs = [];
    var n2 = spans.length;
    for (var i2 = 0; i2 < n2 - 1; i2++) {
      var left = spans[i2], right = spans[i2 + 1];
      cs.push(new Constraint(vs[i2], vs[i2 + 1], (left.size + right.size) / 2));
    }
    var leftMost = vs[0], rightMost = vs[n2 - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n2 - 1].size / 2;
    var vLower = null, vUpper = null;
    if (lowerBound) {
      vLower = new Variable(lowerBound, leftMost.weight * 1e3);
      vs.push(vLower);
      cs.push(new Constraint(vLower, leftMost, leftMostSize));
    }
    if (upperBound) {
      vUpper = new Variable(upperBound, rightMost.weight * 1e3);
      vs.push(vUpper);
      cs.push(new Constraint(rightMost, vUpper, rightMostSize));
    }
    var solver = new Solver(vs, cs);
    solver.solve();
    return {
      newCenters: vs.slice(0, spans.length).map(function(v2) {
        return v2.position();
      }),
      lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,
      upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize
    };
  }
  vpsc.removeOverlapInOneDimension = removeOverlapInOneDimension;
  return vpsc;
}
var rbtree = {};
var hasRequiredRbtree;
function requireRbtree() {
  if (hasRequiredRbtree)
    return rbtree;
  hasRequiredRbtree = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(rbtree, "__esModule", { value: true });
  var TreeBase = function() {
    function TreeBase2() {
      this.findIter = function(data4) {
        var res = this._root;
        var iter = this.iterator();
        while (res !== null) {
          var c2 = this._comparator(data4, res.data);
          if (c2 === 0) {
            iter._cursor = res;
            return iter;
          } else {
            iter._ancestors.push(res);
            res = res.get_child(c2 > 0);
          }
        }
        return null;
      };
    }
    TreeBase2.prototype.clear = function() {
      this._root = null;
      this.size = 0;
    };
    TreeBase2.prototype.find = function(data4) {
      var res = this._root;
      while (res !== null) {
        var c2 = this._comparator(data4, res.data);
        if (c2 === 0) {
          return res.data;
        } else {
          res = res.get_child(c2 > 0);
        }
      }
      return null;
    };
    TreeBase2.prototype.lowerBound = function(data4) {
      return this._bound(data4, this._comparator);
    };
    TreeBase2.prototype.upperBound = function(data4) {
      var cmp = this._comparator;
      function reverse_cmp(a2, b2) {
        return cmp(b2, a2);
      }
      return this._bound(data4, reverse_cmp);
    };
    TreeBase2.prototype.min = function() {
      var res = this._root;
      if (res === null) {
        return null;
      }
      while (res.left !== null) {
        res = res.left;
      }
      return res.data;
    };
    TreeBase2.prototype.max = function() {
      var res = this._root;
      if (res === null) {
        return null;
      }
      while (res.right !== null) {
        res = res.right;
      }
      return res.data;
    };
    TreeBase2.prototype.iterator = function() {
      return new Iterator(this);
    };
    TreeBase2.prototype.each = function(cb) {
      var it2 = this.iterator(), data4;
      while ((data4 = it2.next()) !== null) {
        cb(data4);
      }
    };
    TreeBase2.prototype.reach = function(cb) {
      var it2 = this.iterator(), data4;
      while ((data4 = it2.prev()) !== null) {
        cb(data4);
      }
    };
    TreeBase2.prototype._bound = function(data4, cmp) {
      var cur = this._root;
      var iter = this.iterator();
      while (cur !== null) {
        var c2 = this._comparator(data4, cur.data);
        if (c2 === 0) {
          iter._cursor = cur;
          return iter;
        }
        iter._ancestors.push(cur);
        cur = cur.get_child(c2 > 0);
      }
      for (var i2 = iter._ancestors.length - 1; i2 >= 0; --i2) {
        cur = iter._ancestors[i2];
        if (cmp(data4, cur.data) > 0) {
          iter._cursor = cur;
          iter._ancestors.length = i2;
          return iter;
        }
      }
      iter._ancestors.length = 0;
      return iter;
    };
    return TreeBase2;
  }();
  rbtree.TreeBase = TreeBase;
  var Iterator = function() {
    function Iterator2(tree) {
      this._tree = tree;
      this._ancestors = [];
      this._cursor = null;
    }
    Iterator2.prototype.data = function() {
      return this._cursor !== null ? this._cursor.data : null;
    };
    Iterator2.prototype.next = function() {
      if (this._cursor === null) {
        var root2 = this._tree._root;
        if (root2 !== null) {
          this._minNode(root2);
        }
      } else {
        if (this._cursor.right === null) {
          var save;
          do {
            save = this._cursor;
            if (this._ancestors.length) {
              this._cursor = this._ancestors.pop();
            } else {
              this._cursor = null;
              break;
            }
          } while (this._cursor.right === save);
        } else {
          this._ancestors.push(this._cursor);
          this._minNode(this._cursor.right);
        }
      }
      return this._cursor !== null ? this._cursor.data : null;
    };
    Iterator2.prototype.prev = function() {
      if (this._cursor === null) {
        var root2 = this._tree._root;
        if (root2 !== null) {
          this._maxNode(root2);
        }
      } else {
        if (this._cursor.left === null) {
          var save;
          do {
            save = this._cursor;
            if (this._ancestors.length) {
              this._cursor = this._ancestors.pop();
            } else {
              this._cursor = null;
              break;
            }
          } while (this._cursor.left === save);
        } else {
          this._ancestors.push(this._cursor);
          this._maxNode(this._cursor.left);
        }
      }
      return this._cursor !== null ? this._cursor.data : null;
    };
    Iterator2.prototype._minNode = function(start) {
      while (start.left !== null) {
        this._ancestors.push(start);
        start = start.left;
      }
      this._cursor = start;
    };
    Iterator2.prototype._maxNode = function(start) {
      while (start.right !== null) {
        this._ancestors.push(start);
        start = start.right;
      }
      this._cursor = start;
    };
    return Iterator2;
  }();
  rbtree.Iterator = Iterator;
  var Node2 = function() {
    function Node3(data4) {
      this.data = data4;
      this.left = null;
      this.right = null;
      this.red = true;
    }
    Node3.prototype.get_child = function(dir) {
      return dir ? this.right : this.left;
    };
    Node3.prototype.set_child = function(dir, val) {
      if (dir) {
        this.right = val;
      } else {
        this.left = val;
      }
    };
    return Node3;
  }();
  var RBTree = function(_super) {
    __extends2(RBTree2, _super);
    function RBTree2(comparator) {
      var _this = _super.call(this) || this;
      _this._root = null;
      _this._comparator = comparator;
      _this.size = 0;
      return _this;
    }
    RBTree2.prototype.insert = function(data4) {
      var ret = false;
      if (this._root === null) {
        this._root = new Node2(data4);
        ret = true;
        this.size++;
      } else {
        var head = new Node2(void 0);
        var dir = false;
        var last2 = false;
        var gp = null;
        var ggp = head;
        var p2 = null;
        var node = this._root;
        ggp.right = this._root;
        while (true) {
          if (node === null) {
            node = new Node2(data4);
            p2.set_child(dir, node);
            ret = true;
            this.size++;
          } else if (RBTree2.is_red(node.left) && RBTree2.is_red(node.right)) {
            node.red = true;
            node.left.red = false;
            node.right.red = false;
          }
          if (RBTree2.is_red(node) && RBTree2.is_red(p2)) {
            var dir2 = ggp.right === gp;
            if (node === p2.get_child(last2)) {
              ggp.set_child(dir2, RBTree2.single_rotate(gp, !last2));
            } else {
              ggp.set_child(dir2, RBTree2.double_rotate(gp, !last2));
            }
          }
          var cmp = this._comparator(node.data, data4);
          if (cmp === 0) {
            break;
          }
          last2 = dir;
          dir = cmp < 0;
          if (gp !== null) {
            ggp = gp;
          }
          gp = p2;
          p2 = node;
          node = node.get_child(dir);
        }
        this._root = head.right;
      }
      this._root.red = false;
      return ret;
    };
    RBTree2.prototype.remove = function(data4) {
      if (this._root === null) {
        return false;
      }
      var head = new Node2(void 0);
      var node = head;
      node.right = this._root;
      var p2 = null;
      var gp = null;
      var found = null;
      var dir = true;
      while (node.get_child(dir) !== null) {
        var last2 = dir;
        gp = p2;
        p2 = node;
        node = node.get_child(dir);
        var cmp = this._comparator(data4, node.data);
        dir = cmp > 0;
        if (cmp === 0) {
          found = node;
        }
        if (!RBTree2.is_red(node) && !RBTree2.is_red(node.get_child(dir))) {
          if (RBTree2.is_red(node.get_child(!dir))) {
            var sr = RBTree2.single_rotate(node, dir);
            p2.set_child(last2, sr);
            p2 = sr;
          } else if (!RBTree2.is_red(node.get_child(!dir))) {
            var sibling = p2.get_child(!last2);
            if (sibling !== null) {
              if (!RBTree2.is_red(sibling.get_child(!last2)) && !RBTree2.is_red(sibling.get_child(last2))) {
                p2.red = false;
                sibling.red = true;
                node.red = true;
              } else {
                var dir2 = gp.right === p2;
                if (RBTree2.is_red(sibling.get_child(last2))) {
                  gp.set_child(dir2, RBTree2.double_rotate(p2, last2));
                } else if (RBTree2.is_red(sibling.get_child(!last2))) {
                  gp.set_child(dir2, RBTree2.single_rotate(p2, last2));
                }
                var gpc = gp.get_child(dir2);
                gpc.red = true;
                node.red = true;
                gpc.left.red = false;
                gpc.right.red = false;
              }
            }
          }
        }
      }
      if (found !== null) {
        found.data = node.data;
        p2.set_child(p2.right === node, node.get_child(node.left === null));
        this.size--;
      }
      this._root = head.right;
      if (this._root !== null) {
        this._root.red = false;
      }
      return found !== null;
    };
    RBTree2.is_red = function(node) {
      return node !== null && node.red;
    };
    RBTree2.single_rotate = function(root2, dir) {
      var save = root2.get_child(!dir);
      root2.set_child(!dir, save.get_child(dir));
      save.set_child(dir, root2);
      root2.red = true;
      save.red = false;
      return save;
    };
    RBTree2.double_rotate = function(root2, dir) {
      root2.set_child(!dir, RBTree2.single_rotate(root2.get_child(!dir), !dir));
      return RBTree2.single_rotate(root2, dir);
    };
    return RBTree2;
  }(TreeBase);
  rbtree.RBTree = RBTree;
  return rbtree;
}
var hasRequiredRectangle;
function requireRectangle() {
  if (hasRequiredRectangle)
    return rectangle;
  hasRequiredRectangle = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(rectangle, "__esModule", { value: true });
  var vpsc_1 = requireVpsc();
  var rbtree_1 = requireRbtree();
  function computeGroupBounds(g2) {
    g2.bounds = typeof g2.leaves !== "undefined" ? g2.leaves.reduce(function(r2, c2) {
      return c2.bounds.union(r2);
    }, Rectangle.empty()) : Rectangle.empty();
    if (typeof g2.groups !== "undefined")
      g2.bounds = g2.groups.reduce(function(r2, c2) {
        return computeGroupBounds(c2).union(r2);
      }, g2.bounds);
    g2.bounds = g2.bounds.inflate(g2.padding);
    return g2.bounds;
  }
  rectangle.computeGroupBounds = computeGroupBounds;
  var Rectangle = function() {
    function Rectangle2(x2, X2, y2, Y2) {
      this.x = x2;
      this.X = X2;
      this.y = y2;
      this.Y = Y2;
    }
    Rectangle2.empty = function() {
      return new Rectangle2(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
    };
    Rectangle2.prototype.cx = function() {
      return (this.x + this.X) / 2;
    };
    Rectangle2.prototype.cy = function() {
      return (this.y + this.Y) / 2;
    };
    Rectangle2.prototype.overlapX = function(r2) {
      var ux = this.cx(), vx = r2.cx();
      if (ux <= vx && r2.x < this.X)
        return this.X - r2.x;
      if (vx <= ux && this.x < r2.X)
        return r2.X - this.x;
      return 0;
    };
    Rectangle2.prototype.overlapY = function(r2) {
      var uy = this.cy(), vy = r2.cy();
      if (uy <= vy && r2.y < this.Y)
        return this.Y - r2.y;
      if (vy <= uy && this.y < r2.Y)
        return r2.Y - this.y;
      return 0;
    };
    Rectangle2.prototype.setXCentre = function(cx) {
      var dx = cx - this.cx();
      this.x += dx;
      this.X += dx;
    };
    Rectangle2.prototype.setYCentre = function(cy2) {
      var dy = cy2 - this.cy();
      this.y += dy;
      this.Y += dy;
    };
    Rectangle2.prototype.width = function() {
      return this.X - this.x;
    };
    Rectangle2.prototype.height = function() {
      return this.Y - this.y;
    };
    Rectangle2.prototype.union = function(r2) {
      return new Rectangle2(Math.min(this.x, r2.x), Math.max(this.X, r2.X), Math.min(this.y, r2.y), Math.max(this.Y, r2.Y));
    };
    Rectangle2.prototype.lineIntersections = function(x1, y1, x2, y2) {
      var sides = [
        [this.x, this.y, this.X, this.y],
        [this.X, this.y, this.X, this.Y],
        [this.X, this.Y, this.x, this.Y],
        [this.x, this.Y, this.x, this.y]
      ];
      var intersections = [];
      for (var i2 = 0; i2 < 4; ++i2) {
        var r2 = Rectangle2.lineIntersection(x1, y1, x2, y2, sides[i2][0], sides[i2][1], sides[i2][2], sides[i2][3]);
        if (r2 !== null)
          intersections.push({ x: r2.x, y: r2.y });
      }
      return intersections;
    };
    Rectangle2.prototype.rayIntersection = function(x2, y2) {
      var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);
      return ints.length > 0 ? ints[0] : null;
    };
    Rectangle2.prototype.vertices = function() {
      return [
        { x: this.x, y: this.y },
        { x: this.X, y: this.y },
        { x: this.X, y: this.Y },
        { x: this.x, y: this.Y }
      ];
    };
    Rectangle2.lineIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
      var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;
      if (denominator == 0)
        return null;
      var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a2 = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b2 = numb / denominator;
      if (a2 >= 0 && a2 <= 1 && b2 >= 0 && b2 <= 1) {
        return {
          x: x1 + a2 * dx12,
          y: y1 + a2 * dy12
        };
      }
      return null;
    };
    Rectangle2.prototype.inflate = function(pad) {
      return new Rectangle2(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);
    };
    return Rectangle2;
  }();
  rectangle.Rectangle = Rectangle;
  function makeEdgeBetween(source, target, ah) {
    var si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() }, ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() }, dx = ti.x - si.x, dy = ti.y - si.y, l2 = Math.sqrt(dx * dx + dy * dy), al = l2 - ah;
    return {
      sourceIntersection: si,
      targetIntersection: ti,
      arrowStart: { x: si.x + al * dx / l2, y: si.y + al * dy / l2 }
    };
  }
  rectangle.makeEdgeBetween = makeEdgeBetween;
  function makeEdgeTo(s2, target, ah) {
    var ti = target.rayIntersection(s2.x, s2.y);
    if (!ti)
      ti = { x: target.cx(), y: target.cy() };
    var dx = ti.x - s2.x, dy = ti.y - s2.y, l2 = Math.sqrt(dx * dx + dy * dy);
    return { x: ti.x - ah * dx / l2, y: ti.y - ah * dy / l2 };
  }
  rectangle.makeEdgeTo = makeEdgeTo;
  var Node2 = function() {
    function Node3(v2, r2, pos) {
      this.v = v2;
      this.r = r2;
      this.pos = pos;
      this.prev = makeRBTree();
      this.next = makeRBTree();
    }
    return Node3;
  }();
  var Event3 = function() {
    function Event4(isOpen, v2, pos) {
      this.isOpen = isOpen;
      this.v = v2;
      this.pos = pos;
    }
    return Event4;
  }();
  function compareEvents(a2, b2) {
    if (a2.pos > b2.pos) {
      return 1;
    }
    if (a2.pos < b2.pos) {
      return -1;
    }
    if (a2.isOpen) {
      return -1;
    }
    if (b2.isOpen) {
      return 1;
    }
    return 0;
  }
  function makeRBTree() {
    return new rbtree_1.RBTree(function(a2, b2) {
      return a2.pos - b2.pos;
    });
  }
  var xRect = {
    getCentre: function(r2) {
      return r2.cx();
    },
    getOpen: function(r2) {
      return r2.y;
    },
    getClose: function(r2) {
      return r2.Y;
    },
    getSize: function(r2) {
      return r2.width();
    },
    makeRect: function(open2, close, center2, size3) {
      return new Rectangle(center2 - size3 / 2, center2 + size3 / 2, open2, close);
    },
    findNeighbours: findXNeighbours
  };
  var yRect = {
    getCentre: function(r2) {
      return r2.cy();
    },
    getOpen: function(r2) {
      return r2.x;
    },
    getClose: function(r2) {
      return r2.X;
    },
    getSize: function(r2) {
      return r2.height();
    },
    makeRect: function(open2, close, center2, size3) {
      return new Rectangle(open2, close, center2 - size3 / 2, center2 + size3 / 2);
    },
    findNeighbours: findYNeighbours
  };
  function generateGroupConstraints(root2, f2, minSep, isContained) {
    if (isContained === void 0) {
      isContained = false;
    }
    var padding = root2.padding, gn = typeof root2.groups !== "undefined" ? root2.groups.length : 0, ln2 = typeof root2.leaves !== "undefined" ? root2.leaves.length : 0, childConstraints = !gn ? [] : root2.groups.reduce(function(ccs, g2) {
      return ccs.concat(generateGroupConstraints(g2, f2, minSep, true));
    }, []), n2 = (isContained ? 2 : 0) + ln2 + gn, vs = new Array(n2), rs = new Array(n2), i2 = 0, add3 = function(r2, v2) {
      rs[i2] = r2;
      vs[i2++] = v2;
    };
    if (isContained) {
      var b2 = root2.bounds, c2 = f2.getCentre(b2), s2 = f2.getSize(b2) / 2, open2 = f2.getOpen(b2), close = f2.getClose(b2), min4 = c2 - s2 + padding / 2, max5 = c2 + s2 - padding / 2;
      root2.minVar.desiredPosition = min4;
      add3(f2.makeRect(open2, close, min4, padding), root2.minVar);
      root2.maxVar.desiredPosition = max5;
      add3(f2.makeRect(open2, close, max5, padding), root2.maxVar);
    }
    if (ln2)
      root2.leaves.forEach(function(l2) {
        return add3(l2.bounds, l2.variable);
      });
    if (gn)
      root2.groups.forEach(function(g2) {
        var b3 = g2.bounds;
        add3(f2.makeRect(f2.getOpen(b3), f2.getClose(b3), f2.getCentre(b3), f2.getSize(b3)), g2.minVar);
      });
    var cs = generateConstraints(rs, vs, f2, minSep);
    if (gn) {
      vs.forEach(function(v2) {
        v2.cOut = [], v2.cIn = [];
      });
      cs.forEach(function(c3) {
        c3.left.cOut.push(c3), c3.right.cIn.push(c3);
      });
      root2.groups.forEach(function(g2) {
        var gapAdjustment = (g2.padding - f2.getSize(g2.bounds)) / 2;
        g2.minVar.cIn.forEach(function(c3) {
          return c3.gap += gapAdjustment;
        });
        g2.minVar.cOut.forEach(function(c3) {
          c3.left = g2.maxVar;
          c3.gap += gapAdjustment;
        });
      });
    }
    return childConstraints.concat(cs);
  }
  function generateConstraints(rs, vars, rect, minSep) {
    var i2, n2 = rs.length;
    var N2 = 2 * n2;
    console.assert(vars.length >= n2);
    var events = new Array(N2);
    for (i2 = 0; i2 < n2; ++i2) {
      var r2 = rs[i2];
      var v2 = new Node2(vars[i2], r2, rect.getCentre(r2));
      events[i2] = new Event3(true, v2, rect.getOpen(r2));
      events[i2 + n2] = new Event3(false, v2, rect.getClose(r2));
    }
    events.sort(compareEvents);
    var cs = new Array();
    var scanline = makeRBTree();
    for (i2 = 0; i2 < N2; ++i2) {
      var e2 = events[i2];
      var v2 = e2.v;
      if (e2.isOpen) {
        scanline.insert(v2);
        rect.findNeighbours(v2, scanline);
      } else {
        scanline.remove(v2);
        var makeConstraint = function(l2, r3) {
          var sep = (rect.getSize(l2.r) + rect.getSize(r3.r)) / 2 + minSep;
          cs.push(new vpsc_1.Constraint(l2.v, r3.v, sep));
        };
        var visitNeighbours = function(forward, reverse2, mkcon) {
          var u2, it2 = v2[forward].iterator();
          while ((u2 = it2[forward]()) !== null) {
            mkcon(u2, v2);
            u2[reverse2].remove(v2);
          }
        };
        visitNeighbours("prev", "next", function(u2, v3) {
          return makeConstraint(u2, v3);
        });
        visitNeighbours("next", "prev", function(u2, v3) {
          return makeConstraint(v3, u2);
        });
      }
    }
    console.assert(scanline.size === 0);
    return cs;
  }
  function findXNeighbours(v2, scanline) {
    var f2 = function(forward, reverse2) {
      var it2 = scanline.findIter(v2);
      var u2;
      while ((u2 = it2[forward]()) !== null) {
        var uovervX = u2.r.overlapX(v2.r);
        if (uovervX <= 0 || uovervX <= u2.r.overlapY(v2.r)) {
          v2[forward].insert(u2);
          u2[reverse2].insert(v2);
        }
        if (uovervX <= 0) {
          break;
        }
      }
    };
    f2("next", "prev");
    f2("prev", "next");
  }
  function findYNeighbours(v2, scanline) {
    var f2 = function(forward, reverse2) {
      var u2 = scanline.findIter(v2)[forward]();
      if (u2 !== null && u2.r.overlapX(v2.r) > 0) {
        v2[forward].insert(u2);
        u2[reverse2].insert(v2);
      }
    };
    f2("next", "prev");
    f2("prev", "next");
  }
  function generateXConstraints(rs, vars) {
    return generateConstraints(rs, vars, xRect, 1e-6);
  }
  rectangle.generateXConstraints = generateXConstraints;
  function generateYConstraints(rs, vars) {
    return generateConstraints(rs, vars, yRect, 1e-6);
  }
  rectangle.generateYConstraints = generateYConstraints;
  function generateXGroupConstraints(root2) {
    return generateGroupConstraints(root2, xRect, 1e-6);
  }
  rectangle.generateXGroupConstraints = generateXGroupConstraints;
  function generateYGroupConstraints(root2) {
    return generateGroupConstraints(root2, yRect, 1e-6);
  }
  rectangle.generateYGroupConstraints = generateYGroupConstraints;
  function removeOverlaps(rs) {
    var vs = rs.map(function(r2) {
      return new vpsc_1.Variable(r2.cx());
    });
    var cs = generateXConstraints(rs, vs);
    var solver = new vpsc_1.Solver(vs, cs);
    solver.solve();
    vs.forEach(function(v2, i2) {
      return rs[i2].setXCentre(v2.position());
    });
    vs = rs.map(function(r2) {
      return new vpsc_1.Variable(r2.cy());
    });
    cs = generateYConstraints(rs, vs);
    solver = new vpsc_1.Solver(vs, cs);
    solver.solve();
    vs.forEach(function(v2, i2) {
      return rs[i2].setYCentre(v2.position());
    });
  }
  rectangle.removeOverlaps = removeOverlaps;
  var IndexedVariable = function(_super) {
    __extends2(IndexedVariable2, _super);
    function IndexedVariable2(index, w2) {
      var _this = _super.call(this, 0, w2) || this;
      _this.index = index;
      return _this;
    }
    return IndexedVariable2;
  }(vpsc_1.Variable);
  rectangle.IndexedVariable = IndexedVariable;
  var Projection = function() {
    function Projection2(nodes3, groups, rootGroup, constraints, avoidOverlaps) {
      var _this = this;
      if (rootGroup === void 0) {
        rootGroup = null;
      }
      if (constraints === void 0) {
        constraints = null;
      }
      if (avoidOverlaps === void 0) {
        avoidOverlaps = false;
      }
      this.nodes = nodes3;
      this.groups = groups;
      this.rootGroup = rootGroup;
      this.avoidOverlaps = avoidOverlaps;
      this.variables = nodes3.map(function(v2, i3) {
        return v2.variable = new IndexedVariable(i3, 1);
      });
      if (constraints)
        this.createConstraints(constraints);
      if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== "undefined") {
        nodes3.forEach(function(v2) {
          if (!v2.width || !v2.height) {
            v2.bounds = new Rectangle(v2.x, v2.x, v2.y, v2.y);
            return;
          }
          var w2 = v2.width / 2, h2 = v2.height / 2;
          v2.bounds = new Rectangle(v2.x - w2, v2.x + w2, v2.y - h2, v2.y + h2);
        });
        computeGroupBounds(rootGroup);
        var i2 = nodes3.length;
        groups.forEach(function(g2) {
          _this.variables[i2] = g2.minVar = new IndexedVariable(i2++, typeof g2.stiffness !== "undefined" ? g2.stiffness : 0.01);
          _this.variables[i2] = g2.maxVar = new IndexedVariable(i2++, typeof g2.stiffness !== "undefined" ? g2.stiffness : 0.01);
        });
      }
    }
    Projection2.prototype.createSeparation = function(c2) {
      return new vpsc_1.Constraint(this.nodes[c2.left].variable, this.nodes[c2.right].variable, c2.gap, typeof c2.equality !== "undefined" ? c2.equality : false);
    };
    Projection2.prototype.makeFeasible = function(c2) {
      var _this = this;
      if (!this.avoidOverlaps)
        return;
      var axis = "x", dim = "width";
      if (c2.axis === "x")
        axis = "y", dim = "height";
      var vs = c2.offsets.map(function(o2) {
        return _this.nodes[o2.node];
      }).sort(function(a2, b2) {
        return a2[axis] - b2[axis];
      });
      var p2 = null;
      vs.forEach(function(v2) {
        if (p2) {
          var nextPos = p2[axis] + p2[dim];
          if (nextPos > v2[axis]) {
            v2[axis] = nextPos;
          }
        }
        p2 = v2;
      });
    };
    Projection2.prototype.createAlignment = function(c2) {
      var _this = this;
      var u2 = this.nodes[c2.offsets[0].node].variable;
      this.makeFeasible(c2);
      var cs = c2.axis === "x" ? this.xConstraints : this.yConstraints;
      c2.offsets.slice(1).forEach(function(o2) {
        var v2 = _this.nodes[o2.node].variable;
        cs.push(new vpsc_1.Constraint(u2, v2, o2.offset, true));
      });
    };
    Projection2.prototype.createConstraints = function(constraints) {
      var _this = this;
      var isSep = function(c2) {
        return typeof c2.type === "undefined" || c2.type === "separation";
      };
      this.xConstraints = constraints.filter(function(c2) {
        return c2.axis === "x" && isSep(c2);
      }).map(function(c2) {
        return _this.createSeparation(c2);
      });
      this.yConstraints = constraints.filter(function(c2) {
        return c2.axis === "y" && isSep(c2);
      }).map(function(c2) {
        return _this.createSeparation(c2);
      });
      constraints.filter(function(c2) {
        return c2.type === "alignment";
      }).forEach(function(c2) {
        return _this.createAlignment(c2);
      });
    };
    Projection2.prototype.setupVariablesAndBounds = function(x0, y0, desired, getDesired) {
      this.nodes.forEach(function(v2, i2) {
        if (v2.fixed) {
          v2.variable.weight = v2.fixedWeight ? v2.fixedWeight : 1e3;
          desired[i2] = getDesired(v2);
        } else {
          v2.variable.weight = 1;
        }
        var w2 = (v2.width || 0) / 2, h2 = (v2.height || 0) / 2;
        var ix = x0[i2], iy = y0[i2];
        v2.bounds = new Rectangle(ix - w2, ix + w2, iy - h2, iy + h2);
      });
    };
    Projection2.prototype.xProject = function(x0, y0, x2) {
      if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))
        return;
      this.project(x0, y0, x0, x2, function(v2) {
        return v2.px;
      }, this.xConstraints, generateXGroupConstraints, function(v2) {
        return v2.bounds.setXCentre(x2[v2.variable.index] = v2.variable.position());
      }, function(g2) {
        var xmin = x2[g2.minVar.index] = g2.minVar.position();
        var xmax = x2[g2.maxVar.index] = g2.maxVar.position();
        var p2 = g2.padding / 2;
        g2.bounds.x = xmin - p2;
        g2.bounds.X = xmax + p2;
      });
    };
    Projection2.prototype.yProject = function(x0, y0, y2) {
      if (!this.rootGroup && !this.yConstraints)
        return;
      this.project(x0, y0, y0, y2, function(v2) {
        return v2.py;
      }, this.yConstraints, generateYGroupConstraints, function(v2) {
        return v2.bounds.setYCentre(y2[v2.variable.index] = v2.variable.position());
      }, function(g2) {
        var ymin = y2[g2.minVar.index] = g2.minVar.position();
        var ymax = y2[g2.maxVar.index] = g2.maxVar.position();
        var p2 = g2.padding / 2;
        g2.bounds.y = ymin - p2;
        g2.bounds.Y = ymax + p2;
      });
    };
    Projection2.prototype.projectFunctions = function() {
      var _this = this;
      return [
        function(x0, y0, x2) {
          return _this.xProject(x0, y0, x2);
        },
        function(x0, y0, y2) {
          return _this.yProject(x0, y0, y2);
        }
      ];
    };
    Projection2.prototype.project = function(x0, y0, start, desired, getDesired, cs, generateConstraints2, updateNodeBounds, updateGroupBounds) {
      this.setupVariablesAndBounds(x0, y0, desired, getDesired);
      if (this.rootGroup && this.avoidOverlaps) {
        computeGroupBounds(this.rootGroup);
        cs = cs.concat(generateConstraints2(this.rootGroup));
      }
      this.solve(this.variables, cs, start, desired);
      this.nodes.forEach(updateNodeBounds);
      if (this.rootGroup && this.avoidOverlaps) {
        this.groups.forEach(updateGroupBounds);
        computeGroupBounds(this.rootGroup);
      }
    };
    Projection2.prototype.solve = function(vs, cs, starting, desired) {
      var solver = new vpsc_1.Solver(vs, cs);
      solver.setStartingPositions(starting);
      solver.setDesiredPositions(desired);
      solver.solve();
    };
    return Projection2;
  }();
  rectangle.Projection = Projection;
  return rectangle;
}
var shortestpaths = {};
var pqueue = {};
var hasRequiredPqueue;
function requirePqueue() {
  if (hasRequiredPqueue)
    return pqueue;
  hasRequiredPqueue = 1;
  Object.defineProperty(pqueue, "__esModule", { value: true });
  var PairingHeap = function() {
    function PairingHeap2(elem) {
      this.elem = elem;
      this.subheaps = [];
    }
    PairingHeap2.prototype.toString = function(selector) {
      var str = "", needComma = false;
      for (var i2 = 0; i2 < this.subheaps.length; ++i2) {
        var subheap = this.subheaps[i2];
        if (!subheap.elem) {
          needComma = false;
          continue;
        }
        if (needComma) {
          str = str + ",";
        }
        str = str + subheap.toString(selector);
        needComma = true;
      }
      if (str !== "") {
        str = "(" + str + ")";
      }
      return (this.elem ? selector(this.elem) : "") + str;
    };
    PairingHeap2.prototype.forEach = function(f2) {
      if (!this.empty()) {
        f2(this.elem, this);
        this.subheaps.forEach(function(s2) {
          return s2.forEach(f2);
        });
      }
    };
    PairingHeap2.prototype.count = function() {
      return this.empty() ? 0 : 1 + this.subheaps.reduce(function(n2, h2) {
        return n2 + h2.count();
      }, 0);
    };
    PairingHeap2.prototype.min = function() {
      return this.elem;
    };
    PairingHeap2.prototype.empty = function() {
      return this.elem == null;
    };
    PairingHeap2.prototype.contains = function(h2) {
      if (this === h2)
        return true;
      for (var i2 = 0; i2 < this.subheaps.length; i2++) {
        if (this.subheaps[i2].contains(h2))
          return true;
      }
      return false;
    };
    PairingHeap2.prototype.isHeap = function(lessThan) {
      var _this = this;
      return this.subheaps.every(function(h2) {
        return lessThan(_this.elem, h2.elem) && h2.isHeap(lessThan);
      });
    };
    PairingHeap2.prototype.insert = function(obj, lessThan) {
      return this.merge(new PairingHeap2(obj), lessThan);
    };
    PairingHeap2.prototype.merge = function(heap2, lessThan) {
      if (this.empty())
        return heap2;
      else if (heap2.empty())
        return this;
      else if (lessThan(this.elem, heap2.elem)) {
        this.subheaps.push(heap2);
        return this;
      } else {
        heap2.subheaps.push(this);
        return heap2;
      }
    };
    PairingHeap2.prototype.removeMin = function(lessThan) {
      if (this.empty())
        return null;
      else
        return this.mergePairs(lessThan);
    };
    PairingHeap2.prototype.mergePairs = function(lessThan) {
      if (this.subheaps.length == 0)
        return new PairingHeap2(null);
      else if (this.subheaps.length == 1) {
        return this.subheaps[0];
      } else {
        var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);
        var remaining = this.mergePairs(lessThan);
        return firstPair.merge(remaining, lessThan);
      }
    };
    PairingHeap2.prototype.decreaseKey = function(subheap, newValue, setHeapNode, lessThan) {
      var newHeap = subheap.removeMin(lessThan);
      subheap.elem = newHeap.elem;
      subheap.subheaps = newHeap.subheaps;
      if (setHeapNode !== null && newHeap.elem !== null) {
        setHeapNode(subheap.elem, subheap);
      }
      var pairingNode = new PairingHeap2(newValue);
      if (setHeapNode !== null) {
        setHeapNode(newValue, pairingNode);
      }
      return this.merge(pairingNode, lessThan);
    };
    return PairingHeap2;
  }();
  pqueue.PairingHeap = PairingHeap;
  var PriorityQueue = function() {
    function PriorityQueue2(lessThan) {
      this.lessThan = lessThan;
    }
    PriorityQueue2.prototype.top = function() {
      if (this.empty()) {
        return null;
      }
      return this.root.elem;
    };
    PriorityQueue2.prototype.push = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var pairingNode;
      for (var i2 = 0, arg; arg = args[i2]; ++i2) {
        pairingNode = new PairingHeap(arg);
        this.root = this.empty() ? pairingNode : this.root.merge(pairingNode, this.lessThan);
      }
      return pairingNode;
    };
    PriorityQueue2.prototype.empty = function() {
      return !this.root || !this.root.elem;
    };
    PriorityQueue2.prototype.isHeap = function() {
      return this.root.isHeap(this.lessThan);
    };
    PriorityQueue2.prototype.forEach = function(f2) {
      this.root.forEach(f2);
    };
    PriorityQueue2.prototype.pop = function() {
      if (this.empty()) {
        return null;
      }
      var obj = this.root.min();
      this.root = this.root.removeMin(this.lessThan);
      return obj;
    };
    PriorityQueue2.prototype.reduceKey = function(heapNode, newKey, setHeapNode) {
      if (setHeapNode === void 0) {
        setHeapNode = null;
      }
      this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);
    };
    PriorityQueue2.prototype.toString = function(selector) {
      return this.root.toString(selector);
    };
    PriorityQueue2.prototype.count = function() {
      return this.root.count();
    };
    return PriorityQueue2;
  }();
  pqueue.PriorityQueue = PriorityQueue;
  return pqueue;
}
var hasRequiredShortestpaths;
function requireShortestpaths() {
  if (hasRequiredShortestpaths)
    return shortestpaths;
  hasRequiredShortestpaths = 1;
  Object.defineProperty(shortestpaths, "__esModule", { value: true });
  var pqueue_1 = requirePqueue();
  var Neighbour = function() {
    function Neighbour2(id2, distance) {
      this.id = id2;
      this.distance = distance;
    }
    return Neighbour2;
  }();
  var Node2 = function() {
    function Node3(id2) {
      this.id = id2;
      this.neighbours = [];
    }
    return Node3;
  }();
  var QueueEntry = function() {
    function QueueEntry2(node, prev, d2) {
      this.node = node;
      this.prev = prev;
      this.d = d2;
    }
    return QueueEntry2;
  }();
  var Calculator = function() {
    function Calculator2(n2, es, getSourceIndex, getTargetIndex, getLength) {
      this.n = n2;
      this.es = es;
      this.neighbours = new Array(this.n);
      var i2 = this.n;
      while (i2--)
        this.neighbours[i2] = new Node2(i2);
      i2 = this.es.length;
      while (i2--) {
        var e2 = this.es[i2];
        var u2 = getSourceIndex(e2), v2 = getTargetIndex(e2);
        var d2 = getLength(e2);
        this.neighbours[u2].neighbours.push(new Neighbour(v2, d2));
        this.neighbours[v2].neighbours.push(new Neighbour(u2, d2));
      }
    }
    Calculator2.prototype.DistanceMatrix = function() {
      var D2 = new Array(this.n);
      for (var i2 = 0; i2 < this.n; ++i2) {
        D2[i2] = this.dijkstraNeighbours(i2);
      }
      return D2;
    };
    Calculator2.prototype.DistancesFromNode = function(start) {
      return this.dijkstraNeighbours(start);
    };
    Calculator2.prototype.PathFromNodeToNode = function(start, end) {
      return this.dijkstraNeighbours(start, end);
    };
    Calculator2.prototype.PathFromNodeToNodeWithPrevCost = function(start, end, prevCost) {
      var q2 = new pqueue_1.PriorityQueue(function(a2, b2) {
        return a2.d <= b2.d;
      }), u2 = this.neighbours[start], qu = new QueueEntry(u2, null, 0), visitedFrom = {};
      q2.push(qu);
      while (!q2.empty()) {
        qu = q2.pop();
        u2 = qu.node;
        if (u2.id === end) {
          break;
        }
        var i2 = u2.neighbours.length;
        while (i2--) {
          var neighbour = u2.neighbours[i2], v2 = this.neighbours[neighbour.id];
          if (qu.prev && v2.id === qu.prev.node.id)
            continue;
          var viduid = v2.id + "," + u2.id;
          if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)
            continue;
          var cc = qu.prev ? prevCost(qu.prev.node.id, u2.id, v2.id) : 0, t3 = qu.d + neighbour.distance + cc;
          visitedFrom[viduid] = t3;
          q2.push(new QueueEntry(v2, qu, t3));
        }
      }
      var path = [];
      while (qu.prev) {
        qu = qu.prev;
        path.push(qu.node.id);
      }
      return path;
    };
    Calculator2.prototype.dijkstraNeighbours = function(start, dest) {
      if (dest === void 0) {
        dest = -1;
      }
      var q2 = new pqueue_1.PriorityQueue(function(a2, b2) {
        return a2.d <= b2.d;
      }), i2 = this.neighbours.length, d2 = new Array(i2);
      while (i2--) {
        var node = this.neighbours[i2];
        node.d = i2 === start ? 0 : Number.POSITIVE_INFINITY;
        node.q = q2.push(node);
      }
      while (!q2.empty()) {
        var u2 = q2.pop();
        d2[u2.id] = u2.d;
        if (u2.id === dest) {
          var path = [];
          var v2 = u2;
          while (typeof v2.prev !== "undefined") {
            path.push(v2.prev.id);
            v2 = v2.prev;
          }
          return path;
        }
        i2 = u2.neighbours.length;
        while (i2--) {
          var neighbour = u2.neighbours[i2];
          var v2 = this.neighbours[neighbour.id];
          var t3 = u2.d + neighbour.distance;
          if (u2.d !== Number.MAX_VALUE && v2.d > t3) {
            v2.d = t3;
            v2.prev = u2;
            q2.reduceKey(v2.q, v2, function(e2, q3) {
              return e2.q = q3;
            });
          }
        }
      }
      return d2;
    };
    return Calculator2;
  }();
  shortestpaths.Calculator = Calculator;
  return shortestpaths;
}
var geom = {};
var hasRequiredGeom;
function requireGeom() {
  if (hasRequiredGeom)
    return geom;
  hasRequiredGeom = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(geom, "__esModule", { value: true });
  var rectangle_1 = requireRectangle();
  var Point2 = function() {
    function Point3() {
    }
    return Point3;
  }();
  geom.Point = Point2;
  var LineSegment = function() {
    function LineSegment2(x1, y1, x2, y2) {
      this.x1 = x1;
      this.y1 = y1;
      this.x2 = x2;
      this.y2 = y2;
    }
    return LineSegment2;
  }();
  geom.LineSegment = LineSegment;
  var PolyPoint = function(_super) {
    __extends2(PolyPoint2, _super);
    function PolyPoint2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return PolyPoint2;
  }(Point2);
  geom.PolyPoint = PolyPoint;
  function isLeft(P0, P1, P2) {
    return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);
  }
  geom.isLeft = isLeft;
  function above(p2, vi, vj) {
    return isLeft(p2, vi, vj) > 0;
  }
  function below(p2, vi, vj) {
    return isLeft(p2, vi, vj) < 0;
  }
  function ConvexHull(S2) {
    var P2 = S2.slice(0).sort(function(a2, b2) {
      return a2.x !== b2.x ? b2.x - a2.x : b2.y - a2.y;
    });
    var n2 = S2.length, i2;
    var minmin = 0;
    var xmin = P2[0].x;
    for (i2 = 1; i2 < n2; ++i2) {
      if (P2[i2].x !== xmin)
        break;
    }
    var minmax = i2 - 1;
    var H2 = [];
    H2.push(P2[minmin]);
    if (minmax === n2 - 1) {
      if (P2[minmax].y !== P2[minmin].y)
        H2.push(P2[minmax]);
    } else {
      var maxmin, maxmax = n2 - 1;
      var xmax = P2[n2 - 1].x;
      for (i2 = n2 - 2; i2 >= 0; i2--)
        if (P2[i2].x !== xmax)
          break;
      maxmin = i2 + 1;
      i2 = minmax;
      while (++i2 <= maxmin) {
        if (isLeft(P2[minmin], P2[maxmin], P2[i2]) >= 0 && i2 < maxmin)
          continue;
        while (H2.length > 1) {
          if (isLeft(H2[H2.length - 2], H2[H2.length - 1], P2[i2]) > 0)
            break;
          else
            H2.length -= 1;
        }
        if (i2 != minmin)
          H2.push(P2[i2]);
      }
      if (maxmax != maxmin)
        H2.push(P2[maxmax]);
      var bot = H2.length;
      i2 = maxmin;
      while (--i2 >= minmax) {
        if (isLeft(P2[maxmax], P2[minmax], P2[i2]) >= 0 && i2 > minmax)
          continue;
        while (H2.length > bot) {
          if (isLeft(H2[H2.length - 2], H2[H2.length - 1], P2[i2]) > 0)
            break;
          else
            H2.length -= 1;
        }
        if (i2 != minmin)
          H2.push(P2[i2]);
      }
    }
    return H2;
  }
  geom.ConvexHull = ConvexHull;
  function clockwiseRadialSweep(p2, P2, f2) {
    P2.slice(0).sort(function(a2, b2) {
      return Math.atan2(a2.y - p2.y, a2.x - p2.x) - Math.atan2(b2.y - p2.y, b2.x - p2.x);
    }).forEach(f2);
  }
  geom.clockwiseRadialSweep = clockwiseRadialSweep;
  function tangent_PointPolyC(P2, V2) {
    var Vclosed = V2.slice(0);
    Vclosed.push(V2[0]);
    return { rtan: Rtangent_PointPolyC(P2, Vclosed), ltan: Ltangent_PointPolyC(P2, Vclosed) };
  }
  function Rtangent_PointPolyC(P2, V2) {
    var n2 = V2.length - 1;
    var a2, b2, c2;
    var upA, dnC;
    if (below(P2, V2[1], V2[0]) && !above(P2, V2[n2 - 1], V2[0]))
      return 0;
    for (a2 = 0, b2 = n2; ; ) {
      if (b2 - a2 === 1)
        if (above(P2, V2[a2], V2[b2]))
          return a2;
        else
          return b2;
      c2 = Math.floor((a2 + b2) / 2);
      dnC = below(P2, V2[c2 + 1], V2[c2]);
      if (dnC && !above(P2, V2[c2 - 1], V2[c2]))
        return c2;
      upA = above(P2, V2[a2 + 1], V2[a2]);
      if (upA) {
        if (dnC)
          b2 = c2;
        else {
          if (above(P2, V2[a2], V2[c2]))
            b2 = c2;
          else
            a2 = c2;
        }
      } else {
        if (!dnC)
          a2 = c2;
        else {
          if (below(P2, V2[a2], V2[c2]))
            b2 = c2;
          else
            a2 = c2;
        }
      }
    }
  }
  function Ltangent_PointPolyC(P2, V2) {
    var n2 = V2.length - 1;
    var a2, b2, c2;
    var dnA, dnC;
    if (above(P2, V2[n2 - 1], V2[0]) && !below(P2, V2[1], V2[0]))
      return 0;
    for (a2 = 0, b2 = n2; ; ) {
      if (b2 - a2 === 1)
        if (below(P2, V2[a2], V2[b2]))
          return a2;
        else
          return b2;
      c2 = Math.floor((a2 + b2) / 2);
      dnC = below(P2, V2[c2 + 1], V2[c2]);
      if (above(P2, V2[c2 - 1], V2[c2]) && !dnC)
        return c2;
      dnA = below(P2, V2[a2 + 1], V2[a2]);
      if (dnA) {
        if (!dnC)
          b2 = c2;
        else {
          if (below(P2, V2[a2], V2[c2]))
            b2 = c2;
          else
            a2 = c2;
        }
      } else {
        if (dnC)
          a2 = c2;
        else {
          if (above(P2, V2[a2], V2[c2]))
            b2 = c2;
          else
            a2 = c2;
        }
      }
    }
  }
  function tangent_PolyPolyC(V2, W2, t1, t22, cmp1, cmp2) {
    var ix1, ix2;
    ix1 = t1(W2[0], V2);
    ix2 = t22(V2[ix1], W2);
    var done = false;
    while (!done) {
      done = true;
      while (true) {
        if (ix1 === V2.length - 1)
          ix1 = 0;
        if (cmp1(W2[ix2], V2[ix1], V2[ix1 + 1]))
          break;
        ++ix1;
      }
      while (true) {
        if (ix2 === 0)
          ix2 = W2.length - 1;
        if (cmp2(V2[ix1], W2[ix2], W2[ix2 - 1]))
          break;
        --ix2;
        done = false;
      }
    }
    return { t1: ix1, t2: ix2 };
  }
  geom.tangent_PolyPolyC = tangent_PolyPolyC;
  function LRtangent_PolyPolyC(V2, W2) {
    var rl = RLtangent_PolyPolyC(W2, V2);
    return { t1: rl.t2, t2: rl.t1 };
  }
  geom.LRtangent_PolyPolyC = LRtangent_PolyPolyC;
  function RLtangent_PolyPolyC(V2, W2) {
    return tangent_PolyPolyC(V2, W2, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);
  }
  geom.RLtangent_PolyPolyC = RLtangent_PolyPolyC;
  function LLtangent_PolyPolyC(V2, W2) {
    return tangent_PolyPolyC(V2, W2, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);
  }
  geom.LLtangent_PolyPolyC = LLtangent_PolyPolyC;
  function RRtangent_PolyPolyC(V2, W2) {
    return tangent_PolyPolyC(V2, W2, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);
  }
  geom.RRtangent_PolyPolyC = RRtangent_PolyPolyC;
  var BiTangent = function() {
    function BiTangent2(t1, t22) {
      this.t1 = t1;
      this.t2 = t22;
    }
    return BiTangent2;
  }();
  geom.BiTangent = BiTangent;
  var BiTangents = function() {
    function BiTangents2() {
    }
    return BiTangents2;
  }();
  geom.BiTangents = BiTangents;
  var TVGPoint = function(_super) {
    __extends2(TVGPoint2, _super);
    function TVGPoint2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return TVGPoint2;
  }(Point2);
  geom.TVGPoint = TVGPoint;
  var VisibilityVertex = function() {
    function VisibilityVertex2(id2, polyid, polyvertid, p2) {
      this.id = id2;
      this.polyid = polyid;
      this.polyvertid = polyvertid;
      this.p = p2;
      p2.vv = this;
    }
    return VisibilityVertex2;
  }();
  geom.VisibilityVertex = VisibilityVertex;
  var VisibilityEdge = function() {
    function VisibilityEdge2(source, target) {
      this.source = source;
      this.target = target;
    }
    VisibilityEdge2.prototype.length = function() {
      var dx = this.source.p.x - this.target.p.x;
      var dy = this.source.p.y - this.target.p.y;
      return Math.sqrt(dx * dx + dy * dy);
    };
    return VisibilityEdge2;
  }();
  geom.VisibilityEdge = VisibilityEdge;
  var TangentVisibilityGraph = function() {
    function TangentVisibilityGraph2(P2, g0) {
      this.P = P2;
      this.V = [];
      this.E = [];
      if (!g0) {
        var n2 = P2.length;
        for (var i2 = 0; i2 < n2; i2++) {
          var p2 = P2[i2];
          for (var j2 = 0; j2 < p2.length; ++j2) {
            var pj = p2[j2], vv = new VisibilityVertex(this.V.length, i2, j2, pj);
            this.V.push(vv);
            if (j2 > 0)
              this.E.push(new VisibilityEdge(p2[j2 - 1].vv, vv));
          }
          if (p2.length > 1)
            this.E.push(new VisibilityEdge(p2[0].vv, p2[p2.length - 1].vv));
        }
        for (var i2 = 0; i2 < n2 - 1; i2++) {
          var Pi = P2[i2];
          for (var j2 = i2 + 1; j2 < n2; j2++) {
            var Pj = P2[j2], t3 = tangents(Pi, Pj);
            for (var q2 in t3) {
              var c2 = t3[q2], source = Pi[c2.t1], target = Pj[c2.t2];
              this.addEdgeIfVisible(source, target, i2, j2);
            }
          }
        }
      } else {
        this.V = g0.V.slice(0);
        this.E = g0.E.slice(0);
      }
    }
    TangentVisibilityGraph2.prototype.addEdgeIfVisible = function(u2, v2, i1, i2) {
      if (!this.intersectsPolys(new LineSegment(u2.x, u2.y, v2.x, v2.y), i1, i2)) {
        this.E.push(new VisibilityEdge(u2.vv, v2.vv));
      }
    };
    TangentVisibilityGraph2.prototype.addPoint = function(p2, i1) {
      var n2 = this.P.length;
      this.V.push(new VisibilityVertex(this.V.length, n2, 0, p2));
      for (var i2 = 0; i2 < n2; ++i2) {
        if (i2 === i1)
          continue;
        var poly = this.P[i2], t3 = tangent_PointPolyC(p2, poly);
        this.addEdgeIfVisible(p2, poly[t3.ltan], i1, i2);
        this.addEdgeIfVisible(p2, poly[t3.rtan], i1, i2);
      }
      return p2.vv;
    };
    TangentVisibilityGraph2.prototype.intersectsPolys = function(l2, i1, i2) {
      for (var i3 = 0, n2 = this.P.length; i3 < n2; ++i3) {
        if (i3 != i1 && i3 != i2 && intersects(l2, this.P[i3]).length > 0) {
          return true;
        }
      }
      return false;
    };
    return TangentVisibilityGraph2;
  }();
  geom.TangentVisibilityGraph = TangentVisibilityGraph;
  function intersects(l2, P2) {
    var ints = [];
    for (var i2 = 1, n2 = P2.length; i2 < n2; ++i2) {
      var int = rectangle_1.Rectangle.lineIntersection(l2.x1, l2.y1, l2.x2, l2.y2, P2[i2 - 1].x, P2[i2 - 1].y, P2[i2].x, P2[i2].y);
      if (int)
        ints.push(int);
    }
    return ints;
  }
  function tangents(V2, W2) {
    var m2 = V2.length - 1, n2 = W2.length - 1;
    var bt2 = new BiTangents();
    for (var i2 = 0; i2 < m2; ++i2) {
      for (var j2 = 0; j2 < n2; ++j2) {
        var v1 = V2[i2 == 0 ? m2 - 1 : i2 - 1];
        var v2 = V2[i2];
        var v3 = V2[i2 + 1];
        var w1 = W2[j2 == 0 ? n2 - 1 : j2 - 1];
        var w2 = W2[j2];
        var w3 = W2[j2 + 1];
        var v1v2w2 = isLeft(v1, v2, w2);
        var v2w1w2 = isLeft(v2, w1, w2);
        var v2w2w3 = isLeft(v2, w2, w3);
        var w1w2v2 = isLeft(w1, w2, v2);
        var w2v1v2 = isLeft(w2, v1, v2);
        var w2v2v3 = isLeft(w2, v2, v3);
        if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0 && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {
          bt2.ll = new BiTangent(i2, j2);
        } else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0 && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {
          bt2.rr = new BiTangent(i2, j2);
        } else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0 && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {
          bt2.rl = new BiTangent(i2, j2);
        } else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0 && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {
          bt2.lr = new BiTangent(i2, j2);
        }
      }
    }
    return bt2;
  }
  geom.tangents = tangents;
  function isPointInsidePoly(p2, poly) {
    for (var i2 = 1, n2 = poly.length; i2 < n2; ++i2)
      if (below(poly[i2 - 1], poly[i2], p2))
        return false;
    return true;
  }
  function isAnyPInQ(p2, q2) {
    return !p2.every(function(v2) {
      return !isPointInsidePoly(v2, q2);
    });
  }
  function polysOverlap(p2, q2) {
    if (isAnyPInQ(p2, q2))
      return true;
    if (isAnyPInQ(q2, p2))
      return true;
    for (var i2 = 1, n2 = p2.length; i2 < n2; ++i2) {
      var v2 = p2[i2], u2 = p2[i2 - 1];
      if (intersects(new LineSegment(u2.x, u2.y, v2.x, v2.y), q2).length > 0)
        return true;
    }
    return false;
  }
  geom.polysOverlap = polysOverlap;
  return geom;
}
var handledisconnected = {};
var hasRequiredHandledisconnected;
function requireHandledisconnected() {
  if (hasRequiredHandledisconnected)
    return handledisconnected;
  hasRequiredHandledisconnected = 1;
  Object.defineProperty(handledisconnected, "__esModule", { value: true });
  var packingOptions = {
    PADDING: 10,
    GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,
    FLOAT_EPSILON: 1e-4,
    MAX_INERATIONS: 100
  };
  function applyPacking(graphs, w2, h2, node_size, desired_ratio, centerGraph) {
    if (desired_ratio === void 0) {
      desired_ratio = 1;
    }
    if (centerGraph === void 0) {
      centerGraph = true;
    }
    var init_x = 0, init_y = 0, svg_width = w2, svg_height = h2, desired_ratio = typeof desired_ratio !== "undefined" ? desired_ratio : 1, node_size = typeof node_size !== "undefined" ? node_size : 0, real_width = 0, real_height = 0, min_width = 0, global_bottom = 0, line = [];
    if (graphs.length == 0)
      return;
    calculate_bb(graphs);
    apply2(graphs);
    if (centerGraph) {
      put_nodes_to_right_positions(graphs);
    }
    function calculate_bb(graphs2) {
      graphs2.forEach(function(g2) {
        calculate_single_bb(g2);
      });
      function calculate_single_bb(graph2) {
        var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE, max_x = 0, max_y = 0;
        graph2.array.forEach(function(v2) {
          var w3 = typeof v2.width !== "undefined" ? v2.width : node_size;
          var h3 = typeof v2.height !== "undefined" ? v2.height : node_size;
          w3 /= 2;
          h3 /= 2;
          max_x = Math.max(v2.x + w3, max_x);
          min_x = Math.min(v2.x - w3, min_x);
          max_y = Math.max(v2.y + h3, max_y);
          min_y = Math.min(v2.y - h3, min_y);
        });
        graph2.width = max_x - min_x;
        graph2.height = max_y - min_y;
      }
    }
    function put_nodes_to_right_positions(graphs2) {
      graphs2.forEach(function(g2) {
        var center2 = { x: 0, y: 0 };
        g2.array.forEach(function(node) {
          center2.x += node.x;
          center2.y += node.y;
        });
        center2.x /= g2.array.length;
        center2.y /= g2.array.length;
        var corner = { x: center2.x - g2.width / 2, y: center2.y - g2.height / 2 };
        var offset = { x: g2.x - corner.x + svg_width / 2 - real_width / 2, y: g2.y - corner.y + svg_height / 2 - real_height / 2 };
        g2.array.forEach(function(node) {
          node.x += offset.x;
          node.y += offset.y;
        });
      });
    }
    function apply2(data4, desired_ratio2) {
      var curr_best_f = Number.POSITIVE_INFINITY;
      var curr_best = 0;
      data4.sort(function(a2, b2) {
        return b2.height - a2.height;
      });
      min_width = data4.reduce(function(a2, b2) {
        return a2.width < b2.width ? a2.width : b2.width;
      });
      var left = x1 = min_width;
      var right = x2 = get_entire_width(data4);
      var iterationCounter = 0;
      var f_x1 = Number.MAX_VALUE;
      var f_x2 = Number.MAX_VALUE;
      var flag = -1;
      var dx = Number.MAX_VALUE;
      var df = Number.MAX_VALUE;
      while (dx > min_width || df > packingOptions.FLOAT_EPSILON) {
        if (flag != 1) {
          var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;
          var f_x1 = step3(data4, x1);
        }
        if (flag != 0) {
          var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;
          var f_x2 = step3(data4, x2);
        }
        dx = Math.abs(x1 - x2);
        df = Math.abs(f_x1 - f_x2);
        if (f_x1 < curr_best_f) {
          curr_best_f = f_x1;
          curr_best = x1;
        }
        if (f_x2 < curr_best_f) {
          curr_best_f = f_x2;
          curr_best = x2;
        }
        if (f_x1 > f_x2) {
          left = x1;
          x1 = x2;
          f_x1 = f_x2;
          flag = 1;
        } else {
          right = x2;
          x2 = x1;
          f_x2 = f_x1;
          flag = 0;
        }
        if (iterationCounter++ > 100) {
          break;
        }
      }
      step3(data4, curr_best);
    }
    function step3(data4, max_width) {
      line = [];
      real_width = 0;
      real_height = 0;
      global_bottom = init_y;
      for (var i2 = 0; i2 < data4.length; i2++) {
        var o2 = data4[i2];
        put_rect(o2, max_width);
      }
      return Math.abs(get_real_ratio() - desired_ratio);
    }
    function put_rect(rect, max_width) {
      var parent4 = void 0;
      for (var i2 = 0; i2 < line.length; i2++) {
        if (line[i2].space_left >= rect.height && line[i2].x + line[i2].width + rect.width + packingOptions.PADDING - max_width <= packingOptions.FLOAT_EPSILON) {
          parent4 = line[i2];
          break;
        }
      }
      line.push(rect);
      if (parent4 !== void 0) {
        rect.x = parent4.x + parent4.width + packingOptions.PADDING;
        rect.y = parent4.bottom;
        rect.space_left = rect.height;
        rect.bottom = rect.y;
        parent4.space_left -= rect.height + packingOptions.PADDING;
        parent4.bottom += rect.height + packingOptions.PADDING;
      } else {
        rect.y = global_bottom;
        global_bottom += rect.height + packingOptions.PADDING;
        rect.x = init_x;
        rect.bottom = rect.y;
        rect.space_left = rect.height;
      }
      if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON)
        real_height = rect.y + rect.height - init_y;
      if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON)
        real_width = rect.x + rect.width - init_x;
    }
    function get_entire_width(data4) {
      var width2 = 0;
      data4.forEach(function(d2) {
        return width2 += d2.width + packingOptions.PADDING;
      });
      return width2;
    }
    function get_real_ratio() {
      return real_width / real_height;
    }
  }
  handledisconnected.applyPacking = applyPacking;
  function separateGraphs(nodes3, links) {
    var marks = {};
    var ways = {};
    var graphs = [];
    var clusters = 0;
    for (var i2 = 0; i2 < links.length; i2++) {
      var link = links[i2];
      var n1 = link.source;
      var n2 = link.target;
      if (ways[n1.index])
        ways[n1.index].push(n2);
      else
        ways[n1.index] = [n2];
      if (ways[n2.index])
        ways[n2.index].push(n1);
      else
        ways[n2.index] = [n1];
    }
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var node = nodes3[i2];
      if (marks[node.index])
        continue;
      explore_node(node, true);
    }
    function explore_node(n3, is_new) {
      if (marks[n3.index] !== void 0)
        return;
      if (is_new) {
        clusters++;
        graphs.push({ array: [] });
      }
      marks[n3.index] = clusters;
      graphs[clusters - 1].array.push(n3);
      var adjacent = ways[n3.index];
      if (!adjacent)
        return;
      for (var j2 = 0; j2 < adjacent.length; j2++) {
        explore_node(adjacent[j2], false);
      }
    }
    return graphs;
  }
  handledisconnected.separateGraphs = separateGraphs;
  return handledisconnected;
}
var hasRequiredLayout;
function requireLayout() {
  if (hasRequiredLayout)
    return layout3;
  hasRequiredLayout = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var powergraph2 = requirePowergraph();
    var linklengths_1 = requireLinklengths();
    var descent_1 = requireDescent();
    var rectangle_1 = requireRectangle();
    var shortestpaths_1 = requireShortestpaths();
    var geom_1 = requireGeom();
    var handledisconnected_1 = requireHandledisconnected();
    var EventType;
    (function(EventType2) {
      EventType2[EventType2["start"] = 0] = "start";
      EventType2[EventType2["tick"] = 1] = "tick";
      EventType2[EventType2["end"] = 2] = "end";
    })(EventType = exports.EventType || (exports.EventType = {}));
    function isGroup(g2) {
      return typeof g2.leaves !== "undefined" || typeof g2.groups !== "undefined";
    }
    var Layout2 = function() {
      function Layout3() {
        var _this = this;
        this._canvasSize = [1, 1];
        this._linkDistance = 20;
        this._defaultNodeSize = 10;
        this._linkLengthCalculator = null;
        this._linkType = null;
        this._avoidOverlaps = false;
        this._handleDisconnected = true;
        this._running = false;
        this._nodes = [];
        this._groups = [];
        this._rootGroup = null;
        this._links = [];
        this._constraints = [];
        this._distanceMatrix = null;
        this._descent = null;
        this._directedLinkConstraints = null;
        this._threshold = 0.01;
        this._visibilityGraph = null;
        this._groupCompactness = 1e-6;
        this.event = null;
        this.linkAccessor = {
          getSourceIndex: Layout3.getSourceIndex,
          getTargetIndex: Layout3.getTargetIndex,
          setLength: Layout3.setLinkLength,
          getType: function(l2) {
            return typeof _this._linkType === "function" ? _this._linkType(l2) : 0;
          }
        };
      }
      Layout3.prototype.on = function(e2, listener) {
        if (!this.event)
          this.event = {};
        if (typeof e2 === "string") {
          this.event[EventType[e2]] = listener;
        } else {
          this.event[e2] = listener;
        }
        return this;
      };
      Layout3.prototype.trigger = function(e2) {
        if (this.event && typeof this.event[e2.type] !== "undefined") {
          this.event[e2.type](e2);
        }
      };
      Layout3.prototype.kick = function() {
        while (!this.tick())
          ;
      };
      Layout3.prototype.tick = function() {
        if (this._alpha < this._threshold) {
          this._running = false;
          this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });
          return true;
        }
        var n2 = this._nodes.length;
        this._links.length;
        var o2, i2;
        this._descent.locks.clear();
        for (i2 = 0; i2 < n2; ++i2) {
          o2 = this._nodes[i2];
          if (o2.fixed) {
            if (typeof o2.px === "undefined" || typeof o2.py === "undefined") {
              o2.px = o2.x;
              o2.py = o2.y;
            }
            var p2 = [o2.px, o2.py];
            this._descent.locks.add(i2, p2);
          }
        }
        var s1 = this._descent.rungeKutta();
        if (s1 === 0) {
          this._alpha = 0;
        } else if (typeof this._lastStress !== "undefined") {
          this._alpha = s1;
        }
        this._lastStress = s1;
        this.updateNodePositions();
        this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });
        return false;
      };
      Layout3.prototype.updateNodePositions = function() {
        var x2 = this._descent.x[0], y2 = this._descent.x[1];
        var o2, i2 = this._nodes.length;
        while (i2--) {
          o2 = this._nodes[i2];
          o2.x = x2[i2];
          o2.y = y2[i2];
        }
      };
      Layout3.prototype.nodes = function(v2) {
        if (!v2) {
          if (this._nodes.length === 0 && this._links.length > 0) {
            var n2 = 0;
            this._links.forEach(function(l2) {
              n2 = Math.max(n2, l2.source, l2.target);
            });
            this._nodes = new Array(++n2);
            for (var i2 = 0; i2 < n2; ++i2) {
              this._nodes[i2] = {};
            }
          }
          return this._nodes;
        }
        this._nodes = v2;
        return this;
      };
      Layout3.prototype.groups = function(x2) {
        var _this = this;
        if (!x2)
          return this._groups;
        this._groups = x2;
        this._rootGroup = {};
        this._groups.forEach(function(g2) {
          if (typeof g2.padding === "undefined")
            g2.padding = 1;
          if (typeof g2.leaves !== "undefined") {
            g2.leaves.forEach(function(v2, i2) {
              if (typeof v2 === "number")
                (g2.leaves[i2] = _this._nodes[v2]).parent = g2;
            });
          }
          if (typeof g2.groups !== "undefined") {
            g2.groups.forEach(function(gi, i2) {
              if (typeof gi === "number")
                (g2.groups[i2] = _this._groups[gi]).parent = g2;
            });
          }
        });
        this._rootGroup.leaves = this._nodes.filter(function(v2) {
          return typeof v2.parent === "undefined";
        });
        this._rootGroup.groups = this._groups.filter(function(g2) {
          return typeof g2.parent === "undefined";
        });
        return this;
      };
      Layout3.prototype.powerGraphGroups = function(f2) {
        var g2 = powergraph2.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);
        this.groups(g2.groups);
        f2(g2);
        return this;
      };
      Layout3.prototype.avoidOverlaps = function(v2) {
        if (!arguments.length)
          return this._avoidOverlaps;
        this._avoidOverlaps = v2;
        return this;
      };
      Layout3.prototype.handleDisconnected = function(v2) {
        if (!arguments.length)
          return this._handleDisconnected;
        this._handleDisconnected = v2;
        return this;
      };
      Layout3.prototype.flowLayout = function(axis, minSeparation) {
        if (!arguments.length)
          axis = "y";
        this._directedLinkConstraints = {
          axis,
          getMinSeparation: typeof minSeparation === "number" ? function() {
            return minSeparation;
          } : minSeparation
        };
        return this;
      };
      Layout3.prototype.links = function(x2) {
        if (!arguments.length)
          return this._links;
        this._links = x2;
        return this;
      };
      Layout3.prototype.constraints = function(c2) {
        if (!arguments.length)
          return this._constraints;
        this._constraints = c2;
        return this;
      };
      Layout3.prototype.distanceMatrix = function(d2) {
        if (!arguments.length)
          return this._distanceMatrix;
        this._distanceMatrix = d2;
        return this;
      };
      Layout3.prototype.size = function(x2) {
        if (!x2)
          return this._canvasSize;
        this._canvasSize = x2;
        return this;
      };
      Layout3.prototype.defaultNodeSize = function(x2) {
        if (!x2)
          return this._defaultNodeSize;
        this._defaultNodeSize = x2;
        return this;
      };
      Layout3.prototype.groupCompactness = function(x2) {
        if (!x2)
          return this._groupCompactness;
        this._groupCompactness = x2;
        return this;
      };
      Layout3.prototype.linkDistance = function(x2) {
        if (!x2) {
          return this._linkDistance;
        }
        this._linkDistance = typeof x2 === "function" ? x2 : +x2;
        this._linkLengthCalculator = null;
        return this;
      };
      Layout3.prototype.linkType = function(f2) {
        this._linkType = f2;
        return this;
      };
      Layout3.prototype.convergenceThreshold = function(x2) {
        if (!x2)
          return this._threshold;
        this._threshold = typeof x2 === "function" ? x2 : +x2;
        return this;
      };
      Layout3.prototype.alpha = function(x2) {
        if (!arguments.length)
          return this._alpha;
        else {
          x2 = +x2;
          if (this._alpha) {
            if (x2 > 0)
              this._alpha = x2;
            else
              this._alpha = 0;
          } else if (x2 > 0) {
            if (!this._running) {
              this._running = true;
              this.trigger({ type: EventType.start, alpha: this._alpha = x2 });
              this.kick();
            }
          }
          return this;
        }
      };
      Layout3.prototype.getLinkLength = function(link) {
        return typeof this._linkDistance === "function" ? +this._linkDistance(link) : this._linkDistance;
      };
      Layout3.setLinkLength = function(link, length) {
        link.length = length;
      };
      Layout3.prototype.getLinkType = function(link) {
        return typeof this._linkType === "function" ? this._linkType(link) : 0;
      };
      Layout3.prototype.symmetricDiffLinkLengths = function(idealLength, w2) {
        var _this = this;
        if (w2 === void 0) {
          w2 = 1;
        }
        this.linkDistance(function(l2) {
          return idealLength * l2.length;
        });
        this._linkLengthCalculator = function() {
          return linklengths_1.symmetricDiffLinkLengths(_this._links, _this.linkAccessor, w2);
        };
        return this;
      };
      Layout3.prototype.jaccardLinkLengths = function(idealLength, w2) {
        var _this = this;
        if (w2 === void 0) {
          w2 = 1;
        }
        this.linkDistance(function(l2) {
          return idealLength * l2.length;
        });
        this._linkLengthCalculator = function() {
          return linklengths_1.jaccardLinkLengths(_this._links, _this.linkAccessor, w2);
        };
        return this;
      };
      Layout3.prototype.start = function(initialUnconstrainedIterations, initialUserConstraintIterations, initialAllConstraintsIterations, gridSnapIterations, keepRunning, centerGraph) {
        var _this = this;
        if (initialUnconstrainedIterations === void 0) {
          initialUnconstrainedIterations = 0;
        }
        if (initialUserConstraintIterations === void 0) {
          initialUserConstraintIterations = 0;
        }
        if (initialAllConstraintsIterations === void 0) {
          initialAllConstraintsIterations = 0;
        }
        if (gridSnapIterations === void 0) {
          gridSnapIterations = 0;
        }
        if (keepRunning === void 0) {
          keepRunning = true;
        }
        if (centerGraph === void 0) {
          centerGraph = true;
        }
        var i2, n2 = this.nodes().length, N2 = n2 + 2 * this._groups.length;
        this._links.length;
        var w2 = this._canvasSize[0], h2 = this._canvasSize[1];
        var x2 = new Array(N2), y2 = new Array(N2);
        var G2 = null;
        var ao = this._avoidOverlaps;
        this._nodes.forEach(function(v2, i3) {
          v2.index = i3;
          if (typeof v2.x === "undefined") {
            v2.x = w2 / 2, v2.y = h2 / 2;
          }
          x2[i3] = v2.x, y2[i3] = v2.y;
        });
        if (this._linkLengthCalculator)
          this._linkLengthCalculator();
        var distances2;
        if (this._distanceMatrix) {
          distances2 = this._distanceMatrix;
        } else {
          distances2 = new shortestpaths_1.Calculator(N2, this._links, Layout3.getSourceIndex, Layout3.getTargetIndex, function(l2) {
            return _this.getLinkLength(l2);
          }).DistanceMatrix();
          G2 = descent_1.Descent.createSquareMatrix(N2, function() {
            return 2;
          });
          this._links.forEach(function(l2) {
            if (typeof l2.source == "number")
              l2.source = _this._nodes[l2.source];
            if (typeof l2.target == "number")
              l2.target = _this._nodes[l2.target];
          });
          this._links.forEach(function(e2) {
            var u2 = Layout3.getSourceIndex(e2), v2 = Layout3.getTargetIndex(e2);
            G2[u2][v2] = G2[v2][u2] = e2.weight || 1;
          });
        }
        var D2 = descent_1.Descent.createSquareMatrix(N2, function(i3, j2) {
          return distances2[i3][j2];
        });
        if (this._rootGroup && typeof this._rootGroup.groups !== "undefined") {
          var i2 = n2;
          var addAttraction = function(i3, j2, strength, idealDistance) {
            G2[i3][j2] = G2[j2][i3] = strength;
            D2[i3][j2] = D2[j2][i3] = idealDistance;
          };
          this._groups.forEach(function(g2) {
            addAttraction(i2, i2 + 1, _this._groupCompactness, 0.1);
            x2[i2] = 0, y2[i2++] = 0;
            x2[i2] = 0, y2[i2++] = 0;
          });
        } else
          this._rootGroup = { leaves: this._nodes, groups: [] };
        var curConstraints = this._constraints || [];
        if (this._directedLinkConstraints) {
          this.linkAccessor.getMinSeparation = this._directedLinkConstraints.getMinSeparation;
          curConstraints = curConstraints.concat(linklengths_1.generateDirectedEdgeConstraints(n2, this._links, this._directedLinkConstraints.axis, this.linkAccessor));
        }
        this.avoidOverlaps(false);
        this._descent = new descent_1.Descent([x2, y2], D2);
        this._descent.locks.clear();
        for (var i2 = 0; i2 < n2; ++i2) {
          var o2 = this._nodes[i2];
          if (o2.fixed) {
            o2.px = o2.x;
            o2.py = o2.y;
            var p2 = [o2.x, o2.y];
            this._descent.locks.add(i2, p2);
          }
        }
        this._descent.threshold = this._threshold;
        this.initialLayout(initialUnconstrainedIterations, x2, y2);
        if (curConstraints.length > 0)
          this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();
        this._descent.run(initialUserConstraintIterations);
        this.separateOverlappingComponents(w2, h2, centerGraph);
        this.avoidOverlaps(ao);
        if (ao) {
          this._nodes.forEach(function(v2, i3) {
            v2.x = x2[i3], v2.y = y2[i3];
          });
          this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();
          this._nodes.forEach(function(v2, i3) {
            x2[i3] = v2.x, y2[i3] = v2.y;
          });
        }
        this._descent.G = G2;
        this._descent.run(initialAllConstraintsIterations);
        if (gridSnapIterations) {
          this._descent.snapStrength = 1e3;
          this._descent.snapGridSize = this._nodes[0].width;
          this._descent.numGridSnapNodes = n2;
          this._descent.scaleSnapByMaxH = n2 != N2;
          var G0 = descent_1.Descent.createSquareMatrix(N2, function(i3, j2) {
            if (i3 >= n2 || j2 >= n2)
              return G2[i3][j2];
            return 0;
          });
          this._descent.G = G0;
          this._descent.run(gridSnapIterations);
        }
        this.updateNodePositions();
        this.separateOverlappingComponents(w2, h2, centerGraph);
        return keepRunning ? this.resume() : this;
      };
      Layout3.prototype.initialLayout = function(iterations, x2, y2) {
        if (this._groups.length > 0 && iterations > 0) {
          var n2 = this._nodes.length;
          var edges3 = this._links.map(function(e2) {
            return { source: e2.source.index, target: e2.target.index };
          });
          var vs = this._nodes.map(function(v2) {
            return { index: v2.index };
          });
          this._groups.forEach(function(g2, i2) {
            vs.push({ index: g2.index = n2 + i2 });
          });
          this._groups.forEach(function(g2, i2) {
            if (typeof g2.leaves !== "undefined")
              g2.leaves.forEach(function(v2) {
                return edges3.push({ source: g2.index, target: v2.index });
              });
            if (typeof g2.groups !== "undefined")
              g2.groups.forEach(function(gg) {
                return edges3.push({ source: g2.index, target: gg.index });
              });
          });
          new Layout3().size(this.size()).nodes(vs).links(edges3).avoidOverlaps(false).linkDistance(this.linkDistance()).symmetricDiffLinkLengths(5).convergenceThreshold(1e-4).start(iterations, 0, 0, 0, false);
          this._nodes.forEach(function(v2) {
            x2[v2.index] = vs[v2.index].x;
            y2[v2.index] = vs[v2.index].y;
          });
        } else {
          this._descent.run(iterations);
        }
      };
      Layout3.prototype.separateOverlappingComponents = function(width2, height2, centerGraph) {
        var _this = this;
        if (centerGraph === void 0) {
          centerGraph = true;
        }
        if (!this._distanceMatrix && this._handleDisconnected) {
          var x_1 = this._descent.x[0], y_1 = this._descent.x[1];
          this._nodes.forEach(function(v2, i2) {
            v2.x = x_1[i2], v2.y = y_1[i2];
          });
          var graphs = handledisconnected_1.separateGraphs(this._nodes, this._links);
          handledisconnected_1.applyPacking(graphs, width2, height2, this._defaultNodeSize, 1, centerGraph);
          this._nodes.forEach(function(v2, i2) {
            _this._descent.x[0][i2] = v2.x, _this._descent.x[1][i2] = v2.y;
            if (v2.bounds) {
              v2.bounds.setXCentre(v2.x);
              v2.bounds.setYCentre(v2.y);
            }
          });
        }
      };
      Layout3.prototype.resume = function() {
        return this.alpha(0.1);
      };
      Layout3.prototype.stop = function() {
        return this.alpha(0);
      };
      Layout3.prototype.prepareEdgeRouting = function(nodeMargin) {
        if (nodeMargin === void 0) {
          nodeMargin = 0;
        }
        this._visibilityGraph = new geom_1.TangentVisibilityGraph(this._nodes.map(function(v2) {
          return v2.bounds.inflate(-nodeMargin).vertices();
        }));
      };
      Layout3.prototype.routeEdge = function(edge, ah, draw) {
        if (ah === void 0) {
          ah = 5;
        }
        var lineData = [];
        var vg2 = new geom_1.TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }), port1 = { x: edge.source.x, y: edge.source.y }, port2 = { x: edge.target.x, y: edge.target.y }, start = vg2.addPoint(port1, edge.source.index), end = vg2.addPoint(port2, edge.target.index);
        vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);
        if (typeof draw !== "undefined") {
          draw(vg2);
        }
        var sourceInd = function(e2) {
          return e2.source.id;
        }, targetInd = function(e2) {
          return e2.target.id;
        }, length = function(e2) {
          return e2.length();
        }, spCalc = new shortestpaths_1.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length), shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);
        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {
          var route = rectangle_1.makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);
          lineData = [route.sourceIntersection, route.arrowStart];
        } else {
          var n2 = shortestPath.length - 2, p2 = vg2.V[shortestPath[n2]].p, q2 = vg2.V[shortestPath[0]].p, lineData = [edge.source.innerBounds.rayIntersection(p2.x, p2.y)];
          for (var i2 = n2; i2 >= 0; --i2)
            lineData.push(vg2.V[shortestPath[i2]].p);
          lineData.push(rectangle_1.makeEdgeTo(q2, edge.target.innerBounds, ah));
        }
        return lineData;
      };
      Layout3.getSourceIndex = function(e2) {
        return typeof e2.source === "number" ? e2.source : e2.source.index;
      };
      Layout3.getTargetIndex = function(e2) {
        return typeof e2.target === "number" ? e2.target : e2.target.index;
      };
      Layout3.linkId = function(e2) {
        return Layout3.getSourceIndex(e2) + "-" + Layout3.getTargetIndex(e2);
      };
      Layout3.dragStart = function(d2) {
        if (isGroup(d2)) {
          Layout3.storeOffset(d2, Layout3.dragOrigin(d2));
        } else {
          Layout3.stopNode(d2);
          d2.fixed |= 2;
        }
      };
      Layout3.stopNode = function(v2) {
        v2.px = v2.x;
        v2.py = v2.y;
      };
      Layout3.storeOffset = function(d2, origin) {
        if (typeof d2.leaves !== "undefined") {
          d2.leaves.forEach(function(v2) {
            v2.fixed |= 2;
            Layout3.stopNode(v2);
            v2._dragGroupOffsetX = v2.x - origin.x;
            v2._dragGroupOffsetY = v2.y - origin.y;
          });
        }
        if (typeof d2.groups !== "undefined") {
          d2.groups.forEach(function(g2) {
            return Layout3.storeOffset(g2, origin);
          });
        }
      };
      Layout3.dragOrigin = function(d2) {
        if (isGroup(d2)) {
          return {
            x: d2.bounds.cx(),
            y: d2.bounds.cy()
          };
        } else {
          return d2;
        }
      };
      Layout3.drag = function(d2, position3) {
        if (isGroup(d2)) {
          if (typeof d2.leaves !== "undefined") {
            d2.leaves.forEach(function(v2) {
              d2.bounds.setXCentre(position3.x);
              d2.bounds.setYCentre(position3.y);
              v2.px = v2._dragGroupOffsetX + position3.x;
              v2.py = v2._dragGroupOffsetY + position3.y;
            });
          }
          if (typeof d2.groups !== "undefined") {
            d2.groups.forEach(function(g2) {
              return Layout3.drag(g2, position3);
            });
          }
        } else {
          d2.px = position3.x;
          d2.py = position3.y;
        }
      };
      Layout3.dragEnd = function(d2) {
        if (isGroup(d2)) {
          if (typeof d2.leaves !== "undefined") {
            d2.leaves.forEach(function(v2) {
              Layout3.dragEnd(v2);
              delete v2._dragGroupOffsetX;
              delete v2._dragGroupOffsetY;
            });
          }
          if (typeof d2.groups !== "undefined") {
            d2.groups.forEach(Layout3.dragEnd);
          }
        } else {
          d2.fixed &= ~6;
        }
      };
      Layout3.mouseOver = function(d2) {
        d2.fixed |= 4;
        d2.px = d2.x, d2.py = d2.y;
      };
      Layout3.mouseOut = function(d2) {
        d2.fixed &= ~4;
      };
      return Layout3;
    }();
    exports.Layout = Layout2;
  })(layout3);
  return layout3;
}
var hasRequiredAdaptor;
function requireAdaptor() {
  if (hasRequiredAdaptor)
    return adaptor;
  hasRequiredAdaptor = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(adaptor, "__esModule", { value: true });
  var layout_12 = requireLayout();
  var LayoutAdaptor = function(_super) {
    __extends2(LayoutAdaptor2, _super);
    function LayoutAdaptor2(options2) {
      var _this = _super.call(this) || this;
      var o2 = options2;
      if (o2.trigger) {
        _this.trigger = o2.trigger;
      }
      if (o2.kick) {
        _this.kick = o2.kick;
      }
      if (o2.drag) {
        _this.drag = o2.drag;
      }
      if (o2.on) {
        _this.on = o2.on;
      }
      _this.dragstart = _this.dragStart = layout_12.Layout.dragStart;
      _this.dragend = _this.dragEnd = layout_12.Layout.dragEnd;
      return _this;
    }
    LayoutAdaptor2.prototype.trigger = function(e2) {
    };
    LayoutAdaptor2.prototype.kick = function() {
    };
    LayoutAdaptor2.prototype.drag = function() {
    };
    LayoutAdaptor2.prototype.on = function(eventType, listener) {
      return this;
    };
    return LayoutAdaptor2;
  }(layout_12.Layout);
  adaptor.LayoutAdaptor = LayoutAdaptor;
  function adaptor$1(options2) {
    return new LayoutAdaptor(options2);
  }
  adaptor.adaptor = adaptor$1;
  return adaptor;
}
var d3adaptor = {};
var d3v3adaptor = {};
var hasRequiredD3v3adaptor;
function requireD3v3adaptor() {
  if (hasRequiredD3v3adaptor)
    return d3v3adaptor;
  hasRequiredD3v3adaptor = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(d3v3adaptor, "__esModule", { value: true });
  var layout_12 = requireLayout();
  var D3StyleLayoutAdaptor = function(_super) {
    __extends2(D3StyleLayoutAdaptor2, _super);
    function D3StyleLayoutAdaptor2() {
      var _this = _super.call(this) || this;
      _this.event = d3.dispatch(layout_12.EventType[layout_12.EventType.start], layout_12.EventType[layout_12.EventType.tick], layout_12.EventType[layout_12.EventType.end]);
      var d3layout = _this;
      _this.drag = function() {
        if (!drag) {
          var drag = d3.behavior.drag().origin(layout_12.Layout.dragOrigin).on("dragstart.d3adaptor", layout_12.Layout.dragStart).on("drag.d3adaptor", function(d2) {
            layout_12.Layout.drag(d2, d3.event);
            d3layout.resume();
          }).on("dragend.d3adaptor", layout_12.Layout.dragEnd);
        }
        if (!arguments.length)
          return drag;
        this.call(drag);
      };
      return _this;
    }
    D3StyleLayoutAdaptor2.prototype.trigger = function(e2) {
      var d3event = { type: layout_12.EventType[e2.type], alpha: e2.alpha, stress: e2.stress };
      this.event[d3event.type](d3event);
    };
    D3StyleLayoutAdaptor2.prototype.kick = function() {
      var _this = this;
      d3.timer(function() {
        return _super.prototype.tick.call(_this);
      });
    };
    D3StyleLayoutAdaptor2.prototype.on = function(eventType, listener) {
      if (typeof eventType === "string") {
        this.event.on(eventType, listener);
      } else {
        this.event.on(layout_12.EventType[eventType], listener);
      }
      return this;
    };
    return D3StyleLayoutAdaptor2;
  }(layout_12.Layout);
  d3v3adaptor.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;
  function d3adaptor2() {
    return new D3StyleLayoutAdaptor();
  }
  d3v3adaptor.d3adaptor = d3adaptor2;
  return d3v3adaptor;
}
var d3v4adaptor = {};
var hasRequiredD3v4adaptor;
function requireD3v4adaptor() {
  if (hasRequiredD3v4adaptor)
    return d3v4adaptor;
  hasRequiredD3v4adaptor = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (b3.hasOwnProperty(p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(d3v4adaptor, "__esModule", { value: true });
  var layout_12 = requireLayout();
  var D3StyleLayoutAdaptor = function(_super) {
    __extends2(D3StyleLayoutAdaptor2, _super);
    function D3StyleLayoutAdaptor2(d3Context) {
      var _this = _super.call(this) || this;
      _this.d3Context = d3Context;
      _this.event = d3Context.dispatch(layout_12.EventType[layout_12.EventType.start], layout_12.EventType[layout_12.EventType.tick], layout_12.EventType[layout_12.EventType.end]);
      var d3layout = _this;
      _this.drag = function() {
        if (!drag) {
          var drag = d3Context.drag().subject(layout_12.Layout.dragOrigin).on("start.d3adaptor", layout_12.Layout.dragStart).on("drag.d3adaptor", function(d2) {
            layout_12.Layout.drag(d2, d3Context.event);
            d3layout.resume();
          }).on("end.d3adaptor", layout_12.Layout.dragEnd);
        }
        if (!arguments.length)
          return drag;
        arguments[0].call(drag);
      };
      return _this;
    }
    D3StyleLayoutAdaptor2.prototype.trigger = function(e2) {
      var d3event = { type: layout_12.EventType[e2.type], alpha: e2.alpha, stress: e2.stress };
      this.event.call(d3event.type, d3event);
    };
    D3StyleLayoutAdaptor2.prototype.kick = function() {
      var _this = this;
      var t3 = this.d3Context.timer(function() {
        return _super.prototype.tick.call(_this) && t3.stop();
      });
    };
    D3StyleLayoutAdaptor2.prototype.on = function(eventType, listener) {
      if (typeof eventType === "string") {
        this.event.on(eventType, listener);
      } else {
        this.event.on(layout_12.EventType[eventType], listener);
      }
      return this;
    };
    return D3StyleLayoutAdaptor2;
  }(layout_12.Layout);
  d3v4adaptor.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;
  return d3v4adaptor;
}
var hasRequiredD3adaptor;
function requireD3adaptor() {
  if (hasRequiredD3adaptor)
    return d3adaptor;
  hasRequiredD3adaptor = 1;
  Object.defineProperty(d3adaptor, "__esModule", { value: true });
  var d3v3 = requireD3v3adaptor();
  var d3v4 = requireD3v4adaptor();
  function d3adaptor$1(d3Context) {
    if (!d3Context || isD3V3(d3Context)) {
      return new d3v3.D3StyleLayoutAdaptor();
    }
    return new d3v4.D3StyleLayoutAdaptor(d3Context);
  }
  d3adaptor.d3adaptor = d3adaptor$1;
  function isD3V3(d3Context) {
    var v3exp = /^3\./;
    return d3Context.version && d3Context.version.match(v3exp) !== null;
  }
  return d3adaptor;
}
var gridrouter = {};
var hasRequiredGridrouter;
function requireGridrouter() {
  if (hasRequiredGridrouter)
    return gridrouter;
  hasRequiredGridrouter = 1;
  Object.defineProperty(gridrouter, "__esModule", { value: true });
  var rectangle_1 = requireRectangle();
  var vpsc_1 = requireVpsc();
  var shortestpaths_1 = requireShortestpaths();
  var NodeWrapper = function() {
    function NodeWrapper2(id2, rect, children2) {
      this.id = id2;
      this.rect = rect;
      this.children = children2;
      this.leaf = typeof children2 === "undefined" || children2.length === 0;
    }
    return NodeWrapper2;
  }();
  gridrouter.NodeWrapper = NodeWrapper;
  var Vert = function() {
    function Vert2(id2, x2, y2, node, line) {
      if (node === void 0) {
        node = null;
      }
      if (line === void 0) {
        line = null;
      }
      this.id = id2;
      this.x = x2;
      this.y = y2;
      this.node = node;
      this.line = line;
    }
    return Vert2;
  }();
  gridrouter.Vert = Vert;
  var LongestCommonSubsequence = function() {
    function LongestCommonSubsequence2(s2, t3) {
      this.s = s2;
      this.t = t3;
      var mf = LongestCommonSubsequence2.findMatch(s2, t3);
      var tr = t3.slice(0).reverse();
      var mr = LongestCommonSubsequence2.findMatch(s2, tr);
      if (mf.length >= mr.length) {
        this.length = mf.length;
        this.si = mf.si;
        this.ti = mf.ti;
        this.reversed = false;
      } else {
        this.length = mr.length;
        this.si = mr.si;
        this.ti = t3.length - mr.ti - mr.length;
        this.reversed = true;
      }
    }
    LongestCommonSubsequence2.findMatch = function(s2, t3) {
      var m2 = s2.length;
      var n2 = t3.length;
      var match2 = { length: 0, si: -1, ti: -1 };
      var l2 = new Array(m2);
      for (var i2 = 0; i2 < m2; i2++) {
        l2[i2] = new Array(n2);
        for (var j2 = 0; j2 < n2; j2++)
          if (s2[i2] === t3[j2]) {
            var v2 = l2[i2][j2] = i2 === 0 || j2 === 0 ? 1 : l2[i2 - 1][j2 - 1] + 1;
            if (v2 > match2.length) {
              match2.length = v2;
              match2.si = i2 - v2 + 1;
              match2.ti = j2 - v2 + 1;
            }
          } else
            l2[i2][j2] = 0;
      }
      return match2;
    };
    LongestCommonSubsequence2.prototype.getSequence = function() {
      return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];
    };
    return LongestCommonSubsequence2;
  }();
  gridrouter.LongestCommonSubsequence = LongestCommonSubsequence;
  var GridRouter = function() {
    function GridRouter2(originalnodes, accessor, groupPadding) {
      var _this = this;
      if (groupPadding === void 0) {
        groupPadding = 12;
      }
      this.originalnodes = originalnodes;
      this.groupPadding = groupPadding;
      this.leaves = null;
      this.nodes = originalnodes.map(function(v2, i2) {
        return new NodeWrapper(i2, accessor.getBounds(v2), accessor.getChildren(v2));
      });
      this.leaves = this.nodes.filter(function(v2) {
        return v2.leaf;
      });
      this.groups = this.nodes.filter(function(g2) {
        return !g2.leaf;
      });
      this.cols = this.getGridLines("x");
      this.rows = this.getGridLines("y");
      this.groups.forEach(function(v2) {
        return v2.children.forEach(function(c2) {
          return _this.nodes[c2].parent = v2;
        });
      });
      this.root = { children: [] };
      this.nodes.forEach(function(v2) {
        if (typeof v2.parent === "undefined") {
          v2.parent = _this.root;
          _this.root.children.push(v2.id);
        }
        v2.ports = [];
      });
      this.backToFront = this.nodes.slice(0);
      this.backToFront.sort(function(x2, y2) {
        return _this.getDepth(x2) - _this.getDepth(y2);
      });
      var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function(g2) {
        return !g2.leaf;
      });
      frontToBackGroups.forEach(function(v2) {
        var r2 = rectangle_1.Rectangle.empty();
        v2.children.forEach(function(c2) {
          return r2 = r2.union(_this.nodes[c2].rect);
        });
        v2.rect = r2.inflate(_this.groupPadding);
      });
      var colMids = this.midPoints(this.cols.map(function(r2) {
        return r2.pos;
      }));
      var rowMids = this.midPoints(this.rows.map(function(r2) {
        return r2.pos;
      }));
      var rowx = colMids[0], rowX = colMids[colMids.length - 1];
      var coly = rowMids[0], colY = rowMids[rowMids.length - 1];
      var hlines = this.rows.map(function(r2) {
        return { x1: rowx, x2: rowX, y1: r2.pos, y2: r2.pos };
      }).concat(rowMids.map(function(m2) {
        return { x1: rowx, x2: rowX, y1: m2, y2: m2 };
      }));
      var vlines = this.cols.map(function(c2) {
        return { x1: c2.pos, x2: c2.pos, y1: coly, y2: colY };
      }).concat(colMids.map(function(m2) {
        return { x1: m2, x2: m2, y1: coly, y2: colY };
      }));
      var lines = hlines.concat(vlines);
      lines.forEach(function(l2) {
        return l2.verts = [];
      });
      this.verts = [];
      this.edges = [];
      hlines.forEach(function(h2) {
        return vlines.forEach(function(v2) {
          var p2 = new Vert(_this.verts.length, v2.x1, h2.y1);
          h2.verts.push(p2);
          v2.verts.push(p2);
          _this.verts.push(p2);
          var i2 = _this.backToFront.length;
          while (i2-- > 0) {
            var node = _this.backToFront[i2], r2 = node.rect;
            var dx = Math.abs(p2.x - r2.cx()), dy = Math.abs(p2.y - r2.cy());
            if (dx < r2.width() / 2 && dy < r2.height() / 2) {
              p2.node = node;
              break;
            }
          }
        });
      });
      lines.forEach(function(l2, li) {
        _this.nodes.forEach(function(v3, i3) {
          v3.rect.lineIntersections(l2.x1, l2.y1, l2.x2, l2.y2).forEach(function(intersect2, j2) {
            var p2 = new Vert(_this.verts.length, intersect2.x, intersect2.y, v3, l2);
            _this.verts.push(p2);
            l2.verts.push(p2);
            v3.ports.push(p2);
          });
        });
        var isHoriz = Math.abs(l2.y1 - l2.y2) < 0.1;
        var delta = function(a2, b2) {
          return isHoriz ? b2.x - a2.x : b2.y - a2.y;
        };
        l2.verts.sort(delta);
        for (var i2 = 1; i2 < l2.verts.length; i2++) {
          var u2 = l2.verts[i2 - 1], v2 = l2.verts[i2];
          if (u2.node && u2.node === v2.node && u2.node.leaf)
            continue;
          _this.edges.push({ source: u2.id, target: v2.id, length: Math.abs(delta(u2, v2)) });
        }
      });
    }
    GridRouter2.prototype.avg = function(a2) {
      return a2.reduce(function(x2, y2) {
        return x2 + y2;
      }) / a2.length;
    };
    GridRouter2.prototype.getGridLines = function(axis) {
      var columns = [];
      var ls = this.leaves.slice(0, this.leaves.length);
      while (ls.length > 0) {
        var overlapping = ls.filter(function(v2) {
          return v2.rect["overlap" + axis.toUpperCase()](ls[0].rect);
        });
        var col = {
          nodes: overlapping,
          pos: this.avg(overlapping.map(function(v2) {
            return v2.rect["c" + axis]();
          }))
        };
        columns.push(col);
        col.nodes.forEach(function(v2) {
          return ls.splice(ls.indexOf(v2), 1);
        });
      }
      columns.sort(function(a2, b2) {
        return a2.pos - b2.pos;
      });
      return columns;
    };
    GridRouter2.prototype.getDepth = function(v2) {
      var depth = 0;
      while (v2.parent !== this.root) {
        depth++;
        v2 = v2.parent;
      }
      return depth;
    };
    GridRouter2.prototype.midPoints = function(a2) {
      var gap = a2[1] - a2[0];
      var mids = [a2[0] - gap / 2];
      for (var i2 = 1; i2 < a2.length; i2++) {
        mids.push((a2[i2] + a2[i2 - 1]) / 2);
      }
      mids.push(a2[a2.length - 1] + gap / 2);
      return mids;
    };
    GridRouter2.prototype.findLineage = function(v2) {
      var lineage = [v2];
      do {
        v2 = v2.parent;
        lineage.push(v2);
      } while (v2 !== this.root);
      return lineage.reverse();
    };
    GridRouter2.prototype.findAncestorPathBetween = function(a2, b2) {
      var aa = this.findLineage(a2), ba = this.findLineage(b2), i2 = 0;
      while (aa[i2] === ba[i2])
        i2++;
      return { commonAncestor: aa[i2 - 1], lineages: aa.slice(i2).concat(ba.slice(i2)) };
    };
    GridRouter2.prototype.siblingObstacles = function(a2, b2) {
      var _this = this;
      var path = this.findAncestorPathBetween(a2, b2);
      var lineageLookup = {};
      path.lineages.forEach(function(v2) {
        return lineageLookup[v2.id] = {};
      });
      var obstacles = path.commonAncestor.children.filter(function(v2) {
        return !(v2 in lineageLookup);
      });
      path.lineages.filter(function(v2) {
        return v2.parent !== path.commonAncestor;
      }).forEach(function(v2) {
        return obstacles = obstacles.concat(v2.parent.children.filter(function(c2) {
          return c2 !== v2.id;
        }));
      });
      return obstacles.map(function(v2) {
        return _this.nodes[v2];
      });
    };
    GridRouter2.getSegmentSets = function(routes, x2, y2) {
      var vsegments = [];
      for (var ei = 0; ei < routes.length; ei++) {
        var route = routes[ei];
        for (var si = 0; si < route.length; si++) {
          var s2 = route[si];
          s2.edgeid = ei;
          s2.i = si;
          var sdx = s2[1][x2] - s2[0][x2];
          if (Math.abs(sdx) < 0.1) {
            vsegments.push(s2);
          }
        }
      }
      vsegments.sort(function(a2, b2) {
        return a2[0][x2] - b2[0][x2];
      });
      var vsegmentsets = [];
      var segmentset = null;
      for (var i2 = 0; i2 < vsegments.length; i2++) {
        var s2 = vsegments[i2];
        if (!segmentset || Math.abs(s2[0][x2] - segmentset.pos) > 0.1) {
          segmentset = { pos: s2[0][x2], segments: [] };
          vsegmentsets.push(segmentset);
        }
        segmentset.segments.push(s2);
      }
      return vsegmentsets;
    };
    GridRouter2.nudgeSegs = function(x2, y2, routes, segments, leftOf, gap) {
      var n2 = segments.length;
      if (n2 <= 1)
        return;
      var vs = segments.map(function(s3) {
        return new vpsc_1.Variable(s3[0][x2]);
      });
      var cs = [];
      for (var i2 = 0; i2 < n2; i2++) {
        for (var j2 = 0; j2 < n2; j2++) {
          if (i2 === j2)
            continue;
          var s1 = segments[i2], s2 = segments[j2], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;
          if (x2 == "x") {
            if (leftOf(e1, e2)) {
              if (s1[0][y2] < s1[1][y2]) {
                lind = j2, rind = i2;
              } else {
                lind = i2, rind = j2;
              }
            }
          } else {
            if (leftOf(e1, e2)) {
              if (s1[0][y2] < s1[1][y2]) {
                lind = i2, rind = j2;
              } else {
                lind = j2, rind = i2;
              }
            }
          }
          if (lind >= 0) {
            cs.push(new vpsc_1.Constraint(vs[lind], vs[rind], gap));
          }
        }
      }
      var solver = new vpsc_1.Solver(vs, cs);
      solver.solve();
      vs.forEach(function(v2, i3) {
        var s3 = segments[i3];
        var pos = v2.position();
        s3[0][x2] = s3[1][x2] = pos;
        var route = routes[s3.edgeid];
        if (s3.i > 0)
          route[s3.i - 1][1][x2] = pos;
        if (s3.i < route.length - 1)
          route[s3.i + 1][0][x2] = pos;
      });
    };
    GridRouter2.nudgeSegments = function(routes, x2, y2, leftOf, gap) {
      var vsegmentsets = GridRouter2.getSegmentSets(routes, x2, y2);
      for (var i2 = 0; i2 < vsegmentsets.length; i2++) {
        var ss = vsegmentsets[i2];
        var events = [];
        for (var j2 = 0; j2 < ss.segments.length; j2++) {
          var s2 = ss.segments[j2];
          events.push({ type: 0, s: s2, pos: Math.min(s2[0][y2], s2[1][y2]) });
          events.push({ type: 1, s: s2, pos: Math.max(s2[0][y2], s2[1][y2]) });
        }
        events.sort(function(a2, b2) {
          return a2.pos - b2.pos + a2.type - b2.type;
        });
        var open2 = [];
        var openCount = 0;
        events.forEach(function(e2) {
          if (e2.type === 0) {
            open2.push(e2.s);
            openCount++;
          } else {
            openCount--;
          }
          if (openCount == 0) {
            GridRouter2.nudgeSegs(x2, y2, routes, open2, leftOf, gap);
            open2 = [];
          }
        });
      }
    };
    GridRouter2.prototype.routeEdges = function(edges3, nudgeGap, source, target) {
      var _this = this;
      var routePaths = edges3.map(function(e2) {
        return _this.route(source(e2), target(e2));
      });
      var order = GridRouter2.orderEdges(routePaths);
      var routes = routePaths.map(function(e2) {
        return GridRouter2.makeSegments(e2);
      });
      GridRouter2.nudgeSegments(routes, "x", "y", order, nudgeGap);
      GridRouter2.nudgeSegments(routes, "y", "x", order, nudgeGap);
      GridRouter2.unreverseEdges(routes, routePaths);
      return routes;
    };
    GridRouter2.unreverseEdges = function(routes, routePaths) {
      routes.forEach(function(segments, i2) {
        var path = routePaths[i2];
        if (path.reversed) {
          segments.reverse();
          segments.forEach(function(segment) {
            segment.reverse();
          });
        }
      });
    };
    GridRouter2.angleBetween2Lines = function(line1, line2) {
      var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);
      var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);
      var diff2 = angle1 - angle2;
      if (diff2 > Math.PI || diff2 < -Math.PI) {
        diff2 = angle2 - angle1;
      }
      return diff2;
    };
    GridRouter2.isLeft = function(a2, b2, c2) {
      return (b2.x - a2.x) * (c2.y - a2.y) - (b2.y - a2.y) * (c2.x - a2.x) <= 0;
    };
    GridRouter2.getOrder = function(pairs) {
      var outgoing = {};
      for (var i2 = 0; i2 < pairs.length; i2++) {
        var p2 = pairs[i2];
        if (typeof outgoing[p2.l] === "undefined")
          outgoing[p2.l] = {};
        outgoing[p2.l][p2.r] = true;
      }
      return function(l2, r2) {
        return typeof outgoing[l2] !== "undefined" && outgoing[l2][r2];
      };
    };
    GridRouter2.orderEdges = function(edges3) {
      var edgeOrder = [];
      for (var i2 = 0; i2 < edges3.length - 1; i2++) {
        for (var j2 = i2 + 1; j2 < edges3.length; j2++) {
          var e2 = edges3[i2], f2 = edges3[j2], lcs = new LongestCommonSubsequence(e2, f2);
          var u2, vi, vj;
          if (lcs.length === 0)
            continue;
          if (lcs.reversed) {
            f2.reverse();
            f2.reversed = true;
            lcs = new LongestCommonSubsequence(e2, f2);
          }
          if ((lcs.si <= 0 || lcs.ti <= 0) && (lcs.si + lcs.length >= e2.length || lcs.ti + lcs.length >= f2.length)) {
            edgeOrder.push({ l: i2, r: j2 });
            continue;
          }
          if (lcs.si + lcs.length >= e2.length || lcs.ti + lcs.length >= f2.length) {
            u2 = e2[lcs.si + 1];
            vj = e2[lcs.si - 1];
            vi = f2[lcs.ti - 1];
          } else {
            u2 = e2[lcs.si + lcs.length - 2];
            vi = e2[lcs.si + lcs.length];
            vj = f2[lcs.ti + lcs.length];
          }
          if (GridRouter2.isLeft(u2, vi, vj)) {
            edgeOrder.push({ l: j2, r: i2 });
          } else {
            edgeOrder.push({ l: i2, r: j2 });
          }
        }
      }
      return GridRouter2.getOrder(edgeOrder);
    };
    GridRouter2.makeSegments = function(path) {
      function copyPoint(p2) {
        return { x: p2.x, y: p2.y };
      }
      var isStraight = function(a3, b3, c3) {
        return Math.abs((b3.x - a3.x) * (c3.y - a3.y) - (b3.y - a3.y) * (c3.x - a3.x)) < 1e-3;
      };
      var segments = [];
      var a2 = copyPoint(path[0]);
      for (var i2 = 1; i2 < path.length; i2++) {
        var b2 = copyPoint(path[i2]), c2 = i2 < path.length - 1 ? path[i2 + 1] : null;
        if (!c2 || !isStraight(a2, b2, c2)) {
          segments.push([a2, b2]);
          a2 = b2;
        }
      }
      return segments;
    };
    GridRouter2.prototype.route = function(s2, t3) {
      var _this = this;
      var source = this.nodes[s2], target = this.nodes[t3];
      this.obstacles = this.siblingObstacles(source, target);
      var obstacleLookup = {};
      this.obstacles.forEach(function(o2) {
        return obstacleLookup[o2.id] = o2;
      });
      this.passableEdges = this.edges.filter(function(e2) {
        var u3 = _this.verts[e2.source], v3 = _this.verts[e2.target];
        return !(u3.node && u3.node.id in obstacleLookup || v3.node && v3.node.id in obstacleLookup);
      });
      for (var i2 = 1; i2 < source.ports.length; i2++) {
        var u2 = source.ports[0].id;
        var v2 = source.ports[i2].id;
        this.passableEdges.push({
          source: u2,
          target: v2,
          length: 0
        });
      }
      for (var i2 = 1; i2 < target.ports.length; i2++) {
        var u2 = target.ports[0].id;
        var v2 = target.ports[i2].id;
        this.passableEdges.push({
          source: u2,
          target: v2,
          length: 0
        });
      }
      var getSource = function(e2) {
        return e2.source;
      }, getTarget = function(e2) {
        return e2.target;
      }, getLength = function(e2) {
        return e2.length;
      };
      var shortestPathCalculator = new shortestpaths_1.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);
      var bendPenalty = function(u3, v3, w2) {
        var a2 = _this.verts[u3], b2 = _this.verts[v3], c2 = _this.verts[w2];
        var dx = Math.abs(c2.x - a2.x), dy = Math.abs(c2.y - a2.y);
        if (a2.node === source && a2.node === b2.node || b2.node === target && b2.node === c2.node)
          return 0;
        return dx > 1 && dy > 1 ? 1e3 : 0;
      };
      var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);
      var pathPoints = shortestPath.reverse().map(function(vi) {
        return _this.verts[vi];
      });
      pathPoints.push(this.nodes[target.id].ports[0]);
      return pathPoints.filter(function(v3, i3) {
        return !(i3 < pathPoints.length - 1 && pathPoints[i3 + 1].node === source && v3.node === source || i3 > 0 && v3.node === target && pathPoints[i3 - 1].node === target);
      });
    };
    GridRouter2.getRoutePath = function(route, cornerradius, arrowwidth, arrowheight) {
      var result = {
        routepath: "M " + route[0][0].x + " " + route[0][0].y + " ",
        arrowpath: ""
      };
      if (route.length > 1) {
        for (var i2 = 0; i2 < route.length; i2++) {
          var li = route[i2];
          var x2 = li[1].x, y2 = li[1].y;
          var dx = x2 - li[0].x;
          var dy = y2 - li[0].y;
          if (i2 < route.length - 1) {
            if (Math.abs(dx) > 0) {
              x2 -= dx / Math.abs(dx) * cornerradius;
            } else {
              y2 -= dy / Math.abs(dy) * cornerradius;
            }
            result.routepath += "L " + x2 + " " + y2 + " ";
            var l2 = route[i2 + 1];
            var x0 = l2[0].x, y0 = l2[0].y;
            var x1 = l2[1].x;
            var y1 = l2[1].y;
            dx = x1 - x0;
            dy = y1 - y0;
            var angle = GridRouter2.angleBetween2Lines(li, l2) < 0 ? 1 : 0;
            var x22, y22;
            if (Math.abs(dx) > 0) {
              x22 = x0 + dx / Math.abs(dx) * cornerradius;
              y22 = y0;
            } else {
              x22 = x0;
              y22 = y0 + dy / Math.abs(dy) * cornerradius;
            }
            var cx = Math.abs(x22 - x2);
            var cy2 = Math.abs(y22 - y2);
            result.routepath += "A " + cx + " " + cy2 + " 0 0 " + angle + " " + x22 + " " + y22 + " ";
          } else {
            var arrowtip = [x2, y2];
            var arrowcorner1, arrowcorner2;
            if (Math.abs(dx) > 0) {
              x2 -= dx / Math.abs(dx) * arrowheight;
              arrowcorner1 = [x2, y2 + arrowwidth];
              arrowcorner2 = [x2, y2 - arrowwidth];
            } else {
              y2 -= dy / Math.abs(dy) * arrowheight;
              arrowcorner1 = [x2 + arrowwidth, y2];
              arrowcorner2 = [x2 - arrowwidth, y2];
            }
            result.routepath += "L " + x2 + " " + y2 + " ";
            if (arrowheight > 0) {
              result.arrowpath = "M " + arrowtip[0] + " " + arrowtip[1] + " L " + arrowcorner1[0] + " " + arrowcorner1[1] + " L " + arrowcorner2[0] + " " + arrowcorner2[1];
            }
          }
        }
      } else {
        var li = route[0];
        var x2 = li[1].x, y2 = li[1].y;
        var dx = x2 - li[0].x;
        var dy = y2 - li[0].y;
        var arrowtip = [x2, y2];
        var arrowcorner1, arrowcorner2;
        if (Math.abs(dx) > 0) {
          x2 -= dx / Math.abs(dx) * arrowheight;
          arrowcorner1 = [x2, y2 + arrowwidth];
          arrowcorner2 = [x2, y2 - arrowwidth];
        } else {
          y2 -= dy / Math.abs(dy) * arrowheight;
          arrowcorner1 = [x2 + arrowwidth, y2];
          arrowcorner2 = [x2 - arrowwidth, y2];
        }
        result.routepath += "L " + x2 + " " + y2 + " ";
        if (arrowheight > 0) {
          result.arrowpath = "M " + arrowtip[0] + " " + arrowtip[1] + " L " + arrowcorner1[0] + " " + arrowcorner1[1] + " L " + arrowcorner2[0] + " " + arrowcorner2[1];
        }
      }
      return result;
    };
    return GridRouter2;
  }();
  gridrouter.GridRouter = GridRouter;
  return gridrouter;
}
var layout3d = {};
var hasRequiredLayout3d;
function requireLayout3d() {
  if (hasRequiredLayout3d)
    return layout3d;
  hasRequiredLayout3d = 1;
  Object.defineProperty(layout3d, "__esModule", { value: true });
  var shortestpaths_1 = requireShortestpaths();
  var descent_1 = requireDescent();
  var rectangle_1 = requireRectangle();
  var linklengths_1 = requireLinklengths();
  var Link3D = function() {
    function Link3D2(source, target) {
      this.source = source;
      this.target = target;
    }
    Link3D2.prototype.actualLength = function(x2) {
      var _this = this;
      return Math.sqrt(x2.reduce(function(c2, v2) {
        var dx = v2[_this.target] - v2[_this.source];
        return c2 + dx * dx;
      }, 0));
    };
    return Link3D2;
  }();
  layout3d.Link3D = Link3D;
  var Node3D = function() {
    function Node3D2(x2, y2, z2) {
      if (x2 === void 0) {
        x2 = 0;
      }
      if (y2 === void 0) {
        y2 = 0;
      }
      if (z2 === void 0) {
        z2 = 0;
      }
      this.x = x2;
      this.y = y2;
      this.z = z2;
    }
    return Node3D2;
  }();
  layout3d.Node3D = Node3D;
  var Layout3D = function() {
    function Layout3D2(nodes3, links, idealLinkLength) {
      var _this = this;
      if (idealLinkLength === void 0) {
        idealLinkLength = 1;
      }
      this.nodes = nodes3;
      this.links = links;
      this.idealLinkLength = idealLinkLength;
      this.constraints = null;
      this.useJaccardLinkLengths = true;
      this.result = new Array(Layout3D2.k);
      for (var i2 = 0; i2 < Layout3D2.k; ++i2) {
        this.result[i2] = new Array(nodes3.length);
      }
      nodes3.forEach(function(v2, i3) {
        for (var _i = 0, _a2 = Layout3D2.dims; _i < _a2.length; _i++) {
          var dim = _a2[_i];
          if (typeof v2[dim] == "undefined")
            v2[dim] = Math.random();
        }
        _this.result[0][i3] = v2.x;
        _this.result[1][i3] = v2.y;
        _this.result[2][i3] = v2.z;
      });
    }
    Layout3D2.prototype.linkLength = function(l2) {
      return l2.actualLength(this.result);
    };
    Layout3D2.prototype.start = function(iterations) {
      var _this = this;
      if (iterations === void 0) {
        iterations = 100;
      }
      var n2 = this.nodes.length;
      var linkAccessor = new LinkAccessor();
      if (this.useJaccardLinkLengths)
        linklengths_1.jaccardLinkLengths(this.links, linkAccessor, 1.5);
      this.links.forEach(function(e2) {
        return e2.length *= _this.idealLinkLength;
      });
      var distanceMatrix = new shortestpaths_1.Calculator(n2, this.links, function(e2) {
        return e2.source;
      }, function(e2) {
        return e2.target;
      }, function(e2) {
        return e2.length;
      }).DistanceMatrix();
      var D2 = descent_1.Descent.createSquareMatrix(n2, function(i3, j2) {
        return distanceMatrix[i3][j2];
      });
      var G2 = descent_1.Descent.createSquareMatrix(n2, function() {
        return 2;
      });
      this.links.forEach(function(_a2) {
        var source = _a2.source, target = _a2.target;
        return G2[source][target] = G2[target][source] = 1;
      });
      this.descent = new descent_1.Descent(this.result, D2);
      this.descent.threshold = 1e-3;
      this.descent.G = G2;
      if (this.constraints)
        this.descent.project = new rectangle_1.Projection(this.nodes, null, null, this.constraints).projectFunctions();
      for (var i2 = 0; i2 < this.nodes.length; i2++) {
        var v2 = this.nodes[i2];
        if (v2.fixed) {
          this.descent.locks.add(i2, [v2.x, v2.y, v2.z]);
        }
      }
      this.descent.run(iterations);
      return this;
    };
    Layout3D2.prototype.tick = function() {
      this.descent.locks.clear();
      for (var i2 = 0; i2 < this.nodes.length; i2++) {
        var v2 = this.nodes[i2];
        if (v2.fixed) {
          this.descent.locks.add(i2, [v2.x, v2.y, v2.z]);
        }
      }
      return this.descent.rungeKutta();
    };
    Layout3D2.dims = ["x", "y", "z"];
    Layout3D2.k = Layout3D2.dims.length;
    return Layout3D2;
  }();
  layout3d.Layout3D = Layout3D;
  var LinkAccessor = function() {
    function LinkAccessor2() {
    }
    LinkAccessor2.prototype.getSourceIndex = function(e2) {
      return e2.source;
    };
    LinkAccessor2.prototype.getTargetIndex = function(e2) {
      return e2.target;
    };
    LinkAccessor2.prototype.getLength = function(e2) {
      return e2.length;
    };
    LinkAccessor2.prototype.setLength = function(e2, l2) {
      e2.length = l2;
    };
    return LinkAccessor2;
  }();
  return layout3d;
}
var batch2 = {};
var hasRequiredBatch;
function requireBatch() {
  if (hasRequiredBatch)
    return batch2;
  hasRequiredBatch = 1;
  Object.defineProperty(batch2, "__esModule", { value: true });
  var layout_12 = requireLayout();
  var gridrouter_1 = requireGridrouter();
  function gridify(pgLayout, nudgeGap, margin, groupMargin) {
    pgLayout.cola.start(0, 0, 0, 10, false);
    var gridrouter2 = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);
    return gridrouter2.routeEdges(pgLayout.powerGraph.powerEdges, nudgeGap, function(e2) {
      return e2.source.routerNode.id;
    }, function(e2) {
      return e2.target.routerNode.id;
    });
  }
  batch2.gridify = gridify;
  function route(nodes3, groups, margin, groupMargin) {
    nodes3.forEach(function(d2) {
      d2.routerNode = {
        name: d2.name,
        bounds: d2.bounds.inflate(-margin)
      };
    });
    groups.forEach(function(d2) {
      d2.routerNode = {
        bounds: d2.bounds.inflate(-groupMargin),
        children: (typeof d2.groups !== "undefined" ? d2.groups.map(function(c2) {
          return nodes3.length + c2.id;
        }) : []).concat(typeof d2.leaves !== "undefined" ? d2.leaves.map(function(c2) {
          return c2.index;
        }) : [])
      };
    });
    var gridRouterNodes = nodes3.concat(groups).map(function(d2, i2) {
      d2.routerNode.id = i2;
      return d2.routerNode;
    });
    return new gridrouter_1.GridRouter(gridRouterNodes, {
      getChildren: function(v2) {
        return v2.children;
      },
      getBounds: function(v2) {
        return v2.bounds;
      }
    }, margin - groupMargin);
  }
  function powerGraphGridLayout(graph2, size3, grouppadding) {
    var powerGraph;
    graph2.nodes.forEach(function(v2, i2) {
      return v2.index = i2;
    });
    new layout_12.Layout().avoidOverlaps(false).nodes(graph2.nodes).links(graph2.links).powerGraphGroups(function(d2) {
      powerGraph = d2;
      powerGraph.groups.forEach(function(v2) {
        return v2.padding = grouppadding;
      });
    });
    var n2 = graph2.nodes.length;
    var edges3 = [];
    var vs = graph2.nodes.slice(0);
    vs.forEach(function(v2, i2) {
      return v2.index = i2;
    });
    powerGraph.groups.forEach(function(g2) {
      var sourceInd = g2.index = g2.id + n2;
      vs.push(g2);
      if (typeof g2.leaves !== "undefined")
        g2.leaves.forEach(function(v2) {
          return edges3.push({ source: sourceInd, target: v2.index });
        });
      if (typeof g2.groups !== "undefined")
        g2.groups.forEach(function(gg) {
          return edges3.push({ source: sourceInd, target: gg.id + n2 });
        });
    });
    powerGraph.powerEdges.forEach(function(e2) {
      edges3.push({ source: e2.source.index, target: e2.target.index });
    });
    new layout_12.Layout().size(size3).nodes(vs).links(edges3).avoidOverlaps(false).linkDistance(30).symmetricDiffLinkLengths(5).convergenceThreshold(1e-4).start(100, 0, 0, 0, false);
    return {
      cola: new layout_12.Layout().convergenceThreshold(1e-3).size(size3).avoidOverlaps(true).nodes(graph2.nodes).links(graph2.links).groupCompactness(1e-4).linkDistance(30).symmetricDiffLinkLengths(5).powerGraphGroups(function(d2) {
        powerGraph = d2;
        powerGraph.groups.forEach(function(v2) {
          v2.padding = grouppadding;
        });
      }).start(50, 0, 100, 0, false),
      powerGraph
    };
  }
  batch2.powerGraphGridLayout = powerGraphGridLayout;
  return batch2;
}
var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist)
    return dist$1;
  hasRequiredDist = 1;
  (function(exports) {
    function __export(m2) {
      for (var p2 in m2)
        if (!exports.hasOwnProperty(p2))
          exports[p2] = m2[p2];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(requireAdaptor());
    __export(requireD3adaptor());
    __export(requireDescent());
    __export(requireGeom());
    __export(requireGridrouter());
    __export(requireHandledisconnected());
    __export(requireLayout());
    __export(requireLayout3d());
    __export(requireLinklengths());
    __export(requirePowergraph());
    __export(requirePqueue());
    __export(requireRbtree());
    __export(requireRectangle());
    __export(requireShortestpaths());
    __export(requireVpsc());
    __export(requireBatch());
  })(dist$1);
  return dist$1;
}
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory(requireDist());
  })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_5__) {
    return (
      /******/
      function(modules2) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
          };
          modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules2;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name2, getter) {
          if (!__webpack_require__.o(exports2, name2)) {
            Object.defineProperty(exports2, name2, {
              /******/
              configurable: false,
              /******/
              enumerable: true,
              /******/
              get: getter
              /******/
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function getDefault() {
              return module2["default"];
            }
          ) : (
            /******/
            function getModuleExports() {
              return module2;
            }
          );
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object3, property) {
          return Object.prototype.hasOwnProperty.call(object3, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 3);
      }([
        /* 0 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var assign5 = __webpack_require__(1);
          var defaults3 = __webpack_require__(2);
          var cola2 = __webpack_require__(5) || (typeof window !== "undefined" ? window.cola : null);
          var raf2 = __webpack_require__(4);
          var isString = function isString2(o2) {
            return (typeof o2 === "undefined" ? "undefined" : _typeof2(o2)) === _typeof2("");
          };
          var isNumber = function isNumber2(o2) {
            return (typeof o2 === "undefined" ? "undefined" : _typeof2(o2)) === _typeof2(0);
          };
          var isObject2 = function isObject3(o2) {
            return o2 != null && (typeof o2 === "undefined" ? "undefined" : _typeof2(o2)) === _typeof2({});
          };
          var isFunction2 = function isFunction3(o2) {
            return o2 != null && (typeof o2 === "undefined" ? "undefined" : _typeof2(o2)) === _typeof2(function() {
            });
          };
          var nop = function nop2() {
          };
          var getOptVal = function getOptVal2(val, ele) {
            if (isFunction2(val)) {
              var fn3 = val;
              return fn3.apply(ele, [ele]);
            } else {
              return val;
            }
          };
          function ColaLayout(options2) {
            this.options = assign5({}, defaults3, options2);
          }
          ColaLayout.prototype.run = function() {
            var layout4 = this;
            var options2 = this.options;
            layout4.manuallyStopped = false;
            var cy2 = options2.cy;
            var eles = options2.eles;
            var nodes3 = eles.nodes();
            var edges3 = eles.edges();
            var ready4 = false;
            var isParent2 = function isParent3(ele) {
              return ele.isParent();
            };
            var parentNodes = nodes3.filter(isParent2);
            var nonparentNodes = nodes3.subtract(parentNodes);
            var bb = options2.boundingBox || { x1: 0, y1: 0, w: cy2.width(), h: cy2.height() };
            if (bb.x2 === void 0) {
              bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w === void 0) {
              bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 === void 0) {
              bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h === void 0) {
              bb.h = bb.y2 - bb.y1;
            }
            var updateNodePositions = function updateNodePositions2() {
              for (var i2 = 0; i2 < nodes3.length; i2++) {
                var node = nodes3[i2];
                var dimensions2 = node.layoutDimensions(options2);
                var scratch = node.scratch("cola");
                if (!scratch.updatedDims) {
                  var padding = getOptVal(options2.nodeSpacing, node);
                  scratch.width = dimensions2.w + 2 * padding;
                  scratch.height = dimensions2.h + 2 * padding;
                }
              }
              nodes3.positions(function(node2) {
                var scratch2 = node2.scratch().cola;
                var retPos = void 0;
                if (!node2.grabbed() && nonparentNodes.contains(node2)) {
                  retPos = {
                    x: bb.x1 + scratch2.x,
                    y: bb.y1 + scratch2.y
                  };
                  if (!isNumber(retPos.x) || !isNumber(retPos.y)) {
                    retPos = void 0;
                  }
                }
                return retPos;
              });
              nodes3.updateCompoundBounds();
              if (!ready4) {
                onReady();
                ready4 = true;
              }
              if (options2.fit) {
                cy2.fit(options2.padding);
              }
            };
            var onDone = function onDone2() {
              if (options2.ungrabifyWhileSimulating) {
                grabbableNodes.grabify();
              }
              cy2.off("destroy", destroyHandler);
              nodes3.off("grab free position", grabHandler);
              nodes3.off("lock unlock", lockHandler);
              layout4.one("layoutstop", options2.stop);
              layout4.trigger({ type: "layoutstop", layout: layout4 });
            };
            var onReady = function onReady2() {
              layout4.one("layoutready", options2.ready);
              layout4.trigger({ type: "layoutready", layout: layout4 });
            };
            var ticksPerFrame = options2.refresh;
            if (options2.refresh < 0) {
              ticksPerFrame = 1;
            } else {
              ticksPerFrame = Math.max(1, ticksPerFrame);
            }
            var adaptor2 = layout4.adaptor = cola2.adaptor({
              trigger: function trigger(e2) {
                var TICK = cola2.EventType ? cola2.EventType.tick : null;
                var END = cola2.EventType ? cola2.EventType.end : null;
                switch (e2.type) {
                  case "tick":
                  case TICK:
                    if (options2.animate) {
                      updateNodePositions();
                    }
                    break;
                  case "end":
                  case END:
                    updateNodePositions();
                    if (!options2.infinite) {
                      onDone();
                    }
                    break;
                }
              },
              kick: function kick() {
                var firstTick = true;
                var inftick = function inftick2() {
                  if (layout4.manuallyStopped) {
                    onDone();
                    return true;
                  }
                  var ret = adaptor2.tick();
                  if (!options2.infinite && !firstTick) {
                    adaptor2.convergenceThreshold(options2.convergenceThreshold);
                  }
                  firstTick = false;
                  if (ret && options2.infinite) {
                    adaptor2.resume();
                  }
                  return ret;
                };
                var multitick = function multitick2() {
                  var ret = void 0;
                  for (var i2 = 0; i2 < ticksPerFrame && !ret; i2++) {
                    ret = ret || inftick();
                  }
                  return ret;
                };
                if (options2.animate) {
                  var frame = function frame2() {
                    if (multitick()) {
                      return;
                    }
                    raf2(frame2);
                  };
                  raf2(frame);
                } else {
                  while (!inftick()) {
                  }
                }
              },
              on: nop,
              // dummy; not needed
              drag: nop
              // not needed for our case
            });
            layout4.adaptor = adaptor2;
            var grabbableNodes = nodes3.filter(":grabbable");
            if (options2.ungrabifyWhileSimulating) {
              grabbableNodes.ungrabify();
            }
            var destroyHandler = void 0;
            cy2.one("destroy", destroyHandler = function destroyHandler2() {
              layout4.stop();
            });
            var grabHandler = void 0;
            nodes3.on("grab free position", grabHandler = function grabHandler2(e2) {
              var node = this;
              var scrCola = node.scratch().cola;
              var pos = node.position();
              var nodeIsTarget = e2.cyTarget === node || e2.target === node;
              if (!nodeIsTarget) {
                return;
              }
              switch (e2.type) {
                case "grab":
                  adaptor2.dragstart(scrCola);
                  break;
                case "free":
                  adaptor2.dragend(scrCola);
                  break;
                case "position":
                  if (scrCola.px !== pos.x - bb.x1 || scrCola.py !== pos.y - bb.y1) {
                    scrCola.px = pos.x - bb.x1;
                    scrCola.py = pos.y - bb.y1;
                  }
                  break;
              }
            });
            var lockHandler = void 0;
            nodes3.on("lock unlock", lockHandler = function lockHandler2() {
              var node = this;
              var scrCola = node.scratch().cola;
              scrCola.fixed = node.locked();
              if (node.locked()) {
                adaptor2.dragstart(scrCola);
              } else {
                adaptor2.dragend(scrCola);
              }
            });
            adaptor2.nodes(nonparentNodes.map(function(node, i2) {
              var padding = getOptVal(options2.nodeSpacing, node);
              var pos = node.position();
              var dimensions2 = node.layoutDimensions(options2);
              var struct = node.scratch().cola = {
                x: options2.randomize && !node.locked() || pos.x === void 0 ? Math.round(Math.random() * bb.w) : pos.x,
                y: options2.randomize && !node.locked() || pos.y === void 0 ? Math.round(Math.random() * bb.h) : pos.y,
                width: dimensions2.w + 2 * padding,
                height: dimensions2.h + 2 * padding,
                index: i2,
                fixed: node.locked()
              };
              return struct;
            }));
            var constraints = [];
            if (options2.alignment) {
              if (options2.alignment.vertical) {
                var verticalAlignments = options2.alignment.vertical;
                verticalAlignments.forEach(function(alignment2) {
                  var offsetsX = [];
                  alignment2.forEach(function(nodeData) {
                    var node = nodeData.node;
                    var scrCola = node.scratch().cola;
                    var index = scrCola.index;
                    offsetsX.push({
                      node: index,
                      offset: nodeData.offset ? nodeData.offset : 0
                    });
                  });
                  constraints.push({
                    type: "alignment",
                    axis: "x",
                    offsets: offsetsX
                  });
                });
              }
              if (options2.alignment.horizontal) {
                var horizontalAlignments = options2.alignment.horizontal;
                horizontalAlignments.forEach(function(alignment2) {
                  var offsetsY = [];
                  alignment2.forEach(function(nodeData) {
                    var node = nodeData.node;
                    var scrCola = node.scratch().cola;
                    var index = scrCola.index;
                    offsetsY.push({
                      node: index,
                      offset: nodeData.offset ? nodeData.offset : 0
                    });
                  });
                  constraints.push({
                    type: "alignment",
                    axis: "y",
                    offsets: offsetsY
                  });
                });
              }
            }
            if (options2.gapInequalities) {
              options2.gapInequalities.forEach(function(inequality) {
                var leftIndex = inequality.left.scratch().cola.index;
                var rightIndex = inequality.right.scratch().cola.index;
                constraints.push({
                  axis: inequality.axis,
                  left: leftIndex,
                  right: rightIndex,
                  gap: inequality.gap,
                  equality: inequality.equality
                });
              });
            }
            if (constraints.length > 0) {
              adaptor2.constraints(constraints);
            }
            adaptor2.groups(parentNodes.map(function(node, i2) {
              var optPadding = getOptVal(options2.nodeSpacing, node);
              var getPadding = function getPadding2(d2) {
                return parseFloat(node.style("padding-" + d2));
              };
              var pleft = getPadding("left") + optPadding;
              var pright = getPadding("right") + optPadding;
              var ptop = getPadding("top") + optPadding;
              var pbottom = getPadding("bottom") + optPadding;
              node.scratch().cola = {
                index: i2,
                padding: Math.max(pleft, pright, ptop, pbottom),
                // leaves should only contain direct descendants (children),
                // not the leaves of nested compound nodes or any nodes that are compounds themselves
                leaves: node.children().intersection(nonparentNodes).map(function(child) {
                  return child[0].scratch().cola.index;
                }),
                fixed: node.locked()
              };
              return node;
            }).map(function(node) {
              node.scratch().cola.groups = node.children().intersection(parentNodes).map(function(child) {
                return child.scratch().cola.index;
              });
              return node.scratch().cola;
            }));
            var length = void 0;
            var lengthFnName = void 0;
            if (options2.edgeLength != null) {
              length = options2.edgeLength;
              lengthFnName = "linkDistance";
            } else if (options2.edgeSymDiffLength != null) {
              length = options2.edgeSymDiffLength;
              lengthFnName = "symmetricDiffLinkLengths";
            } else if (options2.edgeJaccardLength != null) {
              length = options2.edgeJaccardLength;
              lengthFnName = "jaccardLinkLengths";
            } else {
              length = 100;
              lengthFnName = "linkDistance";
            }
            var lengthGetter = function lengthGetter2(link) {
              return link.calcLength;
            };
            adaptor2.links(edges3.stdFilter(function(edge) {
              return nonparentNodes.contains(edge.source()) && nonparentNodes.contains(edge.target());
            }).map(function(edge) {
              var c2 = edge.scratch().cola = {
                source: edge.source()[0].scratch().cola.index,
                target: edge.target()[0].scratch().cola.index
              };
              if (length != null) {
                c2.calcLength = getOptVal(length, edge);
              }
              return c2;
            }));
            adaptor2.size([bb.w, bb.h]);
            if (length != null) {
              adaptor2[lengthFnName](lengthGetter);
            }
            if (options2.flow) {
              var flow = void 0;
              var defAxis = "y";
              var defMinSep = 50;
              if (isString(options2.flow)) {
                flow = {
                  axis: options2.flow,
                  minSeparation: defMinSep
                };
              } else if (isNumber(options2.flow)) {
                flow = {
                  axis: defAxis,
                  minSeparation: options2.flow
                };
              } else if (isObject2(options2.flow)) {
                flow = options2.flow;
                flow.axis = flow.axis || defAxis;
                flow.minSeparation = flow.minSeparation != null ? flow.minSeparation : defMinSep;
              } else {
                flow = {
                  axis: defAxis,
                  minSeparation: defMinSep
                };
              }
              adaptor2.flowLayout(flow.axis, flow.minSeparation);
            }
            layout4.trigger({ type: "layoutstart", layout: layout4 });
            adaptor2.avoidOverlaps(options2.avoidOverlap).handleDisconnected(options2.handleDisconnected).start(
              options2.unconstrIter,
              options2.userConstIter,
              options2.allConstIter,
              void 0,
              // gridSnapIterations = 0
              void 0,
              // keepRunning = true
              options2.centerGraph
            );
            if (!options2.infinite) {
              setTimeout(function() {
                if (!layout4.manuallyStopped) {
                  adaptor2.stop();
                }
              }, options2.maxSimulationTime);
            }
            return this;
          };
          ColaLayout.prototype.stop = function() {
            if (this.adaptor) {
              this.manuallyStopped = true;
              this.adaptor.stop();
            }
            return this;
          };
          module2.exports = ColaLayout;
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.filter(function(src2) {
              return src2 != null;
            }).forEach(function(src2) {
              Object.keys(src2).forEach(function(k2) {
                return tgt[k2] = src2[k2];
              });
            });
            return tgt;
          };
        },
        /* 2 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var defaults3 = {
            animate: true,
            // whether to show the layout as it's running
            refresh: 1,
            // number of ticks per frame; higher is faster but more jerky
            maxSimulationTime: 4e3,
            // max length in ms to run the layout
            ungrabifyWhileSimulating: false,
            // so you can't drag nodes during layout
            fit: true,
            // on every layout reposition of nodes, fit the viewport
            padding: 30,
            // padding around the simulation
            boundingBox: void 0,
            // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
            nodeDimensionsIncludeLabels: false,
            // whether labels should be included in determining the space used by a node
            // layout event callbacks
            ready: function ready4() {
            },
            // on layoutready
            stop: function stop5() {
            },
            // on layoutstop
            // positioning options
            randomize: false,
            // use random node positions at beginning of layout
            avoidOverlap: true,
            // if true, prevents overlap of node bounding boxes
            handleDisconnected: true,
            // if true, avoids disconnected components from overlapping
            convergenceThreshold: 0.01,
            // when the alpha value (system energy) falls below this value, the layout stops
            nodeSpacing: function nodeSpacing(node) {
              return 10;
            },
            // extra spacing around nodes
            flow: void 0,
            // use DAG/tree flow layout if specified, e.g. { axis: 'y', minSeparation: 30 }
            alignment: void 0,
            // relative alignment constraints on nodes, e.g. function( node ){ return { x: 0, y: 1 } }
            gapInequalities: void 0,
            // list of inequality constraints for the gap between the nodes, e.g. [{"axis":"y", "left":node1, "right":node2, "gap":25}]
            centerGraph: true,
            // adjusts the node positions initially to center the graph (pass false if you want to start the layout from the current position)
            // different methods of specifying edge length
            // each can be a constant numerical value or a function like `function( edge ){ return 2; }`
            edgeLength: void 0,
            // sets edge length directly in simulation
            edgeSymDiffLength: void 0,
            // symmetric diff edge length in simulation
            edgeJaccardLength: void 0,
            // jaccard edge length in simulation
            // iterations of cola algorithm; uses default values on undefined
            unconstrIter: void 0,
            // unconstrained initial layout iterations
            userConstIter: void 0,
            // initial layout iterations with user-specified constraints
            allConstIter: void 0,
            // initial layout iterations with all constraints including non-overlap
            // infinite layout options
            infinite: false
            // overrides all other options for a forces-all-the-time mode
          };
          module2.exports = defaults3;
        },
        /* 3 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var impl2 = __webpack_require__(0);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "cola", impl2);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        /* 4 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var raf2 = void 0;
          if ((typeof window === "undefined" ? "undefined" : _typeof2(window)) !== "undefined") {
            raf2 = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(fn3) {
              return setTimeout(fn3, 16);
            };
          } else {
            raf2 = function raf3(cb) {
              cb();
            };
          }
          module2.exports = raf2;
        },
        /* 5 */
        /***/
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_5__;
        }
        /******/
      ])
    );
  });
})(cytoscapeCola);
var cytoscapeColaExports = cytoscapeCola.exports;
const cola = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeColaExports);
let counter = 0;
let undo = false;
function serverAvail$3() {
  return typeof Shiny === "object" && Shiny !== null;
}
function objectOfArraysToArrayOfObjects(obj) {
  const keys = Object.keys(obj);
  const length = obj[keys[0]].length;
  const result = [];
  for (let i2 = 0; i2 < length; i2++) {
    const newObj = {};
    for (const key of keys) {
      newObj[key] = obj[key][i2];
    }
    result.push(newObj);
  }
  return result;
}
function applySemLayout(name2, undoArg = true) {
  undo = undoArg;
  counter = counter + 1;
  let for_R = createSyntax(true);
  for_R.name = name2;
  for_R.counter = counter;
  if (serverAvail$3()) {
    Shiny.setInputValue("layout-layout", JSON.stringify(for_R));
  }
}
if (serverAvail$3()) {
  Shiny.addCustomMessageHandler("semPlotLayout", function(layout_R) {
    layout_R = objectOfArraysToArrayOfObjects(layout_R);
    const differenceX = 125;
    const differenceY = 200;
    let minDiffX = Infinity;
    let minDiffY = Infinity;
    for (let i2 = 0; i2 < layout_R.length; i2++) {
      for (let j2 = i2 + 1; j2 < layout_R.length; j2++) {
        const diffX = Math.abs(layout_R[i2].x - layout_R[j2].x);
        const diffY = Math.abs(layout_R[i2].y - layout_R[j2].y);
        if (diffX < minDiffX && layout_R[i2].y === layout_R[j2].y)
          minDiffX = diffX;
        if (diffY < minDiffY && diffY !== 0)
          minDiffY = diffY;
      }
    }
    const xScale = differenceX / minDiffX;
    const yScale = differenceY / minDiffY;
    let preCalculatedPositions = {};
    layout_R.forEach((nodeInfo) => {
      const x2 = nodeInfo.x * xScale + 400;
      const y2 = nodeInfo.y * -1 * yScale + 400;
      preCalculatedPositions[nodeInfo.name] = { x: x2, y: y2 };
    });
    let options2 = {
      name: "preset",
      positions: function(node) {
        const nodeName = node.data("label");
        return preCalculatedPositions[nodeName];
      },
      fit: true,
      padding: 60,
      animate: true
    };
    if (undo) {
      const lur = get_store_value(ur);
      lur.do("layout", { options: options2 });
    } else {
      const cy2 = get_store_value(cyStore);
      cy2.layout(options2).run();
    }
  });
}
function create_fragment$e(ctx) {
  let dropdownlinks;
  let current;
  dropdownlinks = new DropDownLinks({
    props: {
      name: "Apply Layout",
      menuItems: (
        /*menuItems*/
        ctx[1]
      ),
      minimal: (
        /*minimal*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      create_component(dropdownlinks.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdownlinks, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdownlinks_changes = {};
      if (dirty & /*menuItems*/
      2)
        dropdownlinks_changes.menuItems = /*menuItems*/
        ctx2[1];
      if (dirty & /*minimal*/
      1)
        dropdownlinks_changes.minimal = /*minimal*/
        ctx2[0];
      dropdownlinks.$set(dropdownlinks_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdownlinks.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdownlinks.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdownlinks, detaching);
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  let menuItems;
  let $appState;
  let $ur;
  component_subscribe($$self, appState, ($$value) => $$invalidate(2, $appState = $$value));
  component_subscribe($$self, ur, ($$value) => $$invalidate(3, $ur = $$value));
  let { minimal = false } = $$props;
  get_store_value(cyStore);
  onMount(() => {
    cytoscape$2.use(dagre);
    cytoscape$2.use(fcose);
    cytoscape$2.use(cola);
  });
  function applyDagre() {
    const options2 = {
      name: "dagre",
      rankSep: 150,
      animate: true
    };
    $ur.do("layout", { options: options2 });
  }
  function applyBF() {
    const options2 = {
      name: "breadthfirst",
      animate: true,
      spacingFactor: 1
    };
    $ur.do("layout", { options: options2 });
  }
  function applyCircle() {
    const options2 = { name: "circle", animate: true };
    $ur.do("layout", { options: options2 });
  }
  function applyfcose() {
    const options2 = {
      name: "fcose",
      animate: true,
      idealEdgeLength: (edge) => 150,
      quality: "proof",
      randomize: false,
      nodeSeparation: 200
    };
    $ur.do("layout", { options: options2 });
  }
  function applycola() {
    const options2 = {
      name: "cola",
      animate: true,
      nodeSpacing(node) {
        return 50;
      }
    };
    $ur.do("layout", { options: options2 });
  }
  $$self.$$set = ($$props2) => {
    if ("minimal" in $$props2)
      $$invalidate(0, minimal = $$props2.minimal);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$appState*/
    4) {
      $$invalidate(1, menuItems = [
        {
          name: "Recommended: Tree",
          action: () => applySemLayout("tree"),
          disable: $appState.modelEmpty
        },
        {
          name: "Recommended: Tree2",
          action: () => applySemLayout("tree2"),
          disable: $appState.modelEmpty
        },
        {
          name: "Experimental: Tree",
          action: applyDagre,
          disable: $appState.modelEmpty
        },
        {
          name: "Experimental: Tree2",
          action: applyBF,
          disable: $appState.modelEmpty
        },
        {
          name: "Experimental: Circle",
          action: applyCircle,
          disable: $appState.modelEmpty
        },
        {
          name: "Experimental: Force-directed",
          action: applyfcose,
          disable: $appState.modelEmpty
        },
        {
          name: "Experimental: Cola",
          action: applycola,
          disable: $appState.modelEmpty
        }
      ]);
    }
  };
  return [minimal, menuItems, $appState];
}
class Layouts extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$r, create_fragment$e, safe_not_equal, { minimal: 0 });
  }
}
function get_each_context(ctx, list2, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list2[i2];
  child_ctx[5] = list2;
  child_ctx[6] = i2;
  return child_ctx;
}
function create_each_block(ctx) {
  let checkitem;
  let updating_name;
  let updating_checked;
  let current;
  function checkitem_name_binding(value) {
    ctx[2](
      value,
      /*item*/
      ctx[4]
    );
  }
  function checkitem_checked_binding(value) {
    ctx[3](
      value,
      /*item*/
      ctx[4]
    );
  }
  let checkitem_props = {};
  if (
    /*item*/
    ctx[4].name !== void 0
  ) {
    checkitem_props.name = /*item*/
    ctx[4].name;
  }
  if (
    /*$modelOptions*/
    ctx[1][
      /*item*/
      ctx[4].modelProperty
    ] !== void 0
  ) {
    checkitem_props.checked = /*$modelOptions*/
    ctx[1][
      /*item*/
      ctx[4].modelProperty
    ];
  }
  checkitem = new CheckItem({ props: checkitem_props });
  binding_callbacks.push(() => bind(checkitem, "name", checkitem_name_binding));
  binding_callbacks.push(() => bind(checkitem, "checked", checkitem_checked_binding));
  return {
    c() {
      create_component(checkitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(checkitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const checkitem_changes = {};
      if (!updating_name && dirty & /*menuItems*/
      1) {
        updating_name = true;
        checkitem_changes.name = /*item*/
        ctx[4].name;
        add_flush_callback(() => updating_name = false);
      }
      if (!updating_checked && dirty & /*$modelOptions, menuItems*/
      3) {
        updating_checked = true;
        checkitem_changes.checked = /*$modelOptions*/
        ctx[1][
          /*item*/
          ctx[4].modelProperty
        ];
        add_flush_callback(() => updating_checked = false);
      }
      checkitem.$set(checkitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkitem, detaching);
    }
  };
}
function create_default_slot$4(ctx) {
  let each_1_anchor;
  let current;
  let each_value = (
    /*menuItems*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*menuItems, $modelOptions*/
      3) {
        each_value = /*menuItems*/
        ctx2[0];
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_fragment$d(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      name,
      $$slots: { default: [create_default_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*$$scope, menuItems, $modelOptions*/
      131) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
const name = "Automatically..";
function instance$q($$self, $$props, $$invalidate) {
  let $modelOptions;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(1, $modelOptions = $$value));
  const menuItems = [
    {
      name: "Fix Factor Loading of First Indicator at 1",
      modelProperty: "fix_first"
    },
    {
      name: "Include Variances",
      modelProperty: "auto_var"
    },
    {
      name: "Include Covariances of Exogenous Latent Variables",
      modelProperty: "auto_cov_lv_x"
    },
    {
      name: "Include Covariances of Dependent Variables",
      modelProperty: "auto_cov_y"
    },
    {
      name: "Fix Variance of Only Indicator to 0",
      modelProperty: "fix_single"
    },
    {
      name: "Treat Exogenous Observed Variables as Fixed Variables",
      modelProperty: "fixed_x"
    }
  ];
  function checkitem_name_binding(value, item) {
    if ($$self.$$.not_equal(item.name, value)) {
      item.name = value;
      $$invalidate(0, menuItems);
    }
  }
  function checkitem_checked_binding(value, item) {
    if ($$self.$$.not_equal($modelOptions[item.modelProperty], value)) {
      $modelOptions[item.modelProperty] = value;
      modelOptions.set($modelOptions);
    }
  }
  return [menuItems, $modelOptions, checkitem_name_binding, checkitem_checked_binding];
}
class AddMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$q, create_fragment$d, safe_not_equal, {});
  }
}
function create_fragment$c(ctx) {
  let dropdownlinks;
  let current;
  dropdownlinks = new DropDownLinks({
    props: {
      name: "Help",
      menuItems: (
        /*menuItems*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      create_component(dropdownlinks.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdownlinks, target, anchor);
      current = true;
    },
    p: noop$2,
    i(local) {
      if (current)
        return;
      transition_in(dropdownlinks.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdownlinks.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdownlinks, detaching);
    }
  };
}
function showCommands() {
  Shiny.setInputValue("show_help", Math.random());
}
function openManual() {
  window.open("https://karchjd.github.io/docs.lavaangui/", "_blank");
}
function instance$p($$self) {
  let version2;
  const menuItems = [
    {
      name: "Show Commands",
      action: showCommands
    },
    { name: "Open Manual", action: openManual },
    { name: "About", action: openAbout }
  ];
  function openAbout() {
    bootbox.alert({
      title: "About Lavaangui",
      message: `Version: ${version2}<br> Autor: Julian D. Karch<br> Email: j.d.karch@fsw.leidenuniv.nl`
    });
  }
  Shiny.addCustomMessageHandler("version", function(lavguiVersion) {
    version2 = lavguiVersion[0].join(".");
  });
  return [menuItems];
}
class ShowHelp extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$p, create_fragment$c, safe_not_equal, {});
  }
}
function create_default_slot$3(ctx) {
  let checkitem0;
  let updating_checked;
  let t0;
  let checkitem1;
  let updating_checked_1;
  let t1;
  let checkitem2;
  let updating_checked_2;
  let t22;
  let checkitem3;
  let updating_checked_3;
  let t3;
  let checkitem4;
  let updating_checked_4;
  let t4;
  let textitem0;
  let updating_value;
  let t5;
  let textitem1;
  let updating_value_1;
  let current;
  function checkitem0_checked_binding(value) {
    ctx[2](value);
  }
  let checkitem0_props = { name: "Show Grid" };
  if (
    /*$gridViewOptions*/
    ctx[1].gridShow !== void 0
  ) {
    checkitem0_props.checked = /*$gridViewOptions*/
    ctx[1].gridShow;
  }
  checkitem0 = new CheckItem({ props: checkitem0_props });
  binding_callbacks.push(() => bind(checkitem0, "checked", checkitem0_checked_binding));
  function checkitem1_checked_binding(value) {
    ctx[3](value);
  }
  let checkitem1_props = { name: "Snap to Grid" };
  if (
    /*$gridViewOptions*/
    ctx[1].gridSnap !== void 0
  ) {
    checkitem1_props.checked = /*$gridViewOptions*/
    ctx[1].gridSnap;
  }
  checkitem1 = new CheckItem({ props: checkitem1_props });
  binding_callbacks.push(() => bind(checkitem1, "checked", checkitem1_checked_binding));
  function checkitem2_checked_binding(value) {
    ctx[4](value);
  }
  let checkitem2_props = { name: "Resize to Grid" };
  if (
    /*$gridViewOptions*/
    ctx[1].gridResize !== void 0
  ) {
    checkitem2_props.checked = /*$gridViewOptions*/
    ctx[1].gridResize;
  }
  checkitem2 = new CheckItem({ props: checkitem2_props });
  binding_callbacks.push(() => bind(checkitem2, "checked", checkitem2_checked_binding));
  function checkitem3_checked_binding(value) {
    ctx[5](value);
  }
  let checkitem3_props = { name: "Snap to Alignment on Release" };
  if (
    /*$gridViewOptions*/
    ctx[1].gridAlign !== void 0
  ) {
    checkitem3_props.checked = /*$gridViewOptions*/
    ctx[1].gridAlign;
  }
  checkitem3 = new CheckItem({ props: checkitem3_props });
  binding_callbacks.push(() => bind(checkitem3, "checked", checkitem3_checked_binding));
  function checkitem4_checked_binding(value) {
    ctx[6](value);
  }
  let checkitem4_props = { name: "Move Grid on Pan" };
  if (
    /*$gridViewOptions*/
    ctx[1].gridMovePan !== void 0
  ) {
    checkitem4_props.checked = /*$gridViewOptions*/
    ctx[1].gridMovePan;
  }
  checkitem4 = new CheckItem({ props: checkitem4_props });
  binding_callbacks.push(() => bind(checkitem4, "checked", checkitem4_checked_binding));
  function textitem0_value_binding(value) {
    ctx[7](value);
  }
  let textitem0_props = { name: "Grid Spacing:", min: 5 };
  if (
    /*$gridViewOptions*/
    ctx[1].gridSpace !== void 0
  ) {
    textitem0_props.value = /*$gridViewOptions*/
    ctx[1].gridSpace;
  }
  textitem0 = new TextItem({ props: textitem0_props });
  binding_callbacks.push(() => bind(textitem0, "value", textitem0_value_binding));
  function textitem1_value_binding(value) {
    ctx[8](value);
  }
  let textitem1_props = { name: "Line Width:", min: 0 };
  if (
    /*$gridViewOptions*/
    ctx[1].gridWidth !== void 0
  ) {
    textitem1_props.value = /*$gridViewOptions*/
    ctx[1].gridWidth;
  }
  textitem1 = new TextItem({ props: textitem1_props });
  binding_callbacks.push(() => bind(textitem1, "value", textitem1_value_binding));
  return {
    c() {
      create_component(checkitem0.$$.fragment);
      t0 = space();
      create_component(checkitem1.$$.fragment);
      t1 = space();
      create_component(checkitem2.$$.fragment);
      t22 = space();
      create_component(checkitem3.$$.fragment);
      t3 = space();
      create_component(checkitem4.$$.fragment);
      t4 = space();
      create_component(textitem0.$$.fragment);
      t5 = space();
      create_component(textitem1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(checkitem0, target, anchor);
      insert(target, t0, anchor);
      mount_component(checkitem1, target, anchor);
      insert(target, t1, anchor);
      mount_component(checkitem2, target, anchor);
      insert(target, t22, anchor);
      mount_component(checkitem3, target, anchor);
      insert(target, t3, anchor);
      mount_component(checkitem4, target, anchor);
      insert(target, t4, anchor);
      mount_component(textitem0, target, anchor);
      insert(target, t5, anchor);
      mount_component(textitem1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const checkitem0_changes = {};
      if (!updating_checked && dirty & /*$gridViewOptions*/
      2) {
        updating_checked = true;
        checkitem0_changes.checked = /*$gridViewOptions*/
        ctx2[1].gridShow;
        add_flush_callback(() => updating_checked = false);
      }
      checkitem0.$set(checkitem0_changes);
      const checkitem1_changes = {};
      if (!updating_checked_1 && dirty & /*$gridViewOptions*/
      2) {
        updating_checked_1 = true;
        checkitem1_changes.checked = /*$gridViewOptions*/
        ctx2[1].gridSnap;
        add_flush_callback(() => updating_checked_1 = false);
      }
      checkitem1.$set(checkitem1_changes);
      const checkitem2_changes = {};
      if (!updating_checked_2 && dirty & /*$gridViewOptions*/
      2) {
        updating_checked_2 = true;
        checkitem2_changes.checked = /*$gridViewOptions*/
        ctx2[1].gridResize;
        add_flush_callback(() => updating_checked_2 = false);
      }
      checkitem2.$set(checkitem2_changes);
      const checkitem3_changes = {};
      if (!updating_checked_3 && dirty & /*$gridViewOptions*/
      2) {
        updating_checked_3 = true;
        checkitem3_changes.checked = /*$gridViewOptions*/
        ctx2[1].gridAlign;
        add_flush_callback(() => updating_checked_3 = false);
      }
      checkitem3.$set(checkitem3_changes);
      const checkitem4_changes = {};
      if (!updating_checked_4 && dirty & /*$gridViewOptions*/
      2) {
        updating_checked_4 = true;
        checkitem4_changes.checked = /*$gridViewOptions*/
        ctx2[1].gridMovePan;
        add_flush_callback(() => updating_checked_4 = false);
      }
      checkitem4.$set(checkitem4_changes);
      const textitem0_changes = {};
      if (!updating_value && dirty & /*$gridViewOptions*/
      2) {
        updating_value = true;
        textitem0_changes.value = /*$gridViewOptions*/
        ctx2[1].gridSpace;
        add_flush_callback(() => updating_value = false);
      }
      textitem0.$set(textitem0_changes);
      const textitem1_changes = {};
      if (!updating_value_1 && dirty & /*$gridViewOptions*/
      2) {
        updating_value_1 = true;
        textitem1_changes.value = /*$gridViewOptions*/
        ctx2[1].gridWidth;
        add_flush_callback(() => updating_value_1 = false);
      }
      textitem1.$set(textitem1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkitem0.$$.fragment, local);
      transition_in(checkitem1.$$.fragment, local);
      transition_in(checkitem2.$$.fragment, local);
      transition_in(checkitem3.$$.fragment, local);
      transition_in(checkitem4.$$.fragment, local);
      transition_in(textitem0.$$.fragment, local);
      transition_in(textitem1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkitem0.$$.fragment, local);
      transition_out(checkitem1.$$.fragment, local);
      transition_out(checkitem2.$$.fragment, local);
      transition_out(checkitem3.$$.fragment, local);
      transition_out(checkitem4.$$.fragment, local);
      transition_out(textitem0.$$.fragment, local);
      transition_out(textitem1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkitem0, detaching);
      if (detaching)
        detach(t0);
      destroy_component(checkitem1, detaching);
      if (detaching)
        detach(t1);
      destroy_component(checkitem2, detaching);
      if (detaching)
        detach(t22);
      destroy_component(checkitem3, detaching);
      if (detaching)
        detach(t3);
      destroy_component(checkitem4, detaching);
      if (detaching)
        detach(t4);
      destroy_component(textitem0, detaching);
      if (detaching)
        detach(t5);
      destroy_component(textitem1, detaching);
    }
  };
}
function create_fragment$b(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown({
    props: {
      minimal: (
        /*minimal*/
        ctx[0]
      ),
      name: "Grid Options",
      $$slots: { default: [create_default_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dropdown_changes = {};
      if (dirty & /*minimal*/
      1)
        dropdown_changes.minimal = /*minimal*/
        ctx2[0];
      if (dirty & /*$$scope, $gridViewOptions*/
      514) {
        dropdown_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  let $gridViewOptions;
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(1, $gridViewOptions = $$value));
  let { minimal = false } = $$props;
  function checkitem0_checked_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridShow, value)) {
      $gridViewOptions.gridShow = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function checkitem1_checked_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridSnap, value)) {
      $gridViewOptions.gridSnap = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function checkitem2_checked_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridResize, value)) {
      $gridViewOptions.gridResize = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function checkitem3_checked_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridAlign, value)) {
      $gridViewOptions.gridAlign = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function checkitem4_checked_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridMovePan, value)) {
      $gridViewOptions.gridMovePan = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function textitem0_value_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridSpace, value)) {
      $gridViewOptions.gridSpace = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  function textitem1_value_binding(value) {
    if ($$self.$$.not_equal($gridViewOptions.gridWidth, value)) {
      $gridViewOptions.gridWidth = value;
      gridViewOptions.set($gridViewOptions);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("minimal" in $$props2)
      $$invalidate(0, minimal = $$props2.minimal);
  };
  return [
    minimal,
    $gridViewOptions,
    checkitem0_checked_binding,
    checkitem1_checked_binding,
    checkitem2_checked_binding,
    checkitem3_checked_binding,
    checkitem4_checked_binding,
    textitem0_value_binding,
    textitem1_value_binding
  ];
}
class GridOptions extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$o, create_fragment$b, safe_not_equal, { minimal: 0 });
  }
}
function instance$n($$self) {
  window.$(document).ready(function() {
    var isAnyDropdownOpen = false;
    window.$(".navbar .dropdown").hover(
      function() {
        if (isAnyDropdownOpen) {
          window.$(".navbar .dropdown").removeClass("open");
          window.$(this).addClass("open");
        }
      },
      function() {
      }
    );
    window.$(".navbar .dropdown").on("show.bs.dropdown", function() {
      isAnyDropdownOpen = true;
    });
    window.$(".navbar .dropdown").on("hide.bs.dropdown", function() {
      if (window.$(".navbar .dropdown.open").length <= 1) {
        isAnyDropdownOpen = false;
      }
    });
  });
  return [];
}
class DropDownOpenhover extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$n, null, safe_not_equal, {});
  }
}
function create_fragment$a(ctx) {
  let dropdownlinks;
  let current;
  dropdownlinks = new DropDownLinks({
    props: {
      name: "Edit",
      menuItems: (
        /*menuItems*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      create_component(dropdownlinks.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdownlinks, target, anchor);
      current = true;
    },
    p: noop$2,
    i(local) {
      if (current)
        return;
      transition_in(dropdownlinks.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdownlinks.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdownlinks, detaching);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let $ur;
  component_subscribe($$self, ur, ($$value) => $$invalidate(1, $ur = $$value));
  function undo2() {
    $ur.undo();
  }
  function redo() {
    $ur.redo();
  }
  let menuItems = [
    {
      name: "Undo",
      action: undo2,
      divider: false
    },
    {
      name: "Redo",
      action: redo,
      divider: false
    }
  ];
  return [menuItems];
}
class EditMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$m, create_fragment$a, safe_not_equal, {});
  }
}
function create_default_slot$2(ctx) {
  let filemenu;
  let t0;
  let editmenu;
  let t1;
  let viewmenu;
  let t22;
  let meanmenu;
  let t3;
  let addmenu;
  let t4;
  let estimationmenu;
  let t5;
  let layouts;
  let t6;
  let gridoptions;
  let t7;
  let showhelp;
  let t8;
  let dropdownopenhover;
  let current;
  filemenu = new FileMenu({});
  editmenu = new EditMenu({});
  viewmenu = new ViewMenu({});
  meanmenu = new MeanMenu({});
  addmenu = new AddMenu({});
  estimationmenu = new EstimationMenu({});
  layouts = new Layouts({});
  gridoptions = new GridOptions({});
  showhelp = new ShowHelp({});
  dropdownopenhover = new DropDownOpenhover({});
  return {
    c() {
      create_component(filemenu.$$.fragment);
      t0 = space();
      create_component(editmenu.$$.fragment);
      t1 = space();
      create_component(viewmenu.$$.fragment);
      t22 = space();
      create_component(meanmenu.$$.fragment);
      t3 = space();
      create_component(addmenu.$$.fragment);
      t4 = space();
      create_component(estimationmenu.$$.fragment);
      t5 = space();
      create_component(layouts.$$.fragment);
      t6 = space();
      create_component(gridoptions.$$.fragment);
      t7 = space();
      create_component(showhelp.$$.fragment);
      t8 = space();
      create_component(dropdownopenhover.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filemenu, target, anchor);
      insert(target, t0, anchor);
      mount_component(editmenu, target, anchor);
      insert(target, t1, anchor);
      mount_component(viewmenu, target, anchor);
      insert(target, t22, anchor);
      mount_component(meanmenu, target, anchor);
      insert(target, t3, anchor);
      mount_component(addmenu, target, anchor);
      insert(target, t4, anchor);
      mount_component(estimationmenu, target, anchor);
      insert(target, t5, anchor);
      mount_component(layouts, target, anchor);
      insert(target, t6, anchor);
      mount_component(gridoptions, target, anchor);
      insert(target, t7, anchor);
      mount_component(showhelp, target, anchor);
      insert(target, t8, anchor);
      mount_component(dropdownopenhover, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(filemenu.$$.fragment, local);
      transition_in(editmenu.$$.fragment, local);
      transition_in(viewmenu.$$.fragment, local);
      transition_in(meanmenu.$$.fragment, local);
      transition_in(addmenu.$$.fragment, local);
      transition_in(estimationmenu.$$.fragment, local);
      transition_in(layouts.$$.fragment, local);
      transition_in(gridoptions.$$.fragment, local);
      transition_in(showhelp.$$.fragment, local);
      transition_in(dropdownopenhover.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filemenu.$$.fragment, local);
      transition_out(editmenu.$$.fragment, local);
      transition_out(viewmenu.$$.fragment, local);
      transition_out(meanmenu.$$.fragment, local);
      transition_out(addmenu.$$.fragment, local);
      transition_out(estimationmenu.$$.fragment, local);
      transition_out(layouts.$$.fragment, local);
      transition_out(gridoptions.$$.fragment, local);
      transition_out(showhelp.$$.fragment, local);
      transition_out(dropdownopenhover.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filemenu, detaching);
      if (detaching)
        detach(t0);
      destroy_component(editmenu, detaching);
      if (detaching)
        detach(t1);
      destroy_component(viewmenu, detaching);
      if (detaching)
        detach(t22);
      destroy_component(meanmenu, detaching);
      if (detaching)
        detach(t3);
      destroy_component(addmenu, detaching);
      if (detaching)
        detach(t4);
      destroy_component(estimationmenu, detaching);
      if (detaching)
        detach(t5);
      destroy_component(layouts, detaching);
      if (detaching)
        detach(t6);
      destroy_component(gridoptions, detaching);
      if (detaching)
        detach(t7);
      destroy_component(showhelp, detaching);
      if (detaching)
        detach(t8);
      destroy_component(dropdownopenhover, detaching);
    }
  };
}
function create_fragment$9(ctx) {
  let navbar;
  let current;
  navbar = new Navbar({
    props: {
      $$slots: { default: [create_default_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(navbar.$$.fragment);
    },
    m(target, anchor) {
      mount_component(navbar, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const navbar_changes = {};
      if (dirty & /*$$scope*/
      1) {
        navbar_changes.$$scope = { dirty, ctx: ctx2 };
      }
      navbar.$set(navbar_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(navbar.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(navbar.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(navbar, detaching);
    }
  };
}
class MenuTop extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, null, create_fragment$9, safe_not_equal, {});
  }
}
const Results_svelte_svelte_type_style_lang = "";
function create_fragment$8(ctx) {
  let pre;
  return {
    c() {
      pre = element$1("pre");
      attr(pre, "id", "res-results");
      attr(pre, "class", "shiny-html-output well svelte-74yvxb");
      attr(pre, "data-testid", "result-text");
    },
    m(target, anchor) {
      insert(target, pre, anchor);
    },
    p: noop$2,
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(pre);
    }
  };
}
class Results extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, null, create_fragment$8, safe_not_equal, {});
  }
}
function instance$l($$self) {
  window.cy = get_store_value(cyStore);
  appState.subscribe((state) => {
    window.appState = state;
  });
  modelOptions.subscribe((state) => {
    window.modelOptions = state;
  });
  dataInfo.subscribe((state) => {
    window.dataInfo = state;
  });
  fitCache.subscribe((state) => {
    window.fitCache = state;
  });
  gridViewOptions.subscribe((state) => {
    window.gridViewOptions = state;
  });
  return [];
}
class Debug extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$l, null, safe_not_equal, {});
  }
}
var cytoscapeContextMenus$1 = { exports: {} };
(function(module, exports) {
  !function(e2, t3) {
    module.exports = t3();
  }(self, function() {
    return (() => {
      var e2 = { 621: (e3, t4, n3) => {
        function i2(e4, t5) {
          (null == t5 || t5 > e4.length) && (t5 = e4.length);
          for (var n4 = 0, i3 = new Array(t5); n4 < t5; n4++)
            i3[n4] = e4[n4];
          return i3;
        }
        function o2(e4) {
          for (var t5 = "", n4 = 0; n4 < e4.length; n4++)
            t5 += e4[n4], n4 !== e4.length - 1 && (t5 += " ");
          return t5;
        }
        function r2(e4, t5, n4) {
          n4 ? e4.setAttribute(t5, "") : e4.removeAttribute(t5);
        }
        function u2(e4, t5, n4) {
          void 0 === customElements.get(e4) && customElements.define(e4, t5, { extends: n4 });
        }
        n3.r(t4), n3.d(t4, { contextMenus: () => O2 });
        var s2 = "cy-context-menus-divider", a2 = { evtType: "cxttap", menuItems: [], menuItemClasses: ["cy-context-menus-cxt-menuitem"], contextMenuClasses: ["cy-context-menus-cxt-menu"], submenuIndicator: { src: "assets/submenu-indicator-default.svg", width: 12, height: 12 } };
        function c2(e4) {
          return (c2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
            return typeof e5;
          } : function(e5) {
            return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
          })(e4);
        }
        function l2(e4, t5) {
          var n4;
          if ("undefined" == typeof Symbol || null == e4[Symbol.iterator]) {
            if (Array.isArray(e4) || (n4 = function(e5, t6) {
              if (e5) {
                if ("string" == typeof e5)
                  return f2(e5, t6);
                var n5 = Object.prototype.toString.call(e5).slice(8, -1);
                return "Object" === n5 && e5.constructor && (n5 = e5.constructor.name), "Map" === n5 || "Set" === n5 ? Array.from(e5) : "Arguments" === n5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5) ? f2(e5, t6) : void 0;
              }
            }(e4)) || t5 && e4 && "number" == typeof e4.length) {
              n4 && (e4 = n4);
              var i3 = 0, o3 = function() {
              };
              return { s: o3, n: function() {
                return i3 >= e4.length ? { done: true } : { done: false, value: e4[i3++] };
              }, e: function(e5) {
                throw e5;
              }, f: o3 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var r3, u3 = true, s3 = false;
          return { s: function() {
            n4 = e4[Symbol.iterator]();
          }, n: function() {
            var e5 = n4.next();
            return u3 = e5.done, e5;
          }, e: function(e5) {
            s3 = true, r3 = e5;
          }, f: function() {
            try {
              u3 || null == n4.return || n4.return();
            } finally {
              if (s3)
                throw r3;
            }
          } };
        }
        function f2(e4, t5) {
          (null == t5 || t5 > e4.length) && (t5 = e4.length);
          for (var n4 = 0, i3 = new Array(t5); n4 < t5; n4++)
            i3[n4] = e4[n4];
          return i3;
        }
        function d2(e4, t5) {
          if (!(e4 instanceof t5))
            throw new TypeError("Cannot call a class as a function");
        }
        function h2(e4, t5) {
          for (var n4 = 0; n4 < t5.length; n4++) {
            var i3 = t5[n4];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e4, i3.key, i3);
          }
        }
        function m2(e4, t5, n4) {
          return t5 && h2(e4.prototype, t5), n4 && h2(e4, n4), e4;
        }
        function v2(e4, t5) {
          if ("function" != typeof t5 && null !== t5)
            throw new TypeError("Super expression must either be null or a function");
          e4.prototype = Object.create(t5 && t5.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t5 && C2(e4, t5);
        }
        function y2(e4) {
          var t5 = M2();
          return function() {
            var n4, i3 = I2(e4);
            if (t5) {
              var o3 = I2(this).constructor;
              n4 = Reflect.construct(i3, arguments, o3);
            } else
              n4 = i3.apply(this, arguments);
            return p2(this, n4);
          };
        }
        function p2(e4, t5) {
          return !t5 || "object" !== c2(t5) && "function" != typeof t5 ? b2(e4) : t5;
        }
        function b2(e4) {
          if (void 0 === e4)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e4;
        }
        function g2(e4, t5, n4) {
          return (g2 = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(e5, t6, n5) {
            var i3 = function(e6, t7) {
              for (; !Object.prototype.hasOwnProperty.call(e6, t7) && null !== (e6 = I2(e6)); )
                ;
              return e6;
            }(e5, t6);
            if (i3) {
              var o3 = Object.getOwnPropertyDescriptor(i3, t6);
              return o3.get ? o3.get.call(n5) : o3.value;
            }
          })(e4, t5, n4 || e4);
        }
        function w2(e4) {
          var t5 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return (w2 = function(e5) {
            if (null === e5 || (n4 = e5, -1 === Function.toString.call(n4).indexOf("[native code]")))
              return e5;
            var n4;
            if ("function" != typeof e5)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== t5) {
              if (t5.has(e5))
                return t5.get(e5);
              t5.set(e5, i3);
            }
            function i3() {
              return x2(e5, arguments, I2(this).constructor);
            }
            return i3.prototype = Object.create(e5.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), C2(i3, e5);
          })(e4);
        }
        function x2(e4, t5, n4) {
          return (x2 = M2() ? Reflect.construct : function(e5, t6, n5) {
            var i3 = [null];
            i3.push.apply(i3, t6);
            var o3 = new (Function.bind.apply(e5, i3))();
            return n5 && C2(o3, n5.prototype), o3;
          }).apply(null, arguments);
        }
        function M2() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (e4) {
            return false;
          }
        }
        function C2(e4, t5) {
          return (C2 = Object.setPrototypeOf || function(e5, t6) {
            return e5.__proto__ = t6, e5;
          })(e4, t5);
        }
        function I2(e4) {
          return (I2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e5) {
            return e5.__proto__ || Object.getPrototypeOf(e5);
          })(e4);
        }
        function k2(e4) {
          e4.preventDefault(), e4.stopPropagation();
        }
        var E2 = function(e4) {
          v2(n4, e4);
          var t5 = y2(n4);
          function n4(e5, i3, o3) {
            var u3, s3, a3, c3, l3, f3, h3, m3, v3, y3;
            d2(this, n4), g2((s3 = b2(y3 = t5.call(this)), I2(n4.prototype)), "setAttribute", s3).call(s3, "id", e5.id);
            var p3 = y3._getMenuItemClassStr(o3.cxtMenuItemClasses, e5.hasTrailingDivider);
            if (g2((a3 = b2(y3), I2(n4.prototype)), "setAttribute", a3).call(a3, "class", p3), g2((c3 = b2(y3), I2(n4.prototype)), "setAttribute", c3).call(c3, "title", null !== (u3 = e5.tooltipText) && void 0 !== u3 ? u3 : ""), e5.disabled && r2(b2(y3), "disabled", true), e5.image) {
              var w3 = document.createElement("img");
              w3.src = e5.image.src, w3.width = e5.image.width, w3.height = e5.image.height, w3.style.position = "absolute", w3.style.top = e5.image.y + "px", w3.style.left = e5.image.x + "px", g2((l3 = b2(y3), I2(n4.prototype)), "appendChild", l3).call(l3, w3);
            }
            if (y3.innerHTML += e5.content, y3.onMenuItemClick = i3, y3.data = {}, y3.clickFns = [], y3.selector = e5.selector, y3.hasTrailingDivider = e5.hasTrailingDivider, y3.show = void 0 === e5.show || e5.show, y3.coreAsWell = e5.coreAsWell || false, y3.scratchpad = o3, void 0 === e5.onClickFunction && void 0 === e5.submenu)
              throw new Error("A menu item must either have click function or a submenu or both");
            return y3.onClickFunction = e5.onClickFunction, e5.submenu instanceof Array && y3._createSubmenu(e5.submenu), g2((f3 = b2(y3), I2(n4.prototype)), "addEventListener", f3).call(f3, "mousedown", k2), g2((h3 = b2(y3), I2(n4.prototype)), "addEventListener", h3).call(h3, "mouseup", k2), g2((m3 = b2(y3), I2(n4.prototype)), "addEventListener", m3).call(m3, "touchstart", k2), g2((v3 = b2(y3), I2(n4.prototype)), "addEventListener", v3).call(v3, "touchend", k2), y3;
          }
          return m2(n4, [{ key: "bindOnClickFunction", value: function(e5) {
            this.clickFns.push(e5), g2(I2(n4.prototype), "addEventListener", this).call(this, "click", e5);
          } }, { key: "unbindOnClickFunctions", value: function() {
            var e5, t6 = l2(this.clickFns);
            try {
              for (t6.s(); !(e5 = t6.n()).done; ) {
                var i3 = e5.value;
                g2(I2(n4.prototype), "removeEventListener", this).call(this, "click", i3);
              }
            } catch (e6) {
              t6.e(e6);
            } finally {
              t6.f();
            }
            this.clickFns = [];
          } }, { key: "enable", value: function() {
            r2(this, "disabled", false), this.hasSubmenu() && this.addEventListener("mouseenter", this.mouseEnterHandler);
          } }, { key: "disable", value: function() {
            r2(this, "disabled", true), this.hasSubmenu() && this.removeEventListener("mouseenter", this.mouseEnterHandler);
          } }, { key: "hide", value: function() {
            this.show = false, this.style.display = "none";
          } }, { key: "getHasTrailingDivider", value: function() {
            return !!this.hasTrailingDivider;
          } }, { key: "setHasTrailingDivider", value: function(e5) {
            this.hasTrailingDivider = e5;
          } }, { key: "hasSubmenu", value: function() {
            return this.submenu instanceof S2;
          } }, { key: "appendSubmenuItem", value: function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
            this.hasSubmenu() || this._createSubmenu(), this.submenu.appendMenuItem(e5, t6);
          } }, { key: "isClickable", value: function() {
            return void 0 !== this.onClickFunction;
          } }, { key: "display", value: function() {
            this.show = true, this.style.display = "block";
          } }, { key: "isVisible", value: function() {
            return true === this.show && "none" !== this.style.display;
          } }, { key: "removeSubmenu", value: function() {
            this.hasSubmenu() && (this.submenu.removeAllMenuItems(), this.detachSubmenu());
          } }, { key: "detachSubmenu", value: function() {
            this.hasSubmenu() && (this.removeChild(this.submenu), this.removeChild(this.indicator), this.removeEventListener("mouseenter", this.mouseEnterHandler), this.removeEventListener("mouseleave", this.mouseLeaveHandler), this.submenu = void 0, this.indicator = void 0);
          } }, { key: "_onMouseEnter", value: function(e5) {
            var t6 = this.getBoundingClientRect(), i3 = function(e6) {
              e6.style.opacity = "0", e6.style.display = "block";
              var t7 = e6.getBoundingClientRect();
              return e6.style.opacity = "1", e6.style.display = "none", t7;
            }(this.submenu), o3 = t6.right + i3.width > window.innerWidth, r3 = t6.top + i3.height > window.innerHeight;
            o3 || r3 ? o3 && !r3 ? (this.submenu.style.right = this.clientWidth + "px", this.submenu.style.top = "0px", this.submenu.style.left = "auto", this.submenu.style.bottom = "auto") : o3 && r3 ? (this.submenu.style.right = this.clientWidth + "px", this.submenu.style.bottom = "0px", this.submenu.style.top = "auto", this.submenu.style.left = "auto") : (this.submenu.style.left = this.clientWidth + "px", this.submenu.style.bottom = "0px", this.submenu.style.right = "auto", this.submenu.style.top = "auto") : (this.submenu.style.left = this.clientWidth + "px", this.submenu.style.top = "0px", this.submenu.style.right = "auto", this.submenu.style.bottom = "auto"), this.submenu.display();
            var u3 = Array.from(this.submenu.children).filter(function(e6) {
              if (e6 instanceof n4)
                return e6.isVisible();
            }), a3 = u3.length;
            u3.forEach(function(e6, t7) {
              e6 instanceof n4 && (t7 < a3 - 1 && e6.getHasTrailingDivider() ? e6.classList.add(s2) : e6.getHasTrailingDivider() && e6.classList.remove(s2));
            });
          } }, { key: "_onMouseLeave", value: function(e5) {
            var t6, n5, i3, o3, r3;
            t6 = { x: e5.clientX, y: e5.clientY }, n5 = this.submenu, o3 = t6.y, (i3 = t6.x) >= (r3 = n5.getBoundingClientRect()).left && i3 <= r3.right && o3 >= r3.top && o3 <= r3.bottom || this.submenu.hide();
          } }, { key: "_createSubmenu", value: function() {
            var e5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
            this.indicator = this.scratchpad.submenuIndicatorGen(), this.submenu = new S2(this.onMenuItemClick, this.scratchpad), this.appendChild(this.indicator), this.appendChild(this.submenu);
            var t6, i3 = l2(e5);
            try {
              for (i3.s(); !(t6 = i3.n()).done; ) {
                var o3 = t6.value, r3 = new n4(o3, this.onMenuItemClick, this.scratchpad);
                this.submenu.appendMenuItem(r3);
              }
            } catch (e6) {
              i3.e(e6);
            } finally {
              i3.f();
            }
            this.mouseEnterHandler = this._onMouseEnter.bind(this), this.mouseLeaveHandler = this._onMouseLeave.bind(this), this.addEventListener("mouseenter", this.mouseEnterHandler), this.addEventListener("mouseleave", this.mouseLeaveHandler);
          } }, { key: "_getMenuItemClassStr", value: function(e5, t6) {
            return t6 ? e5 + " " + s2 : e5;
          } }], [{ key: "define", value: function() {
            u2("ctx-menu-item", n4, "button");
          } }]), n4;
        }(w2(HTMLButtonElement)), S2 = function(e4) {
          v2(n4, e4);
          var t5 = y2(n4);
          function n4(e5, i3) {
            var o3, r3;
            return d2(this, n4), g2((o3 = b2(r3 = t5.call(this)), I2(n4.prototype)), "setAttribute", o3).call(o3, "class", i3.cxtMenuClasses), r3.style.position = "absolute", r3.onMenuItemClick = e5, r3.scratchpad = i3, r3;
          }
          return m2(n4, [{ key: "hide", value: function() {
            this.isVisible() && (this.hideSubmenus(), this.style.display = "none");
          } }, { key: "display", value: function() {
            this.style.display = "block";
          } }, { key: "isVisible", value: function() {
            return "none" !== this.style.display;
          } }, { key: "hideMenuItems", value: function() {
            var e5, t6 = l2(this.children);
            try {
              for (t6.s(); !(e5 = t6.n()).done; ) {
                var n5 = e5.value;
                n5 instanceof HTMLElement ? n5.style.display = "none" : console.warn("".concat(n5, " is not a HTMLElement"));
              }
            } catch (e6) {
              t6.e(e6);
            } finally {
              t6.f();
            }
          } }, { key: "hideSubmenus", value: function() {
            var e5, t6 = l2(this.children);
            try {
              for (t6.s(); !(e5 = t6.n()).done; ) {
                var n5 = e5.value;
                n5 instanceof E2 && n5.submenu && n5.submenu.hide();
              }
            } catch (e6) {
              t6.e(e6);
            } finally {
              t6.f();
            }
          } }, { key: "appendMenuItem", value: function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
            if (void 0 !== t6) {
              if (t6.parentNode !== this)
                throw new Error("The item with id='".concat(t6.id, "' is not a child of the context menu"));
              this.insertBefore(e5, t6);
            } else
              this.appendChild(e5);
            e5.isClickable() && this._performBindings(e5);
          } }, { key: "moveBefore", value: function(e5, t6) {
            if (e5.parentNode !== this)
              throw new Error("The item with id='".concat(e5.id, "' is not a child of context menu"));
            if (t6.parentNode !== this)
              throw new Error("The item with id='".concat(t6.id, "' is not a child of context menu"));
            this.removeChild(e5), this.insertBefore(e5, t6);
          } }, { key: "removeAllMenuItems", value: function() {
            for (; this.firstChild; ) {
              var e5 = this.lastChild;
              e5 instanceof E2 ? this._removeImmediateMenuItem(e5) : (console.warn("Found non menu item in the context menu: ", e5), this.removeChild(e5));
            }
          } }, { key: "_removeImmediateMenuItem", value: function(e5) {
            if (!this._detachImmediateMenuItem(e5))
              throw new Error("menu item(id=".concat(e5.id, ") is not in the context menu"));
            e5.detachSubmenu(), e5.unbindOnClickFunctions();
          } }, { key: "_detachImmediateMenuItem", value: function(e5) {
            if (e5.parentNode === this) {
              if (this.removeChild(e5), this.children.length <= 0) {
                var t6 = this.parentNode;
                t6 instanceof E2 && t6.detachSubmenu();
              }
              return true;
            }
            return false;
          } }, { key: "_performBindings", value: function(e5) {
            var t6 = this._bindOnClick(e5.onClickFunction);
            e5.bindOnClickFunction(t6), e5.bindOnClickFunction(this.onMenuItemClick);
          } }, { key: "_bindOnClick", value: function(e5) {
            var t6 = this;
            return function() {
              var n5 = t6.scratchpad.currentCyEvent;
              e5(n5);
            };
          } }], [{ key: "define", value: function() {
            u2("menu-item-list", n4, "div");
          } }]), n4;
        }(w2(HTMLDivElement)), T2 = function(e4) {
          v2(n4, e4);
          var t5 = y2(n4);
          function n4(e5, i3) {
            var o3;
            return d2(this, n4), (o3 = t5.call(this, e5, i3)).onMenuItemClick = function(t6) {
              k2(t6), o3.hide(), e5();
            }, o3;
          }
          return m2(n4, [{ key: "removeMenuItem", value: function(e5) {
            var t6 = e5.parentElement;
            t6 instanceof S2 && this.contains(t6) && t6._removeImmediateMenuItem(e5);
          } }, { key: "appendMenuItem", value: function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
            this.ensureDoesntContain(e5.id), g2(I2(n4.prototype), "appendMenuItem", this).call(this, e5, t6);
          } }, { key: "insertMenuItem", value: function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n5 = t6.before, i3 = t6.parent;
            if (this.ensureDoesntContain(e5.id), void 0 !== n5) {
              if (!this.contains(n5))
                throw new Error("before(id=".concat(n5.id, ") is not in the context menu"));
              var o3 = n5.parentNode;
              if (!(o3 instanceof S2))
                throw new Error("Parent of before(id=".concat(n5.id, ") is not a submenu"));
              o3.appendMenuItem(e5, n5);
            } else if (void 0 !== i3) {
              if (!this.contains(i3))
                throw new Error("parent(id=".concat(i3.id, ") is not a descendant of the context menu"));
              i3.appendSubmenuItem(e5);
            } else
              this.appendMenuItem(e5);
          } }, { key: "moveBefore", value: function(e5, t6) {
            var n5 = e5.parentElement;
            if (!this.contains(n5))
              throw new Error("parent(id=".concat(n5.id, ") is not in the contex menu"));
            if (!this.contains(t6))
              throw new Error("before(id=".concat(t6.id, ") is not in the context menu"));
            n5.removeChild(e5), this.insertMenuItem(e5, { before: t6 });
          } }, { key: "moveToSubmenu", value: function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n5 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, i3 = e5.parentElement;
            if (!(i3 instanceof S2))
              throw new Error("current parent(id=".concat(i3.id, ") is not a submenu"));
            if (!this.contains(i3))
              throw new Error("parent of the menu item(id=".concat(i3.id, ") is not in the context menu"));
            if (null !== t6) {
              if (!this.contains(t6))
                throw new Error("parent(id=".concat(t6.id, ") is not in the context menu"));
              i3._detachImmediateMenuItem(e5), t6.appendSubmenuItem(e5);
            } else
              null !== n5 && (e5.selector = n5.selector, e5.coreAsWell = n5.coreAsWell), i3._detachImmediateMenuItem(e5), this.appendMenuItem(e5);
          } }, { key: "ensureDoesntContain", value: function(e5) {
            var t6 = document.getElementById(e5);
            if (void 0 !== t6 && this.contains(t6))
              throw new Error("There is already an element with id=".concat(e5, " in the context menu"));
          } }], [{ key: "define", value: function() {
            u2("ctx-menu", n4, "div");
          } }]), n4;
        }(S2);
        function A2(e4, t5) {
          (null == t5 || t5 > e4.length) && (t5 = e4.length);
          for (var n4 = 0, i3 = new Array(t5); n4 < t5; n4++)
            i3[n4] = e4[n4];
          return i3;
        }
        function O2(e4) {
          var t5 = this;
          t5.scratch("cycontextmenus") || t5.scratch("cycontextmenus", {});
          var n4, r3, u3 = function(e5) {
            return t5.scratch("cycontextmenus")[e5];
          }, c3 = function(e5, n5) {
            return t5.scratch("cycontextmenus")[e5] = n5;
          }, l3 = u3("options"), f3 = u3("cxtMenu"), d4 = function(e5) {
            var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, n5 = m3(e5);
            if (void 0 !== t6) {
              var i3 = y3(t6);
              f3.insertMenuItem(n5, { parent: i3 });
            } else
              f3.insertMenuItem(n5);
          }, h3 = function(e5) {
            for (var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, n5 = 0; n5 < e5.length; n5++)
              d4(e5[n5], t6);
          }, m3 = function(e5) {
            var n5 = t5.scratch("cycontextmenus");
            return new E2(e5, f3.onMenuItemClick, n5);
          }, v3 = function() {
            u3("active") && (f3.removeAllMenuItems(), t5.off("tapstart", u3("eventCyTapStart")), t5.off(l3.evtType, u3("onCxttap")), t5.off("viewport", u3("onViewport")), document.removeEventListener("mouseup", u3("hideOnNonCyClick")), f3.parentNode.removeChild(f3), f3 = void 0, c3("cxtMenu", void 0), c3("active", false), c3("anyVisibleChild", false), c3("onCxttap", void 0), c3("onViewport", void 0), c3("hideOnNonCyClick", void 0));
          }, y3 = function(e5) {
            var t6 = document.getElementById(e5);
            if (t6 instanceof E2)
              return t6;
            throw new Error("The item with id=".concat(e5, " is not a menu item"));
          };
          if ("get" !== e4) {
            E2.define(), S2.define(), T2.define(), l3 = function(e5, t6) {
              var n5 = {};
              for (var i3 in e5)
                n5[i3] = e5[i3];
              for (var o3 in t6)
                n5[o3] instanceof Array ? n5[o3] = n5[o3].concat(t6[o3]) : n5[o3] = t6[o3];
              return n5;
            }(a2, e4), c3("options", l3), u3("active") && v3(), c3("active", true), c3("submenuIndicatorGen", (function(e5) {
              var t6 = document.createElement("img");
              return t6.src = e5.src, t6.width = e5.width, t6.height = e5.height, t6.classList.add("cy-context-menus-submenu-indicator"), t6;
            }).bind(void 0, l3.submenuIndicator));
            var p3 = o2(l3.contextMenuClasses);
            c3("cxtMenuClasses", p3);
            var b3 = t5.scratch("cycontextmenus");
            f3 = new T2(function() {
              return c3("cxtMenuPosition", void 0);
            }, b3), c3("cxtMenu", f3), t5.container().appendChild(f3), c3("cxtMenuItemClasses", o2(l3.menuItemClasses));
            var g3 = l3.menuItems;
            h3(g3), r3 = function(e5) {
              c3("currentCyEvent", e5), function(e6) {
                var n6, i4 = t5.container(), o4 = u3("cxtMenuPosition"), r5 = e6.position || e6.cyPosition;
                if (o4 != r5) {
                  f3.hideMenuItems(), c3("anyVisibleChild", false), c3("cxtMenuPosition", r5);
                  var s3 = { top: (n6 = i4.getBoundingClientRect()).top, left: n6.left }, a4 = e6.renderedPosition || e6.cyRenderedPosition, l5 = getComputedStyle(i4)["border-width"], d5 = parseInt(l5.replace("px", "")) || 0;
                  d5 > 0 && (s3.top += d5, s3.left += d5);
                  var h4 = i4.clientHeight, m4 = i4.clientWidth, v5 = h4 / 2, y4 = m4 / 2;
                  a4.y > v5 && a4.x <= y4 ? (f3.style.left = a4.x + "px", f3.style.bottom = h4 - a4.y + "px", f3.style.right = "auto", f3.style.top = "auto") : a4.y > v5 && a4.x > y4 ? (f3.style.right = m4 - a4.x + "px", f3.style.bottom = h4 - a4.y + "px", f3.style.left = "auto", f3.style.top = "auto") : a4.y <= v5 && a4.x <= y4 ? (f3.style.left = a4.x + "px", f3.style.top = a4.y + "px", f3.style.right = "auto", f3.style.bottom = "auto") : (f3.style.right = m4 - a4.x + "px", f3.style.top = a4.y + "px", f3.style.left = "auto", f3.style.bottom = "auto");
                }
              }(e5);
              var n5, i3 = e5.target || e5.cyTarget, o3 = function(e6, t6) {
                var n6;
                if ("undefined" == typeof Symbol || null == e6[Symbol.iterator]) {
                  if (Array.isArray(e6) || (n6 = function(e7, t7) {
                    if (e7) {
                      if ("string" == typeof e7)
                        return A2(e7, t7);
                      var n7 = Object.prototype.toString.call(e7).slice(8, -1);
                      return "Object" === n7 && e7.constructor && (n7 = e7.constructor.name), "Map" === n7 || "Set" === n7 ? Array.from(e7) : "Arguments" === n7 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n7) ? A2(e7, t7) : void 0;
                    }
                  }(e6)) || t6 && e6 && "number" == typeof e6.length) {
                    n6 && (e6 = n6);
                    var i4 = 0, o4 = function() {
                    };
                    return { s: o4, n: function() {
                      return i4 >= e6.length ? { done: true } : { done: false, value: e6[i4++] };
                    }, e: function(e7) {
                      throw e7;
                    }, f: o4 };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r5, u4 = true, s3 = false;
                return { s: function() {
                  n6 = e6[Symbol.iterator]();
                }, n: function() {
                  var e7 = n6.next();
                  return u4 = e7.done, e7;
                }, e: function(e7) {
                  s3 = true, r5 = e7;
                }, f: function() {
                  try {
                    u4 || null == n6.return || n6.return();
                  } finally {
                    if (s3)
                      throw r5;
                  }
                } };
              }(f3.children);
              try {
                for (o3.s(); !(n5 = o3.n()).done; ) {
                  var r4 = n5.value;
                  r4 instanceof E2 && (i3 === t5 ? r4.coreAsWell : i3.is(r4.selector)) && r4.show && (f3.display(), c3("anyVisibleChild", true), r4.display());
                }
              } catch (e6) {
                o3.e(e6);
              } finally {
                o3.f();
              }
              var a3 = Array.from(f3.children).filter(function(e6) {
                if (e6 instanceof E2)
                  return e6.isVisible();
              }), l4 = a3.length;
              a3.forEach(function(e6, t6) {
                e6 instanceof E2 && (t6 < l4 - 1 && e6.getHasTrailingDivider() ? e6.classList.add(s2) : e6.getHasTrailingDivider() && e6.classList.remove(s2));
              }), !u3("anyVisibleChild") && !function(e6) {
                return e6.offsetWidth <= 0 && e6.offsetHeight <= 0 || e6.style && e6.style.display || getComputedStyle(e6).display;
              }(f3) && f3.hide();
            }, t5.on(l3.evtType, r3), c3("onCxttap", r3), function() {
              var e5 = function(e6) {
                if (f3.contains(e6.originalEvent.target))
                  return false;
                f3.hide(), c3("cxtMenuPosition", void 0), c3("currentCyEvent", void 0);
              };
              t5.on("tapstart", e5), c3("eventCyTapStart", e5);
              var n5 = function() {
                f3.hide();
              };
              t5.on("viewport", n5), c3("onViewport", n5);
            }(), n4 = function(e5) {
              t5.container().contains(e5.target) || f3.contains(e5.target) || (f3.hide(), c3("cxtMenuPosition", void 0));
            }, document.addEventListener("mouseup", n4), c3("hideOnNonCyClick", n4), function() {
              var e5, t6 = function(e6, t7) {
                var n5;
                if ("undefined" == typeof Symbol || null == e6[Symbol.iterator]) {
                  if (Array.isArray(e6) || (n5 = function(e7, t8) {
                    if (e7) {
                      if ("string" == typeof e7)
                        return i2(e7, t8);
                      var n6 = Object.prototype.toString.call(e7).slice(8, -1);
                      return "Object" === n6 && e7.constructor && (n6 = e7.constructor.name), "Map" === n6 || "Set" === n6 ? Array.from(e7) : "Arguments" === n6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n6) ? i2(e7, t8) : void 0;
                    }
                  }(e6)) || t7 && e6 && "number" == typeof e6.length) {
                    n5 && (e6 = n5);
                    var o3 = 0, r4 = function() {
                    };
                    return { s: r4, n: function() {
                      return o3 >= e6.length ? { done: true } : { done: false, value: e6[o3++] };
                    }, e: function(e7) {
                      throw e7;
                    }, f: r4 };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var u4, s3 = true, a3 = false;
                return { s: function() {
                  n5 = e6[Symbol.iterator]();
                }, n: function() {
                  var e7 = n5.next();
                  return s3 = e7.done, e7;
                }, e: function(e7) {
                  a3 = true, u4 = e7;
                }, f: function() {
                  try {
                    s3 || null == n5.return || n5.return();
                  } finally {
                    if (a3)
                      throw u4;
                  }
                } };
              }(document.getElementsByClassName("cy-context-menus-cxt-menu"));
              try {
                for (t6.s(); !(e5 = t6.n()).done; )
                  e5.value.addEventListener("contextmenu", function(e6) {
                    return e6.preventDefault();
                  });
              } catch (e6) {
                t6.e(e6);
              } finally {
                t6.f();
              }
            }();
          }
          return function(e5) {
            return { isActive: function() {
              return u3("active");
            }, appendMenuItem: function(t6) {
              var n5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
              return d4(t6, n5), e5;
            }, appendMenuItems: function(t6) {
              var n5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
              return h3(t6, n5), e5;
            }, removeMenuItem: function(t6) {
              var n5 = y3(t6);
              return f3.removeMenuItem(n5), e5;
            }, setTrailingDivider: function(t6, n5) {
              var i3 = y3(t6);
              return i3.setHasTrailingDivider(n5), n5 ? i3.classList.add(s2) : i3.classList.remove(s2), e5;
            }, insertBeforeMenuItem: function(t6, n5) {
              var i3 = m3(t6), o3 = y3(n5);
              return f3.insertMenuItem(i3, { before: o3 }), e5;
            }, moveToSubmenu: function(t6) {
              var n5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = y3(t6);
              if (null === n5)
                f3.moveToSubmenu(i3);
              else if ("string" == typeof n5) {
                var o3 = y3(n5.toString());
                f3.moveToSubmenu(i3, o3);
              } else
                void 0 !== n5.coreAsWell || void 0 !== n5.selector ? f3.moveToSubmenu(i3, null, n5) : console.warn("options neither has coreAsWell nor selector property but it is an object. Are you sure that this is what you want to do?");
              return e5;
            }, moveBeforeOtherMenuItem: function(t6, n5) {
              var i3 = y3(t6), o3 = y3(n5);
              return f3.moveBefore(i3, o3), e5;
            }, disableMenuItem: function(t6) {
              return y3(t6).disable(), e5;
            }, enableMenuItem: function(t6) {
              return y3(t6).enable(), e5;
            }, hideMenuItem: function(t6) {
              return y3(t6).hide(), e5;
            }, showMenuItem: function(t6) {
              return y3(t6).display(), e5;
            }, destroy: function() {
              return v3(), e5;
            } };
          }(this);
        }
      }, 579: (e3, t4, n3) => {
        var i2 = n3(621).contextMenus, o2 = function(e4) {
          e4 && e4("core", "contextMenus", i2);
        };
        "undefined" != typeof cytoscape && o2(cytoscape), e3.exports = o2;
      } }, t3 = {};
      function n2(i2) {
        var o2 = t3[i2];
        if (void 0 !== o2)
          return o2.exports;
        var r2 = t3[i2] = { exports: {} };
        return e2[i2](r2, r2.exports, n2), r2.exports;
      }
      return n2.d = (e3, t4) => {
        for (var i2 in t4)
          n2.o(t4, i2) && !n2.o(e3, i2) && Object.defineProperty(e3, i2, { enumerable: true, get: t4[i2] });
      }, n2.o = (e3, t4) => Object.prototype.hasOwnProperty.call(e3, t4), n2.r = (e3) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
      }, n2(579);
    })();
  });
})(cytoscapeContextMenus$1);
var cytoscapeContextMenusExports = cytoscapeContextMenus$1.exports;
const contextMenus = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeContextMenusExports);
const cytoscapeContextMenus = "";
/*!
 * iro.js v5.5.2
 * 2016-2021 James Daniel
 * Licensed under MPL 2.0
 * github.com/jaames/iro.js
 */
var n, u, t2, i, r, f = {}, e = [], c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i;
function s(n2, l2) {
  for (var u2 in l2) {
    n2[u2] = l2[u2];
  }
  return n2;
}
function a(n2) {
  var l2 = n2.parentNode;
  l2 && l2.removeChild(n2);
}
function h(n2, l2, u2) {
  var t3, i2, r2, o2, f2 = arguments;
  if (l2 = s({}, l2), arguments.length > 3) {
    for (u2 = [u2], t3 = 3; t3 < arguments.length; t3++) {
      u2.push(f2[t3]);
    }
  }
  if (null != u2 && (l2.children = u2), null != n2 && null != n2.defaultProps) {
    for (i2 in n2.defaultProps) {
      void 0 === l2[i2] && (l2[i2] = n2.defaultProps[i2]);
    }
  }
  return o2 = l2.key, null != (r2 = l2.ref) && delete l2.ref, null != o2 && delete l2.key, v(n2, l2, o2, r2);
}
function v(l2, u2, t3, i2) {
  var r2 = { type: l2, props: u2, key: t3, ref: i2, __k: null, __p: null, __b: 0, __e: null, l: null, __c: null, constructor: void 0 };
  return n.vnode && n.vnode(r2), r2;
}
function d(n2) {
  return n2.children;
}
function y(n2) {
  if (null == n2 || "boolean" == typeof n2) {
    return null;
  }
  if ("string" == typeof n2 || "number" == typeof n2) {
    return v(null, n2, null, null);
  }
  if (null != n2.__e || null != n2.__c) {
    var l2 = v(n2.type, n2.props, n2.key, null);
    return l2.__e = n2.__e, l2;
  }
  return n2;
}
function m(n2, l2) {
  this.props = n2, this.context = l2;
}
function w(n2, l2) {
  if (null == l2) {
    return n2.__p ? w(n2.__p, n2.__p.__k.indexOf(n2) + 1) : null;
  }
  for (var u2; l2 < n2.__k.length; l2++) {
    if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
      return u2.__e;
    }
  }
  return "function" == typeof n2.type ? w(n2) : null;
}
function g(n2) {
  var l2, u2;
  if (null != (n2 = n2.__p) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++) {
      if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    }
    return g(n2);
  }
}
function k(l2) {
  (!l2.__d && (l2.__d = true) && 1 === u.push(l2) || i !== n.debounceRendering) && (i = n.debounceRendering, (n.debounceRendering || t2)(_));
}
function _() {
  var n2, l2, t3, i2, r2, o2, f2, e2;
  for (u.sort(function(n3, l3) {
    return l3.__v.__b - n3.__v.__b;
  }); n2 = u.pop(); ) {
    n2.__d && (t3 = void 0, i2 = void 0, o2 = (r2 = (l2 = n2).__v).__e, f2 = l2.__P, e2 = l2.u, l2.u = false, f2 && (t3 = [], i2 = $$1(f2, r2, s({}, r2), l2.__n, void 0 !== f2.ownerSVGElement, null, t3, e2, null == o2 ? w(r2) : o2), j(t3, r2), i2 != o2 && g(r2)));
  }
}
function b(n2, l2, u2, t3, i2, r2, o2, c2, s2) {
  var h2, v2, p2, d2, y2, m2, g2, k2 = u2 && u2.__k || e, _2 = k2.length;
  if (c2 == f && (c2 = null != r2 ? r2[0] : _2 ? w(u2, 0) : null), h2 = 0, l2.__k = x(l2.__k, function(u3) {
    if (null != u3) {
      if (u3.__p = l2, u3.__b = l2.__b + 1, null === (p2 = k2[h2]) || p2 && u3.key == p2.key && u3.type === p2.type) {
        k2[h2] = void 0;
      } else {
        for (v2 = 0; v2 < _2; v2++) {
          if ((p2 = k2[v2]) && u3.key == p2.key && u3.type === p2.type) {
            k2[v2] = void 0;
            break;
          }
          p2 = null;
        }
      }
      if (d2 = $$1(n2, u3, p2 = p2 || f, t3, i2, r2, o2, null, c2, s2), (v2 = u3.ref) && p2.ref != v2 && (g2 || (g2 = [])).push(v2, u3.__c || d2, u3), null != d2) {
        if (null == m2 && (m2 = d2), null != u3.l) {
          d2 = u3.l, u3.l = null;
        } else if (r2 == p2 || d2 != c2 || null == d2.parentNode) {
          n:
            if (null == c2 || c2.parentNode !== n2) {
              n2.appendChild(d2);
            } else {
              for (y2 = c2, v2 = 0; (y2 = y2.nextSibling) && v2 < _2; v2 += 2) {
                if (y2 == d2) {
                  break n;
                }
              }
              n2.insertBefore(d2, c2);
            }
          "option" == l2.type && (n2.value = "");
        }
        c2 = d2.nextSibling, "function" == typeof l2.type && (l2.l = d2);
      }
    }
    return h2++, u3;
  }), l2.__e = m2, null != r2 && "function" != typeof l2.type) {
    for (h2 = r2.length; h2--; ) {
      null != r2[h2] && a(r2[h2]);
    }
  }
  for (h2 = _2; h2--; ) {
    null != k2[h2] && D(k2[h2], k2[h2]);
  }
  if (g2) {
    for (h2 = 0; h2 < g2.length; h2++) {
      A(g2[h2], g2[++h2], g2[++h2]);
    }
  }
}
function x(n2, l2, u2) {
  if (null == u2 && (u2 = []), null == n2 || "boolean" == typeof n2) {
    l2 && u2.push(l2(null));
  } else if (Array.isArray(n2)) {
    for (var t3 = 0; t3 < n2.length; t3++) {
      x(n2[t3], l2, u2);
    }
  } else {
    u2.push(l2 ? l2(y(n2)) : n2);
  }
  return u2;
}
function C(n2, l2, u2, t3, i2) {
  var r2;
  for (r2 in u2) {
    r2 in l2 || N(n2, r2, null, u2[r2], t3);
  }
  for (r2 in l2) {
    i2 && "function" != typeof l2[r2] || "value" === r2 || "checked" === r2 || u2[r2] === l2[r2] || N(n2, r2, l2[r2], u2[r2], t3);
  }
}
function P(n2, l2, u2) {
  "-" === l2[0] ? n2.setProperty(l2, u2) : n2[l2] = "number" == typeof u2 && false === c.test(l2) ? u2 + "px" : null == u2 ? "" : u2;
}
function N(n2, l2, u2, t3, i2) {
  var r2, o2, f2, e2, c2;
  if ("key" === (l2 = i2 ? "className" === l2 ? "class" : l2 : "class" === l2 ? "className" : l2) || "children" === l2)
    ;
  else if ("style" === l2) {
    if (r2 = n2.style, "string" == typeof u2) {
      r2.cssText = u2;
    } else {
      if ("string" == typeof t3 && (r2.cssText = "", t3 = null), t3) {
        for (o2 in t3) {
          u2 && o2 in u2 || P(r2, o2, "");
        }
      }
      if (u2) {
        for (f2 in u2) {
          t3 && u2[f2] === t3[f2] || P(r2, f2, u2[f2]);
        }
      }
    }
  } else {
    "o" === l2[0] && "n" === l2[1] ? (e2 = l2 !== (l2 = l2.replace(/Capture$/, "")), c2 = l2.toLowerCase(), l2 = (c2 in n2 ? c2 : l2).slice(2), u2 ? (t3 || n2.addEventListener(l2, T, e2), (n2.t || (n2.t = {}))[l2] = u2) : n2.removeEventListener(l2, T, e2)) : "list" !== l2 && "tagName" !== l2 && "form" !== l2 && !i2 && l2 in n2 ? n2[l2] = null == u2 ? "" : u2 : "function" != typeof u2 && "dangerouslySetInnerHTML" !== l2 && (l2 !== (l2 = l2.replace(/^xlink:?/, "")) ? null == u2 || false === u2 ? n2.removeAttributeNS("http://www.w3.org/1999/xlink", l2.toLowerCase()) : n2.setAttributeNS("http://www.w3.org/1999/xlink", l2.toLowerCase(), u2) : null == u2 || false === u2 ? n2.removeAttribute(l2) : n2.setAttribute(l2, u2));
  }
}
function T(l2) {
  return this.t[l2.type](n.event ? n.event(l2) : l2);
}
function $$1(l2, u2, t3, i2, r2, o2, f2, e2, c2, a2) {
  var h2, v2, p2, y2, w2, g2, k2, _2, C2, P2, N2 = u2.type;
  if (void 0 !== u2.constructor) {
    return null;
  }
  (h2 = n.__b) && h2(u2);
  try {
    n:
      if ("function" == typeof N2) {
        if (_2 = u2.props, C2 = (h2 = N2.contextType) && i2[h2.__c], P2 = h2 ? C2 ? C2.props.value : h2.__p : i2, t3.__c ? k2 = (v2 = u2.__c = t3.__c).__p = v2.__E : ("prototype" in N2 && N2.prototype.render ? u2.__c = v2 = new N2(_2, P2) : (u2.__c = v2 = new m(_2, P2), v2.constructor = N2, v2.render = H), C2 && C2.sub(v2), v2.props = _2, v2.state || (v2.state = {}), v2.context = P2, v2.__n = i2, p2 = v2.__d = true, v2.__h = []), null == v2.__s && (v2.__s = v2.state), null != N2.getDerivedStateFromProps && s(v2.__s == v2.state ? v2.__s = s({}, v2.__s) : v2.__s, N2.getDerivedStateFromProps(_2, v2.__s)), p2) {
          null == N2.getDerivedStateFromProps && null != v2.componentWillMount && v2.componentWillMount(), null != v2.componentDidMount && f2.push(v2);
        } else {
          if (null == N2.getDerivedStateFromProps && null == e2 && null != v2.componentWillReceiveProps && v2.componentWillReceiveProps(_2, P2), !e2 && null != v2.shouldComponentUpdate && false === v2.shouldComponentUpdate(_2, v2.__s, P2)) {
            for (v2.props = _2, v2.state = v2.__s, v2.__d = false, v2.__v = u2, u2.__e = null != c2 ? c2 !== t3.__e ? c2 : t3.__e : null, u2.__k = t3.__k, h2 = 0; h2 < u2.__k.length; h2++) {
              u2.__k[h2] && (u2.__k[h2].__p = u2);
            }
            break n;
          }
          null != v2.componentWillUpdate && v2.componentWillUpdate(_2, v2.__s, P2);
        }
        for (y2 = v2.props, w2 = v2.state, v2.context = P2, v2.props = _2, v2.state = v2.__s, (h2 = n.__r) && h2(u2), v2.__d = false, v2.__v = u2, v2.__P = l2, h2 = v2.render(v2.props, v2.state, v2.context), u2.__k = x(null != h2 && h2.type == d && null == h2.key ? h2.props.children : h2), null != v2.getChildContext && (i2 = s(s({}, i2), v2.getChildContext())), p2 || null == v2.getSnapshotBeforeUpdate || (g2 = v2.getSnapshotBeforeUpdate(y2, w2)), b(l2, u2, t3, i2, r2, o2, f2, c2, a2), v2.base = u2.__e; h2 = v2.__h.pop(); ) {
          v2.__s && (v2.state = v2.__s), h2.call(v2);
        }
        p2 || null == y2 || null == v2.componentDidUpdate || v2.componentDidUpdate(y2, w2, g2), k2 && (v2.__E = v2.__p = null);
      } else {
        u2.__e = z(t3.__e, u2, t3, i2, r2, o2, f2, a2);
      }
    (h2 = n.diffed) && h2(u2);
  } catch (l3) {
    n.__e(l3, u2, t3);
  }
  return u2.__e;
}
function j(l2, u2) {
  for (var t3; t3 = l2.pop(); ) {
    try {
      t3.componentDidMount();
    } catch (l3) {
      n.__e(l3, t3.__v);
    }
  }
  n.__c && n.__c(u2);
}
function z(n2, l2, u2, t3, i2, r2, o2, c2) {
  var s2, a2, h2, v2, p2 = u2.props, d2 = l2.props;
  if (i2 = "svg" === l2.type || i2, null == n2 && null != r2) {
    for (s2 = 0; s2 < r2.length; s2++) {
      if (null != (a2 = r2[s2]) && (null === l2.type ? 3 === a2.nodeType : a2.localName === l2.type)) {
        n2 = a2, r2[s2] = null;
        break;
      }
    }
  }
  if (null == n2) {
    if (null === l2.type) {
      return document.createTextNode(d2);
    }
    n2 = i2 ? document.createElementNS("http://www.w3.org/2000/svg", l2.type) : document.createElement(l2.type), r2 = null;
  }
  return null === l2.type ? p2 !== d2 && (null != r2 && (r2[r2.indexOf(n2)] = null), n2.data = d2) : l2 !== u2 && (null != r2 && (r2 = e.slice.call(n2.childNodes)), h2 = (p2 = u2.props || f).dangerouslySetInnerHTML, v2 = d2.dangerouslySetInnerHTML, c2 || (v2 || h2) && (v2 && h2 && v2.__html == h2.__html || (n2.innerHTML = v2 && v2.__html || "")), C(n2, d2, p2, i2, c2), l2.__k = l2.props.children, v2 || b(n2, l2, u2, t3, "foreignObject" !== l2.type && i2, r2, o2, f, c2), c2 || ("value" in d2 && void 0 !== d2.value && d2.value !== n2.value && (n2.value = null == d2.value ? "" : d2.value), "checked" in d2 && void 0 !== d2.checked && d2.checked !== n2.checked && (n2.checked = d2.checked))), n2;
}
function A(l2, u2, t3) {
  try {
    "function" == typeof l2 ? l2(u2) : l2.current = u2;
  } catch (l3) {
    n.__e(l3, t3);
  }
}
function D(l2, u2, t3) {
  var i2, r2, o2;
  if (n.unmount && n.unmount(l2), (i2 = l2.ref) && A(i2, null, u2), t3 || "function" == typeof l2.type || (t3 = null != (r2 = l2.__e)), l2.__e = l2.l = null, null != (i2 = l2.__c)) {
    if (i2.componentWillUnmount) {
      try {
        i2.componentWillUnmount();
      } catch (l3) {
        n.__e(l3, u2);
      }
    }
    i2.base = i2.__P = null;
  }
  if (i2 = l2.__k) {
    for (o2 = 0; o2 < i2.length; o2++) {
      i2[o2] && D(i2[o2], u2, t3);
    }
  }
  null != r2 && a(r2);
}
function H(n2, l2, u2) {
  return this.constructor(n2, u2);
}
function I(l2, u2, t3) {
  var i2, o2, c2;
  n.__p && n.__p(l2, u2), o2 = (i2 = t3 === r) ? null : t3 && t3.__k || u2.__k, l2 = h(d, null, [l2]), c2 = [], $$1(u2, i2 ? u2.__k = l2 : (t3 || u2).__k = l2, o2 || f, f, void 0 !== u2.ownerSVGElement, t3 && !i2 ? [t3] : o2 ? null : e.slice.call(u2.childNodes), c2, false, t3 || f, i2), j(c2, l2);
}
n = {}, m.prototype.setState = function(n2, l2) {
  var u2 = this.__s !== this.state && this.__s || (this.__s = s({}, this.state));
  ("function" != typeof n2 || (n2 = n2(u2, this.props))) && s(u2, n2), null != n2 && this.__v && (this.u = false, l2 && this.__h.push(l2), k(this));
}, m.prototype.forceUpdate = function(n2) {
  this.__v && (n2 && this.__h.push(n2), this.u = true, k(this));
}, m.prototype.render = d, u = [], t2 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, i = n.debounceRendering, n.__e = function(n2, l2, u2) {
  for (var t3; l2 = l2.__p; ) {
    if ((t3 = l2.__c) && !t3.__p) {
      try {
        if (t3.constructor && null != t3.constructor.getDerivedStateFromError) {
          t3.setState(t3.constructor.getDerivedStateFromError(n2));
        } else {
          if (null == t3.componentDidCatch) {
            continue;
          }
          t3.componentDidCatch(n2);
        }
        return k(t3.__E = t3);
      } catch (l3) {
        n2 = l3;
      }
    }
  }
  throw n2;
}, r = f;
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) {
      descriptor.writable = true;
    }
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) {
    _defineProperties(Constructor.prototype, protoProps);
  }
  if (staticProps) {
    _defineProperties(Constructor, staticProps);
  }
  return Constructor;
}
function _extends() {
  _extends = Object.assign || function(target) {
    var arguments$1 = arguments;
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments$1[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
var PERMISSIVE_MATCH_3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var PERMISSIVE_MATCH_4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var REGEX_FUNCTIONAL_RGB = new RegExp("rgb" + PERMISSIVE_MATCH_3);
var REGEX_FUNCTIONAL_RGBA = new RegExp("rgba" + PERMISSIVE_MATCH_4);
var REGEX_FUNCTIONAL_HSL = new RegExp("hsl" + PERMISSIVE_MATCH_3);
var REGEX_FUNCTIONAL_HSLA = new RegExp("hsla" + PERMISSIVE_MATCH_4);
var HEX_START = "^(?:#?|0x?)";
var HEX_INT_SINGLE = "([0-9a-fA-F]{1})";
var HEX_INT_DOUBLE = "([0-9a-fA-F]{2})";
var REGEX_HEX_3 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + "$");
var REGEX_HEX_4 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + "$");
var REGEX_HEX_6 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + "$");
var REGEX_HEX_8 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + "$");
var KELVIN_MIN = 2e3;
var KELVIN_MAX = 4e4;
var log = Math.log, round = Math.round, floor = Math.floor;
function clamp(num, min4, max5) {
  return Math.min(Math.max(num, min4), max5);
}
function parseUnit(str, max5) {
  var isPercentage = str.indexOf("%") > -1;
  var num = parseFloat(str);
  return isPercentage ? max5 / 100 * num : num;
}
function parseHexInt(str) {
  return parseInt(str, 16);
}
function intToHex(_int) {
  return _int.toString(16).padStart(2, "0");
}
var IroColor = /* @__PURE__ */ function() {
  function IroColor2(value, onChange) {
    this.$ = {
      h: 0,
      s: 0,
      v: 0,
      a: 1
    };
    if (value) {
      this.set(value);
    }
    this.onChange = onChange;
    this.initialValue = _extends({}, this.$);
  }
  var _proto = IroColor2.prototype;
  _proto.set = function set2(value) {
    if (typeof value === "string") {
      if (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value)) {
        this.hexString = value;
      } else if (/^rgba?/.test(value)) {
        this.rgbString = value;
      } else if (/^hsla?/.test(value)) {
        this.hslString = value;
      }
    } else if (typeof value === "object") {
      if (value instanceof IroColor2) {
        this.hsva = value.hsva;
      } else if ("r" in value && "g" in value && "b" in value) {
        this.rgb = value;
      } else if ("h" in value && "s" in value && "v" in value) {
        this.hsv = value;
      } else if ("h" in value && "s" in value && "l" in value) {
        this.hsl = value;
      } else if ("kelvin" in value) {
        this.kelvin = value.kelvin;
      }
    } else {
      throw new Error("Invalid color value");
    }
  };
  _proto.setChannel = function setChannel(format, channel, value) {
    var _extends2;
    this[format] = _extends({}, this[format], (_extends2 = {}, _extends2[channel] = value, _extends2));
  };
  _proto.reset = function reset2() {
    this.hsva = this.initialValue;
  };
  _proto.clone = function clone3() {
    return new IroColor2(this);
  };
  _proto.unbind = function unbind() {
    this.onChange = void 0;
  };
  IroColor2.hsvToRgb = function hsvToRgb(hsv) {
    var h2 = hsv.h / 60;
    var s2 = hsv.s / 100;
    var v2 = hsv.v / 100;
    var i2 = floor(h2);
    var f2 = h2 - i2;
    var p2 = v2 * (1 - s2);
    var q2 = v2 * (1 - f2 * s2);
    var t3 = v2 * (1 - (1 - f2) * s2);
    var mod3 = i2 % 6;
    var r2 = [v2, q2, p2, p2, t3, v2][mod3];
    var g2 = [t3, v2, v2, q2, p2, p2][mod3];
    var b2 = [p2, p2, t3, v2, v2, q2][mod3];
    return {
      r: clamp(r2 * 255, 0, 255),
      g: clamp(g2 * 255, 0, 255),
      b: clamp(b2 * 255, 0, 255)
    };
  };
  IroColor2.rgbToHsv = function rgbToHsv(rgb) {
    var r2 = rgb.r / 255;
    var g2 = rgb.g / 255;
    var b2 = rgb.b / 255;
    var max5 = Math.max(r2, g2, b2);
    var min4 = Math.min(r2, g2, b2);
    var delta = max5 - min4;
    var hue = 0;
    var value = max5;
    var saturation = max5 === 0 ? 0 : delta / max5;
    switch (max5) {
      case min4:
        hue = 0;
        break;
      case r2:
        hue = (g2 - b2) / delta + (g2 < b2 ? 6 : 0);
        break;
      case g2:
        hue = (b2 - r2) / delta + 2;
        break;
      case b2:
        hue = (r2 - g2) / delta + 4;
        break;
    }
    return {
      h: hue * 60 % 360,
      s: clamp(saturation * 100, 0, 100),
      v: clamp(value * 100, 0, 100)
    };
  };
  IroColor2.hsvToHsl = function hsvToHsl(hsv) {
    var s2 = hsv.s / 100;
    var v2 = hsv.v / 100;
    var l2 = (2 - s2) * v2;
    var divisor = l2 <= 1 ? l2 : 2 - l2;
    var saturation = divisor < 1e-9 ? 0 : s2 * v2 / divisor;
    return {
      h: hsv.h,
      s: clamp(saturation * 100, 0, 100),
      l: clamp(l2 * 50, 0, 100)
    };
  };
  IroColor2.hslToHsv = function hslToHsv(hsl) {
    var l2 = hsl.l * 2;
    var s2 = hsl.s * (l2 <= 100 ? l2 : 200 - l2) / 100;
    var saturation = l2 + s2 < 1e-9 ? 0 : 2 * s2 / (l2 + s2);
    return {
      h: hsl.h,
      s: clamp(saturation * 100, 0, 100),
      v: clamp((l2 + s2) / 2, 0, 100)
    };
  };
  IroColor2.kelvinToRgb = function kelvinToRgb(kelvin) {
    var temp = kelvin / 100;
    var r2, g2, b2;
    if (temp < 66) {
      r2 = 255;
      g2 = -155.25485562709179 - 0.44596950469579133 * (g2 = temp - 2) + 104.49216199393888 * log(g2);
      b2 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b2 = temp - 10) + 115.67994401066147 * log(b2);
    } else {
      r2 = 351.97690566805693 + 0.114206453784165 * (r2 = temp - 55) - 40.25366309332127 * log(r2);
      g2 = 325.4494125711974 + 0.07943456536662342 * (g2 = temp - 50) - 28.0852963507957 * log(g2);
      b2 = 255;
    }
    return {
      r: clamp(floor(r2), 0, 255),
      g: clamp(floor(g2), 0, 255),
      b: clamp(floor(b2), 0, 255)
    };
  };
  IroColor2.rgbToKelvin = function rgbToKelvin(rgb) {
    var r2 = rgb.r, b2 = rgb.b;
    var eps = 0.4;
    var minTemp = KELVIN_MIN;
    var maxTemp = KELVIN_MAX;
    var temp;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      var _rgb = IroColor2.kelvinToRgb(temp);
      if (_rgb.b / _rgb.r >= b2 / r2) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return temp;
  };
  _createClass(IroColor2, [{
    key: "hsv",
    get: function get2() {
      var value = this.$;
      return {
        h: value.h,
        s: value.s,
        v: value.v
      };
    },
    set: function set2(newValue) {
      var oldValue = this.$;
      newValue = _extends({}, oldValue, newValue);
      if (this.onChange) {
        var changes = {
          h: false,
          v: false,
          s: false,
          a: false
        };
        for (var key in oldValue) {
          changes[key] = newValue[key] != oldValue[key];
        }
        this.$ = newValue;
        if (changes.h || changes.s || changes.v || changes.a) {
          this.onChange(this, changes);
        }
      } else {
        this.$ = newValue;
      }
    }
  }, {
    key: "hsva",
    get: function get2() {
      return _extends({}, this.$);
    },
    set: function set2(value) {
      this.hsv = value;
    }
  }, {
    key: "hue",
    get: function get2() {
      return this.$.h;
    },
    set: function set2(value) {
      this.hsv = {
        h: value
      };
    }
  }, {
    key: "saturation",
    get: function get2() {
      return this.$.s;
    },
    set: function set2(value) {
      this.hsv = {
        s: value
      };
    }
  }, {
    key: "value",
    get: function get2() {
      return this.$.v;
    },
    set: function set2(value) {
      this.hsv = {
        v: value
      };
    }
  }, {
    key: "alpha",
    get: function get2() {
      return this.$.a;
    },
    set: function set2(value) {
      this.hsv = _extends({}, this.hsv, {
        a: value
      });
    }
  }, {
    key: "kelvin",
    get: function get2() {
      return IroColor2.rgbToKelvin(this.rgb);
    },
    set: function set2(value) {
      this.rgb = IroColor2.kelvinToRgb(value);
    }
  }, {
    key: "red",
    get: function get2() {
      var rgb = this.rgb;
      return rgb.r;
    },
    set: function set2(value) {
      this.rgb = _extends({}, this.rgb, {
        r: value
      });
    }
  }, {
    key: "green",
    get: function get2() {
      var rgb = this.rgb;
      return rgb.g;
    },
    set: function set2(value) {
      this.rgb = _extends({}, this.rgb, {
        g: value
      });
    }
  }, {
    key: "blue",
    get: function get2() {
      var rgb = this.rgb;
      return rgb.b;
    },
    set: function set2(value) {
      this.rgb = _extends({}, this.rgb, {
        b: value
      });
    }
  }, {
    key: "rgb",
    get: function get2() {
      var _IroColor$hsvToRgb = IroColor2.hsvToRgb(this.$), r2 = _IroColor$hsvToRgb.r, g2 = _IroColor$hsvToRgb.g, b2 = _IroColor$hsvToRgb.b;
      return {
        r: round(r2),
        g: round(g2),
        b: round(b2)
      };
    },
    set: function set2(value) {
      this.hsv = _extends({}, IroColor2.rgbToHsv(value), {
        a: value.a === void 0 ? 1 : value.a
      });
    }
  }, {
    key: "rgba",
    get: function get2() {
      return _extends({}, this.rgb, {
        a: this.alpha
      });
    },
    set: function set2(value) {
      this.rgb = value;
    }
  }, {
    key: "hsl",
    get: function get2() {
      var _IroColor$hsvToHsl = IroColor2.hsvToHsl(this.$), h2 = _IroColor$hsvToHsl.h, s2 = _IroColor$hsvToHsl.s, l2 = _IroColor$hsvToHsl.l;
      return {
        h: round(h2),
        s: round(s2),
        l: round(l2)
      };
    },
    set: function set2(value) {
      this.hsv = _extends({}, IroColor2.hslToHsv(value), {
        a: value.a === void 0 ? 1 : value.a
      });
    }
  }, {
    key: "hsla",
    get: function get2() {
      return _extends({}, this.hsl, {
        a: this.alpha
      });
    },
    set: function set2(value) {
      this.hsl = value;
    }
  }, {
    key: "rgbString",
    get: function get2() {
      var rgb = this.rgb;
      return "rgb(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ")";
    },
    set: function set2(value) {
      var match2;
      var r2, g2, b2, a2 = 1;
      if (match2 = REGEX_FUNCTIONAL_RGB.exec(value)) {
        r2 = parseUnit(match2[1], 255);
        g2 = parseUnit(match2[2], 255);
        b2 = parseUnit(match2[3], 255);
      } else if (match2 = REGEX_FUNCTIONAL_RGBA.exec(value)) {
        r2 = parseUnit(match2[1], 255);
        g2 = parseUnit(match2[2], 255);
        b2 = parseUnit(match2[3], 255);
        a2 = parseUnit(match2[4], 1);
      }
      if (match2) {
        this.rgb = {
          r: r2,
          g: g2,
          b: b2,
          a: a2
        };
      } else {
        throw new Error("Invalid rgb string");
      }
    }
  }, {
    key: "rgbaString",
    get: function get2() {
      var rgba2 = this.rgba;
      return "rgba(" + rgba2.r + ", " + rgba2.g + ", " + rgba2.b + ", " + rgba2.a + ")";
    },
    set: function set2(value) {
      this.rgbString = value;
    }
  }, {
    key: "hexString",
    get: function get2() {
      var rgb = this.rgb;
      return "#" + intToHex(rgb.r) + intToHex(rgb.g) + intToHex(rgb.b);
    },
    set: function set2(value) {
      var match2;
      var r2, g2, b2, a2 = 255;
      if (match2 = REGEX_HEX_3.exec(value)) {
        r2 = parseHexInt(match2[1]) * 17;
        g2 = parseHexInt(match2[2]) * 17;
        b2 = parseHexInt(match2[3]) * 17;
      } else if (match2 = REGEX_HEX_4.exec(value)) {
        r2 = parseHexInt(match2[1]) * 17;
        g2 = parseHexInt(match2[2]) * 17;
        b2 = parseHexInt(match2[3]) * 17;
        a2 = parseHexInt(match2[4]) * 17;
      } else if (match2 = REGEX_HEX_6.exec(value)) {
        r2 = parseHexInt(match2[1]);
        g2 = parseHexInt(match2[2]);
        b2 = parseHexInt(match2[3]);
      } else if (match2 = REGEX_HEX_8.exec(value)) {
        r2 = parseHexInt(match2[1]);
        g2 = parseHexInt(match2[2]);
        b2 = parseHexInt(match2[3]);
        a2 = parseHexInt(match2[4]);
      }
      if (match2) {
        this.rgb = {
          r: r2,
          g: g2,
          b: b2,
          a: a2 / 255
        };
      } else {
        throw new Error("Invalid hex string");
      }
    }
  }, {
    key: "hex8String",
    get: function get2() {
      var rgba2 = this.rgba;
      return "#" + intToHex(rgba2.r) + intToHex(rgba2.g) + intToHex(rgba2.b) + intToHex(floor(rgba2.a * 255));
    },
    set: function set2(value) {
      this.hexString = value;
    }
  }, {
    key: "hslString",
    get: function get2() {
      var hsl = this.hsl;
      return "hsl(" + hsl.h + ", " + hsl.s + "%, " + hsl.l + "%)";
    },
    set: function set2(value) {
      var match2;
      var h2, s2, l2, a2 = 1;
      if (match2 = REGEX_FUNCTIONAL_HSL.exec(value)) {
        h2 = parseUnit(match2[1], 360);
        s2 = parseUnit(match2[2], 100);
        l2 = parseUnit(match2[3], 100);
      } else if (match2 = REGEX_FUNCTIONAL_HSLA.exec(value)) {
        h2 = parseUnit(match2[1], 360);
        s2 = parseUnit(match2[2], 100);
        l2 = parseUnit(match2[3], 100);
        a2 = parseUnit(match2[4], 1);
      }
      if (match2) {
        this.hsl = {
          h: h2,
          s: s2,
          l: l2,
          a: a2
        };
      } else {
        throw new Error("Invalid hsl string");
      }
    }
  }, {
    key: "hslaString",
    get: function get2() {
      var hsla2 = this.hsla;
      return "hsla(" + hsla2.h + ", " + hsla2.s + "%, " + hsla2.l + "%, " + hsla2.a + ")";
    },
    set: function set2(value) {
      this.hslString = value;
    }
  }]);
  return IroColor2;
}();
var sliderDefaultOptions = {
  sliderShape: "bar",
  sliderType: "value",
  minTemperature: 2200,
  maxTemperature: 11e3
};
function getSliderDimensions(props) {
  var _sliderSize;
  var width2 = props.width, sliderSize = props.sliderSize, borderWidth = props.borderWidth, handleRadius = props.handleRadius, padding = props.padding, sliderShape = props.sliderShape;
  var ishorizontal = props.layoutDirection === "horizontal";
  sliderSize = (_sliderSize = sliderSize) != null ? _sliderSize : padding * 2 + handleRadius * 2;
  if (sliderShape === "circle") {
    return {
      handleStart: props.padding + props.handleRadius,
      handleRange: width2 - padding * 2 - handleRadius * 2,
      width: width2,
      height: width2,
      cx: width2 / 2,
      cy: width2 / 2,
      radius: width2 / 2 - borderWidth / 2
    };
  } else {
    return {
      handleStart: sliderSize / 2,
      handleRange: width2 - sliderSize,
      radius: sliderSize / 2,
      x: 0,
      y: 0,
      width: ishorizontal ? sliderSize : width2,
      height: ishorizontal ? width2 : sliderSize
    };
  }
}
function getCurrentSliderValue(props, color) {
  var hsva = color.hsva;
  var rgb = color.rgb;
  switch (props.sliderType) {
    case "red":
      return rgb.r / 2.55;
    case "green":
      return rgb.g / 2.55;
    case "blue":
      return rgb.b / 2.55;
    case "alpha":
      return hsva.a * 100;
    case "kelvin":
      var minTemperature = props.minTemperature, maxTemperature = props.maxTemperature;
      var temperatureRange = maxTemperature - minTemperature;
      var percent = (color.kelvin - minTemperature) / temperatureRange * 100;
      return Math.max(0, Math.min(percent, 100));
    case "hue":
      return hsva.h /= 3.6;
    case "saturation":
      return hsva.s;
    case "value":
    default:
      return hsva.v;
  }
}
function getSliderValueFromInput(props, x2, y2) {
  var _getSliderDimensions = getSliderDimensions(props), handleRange = _getSliderDimensions.handleRange, handleStart = _getSliderDimensions.handleStart;
  var handlePos;
  if (props.layoutDirection === "horizontal") {
    handlePos = -1 * y2 + handleRange + handleStart;
  } else {
    handlePos = x2 - handleStart;
  }
  handlePos = Math.max(Math.min(handlePos, handleRange), 0);
  var percent = Math.round(100 / handleRange * handlePos);
  switch (props.sliderType) {
    case "kelvin":
      var minTemperature = props.minTemperature, maxTemperature = props.maxTemperature;
      var temperatureRange = maxTemperature - minTemperature;
      return minTemperature + temperatureRange * (percent / 100);
    case "alpha":
      return percent / 100;
    case "hue":
      return percent * 3.6;
    case "red":
    case "blue":
    case "green":
      return percent * 2.55;
    default:
      return percent;
  }
}
function getSliderHandlePosition(props, color) {
  var _getSliderDimensions2 = getSliderDimensions(props), width2 = _getSliderDimensions2.width, height2 = _getSliderDimensions2.height, handleRange = _getSliderDimensions2.handleRange, handleStart = _getSliderDimensions2.handleStart;
  var ishorizontal = props.layoutDirection === "horizontal";
  var sliderValue = getCurrentSliderValue(props, color);
  var midPoint = ishorizontal ? width2 / 2 : height2 / 2;
  var handlePos = handleStart + sliderValue / 100 * handleRange;
  if (ishorizontal) {
    handlePos = -1 * handlePos + handleRange + handleStart * 2;
  }
  return {
    x: ishorizontal ? midPoint : handlePos,
    y: ishorizontal ? handlePos : midPoint
  };
}
function getSliderGradient(props, color) {
  var hsv = color.hsv;
  var rgb = color.rgb;
  switch (props.sliderType) {
    case "red":
      return [[0, "rgb(0," + rgb.g + "," + rgb.b + ")"], [100, "rgb(255," + rgb.g + "," + rgb.b + ")"]];
    case "green":
      return [[0, "rgb(" + rgb.r + ",0," + rgb.b + ")"], [100, "rgb(" + rgb.r + ",255," + rgb.b + ")"]];
    case "blue":
      return [[0, "rgb(" + rgb.r + "," + rgb.g + ",0)"], [100, "rgb(" + rgb.r + "," + rgb.g + ",255)"]];
    case "alpha":
      return [[0, "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ",0)"], [100, "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")"]];
    case "kelvin":
      var stops = [];
      var min4 = props.minTemperature;
      var max5 = props.maxTemperature;
      var numStops = 8;
      var range = max5 - min4;
      for (var kelvin = min4, stop5 = 0; kelvin < max5; kelvin += range / numStops, stop5 += 1) {
        var _IroColor$kelvinToRgb = IroColor.kelvinToRgb(kelvin), r2 = _IroColor$kelvinToRgb.r, g2 = _IroColor$kelvinToRgb.g, b2 = _IroColor$kelvinToRgb.b;
        stops.push([100 / numStops * stop5, "rgb(" + r2 + "," + g2 + "," + b2 + ")"]);
      }
      return stops;
    case "hue":
      return [[0, "#f00"], [16.666, "#ff0"], [33.333, "#0f0"], [50, "#0ff"], [66.666, "#00f"], [83.333, "#f0f"], [100, "#f00"]];
    case "saturation":
      var noSat = IroColor.hsvToHsl({
        h: hsv.h,
        s: 0,
        v: hsv.v
      });
      var fullSat = IroColor.hsvToHsl({
        h: hsv.h,
        s: 100,
        v: hsv.v
      });
      return [[0, "hsl(" + noSat.h + "," + noSat.s + "%," + noSat.l + "%)"], [100, "hsl(" + fullSat.h + "," + fullSat.s + "%," + fullSat.l + "%)"]];
    case "value":
    default:
      var hsl = IroColor.hsvToHsl({
        h: hsv.h,
        s: hsv.s,
        v: 100
      });
      return [[0, "#000"], [100, "hsl(" + hsl.h + "," + hsl.s + "%," + hsl.l + "%)"]];
  }
}
var TAU = Math.PI * 2;
var mod = function mod2(a2, n2) {
  return (a2 % n2 + n2) % n2;
};
var dist2 = function dist3(x2, y2) {
  return Math.sqrt(x2 * x2 + y2 * y2);
};
function getHandleRange(props) {
  return props.width / 2 - props.padding - props.handleRadius - props.borderWidth;
}
function isInputInsideWheel(props, x2, y2) {
  var _getWheelDimensions = getWheelDimensions(props), cx = _getWheelDimensions.cx, cy2 = _getWheelDimensions.cy;
  var r2 = props.width / 2;
  return dist2(cx - x2, cy2 - y2) < r2;
}
function getWheelDimensions(props) {
  var r2 = props.width / 2;
  return {
    width: props.width,
    radius: r2 - props.borderWidth,
    cx: r2,
    cy: r2
  };
}
function translateWheelAngle(props, angle, invert) {
  var wheelAngle = props.wheelAngle;
  var wheelDirection = props.wheelDirection;
  if (invert && wheelDirection === "clockwise") {
    angle = wheelAngle + angle;
  } else if (wheelDirection === "clockwise") {
    angle = 360 - wheelAngle + angle;
  } else if (invert && wheelDirection === "anticlockwise") {
    angle = wheelAngle + 180 - angle;
  } else if (wheelDirection === "anticlockwise") {
    angle = wheelAngle - angle;
  }
  return mod(angle, 360);
}
function getWheelHandlePosition(props, color) {
  var hsv = color.hsv;
  var _getWheelDimensions2 = getWheelDimensions(props), cx = _getWheelDimensions2.cx, cy2 = _getWheelDimensions2.cy;
  var handleRange = getHandleRange(props);
  var handleAngle = (180 + translateWheelAngle(props, hsv.h, true)) * (TAU / 360);
  var handleDist = hsv.s / 100 * handleRange;
  var direction = props.wheelDirection === "clockwise" ? -1 : 1;
  return {
    x: cx + handleDist * Math.cos(handleAngle) * direction,
    y: cy2 + handleDist * Math.sin(handleAngle) * direction
  };
}
function getWheelValueFromInput(props, x2, y2) {
  var _getWheelDimensions3 = getWheelDimensions(props), cx = _getWheelDimensions3.cx, cy2 = _getWheelDimensions3.cy;
  var handleRange = getHandleRange(props);
  x2 = cx - x2;
  y2 = cy2 - y2;
  var hue = translateWheelAngle(props, Math.atan2(-y2, -x2) * (360 / TAU));
  var handleDist = Math.min(dist2(x2, y2), handleRange);
  return {
    h: Math.round(hue),
    s: Math.round(100 / handleRange * handleDist)
  };
}
function getBoxDimensions(props) {
  var width2 = props.width, boxHeight = props.boxHeight, padding = props.padding, handleRadius = props.handleRadius;
  return {
    width: width2,
    height: boxHeight != null ? boxHeight : width2,
    radius: padding + handleRadius
  };
}
function getBoxValueFromInput(props, x2, y2) {
  var _getBoxDimensions = getBoxDimensions(props), width2 = _getBoxDimensions.width, height2 = _getBoxDimensions.height, radius = _getBoxDimensions.radius;
  var handleStart = radius;
  var handleRangeX = width2 - radius * 2;
  var handleRangeY = height2 - radius * 2;
  var percentX = (x2 - handleStart) / handleRangeX * 100;
  var percentY = (y2 - handleStart) / handleRangeY * 100;
  return {
    s: Math.max(0, Math.min(percentX, 100)),
    v: Math.max(0, Math.min(100 - percentY, 100))
  };
}
function getBoxHandlePosition(props, color) {
  var _getBoxDimensions2 = getBoxDimensions(props), width2 = _getBoxDimensions2.width, height2 = _getBoxDimensions2.height, radius = _getBoxDimensions2.radius;
  var hsv = color.hsv;
  var handleStart = radius;
  var handleRangeX = width2 - radius * 2;
  var handleRangeY = height2 - radius * 2;
  return {
    x: handleStart + hsv.s / 100 * handleRangeX,
    y: handleStart + (handleRangeY - hsv.v / 100 * handleRangeY)
  };
}
function getBoxGradients(props, color) {
  var hue = color.hue;
  return [
    // saturation gradient
    [[0, "#fff"], [100, "hsl(" + hue + ",100%,50%)"]],
    // lightness gradient
    [[0, "rgba(0,0,0,0)"], [100, "#000"]]
  ];
}
var BASE_ELEMENTS;
function resolveSvgUrl(url) {
  if (!BASE_ELEMENTS) {
    BASE_ELEMENTS = document.getElementsByTagName("base");
  }
  var ua = window.navigator.userAgent;
  var isSafari = /^((?!chrome|android).)*safari/i.test(ua);
  var isIos = /iPhone|iPod|iPad/i.test(ua);
  var location2 = window.location;
  return (isSafari || isIos) && BASE_ELEMENTS.length > 0 ? location2.protocol + "//" + location2.host + location2.pathname + location2.search + url : url;
}
function getHandleAtPoint(props, x2, y2, handlePositions) {
  for (var i2 = 0; i2 < handlePositions.length; i2++) {
    var dX = handlePositions[i2].x - x2;
    var dY = handlePositions[i2].y - y2;
    var dist4 = Math.sqrt(dX * dX + dY * dY);
    if (dist4 < props.handleRadius) {
      return i2;
    }
  }
  return null;
}
function cssBorderStyles(props) {
  return {
    boxSizing: "border-box",
    border: props.borderWidth + "px solid " + props.borderColor
  };
}
function cssGradient(type, direction, stops) {
  return type + "-gradient(" + direction + ", " + stops.map(function(_ref) {
    var o2 = _ref[0], col = _ref[1];
    return col + " " + o2 + "%";
  }).join(",") + ")";
}
function cssValue(value) {
  if (typeof value === "string") {
    return value;
  }
  return value + "px";
}
var iroColorPickerOptionDefaults = {
  width: 300,
  height: 300,
  color: "#fff",
  colors: [],
  padding: 6,
  layoutDirection: "vertical",
  borderColor: "#fff",
  borderWidth: 0,
  handleRadius: 8,
  activeHandleRadius: null,
  handleSvg: null,
  handleProps: {
    x: 0,
    y: 0
  },
  wheelLightness: true,
  wheelAngle: 0,
  wheelDirection: "anticlockwise",
  sliderSize: null,
  sliderMargin: 12,
  boxHeight: null
};
var SECONDARY_EVENTS = [
  "mousemove",
  "touchmove",
  "mouseup",
  "touchend"
  /* TouchEnd */
];
var IroComponentWrapper = /* @__PURE__ */ function(Component) {
  function IroComponentWrapper2(props) {
    Component.call(this, props);
    this.uid = (Math.random() + 1).toString(36).substring(5);
  }
  if (Component)
    IroComponentWrapper2.__proto__ = Component;
  IroComponentWrapper2.prototype = Object.create(Component && Component.prototype);
  IroComponentWrapper2.prototype.constructor = IroComponentWrapper2;
  IroComponentWrapper2.prototype.render = function render(props) {
    var eventHandler = this.handleEvent.bind(this);
    var rootProps = {
      onMouseDown: eventHandler,
      // https://github.com/jaames/iro.js/issues/126
      // https://github.com/preactjs/preact/issues/2113#issuecomment-553408767
      ontouchstart: eventHandler
    };
    var isHorizontal = props.layoutDirection === "horizontal";
    var margin = props.margin === null ? props.sliderMargin : props.margin;
    var rootStyles = {
      overflow: "visible",
      display: isHorizontal ? "inline-block" : "block"
    };
    if (props.index > 0) {
      rootStyles[isHorizontal ? "marginLeft" : "marginTop"] = margin;
    }
    return h(d, null, props.children(this.uid, rootProps, rootStyles));
  };
  IroComponentWrapper2.prototype.handleEvent = function handleEvent(e2) {
    var this$1$1 = this;
    var inputHandler = this.props.onInput;
    var bounds2 = this.base.getBoundingClientRect();
    e2.preventDefault();
    var point = e2.touches ? e2.changedTouches[0] : e2;
    var x2 = point.clientX - bounds2.left;
    var y2 = point.clientY - bounds2.top;
    switch (e2.type) {
      case "mousedown":
      case "touchstart":
        var result = inputHandler(
          x2,
          y2,
          0
          /* Start */
        );
        if (result !== false) {
          SECONDARY_EVENTS.forEach(function(event3) {
            document.addEventListener(event3, this$1$1, { passive: false });
          });
        }
        break;
      case "mousemove":
      case "touchmove":
        inputHandler(
          x2,
          y2,
          1
          /* Move */
        );
        break;
      case "mouseup":
      case "touchend":
        inputHandler(
          x2,
          y2,
          2
          /* End */
        );
        SECONDARY_EVENTS.forEach(function(event3) {
          document.removeEventListener(event3, this$1$1, { passive: false });
        });
        break;
    }
  };
  return IroComponentWrapper2;
}(m);
function IroHandle(props) {
  var radius = props.r;
  var url = props.url;
  var cx = radius;
  var cy2 = radius;
  return h(
    "svg",
    { className: "IroHandle IroHandle--" + props.index + " " + (props.isActive ? "IroHandle--isActive" : ""), style: {
      "-webkit-tap-highlight-color": "rgba(0, 0, 0, 0);",
      transform: "translate(" + cssValue(props.x) + ", " + cssValue(props.y) + ")",
      willChange: "transform",
      top: cssValue(-radius),
      left: cssValue(-radius),
      width: cssValue(radius * 2),
      height: cssValue(radius * 2),
      position: "absolute",
      overflow: "visible"
    } },
    url && h("use", Object.assign({ xlinkHref: resolveSvgUrl(url) }, props.props)),
    !url && h("circle", { cx, cy: cy2, r: radius, fill: "none", "stroke-width": 2, stroke: "#000" }),
    !url && h("circle", { cx, cy: cy2, r: radius - 2, fill: props.fill, "stroke-width": 2, stroke: "#fff" })
  );
}
IroHandle.defaultProps = {
  fill: "none",
  x: 0,
  y: 0,
  r: 8,
  url: null,
  props: { x: 0, y: 0 }
};
function IroSlider(props) {
  var activeIndex = props.activeIndex;
  var activeColor = activeIndex !== void 0 && activeIndex < props.colors.length ? props.colors[activeIndex] : props.color;
  var ref = getSliderDimensions(props);
  var width2 = ref.width;
  var height2 = ref.height;
  var radius = ref.radius;
  var handlePos = getSliderHandlePosition(props, activeColor);
  var gradient = getSliderGradient(props, activeColor);
  function handleInput(x2, y2, type) {
    var value = getSliderValueFromInput(props, x2, y2);
    props.parent.inputActive = true;
    activeColor[props.sliderType] = value;
    props.onInput(type, props.id);
  }
  return h(IroComponentWrapper, Object.assign({}, props, { onInput: handleInput }), function(uid, rootProps, rootStyles) {
    return h(
      "div",
      Object.assign({}, rootProps, { className: "IroSlider", style: Object.assign(
        {},
        {
          position: "relative",
          width: cssValue(width2),
          height: cssValue(height2),
          borderRadius: cssValue(radius),
          // checkered bg to represent alpha
          background: "conic-gradient(#ccc 25%, #fff 0 50%, #ccc 0 75%, #fff 0)",
          backgroundSize: "8px 8px"
        },
        rootStyles
      ) }),
      h("div", { className: "IroSliderGradient", style: Object.assign(
        {},
        {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          borderRadius: cssValue(radius),
          background: cssGradient("linear", props.layoutDirection === "horizontal" ? "to top" : "to right", gradient)
        },
        cssBorderStyles(props)
      ) }),
      h(IroHandle, { isActive: true, index: activeColor.index, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePos.x, y: handlePos.y })
    );
  });
}
IroSlider.defaultProps = Object.assign({}, sliderDefaultOptions);
function IroBox(props) {
  var ref = getBoxDimensions(props);
  var width2 = ref.width;
  var height2 = ref.height;
  var radius = ref.radius;
  var colors2 = props.colors;
  var colorPicker = props.parent;
  var activeIndex = props.activeIndex;
  var activeColor = activeIndex !== void 0 && activeIndex < props.colors.length ? props.colors[activeIndex] : props.color;
  var gradients = getBoxGradients(props, activeColor);
  var handlePositions = colors2.map(function(color) {
    return getBoxHandlePosition(props, color);
  });
  function handleInput(x2, y2, inputType) {
    if (inputType === 0) {
      var activeHandle = getHandleAtPoint(props, x2, y2, handlePositions);
      if (activeHandle !== null) {
        colorPicker.setActiveColor(activeHandle);
      } else {
        colorPicker.inputActive = true;
        activeColor.hsv = getBoxValueFromInput(props, x2, y2);
        props.onInput(inputType, props.id);
      }
    } else if (inputType === 1) {
      colorPicker.inputActive = true;
      activeColor.hsv = getBoxValueFromInput(props, x2, y2);
    }
    props.onInput(inputType, props.id);
  }
  return h(IroComponentWrapper, Object.assign({}, props, { onInput: handleInput }), function(uid, rootProps, rootStyles) {
    return h(
      "div",
      Object.assign({}, rootProps, { className: "IroBox", style: Object.assign(
        {},
        {
          width: cssValue(width2),
          height: cssValue(height2),
          position: "relative"
        },
        rootStyles
      ) }),
      h("div", { className: "IroBox", style: Object.assign(
        {},
        {
          width: "100%",
          height: "100%",
          borderRadius: cssValue(radius)
        },
        cssBorderStyles(props),
        { background: cssGradient("linear", "to bottom", gradients[1]) + "," + cssGradient("linear", "to right", gradients[0]) }
      ) }),
      colors2.filter(function(color) {
        return color !== activeColor;
      }).map(function(color) {
        return h(IroHandle, { isActive: false, index: color.index, fill: color.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[color.index].x, y: handlePositions[color.index].y });
      }),
      h(IroHandle, { isActive: true, index: activeColor.index, fill: activeColor.hslString, r: props.activeHandleRadius || props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[activeColor.index].x, y: handlePositions[activeColor.index].y })
    );
  });
}
var HUE_GRADIENT_CLOCKWISE = "conic-gradient(red, yellow, lime, aqua, blue, magenta, red)";
var HUE_GRADIENT_ANTICLOCKWISE = "conic-gradient(red, magenta, blue, aqua, lime, yellow, red)";
function IroWheel(props) {
  var ref = getWheelDimensions(props);
  var width2 = ref.width;
  var colors2 = props.colors;
  props.borderWidth;
  var colorPicker = props.parent;
  var activeColor = props.color;
  var hsv = activeColor.hsv;
  var handlePositions = colors2.map(function(color) {
    return getWheelHandlePosition(props, color);
  });
  var circleStyles = {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    borderRadius: "50%",
    boxSizing: "border-box"
  };
  function handleInput(x2, y2, inputType) {
    if (inputType === 0) {
      if (!isInputInsideWheel(props, x2, y2)) {
        return false;
      }
      var activeHandle = getHandleAtPoint(props, x2, y2, handlePositions);
      if (activeHandle !== null) {
        colorPicker.setActiveColor(activeHandle);
      } else {
        colorPicker.inputActive = true;
        activeColor.hsv = getWheelValueFromInput(props, x2, y2);
        props.onInput(inputType, props.id);
      }
    } else if (inputType === 1) {
      colorPicker.inputActive = true;
      activeColor.hsv = getWheelValueFromInput(props, x2, y2);
    }
    props.onInput(inputType, props.id);
  }
  return h(IroComponentWrapper, Object.assign({}, props, { onInput: handleInput }), function(uid, rootProps, rootStyles) {
    return h(
      "div",
      Object.assign({}, rootProps, { className: "IroWheel", style: Object.assign(
        {},
        {
          width: cssValue(width2),
          height: cssValue(width2),
          position: "relative"
        },
        rootStyles
      ) }),
      h("div", { className: "IroWheelHue", style: Object.assign(
        {},
        circleStyles,
        {
          transform: "rotateZ(" + (props.wheelAngle + 90) + "deg)",
          background: props.wheelDirection === "clockwise" ? HUE_GRADIENT_CLOCKWISE : HUE_GRADIENT_ANTICLOCKWISE
        }
      ) }),
      h("div", { className: "IroWheelSaturation", style: Object.assign(
        {},
        circleStyles,
        { background: "radial-gradient(circle closest-side, #fff, transparent)" }
      ) }),
      props.wheelLightness && h("div", { className: "IroWheelLightness", style: Object.assign(
        {},
        circleStyles,
        {
          background: "#000",
          opacity: 1 - hsv.v / 100
        }
      ) }),
      h("div", { className: "IroWheelBorder", style: Object.assign(
        {},
        circleStyles,
        cssBorderStyles(props)
      ) }),
      colors2.filter(function(color) {
        return color !== activeColor;
      }).map(function(color) {
        return h(IroHandle, { isActive: false, index: color.index, fill: color.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[color.index].x, y: handlePositions[color.index].y });
      }),
      h(IroHandle, { isActive: true, index: activeColor.index, fill: activeColor.hslString, r: props.activeHandleRadius || props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[activeColor.index].x, y: handlePositions[activeColor.index].y })
    );
  });
}
function createWidget(WidgetComponent) {
  var widgetFactory = function(parent4, props) {
    var widget;
    var widgetRoot = document.createElement("div");
    I(h(WidgetComponent, Object.assign(
      {},
      { ref: function(ref) {
        return widget = ref;
      } },
      props
    )), widgetRoot);
    function mountWidget() {
      var container2 = parent4 instanceof Element ? parent4 : document.querySelector(parent4);
      container2.appendChild(widget.base);
      widget.onMount(container2);
    }
    if (document.readyState !== "loading") {
      mountWidget();
    } else {
      document.addEventListener("DOMContentLoaded", mountWidget);
    }
    return widget;
  };
  widgetFactory.prototype = WidgetComponent.prototype;
  Object.assign(widgetFactory, WidgetComponent);
  widgetFactory.__component = WidgetComponent;
  return widgetFactory;
}
var IroColorPicker = /* @__PURE__ */ function(Component) {
  function IroColorPicker2(props) {
    var this$1$1 = this;
    Component.call(this, props);
    this.colors = [];
    this.inputActive = false;
    this.events = {};
    this.activeEvents = {};
    this.deferredEvents = {};
    this.id = props.id;
    var colors2 = props.colors.length > 0 ? props.colors : [props.color];
    colors2.forEach(function(colorValue) {
      return this$1$1.addColor(colorValue);
    });
    this.setActiveColor(0);
    this.state = Object.assign(
      {},
      props,
      {
        color: this.color,
        colors: this.colors,
        layout: props.layout
      }
    );
  }
  if (Component)
    IroColorPicker2.__proto__ = Component;
  IroColorPicker2.prototype = Object.create(Component && Component.prototype);
  IroColorPicker2.prototype.constructor = IroColorPicker2;
  IroColorPicker2.prototype.addColor = function addColor(color, index) {
    if (index === void 0)
      index = this.colors.length;
    var newColor = new IroColor(color, this.onColorChange.bind(this));
    this.colors.splice(index, 0, newColor);
    this.colors.forEach(function(color2, index2) {
      return color2.index = index2;
    });
    if (this.state) {
      this.setState({ colors: this.colors });
    }
    this.deferredEmit("color:init", newColor);
  };
  IroColorPicker2.prototype.removeColor = function removeColor(index) {
    var color = this.colors.splice(index, 1)[0];
    color.unbind();
    this.colors.forEach(function(color2, index2) {
      return color2.index = index2;
    });
    if (this.state) {
      this.setState({ colors: this.colors });
    }
    if (color.index === this.color.index) {
      this.setActiveColor(0);
    }
    this.emit("color:remove", color);
  };
  IroColorPicker2.prototype.setActiveColor = function setActiveColor(index) {
    this.color = this.colors[index];
    if (this.state) {
      this.setState({ color: this.color });
    }
    this.emit("color:setActive", this.color);
  };
  IroColorPicker2.prototype.setColors = function setColors(newColorValues, activeColorIndex) {
    var this$1$1 = this;
    if (activeColorIndex === void 0)
      activeColorIndex = 0;
    this.colors.forEach(function(color) {
      return color.unbind();
    });
    this.colors = [];
    newColorValues.forEach(function(colorValue) {
      return this$1$1.addColor(colorValue);
    });
    this.setActiveColor(activeColorIndex);
    this.emit("color:setAll", this.colors);
  };
  IroColorPicker2.prototype.on = function on3(eventList, callback) {
    var this$1$1 = this;
    var events = this.events;
    (!Array.isArray(eventList) ? [eventList] : eventList).forEach(function(eventType) {
      (events[eventType] || (events[eventType] = [])).push(callback);
      if (this$1$1.deferredEvents[eventType]) {
        this$1$1.deferredEvents[eventType].forEach(function(args) {
          callback.apply(null, args);
        });
        this$1$1.deferredEvents[eventType] = [];
      }
    });
  };
  IroColorPicker2.prototype.off = function off(eventList, callback) {
    var this$1$1 = this;
    (!Array.isArray(eventList) ? [eventList] : eventList).forEach(function(eventType) {
      var callbackList = this$1$1.events[eventType];
      if (callbackList) {
        callbackList.splice(callbackList.indexOf(callback), 1);
      }
    });
  };
  IroColorPicker2.prototype.emit = function emit3(eventType) {
    var this$1$1 = this;
    var args = [], len = arguments.length - 1;
    while (len-- > 0)
      args[len] = arguments[len + 1];
    var activeEvents = this.activeEvents;
    var isEventActive = activeEvents.hasOwnProperty(eventType) ? activeEvents[eventType] : false;
    if (!isEventActive) {
      activeEvents[eventType] = true;
      var callbackList = this.events[eventType] || [];
      callbackList.forEach(function(fn3) {
        return fn3.apply(this$1$1, args);
      });
      activeEvents[eventType] = false;
    }
  };
  IroColorPicker2.prototype.deferredEmit = function deferredEmit(eventType) {
    var ref;
    var args = [], len = arguments.length - 1;
    while (len-- > 0)
      args[len] = arguments[len + 1];
    var deferredEvents = this.deferredEvents;
    (ref = this).emit.apply(ref, [eventType].concat(args));
    (deferredEvents[eventType] || (deferredEvents[eventType] = [])).push(args);
  };
  IroColorPicker2.prototype.setOptions = function setOptions6(newOptions) {
    this.setState(newOptions);
  };
  IroColorPicker2.prototype.resize = function resize3(width2) {
    this.setOptions({ width: width2 });
  };
  IroColorPicker2.prototype.reset = function reset2() {
    this.colors.forEach(function(color) {
      return color.reset();
    });
    this.setState({ colors: this.colors });
  };
  IroColorPicker2.prototype.onMount = function onMount2(container2) {
    this.el = container2;
    this.deferredEmit("mount", this);
  };
  IroColorPicker2.prototype.onColorChange = function onColorChange(color, changes) {
    this.setState({ color: this.color });
    if (this.inputActive) {
      this.inputActive = false;
      this.emit("input:change", color, changes);
    }
    this.emit("color:change", color, changes);
  };
  IroColorPicker2.prototype.emitInputEvent = function emitInputEvent(type, originId) {
    if (type === 0) {
      this.emit("input:start", this.color, originId);
    } else if (type === 1) {
      this.emit("input:move", this.color, originId);
    } else if (type === 2) {
      this.emit("input:end", this.color, originId);
    }
  };
  IroColorPicker2.prototype.render = function render(props, state) {
    var this$1$1 = this;
    var layout4 = state.layout;
    if (!Array.isArray(layout4)) {
      switch (layout4) {
        default:
          layout4 = [
            { component: IroWheel },
            { component: IroSlider }
          ];
      }
      if (state.transparency) {
        layout4.push({
          component: IroSlider,
          options: {
            sliderType: "alpha"
          }
        });
      }
    }
    return h("div", { class: "IroColorPicker", id: state.id, style: {
      display: state.display
    } }, layout4.map(function(ref, componentIndex) {
      var UiComponent = ref.component;
      var options2 = ref.options;
      return h(UiComponent, Object.assign({}, state, options2, { ref: void 0, onInput: this$1$1.emitInputEvent.bind(this$1$1), parent: this$1$1, index: componentIndex }));
    }));
  };
  return IroColorPicker2;
}(m);
IroColorPicker.defaultProps = Object.assign(
  {},
  iroColorPickerOptionDefaults,
  {
    colors: [],
    display: "block",
    id: null,
    layout: "default",
    margin: null
  }
);
var IroColorPickerWidget = createWidget(IroColorPicker);
var iro;
(function(iro2) {
  iro2.version = "5.5.2";
  iro2.Color = IroColor;
  iro2.ColorPicker = IroColorPickerWidget;
  (function(ui) {
    ui.h = h;
    ui.ComponentBase = IroComponentWrapper;
    ui.Handle = IroHandle;
    ui.Slider = IroSlider;
    ui.Wheel = IroWheel;
    ui.Box = IroBox;
  })(iro2.ui || (iro2.ui = {}));
})(iro || (iro = {}));
var iro$1 = iro;
function isValidName(str) {
  const rVarNameRegex = new RegExp("^[a-zA-Z\\._][a-zA-Z0-9\\._]*(?<!\\.)$");
  return rVarNameRegex.test(str);
}
function validLabel(str) {
  if (str == "") {
    bootbox.alert("Provide a label");
    return false;
  }
  if (!isValidName(str)) {
    bootbox.alert("Provide a valid label");
    return false;
  }
  return true;
}
function selectMenu(menu, isFull) {
  const valueToMatch = isFull ? "full" : "minimal";
  return menu.filter((obj) => obj.show === valueToMatch || obj.show === "both");
}
function instance$k($$self, $$props, $$invalidate) {
  let $appState;
  let $ur;
  let $modelOptions;
  component_subscribe($$self, appState, ($$value) => $$invalidate(1, $appState = $$value));
  component_subscribe($$self, ur, ($$value) => $$invalidate(2, $ur = $$value));
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(3, $modelOptions = $$value));
  let cy2 = get_store_value(cyStore);
  cytoscape$2.use(contextMenus);
  var colorPicker = new iro$1.ColorPicker(
    "#picker",
    {
      width: 200,
      color: "rgb(255, 0, 0)",
      borderWidth: 1,
      borderColor: "#fff"
    }
  );
  function getChange(target, check) {
    var toChange;
    const selectedElements = cy2.$(":selected");
    if (selectedElements.length > 1) {
      if (check === "nodes" && !selectedElements.every((ele) => ele.isNode())) {
        bootbox.alert("Not all selected elements are nodes. Aborting");
        return null;
      } else if (check === "edges" && !selectedElements.every((ele) => ele.isEdge())) {
        bootbox.alert("Not all selected elements are edges. Aborting");
        return null;
      } else if (check === "nodes.edges" && !selectedElements.every((ele) => ele.isEdge() || ele.isNode())) {
        bootbox.alert("Not all selected elements are nodes or edges. Aborting");
        return null;
      }
      toChange = selectedElements;
    } else {
      toChange = target;
    }
    return toChange;
  }
  const menu = [
    {
      id: "add-observed",
      content: "Add Observed Variable",
      coreAsWell: true,
      onClickFunction(event3) {
        const position3 = event3.renderedPosition;
        addNode(OBSERVED, position3);
      },
      show: "full"
    },
    {
      id: "add-latent",
      content: "Add Latent Variable",
      coreAsWell: true,
      onClickFunction(event3) {
        const position3 = event3.renderedPosition;
        addNode(LATENT, position3);
      },
      show: "full"
    },
    {
      id: "add-constant",
      content: "Add Constant Variable",
      coreAsWell: true,
      onClickFunction(event3) {
        const position3 = event3.renderedPosition;
        addNode(CONSTANT, position3);
      },
      show: "full"
    },
    //edge menus
    {
      id: "label-para",
      content: "Add/Change Label",
      selector: `edge.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        bootbox.prompt({
          title: "Enter a Label",
          value: edge.getLabel(),
          // initializing the text input with the current label
          callback(result) {
            if (!validLabel(result)) {
              return false;
            }
            if (result !== edge.getLabel() && result !== null) {
              edge.addLabel(result);
              tolavaan($modelOptions.mode);
            }
          }
        });
      },
      show: "full",
      hasTrailingDivider: false
    },
    {
      id: "label-remove",
      content: "Remove Label",
      selector: `edge.${LABEL}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.removeLabel();
        tolavaan($modelOptions.mode);
      },
      show: "both",
      hasTrailingDivider: false
    },
    {
      id: "remove-edge",
      content: "Delete Edge",
      selector: `edge.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.remove();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "fix-para",
      content: "Fix Parameter",
      selector: `edge.${FREE}.${FROM_USER}, edge.${FORCE_FREE}.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        bootbox.prompt({
          title: "Enter a Value",
          inputType: "number",
          callback(value) {
            if (value == "") {
              bootbox.alert("Provide a value");
              return false;
            }
            if (value !== null) {
              edge.fixPara(value);
              tolavaan($modelOptions.mode);
            }
          }
        });
      },
      show: "full",
      hasTrailingDivider: false
    },
    {
      id: "free-para",
      content: "Free Parameter",
      selector: `edge.${FIXED}.${FROM_USER}, edge.${FORCE_FREE}.${FROM_USER}`,
      onClickFunction(event3) {
        var edge = event3.target || event3.cyTarget;
        edge.freePara();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: false
    },
    {
      id: "free-force-para",
      content: "Force Parameter Free",
      selector: `edge.${FREE}.${FROM_USER}, edge.${FIXED}.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.forceFreePara();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "revert-arrow",
      content: "Revert Direction",
      selector: `edge[isMean="0"].${DIRECTED}.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.revert();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: false
    },
    {
      id: "set-undirected",
      content: "Set Undirected",
      selector: `edge[isMean="0"].${DIRECTED}.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.setUndirected();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "set-arrow",
      content: "Set Directed",
      selector: `edge.${UNDIRECTED}.${FROM_USER}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.setDirected();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "free-orientation",
      content: "Free Loop Orientation",
      selector: `edge.${LOOP}.fixDeg`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.removeClass("fixDeg");
        checkNodeLoop(edge.source().id());
      },
      show: "both",
      hasTrailingDivider: true
    },
    {
      id: "change-fromUser",
      content: "Include in User Model",
      selector: `edge.${FROM_LAV}`,
      onClickFunction(event3) {
        const edge = event3.target || event3.cyTarget;
        edge.markAddedUser();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "color-edge",
      content: "Change Edge Color",
      selector: "edge",
      show: "both",
      onClickFunction(event3) {
        var target = event3.target || event3.cyTarget;
        const toChange = getChange(target, "edges");
        if (toChange === null) {
          return null;
        }
        openColorPicker(target, toChange, "edge");
      }
    },
    {
      id: "change-line-width",
      content: "Change Line Width",
      show: "both",
      // Apply to both edges and nodes
      selector: "edge",
      onClickFunction(event3) {
        var target = event3.target || event3.cyTarget;
        const toChange = getChange(target, "edges");
        if (null === toChange) {
          return null;
        }
        bootbox.prompt({
          title: "Enter New Line Width:",
          value: target.style("width"),
          callback(newWidth) {
            if (newWidth !== null) {
              $ur.do("style", {
                eles: toChange,
                style: { width: newWidth }
              });
            }
          }
        });
      }
    },
    //node menus
    {
      id: "rename-node",
      show: "full",
      content: "Rename Variable",
      selector: `node.${LATENT}, node.${OBSERVED}`,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        const columnNames = $appState.columnNames;
        let dropdownOptions;
        if ($appState.dataAvail) {
          dropdownOptions = columnNames.map((name2) => `<option value="${name2}">${name2}</option>`).join("");
        }
        const dropdownHTML = $appState.dataAvail && node.isObserved() ? `
      <label>Or Select From Variables in Your Data:</label>
      <select class="form-control" id="label-dropdown">
        <option value="">--Select--</option>
        ${dropdownOptions}
      </select>
    ` : "";
        bootbox.dialog({
          title: "Rename Variable",
          message: `
      <div>
        <label>Enter a label:</label>
        <input type="text" class="form-control" id="new-label" value=${node.getLabel()}>
        ${dropdownHTML}
      </div>
    `,
          buttons: {
            cancel: {
              label: "Cancel",
              className: "btn-default"
            },
            confirm: {
              label: "Rename",
              className: "btn-primary",
              callback() {
                let inputLabel = document.getElementById("new-label").value;
                const selectedLabel = $appState.dataAvail && node.isObserved() ? document.getElementById("label-dropdown").value : "";
                let result;
                if (inputLabel == node.getLabel()) {
                  result = selectedLabel;
                } else {
                  result = inputLabel;
                }
                if (!validLabel(result)) {
                  return false;
                }
                if (result) {
                  node.setLabel(result);
                  if (columnNames && columnNames.includes(node.getLabel())) {
                    node.link();
                    setAlert("success", `Variable ${node.data("label")} linked to data`);
                  } else if (node.isLinked()) {
                    node.unlink();
                    setAlert("info", `Variable ${node.getLabel()} unlinked`);
                  }
                  tolavaan($modelOptions.mode);
                }
              }
            }
          },
          onShown(e2) {
            document.getElementById("new-label").addEventListener("keypress", function(event4) {
              if (event4.key === "Enter") {
                event4.preventDefault();
                const confirmButton = e2.target.querySelector(".btn-primary");
                confirmButton.click();
              }
            });
          }
        });
      }
    },
    {
      id: "remove-node",
      content: "Delete Variable",
      selector: `node.${LATENT}, node.${OBSERVED}, node.${CONSTANT}`,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        node.remove();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "change-latent",
      content: "Change to Latent",
      selector: `node.${OBSERVED}`,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        node.makeLatent();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: false
    },
    {
      id: "change-ordered",
      content: "Change to Ordered",
      selector: `node.${OBSERVED}.${CONTINOUS}`,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        node.makeOrdered();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "change-continous",
      content: "Change to Continous",
      selector: `node.${OBSERVED}.${ORDERED}`,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        node.makeContinous();
        tolavaan($modelOptions.mode);
      },
      show: "full",
      hasTrailingDivider: true
    },
    {
      id: "change-observed",
      show: "full",
      content: "Change to Observed",
      selector: `node.${LATENT}`,
      hasTrailingDivider: true,
      onClickFunction(event3) {
        const node = event3.target || event3.cyTarget;
        node.makeObserved();
        let columnNames = $appState.columnNames;
        if (columnNames && columnNames.includes(node.getLabel())) {
          node.link();
          bootbox.alert("Variable linked with data set");
        }
        tolavaan($modelOptions.mode);
      }
    },
    {
      id: "color-node",
      content: "Change Background Color",
      selector: "node",
      show: "both",
      onClickFunction(event3) {
        var target = event3.target || event3.cyTarget;
        const toChange = getChange(target, "nodes");
        if (toChange === null) {
          return null;
        }
        openColorPicker(target, toChange, "nodes");
      }
    },
    {
      id: "change-border-width",
      content: "Change Border Width",
      show: "both",
      selector: `node.${LATENT}, node.${OBSERVED}, node.${CONSTANT}`,
      onClickFunction(event3) {
        var target = event3.target || event3.cyTarget;
        const toChange = getChange(target, "nodes");
        if (toChange === null) {
          return null;
        }
        bootbox.prompt({
          title: "Enter New Border Width:",
          value: target.style("border-width"),
          callback(newWidth) {
            if (newWidth !== null) {
              $ur.do("style", {
                eles: toChange,
                style: { "border-width": newWidth }
              });
            }
          }
        });
      }
    },
    {
      id: "change-font-size",
      content: "Change Font Size",
      show: "both",
      hasTrailingDivider: true,
      selector: `node.${LATENT}, node.${OBSERVED}, node.${CONSTANT}, edge`,
      onClickFunction(event3) {
        var target = event3.target || event3.cyTarget;
        const toChange = getChange(target, "nodes.edges");
        if (toChange === null) {
          return null;
        }
        bootbox.prompt({
          title: "Enter New Font Size:",
          value: target.style("font-size"),
          callback(newFontSize) {
            if (newFontSize !== null) {
              $ur.do("style", {
                eles: toChange,
                style: { "font-size": newFontSize }
              });
            }
          }
        });
      }
    }
  ];
  let toChangeGlobal;
  function openColorPicker(target, toChange, type) {
    var pickerElement = document.getElementById("picker");
    pickerElement.style.display = "block";
    pickerElement.style.left = event.pageX + "px";
    pickerElement.style.top = event.pageY + "px";
    let hexColor;
    toChangeGlobal = toChange;
    const changeColor = function(color) {
      hexColor = color.hexString;
    };
    colorPicker.on("color:change", changeColor);
    const closePicker = function(event3) {
      if (!pickerElement.contains(event3.target)) {
        if (type == "edge") {
          $ur.do("style", {
            eles: toChangeGlobal,
            style: {
              "line-color": hexColor,
              "target-arrow-color": hexColor,
              "source-arrow-color": hexColor
            }
          });
        } else {
          $ur.do("style", {
            eles: toChangeGlobal,
            style: { "background-color": hexColor }
          });
        }
        pickerElement.style.display = "none";
        colorPicker.off("color:change", changeColor);
        document.removeEventListener("click", closePicker);
        document.removeEventListener("keydown", closePickerEnter);
      }
    };
    setTimeout(() => document.addEventListener("click", closePicker), 0);
    const closePickerEnter = function(event3) {
      if (event3.key === "Enter") {
        closePicker(event3);
      }
    };
    document.addEventListener("keydown", closePickerEnter);
  }
  const menuSel = selectMenu(menu, $appState.full);
  onMount(() => {
    cy2.contextMenus({ menuItems: menuSel });
  });
  return [];
}
class ContextMenus extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$k, null, safe_not_equal, {});
  }
}
const DataInput_svelte_svelte_type_style_lang = "";
function create_fragment$7(ctx) {
  let div3;
  return {
    c() {
      div3 = element$1("div");
      div3.innerHTML = `<label class="control-label shiny-label-null" for="fileInput" id="fileInput-label"></label> 
  <div class="input-group svelte-1qxcvef"><label class="input-group-btn input-group-prepend"><span class="btn btn-default btn-file">Browse...
        <input id="dataUpload-fileInput" name="fileInput" type="file" style="position: absolute !important; top: -99999px !important; left: -99999px !important;" accept=".csv,.sav, .xlsx, .rds"/></span></label> 
    <input type="text" class="form-control" placeholder="No file selected" readonly="readonly"/></div> 
  <div id="fileInput_progress" class="progress active shiny-file-input-progress svelte-1qxcvef"><div class="progress-bar svelte-1qxcvef"></div></div>`;
      attr(div3, "class", "form-group shiny-input-container svelte-1qxcvef");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
    },
    p: noop$2,
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(div3);
    }
  };
}
class DataInput extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, null, create_fragment$7, safe_not_equal, {});
  }
}
const ToolbarBelow_svelte_svelte_type_style_lang = "";
function create_fragment$6(ctx) {
  let div1;
  let button0;
  let t0;
  let button0_disabled_value;
  let t1;
  let div0;
  let button1;
  let t22;
  let button1_class_value;
  let t3;
  let button2;
  let t4;
  let button2_class_value;
  let t5;
  let button3;
  let t6;
  let button3_class_value;
  let button3_disabled_value;
  let t7;
  let button4;
  let t8;
  let button4_disabled_value;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element$1("div");
      button0 = element$1("button");
      t0 = text("Show Data");
      t1 = space();
      div0 = element$1("div");
      button1 = element$1("button");
      t22 = text("User Model");
      t3 = space();
      button2 = element$1("button");
      t4 = text("Autocompleted Model");
      t5 = space();
      button3 = element$1("button");
      t6 = text("Estimates");
      t7 = space();
      button4 = element$1("button");
      t8 = text("More Results");
      attr(button0, "class", "btn btn-lg btn-default");
      button0.disabled = button0_disabled_value = !/*$appState*/
      ctx[2].dataAvail;
      attr(button1, "class", button1_class_value = "btn btn-lg " + /*selected*/
      (ctx[1] === "user model" ? "btn-primary active" : "btn-default"));
      attr(button2, "class", button2_class_value = "btn btn-lg " + /*selected*/
      (ctx[1] === "full model" ? "btn-primary active" : "btn-default"));
      attr(button3, "class", button3_class_value = "btn btn-lg " + /*selected*/
      (ctx[1] === "estimate" ? "btn-primary active" : "btn-default"));
      button3.disabled = button3_disabled_value = !/*$appState*/
      ctx[2].dataAvail || /*$appState*/
      ctx[2].modelEmpty;
      attr(div0, "class", "btn-group btn-toggle svelte-xny576");
      attr(button4, "class", "btn btn-lg btn-default");
      button4.disabled = button4_disabled_value = /*$modelOptions*/
      ctx[0].mode != "estimate";
      attr(div1, "class", "toolbox navbar-static-bottom svelte-xny576");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, button0);
      append(button0, t0);
      append(div1, t1);
      append(div1, div0);
      append(div0, button1);
      append(button1, t22);
      append(div0, t3);
      append(div0, button2);
      append(button2, t4);
      append(div0, t5);
      append(div0, button3);
      append(button3, t6);
      append(div1, t7);
      append(div1, button4);
      append(button4, t8);
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[6]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[7]
          ),
          listen(
            button2,
            "click",
            /*click_handler_2*/
            ctx[8]
          ),
          listen(
            button3,
            "click",
            /*click_handler_3*/
            ctx[9]
          ),
          listen(
            button4,
            "click",
            /*click_handler_4*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$appState*/
      4 && button0_disabled_value !== (button0_disabled_value = !/*$appState*/
      ctx2[2].dataAvail)) {
        button0.disabled = button0_disabled_value;
      }
      if (dirty & /*selected*/
      2 && button1_class_value !== (button1_class_value = "btn btn-lg " + /*selected*/
      (ctx2[1] === "user model" ? "btn-primary active" : "btn-default"))) {
        attr(button1, "class", button1_class_value);
      }
      if (dirty & /*selected*/
      2 && button2_class_value !== (button2_class_value = "btn btn-lg " + /*selected*/
      (ctx2[1] === "full model" ? "btn-primary active" : "btn-default"))) {
        attr(button2, "class", button2_class_value);
      }
      if (dirty & /*selected*/
      2 && button3_class_value !== (button3_class_value = "btn btn-lg " + /*selected*/
      (ctx2[1] === "estimate" ? "btn-primary active" : "btn-default"))) {
        attr(button3, "class", button3_class_value);
      }
      if (dirty & /*$appState*/
      4 && button3_disabled_value !== (button3_disabled_value = !/*$appState*/
      ctx2[2].dataAvail || /*$appState*/
      ctx2[2].modelEmpty)) {
        button3.disabled = button3_disabled_value;
      }
      if (dirty & /*$modelOptions*/
      1 && button4_disabled_value !== (button4_disabled_value = /*$modelOptions*/
      ctx2[0].mode != "estimate")) {
        button4.disabled = button4_disabled_value;
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function showData() {
  window.$("#data-modal-2").modal();
}
function instance$j($$self, $$props, $$invalidate) {
  let $modelOptions;
  let $appState;
  let $gridViewOptions;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(0, $modelOptions = $$value));
  component_subscribe($$self, appState, ($$value) => $$invalidate(2, $appState = $$value));
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(11, $gridViewOptions = $$value));
  let selected;
  function changeMode(newMode) {
    $$invalidate(1, selected = newMode);
    if (newMode !== "user model") {
      set_store_value(gridViewOptions, $gridViewOptions.showLav = true, $gridViewOptions);
    } else {
      set_store_value(gridViewOptions, $gridViewOptions.showLav = false, $gridViewOptions);
    }
    set_store_value(modelOptions, $modelOptions.mode = newMode, $modelOptions);
  }
  window.$("#data-modal-extend-results").on("hidden.bs.modal", function() {
    set_store_value(appState, $appState.showServerErrors = true, $appState);
  });
  function showResults() {
    window.$("#data-modal-extend-results").modal();
    set_store_value(appState, $appState.showServerErrors = false, $appState);
  }
  let ready4 = false;
  onMount(() => {
    $$invalidate(5, ready4 = true);
  });
  const click_handler = () => showData();
  const click_handler_1 = () => changeMode("user model");
  const click_handler_2 = () => changeMode("full model");
  const click_handler_3 = () => changeMode("estimate");
  const click_handler_4 = () => showResults();
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*ready, $modelOptions*/
    33) {
      if (ready4)
        $$invalidate(1, selected = $modelOptions.mode);
    }
  };
  return [
    $modelOptions,
    selected,
    $appState,
    changeMode,
    showResults,
    ready4,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4
  ];
}
class ToolbarBelow extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$j, create_fragment$6, safe_not_equal, {});
  }
}
function serverAvail$2() {
  return typeof Shiny === "object" && Shiny !== null;
}
function getConstNodePosition(cy2) {
  let totalX = 0;
  let maxX = Number.NEGATIVE_INFINITY;
  let maxY = Number.NEGATIVE_INFINITY;
  let nodeCount = cy2.nodes().length;
  cy2.nodes().forEach((node) => {
    let position3 = node.position();
    totalX += position3.x;
    if (position3.x > maxX) {
      maxX = position3.x;
    }
    if (position3.y > maxY) {
      maxY = position3.y;
    }
  });
  let middleX = totalX / nodeCount;
  let newY = maxY + 100;
  return { x: middleX, y: newY };
}
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
function instance$i($$self, $$props, $$invalidate) {
  let $modelOptions;
  let $appState;
  let $fitCache;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(0, $modelOptions = $$value));
  component_subscribe($$self, appState, ($$value) => $$invalidate(1, $appState = $$value));
  component_subscribe($$self, fitCache, ($$value) => $$invalidate(2, $fitCache = $$value));
  function getEdge(lhs, op, rhs) {
    let directed;
    let source;
    let target;
    if (op === "=~") {
      directed = DIRECTED;
      source = lhs;
      target = rhs;
    } else if (op == "~1") {
      source = 1;
      target = lhs;
      directed = DIRECTED;
    } else {
      target = lhs;
      source = rhs;
      if (op === "~~") {
        if (lhs === rhs) {
          directed = LOOP;
        } else {
          directed = UNDIRECTED;
        }
      } else if (op === "~" || "<~") {
        directed = DIRECTED;
      }
    }
    return { directed, source, target };
  }
  function findEdge(lhs, op, rhs, user) {
    let goal_edge = getEdge(lhs, op, rhs);
    goal_edge.user = user;
    let cy2 = get_store_value(cyStore);
    const correct_edge = cy2.edges(function(edge) {
      let res;
      if (goal_edge.source != 1) {
        res = edge.source().getLabel() == goal_edge.source && edge.target().getLabel() == goal_edge.target;
        if (goal_edge.directed == UNDIRECTED) {
          res = res || edge.source().getLabel() == goal_edge.target && edge.target().getLabel() == goal_edge.source;
        }
      } else {
        res = edge.source().isConstant() && edge.target().getLabel() == goal_edge.target;
      }
      if (goal_edge.user != void 0) {
        if (goal_edge.user == 1) {
          res = res && edge.isUserAdded();
        } else if (goal_edge.user == 0) {
          res = res && edge.isLavaanAdded();
        } else {
          throw new Error("User was neither 0 nor 1");
        }
      }
      return res;
    });
    if (correct_edge.length > 1) {
      throw new Error("Multiple edges found");
    }
    return correct_edge;
  }
  function getModelLav(lav_model, imported) {
    set_store_value(appState, $appState.meansModelled = false, $appState);
    set_store_value(appState, $appState.loadingMode = true, $appState);
    let cy2 = get_store_value(cyStore);
    if (!imported) {
      cy2.edges().invalidate();
    } else {
      let importNode = function(type, label, position4) {
        addNode(type, position4, false, label);
      };
      const observed = Array.isArray(lav_model.obs) ? lav_model.obs : [lav_model.obs];
      let position3 = { x: 200, y: 200 };
      for (let i2 = 0; i2 < observed.length; i2++) {
        position3.x = position3.x + 50;
        importNode(OBSERVED, observed[i2], position3);
      }
      const latent = Array.isArray(lav_model.latent) ? lav_model.latent : [lav_model.latent];
      position3 = { x: 200, y: 100 };
      for (let i2 = 0; i2 < latent.length; i2++) {
        position3.x = position3.x + 50;
        importNode(LATENT, latent[i2]);
      }
      lav_model = lav_model.parTable;
    }
    const orderedVariables = /* @__PURE__ */ new Set();
    for (let i2 = 0; i2 < lav_model.lhs.length; i2++) {
      if (lav_model.op[i2] === "|") {
        orderedVariables.add(lav_model.lhs[i2]);
      }
    }
    let const_added = false;
    let added_const_id;
    for (let i2 = 0; i2 < lav_model.lhs.length; i2++) {
      if (lav_model.op[i2] == "~*~" || lav_model.op[i2] == "|") {
        continue;
      }
      let existingEdge = findEdge(lav_model.lhs[i2], lav_model.op[i2], lav_model.rhs[i2], lav_model.user[i2]);
      if (!imported && lav_model.user[i2] == 1) {
        assert(existingEdge.length == 1);
        existingEdge.validate();
        if (existingEdge.isModifiedLavaan() && existingEdge.isFixed()) {
          existingEdge.revertLavaanFix();
        }
        if (lav_model.free[i2] == 0 && !existingEdge.isFixed()) {
          existingEdge.fixPara(lav_model.ustart[i2]).markModifiedLavaan();
        }
      } else {
        let edge;
        if (imported || existingEdge.length == 0) {
          const desiredEdge = getEdge(lav_model.lhs[i2], lav_model.op[i2], lav_model.rhs[i2]);
          if (imported && $appState.full && lav_model.user[i2] == 0) {
            continue;
          }
          let sourceId;
          if (desiredEdge.source !== 1) {
            sourceId = cy2.nodes(function(node) {
              return node.getLabel() == desiredEdge.source;
            })[0].id();
          } else {
            set_store_value(appState, $appState.meansModelled = true, $appState);
            if (lav_model.free[i2] == 0 && lav_model.ustart[i2] == 0) {
              continue;
            }
            if (!const_added) {
              added_const_id = addNode(CONSTANT, getConstNodePosition(cy2), false);
              const_added = true;
              const added_node = cy2.nodes(function(node) {
                return node.id() == added_const_id;
              })[0];
              added_node.markAddedLavaan();
            }
            sourceId = added_const_id;
          }
          const targetId = cy2.nodes(function(node) {
            return node.getLabel() == desiredEdge.target;
          })[0].id();
          edge = cy2.add({
            groups: "edges",
            data: { source: sourceId, target: targetId },
            classes: desiredEdge.directed + " nolabel"
          });
          if (lav_model.label[i2] != "") {
            edge.addLabelImport(lav_model.label[i2]);
          }
          if (lav_model.user[i2] == 1) {
            edge.markAddedUser();
          } else {
            edge.markAddedLavaan();
          }
          checkNodeLoop(sourceId);
          checkNodeLoop(targetId);
        } else if (!imported && existingEdge.length == 1) {
          edge = existingEdge;
        }
        if (lav_model.free[i2] == 0) {
          if (lav_model.ustart[i2] !== 0 && lav_model.exo[i2] !== 1) {
            if (orderedVariables.has(edge.target().getLabel()) && lav_model.op[i2] == "~~") {
              edge.fixPara("Total Variance 1");
            } else {
              edge.fixPara(lav_model.ustart[i2]);
            }
          } else {
            edge.remove();
          }
        } else {
          edge.setFree();
        }
        if (!imported) {
          edge.validate();
        }
      }
    }
    if (!imported) {
      cy2.edges().forEach((edge) => {
        if (!edge.isValid()) {
          edge.remove();
        }
      });
      cy2.getLavaanNodes().forEach((node) => {
        if (node.connectedEdges().length == 0) {
          node.remove();
          cy2.nodes().forEach((node2) => {
            checkNodeLoop(node2.id());
          });
        }
      });
    } else {
      applySemLayout("tree", false);
      cy2.fit();
    }
    if (!$appState.parsedModel) {
      set_store_value(appState, $appState.parsedModel = true, $appState);
    }
    if (cy2.getUserEdges().length > 0) {
      set_store_value(appState, $appState.modelEmpty = false, $appState);
    }
    set_store_value(appState, $appState.loadingMode = false, $appState);
  }
  function updateEstimates(lav_result, std_result) {
    get_store_value(cyStore);
    const ordered = lav_result.op.some((op) => op.includes("~~"));
    for (let i2 = 0; i2 < lav_result.lhs.length; i2++) {
      if (lav_result.op[i2] == "~*~" || lav_result.op[i2] == "|") {
        continue;
      }
      let existingEdge = findEdge(lav_result.lhs[i2], lav_result.op[i2], lav_result.rhs[i2]);
      if (existingEdge.length > 0) {
        let allEstimates = {};
        if (existingEdge.isFree()) {
          allEstimates.est = lav_result.est[i2];
          allEstimates.p_value = lav_result.pvalue[i2];
          allEstimates.se = lav_result.se[i2];
          allEstimates.ciLow = lav_result["ci.lower"][i2];
          allEstimates.ciHigh = lav_result["ci.upper"][i2];
          allEstimates.est_std = std_result["est.std"][i2];
          allEstimates.se_std = std_result.se[i2];
          allEstimates.ciLow_std = std_result["ci.lower"][i2];
          allEstimates.ciHigh_std = std_result["ci.upper"][i2];
          existingEdge.addClass("hasEst");
        } else if (ordered && lav_result.op[i2] == "~~") {
          allEstimates.estFixed = lav_result.est[i2];
          {
            allEstimates.estFixed_std = std_result["est.std"][i2];
            existingEdge.addClass("hasEstFixed");
          }
        }
        existingEdge.data("estimates", allEstimates);
      }
    }
  }
  if (serverAvail$2()) {
    Shiny.addCustomMessageHandler("dataInfo", function(data_info) {
      applyLinkedClass(data_info.columns);
      set_store_value(appState, $appState.columnNames = [...data_info.columns], $appState);
      set_store_value(appState, $appState.ids = [...data_info.columns], $appState);
      set_store_value(appState, $appState.loadedFileName = data_info.name, $appState);
      set_store_value(appState, $appState.dataAvail = true, $appState);
      tolavaan($modelOptions.mode);
      if (data_info.showData) {
        window.$("#data-modal-2").modal();
      }
    });
    Shiny.addCustomMessageHandler("lav_failed", function(failCode) {
      set_store_value(appState, $appState.fitting = false, $appState);
      if (failCode == "stopped") {
        setAlert("danger", "Fitting stopped by user");
      } else {
        setAlert("danger", "Fitting failed");
      }
    });
    Shiny.addCustomMessageHandler("fitting", function(ignored) {
      set_store_value(appState, $appState.fitting = true, $appState);
    });
    Shiny.addCustomMessageHandler("lav_warning_error", function(info) {
      const what = info.type == "warning" ? "warning" : "error";
      setAlert(info.type, `During ${info.origin} the following ${what} occurred: ${info.message}`);
    });
    Shiny.addCustomMessageHandler("lav_error_fitting", function(info) {
      set_store_value(appState, $appState.fitting = false, $appState);
      setAlert(info.type, "During " + info.origin + " the following error occurred: " + info.message);
    });
    Shiny.addCustomMessageHandler("usecache", function(dummy) {
      setAlert("info", "Reusing cached results because model and data did not change since last fit");
    });
    Shiny.addCustomMessageHandler("data_missing", function(dummy) {
      setAlert("danger", "Could not fit model because no data is available");
    });
    Shiny.addCustomMessageHandler("columnames", function(cnames) {
      const cy2 = get_store_value(cyStore);
      const oldName = $appState.columnNames[cnames.index];
      set_store_value(appState, $appState.columnNames[cnames.index] = cnames.newcolname, $appState);
      cy2.getObservedNodes().forEach((node) => {
        if (node.getLabel() == oldName) {
          node.setLabel(cnames.newcolname);
          tolavaan($modelOptions.mode);
        }
      });
      applyLinkedClass($appState.columnNames);
    });
    Shiny.addCustomMessageHandler("missing_vars", function(missingVars) {
      var missingVarsStr = [].concat(missingVars).join(", ");
      setAlert("danger", "Could not fit model because " + missingVarsStr + " are observed variables in the model but not present in the data.");
    });
    Shiny.addCustomMessageHandler("lav_model", function(lav_model) {
      getModelLav(lav_model, false);
    });
    Shiny.addCustomMessageHandler("imported_model", function(lav_model) {
      getModelLav(lav_model, true);
      let cy2 = get_store_value(cyStore);
      if (!Array.isArray(lav_model.ordered)) {
        lav_model.ordered = [lav_model.ordered];
      }
      lav_model.ordered.forEach((label) => {
        cy2.nodes(function(node) {
          return node.getLabel() == label;
        })[0].makeOrdered();
      });
      set_store_value(modelOptions, $modelOptions.fix_first = false, $modelOptions);
      setAlert("warning", "start_gui only imports user edges. Your full model is very likely different than what you fitted in lavaan because of different options used. To display the model, as you fitted it in lavaan, use plot_interactive");
    });
    Shiny.addCustomMessageHandler("lav_results", function(all_res) {
      set_store_value(appState, $appState.loadingMode = true, $appState);
      set_store_value(fitCache, $fitCache.lastFitLavFit = all_res.fitted_model, $fitCache);
      set_store_value(fitCache, $fitCache.lastFitModel = all_res.model, $fitCache);
      set_store_value(fitCache, $fitCache.lastFitData = all_res.data, $fitCache);
      set_store_value(appState, $appState.fitting = false, $appState);
      set_store_value(appState, $appState.loadingMode = false, $appState);
    });
    Shiny.addCustomMessageHandler("lav_estimates", function(all_res) {
      const lav_result = all_res.normal;
      const std_result = all_res.std;
      updateEstimates(lav_result, std_result);
    });
    Shiny.addCustomMessageHandler("setToEstimate", function(lav_model) {
      set_store_value(modelOptions, $modelOptions.mode = "estimate", $modelOptions);
    });
  }
  return [];
}
class FromR extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$i, null, safe_not_equal, {});
  }
}
var cytoscapePanzoom = { exports: {} };
var jquery = { exports: {} };
/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */
var hasRequiredJquery;
function requireJquery() {
  if (hasRequiredJquery)
    return jquery.exports;
  hasRequiredJquery = 1;
  (function(module) {
    (function(global2, factory) {
      {
        module.exports = global2.document ? factory(global2, true) : function(w2) {
          if (!w2.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w2);
        };
      }
    })(typeof window !== "undefined" ? window : commonjsGlobal, function(window2, noGlobal) {
      var arr = [];
      var getProto = Object.getPrototypeOf;
      var slice2 = arr.slice;
      var flat = arr.flat ? function(array3) {
        return arr.flat.call(array3);
      } : function(array3) {
        return arr.concat.apply([], array3);
      };
      var push3 = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString3 = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      var isFunction2 = function isFunction3(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };
      var isWindow = function isWindow2(obj) {
        return obj != null && obj === obj.window;
      };
      var document2 = window2.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };
      function DOMEval(code, node, doc) {
        doc = doc || document2;
        var i2, val, script = doc.createElement("script");
        script.text = code;
        if (node) {
          for (i2 in preservedScriptAttributes) {
            val = node[i2] || node.getAttribute && node.getAttribute(i2);
            if (val) {
              script.setAttribute(i2, val);
            }
          }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
      }
      function toType(obj) {
        if (obj == null) {
          return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString3.call(obj)] || "object" : typeof obj;
      }
      var version2 = "3.7.0", rhtmlSuffix = /HTML$/i, jQuery2 = function(selector, context) {
        return new jQuery2.fn.init(selector, context);
      };
      jQuery2.fn = jQuery2.prototype = {
        // The current version of jQuery being used
        jquery: version2,
        constructor: jQuery2,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function() {
          return slice2.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
          if (num == null) {
            return slice2.call(this);
          }
          return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {
          var ret = jQuery2.merge(this.constructor(), elems);
          ret.prevObject = this;
          return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function(callback) {
          return jQuery2.each(this, callback);
        },
        map: function(callback) {
          return this.pushStack(jQuery2.map(this, function(elem, i2) {
            return callback.call(elem, i2, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice2.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        even: function() {
          return this.pushStack(jQuery2.grep(this, function(_elem, i2) {
            return (i2 + 1) % 2;
          }));
        },
        odd: function() {
          return this.pushStack(jQuery2.grep(this, function(_elem, i2) {
            return i2 % 2;
          }));
        },
        eq: function(i2) {
          var len = this.length, j2 = +i2 + (i2 < 0 ? len : 0);
          return this.pushStack(j2 >= 0 && j2 < len ? [this[j2]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push3,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery2.extend = jQuery2.fn.extend = function() {
        var options2, name2, src2, copy3, copyIsArray, clone3, target = arguments[0] || {}, i2 = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i2] || {};
          i2++;
        }
        if (typeof target !== "object" && !isFunction2(target)) {
          target = {};
        }
        if (i2 === length) {
          target = this;
          i2--;
        }
        for (; i2 < length; i2++) {
          if ((options2 = arguments[i2]) != null) {
            for (name2 in options2) {
              copy3 = options2[name2];
              if (name2 === "__proto__" || target === copy3) {
                continue;
              }
              if (deep && copy3 && (jQuery2.isPlainObject(copy3) || (copyIsArray = Array.isArray(copy3)))) {
                src2 = target[name2];
                if (copyIsArray && !Array.isArray(src2)) {
                  clone3 = [];
                } else if (!copyIsArray && !jQuery2.isPlainObject(src2)) {
                  clone3 = {};
                } else {
                  clone3 = src2;
                }
                copyIsArray = false;
                target[name2] = jQuery2.extend(deep, clone3, copy3);
              } else if (copy3 !== void 0) {
                target[name2] = copy3;
              }
            }
          }
        }
        return target;
      };
      jQuery2.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version2 + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
          var proto, Ctor;
          if (!obj || toString3.call(obj) !== "[object Object]") {
            return false;
          }
          proto = getProto(obj);
          if (!proto) {
            return true;
          }
          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
          var name2;
          for (name2 in obj) {
            return false;
          }
          return true;
        },
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function(code, options2, doc) {
          DOMEval(code, { nonce: options2 && options2.nonce }, doc);
        },
        each: function(obj, callback) {
          var length, i2 = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i2 < length; i2++) {
              if (callback.call(obj[i2], i2, obj[i2]) === false) {
                break;
              }
            }
          } else {
            for (i2 in obj) {
              if (callback.call(obj[i2], i2, obj[i2]) === false) {
                break;
              }
            }
          }
          return obj;
        },
        // Retrieve the text value of an array of DOM nodes
        text: function(elem) {
          var node, ret = "", i2 = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            while (node = elem[i2++]) {
              ret += jQuery2.text(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            return elem.textContent;
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        },
        // results is for internal usage only
        makeArray: function(arr2, results) {
          var ret = results || [];
          if (arr2 != null) {
            if (isArrayLike(Object(arr2))) {
              jQuery2.merge(
                ret,
                typeof arr2 === "string" ? [arr2] : arr2
              );
            } else {
              push3.call(ret, arr2);
            }
          }
          return ret;
        },
        inArray: function(elem, arr2, i2) {
          return arr2 == null ? -1 : indexOf.call(arr2, elem, i2);
        },
        isXMLDoc: function(elem) {
          var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
          return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function(first2, second) {
          var len = +second.length, j2 = 0, i2 = first2.length;
          for (; j2 < len; j2++) {
            first2[i2++] = second[j2];
          }
          first2.length = i2;
          return first2;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse, matches33 = [], i2 = 0, length = elems.length, callbackExpect = !invert;
          for (; i2 < length; i2++) {
            callbackInverse = !callback(elems[i2], i2);
            if (callbackInverse !== callbackExpect) {
              matches33.push(elems[i2]);
            }
          }
          return matches33;
        },
        // arg is for internal usage only
        map: function(elems, callback, arg) {
          var length, value, i2 = 0, ret = [];
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i2 < length; i2++) {
              value = callback(elems[i2], i2, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i2 in elems) {
              value = callback(elems[i2], i2, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return flat(ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support
      });
      if (typeof Symbol === "function") {
        jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery2.each(
        "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function(_i, name2) {
          class2type["[object " + name2 + "]"] = name2.toLowerCase();
        }
      );
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction2(obj) || isWindow(obj)) {
          return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      function nodeName(elem, name2) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name2.toLowerCase();
      }
      var pop = arr.pop;
      var sort2 = arr.sort;
      var splice2 = arr.splice;
      var whitespace = "[\\x20\\t\\r\\n\\f]";
      var rtrimCSS = new RegExp(
        "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
        "g"
      );
      jQuery2.contains = function(a2, b2) {
        var bup = b2 && b2.parentNode;
        return a2 === bup || !!(bup && bup.nodeType === 1 && // Support: IE 9 - 11+
        // IE doesn't have `contains` on SVG.
        (a2.contains ? a2.contains(bup) : a2.compareDocumentPosition && a2.compareDocumentPosition(bup) & 16));
      };
      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
      function fcssescape(ch, asCodePoint) {
        if (asCodePoint) {
          if (ch === "\0") {
            return "�";
          }
          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        }
        return "\\" + ch;
      }
      jQuery2.escapeSelector = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };
      var preferredDoc = document2, pushNative = push3;
      (function() {
        var i2, Expr, outermostContext, sortInput, hasDuplicate, push4 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches33, expando = jQuery2.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a2, b2) {
          if (a2 === b2) {
            hasDuplicate = true;
          }
          return 0;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp(
            "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
            "i"
          ),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),
          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 65536;
          if (nonHex) {
            return nonHex;
          }
          return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, unloadHandler = function() {
          setDocument();
        }, inDisabledFieldset = addCombinator(
          function(elem) {
            return elem.disabled === true && nodeName(elem, "fieldset");
          },
          { dir: "parentNode", next: "legend" }
        );
        function safeActiveElement() {
          try {
            return document3.activeElement;
          } catch (err) {
          }
        }
        try {
          push4.apply(
            arr = slice2.call(preferredDoc.childNodes),
            preferredDoc.childNodes
          );
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e2) {
          push4 = {
            apply: function(target, els) {
              pushNative.apply(target, slice2.call(els));
            },
            call: function(target) {
              pushNative.apply(target, slice2.call(arguments, 1));
            }
          };
        }
        function find(selector, context, results, seed) {
          var m2, i3, elem, nid, match2, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
          results = results || [];
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed) {
            setDocument(context);
            context = context || document3;
            if (documentIsHTML) {
              if (nodeType !== 11 && (match2 = rquickExpr2.exec(selector))) {
                if (m2 = match2[1]) {
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m2)) {
                      if (elem.id === m2) {
                        push4.call(results, elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (newContext && (elem = newContext.getElementById(m2)) && find.contains(context, elem) && elem.id === m2) {
                      push4.call(results, elem);
                      return results;
                    }
                  }
                } else if (match2[2]) {
                  push4.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m2 = match2[3]) && context.getElementsByClassName) {
                  push4.apply(results, context.getElementsByClassName(m2));
                  return results;
                }
              }
              if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                newSelector = selector;
                newContext = context;
                if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  if (newContext != context || !support.scope) {
                    if (nid = context.getAttribute("id")) {
                      nid = jQuery2.escapeSelector(nid);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  }
                  groups = tokenize(selector);
                  i3 = groups.length;
                  while (i3--) {
                    groups[i3] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i3]);
                  }
                  newSelector = groups.join(",");
                }
                try {
                  push4.apply(
                    results,
                    newContext.querySelectorAll(newSelector)
                  );
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache3(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
              delete cache3[keys.shift()];
            }
            return cache3[key + " "] = value;
          }
          return cache3;
        }
        function markFunction(fn3) {
          fn3[expando] = true;
          return fn3;
        }
        function assert2(fn3) {
          var el = document3.createElement("fieldset");
          try {
            return !!fn3(el);
          } catch (e2) {
            return false;
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            }
            el = null;
          }
        }
        function createInputPseudo(type) {
          return function(elem) {
            return nodeName(elem, "input") && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
          };
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ("form" in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                }
                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }
              return elem.disabled === disabled;
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            }
            return false;
          };
        }
        function createPositionalPseudo(fn3) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches34) {
              var j2, matchIndexes = fn3([], seed.length, argument), i3 = matchIndexes.length;
              while (i3--) {
                if (seed[j2 = matchIndexes[i3]]) {
                  seed[j2] = !(matches34[j2] = seed[j2]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        function setDocument(node) {
          var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
            return document3;
          }
          document3 = doc;
          documentElement2 = document3.documentElement;
          documentIsHTML = !jQuery2.isXMLDoc(document3);
          matches33 = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
          if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
            subWindow.addEventListener("unload", unloadHandler);
          }
          support.getById = assert2(function(el) {
            documentElement2.appendChild(el).id = jQuery2.expando;
            return !document3.getElementsByName || !document3.getElementsByName(jQuery2.expando).length;
          });
          support.disconnectedMatch = assert2(function(el) {
            return matches33.call(el, "*");
          });
          support.scope = assert2(function() {
            return document3.querySelectorAll(":scope");
          });
          support.cssHas = assert2(function() {
            try {
              document3.querySelector(":has(*,:jqfake)");
              return false;
            } catch (e2) {
              return true;
            }
          });
          if (support.getById) {
            Expr.filter.ID = function(id2) {
              var attrId = id2.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
            Expr.find.ID = function(id2, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id2);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter.ID = function(id2) {
              var attrId = id2.replace(runescape, funescape);
              return function(elem) {
                var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node2 && node2.value === attrId;
              };
            };
            Expr.find.ID = function(id2, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node2, i3, elems, elem = context.getElementById(id2);
                if (elem) {
                  node2 = elem.getAttributeNode("id");
                  if (node2 && node2.value === id2) {
                    return [elem];
                  }
                  elems = context.getElementsByName(id2);
                  i3 = 0;
                  while (elem = elems[i3++]) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id2) {
                      return [elem];
                    }
                  }
                }
                return [];
              }
            };
          }
          Expr.find.TAG = function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else {
              return context.querySelectorAll(tag);
            }
          };
          Expr.find.CLASS = function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyQSA = [];
          assert2(function(el) {
            var input;
            documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
            if (!el.querySelectorAll("[selected]").length) {
              rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
            }
            if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }
            if (!el.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }
            if (!el.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }
            input = document3.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");
            documentElement2.appendChild(el).disabled = true;
            if (el.querySelectorAll(":disabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }
            input = document3.createElement("input");
            input.setAttribute("name", "");
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
            }
          });
          if (!support.cssHas) {
            rbuggyQSA.push(":has");
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          sortOrder = function(a2, b2) {
            if (a2 === b2) {
              hasDuplicate = true;
              return 0;
            }
            var compare2 = !a2.compareDocumentPosition - !b2.compareDocumentPosition;
            if (compare2) {
              return compare2;
            }
            compare2 = (a2.ownerDocument || a2) == (b2.ownerDocument || b2) ? a2.compareDocumentPosition(b2) : (
              // Otherwise we know they are disconnected
              1
            );
            if (compare2 & 1 || !support.sortDetached && b2.compareDocumentPosition(a2) === compare2) {
              if (a2 === document3 || a2.ownerDocument == preferredDoc && find.contains(preferredDoc, a2)) {
                return -1;
              }
              if (b2 === document3 || b2.ownerDocument == preferredDoc && find.contains(preferredDoc, b2)) {
                return 1;
              }
              return sortInput ? indexOf.call(sortInput, a2) - indexOf.call(sortInput, b2) : 0;
            }
            return compare2 & 4 ? -1 : 1;
          };
          return document3;
        }
        find.matches = function(expr, elements) {
          return find(expr, null, null, elements);
        };
        find.matchesSelector = function(elem, expr) {
          setDocument(elem);
          if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches33.call(elem, expr);
              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e2) {
              nonnativeSelectorCache(expr, true);
            }
          }
          return find(expr, document3, null, [elem]).length > 0;
        };
        find.contains = function(context, elem) {
          if ((context.ownerDocument || context) != document3) {
            setDocument(context);
          }
          return jQuery2.contains(context, elem);
        };
        find.attr = function(elem, name2) {
          if ((elem.ownerDocument || elem) != document3) {
            setDocument(elem);
          }
          var fn3 = Expr.attrHandle[name2.toLowerCase()], val = fn3 && hasOwn.call(Expr.attrHandle, name2.toLowerCase()) ? fn3(elem, name2, !documentIsHTML) : void 0;
          if (val !== void 0) {
            return val;
          }
          return elem.getAttribute(name2);
        };
        find.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        jQuery2.uniqueSort = function(results) {
          var elem, duplicates = [], j2 = 0, i3 = 0;
          hasDuplicate = !support.sortStable;
          sortInput = !support.sortStable && slice2.call(results, 0);
          sort2.call(results, sortOrder);
          if (hasDuplicate) {
            while (elem = results[i3++]) {
              if (elem === results[i3]) {
                j2 = duplicates.push(i3);
              }
            }
            while (j2--) {
              splice2.call(results, duplicates[j2], 1);
            }
          }
          sortInput = null;
          return results;
        };
        jQuery2.fn.uniqueSort = function() {
          return this.pushStack(jQuery2.uniqueSort(slice2.apply(this)));
        };
        Expr = jQuery2.expr = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
          },
          preFilter: {
            ATTR: function(match2) {
              match2[1] = match2[1].replace(runescape, funescape);
              match2[3] = (match2[3] || match2[4] || match2[5] || "").replace(runescape, funescape);
              if (match2[2] === "~=") {
                match2[3] = " " + match2[3] + " ";
              }
              return match2.slice(0, 4);
            },
            CHILD: function(match2) {
              match2[1] = match2[1].toLowerCase();
              if (match2[1].slice(0, 3) === "nth") {
                if (!match2[3]) {
                  find.error(match2[0]);
                }
                match2[4] = +(match2[4] ? match2[5] + (match2[6] || 1) : 2 * (match2[3] === "even" || match2[3] === "odd"));
                match2[5] = +(match2[7] + match2[8] || match2[3] === "odd");
              } else if (match2[3]) {
                find.error(match2[0]);
              }
              return match2;
            },
            PSEUDO: function(match2) {
              var excess, unquoted = !match2[6] && match2[2];
              if (matchExpr.CHILD.test(match2[0])) {
                return null;
              }
              if (match2[3]) {
                match2[2] = match2[4] || match2[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
              (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
              (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match2[0] = match2[0].slice(0, excess);
                match2[2] = unquoted.slice(0, excess);
              }
              return match2.slice(0, 3);
            }
          },
          filter: {
            TAG: function(nodeNameSelector) {
              var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return nodeName(elem, expectedNodeName);
              };
            },
            CLASS: function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                return pattern.test(
                  typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                );
              });
            },
            ATTR: function(name2, operator, check) {
              return function(elem) {
                var result = find.attr(elem, name2);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                if (operator === "=") {
                  return result === check;
                }
                if (operator === "!=") {
                  return result !== check;
                }
                if (operator === "^=") {
                  return check && result.indexOf(check) === 0;
                }
                if (operator === "*=") {
                  return check && result.indexOf(check) > -1;
                }
                if (operator === "$=") {
                  return check && result.slice(-check.length) === check;
                }
                if (operator === "~=") {
                  return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                }
                if (operator === "|=") {
                  return result === check || result.slice(0, check.length + 1) === check + "-";
                }
                return false;
              };
            },
            CHILD: function(type, what, _argument, first2, last2) {
              var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
              return first2 === 1 && last2 === 0 ? (
                // Shortcut for :nth-*(n)
                function(elem) {
                  return !!elem.parentNode;
                }
              ) : function(elem, _context, xml) {
                var cache3, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent4 = elem.parentNode, name2 = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff2 = false;
                if (parent4) {
                  if (simple) {
                    while (dir2) {
                      node = elem;
                      while (node = node[dir2]) {
                        if (ofType ? nodeName(node, name2) : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir2 = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent4.firstChild : parent4.lastChild];
                  if (forward && useCache) {
                    outerCache = parent4[expando] || (parent4[expando] = {});
                    cache3 = outerCache[type] || [];
                    nodeIndex = cache3[0] === dirruns && cache3[1];
                    diff2 = nodeIndex && cache3[2];
                    node = nodeIndex && parent4.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir2] || // Fallback to seeking `elem` from the start
                    (diff2 = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff2 && node === elem) {
                        outerCache[type] = [dirruns, nodeIndex, diff2];
                        break;
                      }
                    }
                  } else {
                    if (useCache) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      cache3 = outerCache[type] || [];
                      nodeIndex = cache3[0] === dirruns && cache3[1];
                      diff2 = nodeIndex;
                    }
                    if (diff2 === false) {
                      while (node = ++nodeIndex && node && node[dir2] || (diff2 = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? nodeName(node, name2) : node.nodeType === 1) && ++diff2) {
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            outerCache[type] = [dirruns, diff2];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  diff2 -= last2;
                  return diff2 === first2 || diff2 % first2 === 0 && diff2 / first2 >= 0;
                }
              };
            },
            PSEUDO: function(pseudo, argument) {
              var args, fn3 = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
              if (fn3[expando]) {
                return fn3(argument);
              }
              if (fn3.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches34) {
                  var idx, matched = fn3(seed, argument), i3 = matched.length;
                  while (i3--) {
                    idx = indexOf.call(seed, matched[i3]);
                    seed[idx] = !(matches34[idx] = matched[i3]);
                  }
                }) : function(elem) {
                  return fn3(elem, 0, args);
                };
              }
              return fn3;
            }
          },
          pseudos: {
            // Potentially complex pseudos
            not: markFunction(function(selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches34, _context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i3 = seed.length;
                while (i3--) {
                  if (elem = unmatched[i3]) {
                    seed[i3] = !(matches34[i3] = elem);
                  }
                }
              }) : function(elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            has: markFunction(function(selector) {
              return function(elem) {
                return find(selector, elem).length > 0;
              };
            }),
            contains: markFunction(function(text2) {
              text2 = text2.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || jQuery2.text(elem)).indexOf(text2) > -1;
              };
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // https://www.w3.org/TR/selectors/#lang-pseudo
            lang: markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                find.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            // Miscellaneous
            target: function(elem) {
              var hash = window2.location && window2.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            root: function(elem) {
              return elem === documentElement2;
            },
            focus: function(elem) {
              return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            // Boolean properties
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
              return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
            },
            selected: function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            // Contents
            empty: function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            parent: function(elem) {
              return !Expr.pseudos.empty(elem);
            },
            // Element/input types
            header: function(elem) {
              return rheader.test(elem.nodeName);
            },
            input: function(elem) {
              return rinputs.test(elem.nodeName);
            },
            button: function(elem) {
              return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
            },
            text: function(elem) {
              var attr2;
              return nodeName(elem, "input") && elem.type === "text" && // Support: IE <10 only
              // New HTML5 attribute values (e.g., "search") appear
              // with elem.type === "text"
              ((attr2 = elem.getAttribute("type")) == null || attr2.toLowerCase() === "text");
            },
            // Position-in-collection
            first: createPositionalPseudo(function() {
              return [0];
            }),
            last: createPositionalPseudo(function(_matchIndexes, length) {
              return [length - 1];
            }),
            eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
              var i3 = 0;
              for (; i3 < length; i3 += 2) {
                matchIndexes.push(i3);
              }
              return matchIndexes;
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
              var i3 = 1;
              for (; i3 < length; i3 += 2) {
                matchIndexes.push(i3);
              }
              return matchIndexes;
            }),
            lt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i3;
              if (argument < 0) {
                i3 = argument + length;
              } else if (argument > length) {
                i3 = length;
              } else {
                i3 = argument;
              }
              for (; --i3 >= 0; ) {
                matchIndexes.push(i3);
              }
              return matchIndexes;
            }),
            gt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i3 = argument < 0 ? argument + length : argument;
              for (; ++i3 < length; ) {
                matchIndexes.push(i3);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i2 in { radio: true, checkbox: true, file: true, password: true, image: true }) {
          Expr.pseudos[i2] = createInputPseudo(i2);
        }
        for (i2 in { submit: true, reset: true }) {
          Expr.pseudos[i2] = createButtonPseudo(i2);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
          var matched, match2, tokens2, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match2 = rcomma.exec(soFar))) {
              if (match2) {
                soFar = soFar.slice(match2[0].length) || soFar;
              }
              groups.push(tokens2 = []);
            }
            matched = false;
            if (match2 = rleadingCombinator.exec(soFar)) {
              matched = match2.shift();
              tokens2.push({
                value: matched,
                // Cast descendant combinators to space
                type: match2[0].replace(rtrimCSS, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match2 = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match2 = preFilters[type](match2)))) {
                matched = match2.shift();
                tokens2.push({
                  value: matched,
                  type,
                  matches: match2
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          if (parseOnly) {
            return soFar.length;
          }
          return soFar ? find.error(selector) : (
            // Cache the tokens
            tokenCache(selector, groups).slice(0)
          );
        }
        function toSelector(tokens2) {
          var i3 = 0, len = tokens2.length, selector = "";
          for (; i3 < len; i3++) {
            selector += tokens2[i3].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
          return combinator.first ? (
            // Check against closest ancestor/preceding element
            function(elem, context, xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            }
          ) : (
            // Check against all ancestor/preceding elements
            function(elem, context, xml) {
              var oldCache, outerCache, newCache = [dirruns, doneName];
              if (xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if (skip && nodeName(elem, skip)) {
                      elem = elem[dir2] || elem;
                    } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    } else {
                      outerCache[key] = newCache;
                      if (newCache[2] = matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            }
          );
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i3 = matchers.length;
            while (i3--) {
              if (!matchers[i3](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i3 = 0, len = contexts.length;
          for (; i3 < len; i3++) {
            find(selector, contexts[i3], results);
          }
          return results;
        }
        function condense(unmatched, map2, filter4, context, xml) {
          var elem, newUnmatched = [], i3 = 0, len = unmatched.length, mapped = map2 != null;
          for (; i3 < len; i3++) {
            if (elem = unmatched[i3]) {
              if (!filter4 || filter4(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map2.push(i3);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp, i3, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
              selector || "*",
              context.nodeType ? [context] : context,
              []
            ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
            if (matcher) {
              matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? (
                // ...intermediate processing is necessary
                []
              ) : (
                // ...otherwise use results directly
                results
              );
              matcher(matcherIn, matcherOut, context, xml);
            } else {
              matcherOut = matcherIn;
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i3 = temp.length;
              while (i3--) {
                if (elem = temp[i3]) {
                  matcherOut[postMap[i3]] = !(matcherIn[postMap[i3]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i3 = matcherOut.length;
                  while (i3--) {
                    if (elem = matcherOut[i3]) {
                      temp.push(matcherIn[i3] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i3 = matcherOut.length;
                while (i3--) {
                  if ((elem = matcherOut[i3]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i3]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(
                matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
              );
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push4.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens2) {
          var checkContext, matcher, j2, len = tokens2.length, leadingRelative = Expr.relative[tokens2[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i3 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf.call(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function(elem, context, xml) {
            var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            checkContext = null;
            return ret;
          }];
          for (; i3 < len; i3++) {
            if (matcher = Expr.relative[tokens2[i3].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens2[i3].type].apply(null, tokens2[i3].matches);
              if (matcher[expando]) {
                j2 = ++i3;
                for (; j2 < len; j2++) {
                  if (Expr.relative[tokens2[j2].type]) {
                    break;
                  }
                }
                return setMatcher(
                  i3 > 1 && elementMatcher(matchers),
                  i3 > 1 && toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens2.slice(0, i3 - 1).concat({ value: tokens2[i3 - 2].type === " " ? "*" : "" })
                  ).replace(rtrimCSS, "$1"),
                  matcher,
                  i3 < j2 && matcherFromTokens(tokens2.slice(i3, j2)),
                  j2 < len && matcherFromTokens(tokens2 = tokens2.slice(j2)),
                  j2 < len && toSelector(tokens2)
                );
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j2, matcher, matchedCount = 0, i3 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context == document3 || context || outermost;
            }
            for (; i3 !== len && (elem = elems[i3]) != null; i3++) {
              if (byElement && elem) {
                j2 = 0;
                if (!context && elem.ownerDocument != document3) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while (matcher = elementMatchers[j2++]) {
                  if (matcher(elem, context || document3, xml)) {
                    push4.call(results, elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            matchedCount += i3;
            if (bySet && i3 !== matchedCount) {
              j2 = 0;
              while (matcher = setMatchers[j2++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  while (i3--) {
                    if (!(unmatched[i3] || setMatched[i3])) {
                      setMatched[i3] = pop.call(results);
                    }
                  }
                }
                setMatched = condense(setMatched);
              }
              push4.apply(results, setMatched);
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                jQuery2.uniqueSort(results);
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        function compile(selector, match2) {
          var i3, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match2) {
              match2 = tokenize(selector);
            }
            i3 = match2.length;
            while (i3--) {
              cached = matcherFromTokens(match2[i3]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(
              selector,
              matcherFromGroupMatchers(elementMatchers, setMatchers)
            );
            cached.selector = selector;
          }
          return cached;
        }
        function select(selector, context, results, seed) {
          var i3, tokens2, token, type, find2, compiled = typeof selector === "function" && selector, match2 = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          if (match2.length === 1) {
            tokens2 = match2[0] = match2[0].slice(0);
            if (tokens2.length > 2 && (token = tokens2[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens2[1].type]) {
              context = (Expr.find.ID(
                token.matches[0].replace(runescape, funescape),
                context
              ) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens2.shift().value.length);
            }
            i3 = matchExpr.needsContext.test(selector) ? 0 : tokens2.length;
            while (i3--) {
              token = tokens2[i3];
              if (Expr.relative[type = token.type]) {
                break;
              }
              if (find2 = Expr.find[type]) {
                if (seed = find2(
                  token.matches[0].replace(runescape, funescape),
                  rsibling.test(tokens2[0].type) && testContext(context.parentNode) || context
                )) {
                  tokens2.splice(i3, 1);
                  selector = seed.length && toSelector(tokens2);
                  if (!selector) {
                    push4.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match2))(
            seed,
            context,
            !documentIsHTML,
            results,
            !context || rsibling.test(selector) && testContext(context.parentNode) || context
          );
          return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        setDocument();
        support.sortDetached = assert2(function(el) {
          return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
        });
        jQuery2.find = find;
        jQuery2.expr[":"] = jQuery2.expr.pseudos;
        jQuery2.unique = jQuery2.uniqueSort;
        find.compile = compile;
        find.select = select;
        find.setDocument = setDocument;
        find.escape = jQuery2.escapeSelector;
        find.getText = jQuery2.text;
        find.isXML = jQuery2.isXMLDoc;
        find.selectors = jQuery2.expr;
        find.support = jQuery2.support;
        find.uniqueSort = jQuery2.uniqueSort;
      })();
      var dir = function(elem, dir2, until) {
        var matched = [], truncate = until !== void 0;
        while ((elem = elem[dir2]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery2(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      var siblings2 = function(n2, elem) {
        var matched = [];
        for (; n2; n2 = n2.nextSibling) {
          if (n2.nodeType === 1 && n2 !== elem) {
            matched.push(n2);
          }
        }
        return matched;
      };
      var rneedsContext = jQuery2.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function winnow(elements, qualifier, not2) {
        if (isFunction2(qualifier)) {
          return jQuery2.grep(elements, function(elem, i2) {
            return !!qualifier.call(elem, i2, elem) !== not2;
          });
        }
        if (qualifier.nodeType) {
          return jQuery2.grep(elements, function(elem) {
            return elem === qualifier !== not2;
          });
        }
        if (typeof qualifier !== "string") {
          return jQuery2.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not2;
          });
        }
        return jQuery2.filter(qualifier, elements, not2);
      }
      jQuery2.filter = function(expr, elems, not2) {
        var elem = elems[0];
        if (not2) {
          expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery2.find.matches(expr, jQuery2.grep(elems, function(elem2) {
          return elem2.nodeType === 1;
        }));
      };
      jQuery2.fn.extend({
        find: function(selector) {
          var i2, ret, len = this.length, self2 = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery2(selector).filter(function() {
              for (i2 = 0; i2 < len; i2++) {
                if (jQuery2.contains(self2[i2], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          for (i2 = 0; i2 < len; i2++) {
            jQuery2.find(selector, self2[i2], ret);
          }
          return len > 1 ? jQuery2.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(
            this,
            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery2(selector) : selector || [],
            false
          ).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init2 = jQuery2.fn.init = function(selector, context, root2) {
        var match2, elem;
        if (!selector) {
          return this;
        }
        root2 = root2 || rootjQuery;
        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            match2 = [null, selector, null];
          } else {
            match2 = rquickExpr.exec(selector);
          }
          if (match2 && (match2[1] || !context)) {
            if (match2[1]) {
              context = context instanceof jQuery2 ? context[0] : context;
              jQuery2.merge(this, jQuery2.parseHTML(
                match2[1],
                context && context.nodeType ? context.ownerDocument || context : document2,
                true
              ));
              if (rsingleTag.test(match2[1]) && jQuery2.isPlainObject(context)) {
                for (match2 in context) {
                  if (isFunction2(this[match2])) {
                    this[match2](context[match2]);
                  } else {
                    this.attr(match2, context[match2]);
                  }
                }
              }
              return this;
            } else {
              elem = document2.getElementById(match2[2]);
              if (elem) {
                this[0] = elem;
                this.length = 1;
              }
              return this;
            }
          } else if (!context || context.jquery) {
            return (context || root2).find(selector);
          } else {
            return this.constructor(context).find(selector);
          }
        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this;
        } else if (isFunction2(selector)) {
          return root2.ready !== void 0 ? root2.ready(selector) : (
            // Execute immediately if ready is not present
            selector(jQuery2)
          );
        }
        return jQuery2.makeArray(selector, this);
      };
      init2.prototype = jQuery2.fn;
      rootjQuery = jQuery2(document2);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery2.fn.extend({
        has: function(target) {
          var targets = jQuery2(target, this), l2 = targets.length;
          return this.filter(function() {
            var i2 = 0;
            for (; i2 < l2; i2++) {
              if (jQuery2.contains(this, targets[i2])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur, i2 = 0, l2 = this.length, matched = [], targets = typeof selectors !== "string" && jQuery2(selectors);
          if (!rneedsContext.test(selectors)) {
            for (; i2 < l2; i2++) {
              for (cur = this[i2]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : (
                  // Don't pass non-elements to jQuery#find
                  cur.nodeType === 1 && jQuery2.find.matchesSelector(cur, selectors)
                ))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery2.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery2(elem), this[0]);
          }
          return indexOf.call(
            this,
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem
          );
        },
        add: function(selector, context) {
          return this.pushStack(
            jQuery2.uniqueSort(
              jQuery2.merge(this.get(), jQuery2(selector, context))
            )
          );
        },
        addBack: function(selector) {
          return this.add(
            selector == null ? this.prevObject : this.prevObject.filter(selector)
          );
        }
      });
      function sibling(cur, dir2) {
        while ((cur = cur[dir2]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery2.each({
        parent: function(elem) {
          var parent4 = elem.parentNode;
          return parent4 && parent4.nodeType !== 11 ? parent4 : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings2((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings2(elem.firstChild);
        },
        contents: function(elem) {
          if (elem.contentDocument != null && // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)) {
            return elem.contentDocument;
          }
          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }
          return jQuery2.merge([], elem.childNodes);
        }
      }, function(name2, fn3) {
        jQuery2.fn[name2] = function(until, selector) {
          var matched = jQuery2.map(this, fn3, until);
          if (name2.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery2.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name2]) {
              jQuery2.uniqueSort(matched);
            }
            if (rparentsprev.test(name2)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      function createOptions(options2) {
        var object3 = {};
        jQuery2.each(options2.match(rnothtmlwhite) || [], function(_2, flag) {
          object3[flag] = true;
        });
        return object3;
      }
      jQuery2.Callbacks = function(options2) {
        options2 = typeof options2 === "string" ? createOptions(options2) : jQuery2.extend({}, options2);
        var firing, memory, fired, locked, list2 = [], queue = [], firingIndex = -1, fire = function() {
          locked = locked || options2.once;
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list2.length) {
              if (list2[firingIndex].apply(memory[0], memory[1]) === false && options2.stopOnFalse) {
                firingIndex = list2.length;
                memory = false;
              }
            }
          }
          if (!options2.memory) {
            memory = false;
          }
          firing = false;
          if (locked) {
            if (memory) {
              list2 = [];
            } else {
              list2 = "";
            }
          }
        }, self2 = {
          // Add a callback or a collection of callbacks to the list
          add: function() {
            if (list2) {
              if (memory && !firing) {
                firingIndex = list2.length - 1;
                queue.push(memory);
              }
              (function add3(args) {
                jQuery2.each(args, function(_2, arg) {
                  if (isFunction2(arg)) {
                    if (!options2.unique || !self2.has(arg)) {
                      list2.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    add3(arg);
                  }
                });
              })(arguments);
              if (memory && !firing) {
                fire();
              }
            }
            return this;
          },
          // Remove a callback from the list
          remove: function() {
            jQuery2.each(arguments, function(_2, arg) {
              var index;
              while ((index = jQuery2.inArray(arg, list2, index)) > -1) {
                list2.splice(index, 1);
                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          // Check if a given callback is in the list.
          // If no argument is given, return whether or not list has callbacks attached.
          has: function(fn3) {
            return fn3 ? jQuery2.inArray(fn3, list2) > -1 : list2.length > 0;
          },
          // Remove all callbacks from the list
          empty: function() {
            if (list2) {
              list2 = [];
            }
            return this;
          },
          // Disable .fire and .add
          // Abort any current/pending executions
          // Clear all callbacks and values
          disable: function() {
            locked = queue = [];
            list2 = memory = "";
            return this;
          },
          disabled: function() {
            return !list2;
          },
          // Disable .fire
          // Also disable .add unless we have memory (since it would have no effect)
          // Abort any pending executions
          lock: function() {
            locked = queue = [];
            if (!memory && !firing) {
              list2 = memory = "";
            }
            return this;
          },
          locked: function() {
            return !!locked;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function(context, args) {
            if (!locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);
              if (!firing) {
                fire();
              }
            }
            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function() {
            self2.fireWith(this, arguments);
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function() {
            return !!fired;
          }
        };
        return self2;
      };
      function Identity(v2) {
        return v2;
      }
      function Thrower(ex) {
        throw ex;
      }
      function adoptValue(value, resolve3, reject2, noValue) {
        var method;
        try {
          if (value && isFunction2(method = value.promise)) {
            method.call(value).done(resolve3).fail(reject2);
          } else if (value && isFunction2(method = value.then)) {
            method.call(value, resolve3, reject2);
          } else {
            resolve3.apply(void 0, [value].slice(noValue));
          }
        } catch (value2) {
          reject2.apply(void 0, [value2]);
        }
      }
      jQuery2.extend({
        Deferred: function(func) {
          var tuples = [
            // action, add listener, callbacks,
            // ... .then handlers, argument index, [final state]
            [
              "notify",
              "progress",
              jQuery2.Callbacks("memory"),
              jQuery2.Callbacks("memory"),
              2
            ],
            [
              "resolve",
              "done",
              jQuery2.Callbacks("once memory"),
              jQuery2.Callbacks("once memory"),
              0,
              "resolved"
            ],
            [
              "reject",
              "fail",
              jQuery2.Callbacks("once memory"),
              jQuery2.Callbacks("once memory"),
              1,
              "rejected"
            ]
          ], state = "pending", promise4 = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            "catch": function(fn3) {
              return promise4.then(null, fn3);
            },
            // Keep pipe for back-compat
            pipe: function() {
              var fns = arguments;
              return jQuery2.Deferred(function(newDefer) {
                jQuery2.each(tuples, function(_i, tuple) {
                  var fn3 = isFunction2(fns[tuple[4]]) && fns[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn3 && fn3.apply(this, arguments);
                    if (returned && isFunction2(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](
                        this,
                        fn3 ? [returned] : arguments
                      );
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;
              function resolve3(depth, deferred2, handler, special) {
                return function() {
                  var that = this, args = arguments, mightThrow = function() {
                    var returned, then2;
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);
                    if (returned === deferred2.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }
                    then2 = returned && // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    (typeof returned === "object" || typeof returned === "function") && returned.then;
                    if (isFunction2(then2)) {
                      if (special) {
                        then2.call(
                          returned,
                          resolve3(maxDepth, deferred2, Identity, special),
                          resolve3(maxDepth, deferred2, Thrower, special)
                        );
                      } else {
                        maxDepth++;
                        then2.call(
                          returned,
                          resolve3(maxDepth, deferred2, Identity, special),
                          resolve3(maxDepth, deferred2, Thrower, special),
                          resolve3(
                            maxDepth,
                            deferred2,
                            Identity,
                            deferred2.notifyWith
                          )
                        );
                      }
                    } else {
                      if (handler !== Identity) {
                        that = void 0;
                        args = [returned];
                      }
                      (special || deferred2.resolveWith)(that, args);
                    }
                  }, process2 = special ? mightThrow : function() {
                    try {
                      mightThrow();
                    } catch (e2) {
                      if (jQuery2.Deferred.exceptionHook) {
                        jQuery2.Deferred.exceptionHook(
                          e2,
                          process2.error
                        );
                      }
                      if (depth + 1 >= maxDepth) {
                        if (handler !== Thrower) {
                          that = void 0;
                          args = [e2];
                        }
                        deferred2.rejectWith(that, args);
                      }
                    }
                  };
                  if (depth) {
                    process2();
                  } else {
                    if (jQuery2.Deferred.getErrorHook) {
                      process2.error = jQuery2.Deferred.getErrorHook();
                    } else if (jQuery2.Deferred.getStackHook) {
                      process2.error = jQuery2.Deferred.getStackHook();
                    }
                    window2.setTimeout(process2);
                  }
                };
              }
              return jQuery2.Deferred(function(newDefer) {
                tuples[0][3].add(
                  resolve3(
                    0,
                    newDefer,
                    isFunction2(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith
                  )
                );
                tuples[1][3].add(
                  resolve3(
                    0,
                    newDefer,
                    isFunction2(onFulfilled) ? onFulfilled : Identity
                  )
                );
                tuples[2][3].add(
                  resolve3(
                    0,
                    newDefer,
                    isFunction2(onRejected) ? onRejected : Thrower
                  )
                );
              }).promise();
            },
            // Get a promise for this deferred
            // If obj is provided, the promise aspect is added to the object
            promise: function(obj) {
              return obj != null ? jQuery2.extend(obj, promise4) : promise4;
            }
          }, deferred = {};
          jQuery2.each(tuples, function(i2, tuple) {
            var list2 = tuple[2], stateString = tuple[5];
            promise4[tuple[1]] = list2.add;
            if (stateString) {
              list2.add(
                function() {
                  state = stateString;
                },
                // rejected_callbacks.disable
                // fulfilled_callbacks.disable
                tuples[3 - i2][2].disable,
                // rejected_handlers.disable
                // fulfilled_handlers.disable
                tuples[3 - i2][3].disable,
                // progress_callbacks.lock
                tuples[0][2].lock,
                // progress_handlers.lock
                tuples[0][3].lock
              );
            }
            list2.add(tuple[3].fire);
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list2.fireWith;
          });
          promise4.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        // Deferred helper
        when: function(singleValue) {
          var remaining = arguments.length, i2 = remaining, resolveContexts = Array(i2), resolveValues = slice2.call(arguments), primary = jQuery2.Deferred(), updateFunc = function(i3) {
            return function(value) {
              resolveContexts[i3] = this;
              resolveValues[i3] = arguments.length > 1 ? slice2.call(arguments) : value;
              if (!--remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          };
          if (remaining <= 1) {
            adoptValue(
              singleValue,
              primary.done(updateFunc(i2)).resolve,
              primary.reject,
              !remaining
            );
            if (primary.state() === "pending" || isFunction2(resolveValues[i2] && resolveValues[i2].then)) {
              return primary.then();
            }
          }
          while (i2--) {
            adoptValue(resolveValues[i2], updateFunc(i2), primary.reject);
          }
          return primary.promise();
        }
      });
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery2.Deferred.exceptionHook = function(error3, asyncError) {
        if (window2.console && window2.console.warn && error3 && rerrorNames.test(error3.name)) {
          window2.console.warn(
            "jQuery.Deferred exception: " + error3.message,
            error3.stack,
            asyncError
          );
        }
      };
      jQuery2.readyException = function(error3) {
        window2.setTimeout(function() {
          throw error3;
        });
      };
      var readyList = jQuery2.Deferred();
      jQuery2.fn.ready = function(fn3) {
        readyList.then(fn3).catch(function(error3) {
          jQuery2.readyException(error3);
        });
        return this;
      };
      jQuery2.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See trac-6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function(wait) {
          if (wait === true ? --jQuery2.readyWait : jQuery2.isReady) {
            return;
          }
          jQuery2.isReady = true;
          if (wait !== true && --jQuery2.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document2, [jQuery2]);
        }
      });
      jQuery2.ready.then = readyList.then;
      function completed2() {
        document2.removeEventListener("DOMContentLoaded", completed2);
        window2.removeEventListener("load", completed2);
        jQuery2.ready();
      }
      if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
        window2.setTimeout(jQuery2.ready);
      } else {
        document2.addEventListener("DOMContentLoaded", completed2);
        window2.addEventListener("load", completed2);
      }
      var access = function(elems, fn3, key, value, chainable, emptyGet, raw) {
        var i2 = 0, len = elems.length, bulk = key == null;
        if (toType(key) === "object") {
          chainable = true;
          for (i2 in key) {
            access(elems, fn3, i2, key[i2], true, emptyGet, raw);
          }
        } else if (value !== void 0) {
          chainable = true;
          if (!isFunction2(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn3.call(elems, value);
              fn3 = null;
            } else {
              bulk = fn3;
              fn3 = function(elem, _key, value2) {
                return bulk.call(jQuery2(elem), value2);
              };
            }
          }
          if (fn3) {
            for (; i2 < len; i2++) {
              fn3(
                elems[i2],
                key,
                raw ? value : value.call(elems[i2], i2, fn3(elems[i2], key))
              );
            }
          }
        }
        if (chainable) {
          return elems;
        }
        if (bulk) {
          return fn3.call(elems);
        }
        return len ? fn3(elems[0], key) : emptyGet;
      };
      var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      }
      function camelCase(string3) {
        return string3.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        this.expando = jQuery2.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando];
          if (!value) {
            value = {};
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value;
              } else {
                Object.defineProperty(owner, this.expando, {
                  value,
                  configurable: true
                });
              }
            }
          }
          return value;
        },
        set: function(owner, data4, value) {
          var prop, cache3 = this.cache(owner);
          if (typeof data4 === "string") {
            cache3[camelCase(data4)] = value;
          } else {
            for (prop in data4) {
              cache3[camelCase(prop)] = data4[prop];
            }
          }
          return cache3;
        },
        get: function(owner, key) {
          return key === void 0 ? this.cache(owner) : (
            // Always use camelCase key (gh-2257)
            owner[this.expando] && owner[this.expando][camelCase(key)]
          );
        },
        access: function(owner, key, value) {
          if (key === void 0 || key && typeof key === "string" && value === void 0) {
            return this.get(owner, key);
          }
          this.set(owner, key, value);
          return value !== void 0 ? value : key;
        },
        remove: function(owner, key) {
          var i2, cache3 = owner[this.expando];
          if (cache3 === void 0) {
            return;
          }
          if (key !== void 0) {
            if (Array.isArray(key)) {
              key = key.map(camelCase);
            } else {
              key = camelCase(key);
              key = key in cache3 ? [key] : key.match(rnothtmlwhite) || [];
            }
            i2 = key.length;
            while (i2--) {
              delete cache3[key[i2]];
            }
          }
          if (key === void 0 || jQuery2.isEmptyObject(cache3)) {
            if (owner.nodeType) {
              owner[this.expando] = void 0;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache3 = owner[this.expando];
          return cache3 !== void 0 && !jQuery2.isEmptyObject(cache3);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data4) {
        if (data4 === "true") {
          return true;
        }
        if (data4 === "false") {
          return false;
        }
        if (data4 === "null") {
          return null;
        }
        if (data4 === +data4 + "") {
          return +data4;
        }
        if (rbrace.test(data4)) {
          return JSON.parse(data4);
        }
        return data4;
      }
      function dataAttr(elem, key, data4) {
        var name2;
        if (data4 === void 0 && elem.nodeType === 1) {
          name2 = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data4 = elem.getAttribute(name2);
          if (typeof data4 === "string") {
            try {
              data4 = getData(data4);
            } catch (e2) {
            }
            dataUser.set(elem, key, data4);
          } else {
            data4 = void 0;
          }
        }
        return data4;
      }
      jQuery2.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name2, data4) {
          return dataUser.access(elem, name2, data4);
        },
        removeData: function(elem, name2) {
          dataUser.remove(elem, name2);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function(elem, name2, data4) {
          return dataPriv.access(elem, name2, data4);
        },
        _removeData: function(elem, name2) {
          dataPriv.remove(elem, name2);
        }
      });
      jQuery2.fn.extend({
        data: function(key, value) {
          var i2, name2, data4, elem = this[0], attrs = elem && elem.attributes;
          if (key === void 0) {
            if (this.length) {
              data4 = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i2 = attrs.length;
                while (i2--) {
                  if (attrs[i2]) {
                    name2 = attrs[i2].name;
                    if (name2.indexOf("data-") === 0) {
                      name2 = camelCase(name2.slice(5));
                      dataAttr(elem, name2, data4[name2]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }
            return data4;
          }
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }
          return access(this, function(value2) {
            var data5;
            if (elem && value2 === void 0) {
              data5 = dataUser.get(elem, key);
              if (data5 !== void 0) {
                return data5;
              }
              data5 = dataAttr(elem, key);
              if (data5 !== void 0) {
                return data5;
              }
              return;
            }
            this.each(function() {
              dataUser.set(this, key, value2);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery2.extend({
        queue: function(elem, type, data4) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);
            if (data4) {
              if (!queue || Array.isArray(data4)) {
                queue = dataPriv.access(elem, type, jQuery2.makeArray(data4));
              } else {
                queue.push(data4);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery2.queue(elem, type), startLength = queue.length, fn3 = queue.shift(), hooks = jQuery2._queueHooks(elem, type), next2 = function() {
            jQuery2.dequeue(elem, type);
          };
          if (fn3 === "inprogress") {
            fn3 = queue.shift();
            startLength--;
          }
          if (fn3) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn3.call(elem, next2, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery2.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery2.fn.extend({
        queue: function(type, data4) {
          var setter = 2;
          if (typeof type !== "string") {
            data4 = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery2.queue(this[0], type);
          }
          return data4 === void 0 ? this : this.each(function() {
            var queue = jQuery2.queue(this, type, data4);
            jQuery2._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery2.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery2.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
          var tmp, count = 1, defer = jQuery2.Deferred(), elements = this, i2 = this.length, resolve3 = function() {
            if (!--count) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if (typeof type !== "string") {
            obj = type;
            type = void 0;
          }
          type = type || "fx";
          while (i2--) {
            tmp = dataPriv.get(elements[i2], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve3);
            }
          }
          resolve3();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document2.documentElement;
      var isAttached = function(elem) {
        return jQuery2.contains(elem.ownerDocument, elem);
      }, composed = { composed: true };
      if (documentElement.getRootNode) {
        isAttached = function(elem) {
          return jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) && jQuery2.css(elem, "display") === "none";
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery2.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery2.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery2.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          initial = initial / 2;
          unit = unit || initialInUnit[3];
          initialInUnit = +initial || 1;
          while (maxIterations--) {
            jQuery2.style(elem, prop, initialInUnit + unit);
            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }
            initialInUnit = initialInUnit / scale;
          }
          initialInUnit = initialInUnit * 2;
          jQuery2.style(elem, prop, initialInUnit + unit);
          valueParts = valueParts || [];
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
        if (display) {
          return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName2));
        display = jQuery2.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
          display = "block";
        }
        defaultDisplayMap[nodeName2] = display;
        return display;
      }
      function showHide(elements, show2) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          display = elem.style.display;
          if (show2) {
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;
              if (!values[index]) {
                elem.style.display = "";
              }
            }
            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none";
              dataPriv.set(elem, "display", display);
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      jQuery2.fn.extend({
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery2(this).show();
            } else {
              jQuery2(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
      (function() {
        var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })();
      var wrapMap = {
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }
      function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }
        if (tag === void 0 || tag && nodeName(context, tag)) {
          return jQuery2.merge([context], ret);
        }
        return ret;
      }
      function setGlobalEval(elems, refElements) {
        var i2 = 0, l2 = elems.length;
        for (; i2 < l2; i2++) {
          dataPriv.set(
            elems[i2],
            "globalEval",
            !refElements || dataPriv.get(refElements[i2], "globalEval")
          );
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j2, fragment = context.createDocumentFragment(), nodes3 = [], i2 = 0, l2 = elems.length;
        for (; i2 < l2; i2++) {
          elem = elems[i2];
          if (elem || elem === 0) {
            if (toType(elem) === "object") {
              jQuery2.merge(nodes3, elem.nodeType ? [elem] : elem);
            } else if (!rhtml.test(elem)) {
              nodes3.push(context.createTextNode(elem));
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery2.htmlPrefilter(elem) + wrap[2];
              j2 = wrap[0];
              while (j2--) {
                tmp = tmp.lastChild;
              }
              jQuery2.merge(nodes3, tmp.childNodes);
              tmp = fragment.firstChild;
              tmp.textContent = "";
            }
          }
        }
        fragment.textContent = "";
        i2 = 0;
        while (elem = nodes3[i2++]) {
          if (selection && jQuery2.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }
          attached = isAttached(elem);
          tmp = getAll(fragment.appendChild(elem), "script");
          if (attached) {
            setGlobalEval(tmp);
          }
          if (scripts) {
            j2 = 0;
            while (elem = tmp[j2++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }
        return fragment;
      }
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue2() {
        return true;
      }
      function returnFalse2() {
        return false;
      }
      function on3(elem, types, selector, data4, fn3, one3) {
        var origFn, type;
        if (typeof types === "object") {
          if (typeof selector !== "string") {
            data4 = data4 || selector;
            selector = void 0;
          }
          for (type in types) {
            on3(elem, type, selector, data4, types[type], one3);
          }
          return elem;
        }
        if (data4 == null && fn3 == null) {
          fn3 = selector;
          data4 = selector = void 0;
        } else if (fn3 == null) {
          if (typeof selector === "string") {
            fn3 = data4;
            data4 = void 0;
          } else {
            fn3 = data4;
            data4 = selector;
            selector = void 0;
          }
        }
        if (fn3 === false) {
          fn3 = returnFalse2;
        } else if (!fn3) {
          return elem;
        }
        if (one3 === 1) {
          origFn = fn3;
          fn3 = function(event3) {
            jQuery2().off(event3);
            return origFn.apply(this, arguments);
          };
          fn3.guid = origFn.guid || (origFn.guid = jQuery2.guid++);
        }
        return elem.each(function() {
          jQuery2.event.add(this, types, fn3, data4, selector);
        });
      }
      jQuery2.event = {
        global: {},
        add: function(elem, types, handler, data4, selector) {
          var handleObjIn, eventHandle, tmp, events, t3, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          if (!acceptData(elem)) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (selector) {
            jQuery2.find.matchesSelector(documentElement, selector);
          }
          if (!handler.guid) {
            handler.guid = jQuery2.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = /* @__PURE__ */ Object.create(null);
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e2) {
              return typeof jQuery2 !== "undefined" && jQuery2.event.triggered !== e2.type ? jQuery2.event.dispatch.apply(elem, arguments) : void 0;
            };
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t3 = types.length;
          while (t3--) {
            tmp = rtypenamespace.exec(types[t3]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery2.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery2.event.special[type] || {};
            handleObj = jQuery2.extend({
              type,
              origType,
              data: data4,
              handler,
              guid: handler.guid,
              selector,
              needsContext: selector && jQuery2.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data4, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery2.event.global[type] = true;
          }
        },
        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j2, origCount, tmp, events, t3, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t3 = types.length;
          while (t3--) {
            tmp = rtypenamespace.exec(types[t3]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery2.event.remove(elem, type + types[t3], handler, selector, true);
              }
              continue;
            }
            special = jQuery2.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j2 = handlers.length;
            while (j2--) {
              handleObj = handlers[j2];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j2, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery2.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery2.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function(nativeEvent) {
          var i2, j2, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event3 = jQuery2.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event3.type] || [], special = jQuery2.event.special[event3.type] || {};
          args[0] = event3;
          for (i2 = 1; i2 < arguments.length; i2++) {
            args[i2] = arguments[i2];
          }
          event3.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event3) === false) {
            return;
          }
          handlerQueue = jQuery2.event.handlers.call(this, event3, handlers);
          i2 = 0;
          while ((matched = handlerQueue[i2++]) && !event3.isPropagationStopped()) {
            event3.currentTarget = matched.elem;
            j2 = 0;
            while ((handleObj = matched.handlers[j2++]) && !event3.isImmediatePropagationStopped()) {
              if (!event3.rnamespace || handleObj.namespace === false || event3.rnamespace.test(handleObj.namespace)) {
                event3.handleObj = handleObj;
                event3.data = handleObj.data;
                ret = ((jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== void 0) {
                  if ((event3.result = ret) === false) {
                    event3.preventDefault();
                    event3.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event3);
          }
          return event3.result;
        },
        handlers: function(event3, handlers) {
          var i2, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event3.target;
          if (delegateCount && // Support: IE <=9
          // Black-hole SVG <use> instance trees (trac-13180)
          cur.nodeType && // Support: Firefox <=42
          // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
          // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
          // Support: IE 11 only
          // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
          !(event3.type === "click" && event3.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.nodeType === 1 && !(event3.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i2 = 0; i2 < delegateCount; i2++) {
                  handleObj = handlers[i2];
                  sel = handleObj.selector + " ";
                  if (matchedSelectors[sel] === void 0) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery2(sel, this).index(cur) > -1 : jQuery2.find(sel, this, null, [cur]).length;
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                }
              }
            }
          }
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
          }
          return handlerQueue;
        },
        addProp: function(name2, hook2) {
          Object.defineProperty(jQuery2.Event.prototype, name2, {
            enumerable: true,
            configurable: true,
            get: isFunction2(hook2) ? function() {
              if (this.originalEvent) {
                return hook2(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name2];
              }
            },
            set: function(value) {
              Object.defineProperty(this, name2, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
              });
            }
          });
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery2.expando] ? originalEvent : new jQuery2.Event(originalEvent);
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          click: {
            // Utilize native event to ensure correct state for checkable inputs
            setup: function(data4) {
              var el = this || data4;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click", true);
              }
              return false;
            },
            trigger: function(data4) {
              var el = this || data4;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              }
              return true;
            },
            // For cross-browser consistency, suppress native .click() on links
            // Also prevent it if we're currently inside a leveraged native-event stack
            _default: function(event3) {
              var target = event3.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function(event3) {
              if (event3.result !== void 0 && event3.originalEvent) {
                event3.originalEvent.returnValue = event3.result;
              }
            }
          }
        }
      };
      function leverageNative(el, type, isSetup) {
        if (!isSetup) {
          if (dataPriv.get(el, type) === void 0) {
            jQuery2.event.add(el, type, returnTrue2);
          }
          return;
        }
        dataPriv.set(el, type, false);
        jQuery2.event.add(el, type, {
          namespace: false,
          handler: function(event3) {
            var result, saved = dataPriv.get(this, type);
            if (event3.isTrigger & 1 && this[type]) {
              if (!saved) {
                saved = slice2.call(arguments);
                dataPriv.set(this, type, saved);
                this[type]();
                result = dataPriv.get(this, type);
                dataPriv.set(this, type, false);
                if (saved !== result) {
                  event3.stopImmediatePropagation();
                  event3.preventDefault();
                  return result;
                }
              } else if ((jQuery2.event.special[type] || {}).delegateType) {
                event3.stopPropagation();
              }
            } else if (saved) {
              dataPriv.set(this, type, jQuery2.event.trigger(
                saved[0],
                saved.slice(1),
                this
              ));
              event3.stopPropagation();
              event3.isImmediatePropagationStopped = returnTrue2;
            }
          }
        });
      }
      jQuery2.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };
      jQuery2.Event = function(src2, props) {
        if (!(this instanceof jQuery2.Event)) {
          return new jQuery2.Event(src2, props);
        }
        if (src2 && src2.type) {
          this.originalEvent = src2;
          this.type = src2.type;
          this.isDefaultPrevented = src2.defaultPrevented || src2.defaultPrevented === void 0 && // Support: Android <=2.3 only
          src2.returnValue === false ? returnTrue2 : returnFalse2;
          this.target = src2.target && src2.target.nodeType === 3 ? src2.target.parentNode : src2.target;
          this.currentTarget = src2.currentTarget;
          this.relatedTarget = src2.relatedTarget;
        } else {
          this.type = src2;
        }
        if (props) {
          jQuery2.extend(this, props);
        }
        this.timeStamp = src2 && src2.timeStamp || Date.now();
        this[jQuery2.expando] = true;
      };
      jQuery2.Event.prototype = {
        constructor: jQuery2.Event,
        isDefaultPrevented: returnFalse2,
        isPropagationStopped: returnFalse2,
        isImmediatePropagationStopped: returnFalse2,
        isSimulated: false,
        preventDefault: function() {
          var e2 = this.originalEvent;
          this.isDefaultPrevented = returnTrue2;
          if (e2 && !this.isSimulated) {
            e2.preventDefault();
          }
        },
        stopPropagation: function() {
          var e2 = this.originalEvent;
          this.isPropagationStopped = returnTrue2;
          if (e2 && !this.isSimulated) {
            e2.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e2 = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue2;
          if (e2 && !this.isSimulated) {
            e2.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery2.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery2.event.addProp);
      jQuery2.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
        function focusMappedHandler(nativeEvent) {
          if (document2.documentMode) {
            var handle = dataPriv.get(this, "handle"), event3 = jQuery2.event.fix(nativeEvent);
            event3.type = nativeEvent.type === "focusin" ? "focus" : "blur";
            event3.isSimulated = true;
            handle(nativeEvent);
            if (event3.target === event3.currentTarget) {
              handle(event3);
            }
          } else {
            jQuery2.event.simulate(
              delegateType,
              nativeEvent.target,
              jQuery2.event.fix(nativeEvent)
            );
          }
        }
        jQuery2.event.special[type] = {
          // Utilize native event if possible so blur/focus sequence is correct
          setup: function() {
            var attaches;
            leverageNative(this, type, true);
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType);
              if (!attaches) {
                this.addEventListener(delegateType, focusMappedHandler);
              }
              dataPriv.set(this, delegateType, (attaches || 0) + 1);
            } else {
              return false;
            }
          },
          trigger: function() {
            leverageNative(this, type);
            return true;
          },
          teardown: function() {
            var attaches;
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType) - 1;
              if (!attaches) {
                this.removeEventListener(delegateType, focusMappedHandler);
                dataPriv.remove(this, delegateType);
              } else {
                dataPriv.set(this, delegateType, attaches);
              }
            } else {
              return false;
            }
          },
          // Suppress native focus or blur if we're currently inside
          // a leveraged native-event stack
          _default: function(event3) {
            return dataPriv.get(event3.target, type);
          },
          delegateType
        };
        jQuery2.event.special[delegateType] = {
          setup: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
            if (!attaches) {
              if (document2.documentMode) {
                this.addEventListener(delegateType, focusMappedHandler);
              } else {
                doc.addEventListener(type, focusMappedHandler, true);
              }
            }
            dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
          },
          teardown: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
            if (!attaches) {
              if (document2.documentMode) {
                this.removeEventListener(delegateType, focusMappedHandler);
              } else {
                doc.removeEventListener(type, focusMappedHandler, true);
              }
              dataPriv.remove(dataHolder, delegateType);
            } else {
              dataPriv.set(dataHolder, delegateType, attaches);
            }
          }
        };
      });
      jQuery2.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery2.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event3) {
            var ret, target = this, related = event3.relatedTarget, handleObj = event3.handleObj;
            if (!related || related !== target && !jQuery2.contains(target, related)) {
              event3.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event3.type = fix;
            }
            return ret;
          }
        };
      });
      jQuery2.fn.extend({
        on: function(types, selector, data4, fn3) {
          return on3(this, types, selector, data4, fn3);
        },
        one: function(types, selector, data4, fn3) {
          return on3(this, types, selector, data4, fn3, 1);
        },
        off: function(types, selector, fn3) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery2(types.delegateTarget).off(
              handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
              handleObj.selector,
              handleObj.handler
            );
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn3 = selector;
            selector = void 0;
          }
          if (fn3 === false) {
            fn3 = returnFalse2;
          }
          return this.each(function() {
            jQuery2.event.remove(this, types, fn3, selector);
          });
        }
      });
      var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery2(elem).children("tbody")[0] || elem;
        }
        return elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function cloneCopyEvent(src2, dest) {
        var i2, l2, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (dataPriv.hasData(src2)) {
          pdataOld = dataPriv.get(src2);
          events = pdataOld.events;
          if (events) {
            dataPriv.remove(dest, "handle events");
            for (type in events) {
              for (i2 = 0, l2 = events[type].length; i2 < l2; i2++) {
                jQuery2.event.add(dest, type, events[type][i2]);
              }
            }
          }
        }
        if (dataUser.hasData(src2)) {
          udataOld = dataUser.access(src2);
          udataCur = jQuery2.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      }
      function fixInput(src2, dest) {
        var nodeName2 = dest.nodeName.toLowerCase();
        if (nodeName2 === "input" && rcheckableType.test(src2.type)) {
          dest.checked = src2.checked;
        } else if (nodeName2 === "input" || nodeName2 === "textarea") {
          dest.defaultValue = src2.defaultValue;
        }
      }
      function domManip(collection4, args, callback, ignored) {
        args = flat(args);
        var fragment, first2, scripts, hasScripts, node, doc, i2 = 0, l2 = collection4.length, iNoClone = l2 - 1, value = args[0], valueIsFunction = isFunction2(value);
        if (valueIsFunction || l2 > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection4.each(function(index) {
            var self2 = collection4.eq(index);
            if (valueIsFunction) {
              args[0] = value.call(this, index, self2.html());
            }
            domManip(self2, args, callback, ignored);
          });
        }
        if (l2) {
          fragment = buildFragment(args, collection4[0].ownerDocument, false, collection4, ignored);
          first2 = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first2;
          }
          if (first2 || ignored) {
            scripts = jQuery2.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;
            for (; i2 < l2; i2++) {
              node = fragment;
              if (i2 !== iNoClone) {
                node = jQuery2.clone(node, true, true);
                if (hasScripts) {
                  jQuery2.merge(scripts, getAll(node, "script"));
                }
              }
              callback.call(collection4[i2], node, i2);
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              jQuery2.map(scripts, restoreScript);
              for (i2 = 0; i2 < hasScripts; i2++) {
                node = scripts[i2];
                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery2.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    if (jQuery2._evalUrl && !node.noModule) {
                      jQuery2._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }
        return collection4;
      }
      function remove2(elem, selector, keepData) {
        var node, nodes3 = selector ? jQuery2.filter(selector, elem) : elem, i2 = 0;
        for (; (node = nodes3[i2]) != null; i2++) {
          if (!keepData && node.nodeType === 1) {
            jQuery2.cleanData(getAll(node));
          }
          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }
        return elem;
      }
      jQuery2.extend({
        htmlPrefilter: function(html) {
          return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i2, l2, srcElements, destElements, clone3 = elem.cloneNode(true), inPage = isAttached(elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery2.isXMLDoc(elem)) {
            destElements = getAll(clone3);
            srcElements = getAll(elem);
            for (i2 = 0, l2 = srcElements.length; i2 < l2; i2++) {
              fixInput(srcElements[i2], destElements[i2]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone3);
              for (i2 = 0, l2 = srcElements.length; i2 < l2; i2++) {
                cloneCopyEvent(srcElements[i2], destElements[i2]);
              }
            } else {
              cloneCopyEvent(elem, clone3);
            }
          }
          destElements = getAll(clone3, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone3;
        },
        cleanData: function(elems) {
          var data4, elem, type, special = jQuery2.event.special, i2 = 0;
          for (; (elem = elems[i2]) !== void 0; i2++) {
            if (acceptData(elem)) {
              if (data4 = elem[dataPriv.expando]) {
                if (data4.events) {
                  for (type in data4.events) {
                    if (special[type]) {
                      jQuery2.event.remove(elem, type);
                    } else {
                      jQuery2.removeEvent(elem, type, data4.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery2.fn.extend({
        detach: function(selector) {
          return remove2(this, selector, true);
        },
        remove: function(selector) {
          return remove2(this, selector);
        },
        text: function(value) {
          return access(this, function(value2) {
            return value2 === void 0 ? jQuery2.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value2;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function() {
          var elem, i2 = 0;
          for (; (elem = this[i2]) != null; i2++) {
            if (elem.nodeType === 1) {
              jQuery2.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value2) {
            var elem = this[0] || {}, i2 = 0, l2 = this.length;
            if (value2 === void 0 && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
              value2 = jQuery2.htmlPrefilter(value2);
              try {
                for (; i2 < l2; i2++) {
                  elem = this[i2] || {};
                  if (elem.nodeType === 1) {
                    jQuery2.cleanData(getAll(elem, false));
                    elem.innerHTML = value2;
                  }
                }
                elem = 0;
              } catch (e2) {
              }
            }
            if (elem) {
              this.empty().append(value2);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var ignored = [];
          return domManip(this, arguments, function(elem) {
            var parent4 = this.parentNode;
            if (jQuery2.inArray(this, ignored) < 0) {
              jQuery2.cleanData(getAll(this));
              if (parent4) {
                parent4.replaceChild(elem, this);
              }
            }
          }, ignored);
        }
      });
      jQuery2.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name2, original) {
        jQuery2.fn[name2] = function(selector) {
          var elems, ret = [], insert2 = jQuery2(selector), last2 = insert2.length - 1, i2 = 0;
          for (; i2 <= last2; i2++) {
            elems = i2 === last2 ? this : this.clone(true);
            jQuery2(insert2[i2])[original](elems);
            push3.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var rcustomProp = /^--/;
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window2;
        }
        return view.getComputedStyle(elem);
      };
      var swap = function(elem, options2, callback) {
        var ret, name2, old = {};
        for (name2 in options2) {
          old[name2] = elem.style[name2];
          elem.style[name2] = options2[name2];
        }
        ret = callback.call(elem);
        for (name2 in options2) {
          elem.style[name2] = old[name2];
        }
        return ret;
      };
      var rboxStyle = new RegExp(cssExpand.join("|"), "i");
      (function() {
        function computeStyleTests() {
          if (!div) {
            return;
          }
          container2.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
          documentElement.appendChild(container2).appendChild(div);
          var divStyle = window2.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container2);
          div = null;
        }
        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container2 = document2.createElement("div"), div = document2.createElement("div");
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery2.extend(support, {
          boxSizingReliable: function() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          // Support: IE 9 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Behavior in IE 9 is more subtle than in newer versions & it passes
          // some versions of this test; make sure not to make it pass there!
          //
          // Support: Firefox 70+
          // Only Firefox includes border widths
          // in computed dimensions. (gh-4529)
          reliableTrDimensions: function() {
            var table, tr, trChild, trStyle;
            if (reliableTrDimensionsVal == null) {
              table = document2.createElement("table");
              tr = document2.createElement("tr");
              trChild = document2.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window2.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }
            return reliableTrDimensionsVal;
          }
        });
      })();
      function curCSS(elem, name2, computed) {
        var width2, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name2), style3 = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name2) || computed[name2];
          if (isCustomProp && ret) {
            ret = ret.replace(rtrimCSS, "$1") || void 0;
          }
          if (ret === "" && !isAttached(elem)) {
            ret = jQuery2.style(elem, name2);
          }
          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name2)) {
            width2 = style3.width;
            minWidth = style3.minWidth;
            maxWidth = style3.maxWidth;
            style3.minWidth = style3.maxWidth = style3.width = ret;
            ret = computed.width;
            style3.width = width2;
            style3.minWidth = minWidth;
            style3.maxWidth = maxWidth;
          }
        }
        return ret !== void 0 ? (
          // Support: IE <=9 - 11 only
          // IE returns zIndex value as an integer.
          ret + ""
        ) : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
      function vendorPropName(name2) {
        var capName = name2[0].toUpperCase() + name2.slice(1), i2 = cssPrefixes.length;
        while (i2--) {
          name2 = cssPrefixes[i2] + capName;
          if (name2 in emptyStyle) {
            return name2;
          }
        }
      }
      function finalPropName(name2) {
        var final = jQuery2.cssProps[name2] || vendorProps[name2];
        if (final) {
          return final;
        }
        if (name2 in emptyStyle) {
          return name2;
        }
        return vendorProps[name2] = vendorPropName(name2) || name2;
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };
      function setPositiveNumber(_elem, value, subtract) {
        var matches33 = rcssNum.exec(value);
        return matches33 ? (
          // Guard against undefined "subtract", e.g., when used as in cssHooks
          Math.max(0, matches33[2] - (subtract || 0)) + (matches33[3] || "px")
        ) : value;
      }
      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i2 = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }
        for (; i2 < 4; i2 += 2) {
          if (box === "margin") {
            marginDelta += jQuery2.css(elem, box + cssExpand[i2], true, styles);
          }
          if (!isBorderBox) {
            delta += jQuery2.css(elem, "padding" + cssExpand[i2], true, styles);
            if (box !== "padding") {
              delta += jQuery2.css(elem, "border" + cssExpand[i2] + "Width", true, styles);
            } else {
              extra += jQuery2.css(elem, "border" + cssExpand[i2] + "Width", true, styles);
            }
          } else {
            if (box === "content") {
              delta -= jQuery2.css(elem, "padding" + cssExpand[i2], true, styles);
            }
            if (box !== "margin") {
              delta -= jQuery2.css(elem, "border" + cssExpand[i2] + "Width", true, styles);
            }
          }
        }
        if (!isBorderBox && computedVal >= 0) {
          delta += Math.max(0, Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
          )) || 0;
        }
        return delta + marginDelta;
      }
      function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }
          val = "auto";
        }
        if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" || // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        !parseFloat(val) && jQuery2.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
        elem.getClientRects().length) {
          isBorderBox = jQuery2.css(elem, "boxSizing", false, styles) === "border-box";
          valueIsBorderBox = offsetProp in elem;
          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(
          elem,
          dimension,
          extra || (isBorderBox ? "border" : "content"),
          valueIsBorderBox,
          styles,
          // Provide the current computed size to request scroll gutter calculation (gh-3589)
          val
        ) + "px";
      }
      jQuery2.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageSlice: true,
          columnCount: true,
          flexGrow: true,
          flexShrink: true,
          fontWeight: true,
          gridArea: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnStart: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowStart: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          scale: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeMiterlimit: true,
          strokeOpacity: true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},
        // Get and set the style property on a DOM Node
        style: function(elem, name2, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = camelCase(name2), isCustomProp = rcustomProp.test(name2), style3 = elem.style;
          if (!isCustomProp) {
            name2 = finalPropName(origName);
          }
          hooks = jQuery2.cssHooks[name2] || jQuery2.cssHooks[origName];
          if (value !== void 0) {
            type = typeof value;
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name2, ret);
              type = "number";
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery2.cssNumber[origName] ? "" : "px");
            }
            if (!support.clearCloneStyle && value === "" && name2.indexOf("background") === 0) {
              style3[name2] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
              if (isCustomProp) {
                style3.setProperty(name2, value);
              } else {
                style3[name2] = value;
              }
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
              return ret;
            }
            return style3[name2];
          }
        },
        css: function(elem, name2, extra, styles) {
          var val, num, hooks, origName = camelCase(name2), isCustomProp = rcustomProp.test(name2);
          if (!isCustomProp) {
            name2 = finalPropName(origName);
          }
          hooks = jQuery2.cssHooks[name2] || jQuery2.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === void 0) {
            val = curCSS(elem, name2, styles);
          }
          if (val === "normal" && name2 in cssNormalTransform) {
            val = cssNormalTransform[name2];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery2.each(["height", "width"], function(_i, dimension) {
        jQuery2.cssHooks[dimension] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery2.css(elem, "display")) && // Support: Safari 8+
              // Table columns in Safari have non-zero offsetWidth & zero
              // getBoundingClientRect().width unless display is changed.
              // Support: IE <=11 only
              // Running getBoundingClientRect on a disconnected node
              // in IE throws an error.
              (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function(elem, value, extra) {
            var matches33, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
              elem,
              dimension,
              extra,
              isBorderBox,
              styles
            ) : 0;
            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(
                elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
              );
            }
            if (subtract && (matches33 = rcssNum.exec(value)) && (matches33[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery2.css(elem, dimension);
            }
            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery2.cssHooks.marginLeft = addGetHookIf(
        support.reliableMarginLeft,
        function(elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
              return elem.getBoundingClientRect().left;
            })) + "px";
          }
        }
      );
      jQuery2.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery2.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i2 = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i2 < 4; i2++) {
              expanded[prefix + cssExpand[i2] + suffix] = parts[i2] || parts[i2 - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (prefix !== "margin") {
          jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery2.fn.extend({
        css: function(name2, value) {
          return access(this, function(elem, name3, value2) {
            var styles, len, map2 = {}, i2 = 0;
            if (Array.isArray(name3)) {
              styles = getStyles(elem);
              len = name3.length;
              for (; i2 < len; i2++) {
                map2[name3[i2]] = jQuery2.css(elem, name3[i2], false, styles);
              }
              return map2;
            }
            return value2 !== void 0 ? jQuery2.style(elem, name3, value2) : jQuery2.css(elem, name3);
          }, name2, value, arguments.length > 1);
        }
      });
      function Tween2(elem, options2, prop, end, easing) {
        return new Tween2.prototype.init(elem, options2, prop, end, easing);
      }
      jQuery2.Tween = Tween2;
      Tween2.prototype = {
        constructor: Tween2,
        init: function(elem, options2, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery2.easing._default;
          this.options = options2;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery2.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween2.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween2.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased, hooks = Tween2.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery2.easing[this.easing](
              percent,
              this.options.duration * percent,
              0,
              1,
              this.options.duration
            );
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween2.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween2.prototype.init.prototype = Tween2.prototype;
      Tween2.propHooks = {
        _default: {
          get: function(tween) {
            var result;
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }
            result = jQuery2.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery2.fx.step[tween.prop]) {
              jQuery2.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween2.propHooks.scrollTop = Tween2.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery2.easing = {
        linear: function(p2) {
          return p2;
        },
        swing: function(p2) {
          return 0.5 - Math.cos(p2 * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery2.fx = Tween2.prototype.init;
      jQuery2.fx.step = {};
      var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function schedule() {
        if (inProgress) {
          if (document2.hidden === false && window2.requestAnimationFrame) {
            window2.requestAnimationFrame(schedule);
          } else {
            window2.setTimeout(schedule, jQuery2.fx.interval);
          }
          jQuery2.fx.tick();
        }
      }
      function createFxNow() {
        window2.setTimeout(function() {
          fxNow = void 0;
        });
        return fxNow = Date.now();
      }
      function genFx(type, includeWidth) {
        var which, i2 = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i2 < 4; i2 += 2 - includeWidth) {
          which = cssExpand[i2];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation2) {
        var tween, collection4 = (Animation3.tweeners[prop] || []).concat(Animation3.tweeners["*"]), index = 0, length = collection4.length;
        for (; index < length; index++) {
          if (tween = collection4[index].call(animation2, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style3 = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery2._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery2.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery2.style(elem, prop);
          }
        }
        propTween = !jQuery2.isEmptyObject(props);
        if (!propTween && jQuery2.isEmptyObject(orig)) {
          return;
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style3.overflow, style3.overflowX, style3.overflowY];
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }
          display = jQuery2.css(elem, "display");
          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery2.css(elem, "display");
              showHide([elem]);
            }
          }
          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery2.css(elem, "float") === "none") {
              if (!propTween) {
                anim.done(function() {
                  style3.display = restoreDisplay;
                });
                if (restoreDisplay == null) {
                  display = style3.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }
              style3.display = "inline-block";
            }
          }
        }
        if (opts.overflow) {
          style3.overflow = "hidden";
          anim.always(function() {
            style3.overflow = opts.overflow[0];
            style3.overflowX = opts.overflow[1];
            style3.overflowY = opts.overflow[2];
          });
        }
        propTween = false;
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              showHide([elem], true);
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem]);
              }
              dataPriv.remove(elem, "fxshow");
              for (prop in orig) {
                jQuery2.style(elem, prop, orig[prop]);
              }
            });
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name2, easing, value, hooks;
        for (index in props) {
          name2 = camelCase(index);
          easing = specialEasing[name2];
          value = props[index];
          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name2) {
            props[name2] = value;
            delete props[index];
          }
          hooks = jQuery2.cssHooks[name2];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name2];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name2] = easing;
          }
        }
      }
      function Animation3(elem, properties, options2) {
        var result, stopped, index = 0, length = Animation3.prefilters.length, deferred = jQuery2.Deferred().always(function() {
          delete tick.elem;
        }), tick = function() {
          if (stopped) {
            return false;
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation2.startTime + animation2.duration - currentTime), temp = remaining / animation2.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation2.tweens.length;
          for (; index2 < length2; index2++) {
            animation2.tweens[index2].run(percent);
          }
          deferred.notifyWith(elem, [animation2, percent, remaining]);
          if (percent < 1 && length2) {
            return remaining;
          }
          if (!length2) {
            deferred.notifyWith(elem, [animation2, 1, 0]);
          }
          deferred.resolveWith(elem, [animation2]);
          return false;
        }, animation2 = deferred.promise({
          elem,
          props: jQuery2.extend({}, properties),
          opts: jQuery2.extend(true, {
            specialEasing: {},
            easing: jQuery2.easing._default
          }, options2),
          originalProperties: properties,
          originalOptions: options2,
          startTime: fxNow || createFxNow(),
          duration: options2.duration,
          tweens: [],
          createTween: function(prop, end) {
            var tween = jQuery2.Tween(
              elem,
              animation2.opts,
              prop,
              end,
              animation2.opts.specialEasing[prop] || animation2.opts.easing
            );
            animation2.tweens.push(tween);
            return tween;
          },
          stop: function(gotoEnd) {
            var index2 = 0, length2 = gotoEnd ? animation2.tweens.length : 0;
            if (stopped) {
              return this;
            }
            stopped = true;
            for (; index2 < length2; index2++) {
              animation2.tweens[index2].run(1);
            }
            if (gotoEnd) {
              deferred.notifyWith(elem, [animation2, 1, 0]);
              deferred.resolveWith(elem, [animation2, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation2, gotoEnd]);
            }
            return this;
          }
        }), props = animation2.props;
        propFilter(props, animation2.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation3.prefilters[index].call(animation2, elem, props, animation2.opts);
          if (result) {
            if (isFunction2(result.stop)) {
              jQuery2._queueHooks(animation2.elem, animation2.opts.queue).stop = result.stop.bind(result);
            }
            return result;
          }
        }
        jQuery2.map(props, createTween, animation2);
        if (isFunction2(animation2.opts.start)) {
          animation2.opts.start.call(elem, animation2);
        }
        animation2.progress(animation2.opts.progress).done(animation2.opts.done, animation2.opts.complete).fail(animation2.opts.fail).always(animation2.opts.always);
        jQuery2.fx.timer(
          jQuery2.extend(tick, {
            elem,
            anim: animation2,
            queue: animation2.opts.queue
          })
        );
        return animation2;
      }
      jQuery2.Animation = jQuery2.extend(Animation3, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function(props, callback) {
          if (isFunction2(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation3.tweeners[prop] = Animation3.tweeners[prop] || [];
            Animation3.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation3.prefilters.unshift(callback);
          } else {
            Animation3.prefilters.push(callback);
          }
        }
      });
      jQuery2.speed = function(speed, easing, fn3) {
        var opt = speed && typeof speed === "object" ? jQuery2.extend({}, speed) : {
          complete: fn3 || !fn3 && easing || isFunction2(speed) && speed,
          duration: speed,
          easing: fn3 && easing || easing && !isFunction2(easing) && easing
        };
        if (jQuery2.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery2.fx.speeds) {
              opt.duration = jQuery2.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery2.fx.speeds._default;
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (isFunction2(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery2.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery2.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty3 = jQuery2.isEmptyObject(prop), optall = jQuery2.speed(speed, easing, callback), doAnimation = function() {
            var anim = Animation3(this, jQuery2.extend({}, prop), optall);
            if (empty3 || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          doAnimation.finish = doAnimation;
          return empty3 || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue2, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop5 = hooks.stop;
            delete hooks.stop;
            stop5(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue2;
            clearQueue2 = type;
            type = void 0;
          }
          if (clearQueue2) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery2.timers, data4 = dataPriv.get(this);
            if (index) {
              if (data4[index] && data4[index].stop) {
                stopQueue(data4[index]);
              }
            } else {
              for (index in data4) {
                if (data4[index] && data4[index].stop && rrun.test(index)) {
                  stopQueue(data4[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery2.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index, data4 = dataPriv.get(this), queue = data4[type + "queue"], hooks = data4[type + "queueHooks"], timers = jQuery2.timers, length = queue ? queue.length : 0;
            data4.finish = true;
            jQuery2.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data4.finish;
          });
        }
      });
      jQuery2.each(["toggle", "show", "hide"], function(_i, name2) {
        var cssFn = jQuery2.fn[name2];
        jQuery2.fn[name2] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name2, true), speed, easing, callback);
        };
      });
      jQuery2.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
      }, function(name2, props) {
        jQuery2.fn[name2] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery2.timers = [];
      jQuery2.fx.tick = function() {
        var timer, i2 = 0, timers = jQuery2.timers;
        fxNow = Date.now();
        for (; i2 < timers.length; i2++) {
          timer = timers[i2];
          if (!timer() && timers[i2] === timer) {
            timers.splice(i2--, 1);
          }
        }
        if (!timers.length) {
          jQuery2.fx.stop();
        }
        fxNow = void 0;
      };
      jQuery2.fx.timer = function(timer) {
        jQuery2.timers.push(timer);
        jQuery2.fx.start();
      };
      jQuery2.fx.interval = 13;
      jQuery2.fx.start = function() {
        if (inProgress) {
          return;
        }
        inProgress = true;
        schedule();
      };
      jQuery2.fx.stop = function() {
        inProgress = null;
      };
      jQuery2.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      };
      jQuery2.fn.delay = function(time2, type) {
        time2 = jQuery2.fx ? jQuery2.fx.speeds[time2] || time2 : time2;
        type = type || "fx";
        return this.queue(type, function(next2, hooks) {
          var timeout = window2.setTimeout(next2, time2);
          hooks.stop = function() {
            window2.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document2.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var boolHook, attrHandle = jQuery2.expr.attrHandle;
      jQuery2.fn.extend({
        attr: function(name2, value) {
          return access(this, jQuery2.attr, name2, value, arguments.length > 1);
        },
        removeAttr: function(name2) {
          return this.each(function() {
            jQuery2.removeAttr(this, name2);
          });
        }
      });
      jQuery2.extend({
        attr: function(elem, name2, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === "undefined") {
            return jQuery2.prop(elem, name2, value);
          }
          if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
            hooks = jQuery2.attrHooks[name2.toLowerCase()] || (jQuery2.expr.match.bool.test(name2) ? boolHook : void 0);
          }
          if (value !== void 0) {
            if (value === null) {
              jQuery2.removeAttr(elem, name2);
              return;
            }
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name2)) !== void 0) {
              return ret;
            }
            elem.setAttribute(name2, value + "");
            return value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name2)) !== null) {
            return ret;
          }
          ret = jQuery2.find.attr(elem, name2);
          return ret == null ? void 0 : ret;
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name2, i2 = 0, attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name2 = attrNames[i2++]) {
              elem.removeAttribute(name2);
            }
          }
        }
      });
      boolHook = {
        set: function(elem, value, name2) {
          if (value === false) {
            jQuery2.removeAttr(elem, name2);
          } else {
            elem.setAttribute(name2, name2);
          }
          return name2;
        }
      };
      jQuery2.each(jQuery2.expr.match.bool.source.match(/\w+/g), function(_i, name2) {
        var getter = attrHandle[name2] || jQuery2.find.attr;
        attrHandle[name2] = function(elem, name3, isXML) {
          var ret, handle, lowercaseName = name3.toLowerCase();
          if (!isXML) {
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name3, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery2.fn.extend({
        prop: function(name2, value) {
          return access(this, jQuery2.prop, name2, value, arguments.length > 1);
        },
        removeProp: function(name2) {
          return this.each(function() {
            delete this[jQuery2.propFix[name2] || name2];
          });
        }
      });
      jQuery2.extend({
        prop: function(elem, name2, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
            name2 = jQuery2.propFix[name2] || name2;
            hooks = jQuery2.propHooks[name2];
          }
          if (value !== void 0) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name2)) !== void 0) {
              return ret;
            }
            return elem[name2] = value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name2)) !== null) {
            return ret;
          }
          return elem[name2];
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery2.find.attr(elem, "tabindex");
              if (tabindex) {
                return parseInt(tabindex, 10);
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }
              return -1;
            }
          }
        },
        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      });
      if (!support.optSelected) {
        jQuery2.propHooks.selected = {
          get: function(elem) {
            var parent4 = elem.parentNode;
            if (parent4 && parent4.parentNode) {
              parent4.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent4 = elem.parentNode;
            if (parent4) {
              parent4.selectedIndex;
              if (parent4.parentNode) {
                parent4.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery2.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery2.propFix[this.toLowerCase()] = this;
      });
      function stripAndCollapse(value) {
        var tokens2 = value.match(rnothtmlwhite) || [];
        return tokens2.join(" ");
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }
        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }
        return [];
      }
      jQuery2.fn.extend({
        addClass: function(value) {
          var classNames, cur, curValue, className, i2, finalValue;
          if (isFunction2(value)) {
            return this.each(function(j2) {
              jQuery2(this).addClass(value.call(this, j2, getClass(this)));
            });
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i2 = 0; i2 < classNames.length; i2++) {
                  className = classNames[i2];
                  if (cur.indexOf(" " + className + " ") < 0) {
                    cur += className + " ";
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        removeClass: function(value) {
          var classNames, cur, curValue, className, i2, finalValue;
          if (isFunction2(value)) {
            return this.each(function(j2) {
              jQuery2(this).removeClass(value.call(this, j2, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i2 = 0; i2 < classNames.length; i2++) {
                  className = classNames[i2];
                  while (cur.indexOf(" " + className + " ") > -1) {
                    cur = cur.replace(" " + className + " ", " ");
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var classNames, className, i2, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
          if (isFunction2(value)) {
            return this.each(function(i3) {
              jQuery2(this).toggleClass(
                value.call(this, i3, getClass(this), stateVal),
                stateVal
              );
            });
          }
          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          classNames = classesToArray(value);
          return this.each(function() {
            if (isValidValue) {
              self2 = jQuery2(this);
              for (i2 = 0; i2 < classNames.length; i2++) {
                className = classNames[i2];
                if (self2.hasClass(className)) {
                  self2.removeClass(className);
                } else {
                  self2.addClass(className);
                }
              }
            } else if (value === void 0 || type === "boolean") {
              className = getClass(this);
              if (className) {
                dataPriv.set(this, "__className__", className);
              }
              if (this.setAttribute) {
                this.setAttribute(
                  "class",
                  className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                );
              }
            }
          });
        },
        hasClass: function(selector) {
          var className, elem, i2 = 0;
          className = " " + selector + " ";
          while (elem = this[i2++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery2.fn.extend({
        val: function(value) {
          var hooks, ret, valueIsFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery2.valHooks[elem.type] || jQuery2.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                return ret;
              }
              ret = elem.value;
              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              }
              return ret == null ? "" : ret;
            }
            return;
          }
          valueIsFunction = isFunction2(value);
          return this.each(function(i2) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (valueIsFunction) {
              val = value.call(this, i2, jQuery2(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery2.map(val, function(value2) {
                return value2 == null ? "" : value2 + "";
              });
            }
            hooks = jQuery2.valHooks[this.type] || jQuery2.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
              this.value = val;
            }
          });
        }
      });
      jQuery2.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery2.find.attr(elem, "value");
              return val != null ? val : (
                // Support: IE <=10 - 11 only
                // option.text throws exceptions (trac-14686, trac-14858)
                // Strip and collapse whitespace
                // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                stripAndCollapse(jQuery2.text(elem))
              );
            }
          },
          select: {
            get: function(elem) {
              var value, option, i2, options2 = elem.options, index = elem.selectedIndex, one3 = elem.type === "select-one", values = one3 ? null : [], max5 = one3 ? index + 1 : options2.length;
              if (index < 0) {
                i2 = max5;
              } else {
                i2 = one3 ? index : 0;
              }
              for (; i2 < max5; i2++) {
                option = options2[i2];
                if ((option.selected || i2 === index) && // Don't return options that are disabled or in a disabled optgroup
                !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery2(option).val();
                  if (one3) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet, option, options2 = elem.options, values = jQuery2.makeArray(value), i2 = options2.length;
              while (i2--) {
                option = options2[i2];
                if (option.selected = jQuery2.inArray(jQuery2.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery2.each(["radio", "checkbox"], function() {
        jQuery2.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery2.inArray(jQuery2(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          jQuery2.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      var location2 = window2.location;
      var nonce = { guid: Date.now() };
      var rquery = /\?/;
      jQuery2.parseXML = function(data4) {
        var xml, parserErrorElem;
        if (!data4 || typeof data4 !== "string") {
          return null;
        }
        try {
          xml = new window2.DOMParser().parseFromString(data4, "text/xml");
        } catch (e2) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) {
          jQuery2.error("Invalid XML: " + (parserErrorElem ? jQuery2.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
          }).join("\n") : data4));
        }
        return xml;
      };
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e2) {
        e2.stopPropagation();
      };
      jQuery2.extend(jQuery2.event, {
        trigger: function(event3, data4, elem, onlyHandlers) {
          var i2, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event3, "type") ? event3.type : event3, namespaces = hasOwn.call(event3, "namespace") ? event3.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document2;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery2.event.triggered)) {
            return;
          }
          if (type.indexOf(".") > -1) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event3 = event3[jQuery2.expando] ? event3 : new jQuery2.Event(type, typeof event3 === "object" && event3);
          event3.isTrigger = onlyHandlers ? 2 : 3;
          event3.namespace = namespaces.join(".");
          event3.rnamespace = event3.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event3.result = void 0;
          if (!event3.target) {
            event3.target = elem;
          }
          data4 = data4 == null ? [event3] : jQuery2.makeArray(data4, [event3]);
          special = jQuery2.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data4) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document2)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
            }
          }
          i2 = 0;
          while ((cur = eventPath[i2++]) && !event3.isPropagationStopped()) {
            lastElement = cur;
            event3.type = i2 > 1 ? bubbleType : special.bindType || type;
            handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event3.type] && dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data4);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event3.result = handle.apply(cur, data4);
              if (event3.result === false) {
                event3.preventDefault();
              }
            }
          }
          event3.type = type;
          if (!onlyHandlers && !event3.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data4) === false) && acceptData(elem)) {
              if (ontype && isFunction2(elem[type]) && !isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery2.event.triggered = type;
                if (event3.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }
                elem[type]();
                if (event3.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }
                jQuery2.event.triggered = void 0;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event3.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function(type, elem, event3) {
          var e2 = jQuery2.extend(
            new jQuery2.Event(),
            event3,
            {
              type,
              isSimulated: true
            }
          );
          jQuery2.event.trigger(e2, null, elem);
        }
      });
      jQuery2.fn.extend({
        trigger: function(type, data4) {
          return this.each(function() {
            jQuery2.event.trigger(type, data4, this);
          });
        },
        triggerHandler: function(type, data4) {
          var elem = this[0];
          if (elem) {
            return jQuery2.event.trigger(type, data4, elem, true);
          }
        }
      });
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add3) {
        var name2;
        if (Array.isArray(obj)) {
          jQuery2.each(obj, function(i2, v2) {
            if (traditional || rbracket.test(prefix)) {
              add3(prefix, v2);
            } else {
              buildParams(
                prefix + "[" + (typeof v2 === "object" && v2 != null ? i2 : "") + "]",
                v2,
                traditional,
                add3
              );
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          for (name2 in obj) {
            buildParams(prefix + "[" + name2 + "]", obj[name2], traditional, add3);
          }
        } else {
          add3(prefix, obj);
        }
      }
      jQuery2.param = function(a2, traditional) {
        var prefix, s2 = [], add3 = function(key, valueOrFunction) {
          var value = isFunction2(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s2[s2.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a2 == null) {
          return "";
        }
        if (Array.isArray(a2) || a2.jquery && !jQuery2.isPlainObject(a2)) {
          jQuery2.each(a2, function() {
            add3(this.name, this.value);
          });
        } else {
          for (prefix in a2) {
            buildParams(prefix, a2[prefix], traditional, add3);
          }
        }
        return s2.join("&");
      };
      jQuery2.fn.extend({
        serialize: function() {
          return jQuery2.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery2.prop(this, "elements");
            return elements ? jQuery2.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(_i, elem) {
            var val = jQuery2(this).val();
            if (val == null) {
              return null;
            }
            if (Array.isArray(val)) {
              return jQuery2.map(val, function(val2) {
                return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
              });
            }
            return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
          }).get();
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
      originAnchor.href = location2.href;
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType, i2 = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (isFunction2(func)) {
            while (dataType = dataTypes[i2++]) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options2, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery2.each(structure[dataType] || [], function(_2, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options2, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options2.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options2.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src2) {
        var key, deep, flatOptions = jQuery2.ajaxSettings.flatOptions || {};
        for (key in src2) {
          if (src2[key] !== void 0) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src2[key];
          }
        }
        if (deep) {
          jQuery2.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s2, jqXHR, responses) {
        var ct2, type, finalDataType, firstDataType, contents = s2.contents, dataTypes = s2.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct2 === void 0) {
            ct2 = s2.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct2) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct2)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s2.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s2, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s2.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s2.converters) {
            converters[conv.toLowerCase()] = s2.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s2.responseFields[current]) {
            jqXHR[s2.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s2.dataFilter) {
            response = s2.dataFilter(response, s2.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s2.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e2) {
                    return {
                      state: "parsererror",
                      error: conv ? e2 : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return { state: "success", data: response };
      }
      jQuery2.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location2.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location2.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          /*
          timeout: 0,
          data: null,
          dataType: null,
          username: null,
          password: null,
          cache: null,
          throws: false,
          traditional: false,
          headers: {},
          */
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            "* text": String,
            // Text to html (true = no transformation)
            "text html": true,
            // Evaluate text as a json expression
            "text json": JSON.parse,
            // Parse text as xml
            "text xml": jQuery2.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
          return settings ? (
            // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery2.ajaxSettings), settings)
          ) : (
            // Extending ajaxSettings
            ajaxExtend(jQuery2.ajaxSettings, target)
          );
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function(url, options2) {
          if (typeof url === "object") {
            options2 = url;
            url = void 0;
          }
          options2 = options2 || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed3, fireGlobals, i2, uncached, s2 = jQuery2.ajaxSetup({}, options2), callbackContext4 = s2.context || s2, globalEventContext = s2.context && (callbackContext4.nodeType || callbackContext4.jquery) ? jQuery2(callbackContext4) : jQuery2.event, deferred = jQuery2.Deferred(), completeDeferred = jQuery2.Callbacks("once memory"), statusCode = s2.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
            readyState: 0,
            // Builds headers hashtable if needed
            getResponseHeader: function(key) {
              var match2;
              if (completed3) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match2 = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match2[1].toLowerCase() + " "] = (responseHeaders[match2[1].toLowerCase() + " "] || []).concat(match2[2]);
                  }
                }
                match2 = responseHeaders[key.toLowerCase() + " "];
              }
              return match2 == null ? null : match2.join(", ");
            },
            // Raw string
            getAllResponseHeaders: function() {
              return completed3 ? responseHeadersString : null;
            },
            // Caches the header
            setRequestHeader: function(name2, value) {
              if (completed3 == null) {
                name2 = requestHeadersNames[name2.toLowerCase()] = requestHeadersNames[name2.toLowerCase()] || name2;
                requestHeaders[name2] = value;
              }
              return this;
            },
            // Overrides response content-type header
            overrideMimeType: function(type) {
              if (completed3 == null) {
                s2.mimeType = type;
              }
              return this;
            },
            // Status-dependent callbacks
            statusCode: function(map2) {
              var code;
              if (map2) {
                if (completed3) {
                  jqXHR.always(map2[jqXHR.status]);
                } else {
                  for (code in map2) {
                    statusCode[code] = [statusCode[code], map2[code]];
                  }
                }
              }
              return this;
            },
            // Cancel the request
            abort: function(statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText);
              }
              done(0, finalText);
              return this;
            }
          };
          deferred.promise(jqXHR);
          s2.url = ((url || s2.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
          s2.type = options2.method || options2.type || s2.method || s2.type;
          s2.dataTypes = (s2.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
          if (s2.crossDomain == null) {
            urlAnchor = document2.createElement("a");
            try {
              urlAnchor.href = s2.url;
              urlAnchor.href = urlAnchor.href;
              s2.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e2) {
              s2.crossDomain = true;
            }
          }
          if (s2.data && s2.processData && typeof s2.data !== "string") {
            s2.data = jQuery2.param(s2.data, s2.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s2, options2, jqXHR);
          if (completed3) {
            return jqXHR;
          }
          fireGlobals = jQuery2.event && s2.global;
          if (fireGlobals && jQuery2.active++ === 0) {
            jQuery2.event.trigger("ajaxStart");
          }
          s2.type = s2.type.toUpperCase();
          s2.hasContent = !rnoContent.test(s2.type);
          cacheURL = s2.url.replace(rhash, "");
          if (!s2.hasContent) {
            uncached = s2.url.slice(cacheURL.length);
            if (s2.data && (s2.processData || typeof s2.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s2.data;
              delete s2.data;
            }
            if (s2.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            }
            s2.url = cacheURL + uncached;
          } else if (s2.data && s2.processData && (s2.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s2.data = s2.data.replace(r20, "+");
          }
          if (s2.ifModified) {
            if (jQuery2.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery2.lastModified[cacheURL]);
            }
            if (jQuery2.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery2.etag[cacheURL]);
            }
          }
          if (s2.data && s2.hasContent && s2.contentType !== false || options2.contentType) {
            jqXHR.setRequestHeader("Content-Type", s2.contentType);
          }
          jqXHR.setRequestHeader(
            "Accept",
            s2.dataTypes[0] && s2.accepts[s2.dataTypes[0]] ? s2.accepts[s2.dataTypes[0]] + (s2.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s2.accepts["*"]
          );
          for (i2 in s2.headers) {
            jqXHR.setRequestHeader(i2, s2.headers[i2]);
          }
          if (s2.beforeSend && (s2.beforeSend.call(callbackContext4, jqXHR, s2) === false || completed3)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          completeDeferred.add(s2.complete);
          jqXHR.done(s2.success);
          jqXHR.fail(s2.error);
          transport = inspectPrefiltersOrTransports(transports, s2, options2, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s2]);
            }
            if (completed3) {
              return jqXHR;
            }
            if (s2.async && s2.timeout > 0) {
              timeoutTimer = window2.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s2.timeout);
            }
            try {
              completed3 = false;
              transport.send(requestHeaders, done);
            } catch (e2) {
              if (completed3) {
                throw e2;
              }
              done(-1, e2);
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error3, response, modified, statusText = nativeStatusText;
            if (completed3) {
              return;
            }
            completed3 = true;
            if (timeoutTimer) {
              window2.clearTimeout(timeoutTimer);
            }
            transport = void 0;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s2, jqXHR, responses);
            }
            if (!isSuccess && jQuery2.inArray("script", s2.dataTypes) > -1 && jQuery2.inArray("json", s2.dataTypes) < 0) {
              s2.converters["text script"] = function() {
              };
            }
            response = ajaxConvert(s2, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s2.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery2.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery2.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s2.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error3 = response.error;
                isSuccess = !error3;
              }
            } else {
              error3 = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext4, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext4, [jqXHR, statusText, error3]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = void 0;
            if (fireGlobals) {
              globalEventContext.trigger(
                isSuccess ? "ajaxSuccess" : "ajaxError",
                [jqXHR, s2, isSuccess ? success : error3]
              );
            }
            completeDeferred.fireWith(callbackContext4, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s2]);
              if (!--jQuery2.active) {
                jQuery2.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data4, callback) {
          return jQuery2.get(url, data4, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery2.get(url, void 0, callback, "script");
        }
      });
      jQuery2.each(["get", "post"], function(_i, method) {
        jQuery2[method] = function(url, data4, callback, type) {
          if (isFunction2(data4)) {
            type = type || callback;
            callback = data4;
            data4 = void 0;
          }
          return jQuery2.ajax(jQuery2.extend({
            url,
            type: method,
            dataType: type,
            data: data4,
            success: callback
          }, jQuery2.isPlainObject(url) && url));
        };
      });
      jQuery2.ajaxPrefilter(function(s2) {
        var i2;
        for (i2 in s2.headers) {
          if (i2.toLowerCase() === "content-type") {
            s2.contentType = s2.headers[i2] || "";
          }
        }
      });
      jQuery2._evalUrl = function(url, options2, doc) {
        return jQuery2.ajax({
          url,
          // Make this explicit, since user can override this through ajaxSetup (trac-11264)
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          // Only evaluate the response if it is successful (gh-4126)
          // dataFilter is not invoked for failure responses, so using it instead
          // of the default converter is kludgy but it works.
          converters: {
            "text script": function() {
            }
          },
          dataFilter: function(response) {
            jQuery2.globalEval(response, options2, doc);
          }
        });
      };
      jQuery2.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (this[0]) {
            if (isFunction2(html)) {
              html = html.call(this[0]);
            }
            wrap = jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (isFunction2(html)) {
            return this.each(function(i2) {
              jQuery2(this).wrapInner(html.call(this, i2));
            });
          }
          return this.each(function() {
            var self2 = jQuery2(this), contents = self2.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self2.append(html);
            }
          });
        },
        wrap: function(html) {
          var htmlIsFunction = isFunction2(html);
          return this.each(function(i2) {
            jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i2) : html);
          });
        },
        unwrap: function(selector) {
          this.parent(selector).not("body").each(function() {
            jQuery2(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });
      jQuery2.expr.pseudos.hidden = function(elem) {
        return !jQuery2.expr.pseudos.visible(elem);
      };
      jQuery2.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      jQuery2.ajaxSettings.xhr = function() {
        try {
          return new window2.XMLHttpRequest();
        } catch (e2) {
        }
      };
      var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // trac-1450: sometimes IE returns 1223 when it should be 204
        1223: 204
      }, xhrSupported = jQuery2.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery2.ajaxTransport(function(options2) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options2.crossDomain) {
          return {
            send: function(headers, complete) {
              var i2, xhr = options2.xhr();
              xhr.open(
                options2.type,
                options2.url,
                options2.async,
                options2.username,
                options2.password
              );
              if (options2.xhrFields) {
                for (i2 in options2.xhrFields) {
                  xhr[i2] = options2.xhrFields[i2];
                }
              }
              if (options2.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options2.mimeType);
              }
              if (!options2.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i2 in headers) {
                xhr.setRequestHeader(i2, headers[i2]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(
                          // File: protocol always yields status 0; see trac-8605, trac-14207
                          xhr.status,
                          xhr.statusText
                        );
                      }
                    } else {
                      complete(
                        xhrSuccessStatus[xhr.status] || xhr.status,
                        xhr.statusText,
                        // Support: IE <=9 only
                        // IE9 has no XHR2 but throws on binary (trac-11426)
                        // For XHR2 non-text, let the caller handle it (gh-2498)
                        (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                        xhr.getAllResponseHeaders()
                      );
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
              if (xhr.onabort !== void 0) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window2.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options2.hasContent && options2.data || null);
              } catch (e2) {
                if (callback) {
                  throw e2;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery2.ajaxPrefilter(function(s2) {
        if (s2.crossDomain) {
          s2.contents.script = false;
        }
      });
      jQuery2.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text2) {
            jQuery2.globalEval(text2);
            return text2;
          }
        }
      });
      jQuery2.ajaxPrefilter("script", function(s2) {
        if (s2.cache === void 0) {
          s2.cache = false;
        }
        if (s2.crossDomain) {
          s2.type = "GET";
        }
      });
      jQuery2.ajaxTransport("script", function(s2) {
        if (s2.crossDomain || s2.scriptAttrs) {
          var script, callback;
          return {
            send: function(_2, complete) {
              script = jQuery2("<script>").attr(s2.scriptAttrs || {}).prop({ charset: s2.scriptCharset, src: s2.url }).on("load error", callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document2.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery2.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery2.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery2.ajaxPrefilter("json jsonp", function(s2, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s2.jsonp !== false && (rjsonp.test(s2.url) ? "url" : typeof s2.data === "string" && (s2.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s2.data) && "data");
        if (jsonProp || s2.dataTypes[0] === "jsonp") {
          callbackName = s2.jsonpCallback = isFunction2(s2.jsonpCallback) ? s2.jsonpCallback() : s2.jsonpCallback;
          if (jsonProp) {
            s2[jsonProp] = s2[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s2.jsonp !== false) {
            s2.url += (rquery.test(s2.url) ? "&" : "?") + s2.jsonp + "=" + callbackName;
          }
          s2.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery2.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s2.dataTypes[0] = "json";
          overwritten = window2[callbackName];
          window2[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            if (overwritten === void 0) {
              jQuery2(window2).removeProp(callbackName);
            } else {
              window2[callbackName] = overwritten;
            }
            if (s2[callbackName]) {
              s2.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && isFunction2(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          });
          return "script";
        }
      });
      support.createHTMLDocument = function() {
        var body = document2.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }();
      jQuery2.parseHTML = function(data4, context, keepScripts) {
        if (typeof data4 !== "string") {
          return [];
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        var base, parsed, scripts;
        if (!context) {
          if (support.createHTMLDocument) {
            context = document2.implementation.createHTMLDocument("");
            base = context.createElement("base");
            base.href = document2.location.href;
            context.head.appendChild(base);
          } else {
            context = document2;
          }
        }
        parsed = rsingleTag.exec(data4);
        scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data4], context, scripts);
        if (scripts && scripts.length) {
          jQuery2(scripts).remove();
        }
        return jQuery2.merge([], parsed.childNodes);
      };
      jQuery2.fn.load = function(url, params, callback) {
        var selector, type, response, self2 = this, off = url.indexOf(" ");
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        }
        if (isFunction2(params)) {
          callback = params;
          params = void 0;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self2.length > 0) {
          jQuery2.ajax({
            url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self2.html(selector ? (
              // If a selector was specified, locate the right elements in a dummy div
              // Exclude scripts to avoid IE 'Permission Denied' errors
              jQuery2("<div>").append(jQuery2.parseHTML(responseText)).find(selector)
            ) : (
              // Otherwise use the full result
              responseText
            ));
          }).always(callback && function(jqXHR, status) {
            self2.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }
        return this;
      };
      jQuery2.expr.pseudos.animated = function(elem) {
        return jQuery2.grep(jQuery2.timers, function(fn3) {
          return elem === fn3.elem;
        }).length;
      };
      jQuery2.offset = {
        setOffset: function(elem, options2, i2) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position3 = jQuery2.css(elem, "position"), curElem = jQuery2(elem), props = {};
          if (position3 === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery2.css(elem, "top");
          curCSSLeft = jQuery2.css(elem, "left");
          calculatePosition = (position3 === "absolute" || position3 === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (isFunction2(options2)) {
            options2 = options2.call(elem, i2, jQuery2.extend({}, curOffset));
          }
          if (options2.top != null) {
            props.top = options2.top - curOffset.top + curTop;
          }
          if (options2.left != null) {
            props.left = options2.left - curOffset.left + curLeft;
          }
          if ("using" in options2) {
            options2.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery2.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function(options2) {
          if (arguments.length) {
            return options2 === void 0 ? this : this.each(function(i2) {
              jQuery2.offset.setOffset(this, options2, i2);
            });
          }
          var rect, win, elem = this[0];
          if (!elem) {
            return;
          }
          if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
          }
          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function() {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
          if (jQuery2.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset();
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery2.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              parentOffset = jQuery2(offsetParent).offset();
              parentOffset.top += jQuery2.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery2.css(offsetParent, "borderLeftWidth", true);
            }
          }
          return {
            top: offset.top - parentOffset.top - jQuery2.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery2.css(elem, "marginLeft", true)
          };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery2.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || documentElement;
          });
        }
      });
      jQuery2.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery2.fn[method] = function(val) {
          return access(this, function(elem, method2, val2) {
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }
            if (val2 === void 0) {
              return win ? win[prop] : elem[method2];
            }
            if (win) {
              win.scrollTo(
                !top ? val2 : win.pageXOffset,
                top ? val2 : win.pageYOffset
              );
            } else {
              elem[method2] = val2;
            }
          }, method, val, arguments.length);
        };
      });
      jQuery2.each(["top", "left"], function(_i, prop) {
        jQuery2.cssHooks[prop] = addGetHookIf(
          support.pixelPosition,
          function(elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              return rnumnonpx.test(computed) ? jQuery2(elem).position()[prop] + "px" : computed;
            }
          }
        );
      });
      jQuery2.each({ Height: "height", Width: "width" }, function(name2, type) {
        jQuery2.each({
          padding: "inner" + name2,
          content: type,
          "": "outer" + name2
        }, function(defaultExtra, funcName) {
          jQuery2.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type2, value2) {
              var doc;
              if (isWindow(elem)) {
                return funcName.indexOf("outer") === 0 ? elem["inner" + name2] : elem.document.documentElement["client" + name2];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(
                  elem.body["scroll" + name2],
                  doc["scroll" + name2],
                  elem.body["offset" + name2],
                  doc["offset" + name2],
                  doc["client" + name2]
                );
              }
              return value2 === void 0 ? (
                // Get width or height on the element, requesting but not forcing parseFloat
                jQuery2.css(elem, type2, extra)
              ) : (
                // Set width or height on the element
                jQuery2.style(elem, type2, value2, extra)
              );
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery2.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(_i, type) {
        jQuery2.fn[type] = function(fn3) {
          return this.on(type, fn3);
        };
      });
      jQuery2.fn.extend({
        bind: function(types, data4, fn3) {
          return this.on(types, null, data4, fn3);
        },
        unbind: function(types, fn3) {
          return this.off(types, null, fn3);
        },
        delegate: function(selector, types, data4, fn3) {
          return this.on(types, selector, data4, fn3);
        },
        undelegate: function(selector, types, fn3) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn3);
        },
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery2.each(
        "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
        function(_i, name2) {
          jQuery2.fn[name2] = function(data4, fn3) {
            return arguments.length > 0 ? this.on(name2, null, data4, fn3) : this.trigger(name2);
          };
        }
      );
      var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
      jQuery2.proxy = function(fn3, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
          tmp = fn3[context];
          context = fn3;
          fn3 = tmp;
        }
        if (!isFunction2(fn3)) {
          return void 0;
        }
        args = slice2.call(arguments, 2);
        proxy = function() {
          return fn3.apply(context || this, args.concat(slice2.call(arguments)));
        };
        proxy.guid = fn3.guid = fn3.guid || jQuery2.guid++;
        return proxy;
      };
      jQuery2.holdReady = function(hold) {
        if (hold) {
          jQuery2.readyWait++;
        } else {
          jQuery2.ready(true);
        }
      };
      jQuery2.isArray = Array.isArray;
      jQuery2.parseJSON = JSON.parse;
      jQuery2.nodeName = nodeName;
      jQuery2.isFunction = isFunction2;
      jQuery2.isWindow = isWindow;
      jQuery2.camelCase = camelCase;
      jQuery2.type = toType;
      jQuery2.now = Date.now;
      jQuery2.isNumeric = function(obj) {
        var type = jQuery2.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
      };
      jQuery2.trim = function(text2) {
        return text2 == null ? "" : (text2 + "").replace(rtrim, "$1");
      };
      var _jQuery = window2.jQuery, _$ = window2.$;
      jQuery2.noConflict = function(deep) {
        if (window2.$ === jQuery2) {
          window2.$ = _$;
        }
        if (deep && window2.jQuery === jQuery2) {
          window2.jQuery = _jQuery;
        }
        return jQuery2;
      };
      if (typeof noGlobal === "undefined") {
        window2.jQuery = window2.$ = jQuery2;
      }
      return jQuery2;
    });
  })(jquery);
  return jquery.exports;
}
/*!
Copyright (c) The Cytoscape Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
(function(module) {
  (function() {
    var register = function(cytoscape3, $3) {
      if (!cytoscape3 || !$3) {
        return;
      }
      $3.fn.cyPanzoom = $3.fn.cytoscapePanzoom = function(options2) {
        panzoom2.apply(this, [options2, cytoscape3, $3]);
        return this;
      };
      cytoscape3("core", "panzoom", function(options2) {
        panzoom2.apply(this, [options2, cytoscape3, $3]);
        return this;
      });
    };
    var defaults3 = {
      zoomFactor: 0.05,
      // zoom factor per zoom tick
      zoomDelay: 45,
      // how many ms between zoom ticks
      minZoom: 0.1,
      // min zoom level
      maxZoom: 10,
      // max zoom level
      fitPadding: 50,
      // padding when fitting
      panSpeed: 10,
      // how many ms in between pan ticks
      panDistance: 10,
      // max pan distance per tick
      panDragAreaSize: 75,
      // the length of the pan drag box in which the vector for panning is calculated (bigger = finer control of pan speed and direction)
      panMinPercentSpeed: 0.25,
      // the slowest speed we can pan by (as a percent of panSpeed)
      panInactiveArea: 8,
      // radius of inactive area in pan drag box
      panIndicatorMinOpacity: 0.5,
      // min opacity of pan indicator (the draggable nib); scales from this to 1.0
      zoomOnly: false,
      // a minimal version of the ui only with zooming (useful on systems with bad mousewheel resolution)
      fitSelector: void 0,
      // selector of elements to fit
      animateOnFit: function() {
        return false;
      },
      fitAnimationDuration: 1e3,
      // duration of animation on fit
      // icon class names
      sliderHandleIcon: "fa fa-minus",
      zoomInIcon: "fa fa-plus",
      zoomOutIcon: "fa fa-minus",
      resetIcon: "fa fa-expand"
    };
    var panzoom2 = function(params, cytoscape3, $3) {
      var cyRef = this;
      var options2 = $3.extend(true, {}, defaults3, params);
      var fn3 = params;
      var functions = {
        destroy: function() {
          var $this = $3(cyRef.container());
          var $pz = $this.find(".cy-panzoom");
          $pz.data("winbdgs").forEach(function(l2) {
            $3(window).unbind(l2.evt, l2.fn);
          });
          $pz.data("cybdgs").forEach(function(l2) {
            cyRef.off(l2.evt, l2.fn);
          });
          $pz.remove();
        },
        init: function() {
          return $3(cyRef.container()).each(function() {
            var $container = $3(this);
            $container.cytoscape = cytoscape3;
            var winbdgs = [];
            var $win = $3(window);
            var windowBind = function(evt, fn4) {
              winbdgs.push({ evt, fn: fn4 });
              $win.bind(evt, fn4);
            };
            var windowUnbind = function(evt, fn4) {
              for (var i2 = 0; i2 < winbdgs.length; i2++) {
                var l2 = winbdgs[i2];
                if (l2.evt === evt && l2.fn === fn4) {
                  winbdgs.splice(i2, 1);
                  break;
                }
              }
              $win.unbind(evt, fn4);
            };
            var cybdgs = [];
            var cyOn = function(evt, fn4) {
              cybdgs.push({ evt, fn: fn4 });
              cyRef.on(evt, fn4);
            };
            var $panzoom = $3('<div class="cy-panzoom"></div>');
            $container.prepend($panzoom);
            $panzoom.css("position", "absolute");
            $panzoom.data("winbdgs", winbdgs);
            $panzoom.data("cybdgs", cybdgs);
            if (options2.zoomOnly) {
              $panzoom.addClass("cy-panzoom-zoom-only");
            }
            var $zoomIn = $3('<div class="cy-panzoom-zoom-in cy-panzoom-zoom-button"><span class="icon ' + options2.zoomInIcon + '"></span></div>');
            $panzoom.append($zoomIn);
            var $zoomOut = $3('<div class="cy-panzoom-zoom-out cy-panzoom-zoom-button"><span class="icon ' + options2.zoomOutIcon + '"></span></div>');
            $panzoom.append($zoomOut);
            var $reset = $3('<div class="cy-panzoom-reset cy-panzoom-zoom-button"><span class="icon ' + options2.resetIcon + '"></span></div>');
            $panzoom.append($reset);
            var $slider = $3('<div class="cy-panzoom-slider"></div>');
            $panzoom.append($slider);
            $slider.append('<div class="cy-panzoom-slider-background"></div>');
            var $sliderHandle = $3('<div class="cy-panzoom-slider-handle"><span class="icon ' + options2.sliderHandleIcon + '"></span></div>');
            $slider.append($sliderHandle);
            var $noZoomTick = $3('<div class="cy-panzoom-no-zoom-tick"></div>');
            $slider.append($noZoomTick);
            var $panner = $3('<div class="cy-panzoom-panner"></div>');
            $panzoom.append($panner);
            var $pHandle = $3('<div class="cy-panzoom-panner-handle"></div>');
            $panner.append($pHandle);
            var $pUp = $3('<div class="cy-panzoom-pan-up cy-panzoom-pan-button"></div>');
            var $pDown = $3('<div class="cy-panzoom-pan-down cy-panzoom-pan-button"></div>');
            var $pLeft = $3('<div class="cy-panzoom-pan-left cy-panzoom-pan-button"></div>');
            var $pRight = $3('<div class="cy-panzoom-pan-right cy-panzoom-pan-button"></div>');
            $panner.append($pUp).append($pDown).append($pLeft).append($pRight);
            var $pIndicator = $3('<div class="cy-panzoom-pan-indicator"></div>');
            $panner.append($pIndicator);
            function handle2pan(e2) {
              var v2 = {
                x: e2.originalEvent.pageX - $panner.offset().left - $panner.width() / 2,
                y: e2.originalEvent.pageY - $panner.offset().top - $panner.height() / 2
              };
              var r2 = options2.panDragAreaSize;
              var d2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y);
              var percent = Math.min(d2 / r2, 1);
              if (d2 < options2.panInactiveArea) {
                return {
                  x: NaN,
                  y: NaN
                };
              }
              v2 = {
                x: v2.x / d2,
                y: v2.y / d2
              };
              percent = Math.max(options2.panMinPercentSpeed, percent);
              var vnorm = {
                x: -1 * v2.x * (percent * options2.panDistance),
                y: -1 * v2.y * (percent * options2.panDistance)
              };
              return vnorm;
            }
            function donePanning() {
              clearInterval(panInterval);
              windowUnbind("mousemove", handler);
              $pIndicator.hide();
            }
            function positionIndicator(pan2) {
              var v2 = pan2;
              var d2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y);
              var vnorm = {
                x: -1 * v2.x / d2,
                y: -1 * v2.y / d2
              };
              var w2 = $panner.width();
              var h2 = $panner.height();
              var percent = d2 / options2.panDistance;
              var opacity = Math.max(options2.panIndicatorMinOpacity, percent);
              var color = 255 - Math.round(opacity * 255);
              $pIndicator.show().css({
                left: w2 / 2 * vnorm.x + w2 / 2,
                top: h2 / 2 * vnorm.y + h2 / 2,
                background: "rgb(" + color + ", " + color + ", " + color + ")"
              });
            }
            function calculateZoomCenterPoint() {
              cyRef.pan();
              cyRef.zoom();
              zx = $container.width() / 2;
              zy = $container.height() / 2;
            }
            var zooming = false;
            function startZooming() {
              zooming = true;
              calculateZoomCenterPoint();
            }
            function endZooming() {
              zooming = false;
            }
            var zx, zy;
            function zoomTo(level) {
              if (!zooming) {
                calculateZoomCenterPoint();
              }
              cyRef.zoom({
                level,
                renderedPosition: { x: zx, y: zy }
              });
            }
            var panInterval;
            var handler = function(e2) {
              e2.stopPropagation();
              e2.preventDefault();
              clearInterval(panInterval);
              var pan2 = handle2pan(e2);
              if (isNaN(pan2.x) || isNaN(pan2.y)) {
                $pIndicator.hide();
                return;
              }
              positionIndicator(pan2);
              panInterval = setInterval(function() {
                cyRef.panBy(pan2);
              }, options2.panSpeed);
            };
            $pHandle.bind("mousedown", function(e2) {
              handler(e2);
              windowBind("mousemove", handler);
            });
            $pHandle.bind("mouseup", function() {
              donePanning();
            });
            windowBind("mouseup blur", function() {
              donePanning();
            });
            $slider.bind("mousedown", function() {
              return false;
            });
            var sliding = false;
            var sliderPadding = 2;
            function setSliderFromMouse(evt, handleOffset) {
              if (handleOffset === void 0) {
                handleOffset = 0;
              }
              var padding = sliderPadding;
              var min4 = 0 + padding;
              var max5 = $slider.height() - $sliderHandle.height() - 2 * padding;
              var top = evt.pageY - $slider.offset().top - handleOffset;
              if (top < min4) {
                top = min4;
              }
              if (top > max5) {
                top = max5;
              }
              var percent = 1 - (top - min4) / (max5 - min4);
              $sliderHandle.css("top", top);
              var zmin = options2.minZoom;
              var zmax = options2.maxZoom;
              var x2 = Math.log(zmin) / Math.log(zmax);
              var p2 = (1 - x2) * percent + x2;
              var z2 = Math.pow(zmax, p2);
              if (z2 < zmin) {
                z2 = zmin;
              } else if (z2 > zmax) {
                z2 = zmax;
              }
              zoomTo(z2);
            }
            var sliderMdownHandler, sliderMmoveHandler;
            $sliderHandle.bind("mousedown", sliderMdownHandler = function(mdEvt) {
              var handleOffset = mdEvt.target === $sliderHandle[0] ? mdEvt.offsetY : 0;
              sliding = true;
              startZooming();
              $sliderHandle.addClass("active");
              var lastMove = 0;
              windowBind("mousemove", sliderMmoveHandler = function(mmEvt) {
                var now2 = +/* @__PURE__ */ new Date();
                if (now2 > lastMove + 10) {
                  lastMove = now2;
                } else {
                  return false;
                }
                setSliderFromMouse(mmEvt, handleOffset);
                return false;
              });
              windowBind("mouseup", function() {
                windowUnbind("mousemove", sliderMmoveHandler);
                sliding = false;
                $sliderHandle.removeClass("active");
                endZooming();
              });
              return false;
            });
            $slider.bind("mousedown", function(e2) {
              if (e2.target !== $sliderHandle[0]) {
                sliderMdownHandler(e2);
                setSliderFromMouse(e2);
              }
            });
            function positionSliderFromZoom() {
              var z2 = cyRef.zoom();
              var zmin = options2.minZoom;
              var zmax = options2.maxZoom;
              var x2 = Math.log(zmin) / Math.log(zmax);
              var p2 = Math.log(z2) / Math.log(zmax);
              var percent = 1 - (p2 - x2) / (1 - x2);
              var min4 = sliderPadding;
              var max5 = $slider.height() - $sliderHandle.height() - 2 * sliderPadding;
              var top = percent * (max5 - min4);
              if (top < min4) {
                top = min4;
              }
              if (top > max5) {
                top = max5;
              }
              $sliderHandle.css("top", top);
            }
            positionSliderFromZoom();
            cyOn("zoom", function() {
              if (!sliding) {
                positionSliderFromZoom();
              }
            });
            (function() {
              var z2 = 1;
              var zmin = options2.minZoom;
              var zmax = options2.maxZoom;
              var x2 = Math.log(zmin) / Math.log(zmax);
              var p2 = Math.log(z2) / Math.log(zmax);
              var percent = 1 - (p2 - x2) / (1 - x2);
              if (percent > 1 || percent < 0) {
                $noZoomTick.hide();
                return;
              }
              var min4 = sliderPadding;
              var max5 = $slider.height() - $sliderHandle.height() - 2 * sliderPadding;
              var top = percent * (max5 - min4);
              if (top < min4) {
                top = min4;
              }
              if (top > max5) {
                top = max5;
              }
              $noZoomTick.css("top", top);
            })();
            function bindButton($button, factor) {
              var zoomInterval;
              $button.bind("mousedown", function(e2) {
                e2.preventDefault();
                e2.stopPropagation();
                if (e2.button != 0) {
                  return;
                }
                var doZoom = function() {
                  var zoom2 = cyRef.zoom();
                  var lvl = cyRef.zoom() * factor;
                  if (lvl < options2.minZoom) {
                    lvl = options2.minZoom;
                  }
                  if (lvl > options2.maxZoom) {
                    lvl = options2.maxZoom;
                  }
                  if (lvl == options2.maxZoom && zoom2 == options2.maxZoom || lvl == options2.minZoom && zoom2 == options2.minZoom) {
                    return;
                  }
                  zoomTo(lvl);
                };
                startZooming();
                doZoom();
                zoomInterval = setInterval(doZoom, options2.zoomDelay);
                return false;
              });
              windowBind("mouseup blur", function() {
                clearInterval(zoomInterval);
                endZooming();
              });
            }
            bindButton($zoomIn, 1 + options2.zoomFactor);
            bindButton($zoomOut, 1 - options2.zoomFactor);
            $reset.bind("mousedown", function(e2) {
              if (e2.button != 0) {
                return;
              }
              var elesToFit = options2.fitSelector ? cyRef.elements(options2.fitSelector) : cyRef.elements();
              if (elesToFit.size() === 0) {
                cyRef.reset();
              } else {
                var animateOnFit = typeof options2.animateOnFit === "function" ? options2.animateOnFit.call() : options2.animateOnFit;
                if (animateOnFit) {
                  cyRef.animate({
                    fit: {
                      eles: elesToFit,
                      padding: options2.fitPadding
                    }
                  }, {
                    duration: options2.fitAnimationDuration
                  });
                } else {
                  cyRef.fit(elesToFit, options2.fitPadding);
                }
              }
              return false;
            });
          });
        }
      };
      if (functions[fn3]) {
        return functions[fn3].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof fn3 == "object" || !fn3) {
        return functions.init.apply(this, arguments);
      } else {
        $3.error("No such function `" + fn3 + "` for jquery.cytoscapePanzoom");
      }
      return $3(this);
    };
    if (module.exports) {
      module.exports = function(cytoscape3, jquery2) {
        register(cytoscape3, jquery2 || requireJquery());
      };
    }
    if (typeof cytoscape !== "undefined" && typeof jQuery !== "undefined") {
      register(cytoscape, jQuery);
    }
  })();
})(cytoscapePanzoom);
var cytoscapePanzoomExports = cytoscapePanzoom.exports;
const panzoom = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapePanzoomExports);
function instance$h($$self) {
  panzoom(cytoscape$2);
  let cy2 = get_store_value(cyStore);
  var defaults3 = {
    zoomFactor: 0.05,
    // zoom factor per zoom tick
    zoomDelay: 45,
    // how many ms between zoom ticks
    minZoom: cy2.minZoom(),
    // min zoom level
    maxZoom: cy2.maxZoom(),
    // max zoom level
    fitPadding: 50,
    // padding when fitting
    panSpeed: 10,
    // how many ms in between pan ticks
    panDistance: 10,
    // max pan distance per tick
    panDragAreaSize: 75,
    // the length of the pan drag box in which the vector for panning is calculated (bigger = finer control of pan speed and direction)
    panMinPercentSpeed: 0.25,
    // the slowest speed we can pan by (as a percent of panSpeed)
    panInactiveArea: 8,
    // radius of inactive area in pan drag box
    panIndicatorMinOpacity: 0.5,
    // min opacity of pan indicator (the draggable nib); scales from this to 1.0
    zoomOnly: false,
    // a minimal version of the ui only with zooming (useful on systems with bad mousewheel resolution)
    fitSelector: void 0,
    // selector of elements to fit
    animateOnFit() {
      return false;
    },
    fitAnimationDuration: 1e3
    // duration of animation on fit
  };
  onMount(() => {
    cy2.panzoom(defaults3);
    cy2.on("zoom", function(event3) {
      var newZoomLevel = cy2.zoom();
      if (newZoomLevel < defaults3.minZoom) {
        cy2.zoom(defaults3.minZoom);
      } else if (newZoomLevel > defaults3.maxZoom) {
        cy2.zoom(defaults3.maxZoom);
      }
    });
  });
  return [];
}
class Zoom extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$h, null, safe_not_equal, {});
  }
}
const MainContainer_svelte_svelte_type_style_lang = "";
function create_fragment$5(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      div = element$1("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "svelte-16igfw6");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class MainContainer extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$g, create_fragment$5, safe_not_equal, {});
  }
}
function instance$f($$self, $$props, $$invalidate) {
  let $appState;
  component_subscribe($$self, appState, ($$value) => $$invalidate(0, $appState = $$value));
  let cy2 = get_store_value(cyStore);
  setInterval(
    () => {
      if ($appState.drawing == "none" && cy2) {
        cy2.autoungrabify(false);
        cy2.nodes().grabify();
      }
    },
    1e3
  );
  window.addEventListener("beforeunload", (event3) => {
    event3.preventDefault();
    event3.returnValue = "";
  });
  onMount(() => {
    Shiny.unbindAll();
    Shiny.bindAll();
  });
  return [];
}
class DuckTapeFixes extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$f, null, safe_not_equal, {});
  }
}
const EstimationWait_svelte_svelte_type_style_lang = "";
function create_if_block$2(ctx) {
  let div;
  let button0;
  let t1;
  let button1;
  let mounted;
  let dispose;
  return {
    c() {
      div = element$1("div");
      button0 = element$1("button");
      button0.innerHTML = `<span class="glyphicon glyphicon-refresh spinning svelte-16d2v0h"></span> Fitting...`;
      t1 = space();
      button1 = element$1("button");
      button1.textContent = "Cancel";
      attr(button0, "class", "btn btn-lg btn-secondary fixed-width disabled-button svelte-16d2v0h");
      attr(button0, "id", "fitting-button");
      button0.disabled = true;
      attr(button1, "class", "btn btn-lg btn-default fixed-width svelte-16d2v0h");
      attr(div, "class", "center-screen svelte-16d2v0h");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button0);
      append(div, t1);
      append(div, button1);
      if (!mounted) {
        dispose = listen(button1, "click", abort);
        mounted = true;
      }
    },
    p: noop$2,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$4(ctx) {
  let if_block_anchor;
  let if_block = (
    /*$appState*/
    ctx[0].fitting && create_if_block$2()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*$appState*/
        ctx2[0].fitting
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$2();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function abort() {
  Shiny.setInputValue("run-abort", Math.random());
}
function instance$e($$self, $$props, $$invalidate) {
  let $appState;
  component_subscribe($$self, appState, ($$value) => $$invalidate(0, $appState = $$value));
  return [$appState];
}
class EstimationWait extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$e, create_fragment$4, safe_not_equal, {});
  }
}
const Alert_svelte_svelte_type_style_lang = "";
function create_if_block$1(ctx) {
  let div;
  let strong;
  let t0_value = (
    /*alertTypes*/
    ctx[2][
      /*$alertStore*/
      ctx[0].type
    ].label + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*$alertStore*/
    ctx[0].message + ""
  );
  let t22;
  let div_class_value;
  return {
    c() {
      div = element$1("div");
      strong = element$1("strong");
      t0 = text(t0_value);
      t1 = space();
      t22 = text(t2_value);
      attr(div, "class", div_class_value = null_to_empty(
        /*alertTypes*/
        ctx[2][
          /*$alertStore*/
          ctx[0].type
        ].class + /*fade*/
        (ctx[1] ? " fadeOut" : "")
      ) + " svelte-1wv9zbn");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, strong);
      append(strong, t0);
      append(div, t1);
      append(div, t22);
    },
    p(ctx2, dirty) {
      if (dirty & /*$alertStore*/
      1 && t0_value !== (t0_value = /*alertTypes*/
      ctx2[2][
        /*$alertStore*/
        ctx2[0].type
      ].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*$alertStore*/
      1 && t2_value !== (t2_value = /*$alertStore*/
      ctx2[0].message + ""))
        set_data(t22, t2_value);
      if (dirty & /*$alertStore, fade*/
      3 && div_class_value !== (div_class_value = null_to_empty(
        /*alertTypes*/
        ctx2[2][
          /*$alertStore*/
          ctx2[0].type
        ].class + /*fade*/
        (ctx2[1] ? " fadeOut" : "")
      ) + " svelte-1wv9zbn")) {
        attr(div, "class", div_class_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment$3(ctx) {
  let if_block_anchor;
  let if_block = (
    /*$alertStore*/
    ctx[0].message !== "" && create_if_block$1(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*$alertStore*/
        ctx2[0].message !== ""
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$2,
    o: noop$2,
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$d($$self, $$props, $$invalidate) {
  let $alertStore;
  component_subscribe($$self, alertStore, ($$value) => $$invalidate(0, $alertStore = $$value));
  let alertTypes = {
    success: {
      class: "alert-success",
      label: "Success!"
    },
    info: { class: "alert-info", label: "Info!" },
    warning: {
      class: "alert-warning",
      label: "Warning!"
    },
    danger: { class: "alert-danger", label: "Danger!" }
  };
  let fade = false;
  let timer;
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$alertStore, timer*/
    9) {
      if ($alertStore.message !== "") {
        $$invalidate(1, fade = false);
        clearTimeout(timer);
        $$invalidate(3, timer = setTimeout(
          () => {
            $$invalidate(1, fade = true);
          },
          1e4
        ));
      }
    }
  };
  return [$alertStore, fade, alertTypes, timer];
}
class Alert extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$d, create_fragment$3, safe_not_equal, {});
  }
}
var cytoscapeUndoRedo = { exports: {} };
(function(module) {
  (function() {
    var register = function(cytoscape3) {
      if (!cytoscape3) {
        return;
      }
      function getScratch(eleOrCy, name2) {
        if (eleOrCy.scratch("_undoRedo") === void 0) {
          eleOrCy.scratch("_undoRedo", {});
        }
        var scratchPad = eleOrCy.scratch("_undoRedo");
        return name2 === void 0 ? scratchPad : scratchPad[name2];
      }
      function setScratch(eleOrCy, name2, val) {
        var scratchPad = getScratch(eleOrCy);
        scratchPad[name2] = val;
        eleOrCy.scratch("_undoRedo", scratchPad);
      }
      function generateInstance(cy2) {
        var instance2 = {};
        instance2.options = {
          isDebug: false,
          // Debug mode for console messages
          actions: {},
          // actions to be added
          undoableDrag: true,
          // Whether dragging nodes are undoable can be a function as well
          stackSizeLimit: void 0,
          // Size limit of undo stack, note that the size of redo stack cannot exceed size of undo stack
          beforeUndo: function() {
          },
          afterUndo: function() {
          },
          beforeRedo: function() {
          },
          afterRedo: function() {
          },
          ready: function() {
          }
        };
        instance2.actions = {};
        instance2.undoStack = [];
        instance2.redoStack = [];
        instance2.reset = function(undos, redos) {
          this.undoStack = undos || [];
          this.redoStack = redos || [];
        };
        instance2.undo = function() {
          if (!this.isUndoStackEmpty()) {
            var action = this.undoStack.pop();
            cy2.trigger("beforeUndo", [action.name, action.args]);
            var res = this.actions[action.name]._undo(action.args);
            this.redoStack.push({
              name: action.name,
              args: res
            });
            cy2.trigger("afterUndo", [action.name, action.args, res]);
            return res;
          } else if (this.options.isDebug) {
            console.log("Undoing cannot be done because undo stack is empty!");
          }
        };
        instance2.redo = function() {
          if (!this.isRedoStackEmpty()) {
            var action = this.redoStack.pop();
            cy2.trigger(action.firstTime ? "beforeDo" : "beforeRedo", [action.name, action.args]);
            if (!action.args)
              action.args = {};
            action.args.firstTime = action.firstTime ? true : false;
            var res = this.actions[action.name]._do(action.args);
            this.undoStack.push({
              name: action.name,
              args: res
            });
            if (this.options.stackSizeLimit != void 0 && this.undoStack.length > this.options.stackSizeLimit) {
              this.undoStack.shift();
            }
            cy2.trigger(action.firstTime ? "afterDo" : "afterRedo", [action.name, action.args, res]);
            return res;
          } else if (this.options.isDebug) {
            console.log("Redoing cannot be done because redo stack is empty!");
          }
        };
        instance2.do = function(actionName, args) {
          this.redoStack.length = 0;
          this.redoStack.push({
            name: actionName,
            args,
            firstTime: true
          });
          return this.redo();
        };
        instance2.undoAll = function() {
          while (!this.isUndoStackEmpty()) {
            this.undo();
          }
        };
        instance2.redoAll = function() {
          while (!this.isRedoStackEmpty()) {
            this.redo();
          }
        };
        instance2.action = function(actionName, _do, _undo) {
          this.actions[actionName] = {
            _do,
            _undo
          };
          return this;
        };
        instance2.removeAction = function(actionName) {
          delete this.actions[actionName];
        };
        instance2.isUndoStackEmpty = function() {
          return this.undoStack.length === 0;
        };
        instance2.isRedoStackEmpty = function() {
          return this.redoStack.length === 0;
        };
        instance2.getUndoStack = function() {
          return this.undoStack;
        };
        instance2.getRedoStack = function() {
          return this.redoStack;
        };
        return instance2;
      }
      cytoscape3("core", "undoRedo", function(options2, dontInit) {
        var cy2 = this;
        var instance2 = getScratch(cy2, "instance") || generateInstance(cy2);
        setScratch(cy2, "instance", instance2);
        if (options2) {
          for (var key in options2)
            if (instance2.options.hasOwnProperty(key))
              instance2.options[key] = options2[key];
          if (options2.actions)
            for (var key in options2.actions)
              instance2.actions[key] = options2.actions[key];
        }
        if (!getScratch(cy2, "isInitialized") && !dontInit) {
          var defActions = defaultActions(cy2);
          for (var key in defActions)
            instance2.actions[key] = defActions[key];
          setDragUndo(cy2, instance2.options.undoableDrag);
          setScratch(cy2, "isInitialized", true);
        }
        instance2.options.ready();
        return instance2;
      });
      function setDragUndo(cy2, undoable) {
        var lastMouseDownNodeInfo = null;
        cy2.on("grab", "node", function() {
          if (typeof undoable === "function" ? undoable.call(this) : undoable) {
            lastMouseDownNodeInfo = {};
            lastMouseDownNodeInfo.lastMouseDownPosition = {
              x: this.position("x"),
              y: this.position("y")
            };
            lastMouseDownNodeInfo.node = this;
          }
        });
        cy2.on("free", "node", function() {
          var instance2 = getScratch(cy2, "instance");
          if (typeof undoable === "function" ? undoable.call(this) : undoable) {
            if (lastMouseDownNodeInfo == null) {
              return;
            }
            var node = lastMouseDownNodeInfo.node;
            var lastMouseDownPosition = lastMouseDownNodeInfo.lastMouseDownPosition;
            var mouseUpPosition = {
              x: node.position("x"),
              y: node.position("y")
            };
            if (mouseUpPosition.x != lastMouseDownPosition.x || mouseUpPosition.y != lastMouseDownPosition.y) {
              var positionDiff = {
                x: mouseUpPosition.x - lastMouseDownPosition.x,
                y: mouseUpPosition.y - lastMouseDownPosition.y
              };
              var nodes3;
              if (node.selected()) {
                nodes3 = cy2.nodes(":visible").filter(":selected");
              } else {
                nodes3 = cy2.collection([node]);
              }
              var param = {
                positionDiff,
                nodes: nodes3,
                move: false
              };
              instance2.do("drag", param);
              lastMouseDownNodeInfo = null;
            }
          }
        });
      }
      function defaultActions(cy2) {
        function getTopMostNodes(nodes3) {
          var nodesMap = {};
          for (var i2 = 0; i2 < nodes3.length; i2++) {
            nodesMap[nodes3[i2].id()] = true;
          }
          var roots = nodes3.filter(function(ele, i3) {
            if (typeof ele === "number") {
              ele = i3;
            }
            var parent4 = ele.parent()[0];
            while (parent4 != null) {
              if (nodesMap[parent4.id()]) {
                return false;
              }
              parent4 = parent4.parent()[0];
            }
            return true;
          });
          return roots;
        }
        function moveNodes(positionDiff, nodes3, notCalcTopMostNodes) {
          var topMostNodes = notCalcTopMostNodes ? nodes3 : getTopMostNodes(nodes3);
          for (var i2 = 0; i2 < topMostNodes.length; i2++) {
            var node = topMostNodes[i2];
            var oldX = node.position("x");
            var oldY = node.position("y");
            if (!node.isParent()) {
              node.position({
                x: oldX + positionDiff.x,
                y: oldY + positionDiff.y
              });
            }
            var children2 = node.children();
            moveNodes(positionDiff, children2, true);
          }
        }
        function getEles(_eles) {
          return typeof _eles === "string" ? cy2.$(_eles) : _eles;
        }
        function restoreEles(_eles) {
          return getEles(_eles).restore();
        }
        function returnToPositions(positions2) {
          var currentPositions = {};
          cy2.nodes().not(":parent").positions(function(ele, i2) {
            if (typeof ele === "number") {
              ele = i2;
            }
            currentPositions[ele.id()] = {
              x: ele.position("x"),
              y: ele.position("y")
            };
            var pos = positions2[ele.id()];
            return {
              x: pos.x,
              y: pos.y
            };
          });
          return currentPositions;
        }
        function getNodePositions() {
          var positions2 = {};
          var nodes3 = cy2.nodes();
          for (var i2 = 0; i2 < nodes3.length; i2++) {
            var node = nodes3[i2];
            positions2[node.id()] = {
              x: node.position("x"),
              y: node.position("y")
            };
          }
          return positions2;
        }
        function changeParentOld(param) {
          var result = {};
          if (param.firstTime) {
            var newParentId = param.parentData == void 0 ? null : param.parentData;
            var withDescendant = param.nodes.union(param.nodes.descendants());
            result.elesToRestore = withDescendant.union(withDescendant.connectedEdges());
            result.movedEles = param.nodes.move({ "parent": newParentId });
            var posDiff = {
              x: param.posDiffX,
              y: param.posDiffY
            };
            moveNodes(posDiff, result.movedEles);
          } else {
            result.elesToRestore = param.movedEles.remove();
            result.movedEles = param.elesToRestore.restore();
          }
          if (param.callback) {
            result.callback = param.callback;
            param.callback(result.movedEles);
          }
          return result;
        }
        function changeParentNew(param) {
          var result = {};
          if (param.firstTime) {
            var newParentId = param.parentData == void 0 ? null : param.parentData;
            var withDescendant = param.nodes.union(param.nodes.descendants());
            var parentData = {};
            withDescendant.forEach(function(ele) {
              if (ele.parent().id())
                parentData[ele.id()] = ele.parent();
              else
                parentData[ele.id()] = null;
            });
            var positionData = {};
            withDescendant.forEach(function(ele) {
              positionData[ele.id()] = {};
              positionData[ele.id()].x = ele.position("x");
              positionData[ele.id()].y = ele.position("y");
            });
            result.oldParent = parentData;
            result.oldPosition = positionData;
            result.newParent = newParentId;
            result.movedEles = withDescendant;
            param.nodes.move({ "parent": newParentId }).nodes();
            var posDiff = {
              x: param.posDiffX,
              y: param.posDiffY
            };
            moveNodes(posDiff, result.movedEles);
          } else {
            result.oldParent = {};
            param.movedEles.forEach(function(ele) {
              if (ele.parent().id())
                result.oldParent[ele.id()] = ele.parent();
              else
                result.oldParent[ele.id()] = null;
            });
            result.oldPosition = {};
            param.movedEles.forEach(function(ele) {
              result.oldPosition[ele.id()] = {};
              result.oldPosition[ele.id()].x = ele.position("x");
              result.oldPosition[ele.id()].y = ele.position("y");
            });
            result.newParent = param.oldParent;
            result.movedEles = param.movedEles;
            result.movedEles.forEach(function(ele) {
              if (typeof result.newParent !== "object")
                ele.move({ "parent": result.newParent });
              else if (result.newParent[ele.id()] == null)
                ele.move({ "parent": null });
              else
                ele.move({ "parent": result.newParent[ele.id()].id() });
              ele.position(param.oldPosition[ele.id()]);
            });
          }
          if (param.callback) {
            result.callback = param.callback;
            param.callback(result.movedEles);
          }
          return result;
        }
        function batch3(actionList, doOrUndo) {
          var tempStack = [];
          var instance2 = getScratch(cy2, "instance");
          var actions = instance2.actions;
          for (var i2 = 0; i2 < actionList.length; i2++) {
            var action = actionList[i2];
            if (!actions.hasOwnProperty(action.name)) {
              throw "Action " + action.name + " does not exist as an undoable function";
            }
          }
          for (var i2 = 0; i2 < actionList.length; i2++) {
            var action = actionList[i2];
            action.param.firstTime = actionList.firstTime;
            var actionResult;
            if (doOrUndo == "undo") {
              actionResult = actions[action.name]._undo(action.param);
            } else {
              actionResult = actions[action.name]._do(action.param);
            }
            tempStack.unshift({
              name: action.name,
              param: actionResult
            });
          }
          return tempStack;
        }
        return {
          "add": {
            _do: function(eles) {
              return eles.firstTime ? cy2.add(eles) : restoreEles(eles);
            },
            _undo: cy2.remove
          },
          "remove": {
            _do: cy2.remove,
            _undo: restoreEles
          },
          "restore": {
            _do: restoreEles,
            _undo: cy2.remove
          },
          "select": {
            _do: function(_eles) {
              return getEles(_eles).select();
            },
            _undo: function(_eles) {
              return getEles(_eles).unselect();
            }
          },
          "unselect": {
            _do: function(_eles) {
              return getEles(_eles).unselect();
            },
            _undo: function(_eles) {
              return getEles(_eles).select();
            }
          },
          "move": {
            _do: function(args) {
              var eles = getEles(args.eles);
              var nodes3 = eles.nodes();
              var edges3 = eles.edges();
              var oldNodesParents = [];
              var oldEdgesSources = [];
              var oldEdgesTargets = [];
              nodes3.forEach(function(node) {
                oldNodesParents.push(node.parent().length > 1 ? node.parent().id() : null);
              });
              edges3.forEach(function(edge) {
                oldEdgesSources.push(edge.source().id());
                oldEdgesTargets.push(edge.target().id());
              });
              return {
                oldNodesParents,
                newNodes: nodes3.move(args.location),
                oldEdgesSources,
                oldEdgesTargets,
                newEdges: edges3.move(args.location)
              };
            },
            _undo: function(eles) {
              var newEles = cy2.collection();
              var location2 = {};
              if (eles.newNodes.length > 0) {
                location2.parent = eles.newNodes[0].parent().id();
                for (var i2 = 0; i2 < eles.newNodes.length; i2++) {
                  var newNode = eles.newNodes[i2].move({
                    parent: eles.oldNodesParents[i2]
                  });
                  newEles = newEles.union(newNode);
                }
              } else {
                location2.source = eles.newEdges[0].source().id();
                location2.target = eles.newEdges[0].target().id();
                for (var i2 = 0; i2 < eles.newEdges.length; i2++) {
                  var newEdge = eles.newEdges[i2].move({
                    source: eles.oldEdgesSources[i2],
                    target: eles.oldEdgesTargets[i2]
                  });
                  newEles = newEles.union(newEdge);
                }
              }
              return {
                eles: newEles,
                location: location2
              };
            }
          },
          "drag": {
            _do: function(args) {
              if (args.move) {
                moveNodes(args.positionDiff, args.nodes);
                cy2.elements().unselect();
              }
              return args;
            },
            _undo: function(args) {
              var diff2 = {
                x: -1 * args.positionDiff.x,
                y: -1 * args.positionDiff.y
              };
              var result = {
                positionDiff: args.positionDiff,
                nodes: args.nodes,
                move: true
              };
              moveNodes(diff2, args.nodes);
              cy2.elements().unselect();
              return result;
            }
          },
          "layout": {
            _do: function(args) {
              if (args.firstTime) {
                var positions2 = getNodePositions();
                var layout4;
                if (args.eles) {
                  layout4 = getEles(args.eles).layout(args.options);
                } else {
                  layout4 = cy2.layout(args.options);
                }
                if (layout4 && layout4.run) {
                  layout4.run();
                }
                return positions2;
              } else
                return returnToPositions(args);
            },
            _undo: function(nodesData) {
              return returnToPositions(nodesData);
            }
          },
          "changeParent": {
            _do: function(args) {
              return cy2.nodes()[0].component ? changeParentNew(args) : changeParentOld(args);
            },
            _undo: function(args) {
              return cy2.nodes()[0].component ? changeParentNew(args) : changeParentOld(args);
            }
          },
          "batch": {
            _do: function(args) {
              return batch3(args, "do");
            },
            _undo: function(args) {
              return batch3(args, "undo");
            }
          }
        };
      }
    };
    if (module.exports) {
      module.exports = register;
    }
    if (typeof cytoscape !== "undefined") {
      register(cytoscape);
    }
  })();
})(cytoscapeUndoRedo);
var cytoscapeUndoRedoExports = cytoscapeUndoRedo.exports;
const undoRedo = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeUndoRedoExports);
function arraysToObject(keys, values) {
  const obj = {};
  keys.forEach((key, index) => {
    obj[key] = values[index];
  });
  return obj;
}
function instance$c($$self, $$props, $$invalidate) {
  let $ur;
  component_subscribe($$self, ur, ($$value) => $$invalidate(0, $ur = $$value));
  let cy2 = get_store_value(cyStore);
  onMount(() => {
    cytoscape$2.use(undoRedo);
    const options2 = { isDebug: true };
    let urLocal = cy2.undoRedo(options2);
    ur.set(urLocal);
    urLocal.action(
      "style",
      function(args) {
        let originalStyles = {};
        const keys = Object.keys(args.style);
        args.eles.forEach(function(ele) {
          let styleValues = [];
          keys.forEach((key) => {
            styleValues.push(ele.data(key) || ele.style(key));
            ele.data(key, args.style[key]);
          });
          originalStyles[ele.id()] = arraysToObject(keys, styleValues);
        });
        return { eles: args.eles, style: originalStyles };
      },
      function(args) {
        const newStyle = args.eles[0].style();
        Object.keys(args.style).forEach(function(id2) {
          var ele = cy2.getElementById(id2);
          for (var key in args.style[id2]) {
            ele.data(key, args.style[id2][key]);
          }
        });
        return { eles: args.eles, style: newStyle };
      }
    );
    document.addEventListener("keydown", function(e2) {
      if ((e2.ctrlKey || e2.metaKey) && e2.target.nodeName === "BODY" && (e2.which === 90 || e2.which === 89)) {
        e2.preventDefault();
        e2.stopPropagation();
        if (e2.which === 90)
          $ur.undo();
        else if (e2.which === 89)
          $ur.redo();
      }
    });
    document.addEventListener("keyup", function(e2) {
      if (e2.metaKey && e2.target.nodeName === "BODY" && (e2.which === 90 || e2.which === 89)) {
        e2.preventDefault();
        e2.stopPropagation();
      }
    });
  });
  return [];
}
class UndoRedo extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$c, null, safe_not_equal, {});
  }
}
function serverAvail$1() {
  return typeof Shiny === "object" && Shiny !== null;
}
function instance$b($$self, $$props, $$invalidate) {
  let $appState;
  component_subscribe($$self, appState, ($$value) => $$invalidate(0, $appState = $$value));
  if (serverAvail$1()) {
    Shiny.addCustomMessageHandler("full", function(full) {
      set_store_value(appState, $appState.full = full, $appState);
      set_store_value(appState, $appState.ready = true, $appState);
    });
  } else {
    set_store_value(appState, $appState.full = true, $appState);
    set_store_value(appState, $appState.ready = true, $appState);
  }
  return [];
}
class AppReady extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$b, null, safe_not_equal, {});
  }
}
function instance$a($$self, $$props, $$invalidate) {
  let $gridViewOptions;
  component_subscribe($$self, gridViewOptions, ($$value) => $$invalidate(1, $gridViewOptions = $$value));
  let mounted = false;
  onMount(() => {
    $$invalidate(0, mounted = true);
  });
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*mounted, $gridViewOptions*/
    3) {
      if (mounted) {
        updateVisibility($gridViewOptions.showVar, $gridViewOptions.showLav, $gridViewOptions.showMean);
      }
    }
    if ($$self.$$.dirty & /*mounted, $gridViewOptions*/
    3) {
      if (mounted) {
        updateLabels($gridViewOptions.view, $gridViewOptions.std, $gridViewOptions.number_digits);
      }
    }
  };
  return [mounted, $gridViewOptions];
}
class ViewUpdater extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$a, null, safe_not_equal, {});
  }
}
const Draggable_svelte_svelte_type_style_lang = "";
function create_fragment$2(ctx) {
  let section;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      section = element$1("section");
      if (default_slot)
        default_slot.c();
      set_style(
        section,
        "left",
        /*left*/
        ctx[0] + "px"
      );
      set_style(
        section,
        "top",
        /*top*/
        ctx[1] + "px"
      );
      attr(section, "class", "draggable svelte-13fkbj1");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      if (default_slot) {
        default_slot.m(section, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            window,
            "mouseup",
            /*onMouseUp*/
            ctx[4]
          ),
          listen(
            window,
            "mousemove",
            /*onMouseMove*/
            ctx[3]
          ),
          listen(
            section,
            "mousedown",
            /*onMouseDown*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*left*/
      1) {
        set_style(
          section,
          "left",
          /*left*/
          ctx2[0] + "px"
        );
      }
      if (!current || dirty & /*top*/
      2) {
        set_style(
          section,
          "top",
          /*top*/
          ctx2[1] + "px"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(section);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { left = 100 } = $$props;
  let { top = 100 } = $$props;
  let moving = false;
  let offsetX = 0;
  let offsetY = 0;
  function onMouseDown(e2) {
    moving = true;
    offsetX = e2.clientX - left;
    offsetY = e2.clientY - top;
  }
  function onMouseMove(e2) {
    if (moving) {
      $$invalidate(0, left = e2.clientX - offsetX);
      $$invalidate(1, top = e2.clientY - offsetY);
    }
  }
  function onMouseUp() {
    moving = false;
  }
  $$self.$$set = ($$props2) => {
    if ("left" in $$props2)
      $$invalidate(0, left = $$props2.left);
    if ("top" in $$props2)
      $$invalidate(1, top = $$props2.top);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [left, top, onMouseDown, onMouseMove, onMouseUp, $$scope, slots];
}
class Draggable extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$9, create_fragment$2, safe_not_equal, { left: 0, top: 1 });
  }
}
function create_default_slot$1(ctx) {
  let ul;
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[0].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    null
  );
  return {
    c() {
      ul = element$1("ul");
      div = element$1("div");
      if (default_slot)
        default_slot.c();
      set_style(div, "display", "flex");
      set_style(div, "flex-direction", "column");
      attr(ul, "class", "nav navbar-nav navbar-left");
      set_style(ul, "border", "1px solid black");
      set_style(ul, "z-index", "9999");
    },
    m(target, anchor) {
      insert(target, ul, anchor);
      append(ul, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(ul);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$1(ctx) {
  let draggable;
  let current;
  draggable = new Draggable({
    props: {
      $$slots: { default: [create_default_slot$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(draggable.$$.fragment);
    },
    m(target, anchor) {
      mount_component(draggable, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const draggable_changes = {};
      if (dirty & /*$$scope*/
      2) {
        draggable_changes.$$scope = { dirty, ctx: ctx2 };
      }
      draggable.$set(draggable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(draggable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(draggable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(draggable, detaching);
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [slots, $$scope];
}
class MinContextMenu extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$8, create_fragment$1, safe_not_equal, {});
  }
}
function showError(message, source) {
  bootbox.alert({
    title: "<span style='color: red;'>Error</span>",
    message: `A ${source} error occurred:<br> <span style='color: red;'>${message}</span>.<br><br>Please consider reporting this issue by sending an email to <a href="mailto:j.d.karch@fsw.leidenuniv.nl">j.d.karch@fsw.leidenuniv.nl</a>.`,
    centerVertical: true
  });
  return true;
}
function serverAvail() {
  return typeof Shiny === "object" && Shiny !== null;
}
function instance$7($$self) {
  if (serverAvail()) {
    Shiny.addCustomMessageHandler("serverError", function(message) {
      if (get_store_value(appState).showServerErrors) {
        showError(message.msg, "Server");
      }
    });
  }
  return [];
}
class Errors extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$7, null, safe_not_equal, {});
  }
}
function instance$6($$self, $$props, $$invalidate) {
  let $modelOptions;
  component_subscribe($$self, modelOptions, ($$value) => $$invalidate(0, $modelOptions = $$value));
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$modelOptions*/
    1) {
      {
        tolavaan($modelOptions.mode);
      }
    }
  };
  return [$modelOptions];
}
class Reactive extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$6, null, safe_not_equal, {});
  }
}
var cytoscapeAutomove = { exports: {} };
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    return (
      /******/
      function(modules2) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
          };
          modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules2;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name2, getter) {
          if (!__webpack_require__.o(exports2, name2)) {
            Object.defineProperty(exports2, name2, {
              /******/
              configurable: false,
              /******/
              enumerable: true,
              /******/
              get: getter
              /******/
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function getDefault() {
              return module2["default"];
            }
          ) : (
            /******/
            function getModuleExports() {
              return module2;
            }
          );
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object3, property) {
          return Object.prototype.hasOwnProperty.call(object3, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 3);
      }([
        /* 0 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var defaults3 = __webpack_require__(2);
          var typeofStr = _typeof2("");
          var typeofObj = _typeof2({});
          var typeofFn = _typeof2(function() {
          });
          var isObject2 = function isObject3(x2) {
            return (typeof x2 === "undefined" ? "undefined" : _typeof2(x2)) === typeofObj;
          };
          var isString = function isString2(x2) {
            return (typeof x2 === "undefined" ? "undefined" : _typeof2(x2)) === typeofStr;
          };
          var isFunction2 = function isFunction3(x2) {
            return (typeof x2 === "undefined" ? "undefined" : _typeof2(x2)) === typeofFn;
          };
          var isCollection = function isCollection2(x2) {
            return isObject2(x2) && isFunction2(x2.collection);
          };
          var assign5 = __webpack_require__(1);
          var eleExists = function eleExists2(ele) {
            return ele != null && !ele.removed();
          };
          var _elesHasEle = function elesHasEle(eles, ele) {
            if (eles.has != void 0) {
              _elesHasEle = function elesHasEle2(eles2, ele2) {
                return eles2.has(ele2);
              };
            } else {
              _elesHasEle = function elesHasEle2(eles2, ele2) {
                return eles2.intersection(ele2).length > 0;
              };
            }
            return _elesHasEle(eles, ele);
          };
          var getEleMatchesSpecFn = function getEleMatchesSpecFn2(spec) {
            if (isString(spec)) {
              return function(ele) {
                return ele.is(spec);
              };
            } else if (isFunction2(spec)) {
              return spec;
            } else if (isCollection(spec)) {
              return function(ele) {
                return _elesHasEle(spec, ele);
              };
            } else {
              throw new Error("Can not create match function for spec", spec);
            }
          };
          var bind2 = function bind3(cy2, events, selector, fn3) {
            var b2 = { cy: cy2, events, selector: selector || "node", fn: fn3 };
            cy2.on(b2.events, b2.selector, b2.fn);
            return b2;
          };
          var bindOnRule = function bindOnRule2(rule, cy2, events, selector, fn3) {
            var b2 = bind2(cy2, events, selector, fn3);
            var bindings = rule.bindings = rule.bindings || [];
            bindings.push(b2);
          };
          var unbindAllOnRule = function unbindAllOnRule2(rule) {
            var unbind = function unbind2(b2) {
              b2.cy.off(b2.events, b2.selector, b2.fn);
            };
            rule.bindings.forEach(unbind);
            rule.bindings = [];
          };
          var getRepositioner = function getRepositioner2(rule, cy2) {
            var r2 = rule.reposition;
            if (r2 === "mean") {
              return meanNeighborhoodPosition(getEleMatchesSpecFn(rule.meanIgnores));
            } else if (r2 === "viewport") {
              return viewportPosition(cy2);
            } else if (r2 === "drag") {
              return dragAlong(rule);
            } else if (isObject2(r2)) {
              if (r2.type == void 0 || r2.type == "inside") {
                return boxPosition(r2);
              } else if (r2.type == "outside") {
                return outsideBoxPosition(r2);
              }
            } else {
              return r2;
            }
          };
          var dragAlong = function dragAlong2(rule) {
            return function(node) {
              var pos = node.position();
              var delta = rule.delta;
              if (rule.delta != null && !node.same(rule.grabbedNode) && !node.grabbed()) {
                return {
                  x: pos.x + delta.x,
                  y: pos.y + delta.y
                };
              }
            };
          };
          var meanNeighborhoodPosition = function meanNeighborhoodPosition2(ignore) {
            return function(node) {
              var nhood = node.neighborhood();
              var avgPos = { x: 0, y: 0 };
              var nhoodSize = 0;
              for (var i2 = 0; i2 < nhood.length; i2++) {
                var nhoodEle = nhood[i2];
                if (nhoodEle.isNode() && !ignore(nhoodEle)) {
                  var pos = nhoodEle.position();
                  avgPos.x += pos.x;
                  avgPos.y += pos.y;
                  nhoodSize++;
                }
              }
              if (nhoodSize < 2) {
                return void 0;
              }
              avgPos.x /= nhoodSize;
              avgPos.y /= nhoodSize;
              return avgPos;
            };
          };
          var constrain = function constrain2(val, min4, max5) {
            return val < min4 ? min4 : val > max5 ? max5 : val;
          };
          var constrainInBox = function constrainInBox2(node, bb) {
            var pos = node.position();
            return {
              x: constrain(pos.x, bb.x1, bb.x2),
              y: constrain(pos.y, bb.y1, bb.y2)
            };
          };
          var boxPosition = function boxPosition2(bb) {
            return function(node) {
              return constrainInBox(node, bb);
            };
          };
          var constrainOutsideBox = function constrainOutsideBox2(node, bb) {
            var pos = node.position();
            var x2 = pos.x, y2 = pos.y;
            var x1 = bb.x1, y1 = bb.y1, x22 = bb.x2, y22 = bb.y2;
            var inX = x1 <= x2 && x2 <= x22;
            var inY = y1 <= y2 && y2 <= y22;
            var abs = Math.abs;
            if (inX && inY) {
              var dx1 = abs(x1 - x2);
              var dx2 = abs(x22 - x2);
              var dy1 = abs(y1 - y2);
              var dy2 = abs(y22 - y2);
              var min4 = Math.min(dx1, dx2, dy1, dy2);
              if (min4 === dx1) {
                return { x: x1, y: y2 };
              } else if (min4 === dx2) {
                return { x: x22, y: y2 };
              } else if (min4 === dy1) {
                return { x: x2, y: y1 };
              } else {
                return { x: x2, y: y22 };
              }
            } else {
              return { x: x2, y: y2 };
            }
          };
          var outsideBoxPosition = function outsideBoxPosition2(bb) {
            return function(node) {
              return constrainOutsideBox(node, bb);
            };
          };
          var viewportPosition = function viewportPosition2(cy2) {
            return function(node) {
              var extent2 = cy2.extent();
              var w2 = node.outerWidth();
              var h2 = node.outerHeight();
              var bb = {
                x1: extent2.x1 + w2 / 2,
                x2: extent2.x2 - w2 / 2,
                y1: extent2.y1 + h2 / 2,
                y2: extent2.y2 - h2 / 2
              };
              return constrainInBox(node, bb);
            };
          };
          var meanListener = function meanListener2(rule) {
            return function(update3, cy2) {
              var matches33 = function matches34(ele) {
                return rule.matches(ele) && ele.neighborhood().length > 2 && !ele.grabbed();
              };
              bindOnRule(rule, cy2, "position", "node", function() {
                var movedNode = this;
                if (movedNode.neighborhood().some(matches33) || rule.meanOnSelfPosition(movedNode) && matches33(movedNode)) {
                  update3(cy2, [rule]);
                }
              });
              bindOnRule(rule, cy2, "add remove", "edge", function() {
                var edge = this;
                var src2 = cy2.getElementById(edge.data("source"));
                var tgt = cy2.getElementById(edge.data("target"));
                if ([src2, tgt].some(matches33)) {
                  update3(cy2, [rule]);
                }
              });
            };
          };
          var dragListener = function dragListener2(rule) {
            return function(update3, cy2) {
              bindOnRule(rule, cy2, "grab", "node", function() {
                var node = this;
                if (rule.dragWithMatches(node)) {
                  var p2 = node.position();
                  rule.grabbedNode = node;
                  rule.p1 = { x: p2.x, y: p2.y };
                  rule.delta = { x: 0, y: 0 };
                }
              });
              bindOnRule(rule, cy2, "drag", "node", function() {
                var node = this;
                if (node.same(rule.grabbedNode)) {
                  var d2 = rule.delta;
                  var p1 = rule.p1;
                  var p2 = node.position();
                  var p22 = { x: p2.x, y: p2.y };
                  d2.x = p22.x - p1.x;
                  d2.y = p22.y - p1.y;
                  rule.p1 = p22;
                  update3(cy2, [rule]);
                }
              });
              bindOnRule(rule, cy2, "free", "node", function() {
                rule.grabbedNode = null;
                rule.delta = null;
                rule.p1 = null;
              });
            };
          };
          var matchingNodesListener = function matchingNodesListener2(rule) {
            return function(update3, cy2) {
              bindOnRule(rule, cy2, "position", "node", function() {
                var movedNode = this;
                if (rule.matches(movedNode)) {
                  update3(cy2, [rule]);
                }
              });
            };
          };
          var getListener = function getListener2(cy2, rule) {
            if (rule.reposition === "mean") {
              return meanListener(rule);
            } else if (rule.reposition === "drag") {
              return dragListener(rule);
            } else if (isObject2(rule.reposition) || rule.when === "matching" || rule.reposition === "viewport") {
              return matchingNodesListener(rule);
            } else {
              return rule.when;
            }
          };
          var addRule = function addRule2(cy2, scratch, options2) {
            var rule = assign5({}, defaults3, options2);
            rule.getNewPos = getRepositioner(rule, cy2);
            rule.listener = getListener(cy2, rule);
            var nodesAreCollection = isCollection(rule.nodesMatching);
            if (nodesAreCollection) {
              rule.nodes = rule.nodesMatching.slice();
              rule.matches = function(ele) {
                return eleExists(ele) && _elesHasEle(rule.nodes, ele);
              };
            } else {
              var matches33 = getEleMatchesSpecFn(rule.nodesMatching);
              rule.matches = function(ele) {
                return eleExists(ele) && matches33(ele);
              };
            }
            if (rule.dragWith != null) {
              rule.dragWithMatches = getEleMatchesSpecFn(rule.dragWith);
            }
            rule.listener(function() {
              update2(cy2, [rule]);
            }, cy2);
            rule.enabled = true;
            scratch.rules.push(rule);
            return rule;
          };
          var bindForNodeList = function bindForNodeList2(cy2, scratch) {
            scratch.onAddNode = function(evt) {
              var target = evt.target;
              scratch.nodes.merge(target);
            };
            scratch.onRmNode = function(evt) {
              var target = evt.target;
              scratch.nodes.unmerge(target);
            };
            cy2.on("add", "node", scratch.onAddNode);
            cy2.on("remove", "node", scratch.onRmNode);
          };
          var unbindForNodeList = function unbindForNodeList2(cy2, scratch) {
            cy2.removeListener("add", "node", scratch.onAddNode);
            cy2.removeListener("remove", "node", scratch.onRmNode);
          };
          var update2 = function update3(cy2, rules) {
            var scratch = cy2.scratch().automove;
            rules = rules != null ? rules : scratch.rules;
            cy2.batch(function() {
              for (var i2 = 0; i2 < rules.length; i2++) {
                var rule = rules[i2];
                if (rule.destroyed || !rule.enabled) {
                  break;
                }
                var nodes3 = rule.nodes || scratch.nodes;
                for (var j2 = nodes3.length - 1; j2 >= 0; j2--) {
                  var node = nodes3[j2];
                  if (node.removed()) {
                    nodes3.unmerge(node);
                    continue;
                  }
                  if (!rule.matches(node)) {
                    continue;
                  }
                  var pos = node.position();
                  var newPos = rule.getNewPos(node);
                  var newPosIsDiff = newPos != null && (pos.x !== newPos.x || pos.y !== newPos.y);
                  if (newPosIsDiff) {
                    node.position(newPos);
                    node.trigger("automove", [rule]);
                  }
                }
              }
            });
          };
          var automove2 = function automove3(options2) {
            var cy2 = this;
            var scratch = cy2.scratch().automove = cy2.scratch().automove || {
              rules: []
            };
            if (scratch.rules.length === 0) {
              scratch.nodes = cy2.nodes().slice();
              bindForNodeList(cy2, scratch);
            }
            if (options2 === "destroy") {
              scratch.rules.forEach(function(r2) {
                unbindAllOnRule(r2);
                r2.destroyed = true;
              });
              scratch.rules.splice(0, scratch.rules.length);
              unbindForNodeList(cy2, scratch);
              return;
            }
            var rule = addRule(cy2, scratch, options2);
            update2(cy2, [rule]);
            return {
              apply: function apply2() {
                update2(cy2, [rule]);
              },
              disable: function disable() {
                this.toggle(false);
              },
              enable: function enable() {
                this.toggle(true);
              },
              enabled: function enabled() {
                return rule.enabled;
              },
              toggle: function toggle(on3) {
                rule.enabled = on3 !== void 0 ? on3 : !rule.enabled;
                if (rule.enabled) {
                  update2(cy2, [rule]);
                }
              },
              destroy: function destroy2() {
                var rules = scratch.rules;
                unbindAllOnRule(rule);
                rule.destroyed = true;
                rules.splice(rules.indexOf(rule), 1);
                if (rules.length === 0) {
                  unbindForNodeList(cy2, scratch);
                }
                return this;
              }
            };
          };
          module2.exports = automove2;
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.forEach(function(src2) {
              Object.keys(src2).forEach(function(k2) {
                return tgt[k2] = src2[k2];
              });
            });
            return tgt;
          };
        },
        /* 2 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var defaults3 = {
            // specify nodes that should be automoved with one of
            // - a function that returns true for matching nodes
            // - a selector that matches the nodes
            // - a collection of nodes (very good for performance)
            nodesMatching: function nodesMatching(node) {
              return false;
            },
            // specify how a node's position should be updated with one of
            // - function( node ){ return { x: 1, y: 2 }; } => put the node where the function returns
            // - { x1, y1, x2, y2 } => constrain the node position within the bounding box (in model co-ordinates)
            // - { x1, y1, x2, y2, type: 'inside' } => constrain the node position within the bounding box (in model co-ordinates)
            // - { x1, y1, x2, y2, type: 'outside' } => constrain the node position outside the bounding box (in model co-ordinates)
            // - 'mean' => put the node in the average position of its neighbourhood
            // - 'viewport' => keeps the node body within the viewport
            // - 'drag' => matching nodes are effectively dragged along
            reposition: "mean",
            // specify when the repositioning should occur by specifying a function that
            // calls update() when reposition updates should occur
            // - function( update ){ /* ... */ update(); } => a manual function for updating
            // - 'matching' => automatically update on position events for nodesMatching
            // - set efficiently and automatically for
            //   - reposition: 'mean'
            //   - reposition: { x1, y1, x2, y2 }
            //   - reposition: 'viewport'
            //   - reposition: 'drag'
            // - default/undefined => on a position event for any node (not as efficient...)
            when: void 0,
            //
            // customisation options for non-function `reposition` values
            //
            // `reposition: 'mean'`
            // specify nodes that should be ignored in the mean calculation
            // - a function that returns true for nodes to be ignored
            // - a selector that matches the nodes to be ignored
            // - a collection of nodes to be ignored (very good for performance)
            meanIgnores: function meanIgnores(node) {
              return false;
            },
            // specify whether moving a particular `nodesMatching` node causes repositioning
            // - true : the mid node can't be independently moved/dragged
            // - false : the mid node can be independently moved/dragged (useful if you want the mid node to use `reposition: 'drag' in another rule with its neighbourhood`)
            meanOnSelfPosition: function meanOnSelfPosition(node) {
              return true;
            },
            // `reposition: 'drag'`
            // specify nodes that when dragged cause the matched nodes to move along (i.e. the master nodes)
            // - a function that returns true for nodes to be listened to for drag events
            // - a selector that matches the nodes to be listened to for drag events
            // - a collection of nodes to be listened to for drag events (very good for performance)
            dragWith: function dragWith(node) {
              return false;
            }
          };
          module2.exports = defaults3;
        },
        /* 3 */
        /***/
        function(module2, exports2, __webpack_require__) {
          var automove2 = __webpack_require__(0);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("core", "automove", automove2);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        }
        /******/
      ])
    );
  });
})(cytoscapeAutomove);
var cytoscapeAutomoveExports = cytoscapeAutomove.exports;
const automove = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeAutomoveExports);
function instance$5($$self) {
  cytoscape$2.use(automove);
  let cy2 = get_store_value(cyStore);
  onMount(() => {
    cy2.automove({
      nodesMatching: ".automove-viewport",
      reposition: "viewport"
    });
  });
  return [];
}
class AutoMove extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$5, null, safe_not_equal, {});
  }
}
var lib = { exports: {} };
var _FullInternals = {};
var _CoreInternals = {};
var Global = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports._registerNode = exports._NODES_REGISTRY = exports.Konva = exports.glob = exports._parseUA = void 0;
  var PI_OVER_180 = Math.PI / 180;
  function detectBrowser() {
    return typeof window !== "undefined" && ({}.toString.call(window) === "[object Window]" || {}.toString.call(window) === "[object global]");
  }
  var _detectIE = function(ua) {
    var msie = ua.indexOf("msie ");
    if (msie > 0) {
      return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
    }
    var trident = ua.indexOf("trident/");
    if (trident > 0) {
      var rv = ua.indexOf("rv:");
      return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
    }
    var edge = ua.indexOf("edge/");
    if (edge > 0) {
      return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
    }
    return false;
  };
  var _parseUA = function(userAgent) {
    var ua = userAgent.toLowerCase(), match2 = /(chrome)[ /]([\w.]+)/.exec(ua) || /(webkit)[ /]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ /]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [], mobile = !!userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i), ieMobile = !!userAgent.match(/IEMobile/i);
    return {
      browser: match2[1] || "",
      version: match2[2] || "0",
      isIE: _detectIE(ua),
      mobile,
      ieMobile
    };
  };
  exports._parseUA = _parseUA;
  exports.glob = typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : {};
  exports.Konva = {
    _global: exports.glob,
    version: "7.2.5",
    isBrowser: detectBrowser(),
    isUnminified: /param/.test((function(param) {
    }).toString()),
    dblClickWindow: 400,
    getAngle: function(angle) {
      return exports.Konva.angleDeg ? angle * PI_OVER_180 : angle;
    },
    enableTrace: false,
    _pointerEventsEnabled: false,
    hitOnDragEnabled: false,
    captureTouchEventsEnabled: false,
    listenClickTap: false,
    inDblClickWindow: false,
    pixelRatio: void 0,
    dragDistance: 3,
    angleDeg: true,
    showWarnings: true,
    dragButtons: [0, 1],
    isDragging: function() {
      return exports.Konva["DD"].isDragging;
    },
    isDragReady: function() {
      return !!exports.Konva["DD"].node;
    },
    UA: exports._parseUA(exports.glob.navigator && exports.glob.navigator.userAgent || ""),
    document: exports.glob.document,
    _injectGlobal: function(Konva2) {
      exports.glob.Konva = Konva2;
    },
    _parseUA: exports._parseUA
  };
  exports._NODES_REGISTRY = {};
  var _registerNode = function(NodeClass) {
    exports._NODES_REGISTRY[NodeClass.prototype.getClassName()] = NodeClass;
    exports.Konva[NodeClass.prototype.getClassName()] = NodeClass;
  };
  exports._registerNode = _registerNode;
})(Global);
var Util = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Util = exports.Transform = exports.Collection = void 0;
  var Global_12 = Global;
  var Collection3 = function() {
    function Collection4() {
    }
    Collection4.toCollection = function(arr) {
      var collection4 = new Collection4(), len = arr.length, n2;
      for (n2 = 0; n2 < len; n2++) {
        collection4.push(arr[n2]);
      }
      return collection4;
    };
    Collection4._mapMethod = function(methodName) {
      Collection4.prototype[methodName] = function() {
        var len = this.length, i2;
        var args = [].slice.call(arguments);
        for (i2 = 0; i2 < len; i2++) {
          this[i2][methodName].apply(this[i2], args);
        }
        return this;
      };
    };
    Collection4.mapMethods = function(constructor) {
      var prot = constructor.prototype;
      for (var methodName in prot) {
        Collection4._mapMethod(methodName);
      }
    };
    return Collection4;
  }();
  exports.Collection = Collection3;
  Collection3.prototype = [];
  Collection3.prototype.each = function(func) {
    for (var n2 = 0; n2 < this.length; n2++) {
      func(this[n2], n2);
    }
  };
  Collection3.prototype.toArray = function() {
    var arr = [], len = this.length, n2;
    for (n2 = 0; n2 < len; n2++) {
      arr.push(this[n2]);
    }
    return arr;
  };
  var Transform = function() {
    function Transform2(m2) {
      if (m2 === void 0) {
        m2 = [1, 0, 0, 1, 0, 0];
      }
      this.dirty = false;
      this.m = m2 && m2.slice() || [1, 0, 0, 1, 0, 0];
    }
    Transform2.prototype.reset = function() {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 1;
      this.m[4] = 0;
      this.m[5] = 0;
    };
    Transform2.prototype.copy = function() {
      return new Transform2(this.m);
    };
    Transform2.prototype.copyInto = function(tr) {
      tr.m[0] = this.m[0];
      tr.m[1] = this.m[1];
      tr.m[2] = this.m[2];
      tr.m[3] = this.m[3];
      tr.m[4] = this.m[4];
      tr.m[5] = this.m[5];
    };
    Transform2.prototype.point = function(point) {
      var m2 = this.m;
      return {
        x: m2[0] * point.x + m2[2] * point.y + m2[4],
        y: m2[1] * point.x + m2[3] * point.y + m2[5]
      };
    };
    Transform2.prototype.translate = function(x2, y2) {
      this.m[4] += this.m[0] * x2 + this.m[2] * y2;
      this.m[5] += this.m[1] * x2 + this.m[3] * y2;
      return this;
    };
    Transform2.prototype.scale = function(sx, sy) {
      this.m[0] *= sx;
      this.m[1] *= sx;
      this.m[2] *= sy;
      this.m[3] *= sy;
      return this;
    };
    Transform2.prototype.rotate = function(rad) {
      var c2 = Math.cos(rad);
      var s2 = Math.sin(rad);
      var m11 = this.m[0] * c2 + this.m[2] * s2;
      var m12 = this.m[1] * c2 + this.m[3] * s2;
      var m21 = this.m[0] * -s2 + this.m[2] * c2;
      var m22 = this.m[1] * -s2 + this.m[3] * c2;
      this.m[0] = m11;
      this.m[1] = m12;
      this.m[2] = m21;
      this.m[3] = m22;
      return this;
    };
    Transform2.prototype.getTranslation = function() {
      return {
        x: this.m[4],
        y: this.m[5]
      };
    };
    Transform2.prototype.skew = function(sx, sy) {
      var m11 = this.m[0] + this.m[2] * sy;
      var m12 = this.m[1] + this.m[3] * sy;
      var m21 = this.m[2] + this.m[0] * sx;
      var m22 = this.m[3] + this.m[1] * sx;
      this.m[0] = m11;
      this.m[1] = m12;
      this.m[2] = m21;
      this.m[3] = m22;
      return this;
    };
    Transform2.prototype.multiply = function(matrix2) {
      var m11 = this.m[0] * matrix2.m[0] + this.m[2] * matrix2.m[1];
      var m12 = this.m[1] * matrix2.m[0] + this.m[3] * matrix2.m[1];
      var m21 = this.m[0] * matrix2.m[2] + this.m[2] * matrix2.m[3];
      var m22 = this.m[1] * matrix2.m[2] + this.m[3] * matrix2.m[3];
      var dx = this.m[0] * matrix2.m[4] + this.m[2] * matrix2.m[5] + this.m[4];
      var dy = this.m[1] * matrix2.m[4] + this.m[3] * matrix2.m[5] + this.m[5];
      this.m[0] = m11;
      this.m[1] = m12;
      this.m[2] = m21;
      this.m[3] = m22;
      this.m[4] = dx;
      this.m[5] = dy;
      return this;
    };
    Transform2.prototype.invert = function() {
      var d2 = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
      var m0 = this.m[3] * d2;
      var m1 = -this.m[1] * d2;
      var m2 = -this.m[2] * d2;
      var m3 = this.m[0] * d2;
      var m4 = d2 * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
      var m5 = d2 * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
      this.m[0] = m0;
      this.m[1] = m1;
      this.m[2] = m2;
      this.m[3] = m3;
      this.m[4] = m4;
      this.m[5] = m5;
      return this;
    };
    Transform2.prototype.getMatrix = function() {
      return this.m;
    };
    Transform2.prototype.setAbsolutePosition = function(x2, y2) {
      var m0 = this.m[0], m1 = this.m[1], m2 = this.m[2], m3 = this.m[3], m4 = this.m[4], m5 = this.m[5], yt2 = (m0 * (y2 - m5) - m1 * (x2 - m4)) / (m0 * m3 - m1 * m2), xt2 = (x2 - m4 - m2 * yt2) / m0;
      return this.translate(xt2, yt2);
    };
    Transform2.prototype.decompose = function() {
      var a2 = this.m[0];
      var b2 = this.m[1];
      var c2 = this.m[2];
      var d2 = this.m[3];
      var e2 = this.m[4];
      var f2 = this.m[5];
      var delta = a2 * d2 - b2 * c2;
      var result = {
        x: e2,
        y: f2,
        rotation: 0,
        scaleX: 0,
        scaleY: 0,
        skewX: 0,
        skewY: 0
      };
      if (a2 != 0 || b2 != 0) {
        var r2 = Math.sqrt(a2 * a2 + b2 * b2);
        result.rotation = b2 > 0 ? Math.acos(a2 / r2) : -Math.acos(a2 / r2);
        result.scaleX = r2;
        result.scaleY = delta / r2;
        result.skewX = (a2 * c2 + b2 * d2) / delta;
        result.skewY = 0;
      } else if (c2 != 0 || d2 != 0) {
        var s2 = Math.sqrt(c2 * c2 + d2 * d2);
        result.rotation = Math.PI / 2 - (d2 > 0 ? Math.acos(-c2 / s2) : -Math.acos(c2 / s2));
        result.scaleX = delta / s2;
        result.scaleY = s2;
        result.skewX = 0;
        result.skewY = (a2 * c2 + b2 * d2) / delta;
      } else
        ;
      result.rotation = exports.Util._getRotation(result.rotation);
      return result;
    };
    return Transform2;
  }();
  exports.Transform = Transform;
  var OBJECT_ARRAY = "[object Array]", OBJECT_NUMBER = "[object Number]", OBJECT_STRING = "[object String]", OBJECT_BOOLEAN = "[object Boolean]", PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH2 = "#", EMPTY_STRING2 = "", ZERO = "0", KONVA_WARNING = "Konva warning: ", KONVA_ERROR = "Konva error: ", RGB_PAREN = "rgb(", COLORS = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 132, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 255, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 203],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [119, 128, 144],
    slategrey: [119, 128, 144],
    snow: [255, 255, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    transparent: [255, 255, 255, 0],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 5]
  }, RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, animQueue = [];
  exports.Util = {
    _isElement: function(obj) {
      return !!(obj && obj.nodeType == 1);
    },
    _isFunction: function(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    },
    _isPlainObject: function(obj) {
      return !!obj && obj.constructor === Object;
    },
    _isArray: function(obj) {
      return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
    },
    _isNumber: function(obj) {
      return Object.prototype.toString.call(obj) === OBJECT_NUMBER && !isNaN(obj) && isFinite(obj);
    },
    _isString: function(obj) {
      return Object.prototype.toString.call(obj) === OBJECT_STRING;
    },
    _isBoolean: function(obj) {
      return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;
    },
    isObject: function(val) {
      return val instanceof Object;
    },
    isValidSelector: function(selector) {
      if (typeof selector !== "string") {
        return false;
      }
      var firstChar = selector[0];
      return firstChar === "#" || firstChar === "." || firstChar === firstChar.toUpperCase();
    },
    _sign: function(number3) {
      if (number3 === 0) {
        return 1;
      }
      if (number3 > 0) {
        return 1;
      } else {
        return -1;
      }
    },
    requestAnimFrame: function(callback) {
      animQueue.push(callback);
      if (animQueue.length === 1) {
        requestAnimationFrame(function() {
          var queue = animQueue;
          animQueue = [];
          queue.forEach(function(cb) {
            cb();
          });
        });
      }
    },
    createCanvasElement: function() {
      var canvas = document.createElement("canvas");
      try {
        canvas.style = canvas.style || {};
      } catch (e2) {
      }
      return canvas;
    },
    createImageElement: function() {
      return document.createElement("img");
    },
    _isInDocument: function(el) {
      while (el = el.parentNode) {
        if (el == document) {
          return true;
        }
      }
      return false;
    },
    _simplifyArray: function(arr) {
      var retArr = [], len = arr.length, util2 = exports.Util, n2, val;
      for (n2 = 0; n2 < len; n2++) {
        val = arr[n2];
        if (util2._isNumber(val)) {
          val = Math.round(val * 1e3) / 1e3;
        } else if (!util2._isString(val)) {
          val = val.toString();
        }
        retArr.push(val);
      }
      return retArr;
    },
    _urlToImage: function(url, callback) {
      var imageObj = new Global_12.glob.Image();
      imageObj.onload = function() {
        callback(imageObj);
      };
      imageObj.src = url;
    },
    _rgbToHex: function(r2, g2, b2) {
      return ((1 << 24) + (r2 << 16) + (g2 << 8) + b2).toString(16).slice(1);
    },
    _hexToRgb: function(hex) {
      hex = hex.replace(HASH2, EMPTY_STRING2);
      var bigint = parseInt(hex, 16);
      return {
        r: bigint >> 16 & 255,
        g: bigint >> 8 & 255,
        b: bigint & 255
      };
    },
    getRandomColor: function() {
      var randColor = (Math.random() * 16777215 << 0).toString(16);
      while (randColor.length < 6) {
        randColor = ZERO + randColor;
      }
      return HASH2 + randColor;
    },
    get: function(val, def) {
      if (val === void 0) {
        return def;
      } else {
        return val;
      }
    },
    getRGB: function(color) {
      var rgb;
      if (color in COLORS) {
        rgb = COLORS[color];
        return {
          r: rgb[0],
          g: rgb[1],
          b: rgb[2]
        };
      } else if (color[0] === HASH2) {
        return this._hexToRgb(color.substring(1));
      } else if (color.substr(0, 4) === RGB_PAREN) {
        rgb = RGB_REGEX.exec(color.replace(/ /g, ""));
        return {
          r: parseInt(rgb[1], 10),
          g: parseInt(rgb[2], 10),
          b: parseInt(rgb[3], 10)
        };
      } else {
        return {
          r: 0,
          g: 0,
          b: 0
        };
      }
    },
    colorToRGBA: function(str) {
      str = str || "black";
      return exports.Util._namedColorToRBA(str) || exports.Util._hex3ColorToRGBA(str) || exports.Util._hex6ColorToRGBA(str) || exports.Util._rgbColorToRGBA(str) || exports.Util._rgbaColorToRGBA(str) || exports.Util._hslColorToRGBA(str);
    },
    _namedColorToRBA: function(str) {
      var c2 = COLORS[str.toLowerCase()];
      if (!c2) {
        return null;
      }
      return {
        r: c2[0],
        g: c2[1],
        b: c2[2],
        a: 1
      };
    },
    _rgbColorToRGBA: function(str) {
      if (str.indexOf("rgb(") === 0) {
        str = str.match(/rgb\(([^)]+)\)/)[1];
        var parts = str.split(/ *, */).map(Number);
        return {
          r: parts[0],
          g: parts[1],
          b: parts[2],
          a: 1
        };
      }
    },
    _rgbaColorToRGBA: function(str) {
      if (str.indexOf("rgba(") === 0) {
        str = str.match(/rgba\(([^)]+)\)/)[1];
        var parts = str.split(/ *, */).map(Number);
        return {
          r: parts[0],
          g: parts[1],
          b: parts[2],
          a: parts[3]
        };
      }
    },
    _hex6ColorToRGBA: function(str) {
      if (str[0] === "#" && str.length === 7) {
        return {
          r: parseInt(str.slice(1, 3), 16),
          g: parseInt(str.slice(3, 5), 16),
          b: parseInt(str.slice(5, 7), 16),
          a: 1
        };
      }
    },
    _hex3ColorToRGBA: function(str) {
      if (str[0] === "#" && str.length === 4) {
        return {
          r: parseInt(str[1] + str[1], 16),
          g: parseInt(str[2] + str[2], 16),
          b: parseInt(str[3] + str[3], 16),
          a: 1
        };
      }
    },
    _hslColorToRGBA: function(str) {
      if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(str)) {
        var _a2 = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(str);
        _a2[0];
        var hsl = _a2.slice(1);
        var h2 = Number(hsl[0]) / 360;
        var s2 = Number(hsl[1]) / 100;
        var l2 = Number(hsl[2]) / 100;
        var t22 = void 0;
        var t3 = void 0;
        var val = void 0;
        if (s2 === 0) {
          val = l2 * 255;
          return {
            r: Math.round(val),
            g: Math.round(val),
            b: Math.round(val),
            a: 1
          };
        }
        if (l2 < 0.5) {
          t22 = l2 * (1 + s2);
        } else {
          t22 = l2 + s2 - l2 * s2;
        }
        var t1 = 2 * l2 - t22;
        var rgb = [0, 0, 0];
        for (var i2 = 0; i2 < 3; i2++) {
          t3 = h2 + 1 / 3 * -(i2 - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t22 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t22;
          } else if (3 * t3 < 2) {
            val = t1 + (t22 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i2] = val * 255;
        }
        return {
          r: Math.round(rgb[0]),
          g: Math.round(rgb[1]),
          b: Math.round(rgb[2]),
          a: 1
        };
      }
    },
    haveIntersection: function(r1, r2) {
      return !(r2.x > r1.x + r1.width || r2.x + r2.width < r1.x || r2.y > r1.y + r1.height || r2.y + r2.height < r1.y);
    },
    cloneObject: function(obj) {
      var retObj = {};
      for (var key in obj) {
        if (this._isPlainObject(obj[key])) {
          retObj[key] = this.cloneObject(obj[key]);
        } else if (this._isArray(obj[key])) {
          retObj[key] = this.cloneArray(obj[key]);
        } else {
          retObj[key] = obj[key];
        }
      }
      return retObj;
    },
    cloneArray: function(arr) {
      return arr.slice(0);
    },
    _degToRad: function(deg) {
      return deg * PI_OVER_DEG180;
    },
    _radToDeg: function(rad) {
      return rad * DEG180_OVER_PI;
    },
    _getRotation: function(radians) {
      return Global_12.Konva.angleDeg ? exports.Util._radToDeg(radians) : radians;
    },
    _capitalize: function(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    },
    throw: function(str) {
      throw new Error(KONVA_ERROR + str);
    },
    error: function(str) {
      console.error(KONVA_ERROR + str);
    },
    warn: function(str) {
      if (!Global_12.Konva.showWarnings) {
        return;
      }
      console.warn(KONVA_WARNING + str);
    },
    extend: function(child, parent4) {
      function Ctor() {
        this.constructor = child;
      }
      Ctor.prototype = parent4.prototype;
      var oldProto = child.prototype;
      child.prototype = new Ctor();
      for (var key in oldProto) {
        if (oldProto.hasOwnProperty(key)) {
          child.prototype[key] = oldProto[key];
        }
      }
      child.__super__ = parent4.prototype;
      child.super = parent4;
    },
    _getControlPoints: function(x0, y0, x1, y1, x2, y2, t3) {
      var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = t3 * d01 / (d01 + d12), fb = t3 * d12 / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);
      return [p1x, p1y, p2x, p2y];
    },
    _expandPoints: function(p2, tension) {
      var len = p2.length, allPoints = [], n2, cp;
      for (n2 = 2; n2 < len - 2; n2 += 2) {
        cp = exports.Util._getControlPoints(p2[n2 - 2], p2[n2 - 1], p2[n2], p2[n2 + 1], p2[n2 + 2], p2[n2 + 3], tension);
        if (isNaN(cp[0])) {
          continue;
        }
        allPoints.push(cp[0]);
        allPoints.push(cp[1]);
        allPoints.push(p2[n2]);
        allPoints.push(p2[n2 + 1]);
        allPoints.push(cp[2]);
        allPoints.push(cp[3]);
      }
      return allPoints;
    },
    each: function(obj, func) {
      for (var key in obj) {
        func(key, obj[key]);
      }
    },
    _inRange: function(val, left, right) {
      return left <= val && val < right;
    },
    _getProjectionToSegment: function(x1, y1, x2, y2, x3, y3) {
      var x4, y4, dist4;
      var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
      if (pd2 == 0) {
        x4 = x1;
        y4 = y1;
        dist4 = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
      } else {
        var u2 = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
        if (u2 < 0) {
          x4 = x1;
          y4 = y1;
          dist4 = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
        } else if (u2 > 1) {
          x4 = x2;
          y4 = y2;
          dist4 = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
        } else {
          x4 = x1 + u2 * (x2 - x1);
          y4 = y1 + u2 * (y2 - y1);
          dist4 = (x4 - x3) * (x4 - x3) + (y4 - y3) * (y4 - y3);
        }
      }
      return [x4, y4, dist4];
    },
    _getProjectionToLine: function(pt2, line, isClosed) {
      var pc = exports.Util.cloneObject(pt2);
      var dist4 = Number.MAX_VALUE;
      line.forEach(function(p1, i2) {
        if (!isClosed && i2 === line.length - 1) {
          return;
        }
        var p2 = line[(i2 + 1) % line.length];
        var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt2.x, pt2.y);
        var px = proj[0], py = proj[1], pdist = proj[2];
        if (pdist < dist4) {
          pc.x = px;
          pc.y = py;
          dist4 = pdist;
        }
      });
      return pc;
    },
    _prepareArrayForTween: function(startArray, endArray, isClosed) {
      var n2, start = [], end = [];
      if (startArray.length > endArray.length) {
        var temp = endArray;
        endArray = startArray;
        startArray = temp;
      }
      for (n2 = 0; n2 < startArray.length; n2 += 2) {
        start.push({
          x: startArray[n2],
          y: startArray[n2 + 1]
        });
      }
      for (n2 = 0; n2 < endArray.length; n2 += 2) {
        end.push({
          x: endArray[n2],
          y: endArray[n2 + 1]
        });
      }
      var newStart = [];
      end.forEach(function(point) {
        var pr = exports.Util._getProjectionToLine(point, start, isClosed);
        newStart.push(pr.x);
        newStart.push(pr.y);
      });
      return newStart;
    },
    _prepareToStringify: function(obj) {
      var desc;
      obj.visitedByCircularReferenceRemoval = true;
      for (var key in obj) {
        if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == "object")) {
          continue;
        }
        desc = Object.getOwnPropertyDescriptor(obj, key);
        if (obj[key].visitedByCircularReferenceRemoval || exports.Util._isElement(obj[key])) {
          if (desc.configurable) {
            delete obj[key];
          } else {
            return null;
          }
        } else if (exports.Util._prepareToStringify(obj[key]) === null) {
          if (desc.configurable) {
            delete obj[key];
          } else {
            return null;
          }
        }
      }
      delete obj.visitedByCircularReferenceRemoval;
      return obj;
    },
    _assign: function(target, source) {
      for (var key in source) {
        target[key] = source[key];
      }
      return target;
    },
    _getFirstPointerId: function(evt) {
      if (!evt.touches) {
        return 999;
      } else {
        return evt.changedTouches[0].identifier;
      }
    }
  };
})(Util);
var Node = {};
var Factory = {};
var Validators = {};
Object.defineProperty(Validators, "__esModule", { value: true });
Validators.getComponentValidator = Validators.getBooleanValidator = Validators.getNumberArrayValidator = Validators.getFunctionValidator = Validators.getStringOrGradientValidator = Validators.getStringValidator = Validators.getNumberOrAutoValidator = Validators.getNumberOrArrayOfNumbersValidator = Validators.getNumberValidator = Validators.alphaComponent = Validators.RGBComponent = void 0;
var Global_1$p = Global;
var Util_1$r = Util;
function _formatValue(val) {
  if (Util_1$r.Util._isString(val)) {
    return '"' + val + '"';
  }
  if (Object.prototype.toString.call(val) === "[object Number]") {
    return val;
  }
  if (Util_1$r.Util._isBoolean(val)) {
    return val;
  }
  return Object.prototype.toString.call(val);
}
function RGBComponent(val) {
  if (val > 255) {
    return 255;
  } else if (val < 0) {
    return 0;
  }
  return Math.round(val);
}
Validators.RGBComponent = RGBComponent;
function alphaComponent(val) {
  if (val > 1) {
    return 1;
  } else if (val < 1e-4) {
    return 1e-4;
  }
  return val;
}
Validators.alphaComponent = alphaComponent;
function getNumberValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      if (!Util_1$r.Util._isNumber(val)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a number.');
      }
      return val;
    };
  }
}
Validators.getNumberValidator = getNumberValidator;
function getNumberOrArrayOfNumbersValidator(noOfElements) {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      var isNumber = Util_1$r.Util._isNumber(val);
      var isValidArray = Util_1$r.Util._isArray(val) && val.length == noOfElements;
      if (!isNumber && !isValidArray) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a number or Array<number>(' + noOfElements + ")");
      }
      return val;
    };
  }
}
Validators.getNumberOrArrayOfNumbersValidator = getNumberOrArrayOfNumbersValidator;
function getNumberOrAutoValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      var isNumber = Util_1$r.Util._isNumber(val);
      var isAuto = val === "auto";
      if (!(isNumber || isAuto)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a number or "auto".');
      }
      return val;
    };
  }
}
Validators.getNumberOrAutoValidator = getNumberOrAutoValidator;
function getStringValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      if (!Util_1$r.Util._isString(val)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a string.');
      }
      return val;
    };
  }
}
Validators.getStringValidator = getStringValidator;
function getStringOrGradientValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      var isString = Util_1$r.Util._isString(val);
      var isGradient = Object.prototype.toString.call(val) === "[object CanvasGradient]";
      if (!(isString || isGradient)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a string or a native gradient.');
      }
      return val;
    };
  }
}
Validators.getStringOrGradientValidator = getStringOrGradientValidator;
function getFunctionValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      if (!Util_1$r.Util._isFunction(val)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a function.');
      }
      return val;
    };
  }
}
Validators.getFunctionValidator = getFunctionValidator;
function getNumberArrayValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      if (!Util_1$r.Util._isArray(val)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a array of numbers.');
      } else {
        val.forEach(function(item) {
          if (!Util_1$r.Util._isNumber(item)) {
            Util_1$r.Util.warn('"' + attr2 + '" attribute has non numeric element ' + item + ". Make sure that all elements are numbers.");
          }
        });
      }
      return val;
    };
  }
}
Validators.getNumberArrayValidator = getNumberArrayValidator;
function getBooleanValidator() {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      var isBool = val === true || val === false;
      if (!isBool) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be a boolean.');
      }
      return val;
    };
  }
}
Validators.getBooleanValidator = getBooleanValidator;
function getComponentValidator(components2) {
  if (Global_1$p.Konva.isUnminified) {
    return function(val, attr2) {
      if (!Util_1$r.Util.isObject(val)) {
        Util_1$r.Util.warn(_formatValue(val) + ' is a not valid value for "' + attr2 + '" attribute. The value should be an object with properties ' + components2);
      }
      return val;
    };
  }
}
Validators.getComponentValidator = getComponentValidator;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Factory = void 0;
  var Util_12 = Util;
  var Validators_12 = Validators;
  var GET = "get", SET = "set";
  exports.Factory = {
    addGetterSetter: function(constructor, attr2, def, validator, after) {
      exports.Factory.addGetter(constructor, attr2, def);
      exports.Factory.addSetter(constructor, attr2, validator, after);
      exports.Factory.addOverloadedGetterSetter(constructor, attr2);
    },
    addGetter: function(constructor, attr2, def) {
      var method = GET + Util_12.Util._capitalize(attr2);
      constructor.prototype[method] = constructor.prototype[method] || function() {
        var val = this.attrs[attr2];
        return val === void 0 ? def : val;
      };
    },
    addSetter: function(constructor, attr2, validator, after) {
      var method = SET + Util_12.Util._capitalize(attr2);
      if (!constructor.prototype[method]) {
        exports.Factory.overWriteSetter(constructor, attr2, validator, after);
      }
    },
    overWriteSetter: function(constructor, attr2, validator, after) {
      var method = SET + Util_12.Util._capitalize(attr2);
      constructor.prototype[method] = function(val) {
        if (validator && val !== void 0 && val !== null) {
          val = validator.call(this, val, attr2);
        }
        this._setAttr(attr2, val);
        if (after) {
          after.call(this);
        }
        return this;
      };
    },
    addComponentsGetterSetter: function(constructor, attr2, components2, validator, after) {
      var len = components2.length, capitalize3 = Util_12.Util._capitalize, getter = GET + capitalize3(attr2), setter = SET + capitalize3(attr2), n2, component2;
      constructor.prototype[getter] = function() {
        var ret = {};
        for (n2 = 0; n2 < len; n2++) {
          component2 = components2[n2];
          ret[component2] = this.getAttr(attr2 + capitalize3(component2));
        }
        return ret;
      };
      var basicValidator = Validators_12.getComponentValidator(components2);
      constructor.prototype[setter] = function(val) {
        var oldVal = this.attrs[attr2], key;
        if (validator) {
          val = validator.call(this, val);
        }
        if (basicValidator) {
          basicValidator.call(this, val, attr2);
        }
        for (key in val) {
          if (!val.hasOwnProperty(key)) {
            continue;
          }
          this._setAttr(attr2 + capitalize3(key), val[key]);
        }
        this._fireChangeEvent(attr2, oldVal, val);
        if (after) {
          after.call(this);
        }
        return this;
      };
      exports.Factory.addOverloadedGetterSetter(constructor, attr2);
    },
    addOverloadedGetterSetter: function(constructor, attr2) {
      var capitalizedAttr = Util_12.Util._capitalize(attr2), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;
      constructor.prototype[attr2] = function() {
        if (arguments.length) {
          this[setter](arguments[0]);
          return this;
        }
        return this[getter]();
      };
    },
    addDeprecatedGetterSetter: function(constructor, attr2, def, validator) {
      Util_12.Util.error("Adding deprecated " + attr2);
      var method = GET + Util_12.Util._capitalize(attr2);
      var message = attr2 + " property is deprecated and will be removed soon. Look at Konva change log for more information.";
      constructor.prototype[method] = function() {
        Util_12.Util.error(message);
        var val = this.attrs[attr2];
        return val === void 0 ? def : val;
      };
      exports.Factory.addSetter(constructor, attr2, validator, function() {
        Util_12.Util.error(message);
      });
      exports.Factory.addOverloadedGetterSetter(constructor, attr2);
    },
    backCompat: function(constructor, methods) {
      Util_12.Util.each(methods, function(oldMethodName, newMethodName) {
        var method = constructor.prototype[newMethodName];
        var oldGetter = GET + Util_12.Util._capitalize(oldMethodName);
        var oldSetter = SET + Util_12.Util._capitalize(oldMethodName);
        function deprecated() {
          method.apply(this, arguments);
          Util_12.Util.error('"' + oldMethodName + '" method is deprecated and will be removed soon. Use ""' + newMethodName + '" instead.');
        }
        constructor.prototype[oldMethodName] = deprecated;
        constructor.prototype[oldGetter] = deprecated;
        constructor.prototype[oldSetter] = deprecated;
      });
    },
    afterSetFilter: function() {
      this._filterUpToDate = false;
    }
  };
})(Factory);
var Canvas$1 = {};
var Context$1 = {};
var __extends$m = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Context$1, "__esModule", { value: true });
Context$1.HitContext = Context$1.SceneContext = Context$1.Context = void 0;
var Util_1$q = Util;
var Global_1$o = Global;
var COMMA = ",", OPEN_PAREN = "(", CLOSE_PAREN = ")", OPEN_PAREN_BRACKET = "([", CLOSE_BRACKET_PAREN = "])", SEMICOLON = ";", DOUBLE_PAREN = "()", EQUALS = "=", CONTEXT_METHODS = [
  "arc",
  "arcTo",
  "beginPath",
  "bezierCurveTo",
  "clearRect",
  "clip",
  "closePath",
  "createLinearGradient",
  "createPattern",
  "createRadialGradient",
  "drawImage",
  "ellipse",
  "fill",
  "fillText",
  "getImageData",
  "createImageData",
  "lineTo",
  "moveTo",
  "putImageData",
  "quadraticCurveTo",
  "rect",
  "restore",
  "rotate",
  "save",
  "scale",
  "setLineDash",
  "setTransform",
  "stroke",
  "strokeText",
  "transform",
  "translate"
];
var CONTEXT_PROPERTIES = [
  "fillStyle",
  "strokeStyle",
  "shadowColor",
  "shadowBlur",
  "shadowOffsetX",
  "shadowOffsetY",
  "lineCap",
  "lineDashOffset",
  "lineJoin",
  "lineWidth",
  "miterLimit",
  "font",
  "textAlign",
  "textBaseline",
  "globalAlpha",
  "globalCompositeOperation",
  "imageSmoothingEnabled"
];
var traceArrMax = 100;
var Context = function() {
  function Context2(canvas) {
    this.canvas = canvas;
    this._context = canvas._canvas.getContext("2d");
    if (Global_1$o.Konva.enableTrace) {
      this.traceArr = [];
      this._enableTrace();
    }
  }
  Context2.prototype.fillShape = function(shape) {
    if (shape.fillEnabled()) {
      this._fill(shape);
    }
  };
  Context2.prototype._fill = function(shape) {
  };
  Context2.prototype.strokeShape = function(shape) {
    if (shape.hasStroke()) {
      this._stroke(shape);
    }
  };
  Context2.prototype._stroke = function(shape) {
  };
  Context2.prototype.fillStrokeShape = function(shape) {
    if (shape.attrs.fillAfterStrokeEnabled) {
      this.strokeShape(shape);
      this.fillShape(shape);
    } else {
      this.fillShape(shape);
      this.strokeShape(shape);
    }
  };
  Context2.prototype.getTrace = function(relaxed) {
    var traceArr = this.traceArr, len = traceArr.length, str = "", n2, trace, method, args;
    for (n2 = 0; n2 < len; n2++) {
      trace = traceArr[n2];
      method = trace.method;
      if (method) {
        args = trace.args;
        str += method;
        if (relaxed) {
          str += DOUBLE_PAREN;
        } else {
          if (Util_1$q.Util._isArray(args[0])) {
            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
          } else {
            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
          }
        }
      } else {
        str += trace.property;
        if (!relaxed) {
          str += EQUALS + trace.val;
        }
      }
      str += SEMICOLON;
    }
    return str;
  };
  Context2.prototype.clearTrace = function() {
    this.traceArr = [];
  };
  Context2.prototype._trace = function(str) {
    var traceArr = this.traceArr, len;
    traceArr.push(str);
    len = traceArr.length;
    if (len >= traceArrMax) {
      traceArr.shift();
    }
  };
  Context2.prototype.reset = function() {
    var pixelRatio = this.getCanvas().getPixelRatio();
    this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
  };
  Context2.prototype.getCanvas = function() {
    return this.canvas;
  };
  Context2.prototype.clear = function(bounds2) {
    var canvas = this.getCanvas();
    if (bounds2) {
      this.clearRect(bounds2.x || 0, bounds2.y || 0, bounds2.width || 0, bounds2.height || 0);
    } else {
      this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
    }
  };
  Context2.prototype._applyLineCap = function(shape) {
    var lineCap = shape.getLineCap();
    if (lineCap) {
      this.setAttr("lineCap", lineCap);
    }
  };
  Context2.prototype._applyOpacity = function(shape) {
    var absOpacity = shape.getAbsoluteOpacity();
    if (absOpacity !== 1) {
      this.setAttr("globalAlpha", absOpacity);
    }
  };
  Context2.prototype._applyLineJoin = function(shape) {
    var lineJoin = shape.attrs.lineJoin;
    if (lineJoin) {
      this.setAttr("lineJoin", lineJoin);
    }
  };
  Context2.prototype.setAttr = function(attr2, val) {
    this._context[attr2] = val;
  };
  Context2.prototype.arc = function(a0, a1, a2, a3, a4, a5) {
    this._context.arc(a0, a1, a2, a3, a4, a5);
  };
  Context2.prototype.arcTo = function(a0, a1, a2, a3, a4) {
    this._context.arcTo(a0, a1, a2, a3, a4);
  };
  Context2.prototype.beginPath = function() {
    this._context.beginPath();
  };
  Context2.prototype.bezierCurveTo = function(a0, a1, a2, a3, a4, a5) {
    this._context.bezierCurveTo(a0, a1, a2, a3, a4, a5);
  };
  Context2.prototype.clearRect = function(a0, a1, a2, a3) {
    this._context.clearRect(a0, a1, a2, a3);
  };
  Context2.prototype.clip = function() {
    this._context.clip();
  };
  Context2.prototype.closePath = function() {
    this._context.closePath();
  };
  Context2.prototype.createImageData = function(a0, a1) {
    var a2 = arguments;
    if (a2.length === 2) {
      return this._context.createImageData(a0, a1);
    } else if (a2.length === 1) {
      return this._context.createImageData(a0);
    }
  };
  Context2.prototype.createLinearGradient = function(a0, a1, a2, a3) {
    return this._context.createLinearGradient(a0, a1, a2, a3);
  };
  Context2.prototype.createPattern = function(a0, a1) {
    return this._context.createPattern(a0, a1);
  };
  Context2.prototype.createRadialGradient = function(a0, a1, a2, a3, a4, a5) {
    return this._context.createRadialGradient(a0, a1, a2, a3, a4, a5);
  };
  Context2.prototype.drawImage = function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
    var a9 = arguments, _context = this._context;
    if (a9.length === 3) {
      _context.drawImage(a0, a1, a2);
    } else if (a9.length === 5) {
      _context.drawImage(a0, a1, a2, a3, a4);
    } else if (a9.length === 9) {
      _context.drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8);
    }
  };
  Context2.prototype.ellipse = function(a0, a1, a2, a3, a4, a5, a6, a7) {
    this._context.ellipse(a0, a1, a2, a3, a4, a5, a6, a7);
  };
  Context2.prototype.isPointInPath = function(x2, y2) {
    return this._context.isPointInPath(x2, y2);
  };
  Context2.prototype.fill = function() {
    this._context.fill();
  };
  Context2.prototype.fillRect = function(x2, y2, width2, height2) {
    this._context.fillRect(x2, y2, width2, height2);
  };
  Context2.prototype.strokeRect = function(x2, y2, width2, height2) {
    this._context.strokeRect(x2, y2, width2, height2);
  };
  Context2.prototype.fillText = function(a0, a1, a2) {
    this._context.fillText(a0, a1, a2);
  };
  Context2.prototype.measureText = function(text2) {
    return this._context.measureText(text2);
  };
  Context2.prototype.getImageData = function(a0, a1, a2, a3) {
    return this._context.getImageData(a0, a1, a2, a3);
  };
  Context2.prototype.lineTo = function(a0, a1) {
    this._context.lineTo(a0, a1);
  };
  Context2.prototype.moveTo = function(a0, a1) {
    this._context.moveTo(a0, a1);
  };
  Context2.prototype.rect = function(a0, a1, a2, a3) {
    this._context.rect(a0, a1, a2, a3);
  };
  Context2.prototype.putImageData = function(a0, a1, a2) {
    this._context.putImageData(a0, a1, a2);
  };
  Context2.prototype.quadraticCurveTo = function(a0, a1, a2, a3) {
    this._context.quadraticCurveTo(a0, a1, a2, a3);
  };
  Context2.prototype.restore = function() {
    this._context.restore();
  };
  Context2.prototype.rotate = function(a0) {
    this._context.rotate(a0);
  };
  Context2.prototype.save = function() {
    this._context.save();
  };
  Context2.prototype.scale = function(a0, a1) {
    this._context.scale(a0, a1);
  };
  Context2.prototype.setLineDash = function(a0) {
    if (this._context.setLineDash) {
      this._context.setLineDash(a0);
    } else if ("mozDash" in this._context) {
      this._context["mozDash"] = a0;
    } else if ("webkitLineDash" in this._context) {
      this._context["webkitLineDash"] = a0;
    }
  };
  Context2.prototype.getLineDash = function() {
    return this._context.getLineDash();
  };
  Context2.prototype.setTransform = function(a0, a1, a2, a3, a4, a5) {
    this._context.setTransform(a0, a1, a2, a3, a4, a5);
  };
  Context2.prototype.stroke = function() {
    this._context.stroke();
  };
  Context2.prototype.strokeText = function(a0, a1, a2, a3) {
    this._context.strokeText(a0, a1, a2, a3);
  };
  Context2.prototype.transform = function(a0, a1, a2, a3, a4, a5) {
    this._context.transform(a0, a1, a2, a3, a4, a5);
  };
  Context2.prototype.translate = function(a0, a1) {
    this._context.translate(a0, a1);
  };
  Context2.prototype._enableTrace = function() {
    var that = this, len = CONTEXT_METHODS.length, _simplifyArray = Util_1$q.Util._simplifyArray, origSetter = this.setAttr, n2, args;
    var func = function(methodName) {
      var origMethod = that[methodName], ret;
      that[methodName] = function() {
        args = _simplifyArray(Array.prototype.slice.call(arguments, 0));
        ret = origMethod.apply(that, arguments);
        that._trace({
          method: methodName,
          args
        });
        return ret;
      };
    };
    for (n2 = 0; n2 < len; n2++) {
      func(CONTEXT_METHODS[n2]);
    }
    that.setAttr = function() {
      origSetter.apply(that, arguments);
      var prop = arguments[0];
      var val = arguments[1];
      if (prop === "shadowOffsetX" || prop === "shadowOffsetY" || prop === "shadowBlur") {
        val = val / this.canvas.getPixelRatio();
      }
      that._trace({
        property: prop,
        val
      });
    };
  };
  Context2.prototype._applyGlobalCompositeOperation = function(node) {
    var globalCompositeOperation = node.getGlobalCompositeOperation();
    if (globalCompositeOperation !== "source-over") {
      this.setAttr("globalCompositeOperation", globalCompositeOperation);
    }
  };
  return Context2;
}();
Context$1.Context = Context;
CONTEXT_PROPERTIES.forEach(function(prop) {
  Object.defineProperty(Context.prototype, prop, {
    get: function() {
      return this._context[prop];
    },
    set: function(val) {
      this._context[prop] = val;
    }
  });
});
var SceneContext = function(_super) {
  __extends$m(SceneContext2, _super);
  function SceneContext2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SceneContext2.prototype._fillColor = function(shape) {
    var fill = shape.fill();
    this.setAttr("fillStyle", fill);
    shape._fillFunc(this);
  };
  SceneContext2.prototype._fillPattern = function(shape) {
    var fillPatternX = shape.getFillPatternX(), fillPatternY = shape.getFillPatternY(), fillPatternRotation = Global_1$o.Konva.getAngle(shape.getFillPatternRotation()), fillPatternOffsetX = shape.getFillPatternOffsetX(), fillPatternOffsetY = shape.getFillPatternOffsetY();
    shape.getFillPatternScaleX();
    shape.getFillPatternScaleY();
    if (fillPatternX || fillPatternY) {
      this.translate(fillPatternX || 0, fillPatternY || 0);
    }
    if (fillPatternRotation) {
      this.rotate(fillPatternRotation);
    }
    if (fillPatternOffsetX || fillPatternOffsetY) {
      this.translate(-1 * fillPatternOffsetX, -1 * fillPatternOffsetY);
    }
    this.setAttr("fillStyle", shape._getFillPattern());
    shape._fillFunc(this);
  };
  SceneContext2.prototype._fillLinearGradient = function(shape) {
    var grd = shape._getLinearGradient();
    if (grd) {
      this.setAttr("fillStyle", grd);
      shape._fillFunc(this);
    }
  };
  SceneContext2.prototype._fillRadialGradient = function(shape) {
    var grd = shape._getRadialGradient();
    if (grd) {
      this.setAttr("fillStyle", grd);
      shape._fillFunc(this);
    }
  };
  SceneContext2.prototype._fill = function(shape) {
    var hasColor = shape.fill(), fillPriority = shape.getFillPriority();
    if (hasColor && fillPriority === "color") {
      this._fillColor(shape);
      return;
    }
    var hasPattern = shape.getFillPatternImage();
    if (hasPattern && fillPriority === "pattern") {
      this._fillPattern(shape);
      return;
    }
    var hasLinearGradient = shape.getFillLinearGradientColorStops();
    if (hasLinearGradient && fillPriority === "linear-gradient") {
      this._fillLinearGradient(shape);
      return;
    }
    var hasRadialGradient = shape.getFillRadialGradientColorStops();
    if (hasRadialGradient && fillPriority === "radial-gradient") {
      this._fillRadialGradient(shape);
      return;
    }
    if (hasColor) {
      this._fillColor(shape);
    } else if (hasPattern) {
      this._fillPattern(shape);
    } else if (hasLinearGradient) {
      this._fillLinearGradient(shape);
    } else if (hasRadialGradient) {
      this._fillRadialGradient(shape);
    }
  };
  SceneContext2.prototype._strokeLinearGradient = function(shape) {
    var start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);
    if (colorStops) {
      for (var n2 = 0; n2 < colorStops.length; n2 += 2) {
        grd.addColorStop(colorStops[n2], colorStops[n2 + 1]);
      }
      this.setAttr("strokeStyle", grd);
    }
  };
  SceneContext2.prototype._stroke = function(shape) {
    var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();
    if (shape.hasStroke()) {
      if (!strokeScaleEnabled) {
        this.save();
        var pixelRatio = this.getCanvas().getPixelRatio();
        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
      }
      this._applyLineCap(shape);
      if (dash && shape.dashEnabled()) {
        this.setLineDash(dash);
        this.setAttr("lineDashOffset", shape.dashOffset());
      }
      this.setAttr("lineWidth", shape.strokeWidth());
      if (!shape.getShadowForStrokeEnabled()) {
        this.setAttr("shadowColor", "rgba(0,0,0,0)");
      }
      var hasLinearGradient = shape.getStrokeLinearGradientColorStops();
      if (hasLinearGradient) {
        this._strokeLinearGradient(shape);
      } else {
        this.setAttr("strokeStyle", shape.stroke());
      }
      shape._strokeFunc(this);
      if (!strokeScaleEnabled) {
        this.restore();
      }
    }
  };
  SceneContext2.prototype._applyShadow = function(shape) {
    var util2 = Util_1$q.Util, color = util2.get(shape.getShadowRGBA(), "black"), blur = util2.get(shape.getShadowBlur(), 5), offset = util2.get(shape.getShadowOffset(), {
      x: 0,
      y: 0
    }), scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;
    this.setAttr("shadowColor", color);
    this.setAttr("shadowBlur", blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));
    this.setAttr("shadowOffsetX", offset.x * scaleX);
    this.setAttr("shadowOffsetY", offset.y * scaleY);
  };
  return SceneContext2;
}(Context);
Context$1.SceneContext = SceneContext;
var HitContext = function(_super) {
  __extends$m(HitContext2, _super);
  function HitContext2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HitContext2.prototype._fill = function(shape) {
    this.save();
    this.setAttr("fillStyle", shape.colorKey);
    shape._fillFuncHit(this);
    this.restore();
  };
  HitContext2.prototype.strokeShape = function(shape) {
    if (shape.hasHitStroke()) {
      this._stroke(shape);
    }
  };
  HitContext2.prototype._stroke = function(shape) {
    if (shape.hasHitStroke()) {
      var strokeScaleEnabled = shape.getStrokeScaleEnabled();
      if (!strokeScaleEnabled) {
        this.save();
        var pixelRatio = this.getCanvas().getPixelRatio();
        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
      }
      this._applyLineCap(shape);
      var hitStrokeWidth = shape.hitStrokeWidth();
      var strokeWidth = hitStrokeWidth === "auto" ? shape.strokeWidth() : hitStrokeWidth;
      this.setAttr("lineWidth", strokeWidth);
      this.setAttr("strokeStyle", shape.colorKey);
      shape._strokeFuncHit(this);
      if (!strokeScaleEnabled) {
        this.restore();
      }
    }
  };
  return HitContext2;
}(Context);
Context$1.HitContext = HitContext;
var __extends$l = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Canvas$1, "__esModule", { value: true });
Canvas$1.HitCanvas = Canvas$1.SceneCanvas = Canvas$1.Canvas = void 0;
var Util_1$p = Util;
var Context_1$1 = Context$1;
var Global_1$n = Global;
var Factory_1$y = Factory;
var Validators_1$x = Validators;
var _pixelRatio;
function getDevicePixelRatio() {
  if (_pixelRatio) {
    return _pixelRatio;
  }
  var canvas = Util_1$p.Util.createCanvasElement();
  var context = canvas.getContext("2d");
  _pixelRatio = function() {
    var devicePixelRatio = Global_1$n.Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
    return devicePixelRatio / backingStoreRatio;
  }();
  return _pixelRatio;
}
var Canvas = function() {
  function Canvas2(config) {
    this.pixelRatio = 1;
    this.width = 0;
    this.height = 0;
    this.isCache = false;
    var conf = config || {};
    var pixelRatio = conf.pixelRatio || Global_1$n.Konva.pixelRatio || getDevicePixelRatio();
    this.pixelRatio = pixelRatio;
    this._canvas = Util_1$p.Util.createCanvasElement();
    this._canvas.style.padding = "0";
    this._canvas.style.margin = "0";
    this._canvas.style.border = "0";
    this._canvas.style.background = "transparent";
    this._canvas.style.position = "absolute";
    this._canvas.style.top = "0";
    this._canvas.style.left = "0";
  }
  Canvas2.prototype.getContext = function() {
    return this.context;
  };
  Canvas2.prototype.getPixelRatio = function() {
    return this.pixelRatio;
  };
  Canvas2.prototype.setPixelRatio = function(pixelRatio) {
    var previousRatio = this.pixelRatio;
    this.pixelRatio = pixelRatio;
    this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
  };
  Canvas2.prototype.setWidth = function(width2) {
    this.width = this._canvas.width = width2 * this.pixelRatio;
    this._canvas.style.width = width2 + "px";
    var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
    _context.scale(pixelRatio, pixelRatio);
  };
  Canvas2.prototype.setHeight = function(height2) {
    this.height = this._canvas.height = height2 * this.pixelRatio;
    this._canvas.style.height = height2 + "px";
    var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
    _context.scale(pixelRatio, pixelRatio);
  };
  Canvas2.prototype.getWidth = function() {
    return this.width;
  };
  Canvas2.prototype.getHeight = function() {
    return this.height;
  };
  Canvas2.prototype.setSize = function(width2, height2) {
    this.setWidth(width2 || 0);
    this.setHeight(height2 || 0);
  };
  Canvas2.prototype.toDataURL = function(mimeType, quality) {
    try {
      return this._canvas.toDataURL(mimeType, quality);
    } catch (e2) {
      try {
        return this._canvas.toDataURL();
      } catch (err) {
        Util_1$p.Util.error("Unable to get data URL. " + err.message + " For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.");
        return "";
      }
    }
  };
  return Canvas2;
}();
Canvas$1.Canvas = Canvas;
Factory_1$y.Factory.addGetterSetter(Canvas, "pixelRatio", void 0, Validators_1$x.getNumberValidator());
var SceneCanvas = function(_super) {
  __extends$l(SceneCanvas2, _super);
  function SceneCanvas2(config) {
    if (config === void 0) {
      config = { width: 0, height: 0 };
    }
    var _this = _super.call(this, config) || this;
    _this.context = new Context_1$1.SceneContext(_this);
    _this.setSize(config.width, config.height);
    return _this;
  }
  return SceneCanvas2;
}(Canvas);
Canvas$1.SceneCanvas = SceneCanvas;
var HitCanvas = function(_super) {
  __extends$l(HitCanvas2, _super);
  function HitCanvas2(config) {
    if (config === void 0) {
      config = { width: 0, height: 0 };
    }
    var _this = _super.call(this, config) || this;
    _this.hitCanvas = true;
    _this.context = new Context_1$1.HitContext(_this);
    _this.setSize(config.width, config.height);
    return _this;
  }
  return HitCanvas2;
}(Canvas);
Canvas$1.HitCanvas = HitCanvas;
var DragAndDrop = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DD = void 0;
  var Global_12 = Global;
  var Util_12 = Util;
  exports.DD = {
    get isDragging() {
      var flag = false;
      exports.DD._dragElements.forEach(function(elem) {
        if (elem.dragStatus === "dragging") {
          flag = true;
        }
      });
      return flag;
    },
    justDragged: false,
    get node() {
      var node;
      exports.DD._dragElements.forEach(function(elem) {
        node = elem.node;
      });
      return node;
    },
    _dragElements: /* @__PURE__ */ new Map(),
    _drag: function(evt) {
      var nodesToFireEvents = [];
      exports.DD._dragElements.forEach(function(elem, key) {
        var node = elem.node;
        var stage = node.getStage();
        stage.setPointersPositions(evt);
        if (elem.pointerId === void 0) {
          elem.pointerId = Util_12.Util._getFirstPointerId(evt);
        }
        var pos = stage._changedPointerPositions.find(function(pos2) {
          return pos2.id === elem.pointerId;
        });
        if (!pos) {
          return;
        }
        if (elem.dragStatus !== "dragging") {
          var dragDistance = node.dragDistance();
          var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));
          if (distance < dragDistance) {
            return;
          }
          node.startDrag({ evt });
          if (!node.isDragging()) {
            return;
          }
        }
        node._setDragPosition(evt, elem);
        nodesToFireEvents.push(node);
      });
      nodesToFireEvents.forEach(function(node) {
        node.fire("dragmove", {
          type: "dragmove",
          target: node,
          evt
        }, true);
      });
    },
    _endDragBefore: function(evt) {
      exports.DD._dragElements.forEach(function(elem, key) {
        var node = elem.node;
        var stage = node.getStage();
        if (evt) {
          stage.setPointersPositions(evt);
        }
        var pos = stage._changedPointerPositions.find(function(pos2) {
          return pos2.id === elem.pointerId;
        });
        if (!pos) {
          return;
        }
        if (elem.dragStatus === "dragging" || elem.dragStatus === "stopped") {
          exports.DD.justDragged = true;
          Global_12.Konva.listenClickTap = false;
          elem.dragStatus = "stopped";
        }
        var drawNode = elem.node.getLayer() || elem.node instanceof Global_12.Konva["Stage"] && elem.node;
        if (drawNode) {
          drawNode.batchDraw();
        }
      });
    },
    _endDragAfter: function(evt) {
      exports.DD._dragElements.forEach(function(elem, key) {
        if (elem.dragStatus === "stopped") {
          elem.node.fire("dragend", {
            type: "dragend",
            target: elem.node,
            evt
          }, true);
        }
        if (elem.dragStatus !== "dragging") {
          exports.DD._dragElements.delete(key);
        }
      });
    }
  };
  if (Global_12.Konva.isBrowser) {
    window.addEventListener("mouseup", exports.DD._endDragBefore, true);
    window.addEventListener("touchend", exports.DD._endDragBefore, true);
    window.addEventListener("mousemove", exports.DD._drag);
    window.addEventListener("touchmove", exports.DD._drag);
    window.addEventListener("mouseup", exports.DD._endDragAfter, false);
    window.addEventListener("touchend", exports.DD._endDragAfter, false);
  }
})(DragAndDrop);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Node = exports._removeName = exports._addName = exports._removeId = exports.names = exports.ids = void 0;
  var Util_12 = Util;
  var Factory_12 = Factory;
  var Canvas_12 = Canvas$1;
  var Global_12 = Global;
  var DragAndDrop_12 = DragAndDrop;
  var Validators_12 = Validators;
  exports.ids = {};
  exports.names = {};
  var _addId = function(node, id2) {
    if (!id2) {
      return;
    }
    exports.ids[id2] = node;
  };
  var _removeId = function(id2, node) {
    if (!id2) {
      return;
    }
    if (exports.ids[id2] !== node) {
      return;
    }
    delete exports.ids[id2];
  };
  exports._removeId = _removeId;
  var _addName = function(node, name2) {
    if (name2) {
      if (!exports.names[name2]) {
        exports.names[name2] = [];
      }
      exports.names[name2].push(node);
    }
  };
  exports._addName = _addName;
  var _removeName = function(name2, _id) {
    if (!name2) {
      return;
    }
    var nodes3 = exports.names[name2];
    if (!nodes3) {
      return;
    }
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      var no = nodes3[n2];
      if (no._id === _id) {
        nodes3.splice(n2, 1);
      }
    }
    if (nodes3.length === 0) {
      delete exports.names[name2];
    }
  };
  exports._removeName = _removeName;
  var ABSOLUTE_OPACITY = "absoluteOpacity", ALL_LISTENERS = "allEventListeners", ABSOLUTE_TRANSFORM = "absoluteTransform", ABSOLUTE_SCALE = "absoluteScale", CANVAS = "canvas", CHANGE = "Change", CHILDREN = "children", KONVA = "konva", LISTENING = "listening", MOUSEENTER = "mouseenter", MOUSELEAVE = "mouseleave", NAME = "name", SET = "set", SHAPE = "Shape", SPACE2 = " ", STAGE = "stage", TRANSFORM = "transform", UPPER_STAGE = "Stage", VISIBLE = "visible", TRANSFORM_CHANGE_STR2 = [
    "xChange.konva",
    "yChange.konva",
    "scaleXChange.konva",
    "scaleYChange.konva",
    "skewXChange.konva",
    "skewYChange.konva",
    "rotationChange.konva",
    "offsetXChange.konva",
    "offsetYChange.konva",
    "transformsEnabledChange.konva"
  ].join(SPACE2);
  var emptyChildren = new Util_12.Collection();
  var idCounter = 1;
  var Node2 = function() {
    function Node3(config) {
      this._id = idCounter++;
      this.eventListeners = {};
      this.attrs = {};
      this.index = 0;
      this._allEventListeners = null;
      this.parent = null;
      this._cache = /* @__PURE__ */ new Map();
      this._attachedDepsListeners = /* @__PURE__ */ new Map();
      this._lastPos = null;
      this._batchingTransformChange = false;
      this._needClearTransformCache = false;
      this._filterUpToDate = false;
      this._isUnderCache = false;
      this.children = emptyChildren;
      this._dragEventId = null;
      this._shouldFireChangeEvents = false;
      this.setAttrs(config);
      this._shouldFireChangeEvents = true;
    }
    Node3.prototype.hasChildren = function() {
      return false;
    };
    Node3.prototype.getChildren = function() {
      return emptyChildren;
    };
    Node3.prototype._clearCache = function(attr2) {
      if ((attr2 === TRANSFORM || attr2 === ABSOLUTE_TRANSFORM) && this._cache.get(attr2)) {
        this._cache.get(attr2).dirty = true;
      } else if (attr2) {
        this._cache.delete(attr2);
      } else {
        this._cache.clear();
      }
    };
    Node3.prototype._getCache = function(attr2, privateGetter) {
      var cache3 = this._cache.get(attr2);
      var isTransform = attr2 === TRANSFORM || attr2 === ABSOLUTE_TRANSFORM;
      var invalid = cache3 === void 0 || isTransform && cache3.dirty === true;
      if (invalid) {
        cache3 = privateGetter.call(this);
        this._cache.set(attr2, cache3);
      }
      return cache3;
    };
    Node3.prototype._calculate = function(name2, deps, getter) {
      var _this = this;
      if (!this._attachedDepsListeners.get(name2)) {
        var depsString = deps.map(function(dep) {
          return dep + "Change.konva";
        }).join(SPACE2);
        this.on(depsString, function() {
          _this._clearCache(name2);
        });
        this._attachedDepsListeners.set(name2, true);
      }
      return this._getCache(name2, getter);
    };
    Node3.prototype._getCanvasCache = function() {
      return this._cache.get(CANVAS);
    };
    Node3.prototype._clearSelfAndDescendantCache = function(attr2, forceEvent) {
      this._clearCache(attr2);
      if (forceEvent && attr2 === ABSOLUTE_TRANSFORM) {
        this.fire("_clearTransformCache");
      }
      if (this.isCached()) {
        return;
      }
      if (this.children) {
        this.children.each(function(node) {
          node._clearSelfAndDescendantCache(attr2, true);
        });
      }
    };
    Node3.prototype.clearCache = function() {
      this._cache.delete(CANVAS);
      this._clearSelfAndDescendantCache();
      return this;
    };
    Node3.prototype.cache = function(config) {
      var conf = config || {};
      var rect = {};
      if (conf.x === void 0 || conf.y === void 0 || conf.width === void 0 || conf.height === void 0) {
        rect = this.getClientRect({
          skipTransform: true,
          relativeTo: this.getParent()
        });
      }
      var width2 = Math.ceil(conf.width || rect.width), height2 = Math.ceil(conf.height || rect.height), pixelRatio = conf.pixelRatio, x2 = conf.x === void 0 ? rect.x : conf.x, y2 = conf.y === void 0 ? rect.y : conf.y, offset = conf.offset || 0, drawBorder = conf.drawBorder || false;
      if (!width2 || !height2) {
        Util_12.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.");
        return;
      }
      width2 += offset * 2;
      height2 += offset * 2;
      x2 -= offset;
      y2 -= offset;
      var cachedSceneCanvas = new Canvas_12.SceneCanvas({
        pixelRatio,
        width: width2,
        height: height2
      }), cachedFilterCanvas = new Canvas_12.SceneCanvas({
        pixelRatio,
        width: 0,
        height: 0
      }), cachedHitCanvas = new Canvas_12.HitCanvas({
        pixelRatio: 1,
        width: width2,
        height: height2
      }), sceneContext = cachedSceneCanvas.getContext(), hitContext = cachedHitCanvas.getContext();
      cachedHitCanvas.isCache = true;
      cachedSceneCanvas.isCache = true;
      this._cache.delete("canvas");
      this._filterUpToDate = false;
      if (conf.imageSmoothingEnabled === false) {
        cachedSceneCanvas.getContext()._context.imageSmoothingEnabled = false;
        cachedFilterCanvas.getContext()._context.imageSmoothingEnabled = false;
      }
      sceneContext.save();
      hitContext.save();
      sceneContext.translate(-x2, -y2);
      hitContext.translate(-x2, -y2);
      this._isUnderCache = true;
      this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
      this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
      this.drawScene(cachedSceneCanvas, this);
      this.drawHit(cachedHitCanvas, this);
      this._isUnderCache = false;
      sceneContext.restore();
      hitContext.restore();
      if (drawBorder) {
        sceneContext.save();
        sceneContext.beginPath();
        sceneContext.rect(0, 0, width2, height2);
        sceneContext.closePath();
        sceneContext.setAttr("strokeStyle", "red");
        sceneContext.setAttr("lineWidth", 5);
        sceneContext.stroke();
        sceneContext.restore();
      }
      this._cache.set(CANVAS, {
        scene: cachedSceneCanvas,
        filter: cachedFilterCanvas,
        hit: cachedHitCanvas,
        x: x2,
        y: y2
      });
      return this;
    };
    Node3.prototype.isCached = function() {
      return this._cache.has("canvas");
    };
    Node3.prototype.getClientRect = function(config) {
      throw new Error('abstract "getClientRect" method call');
    };
    Node3.prototype._transformedRect = function(rect, top) {
      var points = [
        { x: rect.x, y: rect.y },
        { x: rect.x + rect.width, y: rect.y },
        { x: rect.x + rect.width, y: rect.y + rect.height },
        { x: rect.x, y: rect.y + rect.height }
      ];
      var minX, minY, maxX, maxY;
      var trans = this.getAbsoluteTransform(top);
      points.forEach(function(point) {
        var transformed = trans.point(point);
        if (minX === void 0) {
          minX = maxX = transformed.x;
          minY = maxY = transformed.y;
        }
        minX = Math.min(minX, transformed.x);
        minY = Math.min(minY, transformed.y);
        maxX = Math.max(maxX, transformed.x);
        maxY = Math.max(maxY, transformed.y);
      });
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    };
    Node3.prototype._drawCachedSceneCanvas = function(context) {
      context.save();
      context._applyOpacity(this);
      context._applyGlobalCompositeOperation(this);
      var canvasCache = this._getCanvasCache();
      context.translate(canvasCache.x, canvasCache.y);
      var cacheCanvas = this._getCachedSceneCanvas();
      var ratio = cacheCanvas.pixelRatio;
      context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
      context.restore();
    };
    Node3.prototype._drawCachedHitCanvas = function(context) {
      var canvasCache = this._getCanvasCache(), hitCanvas = canvasCache.hit;
      context.save();
      context.translate(canvasCache.x, canvasCache.y);
      context.drawImage(hitCanvas._canvas, 0, 0);
      context.restore();
    };
    Node3.prototype._getCachedSceneCanvas = function() {
      var filters = this.filters(), cachedCanvas = this._getCanvasCache(), sceneCanvas = cachedCanvas.scene, filterCanvas = cachedCanvas.filter, filterContext = filterCanvas.getContext(), len, imageData, n2, filter4;
      if (filters) {
        if (!this._filterUpToDate) {
          var ratio = sceneCanvas.pixelRatio;
          filterCanvas.setSize(sceneCanvas.width / sceneCanvas.pixelRatio, sceneCanvas.height / sceneCanvas.pixelRatio);
          try {
            len = filters.length;
            filterContext.clear();
            filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
            imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());
            for (n2 = 0; n2 < len; n2++) {
              filter4 = filters[n2];
              if (typeof filter4 !== "function") {
                Util_12.Util.error("Filter should be type of function, but got " + typeof filter4 + " instead. Please check correct filters");
                continue;
              }
              filter4.call(this, imageData);
              filterContext.putImageData(imageData, 0, 0);
            }
          } catch (e2) {
            Util_12.Util.error("Unable to apply filter. " + e2.message + " This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.");
          }
          this._filterUpToDate = true;
        }
        return filterCanvas;
      }
      return sceneCanvas;
    };
    Node3.prototype.on = function(evtStr, handler) {
      this._cache && this._cache.delete(ALL_LISTENERS);
      if (arguments.length === 3) {
        return this._delegate.apply(this, arguments);
      }
      var events = evtStr.split(SPACE2), len = events.length, n2, event3, parts, baseEvent, name2;
      for (n2 = 0; n2 < len; n2++) {
        event3 = events[n2];
        parts = event3.split(".");
        baseEvent = parts[0];
        name2 = parts[1] || "";
        if (!this.eventListeners[baseEvent]) {
          this.eventListeners[baseEvent] = [];
        }
        this.eventListeners[baseEvent].push({
          name: name2,
          handler
        });
      }
      return this;
    };
    Node3.prototype.off = function(evtStr, callback) {
      var events = (evtStr || "").split(SPACE2), len = events.length, n2, t3, event3, parts, baseEvent, name2;
      this._cache && this._cache.delete(ALL_LISTENERS);
      if (!evtStr) {
        for (t3 in this.eventListeners) {
          this._off(t3);
        }
      }
      for (n2 = 0; n2 < len; n2++) {
        event3 = events[n2];
        parts = event3.split(".");
        baseEvent = parts[0];
        name2 = parts[1];
        if (baseEvent) {
          if (this.eventListeners[baseEvent]) {
            this._off(baseEvent, name2, callback);
          }
        } else {
          for (t3 in this.eventListeners) {
            this._off(t3, name2, callback);
          }
        }
      }
      return this;
    };
    Node3.prototype.dispatchEvent = function(evt) {
      var e2 = {
        target: this,
        type: evt.type,
        evt
      };
      this.fire(evt.type, e2);
      return this;
    };
    Node3.prototype.addEventListener = function(type, handler) {
      this.on(type, function(evt) {
        handler.call(this, evt.evt);
      });
      return this;
    };
    Node3.prototype.removeEventListener = function(type) {
      this.off(type);
      return this;
    };
    Node3.prototype._delegate = function(event3, selector, handler) {
      var stopNode = this;
      this.on(event3, function(evt) {
        var targets = evt.target.findAncestors(selector, true, stopNode);
        for (var i2 = 0; i2 < targets.length; i2++) {
          evt = Util_12.Util.cloneObject(evt);
          evt.currentTarget = targets[i2];
          handler.call(targets[i2], evt);
        }
      });
    };
    Node3.prototype.remove = function() {
      if (this.isDragging()) {
        this.stopDrag();
      }
      DragAndDrop_12.DD._dragElements.delete(this._id);
      this._remove();
      return this;
    };
    Node3.prototype._clearCaches = function() {
      this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
      this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
      this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
      this._clearSelfAndDescendantCache(STAGE);
      this._clearSelfAndDescendantCache(VISIBLE);
      this._clearSelfAndDescendantCache(LISTENING);
    };
    Node3.prototype._remove = function() {
      this._clearCaches();
      var parent4 = this.getParent();
      if (parent4 && parent4.children) {
        parent4.children.splice(this.index, 1);
        parent4._setChildrenIndices();
        this.parent = null;
      }
    };
    Node3.prototype.destroy = function() {
      exports._removeId(this.id(), this);
      var names = (this.name() || "").split(/\s/g);
      for (var i2 = 0; i2 < names.length; i2++) {
        var subname = names[i2];
        exports._removeName(subname, this._id);
      }
      this.remove();
      return this;
    };
    Node3.prototype.getAttr = function(attr2) {
      var method = "get" + Util_12.Util._capitalize(attr2);
      if (Util_12.Util._isFunction(this[method])) {
        return this[method]();
      }
      return this.attrs[attr2];
    };
    Node3.prototype.getAncestors = function() {
      var parent4 = this.getParent(), ancestors = new Util_12.Collection();
      while (parent4) {
        ancestors.push(parent4);
        parent4 = parent4.getParent();
      }
      return ancestors;
    };
    Node3.prototype.getAttrs = function() {
      return this.attrs || {};
    };
    Node3.prototype.setAttrs = function(config) {
      var _this = this;
      this._batchTransformChanges(function() {
        var key, method;
        if (!config) {
          return _this;
        }
        for (key in config) {
          if (key === CHILDREN) {
            continue;
          }
          method = SET + Util_12.Util._capitalize(key);
          if (Util_12.Util._isFunction(_this[method])) {
            _this[method](config[key]);
          } else {
            _this._setAttr(key, config[key]);
          }
        }
      });
      return this;
    };
    Node3.prototype.isListening = function() {
      return this._getCache(LISTENING, this._isListening);
    };
    Node3.prototype._isListening = function(relativeTo) {
      var listening = this.listening();
      if (!listening) {
        return false;
      }
      var parent4 = this.getParent();
      if (parent4 && parent4 !== relativeTo && this !== relativeTo) {
        return parent4._isListening(relativeTo);
      } else {
        return true;
      }
    };
    Node3.prototype.isVisible = function() {
      return this._getCache(VISIBLE, this._isVisible);
    };
    Node3.prototype._isVisible = function(relativeTo) {
      var visible = this.visible();
      if (!visible) {
        return false;
      }
      var parent4 = this.getParent();
      if (parent4 && parent4 !== relativeTo && this !== relativeTo) {
        return parent4._isVisible(relativeTo);
      } else {
        return true;
      }
    };
    Node3.prototype.shouldDrawHit = function(top, skipDragCheck) {
      if (skipDragCheck === void 0) {
        skipDragCheck = false;
      }
      if (top) {
        return this._isVisible(top) && this._isListening(top);
      }
      var layer = this.getLayer();
      var layerUnderDrag = false;
      DragAndDrop_12.DD._dragElements.forEach(function(elem) {
        if (elem.dragStatus !== "dragging") {
          return;
        } else if (elem.node.nodeType === "Stage") {
          layerUnderDrag = true;
        } else if (elem.node.getLayer() === layer) {
          layerUnderDrag = true;
        }
      });
      var dragSkip = !skipDragCheck && !Global_12.Konva.hitOnDragEnabled && layerUnderDrag;
      return this.isListening() && this.isVisible() && !dragSkip;
    };
    Node3.prototype.show = function() {
      this.visible(true);
      return this;
    };
    Node3.prototype.hide = function() {
      this.visible(false);
      return this;
    };
    Node3.prototype.getZIndex = function() {
      return this.index || 0;
    };
    Node3.prototype.getAbsoluteZIndex = function() {
      var depth = this.getDepth(), that = this, index = 0, nodes3, len, n2, child;
      function addChildren2(children2) {
        nodes3 = [];
        len = children2.length;
        for (n2 = 0; n2 < len; n2++) {
          child = children2[n2];
          index++;
          if (child.nodeType !== SHAPE) {
            nodes3 = nodes3.concat(child.getChildren().toArray());
          }
          if (child._id === that._id) {
            n2 = len;
          }
        }
        if (nodes3.length > 0 && nodes3[0].getDepth() <= depth) {
          addChildren2(nodes3);
        }
      }
      if (that.nodeType !== UPPER_STAGE) {
        addChildren2(that.getStage().getChildren());
      }
      return index;
    };
    Node3.prototype.getDepth = function() {
      var depth = 0, parent4 = this.parent;
      while (parent4) {
        depth++;
        parent4 = parent4.parent;
      }
      return depth;
    };
    Node3.prototype._batchTransformChanges = function(func) {
      this._batchingTransformChange = true;
      func();
      this._batchingTransformChange = false;
      if (this._needClearTransformCache) {
        this._clearCache(TRANSFORM);
        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM, true);
      }
      this._needClearTransformCache = false;
    };
    Node3.prototype.setPosition = function(pos) {
      var _this = this;
      this._batchTransformChanges(function() {
        _this.x(pos.x);
        _this.y(pos.y);
      });
      return this;
    };
    Node3.prototype.getPosition = function() {
      return {
        x: this.x(),
        y: this.y()
      };
    };
    Node3.prototype.getAbsolutePosition = function(top) {
      var haveCachedParent = false;
      var parent4 = this.parent;
      while (parent4) {
        if (parent4.isCached()) {
          haveCachedParent = true;
          break;
        }
        parent4 = parent4.parent;
      }
      if (haveCachedParent && !top) {
        top = true;
      }
      var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(), absoluteTransform = new Util_12.Transform(), offset = this.offset();
      absoluteTransform.m = absoluteMatrix.slice();
      absoluteTransform.translate(offset.x, offset.y);
      return absoluteTransform.getTranslation();
    };
    Node3.prototype.setAbsolutePosition = function(pos) {
      var origTrans = this._clearTransform();
      this.attrs.x = origTrans.x;
      this.attrs.y = origTrans.y;
      delete origTrans.x;
      delete origTrans.y;
      this._clearCache(TRANSFORM);
      var it2 = this._getAbsoluteTransform().copy();
      it2.invert();
      it2.translate(pos.x, pos.y);
      pos = {
        x: this.attrs.x + it2.getTranslation().x,
        y: this.attrs.y + it2.getTranslation().y
      };
      this._setTransform(origTrans);
      this.setPosition({ x: pos.x, y: pos.y });
      this._clearCache(TRANSFORM);
      this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
      return this;
    };
    Node3.prototype._setTransform = function(trans) {
      var key;
      for (key in trans) {
        this.attrs[key] = trans[key];
      }
    };
    Node3.prototype._clearTransform = function() {
      var trans = {
        x: this.x(),
        y: this.y(),
        rotation: this.rotation(),
        scaleX: this.scaleX(),
        scaleY: this.scaleY(),
        offsetX: this.offsetX(),
        offsetY: this.offsetY(),
        skewX: this.skewX(),
        skewY: this.skewY()
      };
      this.attrs.x = 0;
      this.attrs.y = 0;
      this.attrs.rotation = 0;
      this.attrs.scaleX = 1;
      this.attrs.scaleY = 1;
      this.attrs.offsetX = 0;
      this.attrs.offsetY = 0;
      this.attrs.skewX = 0;
      this.attrs.skewY = 0;
      return trans;
    };
    Node3.prototype.move = function(change) {
      var changeX = change.x, changeY = change.y, x2 = this.x(), y2 = this.y();
      if (changeX !== void 0) {
        x2 += changeX;
      }
      if (changeY !== void 0) {
        y2 += changeY;
      }
      this.setPosition({ x: x2, y: y2 });
      return this;
    };
    Node3.prototype._eachAncestorReverse = function(func, top) {
      var family = [], parent4 = this.getParent(), len, n2;
      if (top && top._id === this._id) {
        return;
      }
      family.unshift(this);
      while (parent4 && (!top || parent4._id !== top._id)) {
        family.unshift(parent4);
        parent4 = parent4.parent;
      }
      len = family.length;
      for (n2 = 0; n2 < len; n2++) {
        func(family[n2]);
      }
    };
    Node3.prototype.rotate = function(theta) {
      this.rotation(this.rotation() + theta);
      return this;
    };
    Node3.prototype.moveToTop = function() {
      if (!this.parent) {
        Util_12.Util.warn("Node has no parent. moveToTop function is ignored.");
        return false;
      }
      var index = this.index;
      this.parent.children.splice(index, 1);
      this.parent.children.push(this);
      this.parent._setChildrenIndices();
      return true;
    };
    Node3.prototype.moveUp = function() {
      if (!this.parent) {
        Util_12.Util.warn("Node has no parent. moveUp function is ignored.");
        return false;
      }
      var index = this.index, len = this.parent.getChildren().length;
      if (index < len - 1) {
        this.parent.children.splice(index, 1);
        this.parent.children.splice(index + 1, 0, this);
        this.parent._setChildrenIndices();
        return true;
      }
      return false;
    };
    Node3.prototype.moveDown = function() {
      if (!this.parent) {
        Util_12.Util.warn("Node has no parent. moveDown function is ignored.");
        return false;
      }
      var index = this.index;
      if (index > 0) {
        this.parent.children.splice(index, 1);
        this.parent.children.splice(index - 1, 0, this);
        this.parent._setChildrenIndices();
        return true;
      }
      return false;
    };
    Node3.prototype.moveToBottom = function() {
      if (!this.parent) {
        Util_12.Util.warn("Node has no parent. moveToBottom function is ignored.");
        return false;
      }
      var index = this.index;
      if (index > 0) {
        this.parent.children.splice(index, 1);
        this.parent.children.unshift(this);
        this.parent._setChildrenIndices();
        return true;
      }
      return false;
    };
    Node3.prototype.setZIndex = function(zIndex) {
      if (!this.parent) {
        Util_12.Util.warn("Node has no parent. zIndex parameter is ignored.");
        return this;
      }
      if (zIndex < 0 || zIndex >= this.parent.children.length) {
        Util_12.Util.warn("Unexpected value " + zIndex + " for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to " + (this.parent.children.length - 1) + ".");
      }
      var index = this.index;
      this.parent.children.splice(index, 1);
      this.parent.children.splice(zIndex, 0, this);
      this.parent._setChildrenIndices();
      return this;
    };
    Node3.prototype.getAbsoluteOpacity = function() {
      return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
    };
    Node3.prototype._getAbsoluteOpacity = function() {
      var absOpacity = this.opacity();
      var parent4 = this.getParent();
      if (parent4 && !parent4._isUnderCache) {
        absOpacity *= parent4.getAbsoluteOpacity();
      }
      return absOpacity;
    };
    Node3.prototype.moveTo = function(newContainer) {
      if (this.getParent() !== newContainer) {
        this._remove();
        newContainer.add(this);
      }
      return this;
    };
    Node3.prototype.toObject = function() {
      var obj = {}, attrs = this.getAttrs(), key, val, getter, defaultValue, nonPlainObject;
      obj.attrs = {};
      for (key in attrs) {
        val = attrs[key];
        nonPlainObject = Util_12.Util.isObject(val) && !Util_12.Util._isPlainObject(val) && !Util_12.Util._isArray(val);
        if (nonPlainObject) {
          continue;
        }
        getter = typeof this[key] === "function" && this[key];
        delete attrs[key];
        defaultValue = getter ? getter.call(this) : null;
        attrs[key] = val;
        if (defaultValue !== val) {
          obj.attrs[key] = val;
        }
      }
      obj.className = this.getClassName();
      return Util_12.Util._prepareToStringify(obj);
    };
    Node3.prototype.toJSON = function() {
      return JSON.stringify(this.toObject());
    };
    Node3.prototype.getParent = function() {
      return this.parent;
    };
    Node3.prototype.findAncestors = function(selector, includeSelf, stopNode) {
      var res = [];
      if (includeSelf && this._isMatch(selector)) {
        res.push(this);
      }
      var ancestor = this.parent;
      while (ancestor) {
        if (ancestor === stopNode) {
          return res;
        }
        if (ancestor._isMatch(selector)) {
          res.push(ancestor);
        }
        ancestor = ancestor.parent;
      }
      return res;
    };
    Node3.prototype.isAncestorOf = function(node) {
      return false;
    };
    Node3.prototype.findAncestor = function(selector, includeSelf, stopNode) {
      return this.findAncestors(selector, includeSelf, stopNode)[0];
    };
    Node3.prototype._isMatch = function(selector) {
      if (!selector) {
        return false;
      }
      if (typeof selector === "function") {
        return selector(this);
      }
      var selectorArr = selector.replace(/ /g, "").split(","), len = selectorArr.length, n2, sel;
      for (n2 = 0; n2 < len; n2++) {
        sel = selectorArr[n2];
        if (!Util_12.Util.isValidSelector(sel)) {
          Util_12.Util.warn('Selector "' + sel + '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
          Util_12.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
          Util_12.Util.warn("Konva is awesome, right?");
        }
        if (sel.charAt(0) === "#") {
          if (this.id() === sel.slice(1)) {
            return true;
          }
        } else if (sel.charAt(0) === ".") {
          if (this.hasName(sel.slice(1))) {
            return true;
          }
        } else if (this.className === sel || this.nodeType === sel) {
          return true;
        }
      }
      return false;
    };
    Node3.prototype.getLayer = function() {
      var parent4 = this.getParent();
      return parent4 ? parent4.getLayer() : null;
    };
    Node3.prototype.getStage = function() {
      return this._getCache(STAGE, this._getStage);
    };
    Node3.prototype._getStage = function() {
      var parent4 = this.getParent();
      if (parent4) {
        return parent4.getStage();
      } else {
        return void 0;
      }
    };
    Node3.prototype.fire = function(eventType, evt, bubble3) {
      if (evt === void 0) {
        evt = {};
      }
      evt.target = evt.target || this;
      if (bubble3) {
        this._fireAndBubble(eventType, evt);
      } else {
        this._fire(eventType, evt);
      }
      return this;
    };
    Node3.prototype.getAbsoluteTransform = function(top) {
      if (top) {
        return this._getAbsoluteTransform(top);
      } else {
        return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
      }
    };
    Node3.prototype._getAbsoluteTransform = function(top) {
      var at2;
      if (top) {
        at2 = new Util_12.Transform();
        this._eachAncestorReverse(function(node) {
          var transformsEnabled2 = node.transformsEnabled();
          if (transformsEnabled2 === "all") {
            at2.multiply(node.getTransform());
          } else if (transformsEnabled2 === "position") {
            at2.translate(node.x() - node.offsetX(), node.y() - node.offsetY());
          }
        }, top);
        return at2;
      } else {
        at2 = this._cache.get(ABSOLUTE_TRANSFORM) || new Util_12.Transform();
        if (this.parent) {
          this.parent.getAbsoluteTransform().copyInto(at2);
        } else {
          at2.reset();
        }
        var transformsEnabled = this.transformsEnabled();
        if (transformsEnabled === "all") {
          at2.multiply(this.getTransform());
        } else if (transformsEnabled === "position") {
          var x2 = this.attrs.x || 0;
          var y2 = this.attrs.y || 0;
          var offsetX = this.attrs.offsetX || 0;
          var offsetY = this.attrs.offsetY || 0;
          at2.translate(x2 - offsetX, y2 - offsetY);
        }
        at2.dirty = false;
        return at2;
      }
    };
    Node3.prototype.getAbsoluteScale = function(top) {
      var parent4 = this;
      while (parent4) {
        if (parent4._isUnderCache) {
          top = parent4;
        }
        parent4 = parent4.getParent();
      }
      var transform7 = this.getAbsoluteTransform(top);
      var attrs = transform7.decompose();
      return {
        x: attrs.scaleX,
        y: attrs.scaleY
      };
    };
    Node3.prototype.getAbsoluteRotation = function() {
      return this.getAbsoluteTransform().decompose().rotation;
    };
    Node3.prototype.getTransform = function() {
      return this._getCache(TRANSFORM, this._getTransform);
    };
    Node3.prototype._getTransform = function() {
      var _a2, _b2;
      var m2 = this._cache.get(TRANSFORM) || new Util_12.Transform();
      m2.reset();
      var x2 = this.x(), y2 = this.y(), rotation = Global_12.Konva.getAngle(this.rotation()), scaleX = (_a2 = this.attrs.scaleX) !== null && _a2 !== void 0 ? _a2 : 1, scaleY = (_b2 = this.attrs.scaleY) !== null && _b2 !== void 0 ? _b2 : 1, skewX = this.attrs.skewX || 0, skewY = this.attrs.skewY || 0, offsetX = this.attrs.offsetX || 0, offsetY = this.attrs.offsetY || 0;
      if (x2 !== 0 || y2 !== 0) {
        m2.translate(x2, y2);
      }
      if (rotation !== 0) {
        m2.rotate(rotation);
      }
      if (skewX !== 0 || skewY !== 0) {
        m2.skew(skewX, skewY);
      }
      if (scaleX !== 1 || scaleY !== 1) {
        m2.scale(scaleX, scaleY);
      }
      if (offsetX !== 0 || offsetY !== 0) {
        m2.translate(-1 * offsetX, -1 * offsetY);
      }
      m2.dirty = false;
      return m2;
    };
    Node3.prototype.clone = function(obj) {
      var attrs = Util_12.Util.cloneObject(this.attrs), key, allListeners, len, n2, listener;
      for (key in obj) {
        attrs[key] = obj[key];
      }
      var node = new this.constructor(attrs);
      for (key in this.eventListeners) {
        allListeners = this.eventListeners[key];
        len = allListeners.length;
        for (n2 = 0; n2 < len; n2++) {
          listener = allListeners[n2];
          if (listener.name.indexOf(KONVA) < 0) {
            if (!node.eventListeners[key]) {
              node.eventListeners[key] = [];
            }
            node.eventListeners[key].push(listener);
          }
        }
      }
      return node;
    };
    Node3.prototype._toKonvaCanvas = function(config) {
      config = config || {};
      var box = this.getClientRect();
      var stage = this.getStage(), x2 = config.x !== void 0 ? config.x : box.x, y2 = config.y !== void 0 ? config.y : box.y, pixelRatio = config.pixelRatio || 1, canvas = new Canvas_12.SceneCanvas({
        width: config.width || box.width || (stage ? stage.width() : 0),
        height: config.height || box.height || (stage ? stage.height() : 0),
        pixelRatio
      }), context = canvas.getContext();
      context.save();
      if (x2 || y2) {
        context.translate(-1 * x2, -1 * y2);
      }
      this.drawScene(canvas);
      context.restore();
      return canvas;
    };
    Node3.prototype.toCanvas = function(config) {
      return this._toKonvaCanvas(config)._canvas;
    };
    Node3.prototype.toDataURL = function(config) {
      config = config || {};
      var mimeType = config.mimeType || null, quality = config.quality || null;
      var url = this._toKonvaCanvas(config).toDataURL(mimeType, quality);
      if (config.callback) {
        config.callback(url);
      }
      return url;
    };
    Node3.prototype.toImage = function(config) {
      if (!config || !config.callback) {
        throw "callback required for toImage method config argument";
      }
      var callback = config.callback;
      delete config.callback;
      Util_12.Util._urlToImage(this.toDataURL(config), function(img) {
        callback(img);
      });
    };
    Node3.prototype.setSize = function(size3) {
      this.width(size3.width);
      this.height(size3.height);
      return this;
    };
    Node3.prototype.getSize = function() {
      return {
        width: this.width(),
        height: this.height()
      };
    };
    Node3.prototype.getClassName = function() {
      return this.className || this.nodeType;
    };
    Node3.prototype.getType = function() {
      return this.nodeType;
    };
    Node3.prototype.getDragDistance = function() {
      if (this.attrs.dragDistance !== void 0) {
        return this.attrs.dragDistance;
      } else if (this.parent) {
        return this.parent.getDragDistance();
      } else {
        return Global_12.Konva.dragDistance;
      }
    };
    Node3.prototype._off = function(type, name2, callback) {
      var evtListeners = this.eventListeners[type], i2, evtName, handler;
      for (i2 = 0; i2 < evtListeners.length; i2++) {
        evtName = evtListeners[i2].name;
        handler = evtListeners[i2].handler;
        if ((evtName !== "konva" || name2 === "konva") && (!name2 || evtName === name2) && (!callback || callback === handler)) {
          evtListeners.splice(i2, 1);
          if (evtListeners.length === 0) {
            delete this.eventListeners[type];
            break;
          }
          i2--;
        }
      }
    };
    Node3.prototype._fireChangeEvent = function(attr2, oldVal, newVal) {
      this._fire(attr2 + CHANGE, {
        oldVal,
        newVal
      });
    };
    Node3.prototype.setId = function(id2) {
      var oldId = this.id();
      exports._removeId(oldId, this);
      _addId(this, id2);
      this._setAttr("id", id2);
      return this;
    };
    Node3.prototype.setName = function(name2) {
      var oldNames = (this.name() || "").split(/\s/g);
      var newNames = (name2 || "").split(/\s/g);
      var subname, i2;
      for (i2 = 0; i2 < oldNames.length; i2++) {
        subname = oldNames[i2];
        if (newNames.indexOf(subname) === -1 && subname) {
          exports._removeName(subname, this._id);
        }
      }
      for (i2 = 0; i2 < newNames.length; i2++) {
        subname = newNames[i2];
        if (oldNames.indexOf(subname) === -1 && subname) {
          exports._addName(this, subname);
        }
      }
      this._setAttr(NAME, name2);
      return this;
    };
    Node3.prototype.addName = function(name2) {
      if (!this.hasName(name2)) {
        var oldName = this.name();
        var newName = oldName ? oldName + " " + name2 : name2;
        this.setName(newName);
      }
      return this;
    };
    Node3.prototype.hasName = function(name2) {
      if (!name2) {
        return false;
      }
      var fullName = this.name();
      if (!fullName) {
        return false;
      }
      var names = (fullName || "").split(/\s/g);
      return names.indexOf(name2) !== -1;
    };
    Node3.prototype.removeName = function(name2) {
      var names = (this.name() || "").split(/\s/g);
      var index = names.indexOf(name2);
      if (index !== -1) {
        names.splice(index, 1);
        this.setName(names.join(" "));
      }
      return this;
    };
    Node3.prototype.setAttr = function(attr2, val) {
      var func = this[SET + Util_12.Util._capitalize(attr2)];
      if (Util_12.Util._isFunction(func)) {
        func.call(this, val);
      } else {
        this._setAttr(attr2, val);
      }
      return this;
    };
    Node3.prototype._setAttr = function(key, val, skipFire) {
      var oldVal = this.attrs[key];
      if (oldVal === val && !Util_12.Util.isObject(val)) {
        return;
      }
      if (val === void 0 || val === null) {
        delete this.attrs[key];
      } else {
        this.attrs[key] = val;
      }
      if (this._shouldFireChangeEvents) {
        this._fireChangeEvent(key, oldVal, val);
      }
    };
    Node3.prototype._setComponentAttr = function(key, component2, val) {
      var oldVal;
      if (val !== void 0) {
        oldVal = this.attrs[key];
        if (!oldVal) {
          this.attrs[key] = this.getAttr(key);
        }
        this.attrs[key][component2] = val;
        this._fireChangeEvent(key, oldVal, val);
      }
    };
    Node3.prototype._fireAndBubble = function(eventType, evt, compareShape) {
      if (evt && this.nodeType === SHAPE) {
        evt.target = this;
      }
      var shouldStop = (eventType === MOUSEENTER || eventType === MOUSELEAVE) && (compareShape && (this === compareShape || this.isAncestorOf && this.isAncestorOf(compareShape)) || this.nodeType === "Stage" && !compareShape);
      if (!shouldStop) {
        this._fire(eventType, evt);
        var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) && compareShape && compareShape.isAncestorOf && compareShape.isAncestorOf(this) && !compareShape.isAncestorOf(this.parent);
        if ((evt && !evt.cancelBubble || !evt) && this.parent && this.parent.isListening() && !stopBubble) {
          if (compareShape && compareShape.parent) {
            this._fireAndBubble.call(this.parent, eventType, evt, compareShape);
          } else {
            this._fireAndBubble.call(this.parent, eventType, evt);
          }
        }
      }
    };
    Node3.prototype._getProtoListeners = function(eventType) {
      var listeners = this._cache.get(ALL_LISTENERS);
      if (!listeners) {
        listeners = {};
        var obj = Object.getPrototypeOf(this);
        while (obj) {
          if (!obj.eventListeners) {
            obj = Object.getPrototypeOf(obj);
            continue;
          }
          for (var event3 in obj.eventListeners) {
            var newEvents = obj.eventListeners[event3];
            var oldEvents = listeners[event3] || [];
            listeners[event3] = newEvents.concat(oldEvents);
          }
          obj = Object.getPrototypeOf(obj);
        }
        this._cache.set(ALL_LISTENERS, listeners);
      }
      return listeners[eventType];
    };
    Node3.prototype._fire = function(eventType, evt) {
      evt = evt || {};
      evt.currentTarget = this;
      evt.type = eventType;
      var topListeners = this._getProtoListeners(eventType);
      if (topListeners) {
        for (var i2 = 0; i2 < topListeners.length; i2++) {
          topListeners[i2].handler.call(this, evt);
        }
      }
      var selfListeners = this.eventListeners[eventType];
      if (selfListeners) {
        for (var i2 = 0; i2 < selfListeners.length; i2++) {
          selfListeners[i2].handler.call(this, evt);
        }
      }
    };
    Node3.prototype.draw = function() {
      this.drawScene();
      this.drawHit();
      return this;
    };
    Node3.prototype._createDragElement = function(evt) {
      var pointerId = evt ? evt.pointerId : void 0;
      var stage = this.getStage();
      var ap = this.getAbsolutePosition();
      var pos = stage._getPointerById(pointerId) || stage._changedPointerPositions[0] || ap;
      DragAndDrop_12.DD._dragElements.set(this._id, {
        node: this,
        startPointerPos: pos,
        offset: {
          x: pos.x - ap.x,
          y: pos.y - ap.y
        },
        dragStatus: "ready",
        pointerId
      });
    };
    Node3.prototype.startDrag = function(evt, bubbleEvent) {
      if (bubbleEvent === void 0) {
        bubbleEvent = true;
      }
      if (!DragAndDrop_12.DD._dragElements.has(this._id)) {
        this._createDragElement(evt);
      }
      var elem = DragAndDrop_12.DD._dragElements.get(this._id);
      elem.dragStatus = "dragging";
      this.fire("dragstart", {
        type: "dragstart",
        target: this,
        evt: evt && evt.evt
      }, bubbleEvent);
    };
    Node3.prototype._setDragPosition = function(evt, elem) {
      var pos = this.getStage()._getPointerById(elem.pointerId);
      if (!pos) {
        return;
      }
      var newNodePos = {
        x: pos.x - elem.offset.x,
        y: pos.y - elem.offset.y
      };
      var dbf = this.dragBoundFunc();
      if (dbf !== void 0) {
        var bounded = dbf.call(this, newNodePos, evt);
        if (!bounded) {
          Util_12.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.");
        } else {
          newNodePos = bounded;
        }
      }
      if (!this._lastPos || this._lastPos.x !== newNodePos.x || this._lastPos.y !== newNodePos.y) {
        this.setAbsolutePosition(newNodePos);
        if (this.getLayer()) {
          this.getLayer().batchDraw();
        } else if (this.getStage()) {
          this.getStage().batchDraw();
        }
      }
      this._lastPos = newNodePos;
    };
    Node3.prototype.stopDrag = function(evt) {
      var elem = DragAndDrop_12.DD._dragElements.get(this._id);
      if (elem) {
        elem.dragStatus = "stopped";
      }
      DragAndDrop_12.DD._endDragBefore(evt);
      DragAndDrop_12.DD._endDragAfter(evt);
    };
    Node3.prototype.setDraggable = function(draggable) {
      this._setAttr("draggable", draggable);
      this._dragChange();
    };
    Node3.prototype.isDragging = function() {
      var elem = DragAndDrop_12.DD._dragElements.get(this._id);
      return elem ? elem.dragStatus === "dragging" : false;
    };
    Node3.prototype._listenDrag = function() {
      this._dragCleanup();
      this.on("mousedown.konva touchstart.konva", function(evt) {
        var _this = this;
        var shouldCheckButton = evt.evt["button"] !== void 0;
        var canDrag = !shouldCheckButton || Global_12.Konva.dragButtons.indexOf(evt.evt["button"]) >= 0;
        if (!canDrag) {
          return;
        }
        if (this.isDragging()) {
          return;
        }
        var hasDraggingChild = false;
        DragAndDrop_12.DD._dragElements.forEach(function(elem) {
          if (_this.isAncestorOf(elem.node)) {
            hasDraggingChild = true;
          }
        });
        if (!hasDraggingChild) {
          this._createDragElement(evt);
        }
      });
    };
    Node3.prototype._dragChange = function() {
      if (this.attrs.draggable) {
        this._listenDrag();
      } else {
        this._dragCleanup();
        var stage = this.getStage();
        if (!stage) {
          return;
        }
        var dragElement = DragAndDrop_12.DD._dragElements.get(this._id);
        var isDragging = dragElement && dragElement.dragStatus === "dragging";
        var isReady2 = dragElement && dragElement.dragStatus === "ready";
        if (isDragging) {
          this.stopDrag();
        } else if (isReady2) {
          DragAndDrop_12.DD._dragElements.delete(this._id);
        }
      }
    };
    Node3.prototype._dragCleanup = function() {
      this.off("mousedown.konva");
      this.off("touchstart.konva");
    };
    Node3.create = function(data4, container2) {
      if (Util_12.Util._isString(data4)) {
        data4 = JSON.parse(data4);
      }
      return this._createNode(data4, container2);
    };
    Node3._createNode = function(obj, container2) {
      var className = Node3.prototype.getClassName.call(obj), children2 = obj.children, no, len, n2;
      if (container2) {
        obj.attrs.container = container2;
      }
      if (!Global_12._NODES_REGISTRY[className]) {
        Util_12.Util.warn('Can not find a node with class name "' + className + '". Fallback to "Shape".');
        className = "Shape";
      }
      var Class = Global_12._NODES_REGISTRY[className];
      no = new Class(obj.attrs);
      if (children2) {
        len = children2.length;
        for (n2 = 0; n2 < len; n2++) {
          no.add(Node3._createNode(children2[n2]));
        }
      }
      return no;
    };
    return Node3;
  }();
  exports.Node = Node2;
  Node2.prototype.nodeType = "Node";
  Node2.prototype._attrsAffectingSize = [];
  Node2.prototype.eventListeners = {};
  Node2.prototype.on.call(Node2.prototype, TRANSFORM_CHANGE_STR2, function() {
    if (this._batchingTransformChange) {
      this._needClearTransformCache = true;
      return;
    }
    this._clearCache(TRANSFORM);
    this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
  });
  Node2.prototype.on.call(Node2.prototype, "visibleChange.konva", function() {
    this._clearSelfAndDescendantCache(VISIBLE);
  });
  Node2.prototype.on.call(Node2.prototype, "listeningChange.konva", function() {
    this._clearSelfAndDescendantCache(LISTENING);
  });
  Node2.prototype.on.call(Node2.prototype, "opacityChange.konva", function() {
    this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
  });
  var addGetterSetter = Factory_12.Factory.addGetterSetter;
  addGetterSetter(Node2, "zIndex");
  addGetterSetter(Node2, "absolutePosition");
  addGetterSetter(Node2, "position");
  addGetterSetter(Node2, "x", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "y", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "globalCompositeOperation", "source-over", Validators_12.getStringValidator());
  addGetterSetter(Node2, "opacity", 1, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "name", "", Validators_12.getStringValidator());
  addGetterSetter(Node2, "id", "", Validators_12.getStringValidator());
  addGetterSetter(Node2, "rotation", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Node2, "scale", ["x", "y"]);
  addGetterSetter(Node2, "scaleX", 1, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "scaleY", 1, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Node2, "skew", ["x", "y"]);
  addGetterSetter(Node2, "skewX", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "skewY", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Node2, "offset", ["x", "y"]);
  addGetterSetter(Node2, "offsetX", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "offsetY", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "dragDistance", null, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "width", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "height", 0, Validators_12.getNumberValidator());
  addGetterSetter(Node2, "listening", true, Validators_12.getBooleanValidator());
  addGetterSetter(Node2, "preventDefault", true, Validators_12.getBooleanValidator());
  addGetterSetter(Node2, "filters", null, function(val) {
    this._filterUpToDate = false;
    return val;
  });
  addGetterSetter(Node2, "visible", true, Validators_12.getBooleanValidator());
  addGetterSetter(Node2, "transformsEnabled", "all", Validators_12.getStringValidator());
  addGetterSetter(Node2, "size");
  addGetterSetter(Node2, "dragBoundFunc");
  addGetterSetter(Node2, "draggable", false, Validators_12.getBooleanValidator());
  Factory_12.Factory.backCompat(Node2, {
    rotateDeg: "rotate",
    setRotationDeg: "setRotation",
    getRotationDeg: "getRotation"
  });
  Util_12.Collection.mapMethods(Node2);
})(Node);
var Container$1 = {};
var __extends$k = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Container$1, "__esModule", { value: true });
Container$1.Container = void 0;
var Util_1$o = Util;
var Factory_1$x = Factory;
var Node_1$i = Node;
var Validators_1$w = Validators;
var Container = function(_super) {
  __extends$k(Container2, _super);
  function Container2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.children = new Util_1$o.Collection();
    return _this;
  }
  Container2.prototype.getChildren = function(filterFunc) {
    if (!filterFunc) {
      return this.children;
    }
    var results = new Util_1$o.Collection();
    this.children.each(function(child) {
      if (filterFunc(child)) {
        results.push(child);
      }
    });
    return results;
  };
  Container2.prototype.hasChildren = function() {
    return this.getChildren().length > 0;
  };
  Container2.prototype.removeChildren = function() {
    var child;
    for (var i2 = 0; i2 < this.children.length; i2++) {
      child = this.children[i2];
      child.parent = null;
      child.index = 0;
      child.remove();
    }
    this.children = new Util_1$o.Collection();
    return this;
  };
  Container2.prototype.destroyChildren = function() {
    var child;
    for (var i2 = 0; i2 < this.children.length; i2++) {
      child = this.children[i2];
      child.parent = null;
      child.index = 0;
      child.destroy();
    }
    this.children = new Util_1$o.Collection();
    return this;
  };
  Container2.prototype.add = function() {
    var children2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children2[_i] = arguments[_i];
    }
    if (arguments.length > 1) {
      for (var i2 = 0; i2 < arguments.length; i2++) {
        this.add(arguments[i2]);
      }
      return this;
    }
    var child = children2[0];
    if (child.getParent()) {
      child.moveTo(this);
      return this;
    }
    var _children = this.children;
    this._validateAdd(child);
    child._clearCaches();
    child.index = _children.length;
    child.parent = this;
    _children.push(child);
    this._fire("add", {
      child
    });
    return this;
  };
  Container2.prototype.destroy = function() {
    if (this.hasChildren()) {
      this.destroyChildren();
    }
    _super.prototype.destroy.call(this);
    return this;
  };
  Container2.prototype.find = function(selector) {
    return this._generalFind(selector, false);
  };
  Container2.prototype.get = function(selector) {
    Util_1$o.Util.warn("collection.get() method is deprecated. Please use collection.find() instead.");
    return this.find(selector);
  };
  Container2.prototype.findOne = function(selector) {
    var result = this._generalFind(selector, true);
    return result.length > 0 ? result[0] : void 0;
  };
  Container2.prototype._generalFind = function(selector, findOne) {
    var retArr = [];
    this._descendants(function(node) {
      var valid2 = node._isMatch(selector);
      if (valid2) {
        retArr.push(node);
      }
      if (valid2 && findOne) {
        return true;
      }
      return false;
    });
    return Util_1$o.Collection.toCollection(retArr);
  };
  Container2.prototype._descendants = function(fn3) {
    var shouldStop = false;
    for (var i2 = 0; i2 < this.children.length; i2++) {
      var child = this.children[i2];
      shouldStop = fn3(child);
      if (shouldStop) {
        return true;
      }
      if (!child.hasChildren()) {
        continue;
      }
      shouldStop = child._descendants(fn3);
      if (shouldStop) {
        return true;
      }
    }
    return false;
  };
  Container2.prototype.toObject = function() {
    var obj = Node_1$i.Node.prototype.toObject.call(this);
    obj.children = [];
    var children2 = this.getChildren();
    var len = children2.length;
    for (var n2 = 0; n2 < len; n2++) {
      var child = children2[n2];
      obj.children.push(child.toObject());
    }
    return obj;
  };
  Container2.prototype.isAncestorOf = function(node) {
    var parent4 = node.getParent();
    while (parent4) {
      if (parent4._id === this._id) {
        return true;
      }
      parent4 = parent4.getParent();
    }
    return false;
  };
  Container2.prototype.clone = function(obj) {
    var node = Node_1$i.Node.prototype.clone.call(this, obj);
    this.getChildren().each(function(no) {
      node.add(no.clone());
    });
    return node;
  };
  Container2.prototype.getAllIntersections = function(pos) {
    var arr = [];
    this.find("Shape").each(function(shape) {
      if (shape.isVisible() && shape.intersects(pos)) {
        arr.push(shape);
      }
    });
    return arr;
  };
  Container2.prototype._setChildrenIndices = function() {
    this.children.each(function(child, n2) {
      child.index = n2;
    });
  };
  Container2.prototype.drawScene = function(can, top) {
    var layer = this.getLayer(), canvas = can || layer && layer.getCanvas(), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;
    var caching = canvas && canvas.isCache;
    if (!this.isVisible() && !caching) {
      return this;
    }
    if (cachedSceneCanvas) {
      context.save();
      var m2 = this.getAbsoluteTransform(top).getMatrix();
      context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
      this._drawCachedSceneCanvas(context);
      context.restore();
    } else {
      this._drawChildren("drawScene", canvas, top);
    }
    return this;
  };
  Container2.prototype.drawHit = function(can, top) {
    if (!this.shouldDrawHit(top)) {
      return this;
    }
    var layer = this.getLayer(), canvas = can || layer && layer.hitCanvas, context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
    if (cachedHitCanvas) {
      context.save();
      var m2 = this.getAbsoluteTransform(top).getMatrix();
      context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
      this._drawCachedHitCanvas(context);
      context.restore();
    } else {
      this._drawChildren("drawHit", canvas, top);
    }
    return this;
  };
  Container2.prototype._drawChildren = function(drawMethod, canvas, top) {
    var context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = clipWidth && clipHeight || clipFunc;
    var selfCache = top === this;
    if (hasClip) {
      context.save();
      var transform7 = this.getAbsoluteTransform(top);
      var m2 = transform7.getMatrix();
      context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
      context.beginPath();
      if (clipFunc) {
        clipFunc.call(this, context, this);
      } else {
        var clipX = this.clipX();
        var clipY = this.clipY();
        context.rect(clipX, clipY, clipWidth, clipHeight);
      }
      context.clip();
      m2 = transform7.copy().invert().getMatrix();
      context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
    }
    var hasComposition = !selfCache && this.globalCompositeOperation() !== "source-over" && drawMethod === "drawScene";
    if (hasComposition) {
      context.save();
      context._applyGlobalCompositeOperation(this);
    }
    this.children.each(function(child) {
      child[drawMethod](canvas, top);
    });
    if (hasComposition) {
      context.restore();
    }
    if (hasClip) {
      context.restore();
    }
  };
  Container2.prototype.getClientRect = function(config) {
    config = config || {};
    var skipTransform = config.skipTransform;
    var relativeTo = config.relativeTo;
    var minX, minY, maxX, maxY;
    var selfRect = {
      x: Infinity,
      y: Infinity,
      width: 0,
      height: 0
    };
    var that = this;
    this.children.each(function(child) {
      if (!child.visible()) {
        return;
      }
      var rect = child.getClientRect({
        relativeTo: that,
        skipShadow: config.skipShadow,
        skipStroke: config.skipStroke
      });
      if (rect.width === 0 && rect.height === 0) {
        return;
      }
      if (minX === void 0) {
        minX = rect.x;
        minY = rect.y;
        maxX = rect.x + rect.width;
        maxY = rect.y + rect.height;
      } else {
        minX = Math.min(minX, rect.x);
        minY = Math.min(minY, rect.y);
        maxX = Math.max(maxX, rect.x + rect.width);
        maxY = Math.max(maxY, rect.y + rect.height);
      }
    });
    var shapes = this.find("Shape");
    var hasVisible = false;
    for (var i2 = 0; i2 < shapes.length; i2++) {
      var shape = shapes[i2];
      if (shape._isVisible(this)) {
        hasVisible = true;
        break;
      }
    }
    if (hasVisible && minX !== void 0) {
      selfRect = {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    } else {
      selfRect = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }
    if (!skipTransform) {
      return this._transformedRect(selfRect, relativeTo);
    }
    return selfRect;
  };
  return Container2;
}(Node_1$i.Node);
Container$1.Container = Container;
Factory_1$x.Factory.addComponentsGetterSetter(Container, "clip", [
  "x",
  "y",
  "width",
  "height"
]);
Factory_1$x.Factory.addGetterSetter(Container, "clipX", void 0, Validators_1$w.getNumberValidator());
Factory_1$x.Factory.addGetterSetter(Container, "clipY", void 0, Validators_1$w.getNumberValidator());
Factory_1$x.Factory.addGetterSetter(Container, "clipWidth", void 0, Validators_1$w.getNumberValidator());
Factory_1$x.Factory.addGetterSetter(Container, "clipHeight", void 0, Validators_1$w.getNumberValidator());
Factory_1$x.Factory.addGetterSetter(Container, "clipFunc");
Util_1$o.Collection.mapMethods(Container);
var Stage = {};
var PointerEvents = {};
Object.defineProperty(PointerEvents, "__esModule", { value: true });
PointerEvents.releaseCapture = PointerEvents.setPointerCapture = PointerEvents.hasPointerCapture = PointerEvents.createEvent = PointerEvents.getCapturedShape = void 0;
var Global_1$m = Global;
var Captures = /* @__PURE__ */ new Map();
var SUPPORT_POINTER_EVENTS = Global_1$m.Konva._global["PointerEvent"] !== void 0;
function getCapturedShape(pointerId) {
  return Captures.get(pointerId);
}
PointerEvents.getCapturedShape = getCapturedShape;
function createEvent(evt) {
  return {
    evt,
    pointerId: evt.pointerId
  };
}
PointerEvents.createEvent = createEvent;
function hasPointerCapture(pointerId, shape) {
  return Captures.get(pointerId) === shape;
}
PointerEvents.hasPointerCapture = hasPointerCapture;
function setPointerCapture(pointerId, shape) {
  releaseCapture(pointerId);
  var stage = shape.getStage();
  if (!stage)
    return;
  Captures.set(pointerId, shape);
  if (SUPPORT_POINTER_EVENTS) {
    shape._fire("gotpointercapture", createEvent(new PointerEvent("gotpointercapture")));
  }
}
PointerEvents.setPointerCapture = setPointerCapture;
function releaseCapture(pointerId, target) {
  var shape = Captures.get(pointerId);
  if (!shape)
    return;
  var stage = shape.getStage();
  if (stage && stage.content)
    ;
  Captures.delete(pointerId);
  if (SUPPORT_POINTER_EVENTS) {
    shape._fire("lostpointercapture", createEvent(new PointerEvent("lostpointercapture")));
  }
}
PointerEvents.releaseCapture = releaseCapture;
(function(exports) {
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Stage = exports.stages = void 0;
  var Util_12 = Util;
  var Factory_12 = Factory;
  var Container_12 = Container$1;
  var Global_12 = Global;
  var Canvas_12 = Canvas$1;
  var DragAndDrop_12 = DragAndDrop;
  var Global_22 = Global;
  var PointerEvents$1 = PointerEvents;
  var STAGE = "Stage", STRING = "string", PX = "px", MOUSEOUT = "mouseout", MOUSELEAVE = "mouseleave", MOUSEOVER = "mouseover", MOUSEENTER = "mouseenter", MOUSEMOVE = "mousemove", MOUSEDOWN = "mousedown", MOUSEUP = "mouseup", POINTERMOVE = "pointermove", POINTERDOWN = "pointerdown", POINTERUP = "pointerup", POINTERCANCEL = "pointercancel", LOSTPOINTERCAPTURE = "lostpointercapture", CONTEXTMENU = "contextmenu", CLICK = "click", DBL_CLICK = "dblclick", TOUCHSTART = "touchstart", TOUCHEND = "touchend", TAP = "tap", DBL_TAP = "dbltap", TOUCHMOVE = "touchmove", WHEEL = "wheel", CONTENT_MOUSEOUT = "contentMouseout", CONTENT_MOUSEOVER = "contentMouseover", CONTENT_MOUSEMOVE = "contentMousemove", CONTENT_MOUSEDOWN = "contentMousedown", CONTENT_MOUSEUP = "contentMouseup", CONTENT_CONTEXTMENU = "contentContextmenu", CONTENT_CLICK = "contentClick", CONTENT_DBL_CLICK = "contentDblclick", CONTENT_TOUCHSTART = "contentTouchstart", CONTENT_TOUCHEND = "contentTouchend", CONTENT_DBL_TAP = "contentDbltap", CONTENT_TAP = "contentTap", CONTENT_TOUCHMOVE = "contentTouchmove", CONTENT_WHEEL = "contentWheel", RELATIVE = "relative", KONVA_CONTENT = "konvajs-content", UNDERSCORE = "_", CONTAINER = "container", MAX_LAYERS_NUMBER = 5, EMPTY_STRING2 = "", EVENTS = [
    MOUSEENTER,
    MOUSEDOWN,
    MOUSEMOVE,
    MOUSEUP,
    MOUSELEAVE,
    TOUCHSTART,
    TOUCHMOVE,
    TOUCHEND,
    MOUSEOVER,
    WHEEL,
    CONTEXTMENU,
    POINTERDOWN,
    POINTERMOVE,
    POINTERUP,
    POINTERCANCEL,
    LOSTPOINTERCAPTURE
  ], eventsLength = EVENTS.length;
  function addEvent(ctx, eventName) {
    ctx.content.addEventListener(eventName, function(evt) {
      ctx[UNDERSCORE + eventName](evt);
    }, false);
  }
  var NO_POINTERS_MESSAGE = "Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);";
  exports.stages = [];
  function checkNoClip(attrs) {
    if (attrs === void 0) {
      attrs = {};
    }
    if (attrs.clipFunc || attrs.clipWidth || attrs.clipHeight) {
      Util_12.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups.");
    }
    return attrs;
  }
  var Stage2 = function(_super) {
    __extends2(Stage3, _super);
    function Stage3(config) {
      var _this = _super.call(this, checkNoClip(config)) || this;
      _this._pointerPositions = [];
      _this._changedPointerPositions = [];
      _this._buildDOM();
      _this._bindContentEvents();
      exports.stages.push(_this);
      _this.on("widthChange.konva heightChange.konva", _this._resizeDOM);
      _this.on("visibleChange.konva", _this._checkVisibility);
      _this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva", function() {
        checkNoClip(_this.attrs);
      });
      _this._checkVisibility();
      return _this;
    }
    Stage3.prototype._validateAdd = function(child) {
      var isLayer = child.getType() === "Layer";
      var isFastLayer = child.getType() === "FastLayer";
      var valid2 = isLayer || isFastLayer;
      if (!valid2) {
        Util_12.Util.throw("You may only add layers to the stage.");
      }
    };
    Stage3.prototype._checkVisibility = function() {
      if (!this.content) {
        return;
      }
      var style3 = this.visible() ? "" : "none";
      this.content.style.display = style3;
    };
    Stage3.prototype.setContainer = function(container2) {
      if (typeof container2 === STRING) {
        if (container2.charAt(0) === ".") {
          var className = container2.slice(1);
          container2 = document.getElementsByClassName(className)[0];
        } else {
          var id2;
          if (container2.charAt(0) !== "#") {
            id2 = container2;
          } else {
            id2 = container2.slice(1);
          }
          container2 = document.getElementById(id2);
        }
        if (!container2) {
          throw "Can not find container in document with id " + id2;
        }
      }
      this._setAttr(CONTAINER, container2);
      if (this.content) {
        if (this.content.parentElement) {
          this.content.parentElement.removeChild(this.content);
        }
        container2.appendChild(this.content);
      }
      return this;
    };
    Stage3.prototype.shouldDrawHit = function() {
      return true;
    };
    Stage3.prototype.clear = function() {
      var layers = this.children, len = layers.length, n2;
      for (n2 = 0; n2 < len; n2++) {
        layers[n2].clear();
      }
      return this;
    };
    Stage3.prototype.clone = function(obj) {
      if (!obj) {
        obj = {};
      }
      obj.container = document.createElement("div");
      return Container_12.Container.prototype.clone.call(this, obj);
    };
    Stage3.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      var content = this.content;
      if (content && Util_12.Util._isInDocument(content)) {
        this.container().removeChild(content);
      }
      var index = exports.stages.indexOf(this);
      if (index > -1) {
        exports.stages.splice(index, 1);
      }
      return this;
    };
    Stage3.prototype.getPointerPosition = function() {
      var pos = this._pointerPositions[0] || this._changedPointerPositions[0];
      if (!pos) {
        Util_12.Util.warn(NO_POINTERS_MESSAGE);
        return null;
      }
      return {
        x: pos.x,
        y: pos.y
      };
    };
    Stage3.prototype._getPointerById = function(id2) {
      return this._pointerPositions.find(function(p2) {
        return p2.id === id2;
      });
    };
    Stage3.prototype.getPointersPositions = function() {
      return this._pointerPositions;
    };
    Stage3.prototype.getStage = function() {
      return this;
    };
    Stage3.prototype.getContent = function() {
      return this.content;
    };
    Stage3.prototype._toKonvaCanvas = function(config) {
      config = config || {};
      config.x = config.x || 0;
      config.y = config.y || 0;
      config.width = config.width || this.width();
      config.height = config.height || this.height();
      var canvas = new Canvas_12.SceneCanvas({
        width: config.width,
        height: config.height,
        pixelRatio: config.pixelRatio || 1
      });
      var _context = canvas.getContext()._context;
      var layers = this.children;
      if (config.x || config.y) {
        _context.translate(-1 * config.x, -1 * config.y);
      }
      layers.each(function(layer) {
        if (!layer.isVisible()) {
          return;
        }
        var layerCanvas = layer._toKonvaCanvas(config);
        _context.drawImage(layerCanvas._canvas, config.x, config.y, layerCanvas.getWidth() / layerCanvas.getPixelRatio(), layerCanvas.getHeight() / layerCanvas.getPixelRatio());
      });
      return canvas;
    };
    Stage3.prototype.getIntersection = function(pos, selector) {
      if (!pos) {
        return null;
      }
      var layers = this.children, len = layers.length, end = len - 1, n2, shape;
      for (n2 = end; n2 >= 0; n2--) {
        shape = layers[n2].getIntersection(pos, selector);
        if (shape) {
          return shape;
        }
      }
      return null;
    };
    Stage3.prototype._resizeDOM = function() {
      var width2 = this.width();
      var height2 = this.height();
      if (this.content) {
        this.content.style.width = width2 + PX;
        this.content.style.height = height2 + PX;
      }
      this.bufferCanvas.setSize(width2, height2);
      this.bufferHitCanvas.setSize(width2, height2);
      this.children.each(function(layer) {
        layer.setSize({ width: width2, height: height2 });
        layer.draw();
      });
    };
    Stage3.prototype.add = function(layer) {
      if (arguments.length > 1) {
        for (var i2 = 0; i2 < arguments.length; i2++) {
          this.add(arguments[i2]);
        }
        return this;
      }
      _super.prototype.add.call(this, layer);
      var length = this.children.length;
      if (length > MAX_LAYERS_NUMBER) {
        Util_12.Util.warn("The stage has " + length + " layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group.");
      }
      layer.setSize({ width: this.width(), height: this.height() });
      layer.draw();
      if (Global_12.Konva.isBrowser) {
        this.content.appendChild(layer.canvas._canvas);
      }
      return this;
    };
    Stage3.prototype.getParent = function() {
      return null;
    };
    Stage3.prototype.getLayer = function() {
      return null;
    };
    Stage3.prototype.hasPointerCapture = function(pointerId) {
      return PointerEvents$1.hasPointerCapture(pointerId, this);
    };
    Stage3.prototype.setPointerCapture = function(pointerId) {
      PointerEvents$1.setPointerCapture(pointerId, this);
    };
    Stage3.prototype.releaseCapture = function(pointerId) {
      PointerEvents$1.releaseCapture(pointerId, this);
    };
    Stage3.prototype.getLayers = function() {
      return this.getChildren();
    };
    Stage3.prototype._bindContentEvents = function() {
      if (!Global_12.Konva.isBrowser) {
        return;
      }
      for (var n2 = 0; n2 < eventsLength; n2++) {
        addEvent(this, EVENTS[n2]);
      }
    };
    Stage3.prototype._mouseenter = function(evt) {
      this.setPointersPositions(evt);
      this._fire(MOUSEENTER, { evt, target: this, currentTarget: this });
    };
    Stage3.prototype._mouseover = function(evt) {
      this.setPointersPositions(evt);
      this._fire(CONTENT_MOUSEOVER, { evt });
      this._fire(MOUSEOVER, { evt, target: this, currentTarget: this });
    };
    Stage3.prototype._mouseleave = function(evt) {
      var _a2;
      this.setPointersPositions(evt);
      var targetShape = ((_a2 = this.targetShape) === null || _a2 === void 0 ? void 0 : _a2.getStage()) ? this.targetShape : null;
      var eventsEnabled = !DragAndDrop_12.DD.isDragging || Global_12.Konva.hitOnDragEnabled;
      if (targetShape && eventsEnabled) {
        targetShape._fireAndBubble(MOUSEOUT, { evt });
        targetShape._fireAndBubble(MOUSELEAVE, { evt });
        this._fire(MOUSELEAVE, { evt, target: this, currentTarget: this });
        this.targetShape = null;
      } else if (eventsEnabled) {
        this._fire(MOUSELEAVE, {
          evt,
          target: this,
          currentTarget: this
        });
        this._fire(MOUSEOUT, {
          evt,
          target: this,
          currentTarget: this
        });
      }
      this.pointerPos = void 0;
      this._pointerPositions = [];
      this._fire(CONTENT_MOUSEOUT, { evt });
    };
    Stage3.prototype._mousemove = function(evt) {
      var _a2;
      if (Global_12.Konva.UA.ieMobile) {
        return this._touchmove(evt);
      }
      this.setPointersPositions(evt);
      var pointerId = Util_12.Util._getFirstPointerId(evt);
      var shape;
      var targetShape = ((_a2 = this.targetShape) === null || _a2 === void 0 ? void 0 : _a2.getStage()) ? this.targetShape : null;
      var eventsEnabled = !DragAndDrop_12.DD.isDragging || Global_12.Konva.hitOnDragEnabled;
      if (eventsEnabled) {
        shape = this.getIntersection(this.getPointerPosition());
        if (shape && shape.isListening()) {
          var differentTarget = targetShape !== shape;
          if (eventsEnabled && differentTarget) {
            if (targetShape) {
              targetShape._fireAndBubble(MOUSEOUT, { evt, pointerId }, shape);
              targetShape._fireAndBubble(MOUSELEAVE, { evt, pointerId }, shape);
            }
            shape._fireAndBubble(MOUSEOVER, { evt, pointerId }, targetShape);
            shape._fireAndBubble(MOUSEENTER, { evt, pointerId }, targetShape);
            shape._fireAndBubble(MOUSEMOVE, { evt, pointerId });
            this.targetShape = shape;
          } else {
            shape._fireAndBubble(MOUSEMOVE, { evt, pointerId });
          }
        } else {
          if (targetShape && eventsEnabled) {
            targetShape._fireAndBubble(MOUSEOUT, { evt, pointerId });
            targetShape._fireAndBubble(MOUSELEAVE, { evt, pointerId });
            this._fire(MOUSEOVER, {
              evt,
              target: this,
              currentTarget: this,
              pointerId
            });
            this.targetShape = null;
          }
          this._fire(MOUSEMOVE, {
            evt,
            target: this,
            currentTarget: this,
            pointerId
          });
        }
        this._fire(CONTENT_MOUSEMOVE, { evt });
      }
      if (evt.cancelable) {
        evt.preventDefault();
      }
    };
    Stage3.prototype._mousedown = function(evt) {
      if (Global_12.Konva.UA.ieMobile) {
        return this._touchstart(evt);
      }
      this.setPointersPositions(evt);
      var pointerId = Util_12.Util._getFirstPointerId(evt);
      var shape = this.getIntersection(this.getPointerPosition());
      DragAndDrop_12.DD.justDragged = false;
      Global_12.Konva.listenClickTap = true;
      if (shape && shape.isListening()) {
        this.clickStartShape = shape;
        shape._fireAndBubble(MOUSEDOWN, { evt, pointerId });
      } else {
        this._fire(MOUSEDOWN, {
          evt,
          target: this,
          currentTarget: this,
          pointerId
        });
      }
      this._fire(CONTENT_MOUSEDOWN, { evt });
    };
    Stage3.prototype._mouseup = function(evt) {
      if (Global_12.Konva.UA.ieMobile) {
        return this._touchend(evt);
      }
      this.setPointersPositions(evt);
      var pointerId = Util_12.Util._getFirstPointerId(evt);
      var shape = this.getIntersection(this.getPointerPosition()), clickStartShape = this.clickStartShape, clickEndShape = this.clickEndShape, fireDblClick = false;
      if (Global_12.Konva.inDblClickWindow) {
        fireDblClick = true;
        clearTimeout(this.dblTimeout);
      } else if (!DragAndDrop_12.DD.justDragged) {
        Global_12.Konva.inDblClickWindow = true;
        clearTimeout(this.dblTimeout);
      }
      this.dblTimeout = setTimeout(function() {
        Global_12.Konva.inDblClickWindow = false;
      }, Global_12.Konva.dblClickWindow);
      if (shape && shape.isListening()) {
        this.clickEndShape = shape;
        shape._fireAndBubble(MOUSEUP, { evt, pointerId });
        if (Global_12.Konva.listenClickTap && clickStartShape && clickStartShape._id === shape._id) {
          shape._fireAndBubble(CLICK, { evt, pointerId });
          if (fireDblClick && clickEndShape && clickEndShape === shape) {
            shape._fireAndBubble(DBL_CLICK, { evt, pointerId });
          }
        }
      } else {
        this.clickEndShape = null;
        this._fire(MOUSEUP, {
          evt,
          target: this,
          currentTarget: this,
          pointerId
        });
        if (Global_12.Konva.listenClickTap) {
          this._fire(CLICK, {
            evt,
            target: this,
            currentTarget: this,
            pointerId
          });
        }
        if (fireDblClick) {
          this._fire(DBL_CLICK, {
            evt,
            target: this,
            currentTarget: this,
            pointerId
          });
        }
      }
      this._fire(CONTENT_MOUSEUP, { evt });
      if (Global_12.Konva.listenClickTap) {
        this._fire(CONTENT_CLICK, { evt });
        if (fireDblClick) {
          this._fire(CONTENT_DBL_CLICK, { evt });
        }
      }
      Global_12.Konva.listenClickTap = false;
      if (evt.cancelable) {
        evt.preventDefault();
      }
    };
    Stage3.prototype._contextmenu = function(evt) {
      this.setPointersPositions(evt);
      var shape = this.getIntersection(this.getPointerPosition());
      if (shape && shape.isListening()) {
        shape._fireAndBubble(CONTEXTMENU, { evt });
      } else {
        this._fire(CONTEXTMENU, {
          evt,
          target: this,
          currentTarget: this
        });
      }
      this._fire(CONTENT_CONTEXTMENU, { evt });
    };
    Stage3.prototype._touchstart = function(evt) {
      var _this = this;
      this.setPointersPositions(evt);
      var triggeredOnShape = false;
      this._changedPointerPositions.forEach(function(pos) {
        var shape = _this.getIntersection(pos);
        Global_12.Konva.listenClickTap = true;
        DragAndDrop_12.DD.justDragged = false;
        var hasShape = shape && shape.isListening();
        if (!hasShape) {
          return;
        }
        if (Global_12.Konva.captureTouchEventsEnabled) {
          shape.setPointerCapture(pos.id);
        }
        _this.tapStartShape = shape;
        shape._fireAndBubble(TOUCHSTART, { evt, pointerId: pos.id }, _this);
        triggeredOnShape = true;
        if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
          evt.preventDefault();
        }
      });
      if (!triggeredOnShape) {
        this._fire(TOUCHSTART, {
          evt,
          target: this,
          currentTarget: this,
          pointerId: this._changedPointerPositions[0].id
        });
      }
      this._fire(CONTENT_TOUCHSTART, { evt });
    };
    Stage3.prototype._touchmove = function(evt) {
      var _this = this;
      this.setPointersPositions(evt);
      var eventsEnabled = !DragAndDrop_12.DD.isDragging || Global_12.Konva.hitOnDragEnabled;
      if (eventsEnabled) {
        var triggeredOnShape = false;
        var processedShapesIds = {};
        this._changedPointerPositions.forEach(function(pos) {
          var shape = PointerEvents$1.getCapturedShape(pos.id) || _this.getIntersection(pos);
          var hasShape = shape && shape.isListening();
          if (!hasShape) {
            return;
          }
          if (processedShapesIds[shape._id]) {
            return;
          }
          processedShapesIds[shape._id] = true;
          shape._fireAndBubble(TOUCHMOVE, { evt, pointerId: pos.id });
          triggeredOnShape = true;
          if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
            evt.preventDefault();
          }
        });
        if (!triggeredOnShape) {
          this._fire(TOUCHMOVE, {
            evt,
            target: this,
            currentTarget: this,
            pointerId: this._changedPointerPositions[0].id
          });
        }
        this._fire(CONTENT_TOUCHMOVE, { evt });
      }
      if (DragAndDrop_12.DD.isDragging && DragAndDrop_12.DD.node.preventDefault() && evt.cancelable) {
        evt.preventDefault();
      }
    };
    Stage3.prototype._touchend = function(evt) {
      var _this = this;
      this.setPointersPositions(evt);
      var tapEndShape = this.tapEndShape, fireDblClick = false;
      if (Global_12.Konva.inDblClickWindow) {
        fireDblClick = true;
        clearTimeout(this.dblTimeout);
      } else if (!DragAndDrop_12.DD.justDragged) {
        Global_12.Konva.inDblClickWindow = true;
        clearTimeout(this.dblTimeout);
      }
      this.dblTimeout = setTimeout(function() {
        Global_12.Konva.inDblClickWindow = false;
      }, Global_12.Konva.dblClickWindow);
      var triggeredOnShape = false;
      var processedShapesIds = {};
      var tapTriggered = false;
      var dblTapTriggered = false;
      this._changedPointerPositions.forEach(function(pos) {
        var shape = PointerEvents$1.getCapturedShape(pos.id) || _this.getIntersection(pos);
        if (shape) {
          shape.releaseCapture(pos.id);
        }
        var hasShape = shape && shape.isListening();
        if (!hasShape) {
          return;
        }
        if (processedShapesIds[shape._id]) {
          return;
        }
        processedShapesIds[shape._id] = true;
        _this.tapEndShape = shape;
        shape._fireAndBubble(TOUCHEND, { evt, pointerId: pos.id });
        triggeredOnShape = true;
        if (Global_12.Konva.listenClickTap && shape === _this.tapStartShape) {
          tapTriggered = true;
          shape._fireAndBubble(TAP, { evt, pointerId: pos.id });
          if (fireDblClick && tapEndShape && tapEndShape === shape) {
            dblTapTriggered = true;
            shape._fireAndBubble(DBL_TAP, { evt, pointerId: pos.id });
          }
        }
        if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
          evt.preventDefault();
        }
      });
      if (!triggeredOnShape) {
        this._fire(TOUCHEND, {
          evt,
          target: this,
          currentTarget: this,
          pointerId: this._changedPointerPositions[0].id
        });
      }
      if (Global_12.Konva.listenClickTap && !tapTriggered) {
        this.tapEndShape = null;
        this._fire(TAP, {
          evt,
          target: this,
          currentTarget: this,
          pointerId: this._changedPointerPositions[0].id
        });
      }
      if (fireDblClick && !dblTapTriggered) {
        this._fire(DBL_TAP, {
          evt,
          target: this,
          currentTarget: this,
          pointerId: this._changedPointerPositions[0].id
        });
      }
      this._fire(CONTENT_TOUCHEND, { evt });
      if (Global_12.Konva.listenClickTap) {
        this._fire(CONTENT_TAP, { evt });
        if (fireDblClick) {
          this._fire(CONTENT_DBL_TAP, { evt });
        }
      }
      if (this.preventDefault() && evt.cancelable) {
        evt.preventDefault();
      }
      Global_12.Konva.listenClickTap = false;
    };
    Stage3.prototype._wheel = function(evt) {
      this.setPointersPositions(evt);
      var shape = this.getIntersection(this.getPointerPosition());
      if (shape && shape.isListening()) {
        shape._fireAndBubble(WHEEL, { evt });
      } else {
        this._fire(WHEEL, {
          evt,
          target: this,
          currentTarget: this
        });
      }
      this._fire(CONTENT_WHEEL, { evt });
    };
    Stage3.prototype._pointerdown = function(evt) {
      if (!Global_12.Konva._pointerEventsEnabled) {
        return;
      }
      this.setPointersPositions(evt);
      var shape = PointerEvents$1.getCapturedShape(evt.pointerId) || this.getIntersection(this.getPointerPosition());
      if (shape) {
        shape._fireAndBubble(POINTERDOWN, PointerEvents$1.createEvent(evt));
      }
    };
    Stage3.prototype._pointermove = function(evt) {
      if (!Global_12.Konva._pointerEventsEnabled) {
        return;
      }
      this.setPointersPositions(evt);
      var shape = PointerEvents$1.getCapturedShape(evt.pointerId) || this.getIntersection(this.getPointerPosition());
      if (shape) {
        shape._fireAndBubble(POINTERMOVE, PointerEvents$1.createEvent(evt));
      }
    };
    Stage3.prototype._pointerup = function(evt) {
      if (!Global_12.Konva._pointerEventsEnabled) {
        return;
      }
      this.setPointersPositions(evt);
      var shape = PointerEvents$1.getCapturedShape(evt.pointerId) || this.getIntersection(this.getPointerPosition());
      if (shape) {
        shape._fireAndBubble(POINTERUP, PointerEvents$1.createEvent(evt));
      }
      PointerEvents$1.releaseCapture(evt.pointerId);
    };
    Stage3.prototype._pointercancel = function(evt) {
      if (!Global_12.Konva._pointerEventsEnabled) {
        return;
      }
      this.setPointersPositions(evt);
      var shape = PointerEvents$1.getCapturedShape(evt.pointerId) || this.getIntersection(this.getPointerPosition());
      if (shape) {
        shape._fireAndBubble(POINTERUP, PointerEvents$1.createEvent(evt));
      }
      PointerEvents$1.releaseCapture(evt.pointerId);
    };
    Stage3.prototype._lostpointercapture = function(evt) {
      PointerEvents$1.releaseCapture(evt.pointerId);
    };
    Stage3.prototype.setPointersPositions = function(evt) {
      var _this = this;
      var contentPosition = this._getContentPosition(), x2 = null, y2 = null;
      evt = evt ? evt : window.event;
      if (evt.touches !== void 0) {
        this._pointerPositions = [];
        this._changedPointerPositions = [];
        Util_12.Collection.prototype.each.call(evt.touches, function(touch) {
          _this._pointerPositions.push({
            id: touch.identifier,
            x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
            y: (touch.clientY - contentPosition.top) / contentPosition.scaleY
          });
        });
        Util_12.Collection.prototype.each.call(evt.changedTouches || evt.touches, function(touch) {
          _this._changedPointerPositions.push({
            id: touch.identifier,
            x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
            y: (touch.clientY - contentPosition.top) / contentPosition.scaleY
          });
        });
      } else {
        x2 = (evt.clientX - contentPosition.left) / contentPosition.scaleX;
        y2 = (evt.clientY - contentPosition.top) / contentPosition.scaleY;
        this.pointerPos = {
          x: x2,
          y: y2
        };
        this._pointerPositions = [{ x: x2, y: y2, id: Util_12.Util._getFirstPointerId(evt) }];
        this._changedPointerPositions = [
          { x: x2, y: y2, id: Util_12.Util._getFirstPointerId(evt) }
        ];
      }
    };
    Stage3.prototype._setPointerPosition = function(evt) {
      Util_12.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.');
      this.setPointersPositions(evt);
    };
    Stage3.prototype._getContentPosition = function() {
      if (!this.content || !this.content.getBoundingClientRect) {
        return {
          top: 0,
          left: 0,
          scaleX: 1,
          scaleY: 1
        };
      }
      var rect = this.content.getBoundingClientRect();
      return {
        top: rect.top,
        left: rect.left,
        scaleX: rect.width / this.content.clientWidth || 1,
        scaleY: rect.height / this.content.clientHeight || 1
      };
    };
    Stage3.prototype._buildDOM = function() {
      this.bufferCanvas = new Canvas_12.SceneCanvas({
        width: this.width(),
        height: this.height()
      });
      this.bufferHitCanvas = new Canvas_12.HitCanvas({
        pixelRatio: 1,
        width: this.width(),
        height: this.height()
      });
      if (!Global_12.Konva.isBrowser) {
        return;
      }
      var container2 = this.container();
      if (!container2) {
        throw "Stage has no container. A container is required.";
      }
      container2.innerHTML = EMPTY_STRING2;
      this.content = document.createElement("div");
      this.content.style.position = RELATIVE;
      this.content.style.userSelect = "none";
      this.content.className = KONVA_CONTENT;
      this.content.setAttribute("role", "presentation");
      container2.appendChild(this.content);
      this._resizeDOM();
    };
    Stage3.prototype.cache = function() {
      Util_12.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.");
      return this;
    };
    Stage3.prototype.clearCache = function() {
      return this;
    };
    Stage3.prototype.batchDraw = function() {
      this.children.each(function(layer) {
        layer.batchDraw();
      });
      return this;
    };
    return Stage3;
  }(Container_12.Container);
  exports.Stage = Stage2;
  Stage2.prototype.nodeType = STAGE;
  Global_22._registerNode(Stage2);
  Factory_12.Factory.addGetterSetter(Stage2, "container");
})(Stage);
var Layer$1 = {};
var Shape = {};
(function(exports) {
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d4[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Shape = exports.shapes = void 0;
  var Util_12 = Util;
  var Factory_12 = Factory;
  var Node_12 = Node;
  var Validators_12 = Validators;
  var Global_12 = Global;
  var PointerEvents$1 = PointerEvents;
  var HAS_SHADOW = "hasShadow";
  var SHADOW_RGBA = "shadowRGBA";
  var patternImage = "patternImage";
  var linearGradient = "linearGradient";
  var radialGradient = "radialGradient";
  var dummyContext2;
  function getDummyContext2() {
    if (dummyContext2) {
      return dummyContext2;
    }
    dummyContext2 = Util_12.Util.createCanvasElement().getContext("2d");
    return dummyContext2;
  }
  exports.shapes = {};
  function _fillFunc2(context) {
    context.fill();
  }
  function _strokeFunc2(context) {
    context.stroke();
  }
  function _fillFuncHit(context) {
    context.fill();
  }
  function _strokeFuncHit(context) {
    context.stroke();
  }
  function _clearHasShadowCache() {
    this._clearCache(HAS_SHADOW);
  }
  function _clearGetShadowRGBACache() {
    this._clearCache(SHADOW_RGBA);
  }
  function _clearFillPatternCache() {
    this._clearCache(patternImage);
  }
  function _clearLinearGradientCache() {
    this._clearCache(linearGradient);
  }
  function _clearRadialGradientCache() {
    this._clearCache(radialGradient);
  }
  var Shape2 = function(_super) {
    __extends2(Shape3, _super);
    function Shape3(config) {
      var _this = _super.call(this, config) || this;
      var key;
      while (true) {
        key = Util_12.Util.getRandomColor();
        if (key && !(key in exports.shapes)) {
          break;
        }
      }
      _this.colorKey = key;
      exports.shapes[key] = _this;
      return _this;
    }
    Shape3.prototype.getContext = function() {
      return this.getLayer().getContext();
    };
    Shape3.prototype.getCanvas = function() {
      return this.getLayer().getCanvas();
    };
    Shape3.prototype.getSceneFunc = function() {
      return this.attrs.sceneFunc || this["_sceneFunc"];
    };
    Shape3.prototype.getHitFunc = function() {
      return this.attrs.hitFunc || this["_hitFunc"];
    };
    Shape3.prototype.hasShadow = function() {
      return this._getCache(HAS_SHADOW, this._hasShadow);
    };
    Shape3.prototype._hasShadow = function() {
      return this.shadowEnabled() && this.shadowOpacity() !== 0 && !!(this.shadowColor() || this.shadowBlur() || this.shadowOffsetX() || this.shadowOffsetY());
    };
    Shape3.prototype._getFillPattern = function() {
      return this._getCache(patternImage, this.__getFillPattern);
    };
    Shape3.prototype.__getFillPattern = function() {
      if (this.fillPatternImage()) {
        var ctx = getDummyContext2();
        var pattern = ctx.createPattern(this.fillPatternImage(), this.fillPatternRepeat() || "repeat");
        if (pattern && pattern.setTransform) {
          pattern.setTransform({
            a: this.fillPatternScaleX(),
            b: 0,
            c: 0,
            d: this.fillPatternScaleY(),
            e: 0,
            f: 0
          });
        }
        return pattern;
      }
    };
    Shape3.prototype._getLinearGradient = function() {
      return this._getCache(linearGradient, this.__getLinearGradient);
    };
    Shape3.prototype.__getLinearGradient = function() {
      var colorStops = this.fillLinearGradientColorStops();
      if (colorStops) {
        var ctx = getDummyContext2();
        var start = this.fillLinearGradientStartPoint();
        var end = this.fillLinearGradientEndPoint();
        var grd = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
        for (var n2 = 0; n2 < colorStops.length; n2 += 2) {
          grd.addColorStop(colorStops[n2], colorStops[n2 + 1]);
        }
        return grd;
      }
    };
    Shape3.prototype._getRadialGradient = function() {
      return this._getCache(radialGradient, this.__getRadialGradient);
    };
    Shape3.prototype.__getRadialGradient = function() {
      var colorStops = this.fillRadialGradientColorStops();
      if (colorStops) {
        var ctx = getDummyContext2();
        var start = this.fillRadialGradientStartPoint();
        var end = this.fillRadialGradientEndPoint();
        var grd = ctx.createRadialGradient(start.x, start.y, this.fillRadialGradientStartRadius(), end.x, end.y, this.fillRadialGradientEndRadius());
        for (var n2 = 0; n2 < colorStops.length; n2 += 2) {
          grd.addColorStop(colorStops[n2], colorStops[n2 + 1]);
        }
        return grd;
      }
    };
    Shape3.prototype.getShadowRGBA = function() {
      return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
    };
    Shape3.prototype._getShadowRGBA = function() {
      if (this.hasShadow()) {
        var rgba2 = Util_12.Util.colorToRGBA(this.shadowColor());
        return "rgba(" + rgba2.r + "," + rgba2.g + "," + rgba2.b + "," + rgba2.a * (this.shadowOpacity() || 1) + ")";
      }
    };
    Shape3.prototype.hasFill = function() {
      var _this = this;
      return this._calculate("hasFill", [
        "fillEnabled",
        "fill",
        "fillPatternImage",
        "fillLinearGradientColorStops",
        "fillRadialGradientColorStops"
      ], function() {
        return _this.fillEnabled() && !!(_this.fill() || _this.fillPatternImage() || _this.fillLinearGradientColorStops() || _this.fillRadialGradientColorStops());
      });
    };
    Shape3.prototype.hasStroke = function() {
      var _this = this;
      return this._calculate("hasStroke", [
        "strokeEnabled",
        "strokeWidth",
        "stroke",
        "strokeLinearGradientColorStops"
      ], function() {
        return _this.strokeEnabled() && _this.strokeWidth() && !!(_this.stroke() || _this.strokeLinearGradientColorStops());
      });
    };
    Shape3.prototype.hasHitStroke = function() {
      var width2 = this.hitStrokeWidth();
      if (width2 === "auto") {
        return this.hasStroke();
      }
      return this.strokeEnabled() && !!width2;
    };
    Shape3.prototype.intersects = function(point) {
      var stage = this.getStage(), bufferHitCanvas = stage.bufferHitCanvas, p2;
      bufferHitCanvas.getContext().clear();
      this.drawHit(bufferHitCanvas, null, true);
      p2 = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
      return p2[3] > 0;
    };
    Shape3.prototype.destroy = function() {
      Node_12.Node.prototype.destroy.call(this);
      delete exports.shapes[this.colorKey];
      delete this.colorKey;
      return this;
    };
    Shape3.prototype._useBufferCanvas = function(forceFill) {
      var _a2;
      if (!this.getStage()) {
        return false;
      }
      var perfectDrawEnabled = (_a2 = this.attrs.perfectDrawEnabled) !== null && _a2 !== void 0 ? _a2 : true;
      if (!perfectDrawEnabled) {
        return false;
      }
      var hasFill = forceFill || this.hasFill();
      var hasStroke = this.hasStroke();
      var isTransparent = this.getAbsoluteOpacity() !== 1;
      if (hasFill && hasStroke && isTransparent) {
        return true;
      }
      var hasShadow = this.hasShadow();
      var strokeForShadow = this.shadowForStrokeEnabled();
      if (hasFill && hasStroke && hasShadow && strokeForShadow) {
        return true;
      }
      return false;
    };
    Shape3.prototype.setStrokeHitEnabled = function(val) {
      Util_12.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead.");
      if (val) {
        this.hitStrokeWidth("auto");
      } else {
        this.hitStrokeWidth(0);
      }
    };
    Shape3.prototype.getStrokeHitEnabled = function() {
      if (this.hitStrokeWidth() === 0) {
        return false;
      } else {
        return true;
      }
    };
    Shape3.prototype.getSelfRect = function() {
      var size3 = this.size();
      return {
        x: this._centroid ? -size3.width / 2 : 0,
        y: this._centroid ? -size3.height / 2 : 0,
        width: size3.width,
        height: size3.height
      };
    };
    Shape3.prototype.getClientRect = function(config) {
      if (config === void 0) {
        config = {};
      }
      var skipTransform = config.skipTransform;
      var relativeTo = config.relativeTo;
      var fillRect = this.getSelfRect();
      var applyStroke = !config.skipStroke && this.hasStroke();
      var strokeWidth = applyStroke && this.strokeWidth() || 0;
      var fillAndStrokeWidth = fillRect.width + strokeWidth;
      var fillAndStrokeHeight = fillRect.height + strokeWidth;
      var applyShadow = !config.skipShadow && this.hasShadow();
      var shadowOffsetX = applyShadow ? this.shadowOffsetX() : 0;
      var shadowOffsetY = applyShadow ? this.shadowOffsetY() : 0;
      var preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
      var preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);
      var blurRadius = applyShadow && this.shadowBlur() || 0;
      var width2 = preWidth + blurRadius * 2;
      var height2 = preHeight + blurRadius * 2;
      var roundingOffset = 0;
      if (Math.round(strokeWidth / 2) !== strokeWidth / 2) {
        roundingOffset = 1;
      }
      var rect = {
        width: width2 + roundingOffset,
        height: height2 + roundingOffset,
        x: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetX, 0) + fillRect.x,
        y: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetY, 0) + fillRect.y
      };
      if (!skipTransform) {
        return this._transformedRect(rect, relativeTo);
      }
      return rect;
    };
    Shape3.prototype.drawScene = function(can, top) {
      var layer = this.getLayer(), canvas = can || layer.getCanvas(), context = canvas.getContext(), cachedCanvas = this._getCanvasCache(), drawFunc = this.getSceneFunc(), hasShadow = this.hasShadow(), stage, bufferCanvas, bufferContext;
      var caching = canvas.isCache;
      var skipBuffer = canvas.isCache;
      var cachingSelf = top === this;
      if (!this.isVisible() && !caching) {
        return this;
      }
      if (cachedCanvas) {
        context.save();
        var m2 = this.getAbsoluteTransform(top).getMatrix();
        context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
        this._drawCachedSceneCanvas(context);
        context.restore();
        return this;
      }
      if (!drawFunc) {
        return this;
      }
      context.save();
      if (this._useBufferCanvas() && !skipBuffer) {
        stage = this.getStage();
        bufferCanvas = stage.bufferCanvas;
        bufferContext = bufferCanvas.getContext();
        bufferContext.clear();
        bufferContext.save();
        bufferContext._applyLineJoin(this);
        var o2 = this.getAbsoluteTransform(top).getMatrix();
        bufferContext.transform(o2[0], o2[1], o2[2], o2[3], o2[4], o2[5]);
        drawFunc.call(this, bufferContext, this);
        bufferContext.restore();
        var ratio = bufferCanvas.pixelRatio;
        if (hasShadow) {
          context._applyShadow(this);
        }
        context._applyOpacity(this);
        context._applyGlobalCompositeOperation(this);
        context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);
      } else {
        context._applyLineJoin(this);
        if (!cachingSelf) {
          var o2 = this.getAbsoluteTransform(top).getMatrix();
          context.transform(o2[0], o2[1], o2[2], o2[3], o2[4], o2[5]);
          context._applyOpacity(this);
          context._applyGlobalCompositeOperation(this);
        }
        if (hasShadow) {
          context._applyShadow(this);
        }
        drawFunc.call(this, context, this);
      }
      context.restore();
      return this;
    };
    Shape3.prototype.drawHit = function(can, top, skipDragCheck) {
      if (skipDragCheck === void 0) {
        skipDragCheck = false;
      }
      if (!this.shouldDrawHit(top, skipDragCheck)) {
        return this;
      }
      var layer = this.getLayer(), canvas = can || layer.hitCanvas, context = canvas && canvas.getContext(), drawFunc = this.hitFunc() || this.sceneFunc(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
      if (!this.colorKey) {
        console.log(this);
        Util_12.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()");
      }
      if (cachedHitCanvas) {
        context.save();
        var m2 = this.getAbsoluteTransform(top).getMatrix();
        context.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
        this._drawCachedHitCanvas(context);
        context.restore();
        return this;
      }
      if (!drawFunc) {
        return this;
      }
      context.save();
      context._applyLineJoin(this);
      var selfCache = this === top;
      if (!selfCache) {
        var o2 = this.getAbsoluteTransform(top).getMatrix();
        context.transform(o2[0], o2[1], o2[2], o2[3], o2[4], o2[5]);
      }
      drawFunc.call(this, context, this);
      context.restore();
      return this;
    };
    Shape3.prototype.drawHitFromCache = function(alphaThreshold) {
      if (alphaThreshold === void 0) {
        alphaThreshold = 0;
      }
      var cachedCanvas = this._getCanvasCache(), sceneCanvas = this._getCachedSceneCanvas(), hitCanvas = cachedCanvas.hit, hitContext = hitCanvas.getContext(), hitWidth = hitCanvas.getWidth(), hitHeight = hitCanvas.getHeight(), hitImageData, hitData, len, rgbColorKey, i2, alpha;
      hitContext.clear();
      hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);
      try {
        hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
        hitData = hitImageData.data;
        len = hitData.length;
        rgbColorKey = Util_12.Util._hexToRgb(this.colorKey);
        for (i2 = 0; i2 < len; i2 += 4) {
          alpha = hitData[i2 + 3];
          if (alpha > alphaThreshold) {
            hitData[i2] = rgbColorKey.r;
            hitData[i2 + 1] = rgbColorKey.g;
            hitData[i2 + 2] = rgbColorKey.b;
            hitData[i2 + 3] = 255;
          } else {
            hitData[i2 + 3] = 0;
          }
        }
        hitContext.putImageData(hitImageData, 0, 0);
      } catch (e2) {
        Util_12.Util.error("Unable to draw hit graph from cached scene canvas. " + e2.message);
      }
      return this;
    };
    Shape3.prototype.hasPointerCapture = function(pointerId) {
      return PointerEvents$1.hasPointerCapture(pointerId, this);
    };
    Shape3.prototype.setPointerCapture = function(pointerId) {
      PointerEvents$1.setPointerCapture(pointerId, this);
    };
    Shape3.prototype.releaseCapture = function(pointerId) {
      PointerEvents$1.releaseCapture(pointerId, this);
    };
    return Shape3;
  }(Node_12.Node);
  exports.Shape = Shape2;
  Shape2.prototype._fillFunc = _fillFunc2;
  Shape2.prototype._strokeFunc = _strokeFunc2;
  Shape2.prototype._fillFuncHit = _fillFuncHit;
  Shape2.prototype._strokeFuncHit = _strokeFuncHit;
  Shape2.prototype._centroid = false;
  Shape2.prototype.nodeType = "Shape";
  Global_12._registerNode(Shape2);
  Shape2.prototype.eventListeners = {};
  Shape2.prototype.on.call(Shape2.prototype, "shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva", _clearHasShadowCache);
  Shape2.prototype.on.call(Shape2.prototype, "shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva", _clearGetShadowRGBACache);
  Shape2.prototype.on.call(Shape2.prototype, "fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva", _clearFillPatternCache);
  Shape2.prototype.on.call(Shape2.prototype, "fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva", _clearLinearGradientCache);
  Shape2.prototype.on.call(Shape2.prototype, "fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva", _clearRadialGradientCache);
  Factory_12.Factory.addGetterSetter(Shape2, "stroke", void 0, Validators_12.getStringOrGradientValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "strokeWidth", 2, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillAfterStrokeEnabled", false);
  Factory_12.Factory.addGetterSetter(Shape2, "hitStrokeWidth", "auto", Validators_12.getNumberOrAutoValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "strokeHitEnabled", true, Validators_12.getBooleanValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "perfectDrawEnabled", true, Validators_12.getBooleanValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "shadowForStrokeEnabled", true, Validators_12.getBooleanValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "lineJoin");
  Factory_12.Factory.addGetterSetter(Shape2, "lineCap");
  Factory_12.Factory.addGetterSetter(Shape2, "sceneFunc");
  Factory_12.Factory.addGetterSetter(Shape2, "hitFunc");
  Factory_12.Factory.addGetterSetter(Shape2, "dash");
  Factory_12.Factory.addGetterSetter(Shape2, "dashOffset", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "shadowColor", void 0, Validators_12.getStringValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "shadowBlur", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "shadowOpacity", 1, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "shadowOffset", ["x", "y"]);
  Factory_12.Factory.addGetterSetter(Shape2, "shadowOffsetX", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "shadowOffsetY", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternImage");
  Factory_12.Factory.addGetterSetter(Shape2, "fill", void 0, Validators_12.getStringOrGradientValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternX", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternY", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillLinearGradientColorStops");
  Factory_12.Factory.addGetterSetter(Shape2, "strokeLinearGradientColorStops");
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientStartRadius", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientEndRadius", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientColorStops");
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternRepeat", "repeat");
  Factory_12.Factory.addGetterSetter(Shape2, "fillEnabled", true);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeEnabled", true);
  Factory_12.Factory.addGetterSetter(Shape2, "shadowEnabled", true);
  Factory_12.Factory.addGetterSetter(Shape2, "dashEnabled", true);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeScaleEnabled", true);
  Factory_12.Factory.addGetterSetter(Shape2, "fillPriority", "color");
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillPatternOffset", ["x", "y"]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternOffsetX", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternOffsetY", 0, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillPatternScale", ["x", "y"]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternScaleX", 1, Validators_12.getNumberValidator());
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternScaleY", 1, Validators_12.getNumberValidator());
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillLinearGradientStartPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "strokeLinearGradientStartPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillLinearGradientStartPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeLinearGradientStartPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillLinearGradientStartPointY", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeLinearGradientStartPointY", 0);
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillLinearGradientEndPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "strokeLinearGradientEndPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillLinearGradientEndPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeLinearGradientEndPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillLinearGradientEndPointY", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "strokeLinearGradientEndPointY", 0);
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillRadialGradientStartPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientStartPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientStartPointY", 0);
  Factory_12.Factory.addComponentsGetterSetter(Shape2, "fillRadialGradientEndPoint", [
    "x",
    "y"
  ]);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientEndPointX", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillRadialGradientEndPointY", 0);
  Factory_12.Factory.addGetterSetter(Shape2, "fillPatternRotation", 0);
  Factory_12.Factory.backCompat(Shape2, {
    dashArray: "dash",
    getDashArray: "getDash",
    setDashArray: "getDash",
    drawFunc: "sceneFunc",
    getDrawFunc: "getSceneFunc",
    setDrawFunc: "setSceneFunc",
    drawHitFunc: "hitFunc",
    getDrawHitFunc: "getHitFunc",
    setDrawHitFunc: "setHitFunc"
  });
  Util_12.Collection.mapMethods(Shape2);
})(Shape);
var __extends$j = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Layer$1, "__esModule", { value: true });
Layer$1.Layer = void 0;
var Util_1$n = Util;
var Container_1$2 = Container$1;
var Node_1$h = Node;
var Factory_1$w = Factory;
var Canvas_1$1 = Canvas$1;
var Validators_1$v = Validators;
var Shape_1$h = Shape;
var Global_1$l = Global;
var HASH = "#", BEFORE_DRAW = "beforeDraw", DRAW = "draw", INTERSECTION_OFFSETS = [
  { x: 0, y: 0 },
  { x: -1, y: -1 },
  { x: 1, y: -1 },
  { x: 1, y: 1 },
  { x: -1, y: 1 }
], INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;
var Layer = function(_super) {
  __extends$j(Layer2, _super);
  function Layer2(config) {
    var _this = _super.call(this, config) || this;
    _this.canvas = new Canvas_1$1.SceneCanvas();
    _this.hitCanvas = new Canvas_1$1.HitCanvas({
      pixelRatio: 1
    });
    _this._waitingForDraw = false;
    _this.on("visibleChange.konva", _this._checkVisibility);
    _this._checkVisibility();
    _this.on("imageSmoothingEnabledChange.konva", _this._setSmoothEnabled);
    _this._setSmoothEnabled();
    return _this;
  }
  Layer2.prototype.createPNGStream = function() {
    var c2 = this.canvas._canvas;
    return c2.createPNGStream();
  };
  Layer2.prototype.getCanvas = function() {
    return this.canvas;
  };
  Layer2.prototype.getHitCanvas = function() {
    return this.hitCanvas;
  };
  Layer2.prototype.getContext = function() {
    return this.getCanvas().getContext();
  };
  Layer2.prototype.clear = function(bounds2) {
    this.getContext().clear(bounds2);
    this.getHitCanvas().getContext().clear(bounds2);
    return this;
  };
  Layer2.prototype.setZIndex = function(index) {
    _super.prototype.setZIndex.call(this, index);
    var stage = this.getStage();
    if (stage) {
      stage.content.removeChild(this.getCanvas()._canvas);
      if (index < stage.children.length - 1) {
        stage.content.insertBefore(this.getCanvas()._canvas, stage.children[index + 1].getCanvas()._canvas);
      } else {
        stage.content.appendChild(this.getCanvas()._canvas);
      }
    }
    return this;
  };
  Layer2.prototype.moveToTop = function() {
    Node_1$h.Node.prototype.moveToTop.call(this);
    var stage = this.getStage();
    if (stage) {
      stage.content.removeChild(this.getCanvas()._canvas);
      stage.content.appendChild(this.getCanvas()._canvas);
    }
    return true;
  };
  Layer2.prototype.moveUp = function() {
    var moved = Node_1$h.Node.prototype.moveUp.call(this);
    if (!moved) {
      return false;
    }
    var stage = this.getStage();
    if (!stage) {
      return false;
    }
    stage.content.removeChild(this.getCanvas()._canvas);
    if (this.index < stage.children.length - 1) {
      stage.content.insertBefore(this.getCanvas()._canvas, stage.children[this.index + 1].getCanvas()._canvas);
    } else {
      stage.content.appendChild(this.getCanvas()._canvas);
    }
    return true;
  };
  Layer2.prototype.moveDown = function() {
    if (Node_1$h.Node.prototype.moveDown.call(this)) {
      var stage = this.getStage();
      if (stage) {
        var children2 = stage.children;
        stage.content.removeChild(this.getCanvas()._canvas);
        stage.content.insertBefore(this.getCanvas()._canvas, children2[this.index + 1].getCanvas()._canvas);
      }
      return true;
    }
    return false;
  };
  Layer2.prototype.moveToBottom = function() {
    if (Node_1$h.Node.prototype.moveToBottom.call(this)) {
      var stage = this.getStage();
      if (stage) {
        var children2 = stage.children;
        stage.content.removeChild(this.getCanvas()._canvas);
        stage.content.insertBefore(this.getCanvas()._canvas, children2[1].getCanvas()._canvas);
      }
      return true;
    }
    return false;
  };
  Layer2.prototype.getLayer = function() {
    return this;
  };
  Layer2.prototype.remove = function() {
    var _canvas = this.getCanvas()._canvas;
    Node_1$h.Node.prototype.remove.call(this);
    if (_canvas && _canvas.parentNode && Util_1$n.Util._isInDocument(_canvas)) {
      _canvas.parentNode.removeChild(_canvas);
    }
    return this;
  };
  Layer2.prototype.getStage = function() {
    return this.parent;
  };
  Layer2.prototype.setSize = function(_a2) {
    var width2 = _a2.width, height2 = _a2.height;
    this.canvas.setSize(width2, height2);
    this.hitCanvas.setSize(width2, height2);
    this._setSmoothEnabled();
    return this;
  };
  Layer2.prototype._validateAdd = function(child) {
    var type = child.getType();
    if (type !== "Group" && type !== "Shape") {
      Util_1$n.Util.throw("You may only add groups and shapes to a layer.");
    }
  };
  Layer2.prototype._toKonvaCanvas = function(config) {
    config = config || {};
    config.width = config.width || this.getWidth();
    config.height = config.height || this.getHeight();
    config.x = config.x !== void 0 ? config.x : this.x();
    config.y = config.y !== void 0 ? config.y : this.y();
    return Node_1$h.Node.prototype._toKonvaCanvas.call(this, config);
  };
  Layer2.prototype._checkVisibility = function() {
    var visible = this.visible();
    if (visible) {
      this.canvas._canvas.style.display = "block";
    } else {
      this.canvas._canvas.style.display = "none";
    }
  };
  Layer2.prototype._setSmoothEnabled = function() {
    this.getContext()._context.imageSmoothingEnabled = this.imageSmoothingEnabled();
  };
  Layer2.prototype.getWidth = function() {
    if (this.parent) {
      return this.parent.width();
    }
  };
  Layer2.prototype.setWidth = function() {
    Util_1$n.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
  };
  Layer2.prototype.getHeight = function() {
    if (this.parent) {
      return this.parent.height();
    }
  };
  Layer2.prototype.setHeight = function() {
    Util_1$n.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
  };
  Layer2.prototype.batchDraw = function() {
    var _this = this;
    if (!this._waitingForDraw) {
      this._waitingForDraw = true;
      Util_1$n.Util.requestAnimFrame(function() {
        _this.draw();
        _this._waitingForDraw = false;
      });
    }
    return this;
  };
  Layer2.prototype.getIntersection = function(pos, selector) {
    if (!this.isListening() || !this.isVisible()) {
      return null;
    }
    var spiralSearchDistance = 1;
    var continueSearch = false;
    while (true) {
      for (var i2 = 0; i2 < INTERSECTION_OFFSETS_LEN; i2++) {
        var intersectionOffset = INTERSECTION_OFFSETS[i2];
        var obj = this._getIntersection({
          x: pos.x + intersectionOffset.x * spiralSearchDistance,
          y: pos.y + intersectionOffset.y * spiralSearchDistance
        });
        var shape = obj.shape;
        if (shape && selector) {
          return shape.findAncestor(selector, true);
        } else if (shape) {
          return shape;
        }
        continueSearch = !!obj.antialiased;
        if (!obj.antialiased) {
          break;
        }
      }
      if (continueSearch) {
        spiralSearchDistance += 1;
      } else {
        return null;
      }
    }
  };
  Layer2.prototype._getIntersection = function(pos) {
    var ratio = this.hitCanvas.pixelRatio;
    var p2 = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data;
    var p3 = p2[3];
    if (p3 === 255) {
      var colorKey = Util_1$n.Util._rgbToHex(p2[0], p2[1], p2[2]);
      var shape = Shape_1$h.shapes[HASH + colorKey];
      if (shape) {
        return {
          shape
        };
      }
      return {
        antialiased: true
      };
    } else if (p3 > 0) {
      return {
        antialiased: true
      };
    }
    return {};
  };
  Layer2.prototype.drawScene = function(can, top) {
    var layer = this.getLayer(), canvas = can || layer && layer.getCanvas();
    this._fire(BEFORE_DRAW, {
      node: this
    });
    if (this.clearBeforeDraw()) {
      canvas.getContext().clear();
    }
    Container_1$2.Container.prototype.drawScene.call(this, canvas, top);
    this._fire(DRAW, {
      node: this
    });
    return this;
  };
  Layer2.prototype.drawHit = function(can, top) {
    var layer = this.getLayer(), canvas = can || layer && layer.hitCanvas;
    if (layer && layer.clearBeforeDraw()) {
      layer.getHitCanvas().getContext().clear();
    }
    Container_1$2.Container.prototype.drawHit.call(this, canvas, top);
    return this;
  };
  Layer2.prototype.enableHitGraph = function() {
    this.hitGraphEnabled(true);
    return this;
  };
  Layer2.prototype.disableHitGraph = function() {
    this.hitGraphEnabled(false);
    return this;
  };
  Layer2.prototype.setHitGraphEnabled = function(val) {
    Util_1$n.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead.");
    this.listening(val);
  };
  Layer2.prototype.getHitGraphEnabled = function(val) {
    Util_1$n.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead.");
    return this.listening();
  };
  Layer2.prototype.toggleHitCanvas = function() {
    if (!this.parent) {
      return;
    }
    var parent4 = this.parent;
    var added = !!this.hitCanvas._canvas.parentNode;
    if (added) {
      parent4.content.removeChild(this.hitCanvas._canvas);
    } else {
      parent4.content.appendChild(this.hitCanvas._canvas);
    }
  };
  return Layer2;
}(Container_1$2.Container);
Layer$1.Layer = Layer;
Layer.prototype.nodeType = "Layer";
Global_1$l._registerNode(Layer);
Factory_1$w.Factory.addGetterSetter(Layer, "imageSmoothingEnabled", true);
Factory_1$w.Factory.addGetterSetter(Layer, "clearBeforeDraw", true);
Factory_1$w.Factory.addGetterSetter(Layer, "hitGraphEnabled", true, Validators_1$v.getBooleanValidator());
Util_1$n.Collection.mapMethods(Layer);
var FastLayer$1 = {};
var __extends$i = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(FastLayer$1, "__esModule", { value: true });
FastLayer$1.FastLayer = void 0;
var Util_1$m = Util;
var Layer_1$1 = Layer$1;
var Global_1$k = Global;
var FastLayer = function(_super) {
  __extends$i(FastLayer2, _super);
  function FastLayer2(attrs) {
    var _this = _super.call(this, attrs) || this;
    _this.listening(false);
    Util_1$m.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.');
    return _this;
  }
  return FastLayer2;
}(Layer_1$1.Layer);
FastLayer$1.FastLayer = FastLayer;
FastLayer.prototype.nodeType = "FastLayer";
Global_1$k._registerNode(FastLayer);
Util_1$m.Collection.mapMethods(FastLayer);
var Group$1 = {};
var __extends$h = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Group$1, "__esModule", { value: true });
Group$1.Group = void 0;
var Util_1$l = Util;
var Container_1$1 = Container$1;
var Global_1$j = Global;
var Group = function(_super) {
  __extends$h(Group2, _super);
  function Group2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Group2.prototype._validateAdd = function(child) {
    var type = child.getType();
    if (type !== "Group" && type !== "Shape") {
      Util_1$l.Util.throw("You may only add groups and shapes to groups.");
    }
  };
  return Group2;
}(Container_1$1.Container);
Group$1.Group = Group;
Group.prototype.nodeType = "Group";
Global_1$j._registerNode(Group);
Util_1$l.Collection.mapMethods(Group);
var Animation$1 = {};
Object.defineProperty(Animation$1, "__esModule", { value: true });
Animation$1.Animation = void 0;
var Global_1$i = Global;
var now = function() {
  if (Global_1$i.glob.performance && Global_1$i.glob.performance.now) {
    return function() {
      return Global_1$i.glob.performance.now();
    };
  }
  return function() {
    return (/* @__PURE__ */ new Date()).getTime();
  };
}();
var Animation2 = function() {
  function Animation3(func, layers) {
    this.id = Animation3.animIdCounter++;
    this.frame = {
      time: 0,
      timeDiff: 0,
      lastTime: now(),
      frameRate: 0
    };
    this.func = func;
    this.setLayers(layers);
  }
  Animation3.prototype.setLayers = function(layers) {
    var lays = [];
    if (!layers) {
      lays = [];
    } else if (layers.length > 0) {
      lays = layers;
    } else {
      lays = [layers];
    }
    this.layers = lays;
    return this;
  };
  Animation3.prototype.getLayers = function() {
    return this.layers;
  };
  Animation3.prototype.addLayer = function(layer) {
    var layers = this.layers, len = layers.length, n2;
    for (n2 = 0; n2 < len; n2++) {
      if (layers[n2]._id === layer._id) {
        return false;
      }
    }
    this.layers.push(layer);
    return true;
  };
  Animation3.prototype.isRunning = function() {
    var a2 = Animation3, animations = a2.animations, len = animations.length, n2;
    for (n2 = 0; n2 < len; n2++) {
      if (animations[n2].id === this.id) {
        return true;
      }
    }
    return false;
  };
  Animation3.prototype.start = function() {
    this.stop();
    this.frame.timeDiff = 0;
    this.frame.lastTime = now();
    Animation3._addAnimation(this);
    return this;
  };
  Animation3.prototype.stop = function() {
    Animation3._removeAnimation(this);
    return this;
  };
  Animation3.prototype._updateFrameObject = function(time2) {
    this.frame.timeDiff = time2 - this.frame.lastTime;
    this.frame.lastTime = time2;
    this.frame.time += this.frame.timeDiff;
    this.frame.frameRate = 1e3 / this.frame.timeDiff;
  };
  Animation3._addAnimation = function(anim) {
    this.animations.push(anim);
    this._handleAnimation();
  };
  Animation3._removeAnimation = function(anim) {
    var id2 = anim.id, animations = this.animations, len = animations.length, n2;
    for (n2 = 0; n2 < len; n2++) {
      if (animations[n2].id === id2) {
        this.animations.splice(n2, 1);
        break;
      }
    }
  };
  Animation3._runFrames = function() {
    var layerHash = {}, animations = this.animations, anim, layers, func, n2, i2, layersLen, layer, key, needRedraw;
    for (n2 = 0; n2 < animations.length; n2++) {
      anim = animations[n2];
      layers = anim.layers;
      func = anim.func;
      anim._updateFrameObject(now());
      layersLen = layers.length;
      if (func) {
        needRedraw = func.call(anim, anim.frame) !== false;
      } else {
        needRedraw = true;
      }
      if (!needRedraw) {
        continue;
      }
      for (i2 = 0; i2 < layersLen; i2++) {
        layer = layers[i2];
        if (layer._id !== void 0) {
          layerHash[layer._id] = layer;
        }
      }
    }
    for (key in layerHash) {
      if (!layerHash.hasOwnProperty(key)) {
        continue;
      }
      layerHash[key].draw();
    }
  };
  Animation3._animationLoop = function() {
    var Anim = Animation3;
    if (Anim.animations.length) {
      Anim._runFrames();
      requestAnimationFrame(Anim._animationLoop);
    } else {
      Anim.animRunning = false;
    }
  };
  Animation3._handleAnimation = function() {
    if (!this.animRunning) {
      this.animRunning = true;
      requestAnimationFrame(this._animationLoop);
    }
  };
  Animation3.animations = [];
  Animation3.animIdCounter = 0;
  Animation3.animRunning = false;
  return Animation3;
}();
Animation$1.Animation = Animation2;
var Tween = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Easings = exports.Tween = void 0;
  var Util_12 = Util;
  var Animation_12 = Animation$1;
  var Node_12 = Node;
  var Global_12 = Global;
  var blacklist = {
    node: 1,
    duration: 1,
    easing: 1,
    onFinish: 1,
    yoyo: 1
  }, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ["fill", "stroke", "shadowColor"];
  var TweenEngine = function() {
    function TweenEngine2(prop, propFunc, func, begin, finish, duration, yoyo) {
      this.prop = prop;
      this.propFunc = propFunc;
      this.begin = begin;
      this._pos = begin;
      this.duration = duration;
      this._change = 0;
      this.prevPos = 0;
      this.yoyo = yoyo;
      this._time = 0;
      this._position = 0;
      this._startTime = 0;
      this._finish = 0;
      this.func = func;
      this._change = finish - this.begin;
      this.pause();
    }
    TweenEngine2.prototype.fire = function(str) {
      var handler = this[str];
      if (handler) {
        handler();
      }
    };
    TweenEngine2.prototype.setTime = function(t3) {
      if (t3 > this.duration) {
        if (this.yoyo) {
          this._time = this.duration;
          this.reverse();
        } else {
          this.finish();
        }
      } else if (t3 < 0) {
        if (this.yoyo) {
          this._time = 0;
          this.play();
        } else {
          this.reset();
        }
      } else {
        this._time = t3;
        this.update();
      }
    };
    TweenEngine2.prototype.getTime = function() {
      return this._time;
    };
    TweenEngine2.prototype.setPosition = function(p2) {
      this.prevPos = this._pos;
      this.propFunc(p2);
      this._pos = p2;
    };
    TweenEngine2.prototype.getPosition = function(t3) {
      if (t3 === void 0) {
        t3 = this._time;
      }
      return this.func(t3, this.begin, this._change, this.duration);
    };
    TweenEngine2.prototype.play = function() {
      this.state = PLAYING;
      this._startTime = this.getTimer() - this._time;
      this.onEnterFrame();
      this.fire("onPlay");
    };
    TweenEngine2.prototype.reverse = function() {
      this.state = REVERSING;
      this._time = this.duration - this._time;
      this._startTime = this.getTimer() - this._time;
      this.onEnterFrame();
      this.fire("onReverse");
    };
    TweenEngine2.prototype.seek = function(t3) {
      this.pause();
      this._time = t3;
      this.update();
      this.fire("onSeek");
    };
    TweenEngine2.prototype.reset = function() {
      this.pause();
      this._time = 0;
      this.update();
      this.fire("onReset");
    };
    TweenEngine2.prototype.finish = function() {
      this.pause();
      this._time = this.duration;
      this.update();
      this.fire("onFinish");
    };
    TweenEngine2.prototype.update = function() {
      this.setPosition(this.getPosition(this._time));
      this.fire("onUpdate");
    };
    TweenEngine2.prototype.onEnterFrame = function() {
      var t3 = this.getTimer() - this._startTime;
      if (this.state === PLAYING) {
        this.setTime(t3);
      } else if (this.state === REVERSING) {
        this.setTime(this.duration - t3);
      }
    };
    TweenEngine2.prototype.pause = function() {
      this.state = PAUSED;
      this.fire("onPause");
    };
    TweenEngine2.prototype.getTimer = function() {
      return (/* @__PURE__ */ new Date()).getTime();
    };
    return TweenEngine2;
  }();
  var Tween2 = function() {
    function Tween3(config) {
      var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || exports.Easings.Linear, yoyo = !!config.yoyo, key;
      if (typeof config.duration === "undefined") {
        duration = 0.3;
      } else if (config.duration === 0) {
        duration = 1e-3;
      } else {
        duration = config.duration;
      }
      this.node = node;
      this._id = idCounter++;
      var layers = node.getLayer() || (node instanceof Global_12.Konva["Stage"] ? node.getLayers() : null);
      if (!layers) {
        Util_12.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first.");
      }
      this.anim = new Animation_12.Animation(function() {
        that.tween.onEnterFrame();
      }, layers);
      this.tween = new TweenEngine(key, function(i2) {
        that._tweenFunc(i2);
      }, easing, 0, 1, duration * 1e3, yoyo);
      this._addListeners();
      if (!Tween3.attrs[nodeId]) {
        Tween3.attrs[nodeId] = {};
      }
      if (!Tween3.attrs[nodeId][this._id]) {
        Tween3.attrs[nodeId][this._id] = {};
      }
      if (!Tween3.tweens[nodeId]) {
        Tween3.tweens[nodeId] = {};
      }
      for (key in config) {
        if (blacklist[key] === void 0) {
          this._addAttr(key, config[key]);
        }
      }
      this.reset();
      this.onFinish = config.onFinish;
      this.onReset = config.onReset;
      this.onUpdate = config.onUpdate;
    }
    Tween3.prototype._addAttr = function(key, end) {
      var node = this.node, nodeId = node._id, start, diff2, tweenId, n2, len, trueEnd, trueStart, endRGBA;
      tweenId = Tween3.tweens[nodeId][key];
      if (tweenId) {
        delete Tween3.attrs[nodeId][tweenId][key];
      }
      start = node.getAttr(key);
      if (Util_12.Util._isArray(end)) {
        diff2 = [];
        len = Math.max(end.length, start.length);
        if (key === "points" && end.length !== start.length) {
          if (end.length > start.length) {
            trueStart = start;
            start = Util_12.Util._prepareArrayForTween(start, end, node.closed());
          } else {
            trueEnd = end;
            end = Util_12.Util._prepareArrayForTween(end, start, node.closed());
          }
        }
        if (key.indexOf("fill") === 0) {
          for (n2 = 0; n2 < len; n2++) {
            if (n2 % 2 === 0) {
              diff2.push(end[n2] - start[n2]);
            } else {
              var startRGBA = Util_12.Util.colorToRGBA(start[n2]);
              endRGBA = Util_12.Util.colorToRGBA(end[n2]);
              start[n2] = startRGBA;
              diff2.push({
                r: endRGBA.r - startRGBA.r,
                g: endRGBA.g - startRGBA.g,
                b: endRGBA.b - startRGBA.b,
                a: endRGBA.a - startRGBA.a
              });
            }
          }
        } else {
          for (n2 = 0; n2 < len; n2++) {
            diff2.push(end[n2] - start[n2]);
          }
        }
      } else if (colorAttrs.indexOf(key) !== -1) {
        start = Util_12.Util.colorToRGBA(start);
        endRGBA = Util_12.Util.colorToRGBA(end);
        diff2 = {
          r: endRGBA.r - start.r,
          g: endRGBA.g - start.g,
          b: endRGBA.b - start.b,
          a: endRGBA.a - start.a
        };
      } else {
        diff2 = end - start;
      }
      Tween3.attrs[nodeId][this._id][key] = {
        start,
        diff: diff2,
        end,
        trueEnd,
        trueStart
      };
      Tween3.tweens[nodeId][key] = this._id;
    };
    Tween3.prototype._tweenFunc = function(i2) {
      var node = this.node, attrs = Tween3.attrs[node._id][this._id], key, attr2, start, diff2, newVal, n2, len, end;
      for (key in attrs) {
        attr2 = attrs[key];
        start = attr2.start;
        diff2 = attr2.diff;
        end = attr2.end;
        if (Util_12.Util._isArray(start)) {
          newVal = [];
          len = Math.max(start.length, end.length);
          if (key.indexOf("fill") === 0) {
            for (n2 = 0; n2 < len; n2++) {
              if (n2 % 2 === 0) {
                newVal.push((start[n2] || 0) + diff2[n2] * i2);
              } else {
                newVal.push("rgba(" + Math.round(start[n2].r + diff2[n2].r * i2) + "," + Math.round(start[n2].g + diff2[n2].g * i2) + "," + Math.round(start[n2].b + diff2[n2].b * i2) + "," + (start[n2].a + diff2[n2].a * i2) + ")");
              }
            }
          } else {
            for (n2 = 0; n2 < len; n2++) {
              newVal.push((start[n2] || 0) + diff2[n2] * i2);
            }
          }
        } else if (colorAttrs.indexOf(key) !== -1) {
          newVal = "rgba(" + Math.round(start.r + diff2.r * i2) + "," + Math.round(start.g + diff2.g * i2) + "," + Math.round(start.b + diff2.b * i2) + "," + (start.a + diff2.a * i2) + ")";
        } else {
          newVal = start + diff2 * i2;
        }
        node.setAttr(key, newVal);
      }
    };
    Tween3.prototype._addListeners = function() {
      var _this = this;
      this.tween.onPlay = function() {
        _this.anim.start();
      };
      this.tween.onReverse = function() {
        _this.anim.start();
      };
      this.tween.onPause = function() {
        _this.anim.stop();
      };
      this.tween.onFinish = function() {
        var node = _this.node;
        var attrs = Tween3.attrs[node._id][_this._id];
        if (attrs.points && attrs.points.trueEnd) {
          node.setAttr("points", attrs.points.trueEnd);
        }
        if (_this.onFinish) {
          _this.onFinish.call(_this);
        }
      };
      this.tween.onReset = function() {
        var node = _this.node;
        var attrs = Tween3.attrs[node._id][_this._id];
        if (attrs.points && attrs.points.trueStart) {
          node.points(attrs.points.trueStart);
        }
        if (_this.onReset) {
          _this.onReset();
        }
      };
      this.tween.onUpdate = function() {
        if (_this.onUpdate) {
          _this.onUpdate.call(_this);
        }
      };
    };
    Tween3.prototype.play = function() {
      this.tween.play();
      return this;
    };
    Tween3.prototype.reverse = function() {
      this.tween.reverse();
      return this;
    };
    Tween3.prototype.reset = function() {
      this.tween.reset();
      return this;
    };
    Tween3.prototype.seek = function(t3) {
      this.tween.seek(t3 * 1e3);
      return this;
    };
    Tween3.prototype.pause = function() {
      this.tween.pause();
      return this;
    };
    Tween3.prototype.finish = function() {
      this.tween.finish();
      return this;
    };
    Tween3.prototype.destroy = function() {
      var nodeId = this.node._id, thisId = this._id, attrs = Tween3.tweens[nodeId], key;
      this.pause();
      for (key in attrs) {
        delete Tween3.tweens[nodeId][key];
      }
      delete Tween3.attrs[nodeId][thisId];
    };
    Tween3.attrs = {};
    Tween3.tweens = {};
    return Tween3;
  }();
  exports.Tween = Tween2;
  Node_12.Node.prototype.to = function(params) {
    var onFinish = params.onFinish;
    params.node = this;
    params.onFinish = function() {
      this.destroy();
      if (onFinish) {
        onFinish();
      }
    };
    var tween = new Tween2(params);
    tween.play();
  };
  exports.Easings = {
    BackEaseIn: function(t3, b2, c2, d2) {
      var s2 = 1.70158;
      return c2 * (t3 /= d2) * t3 * ((s2 + 1) * t3 - s2) + b2;
    },
    BackEaseOut: function(t3, b2, c2, d2) {
      var s2 = 1.70158;
      return c2 * ((t3 = t3 / d2 - 1) * t3 * ((s2 + 1) * t3 + s2) + 1) + b2;
    },
    BackEaseInOut: function(t3, b2, c2, d2) {
      var s2 = 1.70158;
      if ((t3 /= d2 / 2) < 1) {
        return c2 / 2 * (t3 * t3 * (((s2 *= 1.525) + 1) * t3 - s2)) + b2;
      }
      return c2 / 2 * ((t3 -= 2) * t3 * (((s2 *= 1.525) + 1) * t3 + s2) + 2) + b2;
    },
    ElasticEaseIn: function(t3, b2, c2, d2, a2, p2) {
      var s2 = 0;
      if (t3 === 0) {
        return b2;
      }
      if ((t3 /= d2) === 1) {
        return b2 + c2;
      }
      if (!p2) {
        p2 = d2 * 0.3;
      }
      if (!a2 || a2 < Math.abs(c2)) {
        a2 = c2;
        s2 = p2 / 4;
      } else {
        s2 = p2 / (2 * Math.PI) * Math.asin(c2 / a2);
      }
      return -(a2 * Math.pow(2, 10 * (t3 -= 1)) * Math.sin((t3 * d2 - s2) * (2 * Math.PI) / p2)) + b2;
    },
    ElasticEaseOut: function(t3, b2, c2, d2, a2, p2) {
      var s2 = 0;
      if (t3 === 0) {
        return b2;
      }
      if ((t3 /= d2) === 1) {
        return b2 + c2;
      }
      if (!p2) {
        p2 = d2 * 0.3;
      }
      if (!a2 || a2 < Math.abs(c2)) {
        a2 = c2;
        s2 = p2 / 4;
      } else {
        s2 = p2 / (2 * Math.PI) * Math.asin(c2 / a2);
      }
      return a2 * Math.pow(2, -10 * t3) * Math.sin((t3 * d2 - s2) * (2 * Math.PI) / p2) + c2 + b2;
    },
    ElasticEaseInOut: function(t3, b2, c2, d2, a2, p2) {
      var s2 = 0;
      if (t3 === 0) {
        return b2;
      }
      if ((t3 /= d2 / 2) === 2) {
        return b2 + c2;
      }
      if (!p2) {
        p2 = d2 * (0.3 * 1.5);
      }
      if (!a2 || a2 < Math.abs(c2)) {
        a2 = c2;
        s2 = p2 / 4;
      } else {
        s2 = p2 / (2 * Math.PI) * Math.asin(c2 / a2);
      }
      if (t3 < 1) {
        return -0.5 * (a2 * Math.pow(2, 10 * (t3 -= 1)) * Math.sin((t3 * d2 - s2) * (2 * Math.PI) / p2)) + b2;
      }
      return a2 * Math.pow(2, -10 * (t3 -= 1)) * Math.sin((t3 * d2 - s2) * (2 * Math.PI) / p2) * 0.5 + c2 + b2;
    },
    BounceEaseOut: function(t3, b2, c2, d2) {
      if ((t3 /= d2) < 1 / 2.75) {
        return c2 * (7.5625 * t3 * t3) + b2;
      } else if (t3 < 2 / 2.75) {
        return c2 * (7.5625 * (t3 -= 1.5 / 2.75) * t3 + 0.75) + b2;
      } else if (t3 < 2.5 / 2.75) {
        return c2 * (7.5625 * (t3 -= 2.25 / 2.75) * t3 + 0.9375) + b2;
      } else {
        return c2 * (7.5625 * (t3 -= 2.625 / 2.75) * t3 + 0.984375) + b2;
      }
    },
    BounceEaseIn: function(t3, b2, c2, d2) {
      return c2 - exports.Easings.BounceEaseOut(d2 - t3, 0, c2, d2) + b2;
    },
    BounceEaseInOut: function(t3, b2, c2, d2) {
      if (t3 < d2 / 2) {
        return exports.Easings.BounceEaseIn(t3 * 2, 0, c2, d2) * 0.5 + b2;
      } else {
        return exports.Easings.BounceEaseOut(t3 * 2 - d2, 0, c2, d2) * 0.5 + c2 * 0.5 + b2;
      }
    },
    EaseIn: function(t3, b2, c2, d2) {
      return c2 * (t3 /= d2) * t3 + b2;
    },
    EaseOut: function(t3, b2, c2, d2) {
      return -c2 * (t3 /= d2) * (t3 - 2) + b2;
    },
    EaseInOut: function(t3, b2, c2, d2) {
      if ((t3 /= d2 / 2) < 1) {
        return c2 / 2 * t3 * t3 + b2;
      }
      return -c2 / 2 * (--t3 * (t3 - 2) - 1) + b2;
    },
    StrongEaseIn: function(t3, b2, c2, d2) {
      return c2 * (t3 /= d2) * t3 * t3 * t3 * t3 + b2;
    },
    StrongEaseOut: function(t3, b2, c2, d2) {
      return c2 * ((t3 = t3 / d2 - 1) * t3 * t3 * t3 * t3 + 1) + b2;
    },
    StrongEaseInOut: function(t3, b2, c2, d2) {
      if ((t3 /= d2 / 2) < 1) {
        return c2 / 2 * t3 * t3 * t3 * t3 * t3 + b2;
      }
      return c2 / 2 * ((t3 -= 2) * t3 * t3 * t3 * t3 + 2) + b2;
    },
    Linear: function(t3, b2, c2, d2) {
      return c2 * t3 / d2 + b2;
    }
  };
})(Tween);
Object.defineProperty(_CoreInternals, "__esModule", { value: true });
_CoreInternals.Konva = void 0;
var Global_1$h = Global;
var Util_1$k = Util;
var Node_1$g = Node;
var Container_1 = Container$1;
var Stage_1 = Stage;
var Layer_1 = Layer$1;
var FastLayer_1 = FastLayer$1;
var Group_1$2 = Group$1;
var DragAndDrop_1 = DragAndDrop;
var Shape_1$g = Shape;
var Animation_1$1 = Animation$1;
var Tween_1 = Tween;
var Context_1 = Context$1;
var Canvas_1 = Canvas$1;
_CoreInternals.Konva = Util_1$k.Util._assign(Global_1$h.Konva, {
  Collection: Util_1$k.Collection,
  Util: Util_1$k.Util,
  Transform: Util_1$k.Transform,
  Node: Node_1$g.Node,
  ids: Node_1$g.ids,
  names: Node_1$g.names,
  Container: Container_1.Container,
  Stage: Stage_1.Stage,
  stages: Stage_1.stages,
  Layer: Layer_1.Layer,
  FastLayer: FastLayer_1.FastLayer,
  Group: Group_1$2.Group,
  DD: DragAndDrop_1.DD,
  Shape: Shape_1$g.Shape,
  shapes: Shape_1$g.shapes,
  Animation: Animation_1$1.Animation,
  Tween: Tween_1.Tween,
  Easings: Tween_1.Easings,
  Context: Context_1.Context,
  Canvas: Canvas_1.Canvas
});
var Arc$1 = {};
var __extends$g = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Arc$1, "__esModule", { value: true });
Arc$1.Arc = void 0;
var Util_1$j = Util;
var Factory_1$v = Factory;
var Shape_1$f = Shape;
var Global_1$g = Global;
var Validators_1$u = Validators;
var Global_2$3 = Global;
var Arc = function(_super) {
  __extends$g(Arc2, _super);
  function Arc2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Arc2.prototype._sceneFunc = function(context) {
    var angle = Global_1$g.Konva.getAngle(this.angle()), clockwise = this.clockwise();
    context.beginPath();
    context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);
    context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Arc2.prototype.getWidth = function() {
    return this.outerRadius() * 2;
  };
  Arc2.prototype.getHeight = function() {
    return this.outerRadius() * 2;
  };
  Arc2.prototype.setWidth = function(width2) {
    this.outerRadius(width2 / 2);
  };
  Arc2.prototype.setHeight = function(height2) {
    this.outerRadius(height2 / 2);
  };
  return Arc2;
}(Shape_1$f.Shape);
Arc$1.Arc = Arc;
Arc.prototype._centroid = true;
Arc.prototype.className = "Arc";
Arc.prototype._attrsAffectingSize = ["innerRadius", "outerRadius"];
Global_2$3._registerNode(Arc);
Factory_1$v.Factory.addGetterSetter(Arc, "innerRadius", 0, Validators_1$u.getNumberValidator());
Factory_1$v.Factory.addGetterSetter(Arc, "outerRadius", 0, Validators_1$u.getNumberValidator());
Factory_1$v.Factory.addGetterSetter(Arc, "angle", 0, Validators_1$u.getNumberValidator());
Factory_1$v.Factory.addGetterSetter(Arc, "clockwise", false, Validators_1$u.getBooleanValidator());
Util_1$j.Collection.mapMethods(Arc);
var Arrow$1 = {};
var Line$1 = {};
var __extends$f = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __spreadArrays = commonjsGlobal && commonjsGlobal.__spreadArrays || function() {
  for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
    s2 += arguments[i2].length;
  for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
    for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
      r2[k2] = a2[j2];
  return r2;
};
Object.defineProperty(Line$1, "__esModule", { value: true });
Line$1.Line = void 0;
var Util_1$i = Util;
var Factory_1$u = Factory;
var Shape_1$e = Shape;
var Validators_1$t = Validators;
var Global_1$f = Global;
var Line = function(_super) {
  __extends$f(Line2, _super);
  function Line2(config) {
    var _this = _super.call(this, config) || this;
    _this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva", function() {
      this._clearCache("tensionPoints");
    });
    return _this;
  }
  Line2.prototype._sceneFunc = function(context) {
    var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n2;
    if (!length) {
      return;
    }
    context.beginPath();
    context.moveTo(points[0], points[1]);
    if (tension !== 0 && length > 4) {
      tp = this.getTensionPoints();
      len = tp.length;
      n2 = closed ? 0 : 4;
      if (!closed) {
        context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
      }
      while (n2 < len - 2) {
        context.bezierCurveTo(tp[n2++], tp[n2++], tp[n2++], tp[n2++], tp[n2++], tp[n2++]);
      }
      if (!closed) {
        context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
      }
    } else if (bezier) {
      n2 = 2;
      while (n2 < length) {
        context.bezierCurveTo(points[n2++], points[n2++], points[n2++], points[n2++], points[n2++], points[n2++]);
      }
    } else {
      for (n2 = 2; n2 < length; n2 += 2) {
        context.lineTo(points[n2], points[n2 + 1]);
      }
    }
    if (closed) {
      context.closePath();
      context.fillStrokeShape(this);
    } else {
      context.strokeShape(this);
    }
  };
  Line2.prototype.getTensionPoints = function() {
    return this._getCache("tensionPoints", this._getTensionPoints);
  };
  Line2.prototype._getTensionPoints = function() {
    if (this.closed()) {
      return this._getTensionPointsClosed();
    } else {
      return Util_1$i.Util._expandPoints(this.points(), this.tension());
    }
  };
  Line2.prototype._getTensionPointsClosed = function() {
    var p2 = this.points(), len = p2.length, tension = this.tension(), firstControlPoints = Util_1$i.Util._getControlPoints(p2[len - 2], p2[len - 1], p2[0], p2[1], p2[2], p2[3], tension), lastControlPoints = Util_1$i.Util._getControlPoints(p2[len - 4], p2[len - 3], p2[len - 2], p2[len - 1], p2[0], p2[1], tension), middle = Util_1$i.Util._expandPoints(p2, tension), tp = [firstControlPoints[2], firstControlPoints[3]].concat(middle).concat([
      lastControlPoints[0],
      lastControlPoints[1],
      p2[len - 2],
      p2[len - 1],
      lastControlPoints[2],
      lastControlPoints[3],
      firstControlPoints[0],
      firstControlPoints[1],
      p2[0],
      p2[1]
    ]);
    return tp;
  };
  Line2.prototype.getWidth = function() {
    return this.getSelfRect().width;
  };
  Line2.prototype.getHeight = function() {
    return this.getSelfRect().height;
  };
  Line2.prototype.getSelfRect = function() {
    var points = this.points();
    if (points.length < 4) {
      return {
        x: points[0] || 0,
        y: points[1] || 0,
        width: 0,
        height: 0
      };
    }
    if (this.tension() !== 0) {
      points = __spreadArrays([
        points[0],
        points[1]
      ], this._getTensionPoints(), [
        points[points.length - 2],
        points[points.length - 1]
      ]);
    } else {
      points = this.points();
    }
    var minX = points[0];
    var maxX = points[0];
    var minY = points[1];
    var maxY = points[1];
    var x2, y2;
    for (var i2 = 0; i2 < points.length / 2; i2++) {
      x2 = points[i2 * 2];
      y2 = points[i2 * 2 + 1];
      minX = Math.min(minX, x2);
      maxX = Math.max(maxX, x2);
      minY = Math.min(minY, y2);
      maxY = Math.max(maxY, y2);
    }
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  };
  return Line2;
}(Shape_1$e.Shape);
Line$1.Line = Line;
Line.prototype.className = "Line";
Line.prototype._attrsAffectingSize = ["points", "bezier", "tension"];
Global_1$f._registerNode(Line);
Factory_1$u.Factory.addGetterSetter(Line, "closed", false);
Factory_1$u.Factory.addGetterSetter(Line, "bezier", false);
Factory_1$u.Factory.addGetterSetter(Line, "tension", 0, Validators_1$t.getNumberValidator());
Factory_1$u.Factory.addGetterSetter(Line, "points", [], Validators_1$t.getNumberArrayValidator());
Util_1$i.Collection.mapMethods(Line);
var __extends$e = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Arrow$1, "__esModule", { value: true });
Arrow$1.Arrow = void 0;
var Util_1$h = Util;
var Factory_1$t = Factory;
var Line_1$1 = Line$1;
var Validators_1$s = Validators;
var Global_1$e = Global;
var Arrow = function(_super) {
  __extends$e(Arrow2, _super);
  function Arrow2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Arrow2.prototype._sceneFunc = function(ctx) {
    _super.prototype._sceneFunc.call(this, ctx);
    var PI2 = Math.PI * 2;
    var points = this.points();
    var tp = points;
    var fromTension = this.tension() !== 0 && points.length > 4;
    if (fromTension) {
      tp = this.getTensionPoints();
    }
    var n2 = points.length;
    var dx, dy;
    if (fromTension) {
      dx = points[n2 - 2] - (tp[tp.length - 2] + tp[tp.length - 4]) / 2;
      dy = points[n2 - 1] - (tp[tp.length - 1] + tp[tp.length - 3]) / 2;
    } else {
      dx = points[n2 - 2] - points[n2 - 4];
      dy = points[n2 - 1] - points[n2 - 3];
    }
    var radians = (Math.atan2(dy, dx) + PI2) % PI2;
    var length = this.pointerLength();
    var width2 = this.pointerWidth();
    ctx.save();
    ctx.beginPath();
    ctx.translate(points[n2 - 2], points[n2 - 1]);
    ctx.rotate(radians);
    ctx.moveTo(0, 0);
    ctx.lineTo(-length, width2 / 2);
    ctx.lineTo(-length, -width2 / 2);
    ctx.closePath();
    ctx.restore();
    if (this.pointerAtBeginning()) {
      ctx.save();
      ctx.translate(points[0], points[1]);
      if (fromTension) {
        dx = (tp[0] + tp[2]) / 2 - points[0];
        dy = (tp[1] + tp[3]) / 2 - points[1];
      } else {
        dx = points[2] - points[0];
        dy = points[3] - points[1];
      }
      ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
      ctx.moveTo(0, 0);
      ctx.lineTo(-length, width2 / 2);
      ctx.lineTo(-length, -width2 / 2);
      ctx.closePath();
      ctx.restore();
    }
    var isDashEnabled = this.dashEnabled();
    if (isDashEnabled) {
      this.attrs.dashEnabled = false;
      ctx.setLineDash([]);
    }
    ctx.fillStrokeShape(this);
    if (isDashEnabled) {
      this.attrs.dashEnabled = true;
    }
  };
  Arrow2.prototype.getSelfRect = function() {
    var lineRect = _super.prototype.getSelfRect.call(this);
    var offset = this.pointerWidth() / 2;
    return {
      x: lineRect.x - offset,
      y: lineRect.y - offset,
      width: lineRect.width + offset * 2,
      height: lineRect.height + offset * 2
    };
  };
  return Arrow2;
}(Line_1$1.Line);
Arrow$1.Arrow = Arrow;
Arrow.prototype.className = "Arrow";
Global_1$e._registerNode(Arrow);
Factory_1$t.Factory.addGetterSetter(Arrow, "pointerLength", 10, Validators_1$s.getNumberValidator());
Factory_1$t.Factory.addGetterSetter(Arrow, "pointerWidth", 10, Validators_1$s.getNumberValidator());
Factory_1$t.Factory.addGetterSetter(Arrow, "pointerAtBeginning", false);
Util_1$h.Collection.mapMethods(Arrow);
var Circle$1 = {};
var __extends$d = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Circle$1, "__esModule", { value: true });
Circle$1.Circle = void 0;
var Util_1$g = Util;
var Factory_1$s = Factory;
var Shape_1$d = Shape;
var Validators_1$r = Validators;
var Global_1$d = Global;
var Circle = function(_super) {
  __extends$d(Circle2, _super);
  function Circle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Circle2.prototype._sceneFunc = function(context) {
    context.beginPath();
    context.arc(0, 0, this.attrs.radius || 0, 0, Math.PI * 2, false);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Circle2.prototype.getWidth = function() {
    return this.radius() * 2;
  };
  Circle2.prototype.getHeight = function() {
    return this.radius() * 2;
  };
  Circle2.prototype.setWidth = function(width2) {
    if (this.radius() !== width2 / 2) {
      this.radius(width2 / 2);
    }
  };
  Circle2.prototype.setHeight = function(height2) {
    if (this.radius() !== height2 / 2) {
      this.radius(height2 / 2);
    }
  };
  return Circle2;
}(Shape_1$d.Shape);
Circle$1.Circle = Circle;
Circle.prototype._centroid = true;
Circle.prototype.className = "Circle";
Circle.prototype._attrsAffectingSize = ["radius"];
Global_1$d._registerNode(Circle);
Factory_1$s.Factory.addGetterSetter(Circle, "radius", 0, Validators_1$r.getNumberValidator());
Util_1$g.Collection.mapMethods(Circle);
var Ellipse$1 = {};
var __extends$c = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Ellipse$1, "__esModule", { value: true });
Ellipse$1.Ellipse = void 0;
var Util_1$f = Util;
var Factory_1$r = Factory;
var Shape_1$c = Shape;
var Validators_1$q = Validators;
var Global_1$c = Global;
var Ellipse = function(_super) {
  __extends$c(Ellipse2, _super);
  function Ellipse2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Ellipse2.prototype._sceneFunc = function(context) {
    var rx = this.radiusX(), ry = this.radiusY();
    context.beginPath();
    context.save();
    if (rx !== ry) {
      context.scale(1, ry / rx);
    }
    context.arc(0, 0, rx, 0, Math.PI * 2, false);
    context.restore();
    context.closePath();
    context.fillStrokeShape(this);
  };
  Ellipse2.prototype.getWidth = function() {
    return this.radiusX() * 2;
  };
  Ellipse2.prototype.getHeight = function() {
    return this.radiusY() * 2;
  };
  Ellipse2.prototype.setWidth = function(width2) {
    this.radiusX(width2 / 2);
  };
  Ellipse2.prototype.setHeight = function(height2) {
    this.radiusY(height2 / 2);
  };
  return Ellipse2;
}(Shape_1$c.Shape);
Ellipse$1.Ellipse = Ellipse;
Ellipse.prototype.className = "Ellipse";
Ellipse.prototype._centroid = true;
Ellipse.prototype._attrsAffectingSize = ["radiusX", "radiusY"];
Global_1$c._registerNode(Ellipse);
Factory_1$r.Factory.addComponentsGetterSetter(Ellipse, "radius", ["x", "y"]);
Factory_1$r.Factory.addGetterSetter(Ellipse, "radiusX", 0, Validators_1$q.getNumberValidator());
Factory_1$r.Factory.addGetterSetter(Ellipse, "radiusY", 0, Validators_1$q.getNumberValidator());
Util_1$f.Collection.mapMethods(Ellipse);
var Image$2 = {};
var __extends$b = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Image$2, "__esModule", { value: true });
Image$2.Image = void 0;
var Util_1$e = Util;
var Factory_1$q = Factory;
var Shape_1$b = Shape;
var Validators_1$p = Validators;
var Global_1$b = Global;
var Image$1 = function(_super) {
  __extends$b(Image2, _super);
  function Image2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Image2.prototype._useBufferCanvas = function() {
    return _super.prototype._useBufferCanvas.call(this, true);
  };
  Image2.prototype._sceneFunc = function(context) {
    var width2 = this.getWidth();
    var height2 = this.getHeight();
    var image = this.attrs.image;
    var params;
    if (image) {
      var cropWidth = this.attrs.cropWidth;
      var cropHeight = this.attrs.cropHeight;
      if (cropWidth && cropHeight) {
        params = [
          image,
          this.cropX(),
          this.cropY(),
          cropWidth,
          cropHeight,
          0,
          0,
          width2,
          height2
        ];
      } else {
        params = [image, 0, 0, width2, height2];
      }
    }
    if (this.hasFill() || this.hasStroke()) {
      context.beginPath();
      context.rect(0, 0, width2, height2);
      context.closePath();
      context.fillStrokeShape(this);
    }
    if (image) {
      context.drawImage.apply(context, params);
    }
  };
  Image2.prototype._hitFunc = function(context) {
    var width2 = this.width(), height2 = this.height();
    context.beginPath();
    context.rect(0, 0, width2, height2);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Image2.prototype.getWidth = function() {
    var _a2, _b2;
    return (_a2 = this.attrs.width) !== null && _a2 !== void 0 ? _a2 : ((_b2 = this.image()) === null || _b2 === void 0 ? void 0 : _b2.width) || 0;
  };
  Image2.prototype.getHeight = function() {
    var _a2, _b2;
    return (_a2 = this.attrs.height) !== null && _a2 !== void 0 ? _a2 : ((_b2 = this.image()) === null || _b2 === void 0 ? void 0 : _b2.height) || 0;
  };
  Image2.fromURL = function(url, callback) {
    var img = Util_1$e.Util.createImageElement();
    img.onload = function() {
      var image = new Image2({
        image: img
      });
      callback(image);
    };
    img.crossOrigin = "Anonymous";
    img.src = url;
  };
  return Image2;
}(Shape_1$b.Shape);
Image$2.Image = Image$1;
Image$1.prototype.className = "Image";
Global_1$b._registerNode(Image$1);
Factory_1$q.Factory.addGetterSetter(Image$1, "image");
Factory_1$q.Factory.addComponentsGetterSetter(Image$1, "crop", ["x", "y", "width", "height"]);
Factory_1$q.Factory.addGetterSetter(Image$1, "cropX", 0, Validators_1$p.getNumberValidator());
Factory_1$q.Factory.addGetterSetter(Image$1, "cropY", 0, Validators_1$p.getNumberValidator());
Factory_1$q.Factory.addGetterSetter(Image$1, "cropWidth", 0, Validators_1$p.getNumberValidator());
Factory_1$q.Factory.addGetterSetter(Image$1, "cropHeight", 0, Validators_1$p.getNumberValidator());
Util_1$e.Collection.mapMethods(Image$1);
var Label$1 = {};
var __extends$a = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Label$1, "__esModule", { value: true });
Label$1.Tag = Label$1.Label = void 0;
var Util_1$d = Util;
var Factory_1$p = Factory;
var Shape_1$a = Shape;
var Group_1$1 = Group$1;
var Validators_1$o = Validators;
var Global_1$a = Global;
var ATTR_CHANGE_LIST$2 = [
  "fontFamily",
  "fontSize",
  "fontStyle",
  "padding",
  "lineHeight",
  "text",
  "width",
  "height"
], CHANGE_KONVA$1 = "Change.konva", NONE$1 = "none", UP = "up", RIGHT$1 = "right", DOWN = "down", LEFT$1 = "left", attrChangeListLen$1 = ATTR_CHANGE_LIST$2.length;
var Label = function(_super) {
  __extends$a(Label2, _super);
  function Label2(config) {
    var _this = _super.call(this, config) || this;
    _this.on("add.konva", function(evt) {
      this._addListeners(evt.child);
      this._sync();
    });
    return _this;
  }
  Label2.prototype.getText = function() {
    return this.find("Text")[0];
  };
  Label2.prototype.getTag = function() {
    return this.find("Tag")[0];
  };
  Label2.prototype._addListeners = function(text2) {
    var that = this, n2;
    var func = function() {
      that._sync();
    };
    for (n2 = 0; n2 < attrChangeListLen$1; n2++) {
      text2.on(ATTR_CHANGE_LIST$2[n2] + CHANGE_KONVA$1, func);
    }
  };
  Label2.prototype.getWidth = function() {
    return this.getText().width();
  };
  Label2.prototype.getHeight = function() {
    return this.getText().height();
  };
  Label2.prototype._sync = function() {
    var text2 = this.getText(), tag = this.getTag(), width2, height2, pointerDirection, pointerWidth, x2, y2, pointerHeight;
    if (text2 && tag) {
      width2 = text2.width();
      height2 = text2.height();
      pointerDirection = tag.pointerDirection();
      pointerWidth = tag.pointerWidth();
      pointerHeight = tag.pointerHeight();
      x2 = 0;
      y2 = 0;
      switch (pointerDirection) {
        case UP:
          x2 = width2 / 2;
          y2 = -1 * pointerHeight;
          break;
        case RIGHT$1:
          x2 = width2 + pointerWidth;
          y2 = height2 / 2;
          break;
        case DOWN:
          x2 = width2 / 2;
          y2 = height2 + pointerHeight;
          break;
        case LEFT$1:
          x2 = -1 * pointerWidth;
          y2 = height2 / 2;
          break;
      }
      tag.setAttrs({
        x: -1 * x2,
        y: -1 * y2,
        width: width2,
        height: height2
      });
      text2.setAttrs({
        x: -1 * x2,
        y: -1 * y2
      });
    }
  };
  return Label2;
}(Group_1$1.Group);
Label$1.Label = Label;
Label.prototype.className = "Label";
Global_1$a._registerNode(Label);
Util_1$d.Collection.mapMethods(Label);
var Tag = function(_super) {
  __extends$a(Tag2, _super);
  function Tag2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Tag2.prototype._sceneFunc = function(context) {
    var width2 = this.width(), height2 = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = this.cornerRadius();
    var topLeft = 0;
    var topRight = 0;
    var bottomLeft = 0;
    var bottomRight = 0;
    if (typeof cornerRadius === "number") {
      topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width2 / 2, height2 / 2);
    } else {
      topLeft = Math.min(cornerRadius[0] || 0, width2 / 2, height2 / 2);
      topRight = Math.min(cornerRadius[1] || 0, width2 / 2, height2 / 2);
      bottomRight = Math.min(cornerRadius[2] || 0, width2 / 2, height2 / 2);
      bottomLeft = Math.min(cornerRadius[3] || 0, width2 / 2, height2 / 2);
    }
    context.beginPath();
    context.moveTo(topLeft, 0);
    if (pointerDirection === UP) {
      context.lineTo((width2 - pointerWidth) / 2, 0);
      context.lineTo(width2 / 2, -1 * pointerHeight);
      context.lineTo((width2 + pointerWidth) / 2, 0);
    }
    context.lineTo(width2 - topRight, 0);
    context.arc(width2 - topRight, topRight, topRight, Math.PI * 3 / 2, 0, false);
    if (pointerDirection === RIGHT$1) {
      context.lineTo(width2, (height2 - pointerHeight) / 2);
      context.lineTo(width2 + pointerWidth, height2 / 2);
      context.lineTo(width2, (height2 + pointerHeight) / 2);
    }
    context.lineTo(width2, height2 - bottomRight);
    context.arc(width2 - bottomRight, height2 - bottomRight, bottomRight, 0, Math.PI / 2, false);
    if (pointerDirection === DOWN) {
      context.lineTo((width2 + pointerWidth) / 2, height2);
      context.lineTo(width2 / 2, height2 + pointerHeight);
      context.lineTo((width2 - pointerWidth) / 2, height2);
    }
    context.lineTo(bottomLeft, height2);
    context.arc(bottomLeft, height2 - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
    if (pointerDirection === LEFT$1) {
      context.lineTo(0, (height2 + pointerHeight) / 2);
      context.lineTo(-1 * pointerWidth, height2 / 2);
      context.lineTo(0, (height2 - pointerHeight) / 2);
    }
    context.lineTo(0, topLeft);
    context.arc(topLeft, topLeft, topLeft, Math.PI, Math.PI * 3 / 2, false);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Tag2.prototype.getSelfRect = function() {
    var x2 = 0, y2 = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width2 = this.width(), height2 = this.height();
    if (direction === UP) {
      y2 -= pointerHeight;
      height2 += pointerHeight;
    } else if (direction === DOWN) {
      height2 += pointerHeight;
    } else if (direction === LEFT$1) {
      x2 -= pointerWidth * 1.5;
      width2 += pointerWidth;
    } else if (direction === RIGHT$1) {
      width2 += pointerWidth * 1.5;
    }
    return {
      x: x2,
      y: y2,
      width: width2,
      height: height2
    };
  };
  return Tag2;
}(Shape_1$a.Shape);
Label$1.Tag = Tag;
Tag.prototype.className = "Tag";
Global_1$a._registerNode(Tag);
Factory_1$p.Factory.addGetterSetter(Tag, "pointerDirection", NONE$1);
Factory_1$p.Factory.addGetterSetter(Tag, "pointerWidth", 0, Validators_1$o.getNumberValidator());
Factory_1$p.Factory.addGetterSetter(Tag, "pointerHeight", 0, Validators_1$o.getNumberValidator());
Factory_1$p.Factory.addGetterSetter(Tag, "cornerRadius", 0, Validators_1$o.getNumberOrArrayOfNumbersValidator(4));
Util_1$d.Collection.mapMethods(Tag);
var Path$1 = {};
var __extends$9 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Path$1, "__esModule", { value: true });
Path$1.Path = void 0;
var Util_1$c = Util;
var Factory_1$o = Factory;
var Shape_1$9 = Shape;
var Global_1$9 = Global;
var Path = function(_super) {
  __extends$9(Path2, _super);
  function Path2(config) {
    var _this = _super.call(this, config) || this;
    _this.dataArray = [];
    _this.pathLength = 0;
    _this.dataArray = Path2.parsePathData(_this.data());
    _this.pathLength = 0;
    for (var i2 = 0; i2 < _this.dataArray.length; ++i2) {
      _this.pathLength += _this.dataArray[i2].pathLength;
    }
    _this.on("dataChange.konva", function() {
      this.dataArray = Path2.parsePathData(this.data());
      this.pathLength = 0;
      for (var i3 = 0; i3 < this.dataArray.length; ++i3) {
        this.pathLength += this.dataArray[i3].pathLength;
      }
    });
    return _this;
  }
  Path2.prototype._sceneFunc = function(context) {
    var ca = this.dataArray;
    context.beginPath();
    var isClosed = false;
    for (var n2 = 0; n2 < ca.length; n2++) {
      var c2 = ca[n2].command;
      var p2 = ca[n2].points;
      switch (c2) {
        case "L":
          context.lineTo(p2[0], p2[1]);
          break;
        case "M":
          context.moveTo(p2[0], p2[1]);
          break;
        case "C":
          context.bezierCurveTo(p2[0], p2[1], p2[2], p2[3], p2[4], p2[5]);
          break;
        case "Q":
          context.quadraticCurveTo(p2[0], p2[1], p2[2], p2[3]);
          break;
        case "A":
          var cx = p2[0], cy2 = p2[1], rx = p2[2], ry = p2[3], theta = p2[4], dTheta = p2[5], psi = p2[6], fs = p2[7];
          var r2 = rx > ry ? rx : ry;
          var scaleX = rx > ry ? 1 : rx / ry;
          var scaleY = rx > ry ? ry / rx : 1;
          context.translate(cx, cy2);
          context.rotate(psi);
          context.scale(scaleX, scaleY);
          context.arc(0, 0, r2, theta, theta + dTheta, 1 - fs);
          context.scale(1 / scaleX, 1 / scaleY);
          context.rotate(-psi);
          context.translate(-cx, -cy2);
          break;
        case "z":
          isClosed = true;
          context.closePath();
          break;
      }
    }
    if (!isClosed && !this.hasFill()) {
      context.strokeShape(this);
    } else {
      context.fillStrokeShape(this);
    }
  };
  Path2.prototype.getSelfRect = function() {
    var points = [];
    this.dataArray.forEach(function(data4) {
      if (data4.command === "A") {
        var start = data4.points[4];
        var dTheta = data4.points[5];
        var end = data4.points[4] + dTheta;
        var inc = Math.PI / 180;
        if (Math.abs(start - end) < inc) {
          inc = Math.abs(start - end);
        }
        if (dTheta < 0) {
          for (var t3 = start - inc; t3 > end; t3 -= inc) {
            var point = Path2.getPointOnEllipticalArc(data4.points[0], data4.points[1], data4.points[2], data4.points[3], t3, 0);
            points.push(point.x, point.y);
          }
        } else {
          for (var t3 = start + inc; t3 < end; t3 += inc) {
            var point = Path2.getPointOnEllipticalArc(data4.points[0], data4.points[1], data4.points[2], data4.points[3], t3, 0);
            points.push(point.x, point.y);
          }
        }
      } else if (data4.command === "C") {
        for (var t3 = 0; t3 <= 1; t3 += 0.01) {
          var point = Path2.getPointOnCubicBezier(t3, data4.start.x, data4.start.y, data4.points[0], data4.points[1], data4.points[2], data4.points[3], data4.points[4], data4.points[5]);
          points.push(point.x, point.y);
        }
      } else {
        points = points.concat(data4.points);
      }
    });
    var minX = points[0];
    var maxX = points[0];
    var minY = points[1];
    var maxY = points[1];
    var x2, y2;
    for (var i2 = 0; i2 < points.length / 2; i2++) {
      x2 = points[i2 * 2];
      y2 = points[i2 * 2 + 1];
      if (!isNaN(x2)) {
        minX = Math.min(minX, x2);
        maxX = Math.max(maxX, x2);
      }
      if (!isNaN(y2)) {
        minY = Math.min(minY, y2);
        maxY = Math.max(maxY, y2);
      }
    }
    return {
      x: Math.round(minX),
      y: Math.round(minY),
      width: Math.round(maxX - minX),
      height: Math.round(maxY - minY)
    };
  };
  Path2.prototype.getLength = function() {
    return this.pathLength;
  };
  Path2.prototype.getPointAtLength = function(length) {
    var point, i2 = 0, ii = this.dataArray.length;
    if (!ii) {
      return null;
    }
    while (i2 < ii && length > this.dataArray[i2].pathLength) {
      length -= this.dataArray[i2].pathLength;
      ++i2;
    }
    if (i2 === ii) {
      point = this.dataArray[i2 - 1].points.slice(-2);
      return {
        x: point[0],
        y: point[1]
      };
    }
    if (length < 0.01) {
      point = this.dataArray[i2].points.slice(0, 2);
      return {
        x: point[0],
        y: point[1]
      };
    }
    var cp = this.dataArray[i2];
    var p2 = cp.points;
    switch (cp.command) {
      case "L":
        return Path2.getPointOnLine(length, cp.start.x, cp.start.y, p2[0], p2[1]);
      case "C":
        return Path2.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p2[0], p2[1], p2[2], p2[3], p2[4], p2[5]);
      case "Q":
        return Path2.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p2[0], p2[1], p2[2], p2[3]);
      case "A":
        var cx = p2[0], cy2 = p2[1], rx = p2[2], ry = p2[3], theta = p2[4], dTheta = p2[5], psi = p2[6];
        theta += dTheta * length / cp.pathLength;
        return Path2.getPointOnEllipticalArc(cx, cy2, rx, ry, theta, psi);
    }
    return null;
  };
  Path2.getLineLength = function(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  };
  Path2.getPointOnLine = function(dist4, P1x, P1y, P2x, P2y, fromX, fromY) {
    if (fromX === void 0) {
      fromX = P1x;
    }
    if (fromY === void 0) {
      fromY = P1y;
    }
    var m2 = (P2y - P1y) / (P2x - P1x + 1e-8);
    var run2 = Math.sqrt(dist4 * dist4 / (1 + m2 * m2));
    if (P2x < P1x) {
      run2 *= -1;
    }
    var rise = m2 * run2;
    var pt2;
    if (P2x === P1x) {
      pt2 = {
        x: fromX,
        y: fromY + rise
      };
    } else if ((fromY - P1y) / (fromX - P1x + 1e-8) === m2) {
      pt2 = {
        x: fromX + run2,
        y: fromY + rise
      };
    } else {
      var ix, iy;
      var len = this.getLineLength(P1x, P1y, P2x, P2y);
      var u2 = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
      u2 = u2 / (len * len);
      ix = P1x + u2 * (P2x - P1x);
      iy = P1y + u2 * (P2y - P1y);
      var pRise = this.getLineLength(fromX, fromY, ix, iy);
      var pRun = Math.sqrt(dist4 * dist4 - pRise * pRise);
      run2 = Math.sqrt(pRun * pRun / (1 + m2 * m2));
      if (P2x < P1x) {
        run2 *= -1;
      }
      rise = m2 * run2;
      pt2 = {
        x: ix + run2,
        y: iy + rise
      };
    }
    return pt2;
  };
  Path2.getPointOnCubicBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
    function CB1(t3) {
      return t3 * t3 * t3;
    }
    function CB2(t3) {
      return 3 * t3 * t3 * (1 - t3);
    }
    function CB3(t3) {
      return 3 * t3 * (1 - t3) * (1 - t3);
    }
    function CB4(t3) {
      return (1 - t3) * (1 - t3) * (1 - t3);
    }
    var x2 = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
    var y2 = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
    return {
      x: x2,
      y: y2
    };
  };
  Path2.getPointOnQuadraticBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y) {
    function QB1(t3) {
      return t3 * t3;
    }
    function QB2(t3) {
      return 2 * t3 * (1 - t3);
    }
    function QB3(t3) {
      return (1 - t3) * (1 - t3);
    }
    var x2 = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
    var y2 = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
    return {
      x: x2,
      y: y2
    };
  };
  Path2.getPointOnEllipticalArc = function(cx, cy2, rx, ry, theta, psi) {
    var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
    var pt2 = {
      x: rx * Math.cos(theta),
      y: ry * Math.sin(theta)
    };
    return {
      x: cx + (pt2.x * cosPsi - pt2.y * sinPsi),
      y: cy2 + (pt2.x * sinPsi + pt2.y * cosPsi)
    };
  };
  Path2.parsePathData = function(data4) {
    if (!data4) {
      return [];
    }
    var cs = data4;
    var cc = [
      "m",
      "M",
      "l",
      "L",
      "v",
      "V",
      "h",
      "H",
      "z",
      "Z",
      "c",
      "C",
      "q",
      "Q",
      "t",
      "T",
      "s",
      "S",
      "a",
      "A"
    ];
    cs = cs.replace(new RegExp(" ", "g"), ",");
    for (var n2 = 0; n2 < cc.length; n2++) {
      cs = cs.replace(new RegExp(cc[n2], "g"), "|" + cc[n2]);
    }
    var arr = cs.split("|");
    var ca = [];
    var coords = [];
    var cpx = 0;
    var cpy = 0;
    var re2 = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
    var match2;
    for (n2 = 1; n2 < arr.length; n2++) {
      var str = arr[n2];
      var c2 = str.charAt(0);
      str = str.slice(1);
      coords.length = 0;
      while (match2 = re2.exec(str)) {
        coords.push(match2[0]);
      }
      var p2 = [];
      for (var j2 = 0, jlen = coords.length; j2 < jlen; j2++) {
        var parsed = parseFloat(coords[j2]);
        if (!isNaN(parsed)) {
          p2.push(parsed);
        } else {
          p2.push(0);
        }
      }
      while (p2.length > 0) {
        if (isNaN(p2[0])) {
          break;
        }
        var cmd = null;
        var points = [];
        var startX = cpx, startY = cpy;
        var prevCmd, ctlPtx, ctlPty;
        var rx, ry, psi, fa, fs, x1, y1;
        switch (c2) {
          case "l":
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "L";
            points.push(cpx, cpy);
            break;
          case "L":
            cpx = p2.shift();
            cpy = p2.shift();
            points.push(cpx, cpy);
            break;
          case "m":
            var dx = p2.shift();
            var dy = p2.shift();
            cpx += dx;
            cpy += dy;
            cmd = "M";
            if (ca.length > 2 && ca[ca.length - 1].command === "z") {
              for (var idx = ca.length - 2; idx >= 0; idx--) {
                if (ca[idx].command === "M") {
                  cpx = ca[idx].points[0] + dx;
                  cpy = ca[idx].points[1] + dy;
                  break;
                }
              }
            }
            points.push(cpx, cpy);
            c2 = "l";
            break;
          case "M":
            cpx = p2.shift();
            cpy = p2.shift();
            cmd = "M";
            points.push(cpx, cpy);
            c2 = "L";
            break;
          case "h":
            cpx += p2.shift();
            cmd = "L";
            points.push(cpx, cpy);
            break;
          case "H":
            cpx = p2.shift();
            cmd = "L";
            points.push(cpx, cpy);
            break;
          case "v":
            cpy += p2.shift();
            cmd = "L";
            points.push(cpx, cpy);
            break;
          case "V":
            cpy = p2.shift();
            cmd = "L";
            points.push(cpx, cpy);
            break;
          case "C":
            points.push(p2.shift(), p2.shift(), p2.shift(), p2.shift());
            cpx = p2.shift();
            cpy = p2.shift();
            points.push(cpx, cpy);
            break;
          case "c":
            points.push(cpx + p2.shift(), cpy + p2.shift(), cpx + p2.shift(), cpy + p2.shift());
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "C";
            points.push(cpx, cpy);
            break;
          case "S":
            ctlPtx = cpx;
            ctlPty = cpy;
            prevCmd = ca[ca.length - 1];
            if (prevCmd.command === "C") {
              ctlPtx = cpx + (cpx - prevCmd.points[2]);
              ctlPty = cpy + (cpy - prevCmd.points[3]);
            }
            points.push(ctlPtx, ctlPty, p2.shift(), p2.shift());
            cpx = p2.shift();
            cpy = p2.shift();
            cmd = "C";
            points.push(cpx, cpy);
            break;
          case "s":
            ctlPtx = cpx;
            ctlPty = cpy;
            prevCmd = ca[ca.length - 1];
            if (prevCmd.command === "C") {
              ctlPtx = cpx + (cpx - prevCmd.points[2]);
              ctlPty = cpy + (cpy - prevCmd.points[3]);
            }
            points.push(ctlPtx, ctlPty, cpx + p2.shift(), cpy + p2.shift());
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "C";
            points.push(cpx, cpy);
            break;
          case "Q":
            points.push(p2.shift(), p2.shift());
            cpx = p2.shift();
            cpy = p2.shift();
            points.push(cpx, cpy);
            break;
          case "q":
            points.push(cpx + p2.shift(), cpy + p2.shift());
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "Q";
            points.push(cpx, cpy);
            break;
          case "T":
            ctlPtx = cpx;
            ctlPty = cpy;
            prevCmd = ca[ca.length - 1];
            if (prevCmd.command === "Q") {
              ctlPtx = cpx + (cpx - prevCmd.points[0]);
              ctlPty = cpy + (cpy - prevCmd.points[1]);
            }
            cpx = p2.shift();
            cpy = p2.shift();
            cmd = "Q";
            points.push(ctlPtx, ctlPty, cpx, cpy);
            break;
          case "t":
            ctlPtx = cpx;
            ctlPty = cpy;
            prevCmd = ca[ca.length - 1];
            if (prevCmd.command === "Q") {
              ctlPtx = cpx + (cpx - prevCmd.points[0]);
              ctlPty = cpy + (cpy - prevCmd.points[1]);
            }
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "Q";
            points.push(ctlPtx, ctlPty, cpx, cpy);
            break;
          case "A":
            rx = p2.shift();
            ry = p2.shift();
            psi = p2.shift();
            fa = p2.shift();
            fs = p2.shift();
            x1 = cpx;
            y1 = cpy;
            cpx = p2.shift();
            cpy = p2.shift();
            cmd = "A";
            points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
            break;
          case "a":
            rx = p2.shift();
            ry = p2.shift();
            psi = p2.shift();
            fa = p2.shift();
            fs = p2.shift();
            x1 = cpx;
            y1 = cpy;
            cpx += p2.shift();
            cpy += p2.shift();
            cmd = "A";
            points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
            break;
        }
        ca.push({
          command: cmd || c2,
          points,
          start: {
            x: startX,
            y: startY
          },
          pathLength: this.calcLength(startX, startY, cmd || c2, points)
        });
      }
      if (c2 === "z" || c2 === "Z") {
        ca.push({
          command: "z",
          points: [],
          start: void 0,
          pathLength: 0
        });
      }
    }
    return ca;
  };
  Path2.calcLength = function(x2, y2, cmd, points) {
    var len, p1, p2, t3;
    var path = Path2;
    switch (cmd) {
      case "L":
        return path.getLineLength(x2, y2, points[0], points[1]);
      case "C":
        len = 0;
        p1 = path.getPointOnCubicBezier(0, x2, y2, points[0], points[1], points[2], points[3], points[4], points[5]);
        for (t3 = 0.01; t3 <= 1; t3 += 0.01) {
          p2 = path.getPointOnCubicBezier(t3, x2, y2, points[0], points[1], points[2], points[3], points[4], points[5]);
          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
          p1 = p2;
        }
        return len;
      case "Q":
        len = 0;
        p1 = path.getPointOnQuadraticBezier(0, x2, y2, points[0], points[1], points[2], points[3]);
        for (t3 = 0.01; t3 <= 1; t3 += 0.01) {
          p2 = path.getPointOnQuadraticBezier(t3, x2, y2, points[0], points[1], points[2], points[3]);
          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
          p1 = p2;
        }
        return len;
      case "A":
        len = 0;
        var start = points[4];
        var dTheta = points[5];
        var end = points[4] + dTheta;
        var inc = Math.PI / 180;
        if (Math.abs(start - end) < inc) {
          inc = Math.abs(start - end);
        }
        p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
        if (dTheta < 0) {
          for (t3 = start - inc; t3 > end; t3 -= inc) {
            p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t3, 0);
            len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
            p1 = p2;
          }
        } else {
          for (t3 = start + inc; t3 < end; t3 += inc) {
            p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t3, 0);
            len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
            p1 = p2;
          }
        }
        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
        return len;
    }
    return 0;
  };
  Path2.convertEndpointToCenterParameterization = function(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
    var psi = psiDeg * (Math.PI / 180);
    var xp = Math.cos(psi) * (x1 - x2) / 2 + Math.sin(psi) * (y1 - y2) / 2;
    var yp = -1 * Math.sin(psi) * (x1 - x2) / 2 + Math.cos(psi) * (y1 - y2) / 2;
    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
    if (lambda > 1) {
      rx *= Math.sqrt(lambda);
      ry *= Math.sqrt(lambda);
    }
    var f2 = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp)));
    if (fa === fs) {
      f2 *= -1;
    }
    if (isNaN(f2)) {
      f2 = 0;
    }
    var cxp = f2 * rx * yp / ry;
    var cyp = f2 * -ry * xp / rx;
    var cx = (x1 + x2) / 2 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
    var cy2 = (y1 + y2) / 2 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
    var vMag = function(v3) {
      return Math.sqrt(v3[0] * v3[0] + v3[1] * v3[1]);
    };
    var vRatio = function(u3, v3) {
      return (u3[0] * v3[0] + u3[1] * v3[1]) / (vMag(u3) * vMag(v3));
    };
    var vAngle = function(u3, v3) {
      return (u3[0] * v3[1] < u3[1] * v3[0] ? -1 : 1) * Math.acos(vRatio(u3, v3));
    };
    var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
    var u2 = [(xp - cxp) / rx, (yp - cyp) / ry];
    var v2 = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
    var dTheta = vAngle(u2, v2);
    if (vRatio(u2, v2) <= -1) {
      dTheta = Math.PI;
    }
    if (vRatio(u2, v2) >= 1) {
      dTheta = 0;
    }
    if (fs === 0 && dTheta > 0) {
      dTheta = dTheta - 2 * Math.PI;
    }
    if (fs === 1 && dTheta < 0) {
      dTheta = dTheta + 2 * Math.PI;
    }
    return [cx, cy2, rx, ry, theta, dTheta, psi, fs];
  };
  return Path2;
}(Shape_1$9.Shape);
Path$1.Path = Path;
Path.prototype.className = "Path";
Path.prototype._attrsAffectingSize = ["data"];
Global_1$9._registerNode(Path);
Factory_1$o.Factory.addGetterSetter(Path, "data");
Util_1$c.Collection.mapMethods(Path);
var Rect$1 = {};
var __extends$8 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Rect$1, "__esModule", { value: true });
Rect$1.Rect = void 0;
var Util_1$b = Util;
var Factory_1$n = Factory;
var Shape_1$8 = Shape;
var Global_1$8 = Global;
var Validators_1$n = Validators;
var Rect = function(_super) {
  __extends$8(Rect2, _super);
  function Rect2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rect2.prototype._sceneFunc = function(context) {
    var cornerRadius = this.cornerRadius(), width2 = this.width(), height2 = this.height();
    context.beginPath();
    if (!cornerRadius) {
      context.rect(0, 0, width2, height2);
    } else {
      var topLeft = 0;
      var topRight = 0;
      var bottomLeft = 0;
      var bottomRight = 0;
      if (typeof cornerRadius === "number") {
        topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width2 / 2, height2 / 2);
      } else {
        topLeft = Math.min(cornerRadius[0] || 0, width2 / 2, height2 / 2);
        topRight = Math.min(cornerRadius[1] || 0, width2 / 2, height2 / 2);
        bottomRight = Math.min(cornerRadius[2] || 0, width2 / 2, height2 / 2);
        bottomLeft = Math.min(cornerRadius[3] || 0, width2 / 2, height2 / 2);
      }
      context.moveTo(topLeft, 0);
      context.lineTo(width2 - topRight, 0);
      context.arc(width2 - topRight, topRight, topRight, Math.PI * 3 / 2, 0, false);
      context.lineTo(width2, height2 - bottomRight);
      context.arc(width2 - bottomRight, height2 - bottomRight, bottomRight, 0, Math.PI / 2, false);
      context.lineTo(bottomLeft, height2);
      context.arc(bottomLeft, height2 - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
      context.lineTo(0, topLeft);
      context.arc(topLeft, topLeft, topLeft, Math.PI, Math.PI * 3 / 2, false);
    }
    context.closePath();
    context.fillStrokeShape(this);
  };
  return Rect2;
}(Shape_1$8.Shape);
Rect$1.Rect = Rect;
Rect.prototype.className = "Rect";
Global_1$8._registerNode(Rect);
Factory_1$n.Factory.addGetterSetter(Rect, "cornerRadius", 0, Validators_1$n.getNumberOrArrayOfNumbersValidator(4));
Util_1$b.Collection.mapMethods(Rect);
var RegularPolygon$1 = {};
var __extends$7 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(RegularPolygon$1, "__esModule", { value: true });
RegularPolygon$1.RegularPolygon = void 0;
var Util_1$a = Util;
var Factory_1$m = Factory;
var Shape_1$7 = Shape;
var Validators_1$m = Validators;
var Global_1$7 = Global;
var RegularPolygon = function(_super) {
  __extends$7(RegularPolygon2, _super);
  function RegularPolygon2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  RegularPolygon2.prototype._sceneFunc = function(context) {
    var points = this._getPoints();
    context.beginPath();
    context.moveTo(points[0].x, points[0].y);
    for (var n2 = 1; n2 < points.length; n2++) {
      context.lineTo(points[n2].x, points[n2].y);
    }
    context.closePath();
    context.fillStrokeShape(this);
  };
  RegularPolygon2.prototype._getPoints = function() {
    var sides = this.attrs.sides;
    var radius = this.attrs.radius || 0;
    var points = [];
    for (var n2 = 0; n2 < sides; n2++) {
      points.push({
        x: radius * Math.sin(n2 * 2 * Math.PI / sides),
        y: -1 * radius * Math.cos(n2 * 2 * Math.PI / sides)
      });
    }
    return points;
  };
  RegularPolygon2.prototype.getSelfRect = function() {
    var points = this._getPoints();
    var minX = points[0].x;
    var maxX = points[0].y;
    var minY = points[0].x;
    var maxY = points[0].y;
    points.forEach(function(point) {
      minX = Math.min(minX, point.x);
      maxX = Math.max(maxX, point.x);
      minY = Math.min(minY, point.y);
      maxY = Math.max(maxY, point.y);
    });
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  };
  RegularPolygon2.prototype.getWidth = function() {
    return this.radius() * 2;
  };
  RegularPolygon2.prototype.getHeight = function() {
    return this.radius() * 2;
  };
  RegularPolygon2.prototype.setWidth = function(width2) {
    this.radius(width2 / 2);
  };
  RegularPolygon2.prototype.setHeight = function(height2) {
    this.radius(height2 / 2);
  };
  return RegularPolygon2;
}(Shape_1$7.Shape);
RegularPolygon$1.RegularPolygon = RegularPolygon;
RegularPolygon.prototype.className = "RegularPolygon";
RegularPolygon.prototype._centroid = true;
RegularPolygon.prototype._attrsAffectingSize = ["radius"];
Global_1$7._registerNode(RegularPolygon);
Factory_1$m.Factory.addGetterSetter(RegularPolygon, "radius", 0, Validators_1$m.getNumberValidator());
Factory_1$m.Factory.addGetterSetter(RegularPolygon, "sides", 0, Validators_1$m.getNumberValidator());
Util_1$a.Collection.mapMethods(RegularPolygon);
var Ring$1 = {};
var __extends$6 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Ring$1, "__esModule", { value: true });
Ring$1.Ring = void 0;
var Util_1$9 = Util;
var Factory_1$l = Factory;
var Shape_1$6 = Shape;
var Validators_1$l = Validators;
var Global_1$6 = Global;
var PIx2 = Math.PI * 2;
var Ring = function(_super) {
  __extends$6(Ring2, _super);
  function Ring2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Ring2.prototype._sceneFunc = function(context) {
    context.beginPath();
    context.arc(0, 0, this.innerRadius(), 0, PIx2, false);
    context.moveTo(this.outerRadius(), 0);
    context.arc(0, 0, this.outerRadius(), PIx2, 0, true);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Ring2.prototype.getWidth = function() {
    return this.outerRadius() * 2;
  };
  Ring2.prototype.getHeight = function() {
    return this.outerRadius() * 2;
  };
  Ring2.prototype.setWidth = function(width2) {
    this.outerRadius(width2 / 2);
  };
  Ring2.prototype.setHeight = function(height2) {
    this.outerRadius(height2 / 2);
  };
  return Ring2;
}(Shape_1$6.Shape);
Ring$1.Ring = Ring;
Ring.prototype.className = "Ring";
Ring.prototype._centroid = true;
Ring.prototype._attrsAffectingSize = ["innerRadius", "outerRadius"];
Global_1$6._registerNode(Ring);
Factory_1$l.Factory.addGetterSetter(Ring, "innerRadius", 0, Validators_1$l.getNumberValidator());
Factory_1$l.Factory.addGetterSetter(Ring, "outerRadius", 0, Validators_1$l.getNumberValidator());
Util_1$9.Collection.mapMethods(Ring);
var Sprite$1 = {};
var __extends$5 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Sprite$1, "__esModule", { value: true });
Sprite$1.Sprite = void 0;
var Util_1$8 = Util;
var Factory_1$k = Factory;
var Shape_1$5 = Shape;
var Animation_1 = Animation$1;
var Validators_1$k = Validators;
var Global_1$5 = Global;
var Sprite = function(_super) {
  __extends$5(Sprite2, _super);
  function Sprite2(config) {
    var _this = _super.call(this, config) || this;
    _this._updated = true;
    _this.anim = new Animation_1.Animation(function() {
      var updated = _this._updated;
      _this._updated = false;
      return updated;
    });
    _this.on("animationChange.konva", function() {
      this.frameIndex(0);
    });
    _this.on("frameIndexChange.konva", function() {
      this._updated = true;
    });
    _this.on("frameRateChange.konva", function() {
      if (!this.anim.isRunning()) {
        return;
      }
      clearInterval(this.interval);
      this._setInterval();
    });
    return _this;
  }
  Sprite2.prototype._sceneFunc = function(context) {
    var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set2 = this.animations()[anim], offsets = this.frameOffsets(), x2 = set2[ix4 + 0], y2 = set2[ix4 + 1], width2 = set2[ix4 + 2], height2 = set2[ix4 + 3], image = this.image();
    if (this.hasFill() || this.hasStroke()) {
      context.beginPath();
      context.rect(0, 0, width2, height2);
      context.closePath();
      context.fillStrokeShape(this);
    }
    if (image) {
      if (offsets) {
        var offset = offsets[anim], ix2 = index * 2;
        context.drawImage(image, x2, y2, width2, height2, offset[ix2 + 0], offset[ix2 + 1], width2, height2);
      } else {
        context.drawImage(image, x2, y2, width2, height2, 0, 0, width2, height2);
      }
    }
  };
  Sprite2.prototype._hitFunc = function(context) {
    var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set2 = this.animations()[anim], offsets = this.frameOffsets(), width2 = set2[ix4 + 2], height2 = set2[ix4 + 3];
    context.beginPath();
    if (offsets) {
      var offset = offsets[anim];
      var ix2 = index * 2;
      context.rect(offset[ix2 + 0], offset[ix2 + 1], width2, height2);
    } else {
      context.rect(0, 0, width2, height2);
    }
    context.closePath();
    context.fillShape(this);
  };
  Sprite2.prototype._useBufferCanvas = function() {
    return _super.prototype._useBufferCanvas.call(this, true);
  };
  Sprite2.prototype._setInterval = function() {
    var that = this;
    this.interval = setInterval(function() {
      that._updateIndex();
    }, 1e3 / this.frameRate());
  };
  Sprite2.prototype.start = function() {
    if (this.isRunning()) {
      return;
    }
    var layer = this.getLayer();
    this.anim.setLayers(layer);
    this._setInterval();
    this.anim.start();
  };
  Sprite2.prototype.stop = function() {
    this.anim.stop();
    clearInterval(this.interval);
  };
  Sprite2.prototype.isRunning = function() {
    return this.anim.isRunning();
  };
  Sprite2.prototype._updateIndex = function() {
    var index = this.frameIndex(), animation2 = this.animation(), animations = this.animations(), anim = animations[animation2], len = anim.length / 4;
    if (index < len - 1) {
      this.frameIndex(index + 1);
    } else {
      this.frameIndex(0);
    }
  };
  return Sprite2;
}(Shape_1$5.Shape);
Sprite$1.Sprite = Sprite;
Sprite.prototype.className = "Sprite";
Global_1$5._registerNode(Sprite);
Factory_1$k.Factory.addGetterSetter(Sprite, "animation");
Factory_1$k.Factory.addGetterSetter(Sprite, "animations");
Factory_1$k.Factory.addGetterSetter(Sprite, "frameOffsets");
Factory_1$k.Factory.addGetterSetter(Sprite, "image");
Factory_1$k.Factory.addGetterSetter(Sprite, "frameIndex", 0, Validators_1$k.getNumberValidator());
Factory_1$k.Factory.addGetterSetter(Sprite, "frameRate", 17, Validators_1$k.getNumberValidator());
Factory_1$k.Factory.backCompat(Sprite, {
  index: "frameIndex",
  getIndex: "getFrameIndex",
  setIndex: "setFrameIndex"
});
Util_1$8.Collection.mapMethods(Sprite);
var Star$1 = {};
var __extends$4 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Star$1, "__esModule", { value: true });
Star$1.Star = void 0;
var Util_1$7 = Util;
var Factory_1$j = Factory;
var Shape_1$4 = Shape;
var Validators_1$j = Validators;
var Global_1$4 = Global;
var Star = function(_super) {
  __extends$4(Star2, _super);
  function Star2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Star2.prototype._sceneFunc = function(context) {
    var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();
    context.beginPath();
    context.moveTo(0, 0 - outerRadius);
    for (var n2 = 1; n2 < numPoints * 2; n2++) {
      var radius = n2 % 2 === 0 ? outerRadius : innerRadius;
      var x2 = radius * Math.sin(n2 * Math.PI / numPoints);
      var y2 = -1 * radius * Math.cos(n2 * Math.PI / numPoints);
      context.lineTo(x2, y2);
    }
    context.closePath();
    context.fillStrokeShape(this);
  };
  Star2.prototype.getWidth = function() {
    return this.outerRadius() * 2;
  };
  Star2.prototype.getHeight = function() {
    return this.outerRadius() * 2;
  };
  Star2.prototype.setWidth = function(width2) {
    this.outerRadius(width2 / 2);
  };
  Star2.prototype.setHeight = function(height2) {
    this.outerRadius(height2 / 2);
  };
  return Star2;
}(Shape_1$4.Shape);
Star$1.Star = Star;
Star.prototype.className = "Star";
Star.prototype._centroid = true;
Star.prototype._attrsAffectingSize = ["innerRadius", "outerRadius"];
Global_1$4._registerNode(Star);
Factory_1$j.Factory.addGetterSetter(Star, "numPoints", 5, Validators_1$j.getNumberValidator());
Factory_1$j.Factory.addGetterSetter(Star, "innerRadius", 0, Validators_1$j.getNumberValidator());
Factory_1$j.Factory.addGetterSetter(Star, "outerRadius", 0, Validators_1$j.getNumberValidator());
Util_1$7.Collection.mapMethods(Star);
var Text$1 = {};
var __extends$3 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Text$1, "__esModule", { value: true });
Text$1.Text = Text$1.stringToArray = void 0;
var Util_1$6 = Util;
var Factory_1$i = Factory;
var Shape_1$3 = Shape;
var Global_1$3 = Global;
var Validators_1$i = Validators;
var Global_2$2 = Global;
function stringToArray(string3) {
  return Array.from(string3);
}
Text$1.stringToArray = stringToArray;
var AUTO = "auto", CENTER = "center", JUSTIFY = "justify", CHANGE_KONVA = "Change.konva", CONTEXT_2D = "2d", DASH = "-", LEFT = "left", TEXT = "text", TEXT_UPPER = "Text", TOP = "top", BOTTOM = "bottom", MIDDLE = "middle", NORMAL$1 = "normal", PX_SPACE = "px ", SPACE = " ", RIGHT = "right", WORD = "word", CHAR = "char", NONE = "none", ELLIPSIS = "…", ATTR_CHANGE_LIST$1 = [
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontVariant",
  "padding",
  "align",
  "verticalAlign",
  "lineHeight",
  "text",
  "width",
  "height",
  "wrap",
  "ellipsis",
  "letterSpacing"
], attrChangeListLen = ATTR_CHANGE_LIST$1.length;
function normalizeFontFamily(fontFamily) {
  return fontFamily.split(",").map(function(family) {
    family = family.trim();
    var hasSpace = family.indexOf(" ") >= 0;
    var hasQuotes = family.indexOf('"') >= 0 || family.indexOf("'") >= 0;
    if (hasSpace && !hasQuotes) {
      family = '"' + family + '"';
    }
    return family;
  }).join(", ");
}
var dummyContext;
function getDummyContext() {
  if (dummyContext) {
    return dummyContext;
  }
  dummyContext = Util_1$6.Util.createCanvasElement().getContext(CONTEXT_2D);
  return dummyContext;
}
function _fillFunc$1(context) {
  context.fillText(this._partialText, this._partialTextX, this._partialTextY);
}
function _strokeFunc$1(context) {
  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);
}
function checkDefaultFill(config) {
  config = config || {};
  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {
    config.fill = config.fill || "black";
  }
  return config;
}
var Text = function(_super) {
  __extends$3(Text2, _super);
  function Text2(config) {
    var _this = _super.call(this, checkDefaultFill(config)) || this;
    _this._partialTextX = 0;
    _this._partialTextY = 0;
    for (var n2 = 0; n2 < attrChangeListLen; n2++) {
      _this.on(ATTR_CHANGE_LIST$1[n2] + CHANGE_KONVA, _this._setTextData);
    }
    _this._setTextData();
    return _this;
  }
  Text2.prototype._sceneFunc = function(context) {
    var textArr = this.textArr, textArrLen = textArr.length;
    if (!this.text()) {
      return;
    }
    var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf("underline") !== -1, shouldLineThrough = textDecoration.indexOf("line-through") !== -1, n2;
    var translateY = 0;
    var translateY = lineHeightPx / 2;
    var lineTranslateX = 0;
    var lineTranslateY = 0;
    context.setAttr("font", this._getContextFont());
    context.setAttr("textBaseline", MIDDLE);
    context.setAttr("textAlign", LEFT);
    if (verticalAlign === MIDDLE) {
      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;
    } else if (verticalAlign === BOTTOM) {
      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;
    }
    context.translate(padding, alignY + padding);
    for (n2 = 0; n2 < textArrLen; n2++) {
      var lineTranslateX = 0;
      var lineTranslateY = 0;
      var obj = textArr[n2], text2 = obj.text, width2 = obj.width, lastLine = n2 !== textArrLen - 1, spacesNumber, oneWord, lineWidth;
      context.save();
      if (align === RIGHT) {
        lineTranslateX += totalWidth - width2 - padding * 2;
      } else if (align === CENTER) {
        lineTranslateX += (totalWidth - width2 - padding * 2) / 2;
      }
      if (shouldUnderline) {
        context.save();
        context.beginPath();
        context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));
        spacesNumber = text2.split(" ").length - 1;
        oneWord = spacesNumber === 0;
        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width2;
        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));
        context.lineWidth = fontSize / 15;
        context.strokeStyle = fill;
        context.stroke();
        context.restore();
      }
      if (shouldLineThrough) {
        context.save();
        context.beginPath();
        context.moveTo(lineTranslateX, translateY + lineTranslateY);
        spacesNumber = text2.split(" ").length - 1;
        oneWord = spacesNumber === 0;
        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width2;
        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);
        context.lineWidth = fontSize / 15;
        context.strokeStyle = fill;
        context.stroke();
        context.restore();
      }
      if (letterSpacing !== 0 || align === JUSTIFY) {
        spacesNumber = text2.split(" ").length - 1;
        var array3 = stringToArray(text2);
        for (var li = 0; li < array3.length; li++) {
          var letter = array3[li];
          if (letter === " " && n2 !== textArrLen - 1 && align === JUSTIFY) {
            lineTranslateX += (totalWidth - padding * 2 - width2) / spacesNumber;
          }
          this._partialTextX = lineTranslateX;
          this._partialTextY = translateY + lineTranslateY;
          this._partialText = letter;
          context.fillStrokeShape(this);
          lineTranslateX += this.measureSize(letter).width + letterSpacing;
        }
      } else {
        this._partialTextX = lineTranslateX;
        this._partialTextY = translateY + lineTranslateY;
        this._partialText = text2;
        context.fillStrokeShape(this);
      }
      context.restore();
      if (textArrLen > 1) {
        translateY += lineHeightPx;
      }
    }
  };
  Text2.prototype._hitFunc = function(context) {
    var width2 = this.getWidth(), height2 = this.getHeight();
    context.beginPath();
    context.rect(0, 0, width2, height2);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Text2.prototype.setText = function(text2) {
    var str = Util_1$6.Util._isString(text2) ? text2 : text2 === null || text2 === void 0 ? "" : text2 + "";
    this._setAttr(TEXT, str);
    return this;
  };
  Text2.prototype.getWidth = function() {
    var isAuto = this.attrs.width === AUTO || this.attrs.width === void 0;
    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;
  };
  Text2.prototype.getHeight = function() {
    var isAuto = this.attrs.height === AUTO || this.attrs.height === void 0;
    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;
  };
  Text2.prototype.getTextWidth = function() {
    return this.textWidth;
  };
  Text2.prototype.getTextHeight = function() {
    Util_1$6.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.");
    return this.textHeight;
  };
  Text2.prototype.measureSize = function(text2) {
    var _context = getDummyContext(), fontSize = this.fontSize(), metrics;
    _context.save();
    _context.font = this._getContextFont();
    metrics = _context.measureText(text2);
    _context.restore();
    return {
      width: metrics.width,
      height: fontSize
    };
  };
  Text2.prototype._getContextFont = function() {
    if (Global_1$3.Konva.UA.isIE) {
      return this.fontStyle() + SPACE + this.fontSize() + PX_SPACE + this.fontFamily();
    }
    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());
  };
  Text2.prototype._addTextLine = function(line) {
    if (this.align() === JUSTIFY) {
      line = line.trim();
    }
    var width2 = this._getTextWidth(line);
    return this.textArr.push({ text: line, width: width2 });
  };
  Text2.prototype._getTextWidth = function(text2) {
    var letterSpacing = this.letterSpacing();
    var length = text2.length;
    return getDummyContext().measureText(text2).width + (length ? letterSpacing * (length - 1) : 0);
  };
  Text2.prototype._setTextData = function() {
    var lines = this.text().split("\n"), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width2 = this.attrs.width, height2 = this.attrs.height, fixedWidth = width2 !== AUTO && width2 !== void 0, fixedHeight = height2 !== AUTO && height2 !== void 0, padding = this.padding(), maxWidth = width2 - padding * 2, maxHeightPx = height2 - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();
    this.textArr = [];
    getDummyContext().font = this._getContextFont();
    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;
    for (var i2 = 0, max5 = lines.length; i2 < max5; ++i2) {
      var line = lines[i2];
      var lineWidth = this._getTextWidth(line);
      if (fixedWidth && lineWidth > maxWidth) {
        while (line.length > 0) {
          var low = 0, high = line.length, match2 = "", matchWidth = 0;
          while (low < high) {
            var mid = low + high >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;
            if (substrWidth <= maxWidth) {
              low = mid + 1;
              match2 = substr;
              matchWidth = substrWidth;
            } else {
              high = mid;
            }
          }
          if (match2) {
            if (wrapAtWord) {
              var wrapIndex;
              var nextChar = line[match2.length];
              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;
              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {
                wrapIndex = match2.length;
              } else {
                wrapIndex = Math.max(match2.lastIndexOf(SPACE), match2.lastIndexOf(DASH)) + 1;
              }
              if (wrapIndex > 0) {
                low = wrapIndex;
                match2 = match2.slice(0, low);
                matchWidth = this._getTextWidth(match2);
              }
            }
            match2 = match2.trimRight();
            this._addTextLine(match2);
            textWidth = Math.max(textWidth, matchWidth);
            currentHeightPx += lineHeightPx;
            if (!shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
              var lastLine = this.textArr[this.textArr.length - 1];
              if (lastLine) {
                if (shouldAddEllipsis) {
                  var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;
                  if (!haveSpace) {
                    lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);
                  }
                  this.textArr.splice(this.textArr.length - 1, 1);
                  this._addTextLine(lastLine.text + ELLIPSIS);
                }
              }
              break;
            }
            line = line.slice(low);
            line = line.trimLeft();
            if (line.length > 0) {
              lineWidth = this._getTextWidth(line);
              if (lineWidth <= maxWidth) {
                this._addTextLine(line);
                currentHeightPx += lineHeightPx;
                textWidth = Math.max(textWidth, lineWidth);
                break;
              }
            }
          } else {
            break;
          }
        }
      } else {
        this._addTextLine(line);
        currentHeightPx += lineHeightPx;
        textWidth = Math.max(textWidth, lineWidth);
      }
      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
        break;
      }
    }
    this.textHeight = fontSize;
    this.textWidth = textWidth;
  };
  Text2.prototype.getStrokeScaleEnabled = function() {
    return true;
  };
  return Text2;
}(Shape_1$3.Shape);
Text$1.Text = Text;
Text.prototype._fillFunc = _fillFunc$1;
Text.prototype._strokeFunc = _strokeFunc$1;
Text.prototype.className = TEXT_UPPER;
Text.prototype._attrsAffectingSize = [
  "text",
  "fontSize",
  "padding",
  "wrap",
  "lineHeight",
  "letterSpacing"
];
Global_2$2._registerNode(Text);
Factory_1$i.Factory.overWriteSetter(Text, "width", Validators_1$i.getNumberOrAutoValidator());
Factory_1$i.Factory.overWriteSetter(Text, "height", Validators_1$i.getNumberOrAutoValidator());
Factory_1$i.Factory.addGetterSetter(Text, "fontFamily", "Arial");
Factory_1$i.Factory.addGetterSetter(Text, "fontSize", 12, Validators_1$i.getNumberValidator());
Factory_1$i.Factory.addGetterSetter(Text, "fontStyle", NORMAL$1);
Factory_1$i.Factory.addGetterSetter(Text, "fontVariant", NORMAL$1);
Factory_1$i.Factory.addGetterSetter(Text, "padding", 0, Validators_1$i.getNumberValidator());
Factory_1$i.Factory.addGetterSetter(Text, "align", LEFT);
Factory_1$i.Factory.addGetterSetter(Text, "verticalAlign", TOP);
Factory_1$i.Factory.addGetterSetter(Text, "lineHeight", 1, Validators_1$i.getNumberValidator());
Factory_1$i.Factory.addGetterSetter(Text, "wrap", WORD);
Factory_1$i.Factory.addGetterSetter(Text, "ellipsis", false, Validators_1$i.getBooleanValidator());
Factory_1$i.Factory.addGetterSetter(Text, "letterSpacing", 0, Validators_1$i.getNumberValidator());
Factory_1$i.Factory.addGetterSetter(Text, "text", "", Validators_1$i.getStringValidator());
Factory_1$i.Factory.addGetterSetter(Text, "textDecoration", "");
Util_1$6.Collection.mapMethods(Text);
var TextPath$1 = {};
var __extends$2 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(TextPath$1, "__esModule", { value: true });
TextPath$1.TextPath = void 0;
var Util_1$5 = Util;
var Factory_1$h = Factory;
var Shape_1$2 = Shape;
var Path_1$1 = Path$1;
var Text_1$1 = Text$1;
var Validators_1$h = Validators;
var Global_1$2 = Global;
var EMPTY_STRING = "", NORMAL = "normal";
function _fillFunc(context) {
  context.fillText(this.partialText, 0, 0);
}
function _strokeFunc(context) {
  context.strokeText(this.partialText, 0, 0);
}
var TextPath = function(_super) {
  __extends$2(TextPath2, _super);
  function TextPath2(config) {
    var _this = _super.call(this, config) || this;
    _this.dummyCanvas = Util_1$5.Util.createCanvasElement();
    _this.dataArray = [];
    _this.dataArray = Path_1$1.Path.parsePathData(_this.attrs.data);
    _this.on("dataChange.konva", function() {
      this.dataArray = Path_1$1.Path.parsePathData(this.attrs.data);
      this._setTextData();
    });
    _this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva", _this._setTextData);
    if (config && config["getKerning"]) {
      Util_1$5.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.');
      _this.kerningFunc(config["getKerning"]);
    }
    _this._setTextData();
    return _this;
  }
  TextPath2.prototype._sceneFunc = function(context) {
    context.setAttr("font", this._getContextFont());
    context.setAttr("textBaseline", this.textBaseline());
    context.setAttr("textAlign", "left");
    context.save();
    var textDecoration = this.textDecoration();
    var fill = this.fill();
    var fontSize = this.fontSize();
    var glyphInfo = this.glyphInfo;
    if (textDecoration === "underline") {
      context.beginPath();
    }
    for (var i2 = 0; i2 < glyphInfo.length; i2++) {
      context.save();
      var p0 = glyphInfo[i2].p0;
      context.translate(p0.x, p0.y);
      context.rotate(glyphInfo[i2].rotation);
      this.partialText = glyphInfo[i2].text;
      context.fillStrokeShape(this);
      if (textDecoration === "underline") {
        if (i2 === 0) {
          context.moveTo(0, fontSize / 2 + 1);
        }
        context.lineTo(fontSize, fontSize / 2 + 1);
      }
      context.restore();
    }
    if (textDecoration === "underline") {
      context.strokeStyle = fill;
      context.lineWidth = fontSize / 20;
      context.stroke();
    }
    context.restore();
  };
  TextPath2.prototype._hitFunc = function(context) {
    context.beginPath();
    var glyphInfo = this.glyphInfo;
    if (glyphInfo.length >= 1) {
      var p0 = glyphInfo[0].p0;
      context.moveTo(p0.x, p0.y);
    }
    for (var i2 = 0; i2 < glyphInfo.length; i2++) {
      var p1 = glyphInfo[i2].p1;
      context.lineTo(p1.x, p1.y);
    }
    context.setAttr("lineWidth", this.fontSize());
    context.setAttr("strokeStyle", this.colorKey);
    context.stroke();
  };
  TextPath2.prototype.getTextWidth = function() {
    return this.textWidth;
  };
  TextPath2.prototype.getTextHeight = function() {
    Util_1$5.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.");
    return this.textHeight;
  };
  TextPath2.prototype.setText = function(text2) {
    return Text_1$1.Text.prototype.setText.call(this, text2);
  };
  TextPath2.prototype._getContextFont = function() {
    return Text_1$1.Text.prototype._getContextFont.call(this);
  };
  TextPath2.prototype._getTextSize = function(text2) {
    var dummyCanvas = this.dummyCanvas;
    var _context = dummyCanvas.getContext("2d");
    _context.save();
    _context.font = this._getContextFont();
    var metrics = _context.measureText(text2);
    _context.restore();
    return {
      width: metrics.width,
      height: parseInt(this.attrs.fontSize, 10)
    };
  };
  TextPath2.prototype._setTextData = function() {
    var that = this;
    var size3 = this._getTextSize(this.attrs.text);
    var letterSpacing = this.letterSpacing();
    var align = this.align();
    var kerningFunc = this.kerningFunc();
    this.textWidth = size3.width;
    this.textHeight = size3.height;
    var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || "").length - 1) * letterSpacing, 0);
    this.glyphInfo = [];
    var fullPathWidth = 0;
    for (var l2 = 0; l2 < that.dataArray.length; l2++) {
      if (that.dataArray[l2].pathLength > 0) {
        fullPathWidth += that.dataArray[l2].pathLength;
      }
    }
    var offset = 0;
    if (align === "center") {
      offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);
    }
    if (align === "right") {
      offset = Math.max(0, fullPathWidth - textFullWidth);
    }
    var charArr = Text_1$1.stringToArray(this.text());
    var spacesNumber = this.text().split(" ").length - 1;
    var p0, p1, pathCmd;
    var pIndex = -1;
    var currentT = 0;
    var getNextPathSegment = function() {
      currentT = 0;
      var pathData = that.dataArray;
      for (var j2 = pIndex + 1; j2 < pathData.length; j2++) {
        if (pathData[j2].pathLength > 0) {
          pIndex = j2;
          return pathData[j2];
        } else if (pathData[j2].command === "M") {
          p0 = {
            x: pathData[j2].points[0],
            y: pathData[j2].points[1]
          };
        }
      }
      return {};
    };
    var findSegmentToFitCharacter = function(c2) {
      var glyphWidth2 = that._getTextSize(c2).width + letterSpacing;
      if (c2 === " " && align === "justify") {
        glyphWidth2 += (fullPathWidth - textFullWidth) / spacesNumber;
      }
      var currLen = 0;
      var attempts = 0;
      p1 = void 0;
      while (Math.abs(glyphWidth2 - currLen) / glyphWidth2 > 0.01 && attempts < 20) {
        attempts++;
        var cumulativePathLength = currLen;
        while (pathCmd === void 0) {
          pathCmd = getNextPathSegment();
          if (pathCmd && cumulativePathLength + pathCmd.pathLength < glyphWidth2) {
            cumulativePathLength += pathCmd.pathLength;
            pathCmd = void 0;
          }
        }
        if (pathCmd === {} || p0 === void 0) {
          return void 0;
        }
        var needNewSegment = false;
        switch (pathCmd.command) {
          case "L":
            if (Path_1$1.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth2) {
              p1 = Path_1$1.Path.getPointOnLine(glyphWidth2, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);
            } else {
              pathCmd = void 0;
            }
            break;
          case "A":
            var start = pathCmd.points[4];
            var dTheta = pathCmd.points[5];
            var end = pathCmd.points[4] + dTheta;
            if (currentT === 0) {
              currentT = start + 1e-8;
            } else if (glyphWidth2 > currLen) {
              currentT += Math.PI / 180 * dTheta / Math.abs(dTheta);
            } else {
              currentT -= Math.PI / 360 * dTheta / Math.abs(dTheta);
            }
            if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {
              currentT = end;
              needNewSegment = true;
            }
            p1 = Path_1$1.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);
            break;
          case "C":
            if (currentT === 0) {
              if (glyphWidth2 > pathCmd.pathLength) {
                currentT = 1e-8;
              } else {
                currentT = glyphWidth2 / pathCmd.pathLength;
              }
            } else if (glyphWidth2 > currLen) {
              currentT += (glyphWidth2 - currLen) / pathCmd.pathLength / 2;
            } else {
              currentT = Math.max(currentT - (currLen - glyphWidth2) / pathCmd.pathLength / 2, 0);
            }
            if (currentT > 1) {
              currentT = 1;
              needNewSegment = true;
            }
            p1 = Path_1$1.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);
            break;
          case "Q":
            if (currentT === 0) {
              currentT = glyphWidth2 / pathCmd.pathLength;
            } else if (glyphWidth2 > currLen) {
              currentT += (glyphWidth2 - currLen) / pathCmd.pathLength;
            } else {
              currentT -= (currLen - glyphWidth2) / pathCmd.pathLength;
            }
            if (currentT > 1) {
              currentT = 1;
              needNewSegment = true;
            }
            p1 = Path_1$1.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);
            break;
        }
        if (p1 !== void 0) {
          currLen = Path_1$1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
        }
        if (needNewSegment) {
          needNewSegment = false;
          pathCmd = void 0;
        }
      }
    };
    var testChar = "C";
    var glyphWidth = that._getTextSize(testChar).width + letterSpacing;
    var lettersInOffset = offset / glyphWidth - 1;
    for (var k2 = 0; k2 < lettersInOffset; k2++) {
      findSegmentToFitCharacter(testChar);
      if (p0 === void 0 || p1 === void 0) {
        break;
      }
      p0 = p1;
    }
    for (var i2 = 0; i2 < charArr.length; i2++) {
      findSegmentToFitCharacter(charArr[i2]);
      if (p0 === void 0 || p1 === void 0) {
        break;
      }
      var width2 = Path_1$1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
      var kern = 0;
      if (kerningFunc) {
        try {
          kern = kerningFunc(charArr[i2 - 1], charArr[i2]) * this.fontSize();
        } catch (e2) {
          kern = 0;
        }
      }
      p0.x += kern;
      p1.x += kern;
      this.textWidth += kern;
      var midpoint3 = Path_1$1.Path.getPointOnLine(kern + width2 / 2, p0.x, p0.y, p1.x, p1.y);
      var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);
      this.glyphInfo.push({
        transposeX: midpoint3.x,
        transposeY: midpoint3.y,
        text: charArr[i2],
        rotation,
        p0,
        p1
      });
      p0 = p1;
    }
  };
  TextPath2.prototype.getSelfRect = function() {
    if (!this.glyphInfo.length) {
      return {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }
    var points = [];
    this.glyphInfo.forEach(function(info) {
      points.push(info.p0.x);
      points.push(info.p0.y);
      points.push(info.p1.x);
      points.push(info.p1.y);
    });
    var minX = points[0] || 0;
    var maxX = points[0] || 0;
    var minY = points[1] || 0;
    var maxY = points[1] || 0;
    var x2, y2;
    for (var i2 = 0; i2 < points.length / 2; i2++) {
      x2 = points[i2 * 2];
      y2 = points[i2 * 2 + 1];
      minX = Math.min(minX, x2);
      maxX = Math.max(maxX, x2);
      minY = Math.min(minY, y2);
      maxY = Math.max(maxY, y2);
    }
    var fontSize = this.fontSize();
    return {
      x: minX - fontSize / 2,
      y: minY - fontSize / 2,
      width: maxX - minX + fontSize,
      height: maxY - minY + fontSize
    };
  };
  return TextPath2;
}(Shape_1$2.Shape);
TextPath$1.TextPath = TextPath;
TextPath.prototype._fillFunc = _fillFunc;
TextPath.prototype._strokeFunc = _strokeFunc;
TextPath.prototype._fillFuncHit = _fillFunc;
TextPath.prototype._strokeFuncHit = _strokeFunc;
TextPath.prototype.className = "TextPath";
TextPath.prototype._attrsAffectingSize = ["text", "fontSize", "data"];
Global_1$2._registerNode(TextPath);
Factory_1$h.Factory.addGetterSetter(TextPath, "data");
Factory_1$h.Factory.addGetterSetter(TextPath, "fontFamily", "Arial");
Factory_1$h.Factory.addGetterSetter(TextPath, "fontSize", 12, Validators_1$h.getNumberValidator());
Factory_1$h.Factory.addGetterSetter(TextPath, "fontStyle", NORMAL);
Factory_1$h.Factory.addGetterSetter(TextPath, "align", "left");
Factory_1$h.Factory.addGetterSetter(TextPath, "letterSpacing", 0, Validators_1$h.getNumberValidator());
Factory_1$h.Factory.addGetterSetter(TextPath, "textBaseline", "middle");
Factory_1$h.Factory.addGetterSetter(TextPath, "fontVariant", NORMAL);
Factory_1$h.Factory.addGetterSetter(TextPath, "text", EMPTY_STRING);
Factory_1$h.Factory.addGetterSetter(TextPath, "textDecoration", null);
Factory_1$h.Factory.addGetterSetter(TextPath, "kerningFunc", null);
Util_1$5.Collection.mapMethods(TextPath);
var Transformer$1 = {};
var __extends$1 = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign = commonjsGlobal && commonjsGlobal.__assign || function() {
  __assign = Object.assign || function(t3) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t3[p2] = s2[p2];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(Transformer$1, "__esModule", { value: true });
Transformer$1.Transformer = void 0;
var Util_1$4 = Util;
var Factory_1$g = Factory;
var Node_1$f = Node;
var Shape_1$1 = Shape;
var Rect_1$1 = Rect$1;
var Group_1 = Group$1;
var Global_1$1 = Global;
var Validators_1$g = Validators;
var Global_2$1 = Global;
var EVENTS_NAME = "tr-konva";
var ATTR_CHANGE_LIST = [
  "resizeEnabledChange",
  "rotateAnchorOffsetChange",
  "rotateEnabledChange",
  "enabledAnchorsChange",
  "anchorSizeChange",
  "borderEnabledChange",
  "borderStrokeChange",
  "borderStrokeWidthChange",
  "borderDashChange",
  "anchorStrokeChange",
  "anchorStrokeWidthChange",
  "anchorFillChange",
  "anchorCornerRadiusChange",
  "ignoreStrokeChange"
].map(function(e2) {
  return e2 + ("." + EVENTS_NAME);
}).join(" ");
var NODES_RECT = "nodesRect";
var TRANSFORM_CHANGE_STR = [
  "widthChange",
  "heightChange",
  "scaleXChange",
  "scaleYChange",
  "skewXChange",
  "skewYChange",
  "rotationChange",
  "offsetXChange",
  "offsetYChange",
  "transformsEnabledChange",
  "strokeWidthChange"
].map(function(e2) {
  return e2 + ("." + EVENTS_NAME);
}).join(" ");
var ANGLES = {
  "top-left": -45,
  "top-center": 0,
  "top-right": 45,
  "middle-right": -90,
  "middle-left": 90,
  "bottom-left": -135,
  "bottom-center": 180,
  "bottom-right": 135
};
var TOUCH_DEVICE = "ontouchstart" in Global_1$1.Konva._global;
function getCursor(anchorName, rad) {
  if (anchorName === "rotater") {
    return "crosshair";
  }
  rad += Util_1$4.Util._degToRad(ANGLES[anchorName] || 0);
  var angle = (Util_1$4.Util._radToDeg(rad) % 360 + 360) % 360;
  if (Util_1$4.Util._inRange(angle, 315 + 22.5, 360) || Util_1$4.Util._inRange(angle, 0, 22.5)) {
    return "ns-resize";
  } else if (Util_1$4.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {
    return "nesw-resize";
  } else if (Util_1$4.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {
    return "ew-resize";
  } else if (Util_1$4.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {
    return "nwse-resize";
  } else if (Util_1$4.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {
    return "ns-resize";
  } else if (Util_1$4.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {
    return "nesw-resize";
  } else if (Util_1$4.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {
    return "ew-resize";
  } else if (Util_1$4.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {
    return "nwse-resize";
  } else {
    Util_1$4.Util.error("Transformer has unknown angle for cursor detection: " + angle);
    return "pointer";
  }
}
var ANCHORS_NAMES = [
  "top-left",
  "top-center",
  "top-right",
  "middle-right",
  "middle-left",
  "bottom-left",
  "bottom-center",
  "bottom-right"
];
var MAX_SAFE_INTEGER = 1e8;
function getCenter(shape) {
  return {
    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),
    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)
  };
}
function rotateAroundPoint(shape, angleRad, point) {
  var x2 = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);
  var y2 = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);
  return __assign(__assign({}, shape), {
    rotation: shape.rotation + angleRad,
    x: x2,
    y: y2
  });
}
function rotateAroundCenter(shape, deltaRad) {
  var center2 = getCenter(shape);
  return rotateAroundPoint(shape, deltaRad, center2);
}
function getSnap(snaps, newRotationRad, tol) {
  var snapped = newRotationRad;
  for (var i2 = 0; i2 < snaps.length; i2++) {
    var angle = Global_1$1.Konva.getAngle(snaps[i2]);
    var absDiff3 = Math.abs(angle - newRotationRad) % (Math.PI * 2);
    var dif = Math.min(absDiff3, Math.PI * 2 - absDiff3);
    if (dif < tol) {
      snapped = angle;
    }
  }
  return snapped;
}
var Transformer = function(_super) {
  __extends$1(Transformer2, _super);
  function Transformer2(config) {
    var _this = _super.call(this, config) || this;
    _this._transforming = false;
    _this._createElements();
    _this._handleMouseMove = _this._handleMouseMove.bind(_this);
    _this._handleMouseUp = _this._handleMouseUp.bind(_this);
    _this.update = _this.update.bind(_this);
    _this.on(ATTR_CHANGE_LIST, _this.update);
    if (_this.getNode()) {
      _this.update();
    }
    return _this;
  }
  Transformer2.prototype.attachTo = function(node) {
    this.setNode(node);
    return this;
  };
  Transformer2.prototype.setNode = function(node) {
    Util_1$4.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.");
    return this.setNodes([node]);
  };
  Transformer2.prototype.getNode = function() {
    return this._nodes && this._nodes[0];
  };
  Transformer2.prototype.setNodes = function(nodes3) {
    var _this = this;
    if (nodes3 === void 0) {
      nodes3 = [];
    }
    if (this._nodes && this._nodes.length) {
      this.detach();
    }
    this._nodes = nodes3;
    if (nodes3.length === 1) {
      this.rotation(nodes3[0].getAbsoluteRotation());
    } else {
      this.rotation(0);
    }
    this._nodes.forEach(function(node) {
      var additionalEvents = node._attrsAffectingSize.map(function(prop) {
        return prop + "Change." + EVENTS_NAME;
      }).join(" ");
      var onChange = function() {
        if (_this.nodes().length === 1) {
          _this.rotation(_this.nodes()[0].getAbsoluteRotation());
        }
        _this._resetTransformCache();
        if (!_this._transforming && !_this.isDragging()) {
          _this.update();
        }
      };
      node.on(additionalEvents, onChange);
      node.on(TRANSFORM_CHANGE_STR, onChange);
      node.on("_clearTransformCache." + EVENTS_NAME, onChange);
      node.on("xChange." + EVENTS_NAME + " yChange." + EVENTS_NAME, onChange);
      _this._proxyDrag(node);
    });
    this._resetTransformCache();
    var elementsCreated = !!this.findOne(".top-left");
    if (elementsCreated) {
      this.update();
    }
    return this;
  };
  Transformer2.prototype._proxyDrag = function(node) {
    var _this = this;
    var lastPos;
    node.on("dragstart." + EVENTS_NAME, function(e2) {
      lastPos = node.getAbsolutePosition();
      if (!_this.isDragging() && node !== _this.findOne(".back")) {
        _this.startDrag(e2, false);
      }
    });
    node.on("dragmove." + EVENTS_NAME, function(e2) {
      if (!lastPos) {
        return;
      }
      var abs = node.getAbsolutePosition();
      var dx = abs.x - lastPos.x;
      var dy = abs.y - lastPos.y;
      _this.nodes().forEach(function(otherNode) {
        if (otherNode === node) {
          return;
        }
        if (otherNode.isDragging()) {
          return;
        }
        var otherAbs = otherNode.getAbsolutePosition();
        otherNode.setAbsolutePosition({
          x: otherAbs.x + dx,
          y: otherAbs.y + dy
        });
        otherNode.startDrag(e2);
      });
      lastPos = null;
    });
  };
  Transformer2.prototype.getNodes = function() {
    return this._nodes || [];
  };
  Transformer2.prototype.getActiveAnchor = function() {
    return this._movingAnchorName;
  };
  Transformer2.prototype.detach = function() {
    if (this._nodes) {
      this._nodes.forEach(function(node) {
        node.off("." + EVENTS_NAME);
      });
    }
    this._nodes = [];
    this._resetTransformCache();
  };
  Transformer2.prototype._resetTransformCache = function() {
    this._clearCache(NODES_RECT);
    this._clearCache("transform");
    this._clearSelfAndDescendantCache("absoluteTransform");
  };
  Transformer2.prototype._getNodeRect = function() {
    return this._getCache(NODES_RECT, this.__getNodeRect);
  };
  Transformer2.prototype.__getNodeShape = function(node, rot, relative) {
    if (rot === void 0) {
      rot = this.rotation();
    }
    var rect = node.getClientRect({
      skipTransform: true,
      skipShadow: true,
      skipStroke: this.ignoreStroke()
    });
    var absScale = node.getAbsoluteScale(relative);
    var absPos = node.getAbsolutePosition(relative);
    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;
    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;
    var rotation = (Global_1$1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);
    var box = {
      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),
      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),
      width: rect.width * absScale.x,
      height: rect.height * absScale.y,
      rotation
    };
    return rotateAroundPoint(box, -Global_1$1.Konva.getAngle(rot), {
      x: 0,
      y: 0
    });
  };
  Transformer2.prototype.__getNodeRect = function() {
    var _this = this;
    var node = this.getNode();
    if (!node) {
      return {
        x: -MAX_SAFE_INTEGER,
        y: -MAX_SAFE_INTEGER,
        width: 0,
        height: 0,
        rotation: 0
      };
    }
    var totalPoints = [];
    this.nodes().map(function(node2) {
      var box = node2.getClientRect({
        skipTransform: true,
        skipShadow: true,
        skipStroke: _this.ignoreStroke()
      });
      var points = [
        { x: box.x, y: box.y },
        { x: box.x + box.width, y: box.y },
        { x: box.x + box.width, y: box.y + box.height },
        { x: box.x, y: box.y + box.height }
      ];
      var trans = node2.getAbsoluteTransform();
      points.forEach(function(point) {
        var transformed = trans.point(point);
        totalPoints.push(transformed);
      });
    });
    var tr = new Util_1$4.Transform();
    tr.rotate(-Global_1$1.Konva.getAngle(this.rotation()));
    var minX, minY, maxX, maxY;
    totalPoints.forEach(function(point) {
      var transformed = tr.point(point);
      if (minX === void 0) {
        minX = maxX = transformed.x;
        minY = maxY = transformed.y;
      }
      minX = Math.min(minX, transformed.x);
      minY = Math.min(minY, transformed.y);
      maxX = Math.max(maxX, transformed.x);
      maxY = Math.max(maxY, transformed.y);
    });
    tr.invert();
    var p2 = tr.point({ x: minX, y: minY });
    return {
      x: p2.x,
      y: p2.y,
      width: maxX - minX,
      height: maxY - minY,
      rotation: Global_1$1.Konva.getAngle(this.rotation())
    };
  };
  Transformer2.prototype.getX = function() {
    return this._getNodeRect().x;
  };
  Transformer2.prototype.getY = function() {
    return this._getNodeRect().y;
  };
  Transformer2.prototype.getWidth = function() {
    return this._getNodeRect().width;
  };
  Transformer2.prototype.getHeight = function() {
    return this._getNodeRect().height;
  };
  Transformer2.prototype._createElements = function() {
    this._createBack();
    ANCHORS_NAMES.forEach((function(name2) {
      this._createAnchor(name2);
    }).bind(this));
    this._createAnchor("rotater");
  };
  Transformer2.prototype._createAnchor = function(name2) {
    var _this = this;
    var anchor = new Rect_1$1.Rect({
      stroke: "rgb(0, 161, 255)",
      fill: "white",
      strokeWidth: 1,
      name: name2 + " _anchor",
      dragDistance: 0,
      draggable: true,
      hitStrokeWidth: TOUCH_DEVICE ? 10 : "auto"
    });
    var self2 = this;
    anchor.on("mousedown touchstart", function(e2) {
      self2._handleMouseDown(e2);
    });
    anchor.on("dragstart", function(e2) {
      anchor.stopDrag();
      e2.cancelBubble = true;
    });
    anchor.on("dragend", function(e2) {
      e2.cancelBubble = true;
    });
    anchor.on("mouseenter", function() {
      var rad = Global_1$1.Konva.getAngle(_this.rotation());
      var cursor = getCursor(name2, rad);
      anchor.getStage().content.style.cursor = cursor;
      _this._cursorChange = true;
    });
    anchor.on("mouseout", function() {
      anchor.getStage().content.style.cursor = "";
      _this._cursorChange = false;
    });
    this.add(anchor);
  };
  Transformer2.prototype._createBack = function() {
    var _this = this;
    var back = new Shape_1$1.Shape({
      name: "back",
      width: 0,
      height: 0,
      draggable: true,
      sceneFunc: function(ctx) {
        var tr = this.getParent();
        var padding = tr.padding();
        ctx.beginPath();
        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);
        ctx.moveTo(this.width() / 2, -padding);
        if (tr.rotateEnabled()) {
          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util_1$4.Util._sign(this.height()) - padding);
        }
        ctx.fillStrokeShape(this);
      },
      hitFunc: function(ctx, shape) {
        if (!_this.shouldOverdrawWholeArea()) {
          return;
        }
        var padding = _this.padding();
        ctx.beginPath();
        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
        ctx.fillStrokeShape(shape);
      }
    });
    this.add(back);
    this._proxyDrag(back);
    back.on("dragstart", function(e2) {
      e2.cancelBubble = true;
    });
    back.on("dragmove", function(e2) {
      e2.cancelBubble = true;
    });
    back.on("dragend", function(e2) {
      e2.cancelBubble = true;
    });
  };
  Transformer2.prototype._handleMouseDown = function(e2) {
    this._movingAnchorName = e2.target.name().split(" ")[0];
    var attrs = this._getNodeRect();
    var width2 = attrs.width;
    var height2 = attrs.height;
    var hypotenuse = Math.sqrt(Math.pow(width2, 2) + Math.pow(height2, 2));
    this.sin = Math.abs(height2 / hypotenuse);
    this.cos = Math.abs(width2 / hypotenuse);
    window.addEventListener("mousemove", this._handleMouseMove);
    window.addEventListener("touchmove", this._handleMouseMove);
    window.addEventListener("mouseup", this._handleMouseUp, true);
    window.addEventListener("touchend", this._handleMouseUp, true);
    this._transforming = true;
    var ap = e2.target.getAbsolutePosition();
    var pos = e2.target.getStage().getPointerPosition();
    this._anchorDragOffset = {
      x: pos.x - ap.x,
      y: pos.y - ap.y
    };
    this._fire("transformstart", { evt: e2, target: this.getNode() });
    this._nodes.forEach(function(target) {
      target._fire("transformstart", { evt: e2, target });
    });
  };
  Transformer2.prototype._handleMouseMove = function(e2) {
    var x2, y2, newHypotenuse;
    var anchorNode = this.findOne("." + this._movingAnchorName);
    var stage = anchorNode.getStage();
    stage.setPointersPositions(e2);
    var pp = stage.getPointerPosition();
    var newNodePos = {
      x: pp.x - this._anchorDragOffset.x,
      y: pp.y - this._anchorDragOffset.y
    };
    var oldAbs = anchorNode.getAbsolutePosition();
    anchorNode.setAbsolutePosition(newNodePos);
    var newAbs = anchorNode.getAbsolutePosition();
    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {
      return;
    }
    if (this._movingAnchorName === "rotater") {
      var attrs = this._getNodeRect();
      x2 = anchorNode.x() - attrs.width / 2;
      y2 = -anchorNode.y() + attrs.height / 2;
      var delta = Math.atan2(-y2, x2) + Math.PI / 2;
      if (attrs.height < 0) {
        delta -= Math.PI;
      }
      var oldRotation = Global_1$1.Konva.getAngle(this.rotation());
      var newRotation = oldRotation + delta;
      var tol = Global_1$1.Konva.getAngle(this.rotationSnapTolerance());
      var snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);
      var diff2 = snappedRot - attrs.rotation;
      var shape = rotateAroundCenter(attrs, diff2);
      this._fitNodesInto(shape, e2);
      return;
    }
    var keepProportion = this.keepRatio() || e2.shiftKey;
    var centeredScaling = this.centeredScaling() || e2.altKey;
    if (this._movingAnchorName === "top-left") {
      if (keepProportion) {
        var comparePoint = centeredScaling ? {
          x: this.width() / 2,
          y: this.height() / 2
        } : {
          x: this.findOne(".bottom-right").x(),
          y: this.findOne(".bottom-right").y()
        };
        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));
        var reverseX = this.findOne(".top-left").x() > comparePoint.x ? -1 : 1;
        var reverseY = this.findOne(".top-left").y() > comparePoint.y ? -1 : 1;
        x2 = newHypotenuse * this.cos * reverseX;
        y2 = newHypotenuse * this.sin * reverseY;
        this.findOne(".top-left").x(comparePoint.x - x2);
        this.findOne(".top-left").y(comparePoint.y - y2);
      }
    } else if (this._movingAnchorName === "top-center") {
      this.findOne(".top-left").y(anchorNode.y());
    } else if (this._movingAnchorName === "top-right") {
      if (keepProportion) {
        var comparePoint = centeredScaling ? {
          x: this.width() / 2,
          y: this.height() / 2
        } : {
          x: this.findOne(".bottom-left").x(),
          y: this.findOne(".bottom-left").y()
        };
        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));
        var reverseX = this.findOne(".top-right").x() < comparePoint.x ? -1 : 1;
        var reverseY = this.findOne(".top-right").y() > comparePoint.y ? -1 : 1;
        x2 = newHypotenuse * this.cos * reverseX;
        y2 = newHypotenuse * this.sin * reverseY;
        this.findOne(".top-right").x(comparePoint.x + x2);
        this.findOne(".top-right").y(comparePoint.y - y2);
      }
      var pos = anchorNode.position();
      this.findOne(".top-left").y(pos.y);
      this.findOne(".bottom-right").x(pos.x);
    } else if (this._movingAnchorName === "middle-left") {
      this.findOne(".top-left").x(anchorNode.x());
    } else if (this._movingAnchorName === "middle-right") {
      this.findOne(".bottom-right").x(anchorNode.x());
    } else if (this._movingAnchorName === "bottom-left") {
      if (keepProportion) {
        var comparePoint = centeredScaling ? {
          x: this.width() / 2,
          y: this.height() / 2
        } : {
          x: this.findOne(".top-right").x(),
          y: this.findOne(".top-right").y()
        };
        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));
        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;
        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;
        x2 = newHypotenuse * this.cos * reverseX;
        y2 = newHypotenuse * this.sin * reverseY;
        anchorNode.x(comparePoint.x - x2);
        anchorNode.y(comparePoint.y + y2);
      }
      pos = anchorNode.position();
      this.findOne(".top-left").x(pos.x);
      this.findOne(".bottom-right").y(pos.y);
    } else if (this._movingAnchorName === "bottom-center") {
      this.findOne(".bottom-right").y(anchorNode.y());
    } else if (this._movingAnchorName === "bottom-right") {
      if (keepProportion) {
        var comparePoint = centeredScaling ? {
          x: this.width() / 2,
          y: this.height() / 2
        } : {
          x: this.findOne(".top-left").x(),
          y: this.findOne(".top-left").y()
        };
        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));
        var reverseX = this.findOne(".bottom-right").x() < comparePoint.x ? -1 : 1;
        var reverseY = this.findOne(".bottom-right").y() < comparePoint.y ? -1 : 1;
        x2 = newHypotenuse * this.cos * reverseX;
        y2 = newHypotenuse * this.sin * reverseY;
        this.findOne(".bottom-right").x(comparePoint.x + x2);
        this.findOne(".bottom-right").y(comparePoint.y + y2);
      }
    } else {
      console.error(new Error("Wrong position argument of selection resizer: " + this._movingAnchorName));
    }
    var centeredScaling = this.centeredScaling() || e2.altKey;
    if (centeredScaling) {
      var topLeft = this.findOne(".top-left");
      var bottomRight = this.findOne(".bottom-right");
      var topOffsetX = topLeft.x();
      var topOffsetY = topLeft.y();
      var bottomOffsetX = this.getWidth() - bottomRight.x();
      var bottomOffsetY = this.getHeight() - bottomRight.y();
      bottomRight.move({
        x: -topOffsetX,
        y: -topOffsetY
      });
      topLeft.move({
        x: bottomOffsetX,
        y: bottomOffsetY
      });
    }
    var absPos = this.findOne(".top-left").getAbsolutePosition();
    x2 = absPos.x;
    y2 = absPos.y;
    var width2 = this.findOne(".bottom-right").x() - this.findOne(".top-left").x();
    var height2 = this.findOne(".bottom-right").y() - this.findOne(".top-left").y();
    this._fitNodesInto({
      x: x2,
      y: y2,
      width: width2,
      height: height2,
      rotation: Global_1$1.Konva.getAngle(this.rotation())
    }, e2);
  };
  Transformer2.prototype._handleMouseUp = function(e2) {
    this._removeEvents(e2);
  };
  Transformer2.prototype.getAbsoluteTransform = function() {
    return this.getTransform();
  };
  Transformer2.prototype._removeEvents = function(e2) {
    if (this._transforming) {
      this._transforming = false;
      window.removeEventListener("mousemove", this._handleMouseMove);
      window.removeEventListener("touchmove", this._handleMouseMove);
      window.removeEventListener("mouseup", this._handleMouseUp, true);
      window.removeEventListener("touchend", this._handleMouseUp, true);
      var node = this.getNode();
      this._fire("transformend", { evt: e2, target: node });
      if (node) {
        this._nodes.forEach(function(target) {
          target._fire("transformend", { evt: e2, target });
        });
      }
      this._movingAnchorName = null;
    }
  };
  Transformer2.prototype._fitNodesInto = function(newAttrs, evt) {
    var _this = this;
    var oldAttrs = this._getNodeRect();
    var minSize = 1;
    if (Util_1$4.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {
      this.update();
      return;
    }
    if (Util_1$4.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {
      this.update();
      return;
    }
    var t3 = new Util_1$4.Transform();
    t3.rotate(Global_1$1.Konva.getAngle(this.rotation()));
    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf("left") >= 0) {
      var offset = t3.point({
        x: -this.padding() * 2,
        y: 0
      });
      newAttrs.x += offset.x;
      newAttrs.y += offset.y;
      newAttrs.width += this.padding() * 2;
      this._movingAnchorName = this._movingAnchorName.replace("left", "right");
      this._anchorDragOffset.x -= offset.x;
      this._anchorDragOffset.y -= offset.y;
    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf("right") >= 0) {
      var offset = t3.point({
        x: this.padding() * 2,
        y: 0
      });
      this._movingAnchorName = this._movingAnchorName.replace("right", "left");
      this._anchorDragOffset.x -= offset.x;
      this._anchorDragOffset.y -= offset.y;
      newAttrs.width += this.padding() * 2;
    }
    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf("top") >= 0) {
      var offset = t3.point({
        x: 0,
        y: -this.padding() * 2
      });
      newAttrs.x += offset.x;
      newAttrs.y += offset.y;
      this._movingAnchorName = this._movingAnchorName.replace("top", "bottom");
      this._anchorDragOffset.x -= offset.x;
      this._anchorDragOffset.y -= offset.y;
      newAttrs.height += this.padding() * 2;
    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf("bottom") >= 0) {
      var offset = t3.point({
        x: 0,
        y: this.padding() * 2
      });
      this._movingAnchorName = this._movingAnchorName.replace("bottom", "top");
      this._anchorDragOffset.x -= offset.x;
      this._anchorDragOffset.y -= offset.y;
      newAttrs.height += this.padding() * 2;
    }
    if (this.boundBoxFunc()) {
      var bounded = this.boundBoxFunc()(oldAttrs, newAttrs);
      if (bounded) {
        newAttrs = bounded;
      } else {
        Util_1$4.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!");
      }
    }
    var baseSize = 1e7;
    var oldTr = new Util_1$4.Transform();
    oldTr.translate(oldAttrs.x, oldAttrs.y);
    oldTr.rotate(oldAttrs.rotation);
    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);
    var newTr = new Util_1$4.Transform();
    newTr.translate(newAttrs.x, newAttrs.y);
    newTr.rotate(newAttrs.rotation);
    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);
    var delta = newTr.multiply(oldTr.invert());
    this._nodes.forEach(function(node) {
      var _a2;
      var parentTransform = node.getParent().getAbsoluteTransform();
      var localTransform = node.getTransform().copy();
      localTransform.translate(node.offsetX(), node.offsetY());
      var newLocalTransform = new Util_1$4.Transform();
      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);
      var attrs = newLocalTransform.decompose();
      node.setAttrs(attrs);
      _this._fire("transform", { evt, target: node });
      node._fire("transform", { evt, target: node });
      (_a2 = node.getLayer()) === null || _a2 === void 0 ? void 0 : _a2.batchDraw();
    });
    this.rotation(Util_1$4.Util._getRotation(newAttrs.rotation));
    this._resetTransformCache();
    this.update();
    this.getLayer().batchDraw();
  };
  Transformer2.prototype.forceUpdate = function() {
    this._resetTransformCache();
    this.update();
  };
  Transformer2.prototype._batchChangeChild = function(selector, attrs) {
    var anchor = this.findOne(selector);
    anchor.setAttrs(attrs);
  };
  Transformer2.prototype.update = function() {
    var _this = this;
    var _a2;
    var attrs = this._getNodeRect();
    this.rotation(Util_1$4.Util._getRotation(attrs.rotation));
    var width2 = attrs.width;
    var height2 = attrs.height;
    var enabledAnchors = this.enabledAnchors();
    var resizeEnabled = this.resizeEnabled();
    var padding = this.padding();
    var anchorSize = this.anchorSize();
    this.find("._anchor").each(function(node) {
      node.setAttrs({
        width: anchorSize,
        height: anchorSize,
        offsetX: anchorSize / 2,
        offsetY: anchorSize / 2,
        stroke: _this.anchorStroke(),
        strokeWidth: _this.anchorStrokeWidth(),
        fill: _this.anchorFill(),
        cornerRadius: _this.anchorCornerRadius()
      });
    });
    this._batchChangeChild(".top-left", {
      x: 0,
      y: 0,
      offsetX: anchorSize / 2 + padding,
      offsetY: anchorSize / 2 + padding,
      visible: resizeEnabled && enabledAnchors.indexOf("top-left") >= 0
    });
    this._batchChangeChild(".top-center", {
      x: width2 / 2,
      y: 0,
      offsetY: anchorSize / 2 + padding,
      visible: resizeEnabled && enabledAnchors.indexOf("top-center") >= 0
    });
    this._batchChangeChild(".top-right", {
      x: width2,
      y: 0,
      offsetX: anchorSize / 2 - padding,
      offsetY: anchorSize / 2 + padding,
      visible: resizeEnabled && enabledAnchors.indexOf("top-right") >= 0
    });
    this._batchChangeChild(".middle-left", {
      x: 0,
      y: height2 / 2,
      offsetX: anchorSize / 2 + padding,
      visible: resizeEnabled && enabledAnchors.indexOf("middle-left") >= 0
    });
    this._batchChangeChild(".middle-right", {
      x: width2,
      y: height2 / 2,
      offsetX: anchorSize / 2 - padding,
      visible: resizeEnabled && enabledAnchors.indexOf("middle-right") >= 0
    });
    this._batchChangeChild(".bottom-left", {
      x: 0,
      y: height2,
      offsetX: anchorSize / 2 + padding,
      offsetY: anchorSize / 2 - padding,
      visible: resizeEnabled && enabledAnchors.indexOf("bottom-left") >= 0
    });
    this._batchChangeChild(".bottom-center", {
      x: width2 / 2,
      y: height2,
      offsetY: anchorSize / 2 - padding,
      visible: resizeEnabled && enabledAnchors.indexOf("bottom-center") >= 0
    });
    this._batchChangeChild(".bottom-right", {
      x: width2,
      y: height2,
      offsetX: anchorSize / 2 - padding,
      offsetY: anchorSize / 2 - padding,
      visible: resizeEnabled && enabledAnchors.indexOf("bottom-right") >= 0
    });
    this._batchChangeChild(".rotater", {
      x: width2 / 2,
      y: -this.rotateAnchorOffset() * Util_1$4.Util._sign(height2) - padding,
      visible: this.rotateEnabled()
    });
    this._batchChangeChild(".back", {
      width: width2,
      height: height2,
      visible: this.borderEnabled(),
      stroke: this.borderStroke(),
      strokeWidth: this.borderStrokeWidth(),
      dash: this.borderDash(),
      x: 0,
      y: 0
    });
    (_a2 = this.getLayer()) === null || _a2 === void 0 ? void 0 : _a2.batchDraw();
  };
  Transformer2.prototype.isTransforming = function() {
    return this._transforming;
  };
  Transformer2.prototype.stopTransform = function() {
    if (this._transforming) {
      this._removeEvents();
      var anchorNode = this.findOne("." + this._movingAnchorName);
      if (anchorNode) {
        anchorNode.stopDrag();
      }
    }
  };
  Transformer2.prototype.destroy = function() {
    if (this.getStage() && this._cursorChange) {
      this.getStage().content.style.cursor = "";
    }
    Group_1.Group.prototype.destroy.call(this);
    this.detach();
    this._removeEvents();
    return this;
  };
  Transformer2.prototype.toObject = function() {
    return Node_1$f.Node.prototype.toObject.call(this);
  };
  return Transformer2;
}(Group_1.Group);
Transformer$1.Transformer = Transformer;
function validateAnchors(val) {
  if (!(val instanceof Array)) {
    Util_1$4.Util.warn("enabledAnchors value should be an array");
  }
  if (val instanceof Array) {
    val.forEach(function(name2) {
      if (ANCHORS_NAMES.indexOf(name2) === -1) {
        Util_1$4.Util.warn("Unknown anchor name: " + name2 + ". Available names are: " + ANCHORS_NAMES.join(", "));
      }
    });
  }
  return val || [];
}
Transformer.prototype.className = "Transformer";
Global_2$1._registerNode(Transformer);
Factory_1$g.Factory.addGetterSetter(Transformer, "enabledAnchors", ANCHORS_NAMES, validateAnchors);
Factory_1$g.Factory.addGetterSetter(Transformer, "resizeEnabled", true);
Factory_1$g.Factory.addGetterSetter(Transformer, "anchorSize", 10, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "rotateEnabled", true);
Factory_1$g.Factory.addGetterSetter(Transformer, "rotationSnaps", []);
Factory_1$g.Factory.addGetterSetter(Transformer, "rotateAnchorOffset", 50, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "rotationSnapTolerance", 5, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "borderEnabled", true);
Factory_1$g.Factory.addGetterSetter(Transformer, "anchorStroke", "rgb(0, 161, 255)");
Factory_1$g.Factory.addGetterSetter(Transformer, "anchorStrokeWidth", 1, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "anchorFill", "white");
Factory_1$g.Factory.addGetterSetter(Transformer, "anchorCornerRadius", 0, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "borderStroke", "rgb(0, 161, 255)");
Factory_1$g.Factory.addGetterSetter(Transformer, "borderStrokeWidth", 1, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "borderDash");
Factory_1$g.Factory.addGetterSetter(Transformer, "keepRatio", true);
Factory_1$g.Factory.addGetterSetter(Transformer, "centeredScaling", false);
Factory_1$g.Factory.addGetterSetter(Transformer, "ignoreStroke", false);
Factory_1$g.Factory.addGetterSetter(Transformer, "padding", 0, Validators_1$g.getNumberValidator());
Factory_1$g.Factory.addGetterSetter(Transformer, "node");
Factory_1$g.Factory.addGetterSetter(Transformer, "nodes");
Factory_1$g.Factory.addGetterSetter(Transformer, "boundBoxFunc");
Factory_1$g.Factory.addGetterSetter(Transformer, "shouldOverdrawWholeArea", false);
Factory_1$g.Factory.backCompat(Transformer, {
  lineEnabled: "borderEnabled",
  rotateHandlerOffset: "rotateAnchorOffset",
  enabledHandlers: "enabledAnchors"
});
Util_1$4.Collection.mapMethods(Transformer);
var Wedge$1 = {};
var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
Object.defineProperty(Wedge$1, "__esModule", { value: true });
Wedge$1.Wedge = void 0;
var Util_1$3 = Util;
var Factory_1$f = Factory;
var Shape_1 = Shape;
var Global_1 = Global;
var Validators_1$f = Validators;
var Global_2 = Global;
var Wedge = function(_super) {
  __extends(Wedge2, _super);
  function Wedge2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Wedge2.prototype._sceneFunc = function(context) {
    context.beginPath();
    context.arc(0, 0, this.radius(), 0, Global_1.Konva.getAngle(this.angle()), this.clockwise());
    context.lineTo(0, 0);
    context.closePath();
    context.fillStrokeShape(this);
  };
  Wedge2.prototype.getWidth = function() {
    return this.radius() * 2;
  };
  Wedge2.prototype.getHeight = function() {
    return this.radius() * 2;
  };
  Wedge2.prototype.setWidth = function(width2) {
    this.radius(width2 / 2);
  };
  Wedge2.prototype.setHeight = function(height2) {
    this.radius(height2 / 2);
  };
  return Wedge2;
}(Shape_1.Shape);
Wedge$1.Wedge = Wedge;
Wedge.prototype.className = "Wedge";
Wedge.prototype._centroid = true;
Wedge.prototype._attrsAffectingSize = ["radius"];
Global_2._registerNode(Wedge);
Factory_1$f.Factory.addGetterSetter(Wedge, "radius", 0, Validators_1$f.getNumberValidator());
Factory_1$f.Factory.addGetterSetter(Wedge, "angle", 0, Validators_1$f.getNumberValidator());
Factory_1$f.Factory.addGetterSetter(Wedge, "clockwise", false);
Factory_1$f.Factory.backCompat(Wedge, {
  angleDeg: "angle",
  getAngleDeg: "getAngle",
  setAngleDeg: "setAngle"
});
Util_1$3.Collection.mapMethods(Wedge);
var Blur$1 = {};
Object.defineProperty(Blur$1, "__esModule", { value: true });
Blur$1.Blur = void 0;
var Factory_1$e = Factory;
var Node_1$e = Node;
var Validators_1$e = Validators;
function BlurStack() {
  this.r = 0;
  this.g = 0;
  this.b = 0;
  this.a = 0;
  this.next = null;
}
var mul_table = [
  512,
  512,
  456,
  512,
  328,
  456,
  335,
  512,
  405,
  328,
  271,
  456,
  388,
  335,
  292,
  512,
  454,
  405,
  364,
  328,
  298,
  271,
  496,
  456,
  420,
  388,
  360,
  335,
  312,
  292,
  273,
  512,
  482,
  454,
  428,
  405,
  383,
  364,
  345,
  328,
  312,
  298,
  284,
  271,
  259,
  496,
  475,
  456,
  437,
  420,
  404,
  388,
  374,
  360,
  347,
  335,
  323,
  312,
  302,
  292,
  282,
  273,
  265,
  512,
  497,
  482,
  468,
  454,
  441,
  428,
  417,
  405,
  394,
  383,
  373,
  364,
  354,
  345,
  337,
  328,
  320,
  312,
  305,
  298,
  291,
  284,
  278,
  271,
  265,
  259,
  507,
  496,
  485,
  475,
  465,
  456,
  446,
  437,
  428,
  420,
  412,
  404,
  396,
  388,
  381,
  374,
  367,
  360,
  354,
  347,
  341,
  335,
  329,
  323,
  318,
  312,
  307,
  302,
  297,
  292,
  287,
  282,
  278,
  273,
  269,
  265,
  261,
  512,
  505,
  497,
  489,
  482,
  475,
  468,
  461,
  454,
  447,
  441,
  435,
  428,
  422,
  417,
  411,
  405,
  399,
  394,
  389,
  383,
  378,
  373,
  368,
  364,
  359,
  354,
  350,
  345,
  341,
  337,
  332,
  328,
  324,
  320,
  316,
  312,
  309,
  305,
  301,
  298,
  294,
  291,
  287,
  284,
  281,
  278,
  274,
  271,
  268,
  265,
  262,
  259,
  257,
  507,
  501,
  496,
  491,
  485,
  480,
  475,
  470,
  465,
  460,
  456,
  451,
  446,
  442,
  437,
  433,
  428,
  424,
  420,
  416,
  412,
  408,
  404,
  400,
  396,
  392,
  388,
  385,
  381,
  377,
  374,
  370,
  367,
  363,
  360,
  357,
  354,
  350,
  347,
  344,
  341,
  338,
  335,
  332,
  329,
  326,
  323,
  320,
  318,
  315,
  312,
  310,
  307,
  304,
  302,
  299,
  297,
  294,
  292,
  289,
  287,
  285,
  282,
  280,
  278,
  275,
  273,
  271,
  269,
  267,
  265,
  263,
  261,
  259
];
var shg_table = [
  9,
  11,
  12,
  13,
  13,
  14,
  14,
  15,
  15,
  15,
  15,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  21,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  22,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  23,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24
];
function filterGaussBlurRGBA(imageData, radius) {
  var pixels = imageData.data, width2 = imageData.width, height2 = imageData.height;
  var x2, y2, i2, p2, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
  var div = radius + radius + 1, widthMinus1 = width2 - 1, heightMinus1 = height2 - 1, radiusPlus1 = radius + 1, sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];
  for (i2 = 1; i2 < div; i2++) {
    stack = stack.next = new BlurStack();
    if (i2 === radiusPlus1) {
      stackEnd = stack;
    }
  }
  stack.next = stackStart;
  yw = yi = 0;
  for (y2 = 0; y2 < height2; y2++) {
    r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
    r_out_sum = radiusPlus1 * (pr = pixels[yi]);
    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
    r_sum += sumFactor * pr;
    g_sum += sumFactor * pg;
    b_sum += sumFactor * pb;
    a_sum += sumFactor * pa;
    stack = stackStart;
    for (i2 = 0; i2 < radiusPlus1; i2++) {
      stack.r = pr;
      stack.g = pg;
      stack.b = pb;
      stack.a = pa;
      stack = stack.next;
    }
    for (i2 = 1; i2 < radiusPlus1; i2++) {
      p2 = yi + ((widthMinus1 < i2 ? widthMinus1 : i2) << 2);
      r_sum += (stack.r = pr = pixels[p2]) * (rbs = radiusPlus1 - i2);
      g_sum += (stack.g = pg = pixels[p2 + 1]) * rbs;
      b_sum += (stack.b = pb = pixels[p2 + 2]) * rbs;
      a_sum += (stack.a = pa = pixels[p2 + 3]) * rbs;
      r_in_sum += pr;
      g_in_sum += pg;
      b_in_sum += pb;
      a_in_sum += pa;
      stack = stack.next;
    }
    stackIn = stackStart;
    stackOut = stackEnd;
    for (x2 = 0; x2 < width2; x2++) {
      pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;
      if (pa !== 0) {
        pa = 255 / pa;
        pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;
        pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;
        pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;
      } else {
        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
      }
      r_sum -= r_out_sum;
      g_sum -= g_out_sum;
      b_sum -= b_out_sum;
      a_sum -= a_out_sum;
      r_out_sum -= stackIn.r;
      g_out_sum -= stackIn.g;
      b_out_sum -= stackIn.b;
      a_out_sum -= stackIn.a;
      p2 = yw + ((p2 = x2 + radius + 1) < widthMinus1 ? p2 : widthMinus1) << 2;
      r_in_sum += stackIn.r = pixels[p2];
      g_in_sum += stackIn.g = pixels[p2 + 1];
      b_in_sum += stackIn.b = pixels[p2 + 2];
      a_in_sum += stackIn.a = pixels[p2 + 3];
      r_sum += r_in_sum;
      g_sum += g_in_sum;
      b_sum += b_in_sum;
      a_sum += a_in_sum;
      stackIn = stackIn.next;
      r_out_sum += pr = stackOut.r;
      g_out_sum += pg = stackOut.g;
      b_out_sum += pb = stackOut.b;
      a_out_sum += pa = stackOut.a;
      r_in_sum -= pr;
      g_in_sum -= pg;
      b_in_sum -= pb;
      a_in_sum -= pa;
      stackOut = stackOut.next;
      yi += 4;
    }
    yw += width2;
  }
  for (x2 = 0; x2 < width2; x2++) {
    g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
    yi = x2 << 2;
    r_out_sum = radiusPlus1 * (pr = pixels[yi]);
    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
    r_sum += sumFactor * pr;
    g_sum += sumFactor * pg;
    b_sum += sumFactor * pb;
    a_sum += sumFactor * pa;
    stack = stackStart;
    for (i2 = 0; i2 < radiusPlus1; i2++) {
      stack.r = pr;
      stack.g = pg;
      stack.b = pb;
      stack.a = pa;
      stack = stack.next;
    }
    yp = width2;
    for (i2 = 1; i2 <= radius; i2++) {
      yi = yp + x2 << 2;
      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i2);
      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
      a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
      r_in_sum += pr;
      g_in_sum += pg;
      b_in_sum += pb;
      a_in_sum += pa;
      stack = stack.next;
      if (i2 < heightMinus1) {
        yp += width2;
      }
    }
    yi = x2;
    stackIn = stackStart;
    stackOut = stackEnd;
    for (y2 = 0; y2 < height2; y2++) {
      p2 = yi << 2;
      pixels[p2 + 3] = pa = a_sum * mul_sum >> shg_sum;
      if (pa > 0) {
        pa = 255 / pa;
        pixels[p2] = (r_sum * mul_sum >> shg_sum) * pa;
        pixels[p2 + 1] = (g_sum * mul_sum >> shg_sum) * pa;
        pixels[p2 + 2] = (b_sum * mul_sum >> shg_sum) * pa;
      } else {
        pixels[p2] = pixels[p2 + 1] = pixels[p2 + 2] = 0;
      }
      r_sum -= r_out_sum;
      g_sum -= g_out_sum;
      b_sum -= b_out_sum;
      a_sum -= a_out_sum;
      r_out_sum -= stackIn.r;
      g_out_sum -= stackIn.g;
      b_out_sum -= stackIn.b;
      a_out_sum -= stackIn.a;
      p2 = x2 + ((p2 = y2 + radiusPlus1) < heightMinus1 ? p2 : heightMinus1) * width2 << 2;
      r_sum += r_in_sum += stackIn.r = pixels[p2];
      g_sum += g_in_sum += stackIn.g = pixels[p2 + 1];
      b_sum += b_in_sum += stackIn.b = pixels[p2 + 2];
      a_sum += a_in_sum += stackIn.a = pixels[p2 + 3];
      stackIn = stackIn.next;
      r_out_sum += pr = stackOut.r;
      g_out_sum += pg = stackOut.g;
      b_out_sum += pb = stackOut.b;
      a_out_sum += pa = stackOut.a;
      r_in_sum -= pr;
      g_in_sum -= pg;
      b_in_sum -= pb;
      a_in_sum -= pa;
      stackOut = stackOut.next;
      yi += width2;
    }
  }
}
var Blur = function Blur2(imageData) {
  var radius = Math.round(this.blurRadius());
  if (radius > 0) {
    filterGaussBlurRGBA(imageData, radius);
  }
};
Blur$1.Blur = Blur;
Factory_1$e.Factory.addGetterSetter(Node_1$e.Node, "blurRadius", 0, Validators_1$e.getNumberValidator(), Factory_1$e.Factory.afterSetFilter);
var Brighten$1 = {};
Object.defineProperty(Brighten$1, "__esModule", { value: true });
Brighten$1.Brighten = void 0;
var Factory_1$d = Factory;
var Node_1$d = Node;
var Validators_1$d = Validators;
var Brighten = function(imageData) {
  var brightness = this.brightness() * 255, data4 = imageData.data, len = data4.length, i2;
  for (i2 = 0; i2 < len; i2 += 4) {
    data4[i2] += brightness;
    data4[i2 + 1] += brightness;
    data4[i2 + 2] += brightness;
  }
};
Brighten$1.Brighten = Brighten;
Factory_1$d.Factory.addGetterSetter(Node_1$d.Node, "brightness", 0, Validators_1$d.getNumberValidator(), Factory_1$d.Factory.afterSetFilter);
var Contrast$1 = {};
Object.defineProperty(Contrast$1, "__esModule", { value: true });
Contrast$1.Contrast = void 0;
var Factory_1$c = Factory;
var Node_1$c = Node;
var Validators_1$c = Validators;
var Contrast = function(imageData) {
  var adjust = Math.pow((this.contrast() + 100) / 100, 2);
  var data4 = imageData.data, nPixels = data4.length, red = 150, green = 150, blue = 150, i2;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    red = data4[i2];
    green = data4[i2 + 1];
    blue = data4[i2 + 2];
    red /= 255;
    red -= 0.5;
    red *= adjust;
    red += 0.5;
    red *= 255;
    green /= 255;
    green -= 0.5;
    green *= adjust;
    green += 0.5;
    green *= 255;
    blue /= 255;
    blue -= 0.5;
    blue *= adjust;
    blue += 0.5;
    blue *= 255;
    red = red < 0 ? 0 : red > 255 ? 255 : red;
    green = green < 0 ? 0 : green > 255 ? 255 : green;
    blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
    data4[i2] = red;
    data4[i2 + 1] = green;
    data4[i2 + 2] = blue;
  }
};
Contrast$1.Contrast = Contrast;
Factory_1$c.Factory.addGetterSetter(Node_1$c.Node, "contrast", 0, Validators_1$c.getNumberValidator(), Factory_1$c.Factory.afterSetFilter);
var Emboss$1 = {};
Object.defineProperty(Emboss$1, "__esModule", { value: true });
Emboss$1.Emboss = void 0;
var Factory_1$b = Factory;
var Node_1$b = Node;
var Util_1$2 = Util;
var Validators_1$b = Validators;
var Emboss = function(imageData) {
  var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data4 = imageData.data, w2 = imageData.width, h2 = imageData.height, w4 = w2 * 4, y2 = h2;
  switch (direction) {
    case "top-left":
      dirY = -1;
      dirX = -1;
      break;
    case "top":
      dirY = -1;
      dirX = 0;
      break;
    case "top-right":
      dirY = -1;
      dirX = 1;
      break;
    case "right":
      dirY = 0;
      dirX = 1;
      break;
    case "bottom-right":
      dirY = 1;
      dirX = 1;
      break;
    case "bottom":
      dirY = 1;
      dirX = 0;
      break;
    case "bottom-left":
      dirY = 1;
      dirX = -1;
      break;
    case "left":
      dirY = 0;
      dirX = -1;
      break;
    default:
      Util_1$2.Util.error("Unknown emboss direction: " + direction);
  }
  do {
    var offsetY = (y2 - 1) * w4;
    var otherY = dirY;
    if (y2 + otherY < 1) {
      otherY = 0;
    }
    if (y2 + otherY > h2) {
      otherY = 0;
    }
    var offsetYOther = (y2 - 1 + otherY) * w2 * 4;
    var x2 = w2;
    do {
      var offset = offsetY + (x2 - 1) * 4;
      var otherX = dirX;
      if (x2 + otherX < 1) {
        otherX = 0;
      }
      if (x2 + otherX > w2) {
        otherX = 0;
      }
      var offsetOther = offsetYOther + (x2 - 1 + otherX) * 4;
      var dR = data4[offset] - data4[offsetOther];
      var dG = data4[offset + 1] - data4[offsetOther + 1];
      var dB = data4[offset + 2] - data4[offsetOther + 2];
      var dif = dR;
      var absDif = dif > 0 ? dif : -dif;
      var absG = dG > 0 ? dG : -dG;
      var absB = dB > 0 ? dB : -dB;
      if (absG > absDif) {
        dif = dG;
      }
      if (absB > absDif) {
        dif = dB;
      }
      dif *= strength;
      if (blend) {
        var r2 = data4[offset] + dif;
        var g2 = data4[offset + 1] + dif;
        var b2 = data4[offset + 2] + dif;
        data4[offset] = r2 > 255 ? 255 : r2 < 0 ? 0 : r2;
        data4[offset + 1] = g2 > 255 ? 255 : g2 < 0 ? 0 : g2;
        data4[offset + 2] = b2 > 255 ? 255 : b2 < 0 ? 0 : b2;
      } else {
        var grey = greyLevel - dif;
        if (grey < 0) {
          grey = 0;
        } else if (grey > 255) {
          grey = 255;
        }
        data4[offset] = data4[offset + 1] = data4[offset + 2] = grey;
      }
    } while (--x2);
  } while (--y2);
};
Emboss$1.Emboss = Emboss;
Factory_1$b.Factory.addGetterSetter(Node_1$b.Node, "embossStrength", 0.5, Validators_1$b.getNumberValidator(), Factory_1$b.Factory.afterSetFilter);
Factory_1$b.Factory.addGetterSetter(Node_1$b.Node, "embossWhiteLevel", 0.5, Validators_1$b.getNumberValidator(), Factory_1$b.Factory.afterSetFilter);
Factory_1$b.Factory.addGetterSetter(Node_1$b.Node, "embossDirection", "top-left", null, Factory_1$b.Factory.afterSetFilter);
Factory_1$b.Factory.addGetterSetter(Node_1$b.Node, "embossBlend", false, null, Factory_1$b.Factory.afterSetFilter);
var Enhance$1 = {};
Object.defineProperty(Enhance$1, "__esModule", { value: true });
Enhance$1.Enhance = void 0;
var Factory_1$a = Factory;
var Node_1$a = Node;
var Validators_1$a = Validators;
function remap(fromValue, fromMin, fromMax, toMin, toMax) {
  var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;
  if (fromRange === 0) {
    return toMin + toRange / 2;
  }
  if (toRange === 0) {
    return toMin;
  }
  toValue = (fromValue - fromMin) / fromRange;
  toValue = toRange * toValue + toMin;
  return toValue;
}
var Enhance = function(imageData) {
  var data4 = imageData.data, nSubPixels = data4.length, rMin = data4[0], rMax = rMin, r2, gMin = data4[1], gMax = gMin, g2, bMin = data4[2], bMax = bMin, b2, i2;
  var enhanceAmount = this.enhance();
  if (enhanceAmount === 0) {
    return;
  }
  for (i2 = 0; i2 < nSubPixels; i2 += 4) {
    r2 = data4[i2 + 0];
    if (r2 < rMin) {
      rMin = r2;
    } else if (r2 > rMax) {
      rMax = r2;
    }
    g2 = data4[i2 + 1];
    if (g2 < gMin) {
      gMin = g2;
    } else if (g2 > gMax) {
      gMax = g2;
    }
    b2 = data4[i2 + 2];
    if (b2 < bMin) {
      bMin = b2;
    } else if (b2 > bMax) {
      bMax = b2;
    }
  }
  if (rMax === rMin) {
    rMax = 255;
    rMin = 0;
  }
  if (gMax === gMin) {
    gMax = 255;
    gMin = 0;
  }
  if (bMax === bMin) {
    bMax = 255;
    bMin = 0;
  }
  var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;
  if (enhanceAmount > 0) {
    rGoalMax = rMax + enhanceAmount * (255 - rMax);
    rGoalMin = rMin - enhanceAmount * (rMin - 0);
    gGoalMax = gMax + enhanceAmount * (255 - gMax);
    gGoalMin = gMin - enhanceAmount * (gMin - 0);
    bGoalMax = bMax + enhanceAmount * (255 - bMax);
    bGoalMin = bMin - enhanceAmount * (bMin - 0);
  } else {
    rMid = (rMax + rMin) * 0.5;
    rGoalMax = rMax + enhanceAmount * (rMax - rMid);
    rGoalMin = rMin + enhanceAmount * (rMin - rMid);
    gMid = (gMax + gMin) * 0.5;
    gGoalMax = gMax + enhanceAmount * (gMax - gMid);
    gGoalMin = gMin + enhanceAmount * (gMin - gMid);
    bMid = (bMax + bMin) * 0.5;
    bGoalMax = bMax + enhanceAmount * (bMax - bMid);
    bGoalMin = bMin + enhanceAmount * (bMin - bMid);
  }
  for (i2 = 0; i2 < nSubPixels; i2 += 4) {
    data4[i2 + 0] = remap(data4[i2 + 0], rMin, rMax, rGoalMin, rGoalMax);
    data4[i2 + 1] = remap(data4[i2 + 1], gMin, gMax, gGoalMin, gGoalMax);
    data4[i2 + 2] = remap(data4[i2 + 2], bMin, bMax, bGoalMin, bGoalMax);
  }
};
Enhance$1.Enhance = Enhance;
Factory_1$a.Factory.addGetterSetter(Node_1$a.Node, "enhance", 0, Validators_1$a.getNumberValidator(), Factory_1$a.Factory.afterSetFilter);
var Grayscale$1 = {};
Object.defineProperty(Grayscale$1, "__esModule", { value: true });
Grayscale$1.Grayscale = void 0;
var Grayscale = function(imageData) {
  var data4 = imageData.data, len = data4.length, i2, brightness;
  for (i2 = 0; i2 < len; i2 += 4) {
    brightness = 0.34 * data4[i2] + 0.5 * data4[i2 + 1] + 0.16 * data4[i2 + 2];
    data4[i2] = brightness;
    data4[i2 + 1] = brightness;
    data4[i2 + 2] = brightness;
  }
};
Grayscale$1.Grayscale = Grayscale;
var HSL$1 = {};
Object.defineProperty(HSL$1, "__esModule", { value: true });
HSL$1.HSL = void 0;
var Factory_1$9 = Factory;
var Node_1$9 = Node;
var Validators_1$9 = Validators;
Factory_1$9.Factory.addGetterSetter(Node_1$9.Node, "hue", 0, Validators_1$9.getNumberValidator(), Factory_1$9.Factory.afterSetFilter);
Factory_1$9.Factory.addGetterSetter(Node_1$9.Node, "saturation", 0, Validators_1$9.getNumberValidator(), Factory_1$9.Factory.afterSetFilter);
Factory_1$9.Factory.addGetterSetter(Node_1$9.Node, "luminance", 0, Validators_1$9.getNumberValidator(), Factory_1$9.Factory.afterSetFilter);
var HSL = function(imageData) {
  var data4 = imageData.data, nPixels = data4.length, v2 = 1, s2 = Math.pow(2, this.saturation()), h2 = Math.abs(this.hue() + 360) % 360, l2 = this.luminance() * 127, i2;
  var vsu = v2 * s2 * Math.cos(h2 * Math.PI / 180), vsw = v2 * s2 * Math.sin(h2 * Math.PI / 180);
  var rr = 0.299 * v2 + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v2 - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v2 - 0.114 * vsu - 0.497 * vsw;
  var gr = 0.299 * v2 - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v2 + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v2 - 0.114 * vsu + 0.293 * vsw;
  var br = 0.299 * v2 - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v2 - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v2 + 0.886 * vsu - 0.2 * vsw;
  var r2, g2, b2, a2;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    r2 = data4[i2 + 0];
    g2 = data4[i2 + 1];
    b2 = data4[i2 + 2];
    a2 = data4[i2 + 3];
    data4[i2 + 0] = rr * r2 + rg * g2 + rb * b2 + l2;
    data4[i2 + 1] = gr * r2 + gg * g2 + gb * b2 + l2;
    data4[i2 + 2] = br * r2 + bg * g2 + bb * b2 + l2;
    data4[i2 + 3] = a2;
  }
};
HSL$1.HSL = HSL;
var HSV$1 = {};
Object.defineProperty(HSV$1, "__esModule", { value: true });
HSV$1.HSV = void 0;
var Factory_1$8 = Factory;
var Node_1$8 = Node;
var Validators_1$8 = Validators;
var HSV = function(imageData) {
  var data4 = imageData.data, nPixels = data4.length, v2 = Math.pow(2, this.value()), s2 = Math.pow(2, this.saturation()), h2 = Math.abs(this.hue() + 360) % 360, i2;
  var vsu = v2 * s2 * Math.cos(h2 * Math.PI / 180), vsw = v2 * s2 * Math.sin(h2 * Math.PI / 180);
  var rr = 0.299 * v2 + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v2 - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v2 - 0.114 * vsu - 0.497 * vsw;
  var gr = 0.299 * v2 - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v2 + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v2 - 0.114 * vsu + 0.293 * vsw;
  var br = 0.299 * v2 - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v2 - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v2 + 0.886 * vsu - 0.2 * vsw;
  var r2, g2, b2, a2;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    r2 = data4[i2 + 0];
    g2 = data4[i2 + 1];
    b2 = data4[i2 + 2];
    a2 = data4[i2 + 3];
    data4[i2 + 0] = rr * r2 + rg * g2 + rb * b2;
    data4[i2 + 1] = gr * r2 + gg * g2 + gb * b2;
    data4[i2 + 2] = br * r2 + bg * g2 + bb * b2;
    data4[i2 + 3] = a2;
  }
};
HSV$1.HSV = HSV;
Factory_1$8.Factory.addGetterSetter(Node_1$8.Node, "hue", 0, Validators_1$8.getNumberValidator(), Factory_1$8.Factory.afterSetFilter);
Factory_1$8.Factory.addGetterSetter(Node_1$8.Node, "saturation", 0, Validators_1$8.getNumberValidator(), Factory_1$8.Factory.afterSetFilter);
Factory_1$8.Factory.addGetterSetter(Node_1$8.Node, "value", 0, Validators_1$8.getNumberValidator(), Factory_1$8.Factory.afterSetFilter);
var Invert$1 = {};
Object.defineProperty(Invert$1, "__esModule", { value: true });
Invert$1.Invert = void 0;
var Invert = function(imageData) {
  var data4 = imageData.data, len = data4.length, i2;
  for (i2 = 0; i2 < len; i2 += 4) {
    data4[i2] = 255 - data4[i2];
    data4[i2 + 1] = 255 - data4[i2 + 1];
    data4[i2 + 2] = 255 - data4[i2 + 2];
  }
};
Invert$1.Invert = Invert;
var Kaleidoscope$1 = {};
Object.defineProperty(Kaleidoscope$1, "__esModule", { value: true });
Kaleidoscope$1.Kaleidoscope = void 0;
var Factory_1$7 = Factory;
var Node_1$7 = Node;
var Util_1$1 = Util;
var Validators_1$7 = Validators;
var ToPolar = function(src2, dst, opt) {
  var srcPixels = src2.data, dstPixels = dst.data, xSize = src2.width, ySize = src2.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i2, x2, y2, r2 = 0, g2 = 0, b2 = 0, a2 = 0;
  var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
  x2 = xSize - xMid;
  y2 = ySize - yMid;
  rad = Math.sqrt(x2 * x2 + y2 * y2);
  rMax = rad > rMax ? rad : rMax;
  var rSize = ySize, tSize = xSize, radius, theta;
  var conversion = 360 / tSize * Math.PI / 180, sin2, cos2;
  for (theta = 0; theta < tSize; theta += 1) {
    sin2 = Math.sin(theta * conversion);
    cos2 = Math.cos(theta * conversion);
    for (radius = 0; radius < rSize; radius += 1) {
      x2 = Math.floor(xMid + rMax * radius / rSize * cos2);
      y2 = Math.floor(yMid + rMax * radius / rSize * sin2);
      i2 = (y2 * xSize + x2) * 4;
      r2 = srcPixels[i2 + 0];
      g2 = srcPixels[i2 + 1];
      b2 = srcPixels[i2 + 2];
      a2 = srcPixels[i2 + 3];
      i2 = (theta + radius * xSize) * 4;
      dstPixels[i2 + 0] = r2;
      dstPixels[i2 + 1] = g2;
      dstPixels[i2 + 2] = b2;
      dstPixels[i2 + 3] = a2;
    }
  }
};
var FromPolar = function(src2, dst, opt) {
  var srcPixels = src2.data, dstPixels = dst.data, xSize = src2.width, ySize = src2.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i2, x2, y2, dx, dy, r2 = 0, g2 = 0, b2 = 0, a2 = 0;
  var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
  x2 = xSize - xMid;
  y2 = ySize - yMid;
  rad = Math.sqrt(x2 * x2 + y2 * y2);
  rMax = rad > rMax ? rad : rMax;
  var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;
  var x1, y1;
  for (x2 = 0; x2 < xSize; x2 += 1) {
    for (y2 = 0; y2 < ySize; y2 += 1) {
      dx = x2 - xMid;
      dy = y2 - yMid;
      radius = Math.sqrt(dx * dx + dy * dy) * rSize / rMax;
      theta = (Math.atan2(dy, dx) * 180 / Math.PI + 360 + phaseShift) % 360;
      theta = theta * tSize / 360;
      x1 = Math.floor(theta);
      y1 = Math.floor(radius);
      i2 = (y1 * xSize + x1) * 4;
      r2 = srcPixels[i2 + 0];
      g2 = srcPixels[i2 + 1];
      b2 = srcPixels[i2 + 2];
      a2 = srcPixels[i2 + 3];
      i2 = (y2 * xSize + x2) * 4;
      dstPixels[i2 + 0] = r2;
      dstPixels[i2 + 1] = g2;
      dstPixels[i2 + 2] = b2;
      dstPixels[i2 + 3] = a2;
    }
  }
};
var Kaleidoscope = function(imageData) {
  var xSize = imageData.width, ySize = imageData.height;
  var x2, y2, xoff, i2, r2, g2, b2, a2, srcPos, dstPos;
  var power = Math.round(this.kaleidoscopePower());
  var angle = Math.round(this.kaleidoscopeAngle());
  var offset = Math.floor(xSize * (angle % 360) / 360);
  if (power < 1) {
    return;
  }
  var tempCanvas = Util_1$1.Util.createCanvasElement();
  tempCanvas.width = xSize;
  tempCanvas.height = ySize;
  var scratchData = tempCanvas.getContext("2d").getImageData(0, 0, xSize, ySize);
  ToPolar(imageData, scratchData, {
    polarCenterX: xSize / 2,
    polarCenterY: ySize / 2
  });
  var minSectionSize = xSize / Math.pow(2, power);
  while (minSectionSize <= 8) {
    minSectionSize = minSectionSize * 2;
    power -= 1;
  }
  minSectionSize = Math.ceil(minSectionSize);
  var sectionSize = minSectionSize;
  var xStart = 0, xEnd = sectionSize, xDelta = 1;
  if (offset + minSectionSize > xSize) {
    xStart = sectionSize;
    xEnd = 0;
    xDelta = -1;
  }
  for (y2 = 0; y2 < ySize; y2 += 1) {
    for (x2 = xStart; x2 !== xEnd; x2 += xDelta) {
      xoff = Math.round(x2 + offset) % xSize;
      srcPos = (xSize * y2 + xoff) * 4;
      r2 = scratchData.data[srcPos + 0];
      g2 = scratchData.data[srcPos + 1];
      b2 = scratchData.data[srcPos + 2];
      a2 = scratchData.data[srcPos + 3];
      dstPos = (xSize * y2 + x2) * 4;
      scratchData.data[dstPos + 0] = r2;
      scratchData.data[dstPos + 1] = g2;
      scratchData.data[dstPos + 2] = b2;
      scratchData.data[dstPos + 3] = a2;
    }
  }
  for (y2 = 0; y2 < ySize; y2 += 1) {
    sectionSize = Math.floor(minSectionSize);
    for (i2 = 0; i2 < power; i2 += 1) {
      for (x2 = 0; x2 < sectionSize + 1; x2 += 1) {
        srcPos = (xSize * y2 + x2) * 4;
        r2 = scratchData.data[srcPos + 0];
        g2 = scratchData.data[srcPos + 1];
        b2 = scratchData.data[srcPos + 2];
        a2 = scratchData.data[srcPos + 3];
        dstPos = (xSize * y2 + sectionSize * 2 - x2 - 1) * 4;
        scratchData.data[dstPos + 0] = r2;
        scratchData.data[dstPos + 1] = g2;
        scratchData.data[dstPos + 2] = b2;
        scratchData.data[dstPos + 3] = a2;
      }
      sectionSize *= 2;
    }
  }
  FromPolar(scratchData, imageData, { polarRotation: 0 });
};
Kaleidoscope$1.Kaleidoscope = Kaleidoscope;
Factory_1$7.Factory.addGetterSetter(Node_1$7.Node, "kaleidoscopePower", 2, Validators_1$7.getNumberValidator(), Factory_1$7.Factory.afterSetFilter);
Factory_1$7.Factory.addGetterSetter(Node_1$7.Node, "kaleidoscopeAngle", 0, Validators_1$7.getNumberValidator(), Factory_1$7.Factory.afterSetFilter);
var Mask$1 = {};
Object.defineProperty(Mask$1, "__esModule", { value: true });
Mask$1.Mask = void 0;
var Factory_1$6 = Factory;
var Node_1$6 = Node;
var Validators_1$6 = Validators;
function pixelAt(idata, x2, y2) {
  var idx = (y2 * idata.width + x2) * 4;
  var d2 = [];
  d2.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
  return d2;
}
function rgbDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));
}
function rgbMean(pTab) {
  var m2 = [0, 0, 0];
  for (var i2 = 0; i2 < pTab.length; i2++) {
    m2[0] += pTab[i2][0];
    m2[1] += pTab[i2][1];
    m2[2] += pTab[i2][2];
  }
  m2[0] /= pTab.length;
  m2[1] /= pTab.length;
  m2[2] /= pTab.length;
  return m2;
}
function backgroundMask(idata, threshold) {
  var rgbv_no = pixelAt(idata, 0, 0);
  var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
  var rgbv_so = pixelAt(idata, 0, idata.height - 1);
  var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);
  var thres = threshold || 10;
  if (rgbDistance(rgbv_no, rgbv_ne) < thres && rgbDistance(rgbv_ne, rgbv_se) < thres && rgbDistance(rgbv_se, rgbv_so) < thres && rgbDistance(rgbv_so, rgbv_no) < thres) {
    var mean3 = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);
    var mask = [];
    for (var i2 = 0; i2 < idata.width * idata.height; i2++) {
      var d2 = rgbDistance(mean3, [
        idata.data[i2 * 4],
        idata.data[i2 * 4 + 1],
        idata.data[i2 * 4 + 2]
      ]);
      mask[i2] = d2 < thres ? 0 : 255;
    }
    return mask;
  }
}
function applyMask(idata, mask) {
  for (var i2 = 0; i2 < idata.width * idata.height; i2++) {
    idata.data[4 * i2 + 3] = mask[i2];
  }
}
function erodeMask(mask, sw, sh) {
  var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
  var side = Math.round(Math.sqrt(weights.length));
  var halfSide = Math.floor(side / 2);
  var maskResult = [];
  for (var y2 = 0; y2 < sh; y2++) {
    for (var x2 = 0; x2 < sw; x2++) {
      var so = y2 * sw + x2;
      var a2 = 0;
      for (var cy2 = 0; cy2 < side; cy2++) {
        for (var cx = 0; cx < side; cx++) {
          var scy = y2 + cy2 - halfSide;
          var scx = x2 + cx - halfSide;
          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
            var srcOff = scy * sw + scx;
            var wt2 = weights[cy2 * side + cx];
            a2 += mask[srcOff] * wt2;
          }
        }
      }
      maskResult[so] = a2 === 255 * 8 ? 255 : 0;
    }
  }
  return maskResult;
}
function dilateMask(mask, sw, sh) {
  var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
  var side = Math.round(Math.sqrt(weights.length));
  var halfSide = Math.floor(side / 2);
  var maskResult = [];
  for (var y2 = 0; y2 < sh; y2++) {
    for (var x2 = 0; x2 < sw; x2++) {
      var so = y2 * sw + x2;
      var a2 = 0;
      for (var cy2 = 0; cy2 < side; cy2++) {
        for (var cx = 0; cx < side; cx++) {
          var scy = y2 + cy2 - halfSide;
          var scx = x2 + cx - halfSide;
          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
            var srcOff = scy * sw + scx;
            var wt2 = weights[cy2 * side + cx];
            a2 += mask[srcOff] * wt2;
          }
        }
      }
      maskResult[so] = a2 >= 255 * 4 ? 255 : 0;
    }
  }
  return maskResult;
}
function smoothEdgeMask(mask, sw, sh) {
  var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
  var side = Math.round(Math.sqrt(weights.length));
  var halfSide = Math.floor(side / 2);
  var maskResult = [];
  for (var y2 = 0; y2 < sh; y2++) {
    for (var x2 = 0; x2 < sw; x2++) {
      var so = y2 * sw + x2;
      var a2 = 0;
      for (var cy2 = 0; cy2 < side; cy2++) {
        for (var cx = 0; cx < side; cx++) {
          var scy = y2 + cy2 - halfSide;
          var scx = x2 + cx - halfSide;
          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
            var srcOff = scy * sw + scx;
            var wt2 = weights[cy2 * side + cx];
            a2 += mask[srcOff] * wt2;
          }
        }
      }
      maskResult[so] = a2;
    }
  }
  return maskResult;
}
var Mask = function(imageData) {
  var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);
  if (mask) {
    mask = erodeMask(mask, imageData.width, imageData.height);
    mask = dilateMask(mask, imageData.width, imageData.height);
    mask = smoothEdgeMask(mask, imageData.width, imageData.height);
    applyMask(imageData, mask);
  }
  return imageData;
};
Mask$1.Mask = Mask;
Factory_1$6.Factory.addGetterSetter(Node_1$6.Node, "threshold", 0, Validators_1$6.getNumberValidator(), Factory_1$6.Factory.afterSetFilter);
var Noise$1 = {};
Object.defineProperty(Noise$1, "__esModule", { value: true });
Noise$1.Noise = void 0;
var Factory_1$5 = Factory;
var Node_1$5 = Node;
var Validators_1$5 = Validators;
var Noise = function(imageData) {
  var amount = this.noise() * 255, data4 = imageData.data, nPixels = data4.length, half = amount / 2, i2;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    data4[i2 + 0] += half - 2 * half * Math.random();
    data4[i2 + 1] += half - 2 * half * Math.random();
    data4[i2 + 2] += half - 2 * half * Math.random();
  }
};
Noise$1.Noise = Noise;
Factory_1$5.Factory.addGetterSetter(Node_1$5.Node, "noise", 0.2, Validators_1$5.getNumberValidator(), Factory_1$5.Factory.afterSetFilter);
var Pixelate$1 = {};
Object.defineProperty(Pixelate$1, "__esModule", { value: true });
Pixelate$1.Pixelate = void 0;
var Factory_1$4 = Factory;
var Util_1 = Util;
var Node_1$4 = Node;
var Validators_1$4 = Validators;
var Pixelate = function(imageData) {
  var pixelSize = Math.ceil(this.pixelSize()), width2 = imageData.width, height2 = imageData.height, x2, y2, i2, red, green, blue, alpha, nBinsX = Math.ceil(width2 / pixelSize), nBinsY = Math.ceil(height2 / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data4 = imageData.data;
  if (pixelSize <= 0) {
    Util_1.Util.error("pixelSize value can not be <= 0");
    return;
  }
  for (xBin = 0; xBin < nBinsX; xBin += 1) {
    for (yBin = 0; yBin < nBinsY; yBin += 1) {
      red = 0;
      green = 0;
      blue = 0;
      alpha = 0;
      xBinStart = xBin * pixelSize;
      xBinEnd = xBinStart + pixelSize;
      yBinStart = yBin * pixelSize;
      yBinEnd = yBinStart + pixelSize;
      pixelsInBin = 0;
      for (x2 = xBinStart; x2 < xBinEnd; x2 += 1) {
        if (x2 >= width2) {
          continue;
        }
        for (y2 = yBinStart; y2 < yBinEnd; y2 += 1) {
          if (y2 >= height2) {
            continue;
          }
          i2 = (width2 * y2 + x2) * 4;
          red += data4[i2 + 0];
          green += data4[i2 + 1];
          blue += data4[i2 + 2];
          alpha += data4[i2 + 3];
          pixelsInBin += 1;
        }
      }
      red = red / pixelsInBin;
      green = green / pixelsInBin;
      blue = blue / pixelsInBin;
      alpha = alpha / pixelsInBin;
      for (x2 = xBinStart; x2 < xBinEnd; x2 += 1) {
        if (x2 >= width2) {
          continue;
        }
        for (y2 = yBinStart; y2 < yBinEnd; y2 += 1) {
          if (y2 >= height2) {
            continue;
          }
          i2 = (width2 * y2 + x2) * 4;
          data4[i2 + 0] = red;
          data4[i2 + 1] = green;
          data4[i2 + 2] = blue;
          data4[i2 + 3] = alpha;
        }
      }
    }
  }
};
Pixelate$1.Pixelate = Pixelate;
Factory_1$4.Factory.addGetterSetter(Node_1$4.Node, "pixelSize", 8, Validators_1$4.getNumberValidator(), Factory_1$4.Factory.afterSetFilter);
var Posterize$1 = {};
Object.defineProperty(Posterize$1, "__esModule", { value: true });
Posterize$1.Posterize = void 0;
var Factory_1$3 = Factory;
var Node_1$3 = Node;
var Validators_1$3 = Validators;
var Posterize = function(imageData) {
  var levels = Math.round(this.levels() * 254) + 1, data4 = imageData.data, len = data4.length, scale = 255 / levels, i2;
  for (i2 = 0; i2 < len; i2 += 1) {
    data4[i2] = Math.floor(data4[i2] / scale) * scale;
  }
};
Posterize$1.Posterize = Posterize;
Factory_1$3.Factory.addGetterSetter(Node_1$3.Node, "levels", 0.5, Validators_1$3.getNumberValidator(), Factory_1$3.Factory.afterSetFilter);
var RGB$1 = {};
Object.defineProperty(RGB$1, "__esModule", { value: true });
RGB$1.RGB = void 0;
var Factory_1$2 = Factory;
var Node_1$2 = Node;
var Validators_1$2 = Validators;
var RGB = function(imageData) {
  var data4 = imageData.data, nPixels = data4.length, red = this.red(), green = this.green(), blue = this.blue(), i2, brightness;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    brightness = (0.34 * data4[i2] + 0.5 * data4[i2 + 1] + 0.16 * data4[i2 + 2]) / 255;
    data4[i2] = brightness * red;
    data4[i2 + 1] = brightness * green;
    data4[i2 + 2] = brightness * blue;
    data4[i2 + 3] = data4[i2 + 3];
  }
};
RGB$1.RGB = RGB;
Factory_1$2.Factory.addGetterSetter(Node_1$2.Node, "red", 0, function(val) {
  this._filterUpToDate = false;
  if (val > 255) {
    return 255;
  } else if (val < 0) {
    return 0;
  } else {
    return Math.round(val);
  }
});
Factory_1$2.Factory.addGetterSetter(Node_1$2.Node, "green", 0, function(val) {
  this._filterUpToDate = false;
  if (val > 255) {
    return 255;
  } else if (val < 0) {
    return 0;
  } else {
    return Math.round(val);
  }
});
Factory_1$2.Factory.addGetterSetter(Node_1$2.Node, "blue", 0, Validators_1$2.RGBComponent, Factory_1$2.Factory.afterSetFilter);
var RGBA$1 = {};
Object.defineProperty(RGBA$1, "__esModule", { value: true });
RGBA$1.RGBA = void 0;
var Factory_1$1 = Factory;
var Node_1$1 = Node;
var Validators_1$1 = Validators;
var RGBA = function(imageData) {
  var data4 = imageData.data, nPixels = data4.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i2, ia;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    ia = 1 - alpha;
    data4[i2] = red * alpha + data4[i2] * ia;
    data4[i2 + 1] = green * alpha + data4[i2 + 1] * ia;
    data4[i2 + 2] = blue * alpha + data4[i2 + 2] * ia;
  }
};
RGBA$1.RGBA = RGBA;
Factory_1$1.Factory.addGetterSetter(Node_1$1.Node, "red", 0, function(val) {
  this._filterUpToDate = false;
  if (val > 255) {
    return 255;
  } else if (val < 0) {
    return 0;
  } else {
    return Math.round(val);
  }
});
Factory_1$1.Factory.addGetterSetter(Node_1$1.Node, "green", 0, function(val) {
  this._filterUpToDate = false;
  if (val > 255) {
    return 255;
  } else if (val < 0) {
    return 0;
  } else {
    return Math.round(val);
  }
});
Factory_1$1.Factory.addGetterSetter(Node_1$1.Node, "blue", 0, Validators_1$1.RGBComponent, Factory_1$1.Factory.afterSetFilter);
Factory_1$1.Factory.addGetterSetter(Node_1$1.Node, "alpha", 1, function(val) {
  this._filterUpToDate = false;
  if (val > 1) {
    return 1;
  } else if (val < 0) {
    return 0;
  } else {
    return val;
  }
});
var Sepia$1 = {};
Object.defineProperty(Sepia$1, "__esModule", { value: true });
Sepia$1.Sepia = void 0;
var Sepia = function(imageData) {
  var data4 = imageData.data, nPixels = data4.length, i2, r2, g2, b2;
  for (i2 = 0; i2 < nPixels; i2 += 4) {
    r2 = data4[i2 + 0];
    g2 = data4[i2 + 1];
    b2 = data4[i2 + 2];
    data4[i2 + 0] = Math.min(255, r2 * 0.393 + g2 * 0.769 + b2 * 0.189);
    data4[i2 + 1] = Math.min(255, r2 * 0.349 + g2 * 0.686 + b2 * 0.168);
    data4[i2 + 2] = Math.min(255, r2 * 0.272 + g2 * 0.534 + b2 * 0.131);
  }
};
Sepia$1.Sepia = Sepia;
var Solarize$1 = {};
Object.defineProperty(Solarize$1, "__esModule", { value: true });
Solarize$1.Solarize = void 0;
var Solarize = function(imageData) {
  var data4 = imageData.data, w2 = imageData.width, h2 = imageData.height, w4 = w2 * 4, y2 = h2;
  do {
    var offsetY = (y2 - 1) * w4;
    var x2 = w2;
    do {
      var offset = offsetY + (x2 - 1) * 4;
      var r2 = data4[offset];
      var g2 = data4[offset + 1];
      var b2 = data4[offset + 2];
      if (r2 > 127) {
        r2 = 255 - r2;
      }
      if (g2 > 127) {
        g2 = 255 - g2;
      }
      if (b2 > 127) {
        b2 = 255 - b2;
      }
      data4[offset] = r2;
      data4[offset + 1] = g2;
      data4[offset + 2] = b2;
    } while (--x2);
  } while (--y2);
};
Solarize$1.Solarize = Solarize;
var Threshold$1 = {};
Object.defineProperty(Threshold$1, "__esModule", { value: true });
Threshold$1.Threshold = void 0;
var Factory_1 = Factory;
var Node_1 = Node;
var Validators_1 = Validators;
var Threshold = function(imageData) {
  var level = this.threshold() * 255, data4 = imageData.data, len = data4.length, i2;
  for (i2 = 0; i2 < len; i2 += 1) {
    data4[i2] = data4[i2] < level ? 0 : 255;
  }
};
Threshold$1.Threshold = Threshold;
Factory_1.Factory.addGetterSetter(Node_1.Node, "threshold", 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Object.defineProperty(_FullInternals, "__esModule", { value: true });
_FullInternals.Konva = void 0;
var _CoreInternals_1 = _CoreInternals;
var Arc_1 = Arc$1;
var Arrow_1 = Arrow$1;
var Circle_1 = Circle$1;
var Ellipse_1 = Ellipse$1;
var Image_1 = Image$2;
var Label_1 = Label$1;
var Line_1 = Line$1;
var Path_1 = Path$1;
var Rect_1 = Rect$1;
var RegularPolygon_1 = RegularPolygon$1;
var Ring_1 = Ring$1;
var Sprite_1 = Sprite$1;
var Star_1 = Star$1;
var Text_1 = Text$1;
var TextPath_1 = TextPath$1;
var Transformer_1 = Transformer$1;
var Wedge_1 = Wedge$1;
var Blur_1 = Blur$1;
var Brighten_1 = Brighten$1;
var Contrast_1 = Contrast$1;
var Emboss_1 = Emboss$1;
var Enhance_1 = Enhance$1;
var Grayscale_1 = Grayscale$1;
var HSL_1 = HSL$1;
var HSV_1 = HSV$1;
var Invert_1 = Invert$1;
var Kaleidoscope_1 = Kaleidoscope$1;
var Mask_1 = Mask$1;
var Noise_1 = Noise$1;
var Pixelate_1 = Pixelate$1;
var Posterize_1 = Posterize$1;
var RGB_1 = RGB$1;
var RGBA_1 = RGBA$1;
var Sepia_1 = Sepia$1;
var Solarize_1 = Solarize$1;
var Threshold_1 = Threshold$1;
_FullInternals.Konva = _CoreInternals_1.Konva.Util._assign(_CoreInternals_1.Konva, {
  Arc: Arc_1.Arc,
  Arrow: Arrow_1.Arrow,
  Circle: Circle_1.Circle,
  Ellipse: Ellipse_1.Ellipse,
  Image: Image_1.Image,
  Label: Label_1.Label,
  Tag: Label_1.Tag,
  Line: Line_1.Line,
  Path: Path_1.Path,
  Rect: Rect_1.Rect,
  RegularPolygon: RegularPolygon_1.RegularPolygon,
  Ring: Ring_1.Ring,
  Sprite: Sprite_1.Sprite,
  Star: Star_1.Star,
  Text: Text_1.Text,
  TextPath: TextPath_1.TextPath,
  Transformer: Transformer_1.Transformer,
  Wedge: Wedge_1.Wedge,
  Filters: {
    Blur: Blur_1.Blur,
    Brighten: Brighten_1.Brighten,
    Contrast: Contrast_1.Contrast,
    Emboss: Emboss_1.Emboss,
    Enhance: Enhance_1.Enhance,
    Grayscale: Grayscale_1.Grayscale,
    HSL: HSL_1.HSL,
    HSV: HSV_1.HSV,
    Invert: Invert_1.Invert,
    Kaleidoscope: Kaleidoscope_1.Kaleidoscope,
    Mask: Mask_1.Mask,
    Noise: Noise_1.Noise,
    Pixelate: Pixelate_1.Pixelate,
    Posterize: Posterize_1.Posterize,
    RGB: RGB_1.RGB,
    RGBA: RGBA_1.RGBA,
    Sepia: Sepia_1.Sepia,
    Solarize: Solarize_1.Solarize,
    Threshold: Threshold_1.Threshold
  }
});
(function(module, exports) {
  var Konva2 = _FullInternals.Konva;
  Konva2._injectGlobal(Konva2);
  exports["default"] = Konva2;
  module.exports = exports["default"];
})(lib, lib.exports);
var libExports = lib.exports;
const Konva$1 = /* @__PURE__ */ getDefaultExportFromCjs(libExports);
var cytoscapeNodeEditing = { exports: {} };
(function(module, exports) {
  !function(e2, t3) {
    module.exports = t3();
  }(self, function() {
    return (() => {
      var e2 = { 265: (e3, t4, i2) => {
        var n2, o2, s2, a2, r2, d2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
          return typeof e4;
        } : function(e4) {
          return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
        };
        o2 = Math.max, s2 = Date.now || function() {
          return (/* @__PURE__ */ new Date()).getTime();
        }, a2 = function(e4, t5, i3) {
          var n3, a3, r3, h2, u2, p2, c2, g2, f2, l2 = 0, m2 = false, v2 = true;
          if ("function" != typeof e4)
            throw new TypeError("Expected a function");
          if (t5 = t5 < 0 ? 0 : +t5 || 0, true === i3) {
            var y2 = true;
            v2 = false;
          } else
            f2 = void 0 === (g2 = i3) ? "undefined" : d2(g2), !g2 || "object" != f2 && "function" != f2 || (y2 = !!i3.leading, m2 = "maxWait" in i3 && o2(+i3.maxWait || 0, t5), v2 = "trailing" in i3 ? !!i3.trailing : v2);
          function C2(t6, i4) {
            i4 && clearTimeout(i4), a3 = p2 = c2 = void 0, t6 && (l2 = s2(), r3 = e4.apply(u2, n3), p2 || a3 || (n3 = u2 = void 0));
          }
          function x2() {
            var e5 = t5 - (s2() - h2);
            e5 <= 0 || e5 > t5 ? C2(c2, a3) : p2 = setTimeout(x2, e5);
          }
          function b2() {
            C2(v2, p2);
          }
          function M2() {
            if (n3 = arguments, h2 = s2(), u2 = this, c2 = v2 && (p2 || !y2), false === m2)
              var i4 = y2 && !p2;
            else {
              a3 || y2 || (l2 = h2);
              var o3 = m2 - (h2 - l2), d4 = o3 <= 0 || o3 > m2;
              d4 ? (a3 && (a3 = clearTimeout(a3)), l2 = h2, r3 = e4.apply(u2, n3)) : a3 || (a3 = setTimeout(b2, o3));
            }
            return d4 && p2 ? p2 = clearTimeout(p2) : p2 || t5 === m2 || (p2 = setTimeout(x2, t5)), i4 && (d4 = true, r3 = e4.apply(u2, n3)), !d4 || p2 || a3 || (n3 = u2 = void 0), r3;
          }
          return M2.cancel = function() {
            p2 && clearTimeout(p2), a3 && clearTimeout(a3), l2 = 0, a3 = p2 = c2 = void 0;
          }, M2;
        }, r2 = function(e4, t5, i3) {
          if (e4 && t5 && i3) {
            var n3 = 0;
            e4("core", "nodeEditing", function(e5) {
              var s3, r3 = this;
              if ("get" === e5)
                return o3(r3, "api");
              var d4, h2, u2 = 1.1, p2 = t5.extend(true, { padding: 5, undoable: true, grappleSize: 8, grappleColor: "green", inactiveGrappleStroke: "inside 1px blue", boundingRectangleLineDash: [4, 8], boundingRectangleLineColor: "red", boundingRectangleLineWidth: 1.5, zIndex: 999, moveSelectedNodesOnKeyEvents: function() {
                return true;
              }, minWidth: function(e6) {
                return e6.data("resizeMinWidth") || 15;
              }, minHeight: function(e6) {
                return e6.data("resizeMinHeight") || 15;
              }, getCompoundMinWidth: function(e6) {
                return e6.css("min-width");
              }, getCompoundMinHeight: function(e6) {
                return e6.css("min-height");
              }, getCompoundMinWidthBiasRight: function(e6) {
                return e6.css("min-width-bias-right");
              }, getCompoundMinWidthBiasLeft: function(e6) {
                return e6.css("min-width-bias-left");
              }, getCompoundMinHeightBiasTop: function(e6) {
                return e6.css("min-height-bias-top");
              }, getCompoundMinHeightBiasBottom: function(e6) {
                return e6.css("min-height-bias-bottom");
              }, setWidth: function(e6, t6) {
                e6.css("width", t6);
              }, setHeight: function(e6, t6) {
                e6.css("height", t6);
              }, setCompoundMinWidth: function(e6, t6) {
                e6.css("min-width", t6);
              }, setCompoundMinHeight: function(e6, t6) {
                e6.css("min-height", t6);
              }, setCompoundMinWidthBiasLeft: function(e6, t6) {
                e6.css("min-width-bias-left", t6);
              }, setCompoundMinWidthBiasRight: function(e6, t6) {
                e6.css("min-width-bias-right", t6);
              }, setCompoundMinHeightBiasTop: function(e6, t6) {
                e6.css("min-height-bias-top", t6);
              }, setCompoundMinHeightBiasBottom: function(e6, t6) {
                e6.css("min-height-bias-bottom", t6);
              }, isFixedAspectRatioResizeMode: function(e6) {
                return e6.is(".fixedAspectRatioResizeMode");
              }, isNoResizeMode: function(e6) {
                return e6.is(".noResizeMode, :parent");
              }, isNoControlsMode: function(e6) {
                return e6.is(".noControlsMode");
              }, cursors: { default: "default", inactive: "not-allowed", nw: "nw-resize", n: "n-resize", ne: "ne-resize", e: "e-resize", se: "se-resize", s: "s-resize", sw: "sw-resize", w: "w-resize" }, resizeToContentCueEnabled: function(e6) {
                return true;
              }, resizeToContentFunction: void 0, resizeToContentCuePosition: "bottom-right", resizeToContentCueImage: "/node_modules/cytoscape-node-editing/resizeCue.svg", enableMovementWithArrowKeys: true, autoRemoveResizeToContentCue: false }, e5), c2 = t5(r3.container()), g2 = "cy-node-edge-editing-stage" + n3;
              n3++;
              var f2, l2, m2 = t5('<div id="' + g2 + '"></div>');
              c2.find("#" + g2).length < 1 && c2.append(m2), (f2 = i3.stages.length < n3 ? new i3.Stage({ id: "node-edge-editing-stage", container: g2, width: c2.width(), height: c2.height() }) : i3.stages[n3 - 1]).getChildren().length < 1 ? (l2 = new i3.Layer(), f2.add(l2)) : l2 = f2.getChildren()[0];
              var v2 = a2(function() {
                m2.attr("height", c2.height()).attr("width", c2.width()).css({ position: "absolute", top: 0, left: 0, "z-index": p2.zIndex }), setTimeout(function() {
                  var e6 = m2.offset(), t6 = c2.offset();
                  m2.css({ top: -(e6.top - t6.top), left: -(e6.left - t6.left) }), l2.getStage().setWidth(c2.width()), l2.getStage().setHeight(c2.height());
                }, 0);
              }, 250);
              v2(), t5(window).on("resize", v2);
              var y2 = function(e6) {
                this.parent = e6, this.boundingRectangle = new C2(e6);
                var t6 = ["topleft", "topcenter", "topright", "centerright", "bottomright", "bottomcenter", "bottomleft", "centerleft"];
                this.grapples = [];
                for (var i4 = 0; i4 < t6.length; i4++) {
                  var n4 = t6[i4], o4 = true;
                  (p2.isNoResizeMode(e6) || p2.isFixedAspectRatioResizeMode(e6) && n4.indexOf("center") >= 0) && (o4 = false), this.grapples.push(new x2(e6, this, n4, o4));
                }
                !p2.resizeToContentCueEnabled(e6) || p2.isNoResizeMode(e6) || p2.autoRemoveResizeToContentCue && (!p2.autoRemoveResizeToContentCue || B2(e6)) || (this.resizeCue = new b2(e6, this)), l2.draw();
              };
              y2.prototype.update = function() {
                this.boundingRectangle.update();
                for (var e6 = 0; e6 < this.grapples.length; e6++)
                  this.grapples[e6].update();
                var t6 = this.boundingRectangle.parent, i4 = p2.resizeToContentCueEnabled(t6) && !p2.isNoResizeMode(t6) && (!p2.autoRemoveResizeToContentCue || p2.autoRemoveResizeToContentCue && !B2(t6));
                this.resizeCue && i4 ? this.resizeCue.update() : this.resizeCue && !i4 ? (this.resizeCue.unbindEvents(), this.resizeCue.shape.destroy(), delete this.resizeCue) : !this.resizeCue && i4 && (this.resizeCue = new b2(t6, this)), l2.draw();
              }, y2.prototype.remove = function() {
                this.boundingRectangle.shape.destroy(), delete this.boundingRectangle;
                for (var e6 = 0; e6 < this.grapples.length; e6++)
                  this.grapples[e6].unbindAllEvents(), this.grapples[e6].shape.destroy();
                delete this.grapples, this.resizeCue && (this.resizeCue.unbindEvents(), this.resizeCue.shape.destroy(), delete this.resizeCue), l2.draw();
              };
              var C2 = function(e6) {
                this.parent = e6, this.shape = null;
                var t6 = e6.renderedPosition(), n4 = e6.renderedOuterWidth() + H2(), o4 = e6.renderedOuterHeight() + H2(), s4 = { x: t6.x - n4 / 2, y: t6.y - o4 / 2 }, a3 = new i3.Rect({ x: s4.x, y: s4.y, width: n4, height: o4, stroke: p2.boundingRectangleLineColor, strokeWidth: p2.boundingRectangleLineWidth, dash: p2.boundingRectangleLineDash });
                l2.add(a3), this.shape = a3;
              };
              C2.prototype.update = function() {
                var e6 = this.parent.renderedPosition(), t6 = this.parent.renderedOuterWidth() + H2(), i4 = this.parent.renderedOuterHeight() + H2(), n4 = { x: e6.x - t6 / 2, y: e6.y - i4 / 2 };
                this.shape.x(n4.x), this.shape.y(n4.y), this.shape.width(t6), this.shape.height(i4);
              };
              var x2 = function(e6, t6, n4, o4) {
                this.parent = e6, this.location = n4, this.isActive = o4, this.resizeControls = t6;
                var s4 = e6.renderedPosition(), a3 = e6.renderedOuterWidth() + H2(), r4 = e6.renderedOuterHeight() + H2(), d5 = { x: s4.x - a3 / 2, y: s4.y - r4 / 2 }, h3 = R2(e6);
                if (this.shape = new i3.Rect({ width: h3, height: h3 }), this.isActive)
                  this.shape.fill(p2.grappleColor);
                else {
                  var u3 = p2.inactiveGrappleStroke.split(" "), c3 = u3[2], g3 = parseInt(u3[1].replace(/px/, ""));
                  this.shape.stroke(c3), this.shape.strokeWidth(g3);
                }
                this.updateShapePosition(d5, a3, r4, h3), l2.add(this.shape), this.isActive ? this.bindActiveEvents() : this.bindInactiveEvents();
              };
              x2.prototype.bindInactiveEvents = function() {
                var e6 = function e7(t6) {
                  r3.boxSelectionEnabled(true), r3.panningEnabled(true), r3.autounselectify(false), r3.autoungrabify(false), l2.getStage().off("contentTouchend contentMouseup", e7);
                };
                this.shape.on("mouseenter", function(e7) {
                  e7.target.getStage().container().style.cursor = p2.cursors.inactive;
                }), this.shape.on("mouseleave", function(e7) {
                  null != e7.target.getStage() && (e7.target.getStage().container().style.cursor = p2.cursors.default);
                }), this.shape.on("touchstart mousedown", function(t6) {
                  r3.boxSelectionEnabled(false), r3.panningEnabled(false), r3.autounselectify(true), r3.autoungrabify(true), l2.getStage().on("contentTouchend contentMouseup", e6);
                });
              }, x2.prototype.bindActiveEvents = function() {
                var e6, t6, i4, n4, o4, s4, a3 = this, d5 = a3.parent, h3 = {}, u3 = { topleft: "nw", topcenter: "n", topright: "ne", centerright: "e", bottomright: "se", bottomcenter: "s", bottomleft: "sw", centerleft: "w" }, c3 = function e7(t7) {
                  r3.style().selector("core").style("active-bg-opacity", o4).update(), a3.shape.getStage().container().style.cursor = p2.cursors.default, r3.boxSelectionEnabled(true), r3.panningEnabled(true), setTimeout(function() {
                    r3.autounselectify(false), r3.autoungrabify(false);
                  }, 0), r3.trigger("nodeediting.resizeend", [a3.location, a3.parent]), l2.getStage().off("contentTouchend contentMouseup", e7), l2.getStage().off("contentTouchmove contentMousemove", g3), a3.shape.on("mouseenter", f3), a3.shape.on("mouseleave", m3);
                }, g3 = function(o5) {
                  var u4 = a3.shape.getStage().getPointerPosition(), c4 = u4.x, g4 = u4.y, f4 = (g4 - h3.y) / r3.zoom(), l3 = (c4 - h3.x) / r3.zoom(), m4 = a3.location;
                  r3.batch(function() {
                    var o6 = p2.isFixedAspectRatioResizeMode(d5);
                    if (!(o6 && m4.indexOf("center") >= 0 || p2.isNoResizeMode(d5))) {
                      if (o6) {
                        var a4 = n4(d5) / i4(d5), r4 = "topright" == m4 || "bottomleft" == m4;
                        l3 > f4 ? f4 = l3 * a4 * (r4 ? -1 : 1) : l3 = f4 / a4 * (r4 ? -1 : 1);
                      }
                      var h4 = d5.position(), u5 = h4.x, c5 = h4.y, g5 = false, v3 = false, y3 = 0, C3 = 0, x3 = 0, b3 = 0;
                      if (d5.isParent()) {
                        var M3 = i4(d5) - s4.w, z3 = n4(d5) - s4.h;
                        M3 > 0 && (C3 = M3 - (y3 = M3 * parseFloat(p2.getCompoundMinWidthBiasLeft(d5)) / (parseFloat(p2.getCompoundMinWidthBiasLeft(d5)) + parseFloat(p2.getCompoundMinWidthBiasRight(d5))))), z3 > 0 && (b3 = z3 - (x3 = z3 * parseFloat(p2.getCompoundMinHeightBiasTop(d5)) / (parseFloat(p2.getCompoundMinHeightBiasTop(d5)) + parseFloat(p2.getCompoundMinHeightBiasBottom(d5)))));
                      }
                      if (m4.startsWith("top")) {
                        if (n4(d5) - f4 > p2.minHeight(d5) && (!d5.isParent() || x3 - f4 >= 0))
                          c5 = h4.y + f4 / 2, v3 = true, t6(d5, n4(d5) - f4);
                        else if (o6)
                          return;
                      } else if (m4.startsWith("bottom")) {
                        if (n4(d5) + f4 > p2.minHeight(d5) && (!d5.isParent() || b3 + f4 >= 0))
                          c5 = h4.y + f4 / 2, v3 = true, t6(d5, n4(d5) + f4);
                        else if (o6)
                          return;
                      }
                      if (m4.endsWith("left") && i4(d5) - l3 > p2.minWidth(d5) && (!d5.isParent() || y3 - l3 >= 0) ? (u5 = h4.x + l3 / 2, g5 = true, e6(d5, i4(d5) - l3)) : m4.endsWith("right") && i4(d5) + l3 > p2.minWidth(d5) && (!d5.isParent() || C3 + l3 >= 0) && (u5 = h4.x + l3 / 2, g5 = true, e6(d5, i4(d5) + l3)), d5.isParent() || !g5 && !v3 || d5.position({ x: u5, y: c5 }), d5.isParent()) {
                        if (M3 = i4(d5) - s4.w, z3 = n4(d5) - s4.h, g5 && M3 > 0) {
                          m4.endsWith("right") ? C3 = M3 - y3 : m4.endsWith("left") && (y3 = M3 - C3);
                          var w3 = y3 / (y3 + C3) * 100, B3 = 100 - w3;
                          if (w3 < 0 || B3 < 0)
                            return;
                          p2.setCompoundMinWidthBiasLeft(d5, w3 + "%"), p2.setCompoundMinWidthBiasRight(d5, B3 + "%");
                        }
                        if (v3 && z3 > 0) {
                          m4.startsWith("top") ? x3 = z3 - b3 : m4.startsWith("bottom") && (b3 = z3 - x3);
                          var R3 = x3 / (x3 + b3) * 100, W3 = 100 - R3;
                          if (R3 < 0 || W3 < 0)
                            return;
                          p2.setCompoundMinHeightBiasTop(d5, R3 + "%"), p2.setCompoundMinHeightBiasBottom(d5, W3 + "%");
                        }
                      }
                    }
                  }), h3.x = c4, h3.y = g4, a3.resizeControls.update(), r3.trigger("nodeediting.resizedrag", [m4, d5]);
                }, f3 = function(e7) {
                  e7.target.getStage().container().style.cursor = p2.cursors[u3[a3.location]];
                }, m3 = function(e7) {
                  null != e7.target.getStage() && (e7.target.getStage().container().style.cursor = p2.cursors.default);
                };
                this.shape.on("mouseenter", f3), this.shape.on("mouseleave", m3), this.shape.on("touchstart mousedown", function(v3) {
                  s4 = d5.children().boundingBox(), e6 = d5.isParent() ? p2.setCompoundMinWidth : p2.setWidth, t6 = d5.isParent() ? p2.setCompoundMinHeight : p2.setHeight, i4 = function(e7) {
                    return e7.isParent() ? Math.max(parseFloat(p2.getCompoundMinWidth(e7)), s4.w) : e7.width();
                  }, n4 = function(e7) {
                    return e7.isParent() ? Math.max(parseFloat(p2.getCompoundMinHeight(e7)), s4.h) : e7.height();
                  }, r3.trigger("nodeediting.resizestart", [a3.location, a3.parent]), r3.style()._private.coreStyle["active-bg-opacity"] && (o4 = r3.style()._private.coreStyle["active-bg-opacity"].value), r3.style().selector("core").style("active-bg-opacity", 0).update(), v3.target.getStage().container().style.cursor = p2.cursors[u3[a3.location]];
                  var y3 = v3.target.getStage().getPointerPosition();
                  h3.x = y3.x, h3.y = y3.y, r3.boxSelectionEnabled(false), r3.panningEnabled(false), r3.autounselectify(true), r3.autoungrabify(true), a3.shape.off("mouseenter", f3), a3.shape.off("mouseleave", m3), l2.getStage().on("contentTouchend contentMouseup", c3), l2.getStage().on("contentTouchmove contentMousemove", g3);
                });
              }, x2.prototype.update = function() {
                var e6 = this.parent.renderedPosition(), t6 = this.parent.renderedOuterWidth() + H2(), i4 = this.parent.renderedOuterHeight() + H2(), n4 = { x: e6.x - t6 / 2, y: e6.y - i4 / 2 }, o4 = R2(this.parent);
                this.shape.width(o4), this.shape.height(o4), this.updateShapePosition(n4, t6, i4, o4);
              }, x2.prototype.unbindAllEvents = function() {
                this.shape.off("mouseenter"), this.shape.off("mouseleave"), this.shape.off("touchstart mousedown");
              }, x2.prototype.updateShapePosition = function(e6, t6, i4, n4) {
                switch (this.location) {
                  case "topleft":
                    this.shape.x(e6.x - n4 / 2), this.shape.y(e6.y - n4 / 2);
                    break;
                  case "topcenter":
                    this.shape.x(e6.x + t6 / 2 - n4 / 2), this.shape.y(e6.y - n4 / 2);
                    break;
                  case "topright":
                    this.shape.x(e6.x + t6 - n4 / 2), this.shape.y(e6.y - n4 / 2);
                    break;
                  case "centerright":
                    this.shape.x(e6.x + t6 - n4 / 2), this.shape.y(e6.y + i4 / 2 - n4 / 2);
                    break;
                  case "bottomright":
                    this.shape.x(e6.x + t6 - n4 / 2), this.shape.y(e6.y + i4 - n4 / 2);
                    break;
                  case "bottomcenter":
                    this.shape.x(e6.x + t6 / 2 - n4 / 2), this.shape.y(e6.y + i4 - n4 / 2);
                    break;
                  case "bottomleft":
                    this.shape.x(e6.x - n4 / 2), this.shape.y(e6.y + i4 - n4 / 2);
                    break;
                  case "centerleft":
                    this.shape.x(e6.x - n4 / 2), this.shape.y(e6.y + i4 / 2 - n4 / 2);
                }
              };
              var b2 = function(e6, t6) {
                this.parent = e6, this.resizeControls = t6;
                var n4 = e6.renderedPosition(), o4 = e6.renderedOuterWidth() + H2(), s4 = e6.renderedOuterHeight() + H2(), a3 = { x: n4.x - o4 / 2, y: n4.y - s4 / 2 }, r4 = W2(e6), d5 = T2(e6), h3 = new Image();
                h3.src = p2.resizeToContentCueImage, this.shape = new i3.Image({ width: d5, height: r4, image: h3 }), h3.onload = function() {
                  l2.draw();
                }, this.updateShapePosition(a3, o4, s4, d5, r4), this.bindEvents(), l2.add(this.shape);
              };
              b2.prototype.update = function() {
                var e6 = this.parent.renderedPosition(), t6 = this.parent.renderedOuterWidth() + H2(), i4 = this.parent.renderedOuterHeight() + H2(), n4 = { x: e6.x - t6 / 2, y: e6.y - i4 / 2 }, o4 = W2(this.parent), s4 = T2(this.parent);
                this.shape.width(s4), this.shape.height(o4), this.updateShapePosition(n4, t6, i4, s4, o4);
              }, b2.prototype.updateShapePosition = function(e6, t6, i4, n4, o4) {
                switch (p2.resizeToContentCuePosition) {
                  case "top-left":
                    this.shape.x(e6.x + 0.4 * n4), this.shape.y(e6.y + 0.4 * o4);
                    break;
                  case "top-right":
                    this.shape.x(e6.x + t6 - 1.4 * n4), this.shape.y(e6.y + 0.4 * o4);
                    break;
                  case "bottom-left":
                    this.shape.x(e6.x + 0.4 * n4), this.shape.y(e6.y + i4 - 1.4 * o4);
                    break;
                  default:
                    this.shape.x(e6.x + t6 - 1.4 * n4), this.shape.y(e6.y + i4 - 1.4 * o4);
                }
              }, b2.prototype.bindEvents = function() {
                var e6 = this.parent, t6 = this;
                this.shape.on("mousedown", function(e7) {
                  e7.evt.preventDefault(), e7.evt.stopPropagation();
                }), this.shape.on("click", function(i4) {
                  i4.evt.preventDefault(), "function" == typeof p2.resizeToContentFunction ? p2.resizeToContentFunction([e6]) : r3.undoRedo && p2.undoable ? r3.trigger("nodeediting.resizetocontent", [t6]) : P2({ self: t6, firstTime: true });
                });
              }, b2.prototype.unbindEvents = function() {
                this.shape.off("mousedown"), this.shape.off("click");
              };
              var M2, z2 = function(e6) {
                if (e6.isParent())
                  return e6.children().boundingBox().h;
                var t6 = document.createElement("canvas").getContext("2d"), i4 = e6.style();
                return t6.font = i4["font-size"] + " " + i4["font-family"], Math.max(1.1 * t6.measureText("M").width, 30);
              }, w2 = function(e6) {
                if (e6.isParent())
                  return e6.children().boundingBox().w;
                var t6 = document.createElement("canvas").getContext("2d"), i4 = e6.style();
                t6.font = i4["font-size"] + " " + i4["font-family"];
                var n4 = i4.label.split("\n"), o4 = 0;
                return n4.forEach(function(e7) {
                  var i5 = t6.measureText(e7).width;
                  o4 < i5 && (o4 = i5);
                }), o4;
              }, B2 = function(e6) {
                var t6 = e6.width(), i4 = e6.height(), n4 = z2(e6), o4 = w2(e6);
                if (0 !== o4 && "function" == typeof p2.isFixedAspectRatioResizeMode && p2.isFixedAspectRatioResizeMode(e6)) {
                  var s4 = e6.width() / e6.height(), a3 = o4 < n4 ? o4 : n4 * s4, r4 = o4 < n4 ? o4 / s4 : n4;
                  a3 >= o4 && r4 >= n4 ? (o4 = a3, n4 = r4) : n4 = (o4 = o4 < n4 ? n4 * s4 : o4) < n4 ? n4 : o4 / s4;
                }
                return t6 === o4 * u2 && i4 === n4 * u2;
              }, R2 = function(e6) {
                return Math.max(1, r3.zoom()) * p2.grappleSize * Math.min(e6.width() / 25, e6.height() / 25, 1);
              }, W2 = function(e6) {
                return Math.max(1, r3.zoom()) * p2.grappleSize * 1.25 * Math.min(e6.width() / 25, e6.height() / 25, 1);
              }, T2 = function(e6) {
                return Math.max(1, r3.zoom()) * p2.grappleSize * 1.25 * Math.min(e6.width() / 25, e6.height() / 25, 1);
              }, H2 = function() {
                return p2.padding * Math.max(1, r3.zoom());
              }, P2 = function(e6) {
                var t6 = e6.self.parent, i4 = t6.isParent() ? p2.setCompoundMinWidth : p2.setWidth, n4 = t6.isParent() ? p2.setCompoundMinHeight : p2.setHeight;
                if (e6.firstTime) {
                  e6.firstTime = null, e6.oldWidth = t6.isParent() ? p2.getCompoundMinWidth(t6) : t6.width(), e6.oldHeight = t6.isParent() ? p2.getCompoundMinHeight(t6) : t6.height(), t6.isParent() && (e6.oldBiasLeft = p2.getCompoundMinWidthBiasLeft(t6) || "50%", e6.oldBiasRight = p2.getCompoundMinWidthBiasRight(t6) || "50%", e6.oldBiasTop = p2.getCompoundMinHeightBiasTop(t6) || "50%", e6.oldBiasBottom = p2.getCompoundMinHeightBiasBottom(t6) || "50%");
                  var o4 = w2(t6), a3 = z2(t6);
                  if (0 !== o4) {
                    if ("function" == typeof p2.isFixedAspectRatioResizeMode && p2.isFixedAspectRatioResizeMode(t6)) {
                      var r4 = t6.width() / t6.height(), d5 = o4 < a3 ? o4 : a3 * r4, h3 = o4 < a3 ? o4 / r4 : a3;
                      d5 >= o4 && h3 >= a3 ? (o4 = d5, a3 = h3) : a3 = (o4 = o4 < a3 ? a3 * r4 : o4) < a3 ? a3 : o4 / r4;
                    }
                    i4(t6, o4 * u2), n4(t6, a3 * u2), t6.isParent() && (p2.setCompoundMinWidthBiasLeft(t6, "50%"), p2.setCompoundMinWidthBiasRight(t6, "50%"), p2.setCompoundMinHeightBiasTop(t6, "50%"), p2.setCompoundMinHeightBiasBottom(t6, "50%"));
                  }
                  return s3 && s3.update(), e6;
                }
                var c3 = e6.oldWidth, g3 = e6.oldHeight;
                if (e6.oldWidth = t6.isParent() ? p2.getCompoundMinWidth(t6) : t6.width(), e6.oldHeight = t6.isParent() ? p2.getCompoundMinHeight(t6) : t6.height(), i4(t6, c3), n4(t6, g3), t6.isParent()) {
                  var f3 = e6.oldBiasLeft || "50%", l3 = e6.oldBiasRight || "50%", m3 = e6.oldBiasTop || "50%", v3 = e6.oldBiasBottom || "50%";
                  e6.oldBiasLeft = p2.getCompoundMinWidthBiasLeft(t6) || "50%", e6.oldBiasRight = p2.getCompoundMinWidthBiasRight(t6) || "50%", e6.oldBiasTop = p2.getCompoundMinHeightBiasTop(t6) || "50%", e6.oldBiasBottom = p2.getCompoundMinHeightBiasBottom(t6) || "50%", p2.setCompoundMinWidthBiasLeft(t6, f3), p2.setCompoundMinWidthBiasRight(t6, l3), p2.setCompoundMinHeightBiasTop(t6, m3), p2.setCompoundMinHeightBiasBottom(t6, v3);
                }
                return s3 && s3.update(), e6;
              };
              function S2(e6, t6) {
                var i4 = function(e7) {
                  for (var t7 = {}, i5 = 0; i5 < e7.length; i5++)
                    t7[e7[i5].id()] = true;
                  return e7.filter(function(e8, i6) {
                    "number" == typeof e8 && (e8 = i6);
                    for (var n4 = e8.parent()[0]; null != n4; ) {
                      if (t7[n4.id()])
                        return false;
                      n4 = n4.parent()[0];
                    }
                    return true;
                  });
                }(t6);
                i4.union(i4.descendants()).positions(function(t7, i5) {
                  "number" == typeof t7 && (t7 = i5);
                  var n4 = t7.position("x"), o4 = t7.position("y");
                  return t7.isParent() ? { x: n4, y: o4 } : { x: n4 + e6.x, y: o4 + e6.y };
                });
              }
              var E2, k2, L2 = false, N2 = { 37: false, 38: false, 39: false, 40: false };
              if (E2 = { x: void 0, y: void 0 }, k2 = { x: 0, y: 0 }, r3.on("unselect", "node", d4 = function(e6) {
                E2 = { x: void 0, y: void 0 }, k2 = { x: 0, y: 0 }, s3 && (s3.remove(), s3 = null);
                var t6 = r3.nodes(":selected");
                1 == t6.size() && (s3 = new y2(t6));
              }), r3.on("select", "node", h2 = function(e6) {
                var t6 = e6.target;
                s3 && (s3.remove(), s3 = null);
                var i4 = r3.nodes(":selected");
                1 != i4.size() || p2.isNoControlsMode(t6) || (s3 = new y2(i4));
              }), r3.on("remove", "node", function(e6) {
                e6.target.selected() && d4();
              }), r3.on("add", "node", function(e6) {
                e6.target.selected() && h2(e6);
              }), r3.on("position", "node", function(e6) {
                s3 && (s3.parent.position(), e6.target.id() == s3.parent.id() ? s3.update() : k2.x == E2.x && k2.y == E2.y || (k2 = s3.parent.position(), s3.update(), E2 = { x: k2.x, y: k2.y }));
              }), r3.on("zoom", function() {
                s3 && s3.update();
              }), r3.on("pan", function() {
                s3 && s3.update();
              }), r3.on("afterUndo afterRedo", function() {
                s3 && (s3.update(), E2 = { x: void 0, y: void 0 });
              }), p2.enableMovementWithArrowKeys && (document.addEventListener("keydown", function(e6) {
                if ("function" == typeof p2.moveSelectedNodesOnKeyEvents ? p2.moveSelectedNodesOnKeyEvents() : p2.moveSelectedNodesOnKeyEvents) {
                  var t6 = document.activeElement.tagName;
                  if ("TEXTAREA" != t6 && "INPUT" != t6) {
                    switch (e6.keyCode) {
                      case 37:
                      case 39:
                      case 38:
                      case 40:
                      case 32:
                        e6.preventDefault();
                    }
                    if (e6.keyCode < 37 || e6.keyCode > 40)
                      return;
                    N2[e6.keyCode] = true, e6.preventDefault(), L2 || (M2 = r3.nodes(":selected"), r3.trigger("nodeediting.movestart", [M2]), L2 = true);
                    var i4 = 3;
                    if (e6.altKey && e6.shiftKey)
                      return;
                    e6.altKey ? i4 = 1 : e6.shiftKey && (i4 = 10);
                    var n4 = 0, o4 = 0;
                    n4 += N2[39] ? i4 : 0, n4 -= N2[37] ? i4 : 0, o4 += N2[40] ? i4 : 0, S2({ x: n4, y: o4 -= N2[38] ? i4 : 0 }, M2);
                  }
                }
              }, true), document.addEventListener("keyup", function(e6) {
                e6.keyCode < "37" || e6.keyCode > "40" || (e6.preventDefault(), N2[e6.keyCode] = false, ("function" == typeof p2.moveSelectedNodesOnKeyEvents ? p2.moveSelectedNodesOnKeyEvents() : p2.moveSelectedNodesOnKeyEvents) && (r3.trigger("nodeediting.moveend", [M2]), M2 = void 0, L2 = false));
              }, true)), r3.undoRedo && p2.undoable) {
                var F2, O2;
                r3.on("nodeediting.resizestart", function(e6, i4, n4) {
                  F2 = { node: n4, css: {} }, n4.isParent() ? (F2.css.minWidth = parseFloat(p2.getCompoundMinWidth(n4)), F2.css.minHeight = parseFloat(p2.getCompoundMinHeight(n4)), F2.css.biasLeft = p2.getCompoundMinWidthBiasLeft(n4), F2.css.biasRight = p2.getCompoundMinWidthBiasRight(n4), F2.css.biasTop = p2.getCompoundMinHeightBiasTop(n4), F2.css.biasBottom = p2.getCompoundMinHeightBiasBottom(n4)) : (F2.css.width = n4.width(), F2.css.height = n4.height(), F2.position = t5.extend({}, n4.position()));
                }), r3.on("nodeediting.resizeend", function(e6, t6, i4) {
                  F2.firstTime = true, r3.undoRedo().do("resize", F2), F2 = void 0;
                }), r3.on("nodeediting.movestart", function(e6, t6) {
                  null != t6[0] && (O2 = { firstTime: true, firstNodePosition: { x: t6[0].position("x"), y: t6[0].position("y") }, nodes: t6 });
                }), r3.on("nodeediting.moveend", function(e6, t6) {
                  if (null != O2) {
                    var i4 = O2.firstNodePosition;
                    O2.positionDiff = { x: -t6[0].position("x") + i4.x, y: -t6[0].position("y") + i4.y }, delete O2.firstNodePosition, r3.undoRedo().do("nodeediting.move", O2), O2 = void 0;
                  }
                }), r3.on("nodeediting.resizetocontent", function(e6, t6) {
                  var i4 = { self: t6, firstTime: true };
                  r3.undoRedo().do("resizeToContent", i4);
                });
                var A2 = function(e6) {
                  if (e6.firstTime)
                    return s3 && s3.update(), delete e6.firstTime, e6;
                  var i4 = e6.node, n4 = { node: i4, css: {} };
                  return i4.isParent() ? (n4.css.minWidth = parseFloat(p2.getCompoundMinWidth(i4)), n4.css.minHeight = parseFloat(p2.getCompoundMinHeight(i4)), n4.css.biasLeft = p2.getCompoundMinWidthBiasLeft(i4), n4.css.biasRight = p2.getCompoundMinWidthBiasRight(i4), n4.css.biasTop = p2.getCompoundMinHeightBiasTop(i4), n4.css.biasBottom = p2.getCompoundMinHeightBiasBottom(i4)) : (n4.css.width = i4.width(), n4.css.height = i4.height(), n4.position = t5.extend({}, i4.position())), r3.startBatch(), i4.isParent() ? (p2.setCompoundMinWidth(i4, e6.css.minWidth), p2.setCompoundMinHeight(i4, e6.css.minHeight), p2.setCompoundMinWidthBiasLeft(i4, e6.css.biasLeft), p2.setCompoundMinWidthBiasRight(i4, e6.css.biasRight), p2.setCompoundMinHeightBiasTop(i4, e6.css.biasTop), p2.setCompoundMinHeightBiasBottom(i4, e6.css.biasBottom)) : (i4.position(e6.position), p2.setWidth(i4, e6.css.width), p2.setHeight(i4, e6.css.height)), r3.endBatch(), s3 && s3.update(), n4;
                }, K2 = function(e6) {
                  if (e6.firstTime)
                    return delete e6.firstTime, e6;
                  var t6 = e6.nodes, i4 = e6.positionDiff, n4 = { nodes: t6, positionDiff: { x: -i4.x, y: -i4.y } };
                  return S2(i4, t6), n4;
                };
                r3.undoRedo().action("resize", A2, A2), r3.undoRedo().action("nodeediting.move", K2, K2), r3.undoRedo().action("resizeToContent", P2, P2);
              }
              var D2, I2 = { refreshGrapples: function() {
                if (s3) {
                  var e6 = s3.parent;
                  s3.remove(), s3 = new y2(e6);
                }
              }, removeGrapples: function() {
                s3 && (s3.remove(), s3 = null);
              } };
              return D2 = I2, o3(r3).api = D2, I2;
            });
          }
          function o3(e5, t6) {
            void 0 === e5.scratch("_cyNodeEditing") && e5.scratch("_cyNodeEditing", {});
            var i4 = e5.scratch("_cyNodeEditing");
            return void 0 === t6 ? i4 : i4[t6];
          }
        }, e3.exports && (e3.exports = r2), void 0 === (n2 = (function() {
          return r2;
        }).call(t4, i2, t4, e3)) || (e3.exports = n2), "undefined" != typeof cytoscape && "undefined" != typeof jQuery && "undefined" != typeof Konva && r2(cytoscape, jQuery, Konva);
      } }, t3 = {};
      return function i2(n2) {
        var o2 = t3[n2];
        if (void 0 !== o2)
          return o2.exports;
        var s2 = t3[n2] = { exports: {} };
        return e2[n2](s2, s2.exports, i2), s2.exports;
      }(265);
    })();
  });
})(cytoscapeNodeEditing);
var cytoscapeNodeEditingExports = cytoscapeNodeEditing.exports;
const nodeEditing = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeNodeEditingExports);
function instance$4($$self) {
  nodeEditing(cytoscape$2, window.$, Konva$1);
  let cy2 = get_store_value(cyStore);
  onMount(() => {
    cy2.nodeEditing({
      resizeToContentCueImage: "",
      undoable: true
    });
  });
  return [];
}
class NodeEditing extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$4, null, safe_not_equal, {});
  }
}
function instance$3($$self) {
  cytoscape$2("collection", "init", function() {
    this.addClass(FREE).addClass(NOT_LABEL).addClass(FROM_USER);
    return this;
  });
  cytoscape$2("collection", "free", function() {
    return this.hasClass(FREE);
  });
  cytoscape$2("collection", "addLabel", function(label) {
    this.addLabelImport(label).removeClass(BY_LAV);
    return this;
  });
  cytoscape$2("collection", "addLabelImport", function(label) {
    this.data("label", label).addClass(LABEL).removeClass(NOT_LABEL);
    return this;
  });
  cytoscape$2("collection", "removeLabel", function() {
    this.removeClass(LABEL).addClass(NOT_LABEL).data("label", null);
    return this;
  });
  cytoscape$2("collection", "setLabel", function(label) {
    this.data("label", label);
    return this;
  });
  cytoscape$2("collection", "getLabel", function() {
    return this.data("label");
  });
  cytoscape$2("collection", "fixPara", function(value) {
    this.data("value", value).removeClass(FREE).removeClass(FORCE_FREE).removeClass(HAS_EST).addClass(FIXED);
    return this;
  });
  cytoscape$2("collection", "freePara", function() {
    this.removeClass(FIXED).removeClass(FORCE_FREE).removeClass(BY_LAV).addClass(FREE);
    return this;
  });
  cytoscape$2("collection", "setFree", function() {
    this.removeClass(FIXED).removeClass(FORCE_FREE).addClass(FREE);
    return this;
  });
  cytoscape$2("collection", "forceFreePara", function() {
    this.removeClass(FREE).removeClass(FIXED).removeClass(BY_LAV).addClass(FORCE_FREE);
    return this;
  });
  cytoscape$2("collection", "revert", function() {
    const sourceId = this.source().id();
    const targetId = this.target().id();
    this.move({ source: targetId, target: sourceId });
    return this;
  });
  cytoscape$2("collection", "setUndirected", function() {
    this.removeClass(DIRECTED).addClass(UNDIRECTED);
    return this;
  });
  cytoscape$2("collection", "setDirected", function() {
    this.removeClass(UNDIRECTED).addClass(DIRECTED);
    return this;
  });
  cytoscape$2("collection", "isUndirected", function() {
    return this.hasClass(UNDIRECTED);
  });
  cytoscape$2("collection", "isDirected", function() {
    return this.hasClass(DIRECTED);
  });
  cytoscape$2("collection", "makeLoop", function() {
    this.addClass(LOOP);
    return this;
  });
  cytoscape$2("collection", "myIsLoop", function() {
    return this.hasClass(LOOP);
  });
  cytoscape$2("collection", "makeMeanEdge", function() {
    this.data("isMean", "1");
    return this;
  });
  cytoscape$2("collection", "isMean", function() {
    return this.data("isMean") === "1" || this.isConstant();
  });
  cytoscape$2("collection", "makeOtherEdge", function() {
    this.data("isMean", "0");
    return this;
  });
  cytoscape$2("collection", "isFixed", function() {
    return this.hasClass(FIXED);
  });
  cytoscape$2("collection", "isFree", function() {
    return this.hasClass(FREE) || this.hasClass(FORCE_FREE);
  });
  cytoscape$2("collection", "isForceFree", function() {
    return this.hasClass(FORCE_FREE);
  });
  cytoscape$2("collection", "hasLabel", function() {
    return this.hasClass(LABEL);
  });
  cytoscape$2("collection", "isModifiedLavaan", function() {
    return this.hasClass(BY_LAV);
  });
  cytoscape$2("collection", "markModifiedLavaan", function() {
    this.addClass(BY_LAV);
    return this;
  });
  cytoscape$2("collection", "markAddedLavaan", function() {
    this.addClass(FROM_LAV).removeClass(FROM_USER);
    return this;
  });
  cytoscape$2("collection", "markAddedUser", function() {
    this.removeClass(FROM_LAV).addClass(FROM_USER);
    return this;
  });
  cytoscape$2("collection", "isUserAdded", function() {
    return this.hasClass(FROM_USER);
  });
  cytoscape$2("collection", "isLavaanAdded", function() {
    return this.hasClass(FROM_LAV);
  });
  cytoscape$2("collection", "getValue", function() {
    return this.data("value");
  });
  cytoscape$2("collection", "setValue", function(value) {
    this.data("value", value);
  });
  cytoscape$2("collection", "invalidate", function() {
    this.removeClass(VALIDATED);
    return this;
  });
  cytoscape$2("collection", "validate", function() {
    this.addClass(VALIDATED);
    return this;
  });
  cytoscape$2("collection", "isValid", function() {
    return this.hasClass(VALIDATED);
  });
  cytoscape$2("collection", "revertLavaanFix", function() {
    this.freePara().removeClass(BY_LAV);
  });
  cytoscape$2("collection", "removeEstimates", function() {
    this.removeClass(HAS_EST).removeClass(HAS_EST_FIXED);
    this.removeData("estimates");
    return this;
  });
  cytoscape$2("collection", "link", function() {
    this.addClass(LINKED);
    return this;
  });
  cytoscape$2("collection", "unlink", function() {
    this.removeClass(LINKED);
    return this;
  });
  cytoscape$2("collection", "isLinked", function() {
    return this.hasClass(LINKED);
  });
  cytoscape$2("collection", "isLatent", function() {
    return this.hasClass(LATENT);
  });
  cytoscape$2("collection", "makeLatent", function() {
    this.removeClass(OBSERVED).addClass(LATENT).removeClass(LINKED);
    return this;
  });
  cytoscape$2("collection", "makeObserved", function() {
    this.addClass(OBSERVED).removeClass(LATENT);
    return this;
  });
  cytoscape$2("collection", "makeOrdered", function() {
    this.removeClass(CONTINOUS).addClass(ORDERED);
    return this;
  });
  cytoscape$2("collection", "isOrdered", function() {
    return this.hasClass(ORDERED);
  });
  cytoscape$2("collection", "makeContinous", function() {
    this.addClass(CONTINOUS).removeClass(ORDERED);
    return this;
  });
  cytoscape$2("collection", "isConstant", function() {
    return this.hasClass(CONSTANT);
  });
  cytoscape$2("collection", "isObserved", function() {
    return this.hasClass(OBSERVED);
  });
  cytoscape$2("core", "getLavaanNodes", function() {
    return this.nodes(`.${FROM_LAV}`);
  });
  cytoscape$2("core", "getLavaanEdges", function() {
    return this.edges(`.${FROM_LAV}`);
  });
  cytoscape$2("core", "getObservedNodes", function() {
    return this.nodes(`.${OBSERVED}`);
  });
  cytoscape$2("core", "getUserEdges", function() {
    return this.edges(`.${FROM_USER}`);
  });
  cytoscape$2("core", "getLavaanModifiedEdges", function() {
    return this.edges(`.${BY_LAV}`);
  });
  cytoscape$2("core", "getLatentNodes", function() {
    return this.nodes(function(node) {
      return node.hasClass(LATENT);
    });
  });
  return [];
}
class ExtendCyto extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$3, null, safe_not_equal, {});
  }
}
var cytoscapeEdgeEditing = { exports: {} };
(function(module, exports) {
  !function(e2, t3) {
    module.exports = t3();
  }(self, function() {
    return (() => {
      var e2 = { 347: (e3, t4, n2) => {
        var o2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
          return typeof e4;
        } : function(e4) {
          return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
        }, i2 = n2(218), s2 = n2(259), d2 = n2(171), a2 = n2(961), r2 = 0;
        e3.exports = function(e4, t5) {
          var n3 = e4;
          s2.options = e4;
          var c2, l2, g2, h2, u2, y2, v2, p2, f2, x2, m2, b2, A2, P2, C2, w2, T2, E2, M2, S2 = "cy-edge-bend-editing-cxt-add-bend-point" + r2, I2 = "cy-edge-bend-editing-cxt-remove-bend-point" + r2, D2 = "cy-edge-bend-editing-cxt-remove-multiple-bend-point" + r2, F2 = "cy-edge-control-editing-cxt-add-control-point" + r2, R2 = "cy-edge-control-editing-cxt-remove-control-point" + r2, O2 = "cy-edge-bend-editing-cxt-remove-multiple-control-point" + r2, B2 = null, K2 = null, W2 = false, k2 = { init: function() {
            a2(t5, s2, e4);
            var n4 = e4, o3 = $(this), k3 = "cy-node-edge-editing-stage" + r2;
            r2++;
            var z2, N2, L2 = $('<div id="' + k3 + '"></div>');
            o3.find("#" + k3).length < 1 && o3.append(L2), (z2 = Konva.stages.length < r2 ? new Konva.Stage({ id: "node-edge-editing-stage", container: k3, width: o3.width(), height: o3.height() }) : Konva.stages[r2 - 1]).getChildren().length < 1 ? (N2 = new Konva.Layer(), z2.add(N2)) : N2 = z2.getChildren()[0];
            var U2 = { edge: void 0, edgeType: "none", anchors: [], touchedAnchor: void 0, touchedAnchorIndex: void 0, bindListeners: function(e5) {
              e5.on("mousedown touchstart", this.eMouseDown);
            }, unbindListeners: function(e5) {
              e5.off("mousedown touchstart", this.eMouseDown);
            }, eMouseDown: function(e5) {
              t5.autounselectify(false), W2 = true, U2.touchedAnchor = e5.target, M2 = false, U2.edge.unselect();
              var n5 = s2.syntax[U2.edgeType].weight, o4 = s2.syntax[U2.edgeType].distance, i3 = U2.edge;
              ue2 = { edge: i3, type: U2.edgeType, weights: i3.data(n5) ? [].concat(i3.data(n5)) : [], distances: i3.data(o4) ? [].concat(i3.data(o4)) : [] }, T2 = t5.style()._private.coreStyle["active-bg-opacity"] ? t5.style()._private.coreStyle["active-bg-opacity"].value : 0.15, t5.style().selector("core").style("active-bg-opacity", 0).update(), ae2(), t5.autoungrabify(true), N2.getStage().on("contentTouchend contentMouseup", U2.eMouseUp), N2.getStage().on("contentMouseout", U2.eMouseOut);
            }, eMouseUp: function(e5) {
              W2 = false, U2.touchedAnchor = void 0, M2 = false, U2.edge.select(), t5.style().selector("core").style("active-bg-opacity", T2).update(), re2(), t5.autounselectify(true), t5.autoungrabify(false), N2.getStage().off("contentTouchend contentMouseup", U2.eMouseUp), N2.getStage().off("contentMouseout", U2.eMouseOut);
            }, eMouseOut: function(e5) {
              M2 = true;
            }, clearAnchorsExcept: function() {
              var e5 = this, t6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, n5 = false;
              this.anchors.forEach(function(o4, i3) {
                t6 && o4 === t6 ? n5 = true : (e5.unbindListeners(o4), o4.destroy());
              }), n5 ? this.anchors = [t6] : (this.anchors = [], this.edge = void 0, this.edgeType = "none");
            }, renderAnchorShapes: function(e5) {
              if (this.edge = e5, this.edgeType = s2.getEdgeType(e5), e5.hasClass("edgebendediting-hasbendpoints") || e5.hasClass("edgecontrolediting-hascontrolpoints")) {
                for (var t6 = s2.getAnchorsAsArray(e5), n5 = 0.65 * ie2(e5), o4 = (e5.source().position(), e5.target().position(), 0); t6 && o4 < t6.length; o4 += 2) {
                  var i3 = t6[o4], d4 = t6[o4 + 1];
                  this.renderAnchorShape(i3, d4, n5);
                }
                N2.draw();
              }
            }, renderAnchorShape: function(e5, n5, o4) {
              var i3 = ne2({ x: e5 - o4 / 2, y: n5 - o4 / 2 });
              o4 *= t5.zoom();
              var s3 = new Konva.Rect({ x: i3.x, y: i3.y, width: o4, height: o4, fill: "black", strokeWidth: 0, draggable: true });
              this.anchors.push(s3), this.bindListeners(s3), N2.add(s3);
            } }, j2 = function(e5, n5) {
              var o4 = e5.target || e5.cyTarget;
              if (!s2.isIgnoredEdge(o4)) {
                var i3, d4, a3, r3, c3 = s2.getEdgeType(o4);
                "none" === c3 ? (i3 = [], d4 = []) : (a3 = s2.syntax[c3].weight, r3 = s2.syntax[c3].distance, i3 = o4.data(a3) ? [].concat(o4.data(a3)) : o4.data(a3), d4 = o4.data(r3) ? [].concat(o4.data(r3)) : o4.data(r3));
                var l3 = { edge: o4, type: c3, weights: i3, distances: d4 };
                s2.addAnchorPoint(void 0, void 0, n5), te2().undoable && t5.undoRedo().do("changeAnchorPoints", l3);
              }
              oe2(), o4.select();
            }, q2 = function(e5) {
              var n5 = U2.edge, o4 = s2.getEdgeType(n5);
              if (!s2.edgeTypeNoneShouldntHappen(o4, "UiUtilities.js, cxtRemoveAnchorFcn")) {
                var i3 = { edge: n5, type: o4, weights: [].concat(n5.data(s2.syntax[o4].weight)), distances: [].concat(n5.data(s2.syntax[o4].distance)) };
                s2.removeAnchor(), te2().undoable && t5.undoRedo().do("changeAnchorPoints", i3), setTimeout(function() {
                  oe2(), n5.select();
                }, 50);
              }
            }, _2 = function(e5) {
              var n5 = U2.edge, o4 = s2.getEdgeType(n5), i3 = { edge: n5, type: o4, weights: [].concat(n5.data(s2.syntax[o4].weight)), distances: [].concat(n5.data(s2.syntax[o4].distance)) };
              s2.removeAllAnchors(), te2().undoable && t5.undoRedo().do("changeAnchorPoints", i3), setTimeout(function() {
                oe2(), n5.select();
              }, 50);
            }, H2 = n4.handleReconnectEdge, V2 = n4.validateEdge, X2 = n4.actOnUnsuccessfulReconnection, G2 = [{ id: S2, content: n4.addBendMenuItemTitle, selector: "edge", onClickFunction: function(e5) {
              j2(e5, "bend");
            }, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }, { id: I2, content: n4.removeBendMenuItemTitle, selector: "edge", onClickFunction: q2, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }, { id: D2, content: n4.removeAllBendMenuItemTitle, selector: n4.enableMultipleAnchorRemovalOption && ":selected.edgebendediting-hasmultiplebendpoints", onClickFunction: _2, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }, { id: F2, content: n4.addControlMenuItemTitle, selector: "edge", coreAsWell: true, onClickFunction: function(e5) {
              j2(e5, "control");
            }, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }, { id: R2, content: n4.removeControlMenuItemTitle, selector: "edge", coreAsWell: true, onClickFunction: q2, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }, { id: O2, content: n4.removeAllControlMenuItemTitle, selector: n4.enableMultipleAnchorRemovalOption && ":selected.edgecontrolediting-hasmultiplecontrolpoints", onClickFunction: _2, hasTrailingDivider: n4.useTrailingDividersAfterContextMenuOptions }];
            if (t5.contextMenus) {
              var J2 = t5.contextMenus("get");
              J2.isActive() ? J2.appendMenuItems(G2) : t5.contextMenus({ menuItems: G2 });
            }
            var Q2 = i2(function() {
              L2.attr("height", o3.height()).attr("width", o3.width()).css({ position: "absolute", top: 0, left: 0, "z-index": te2().zIndex }), setTimeout(function() {
                var e5 = L2.offset(), n5 = o3.offset();
                L2.css({ top: -(e5.top - n5.top), left: -(e5.left - n5.left) }), N2.getStage().setWidth(o3.width()), N2.getStage().setHeight(o3.height()), t5 && oe2();
              }, 0);
            }, 250);
            function Y2() {
              Q2();
            }
            Y2(), $(window).bind("resize", function() {
              Y2();
            });
            var Z2, ee2 = o3.data("cyedgeediting");
            function te2() {
              return Z2 || (Z2 = o3.data("cyedgeediting").options);
            }
            function ne2(e5) {
              var n5 = t5.pan(), o4 = t5.zoom();
              return { x: e5.x * o4 + n5.x, y: e5.y * o4 + n5.y };
            }
            function oe2() {
              U2.clearAnchorsExcept(U2.touchedAnchor), null !== B2 && (B2.destroy(), B2 = null), null !== K2 && (K2.destroy(), K2 = null), N2.draw(), E2 && (U2.renderAnchorShapes(E2), function(e5) {
                if (e5) {
                  var n5 = s2.getAnchorsAsArray(e5);
                  void 0 === n5 && (n5 = []);
                  var o4 = e5.sourceEndpoint(), i3 = e5.targetEndpoint();
                  if (o4.x && i3.x && (n5.unshift(o4.y), n5.unshift(o4.x), n5.push(i3.x), n5.push(i3.y), n5)) {
                    var d4 = { x: n5[0], y: n5[1] }, a3 = { x: n5[n5.length - 2], y: n5[n5.length - 1] }, r3 = { x: n5[2], y: n5[3] }, c3 = { x: n5[n5.length - 4], y: n5[n5.length - 3] };
                    !function(e6, n6, o5, i4, s3) {
                      var d5 = n6.x - o5 / 2, a4 = n6.y - o5 / 2, r4 = i4.x - o5 / 2, c4 = i4.y - o5 / 2, l3 = s3.x - o5 / 2, g3 = s3.y - o5 / 2, h3 = ne2({ x: e6.x - o5 / 2, y: e6.y - o5 / 2 }), u3 = ne2({ x: d5, y: a4 });
                      o5 = o5 * t5.zoom() / 2;
                      var y3 = ne2({ x: r4, y: c4 }), v3 = ne2({ x: l3, y: g3 }), p3 = o5, f3 = Math.sqrt(Math.pow(y3.x - h3.x, 2) + Math.pow(y3.y - h3.y, 2)), x3 = h3.x + p3 / f3 * (y3.x - h3.x), m3 = h3.y + p3 / f3 * (y3.y - h3.y), b3 = Math.sqrt(Math.pow(v3.x - u3.x, 2) + Math.pow(v3.y - u3.y, 2)), A3 = u3.x + p3 / b3 * (v3.x - u3.x), P3 = u3.y + p3 / b3 * (v3.y - u3.y);
                      null === B2 && (B2 = new Konva.Circle({ x: x3 + o5, y: m3 + o5, radius: o5, fill: "black" })), null === K2 && (K2 = new Konva.Circle({ x: A3 + o5, y: P3 + o5, radius: o5, fill: "black" })), N2.add(B2), N2.add(K2), N2.draw();
                    }(d4, a3, 0.65 * ie2(e5), r3, c3);
                  }
                }
              }(E2));
            }
            function ie2(e5) {
              var t6 = te2().anchorShapeSizeFactor;
              return parseFloat(e5.css("width")) <= 2.5 ? 2.5 * t6 : parseFloat(e5.css("width")) * t6;
            }
            function se2(e5, t6, n5, o4, i3) {
              return e5 >= o4 - n5 / 2 && e5 <= o4 + n5 / 2 && t6 >= i3 - n5 / 2 && t6 <= i3 + n5 / 2;
            }
            function de2(e5, t6, n5) {
              var o4 = s2.getEdgeType(n5);
              if ("none" === o4)
                return -1;
              if (null == n5.data(s2.syntax[o4].weight) || 0 == n5.data(s2.syntax[o4].weight).length)
                return -1;
              for (var i3 = s2.getAnchorsAsArray(n5), d4 = ie2(n5), a3 = 0; i3 && a3 < i3.length; a3 += 2)
                if (se2(e5, t6, d4, i3[a3], i3[a3 + 1]))
                  return a3 / 2;
              return -1;
            }
            function ae2() {
              P2 = t5.panningEnabled(), C2 = t5.zoomingEnabled(), w2 = t5.boxSelectionEnabled(), t5.zoomingEnabled(false).panningEnabled(false).boxSelectionEnabled(false);
            }
            function re2() {
              t5.zoomingEnabled(C2).panningEnabled(P2).boxSelectionEnabled(w2);
            }
            null == ee2 && (ee2 = {}), ee2.options = n4;
            var ce2 = i2(function(e5, t6, n5, o4) {
              var i3 = e5.data(s2.syntax[t6].weight), d4 = e5.data(s2.syntax[t6].distance), a3 = s2.convertToRelativePosition(e5, o4);
              i3[n5] = a3.weight, d4[n5] = a3.distance, e5.data(s2.syntax[t6].weight, i3), e5.data(s2.syntax[t6].distance, d4);
            }, 5);
            P2 = t5.panningEnabled(), C2 = t5.zoomingEnabled(), w2 = t5.boxSelectionEnabled();
            var le2, ge2, he2, ue2, ye2, ve2, pe2, fe2, xe, me2 = (we2 = t5.edges(":selected")).length;
            1 === me2 && (E2 = we2[0]), t5.bind("zoom pan", h2 = function() {
              E2 && oe2();
            }), t5.on("data", "edge", A2 = function() {
              E2 && oe2();
            }), t5.on("style", "edge.edgebendediting-hasbendpoints:selected, edge.edgecontrolediting-hascontrolpoints:selected", c2 = function() {
              setTimeout(function() {
                oe2();
              }, 50);
            }), t5.on("remove", "edge", l2 = function() {
              if (this.selected()) {
                if (me2 -= 1, t5.startBatch(), E2 && E2.removeClass("cy-edge-editing-highlight"), 1 === me2) {
                  var e5 = t5.edges(":selected");
                  1 === e5.length ? (E2 = e5[0]).addClass("cy-edge-editing-highlight") : E2 = void 0;
                } else
                  E2 = void 0;
                t5.endBatch();
              }
              oe2();
            }), t5.on("add", "edge", g2 = function() {
              this.selected() && (me2 += 1, t5.startBatch(), E2 && E2.removeClass("cy-edge-editing-highlight"), 1 === me2 ? (E2 = this).addClass("cy-edge-editing-highlight") : E2 = void 0, t5.endBatch()), oe2();
            }), t5.on("select", "edge", u2 = function() {
              var e5 = this;
              0 != e5.target().connectedEdges().length && 0 != e5.source().connectedEdges().length && (me2 += 1, t5.startBatch(), E2 && E2.removeClass("cy-edge-editing-highlight"), 1 === me2 ? (E2 = e5).addClass("cy-edge-editing-highlight") : E2 = void 0, t5.endBatch(), oe2());
            }), t5.on("unselect", "edge", y2 = function() {
              if (me2 -= 1, t5.startBatch(), E2 && E2.removeClass("cy-edge-editing-highlight"), 1 === me2) {
                var e5 = t5.edges(":selected");
                1 === e5.length ? (E2 = e5[0]).addClass("cy-edge-editing-highlight") : E2 = void 0;
              } else
                E2 = void 0;
              t5.endBatch(), oe2();
            });
            var be2, Ae, Pe, Ce, we2, Te = false;
            t5.on("tapstart", v2 = function(e5) {
              ge2 = e5.position || e5.cyPosition;
            }), t5.on("tapstart", "edge", p2 = function(e5) {
              var n5 = this;
              if (E2 && E2.id() === n5.id()) {
                he2 = n5;
                s2.getEdgeType(n5);
                var i3 = function(e6, t6, n6) {
                  var o4 = ie2(n6), i4 = n6._private.rscratch.allpts, s3 = { x: i4[0], y: i4[1] }, d4 = { x: i4[i4.length - 2], y: i4[i4.length - 1] };
                  return ne2(s3), ne2(d4), se2(e6, t6, o4, s3.x, s3.y) ? 0 : se2(e6, t6, o4, d4.x, d4.y) ? 1 : -1;
                }(ge2.x, ge2.y, n5);
                if (0 == i3 || 1 == i3) {
                  n5.unselect(), ve2 = i3, fe2 = 0 == i3 ? he2.source() : he2.target();
                  var a3 = 0 == i3 ? "source" : "target", r3 = d2.disconnectEdge(he2, t5, e5.renderedPosition, a3);
                  pe2 = r3.dummyNode, he2 = r3.edge, ae2();
                } else
                  le2 = void 0, ye2 = true;
              } else
                ye2 = false;
            }), t5.on("drag", "node", b2 = function() {
              E2 && oe2();
            }), t5.on("tapdrag", f2 = function(e5) {
              t5.edges(":selected").length > 0 && t5.autounselectify(false);
              var o4 = he2;
              if (void 0 === he2 || !s2.isIgnoredEdge(o4)) {
                var i3 = s2.getEdgeType(o4);
                if (ye2 && n4.enableCreateAnchorOnDrag && !W2 && "none" !== i3) {
                  var d4 = s2.syntax[i3].weight, a3 = s2.syntax[i3].distance;
                  ue2 = { edge: o4, type: i3, weights: o4.data(d4) ? [].concat(o4.data(d4)) : [], distances: o4.data(a3) ? [].concat(o4.data(a3)) : [] }, o4.unselect(), le2 = s2.addAnchorPoint(o4, ge2), he2 = o4, ye2 = void 0, Te = true, ae2();
                }
                if (W2 || void 0 !== he2 && (void 0 !== le2 || void 0 !== ve2)) {
                  var r3 = e5.position || e5.cyPosition;
                  -1 != ve2 && pe2 ? pe2.position(r3) : null != le2 ? ce2(o4, i3, le2, r3) : W2 && (void 0 === U2.touchedAnchorIndex && ge2 && (U2.touchedAnchorIndex = de2(ge2.x, ge2.y, U2.edge)), void 0 !== U2.touchedAnchorIndex && ce2(U2.edge, U2.edgeType, U2.touchedAnchorIndex, r3)), e5.target && e5.target[0] && e5.target.isNode() && (xe = e5.target);
                }
              }
            }), t5.on("tapend", x2 = function(e5) {
              M2 && N2.getStage().fire("contentMouseup");
              var n5 = he2 || U2.edge;
              if (void 0 !== n5) {
                var o4 = U2.touchedAnchorIndex;
                if (null != o4) {
                  var i3, a3 = n5.source().position("x"), r3 = n5.source().position("y"), c3 = n5.target().position("x"), l3 = n5.target().position("y"), g3 = s2.getAnchorsAsArray(n5), h3 = [a3, r3].concat(g3).concat([c3, l3]), u3 = o4 + 1, y3 = u3 - 1, v3 = u3 + 1, p3 = { x: h3[2 * u3], y: h3[2 * u3 + 1] }, f3 = { x: h3[2 * y3], y: h3[2 * y3 + 1] }, x3 = { x: h3[2 * v3], y: h3[2 * v3 + 1] };
                  if (p3.x === f3.x && p3.y === f3.y || p3.x === f3.x && p3.y === f3.y)
                    i3 = true;
                  else {
                    var m3, b3 = (f3.y - x3.y) / (f3.x - x3.x), A3 = { srcPoint: f3, tgtPoint: x3, m1: b3, m2: -1 / b3 }, P3 = s2.getIntersection(n5, p3, A3), C3 = Math.sqrt(Math.pow(p3.x - P3.x, 2) + Math.pow(p3.y - P3.y, 2));
                    "bend" === (m3 = s2.getEdgeType(n5)) && C3 < te2().bendRemovalSensitivity && (i3 = true);
                  }
                  i3 && s2.removeAnchor(n5, o4);
                } else if (null != pe2 && (0 == ve2 || 1 == ve2)) {
                  var w3 = fe2, T3 = "valid", E3 = 0 == ve2 ? "source" : "target";
                  if (xe) {
                    var S3 = 0 == ve2 ? xe : n5.source(), I3 = 1 == ve2 ? xe : n5.target();
                    "function" == typeof V2 && (T3 = V2(n5, S3, I3)), w3 = "valid" === T3 ? xe : fe2;
                  }
                  if (S3 = 0 == ve2 ? w3 : n5.source(), I3 = 1 == ve2 ? w3 : n5.target(), n5 = d2.connectEdge(n5, fe2, E3), fe2.id() !== w3.id())
                    if ("function" == typeof H2) {
                      var D3 = H2(S3.id(), I3.id(), n5.data());
                      if (D3 && (d2.copyEdge(n5, D3), s2.initAnchorPoints(te2().bendPositionsFunction, te2().controlPositionsFunction, [D3])), D3 && te2().undoable) {
                        var F3 = { newEdge: D3, oldEdge: n5 };
                        t5.undoRedo().do("removeReconnectedEdge", F3), n5 = D3;
                      } else
                        D3 && (t5.remove(n5), n5 = D3);
                    } else {
                      var R3 = 0 == ve2 ? { source: w3.id() } : { target: w3.id() }, O3 = 0 == ve2 ? { source: fe2.id() } : { target: fe2.id() };
                      if (te2().undoable && w3.id() !== fe2.id()) {
                        var B3 = { edge: n5, location: R3, oldLoc: O3 };
                        n5 = t5.undoRedo().do("reconnectEdge", B3).edge;
                      }
                    }
                  "valid" !== T3 && "function" == typeof X2 && X2(), n5.select(), t5.remove(pe2);
                }
              }
              "none" === (m3 = s2.getEdgeType(n5)) && (m3 = "bend"), void 0 !== U2.touchedAnchorIndex || Te || (ue2 = void 0);
              var K3 = s2.syntax[m3].weight;
              void 0 !== n5 && void 0 !== ue2 && (n5.data(K3) ? n5.data(K3).toString() : null) != ue2.weights.toString() && (Te && (n5.select(), t5.autounselectify(true)), te2().undoable && t5.undoRedo().do("changeAnchorPoints", ue2)), le2 = void 0, he2 = void 0, ue2 = void 0, ye2 = void 0, ve2 = void 0, pe2 = void 0, fe2 = void 0, xe = void 0, ge2 = void 0, Te = false, U2.touchedAnchorIndex = void 0, re2(), setTimeout(function() {
                oe2();
              }, 50);
            }), t5.on("edgeediting.movestart", function(e5, t6) {
              Ce = false, null != t6[0] && t6.forEach(function(e6) {
                null == s2.getAnchorsAsArray(e6) || Ce || (Ae = { x: s2.getAnchorsAsArray(e6)[0], y: s2.getAnchorsAsArray(e6)[1] }, be2 = { firstTime: true, firstAnchorPosition: { x: Ae.x, y: Ae.y }, edges: t6 }, Pe = e6, Ce = true);
              });
            }), t5.on("edgeediting.moveend", function(e5, n5) {
              if (null != be2) {
                var o4 = be2.firstAnchorPosition, i3 = { x: s2.getAnchorsAsArray(Pe)[0], y: s2.getAnchorsAsArray(Pe)[1] };
                be2.positionDiff = { x: -i3.x + o4.x, y: -i3.y + o4.y }, delete be2.firstAnchorPosition, te2().undoable && t5.undoRedo().do("moveAnchorPoints", be2), be2 = void 0;
              }
            }), t5.on("cxttap", m2 = function(e5) {
              var o4, i3, d4 = e5.target || e5.cyTarget, a3 = false;
              try {
                a3 = d4.isEdge();
              } catch (e6) {
              }
              a3 ? (o4 = d4, i3 = s2.getEdgeType(o4)) : (o4 = U2.edge, i3 = U2.edgeType);
              var r3 = t5.contextMenus("get");
              if (!E2 || E2.id() != o4.id() || s2.isIgnoredEdge(o4) || E2 !== o4)
                return r3.hideMenuItem(I2), r3.hideMenuItem(S2), r3.hideMenuItem(R2), void r3.hideMenuItem(F2);
              var c3 = e5.position || e5.cyPosition, l3 = de2(c3.x, c3.y, o4);
              -1 == l3 ? (r3.hideMenuItem(I2), r3.hideMenuItem(R2), "control" === i3 && a3 ? (r3.showMenuItem(F2), r3.hideMenuItem(S2)) : "bend" === i3 && a3 ? (r3.showMenuItem(S2), r3.hideMenuItem(F2)) : a3 ? (r3.showMenuItem(S2), r3.showMenuItem(F2)) : (r3.hideMenuItem(S2), r3.hideMenuItem(F2)), s2.currentCtxPos = c3) : (r3.hideMenuItem(S2), r3.hideMenuItem(F2), "control" === i3 ? (r3.showMenuItem(R2), r3.hideMenuItem(I2), n4.enableMultipleAnchorRemovalOption && o4.hasClass("edgecontrolediting-hasmultiplecontrolpoints") && r3.showMenuItem(O2)) : "bend" === i3 ? (r3.showMenuItem(I2), r3.hideMenuItem(R2)) : (r3.hideMenuItem(I2), r3.hideMenuItem(R2), r3.hideMenuItem(O2)), s2.currentAnchorIndex = l3), s2.currentCtxEdge = o4;
            }), t5.on("cyedgeediting.changeAnchorPoints", "edge", function() {
              t5.startBatch(), t5.edges().unselect(), t5.trigger("bendPointMovement"), t5.endBatch(), oe2();
            });
            var Ee = false, Me = { 37: false, 38: false, 39: false, 40: false };
            document.addEventListener("keydown", function(n5) {
              if ("function" == typeof te2().moveSelectedAnchorsOnKeyEvents ? te2().moveSelectedAnchorsOnKeyEvents() : te2().moveSelectedAnchorsOnKeyEvents) {
                var o4, i3, d4 = document.activeElement.tagName;
                if ("TEXTAREA" != d4 && "INPUT" != d4) {
                  switch (n5.keyCode) {
                    case 37:
                    case 39:
                    case 38:
                    case 40:
                    case 32:
                      n5.preventDefault();
                  }
                  if (n5.keyCode < "37" || n5.keyCode > "40")
                    return;
                  if (Me[n5.keyCode] = true, t5.edges(":selected").length != t5.elements(":selected").length || 1 != t5.edges(":selected").length)
                    return;
                  Ee || (we2 = t5.edges(":selected"), t5.trigger("edgeediting.movestart", [we2]), Ee = true);
                  var a3 = 3;
                  if (n5.altKey && n5.shiftKey)
                    return;
                  n5.altKey ? a3 = 1 : n5.shiftKey && (a3 = 10);
                  var r3 = 0, c3 = 0;
                  r3 += Me[39] ? a3 : 0, r3 -= Me[37] ? a3 : 0, c3 += Me[40] ? a3 : 0, c3 -= Me[38] ? a3 : 0, o4 = { x: r3, y: c3 }, (i3 = we2).forEach(function(t6) {
                    var n6 = s2.getAnchorsAsArray(t6), i4 = [];
                    if (null != n6) {
                      for (var d5 = 0; d5 < n6.length; d5 += 2)
                        i4.push({ x: n6[d5] + o4.x, y: n6[d5 + 1] + o4.y });
                      var a4 = s2.getEdgeType(t6);
                      if (s2.edgeTypeNoneShouldntHappen(a4, "UiUtilities.js, moveAnchorPoints"))
                        return;
                      "bend" === a4 ? e4.bendPointPositionsSetterFunction(t6, i4) : "control" === a4 && e4.controlPointPositionsSetterFunction(t6, i4);
                    }
                  }), s2.initAnchorPoints(te2().bendPositionsFunction, te2().controlPositionsFunction, i3), t5.trigger("bendPointMovement");
                }
              }
            }, true), document.addEventListener("keyup", function(e5) {
              e5.keyCode < "37" || e5.keyCode > "40" || (e5.preventDefault(), Me[e5.keyCode] = false, ("function" == typeof te2().moveSelectedAnchorsOnKeyEvents ? te2().moveSelectedAnchorsOnKeyEvents() : te2().moveSelectedAnchorsOnKeyEvents) && (t5.trigger("edgeediting.moveend", [we2]), we2 = void 0, Ee = false));
            }, true), o3.data("cyedgeediting", ee2);
          }, unbind: function() {
            t5.off("remove", "node", l2).off("add", "node", g2).off("style", "edge.edgebendediting-hasbendpoints:selected, edge.edgecontrolediting-hascontrolpoints:selected", c2).off("select", "edge", u2).off("unselect", "edge", y2).off("tapstart", v2).off("tapstart", "edge", p2).off("tapdrag", f2).off("tapend", x2).off("cxttap", m2).off("drag", "node", b2).off("data", "edge", A2), t5.unbind("zoom pan", h2);
          } };
          return k2[n3] ? k2[n3].apply($(t5.container()), Array.prototype.slice.call(arguments, 1)) : "object" != (void 0 === n3 ? "undefined" : o2(n3)) && n3 ? ($.error("No such function `" + n3 + "` for cytoscape.js-edge-editing"), $(this)) : k2.init.apply($(t5.container()), arguments);
        };
      }, 259: (e3) => {
        var t4 = { options: void 0, currentCtxEdge: void 0, currentCtxPos: void 0, currentAnchorIndex: void 0, ignoredClasses: void 0, setIgnoredClasses: function(e4) {
          this.ignoredClasses = e4;
        }, syntax: { bend: { edge: "segments", class: "edgebendediting-hasbendpoints", multiClass: "edgebendediting-hasmultiplebendpoints", weight: "cyedgebendeditingWeights", distance: "cyedgebendeditingDistances", weightCss: "segment-weights", distanceCss: "segment-distances" }, control: { edge: "unbundled-bezier", class: "edgecontrolediting-hascontrolpoints", multiClass: "edgecontrolediting-hasmultiplecontrolpoints", weight: "cyedgecontroleditingWeights", distance: "cyedgecontroleditingDistances", weightCss: "control-point-weights", distanceCss: "control-point-distances" } }, getEdgeType: function(e4) {
          return e4 ? e4.hasClass(this.syntax.bend.class) ? "bend" : e4.hasClass(this.syntax.control.class) ? "control" : e4.css("curve-style") === this.syntax.bend.edge ? "bend" : e4.css("curve-style") === this.syntax.control.edge ? "control" : this.options.bendPositionsFunction(e4) && this.options.bendPositionsFunction(e4).length > 0 ? "bend" : this.options.controlPositionsFunction(e4) && this.options.controlPositionsFunction(e4).length > 0 ? "control" : "none" : "none";
        }, initAnchorPoints: function(e4, t5, n2) {
          for (var o2 = 0; o2 < n2.length; o2++) {
            var i2 = n2[o2], s2 = this.getEdgeType(i2);
            if ("none" !== s2 && !this.isIgnoredEdge(i2)) {
              var d2;
              "bend" === s2 ? d2 = e4.apply(this, i2) : "control" === s2 && (d2 = t5.apply(this, i2));
              var a2 = { weights: [], distances: [] };
              if (d2)
                a2 = this.convertToRelativePositions(i2, d2);
              else {
                var r2 = i2.data(this.syntax[s2].weight), c2 = i2.data(this.syntax[s2].distance);
                r2 && c2 && (a2 = { weights: r2, distances: c2 });
              }
              a2.distances.length > 0 ? (i2.data(this.syntax[s2].weight, a2.weights), i2.data(this.syntax[s2].distance, a2.distances), i2.addClass(this.syntax[s2].class), a2.distances.length > 1 && i2.addClass(this.syntax[s2].multiClass)) : (i2.data(this.syntax[s2].weight, []), i2.data(this.syntax[s2].distance, []), i2.hasClass(this.syntax[s2].class) && i2.removeClass(this.syntax[s2].class), i2.hasClass(this.syntax[s2].multiClass) && i2.removeClass(this.syntax[s2].multiClass));
            }
          }
        }, isIgnoredEdge: function(e4) {
          var t5 = e4.source().position("x"), n2 = e4.source().position("y"), o2 = e4.target().position("x"), i2 = e4.target().position("y");
          if (t5 == o2 && n2 == i2 || e4.source().id() == e4.target().id())
            return true;
          for (var s2 = 0; this.ignoredClasses && s2 < this.ignoredClasses.length; s2++)
            if (e4.hasClass(this.ignoredClasses[s2]))
              return true;
          return false;
        }, getLineDirection: function(e4, t5) {
          return e4.y == t5.y && e4.x < t5.x ? 1 : e4.y < t5.y && e4.x < t5.x ? 2 : e4.y < t5.y && e4.x == t5.x ? 3 : e4.y < t5.y && e4.x > t5.x ? 4 : e4.y == t5.y && e4.x > t5.x ? 5 : e4.y > t5.y && e4.x > t5.x ? 6 : e4.y > t5.y && e4.x == t5.x ? 7 : 8;
        }, getSrcTgtPointsAndTangents: function(e4) {
          var t5 = e4.source(), n2 = e4.target(), o2 = (n2.position(), t5.position(), t5.position()), i2 = n2.position(), s2 = (i2.y - o2.y) / (i2.x - o2.x);
          return { m1: s2, m2: -1 / s2, srcPoint: o2, tgtPoint: i2 };
        }, getIntersection: function(e4, t5, n2) {
          void 0 === n2 && (n2 = this.getSrcTgtPointsAndTangents(e4));
          var o2, i2, s2 = n2.srcPoint, d2 = (n2.tgtPoint, n2.m1), a2 = n2.m2;
          if (d2 == 1 / 0 || d2 == -1 / 0)
            o2 = s2.x, i2 = t5.y;
          else if (0 == d2)
            o2 = t5.x, i2 = s2.y;
          else {
            var r2 = s2.y - d2 * s2.x;
            i2 = d2 * (o2 = (t5.y - a2 * t5.x - r2) / (d2 - a2)) + r2;
          }
          return { x: o2, y: i2 };
        }, getAnchorsAsArray: function(e4) {
          var t5 = this.getEdgeType(e4);
          if ("none" !== t5 && e4.css("curve-style") === this.syntax[t5].edge) {
            for (var n2 = [], o2 = e4.pstyle(this.syntax[t5].weightCss) ? e4.pstyle(this.syntax[t5].weightCss).pfValue : [], i2 = e4.pstyle(this.syntax[t5].distanceCss) ? e4.pstyle(this.syntax[t5].distanceCss).pfValue : [], s2 = Math.min(o2.length, i2.length), d2 = e4.source().position(), a2 = e4.target().position(), r2 = a2.y - d2.y, c2 = a2.x - d2.x, l2 = Math.sqrt(c2 * c2 + r2 * r2), g2 = { x: c2 / l2, y: r2 / l2 }, h2 = -g2.y, u2 = g2.x, y2 = 0; y2 < s2; y2++) {
              var v2 = o2[y2], p2 = i2[y2], f2 = 1 - v2, x2 = v2, m2 = { x1: d2.x, x2: a2.x, y1: d2.y, y2: a2.y }, b2 = { x: m2.x1 * f2 + m2.x2 * x2, y: m2.y1 * f2 + m2.y2 * x2 };
              n2.push(b2.x + h2 * p2, b2.y + u2 * p2);
            }
            return n2;
          }
        }, convertToRelativePosition: function(e4, t5, n2) {
          void 0 === n2 && (n2 = this.getSrcTgtPointsAndTangents(e4));
          var o2, i2 = this.getIntersection(e4, t5, n2), s2 = i2.x, d2 = i2.y, a2 = n2.srcPoint, r2 = n2.tgtPoint;
          o2 = s2 != a2.x ? (s2 - a2.x) / (r2.x - a2.x) : d2 != a2.y ? (d2 - a2.y) / (r2.y - a2.y) : 0;
          var c2 = Math.sqrt(Math.pow(d2 - t5.y, 2) + Math.pow(s2 - t5.x, 2)), l2 = this.getLineDirection(a2, r2), g2 = this.getLineDirection(i2, t5);
          return l2 - g2 != -2 && l2 - g2 != 6 && 0 != c2 && (c2 *= -1), { weight: o2, distance: c2 };
        }, convertToRelativePositions: function(e4, t5) {
          for (var n2 = this.getSrcTgtPointsAndTangents(e4), o2 = [], i2 = [], s2 = 0; t5 && s2 < t5.length; s2++) {
            var d2 = t5[s2], a2 = this.convertToRelativePosition(e4, d2, n2);
            o2.push(a2.weight), i2.push(a2.distance);
          }
          return { weights: o2, distances: i2 };
        }, getDistancesString: function(e4, t5) {
          for (var n2 = "", o2 = e4.data(this.syntax[t5].distance), i2 = 0; o2 && i2 < o2.length; i2++)
            n2 = n2 + " " + o2[i2];
          return n2;
        }, getWeightsString: function(e4, t5) {
          for (var n2 = "", o2 = e4.data(this.syntax[t5].weight), i2 = 0; o2 && i2 < o2.length; i2++)
            n2 = n2 + " " + o2[i2];
          return n2;
        }, addAnchorPoint: function(e4, t5) {
          var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
          void 0 !== e4 && void 0 !== t5 || (e4 = this.currentCtxEdge, t5 = this.currentCtxPos), void 0 === n2 && (n2 = this.getEdgeType(e4));
          for (var o2, i2 = this.syntax[n2].weight, s2 = this.syntax[n2].distance, d2 = this.convertToRelativePosition(e4, t5), a2 = d2.weight, r2 = e4.source().position("x"), c2 = e4.source().position("y"), l2 = e4.target().position("x"), g2 = e4.target().position("y"), h2 = this.convertToRelativePosition(e4, { x: r2, y: c2 }).weight, u2 = this.convertToRelativePosition(e4, { x: l2, y: g2 }).weight, y2 = [h2].concat(e4.data(i2) ? e4.data(i2) : []).concat([u2]), v2 = this.getAnchorsAsArray(e4), p2 = 1 / 0, f2 = [r2, c2].concat(v2 || []).concat([l2, g2]), x2 = -1, m2 = 0; m2 < y2.length - 1; m2++) {
            var b2 = y2[m2], A2 = y2[m2 + 1], P2 = this.compareWithPrecision(a2, b2, true), C2 = this.compareWithPrecision(a2, A2), w2 = this.compareWithPrecision(a2, A2, true), T2 = this.compareWithPrecision(a2, b2);
            if (P2 && C2 || w2 && T2) {
              var E2 = { x: r2 = f2[2 * m2], y: c2 = f2[2 * m2 + 1] }, M2 = { x: l2 = f2[2 * m2 + 2], y: g2 = f2[2 * m2 + 3] }, S2 = (c2 - g2) / (r2 - l2), I2 = -1 / S2, D2 = { srcPoint: E2, tgtPoint: M2, m1: S2, m2: I2 }, F2 = this.getIntersection(e4, t5, D2), R2 = Math.sqrt(Math.pow(t5.x - F2.x, 2) + Math.pow(t5.y - F2.y, 2));
              R2 < p2 && (p2 = R2, o2 = F2, x2 = m2);
            }
          }
          void 0 !== o2 && (t5 = o2), d2 = this.convertToRelativePosition(e4, t5), void 0 === o2 && (d2.distance = 0);
          var O2 = e4.data(i2), B2 = e4.data(s2);
          return B2 = B2 || [], 0 === (O2 = O2 || []).length && (x2 = 0), -1 != x2 && (O2.splice(x2, 0, d2.weight), B2.splice(x2, 0, d2.distance)), e4.data(i2, O2), e4.data(s2, B2), e4.addClass(this.syntax[n2].class), (O2.length > 1 || B2.length > 1) && e4.addClass(this.syntax[n2].multiClass), x2;
        }, removeAnchor: function(e4, t5) {
          void 0 !== e4 && void 0 !== t5 || (e4 = this.currentCtxEdge, t5 = this.currentAnchorIndex);
          var n2 = this.getEdgeType(e4);
          if (!this.edgeTypeNoneShouldntHappen(n2, "anchorPointUtilities.js, removeAnchor")) {
            var o2, i2 = this.syntax[n2].weight, s2 = this.syntax[n2].distance, d2 = e4.data(i2), a2 = e4.data(s2);
            "bend" === n2 ? o2 = this.options.bendPositionsFunction(e4) : "control" === n2 && (o2 = this.options.controlPositionsFunction(e4)), d2.splice(t5, 1), a2.splice(t5, 1), o2 && o2.splice(t5, 1), 1 == d2.length || 1 == a2.length ? e4.removeClass(this.syntax[n2].multiClass) : 0 == d2.length || 0 == a2.length ? (e4.removeClass(this.syntax[n2].class), e4.data(i2, []), e4.data(s2, [])) : (e4.data(i2, d2), e4.data(s2, a2));
          }
        }, removeAllAnchors: function(e4) {
          void 0 === e4 && (e4 = this.currentCtxEdge);
          var t5 = this.getEdgeType(e4);
          if (!this.edgeTypeNoneShouldntHappen(t5, "anchorPointUtilities.js, removeAllAnchors")) {
            e4.removeClass(this.syntax[t5].class), e4.removeClass(this.syntax[t5].multiClass);
            var n2 = this.syntax[t5].weight, o2 = this.syntax[t5].distance;
            e4.data(n2, []), e4.data(o2, []), "bend" === t5 && this.options.bendPositionsFunction(e4) ? this.options.bendPointPositionsSetterFunction(e4, []) : "control" === t5 && this.options.controlPositionsFunction(e4) && this.options.controlPointPositionsSetterFunction(e4, []);
          }
        }, calculateDistance: function(e4, t5) {
          var n2 = e4.x - t5.x, o2 = e4.y - t5.y;
          return Math.sqrt(Math.pow(n2, 2) + Math.pow(o2, 2));
        }, compareWithPrecision: function(e4, t5) {
          var n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.01, i2 = e4 - t5;
          return Math.abs(i2) <= o2 || (n2 ? e4 < t5 : e4 > t5);
        }, edgeTypeNoneShouldntHappen: function(e4, t5) {
          return "none" === e4 && (console.log("In " + t5 + ": edge type none should never happen here!!"), true);
        } };
        e3.exports = t4;
      }, 218: (e3) => {
        var t4, n2, o2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
          return typeof e4;
        } : function(e4) {
          return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
        }, i2 = (t4 = Math.max, n2 = Date.now || function() {
          return (/* @__PURE__ */ new Date()).getTime();
        }, function(e4, i3, s2) {
          var d2, a2, r2, c2, l2, g2, h2, u2, y2, v2 = 0, p2 = false, f2 = true;
          if ("function" != typeof e4)
            throw new TypeError("Expected a function");
          if (i3 = i3 < 0 ? 0 : +i3 || 0, true === s2) {
            var x2 = true;
            f2 = false;
          } else
            y2 = void 0 === (u2 = s2) ? "undefined" : o2(u2), !u2 || "object" != y2 && "function" != y2 || (x2 = !!s2.leading, p2 = "maxWait" in s2 && t4(+s2.maxWait || 0, i3), f2 = "trailing" in s2 ? !!s2.trailing : f2);
          function m2(t5, o3) {
            o3 && clearTimeout(o3), a2 = g2 = h2 = void 0, t5 && (v2 = n2(), r2 = e4.apply(l2, d2), g2 || a2 || (d2 = l2 = void 0));
          }
          function b2() {
            var e5 = i3 - (n2() - c2);
            e5 <= 0 || e5 > i3 ? m2(h2, a2) : g2 = setTimeout(b2, e5);
          }
          function A2() {
            m2(f2, g2);
          }
          function P2() {
            if (d2 = arguments, c2 = n2(), l2 = this, h2 = f2 && (g2 || !x2), false === p2)
              var t5 = x2 && !g2;
            else {
              a2 || x2 || (v2 = c2);
              var o3 = p2 - (c2 - v2), s3 = o3 <= 0 || o3 > p2;
              s3 ? (a2 && (a2 = clearTimeout(a2)), v2 = c2, r2 = e4.apply(l2, d2)) : a2 || (a2 = setTimeout(A2, o3));
            }
            return s3 && g2 ? g2 = clearTimeout(g2) : g2 || i3 === p2 || (g2 = setTimeout(b2, i3)), t5 && (s3 = true, r2 = e4.apply(l2, d2)), !s3 || g2 || a2 || (d2 = l2 = void 0), r2;
          }
          return P2.cancel = function() {
            g2 && clearTimeout(g2), a2 && clearTimeout(a2), v2 = 0, a2 = g2 = h2 = void 0;
          }, P2;
        });
        e3.exports = i2;
      }, 579: (e3, t4, n2) => {
        var o2, i2, s2;
        i2 = n2(259), n2(218), s2 = function(e4, t5, o3) {
          var s3 = n2(347);
          if (e4 && t5 && o3) {
            var d2, a2 = { bendPositionsFunction: function(e5) {
              return e5.data("bendPointPositions");
            }, controlPositionsFunction: function(e5) {
              return e5.data("controlPointPositions");
            }, bendPointPositionsSetterFunction: function(e5, t6) {
              e5.data("bendPointPositions", t6);
            }, controlPointPositionsSetterFunction: function(e5, t6) {
              e5.data("controlPointPositions", t6);
            }, initAnchorsAutomatically: true, ignoredClasses: [], undoable: false, anchorShapeSizeFactor: 3, zIndex: 999, bendRemovalSensitivity: 8, addBendMenuItemTitle: "Add Bend Point", removeBendMenuItemTitle: "Remove Bend Point", removeAllBendMenuItemTitle: "Remove All Bend Points", addControlMenuItemTitle: "Add Control Point", removeControlMenuItemTitle: "Remove Control Point", removeAllControlMenuItemTitle: "Remove All Control Points", moveSelectedAnchorsOnKeyEvents: function() {
              return true;
            }, enableMultipleAnchorRemovalOption: false, useTrailingDividersAfterContextMenuOptions: false, enableCreateAnchorOnDrag: true }, r2 = false;
            e4("core", "edgeEditing", function(e5) {
              var t6 = this;
              return "initialized" === e5 ? r2 : ("get" !== e5 && (d2 = function(e6, t7) {
                var n3 = {};
                for (var o4 in e6)
                  n3[o4] = e6[o4];
                for (var o4 in t7)
                  if ("bendRemovalSensitivity" == o4) {
                    var i3 = t7[o4];
                    isNaN(i3) || (n3[o4] = i3 >= 0 && i3 <= 20 ? t7[o4] : i3 < 0 ? 0 : 20);
                  } else
                    n3[o4] = t7[o4];
                return n3;
              }(a2, e5), r2 = true, t6.style().selector(".edgebendediting-hasbendpoints").css({ "curve-style": "segments", "segment-distances": function(e6) {
                return i2.getDistancesString(e6, "bend");
              }, "segment-weights": function(e6) {
                return i2.getWeightsString(e6, "bend");
              }, "edge-distances": "node-position" }), t6.style().selector(".edgecontrolediting-hascontrolpoints").css({ "curve-style": "unbundled-bezier", "control-point-distances": function(e6) {
                return i2.getDistancesString(e6, "control");
              }, "control-point-weights": function(e6) {
                return i2.getWeightsString(e6, "control");
              }, "edge-distances": "node-position" }), t6.style().selector("#nwt_reconnectEdge_dummy").css({ width: "1", height: "1", visibility: "hidden" }), i2.setIgnoredClasses(d2.ignoredClasses), d2.initAnchorsAutomatically && i2.initAnchorPoints(d2.bendPositionsFunction, d2.controlPositionsFunction, t6.edges(), d2.ignoredClasses), s3(d2, t6)), r2 ? { getAnchorsAsArray: function(e6) {
                return i2.getAnchorsAsArray(e6);
              }, initAnchorPoints: function(e6) {
                i2.initAnchorPoints(d2.bendPositionsFunction, d2.controlPositionsFunction, e6);
              }, deleteSelectedAnchor: function(e6, t7) {
                i2.removeAnchor(e6, t7);
              }, getEdgeType: function(e6) {
                return i2.getEdgeType(e6);
              } } : void 0);
            });
          }
        }, e3.exports && (e3.exports = s2), void 0 === (o2 = (function() {
          return s2;
        }).call(t4, n2, t4, e3)) || (e3.exports = o2), "undefined" != typeof cytoscape && $ && Konva && s2(cytoscape, $, Konva);
      }, 171: (e3) => {
        e3.exports = { disconnectEdge: function(e4, t4, n2, o2) {
          var i2 = { data: { id: "nwt_reconnectEdge_dummy", ports: [] }, renderedPosition: n2 };
          t4.add(i2);
          var s2 = "source" === o2 ? { source: i2.data.id } : { target: i2.data.id };
          return e4 = e4.move(s2)[0], { dummyNode: t4.nodes("#" + i2.data.id)[0], edge: e4 };
        }, connectEdge: function(e4, t4, n2) {
          if (e4.isEdge() && t4.isNode()) {
            var o2 = {};
            if ("source" === n2)
              o2.source = t4.id();
            else {
              if ("target" !== n2)
                return;
              o2.target = t4.id();
            }
            return e4.move(o2)[0];
          }
        }, copyEdge: function(e4, t4) {
          this.copyAnchors(e4, t4), this.copyStyle(e4, t4);
        }, copyStyle: function(e4, t4) {
          e4 && t4 && (t4.data("line-color", e4.data("line-color")), t4.data("width", e4.data("width")), t4.data("cardinality", e4.data("cardinality")));
        }, copyAnchors: function(e4, t4) {
          if (e4.hasClass("edgebendediting-hasbendpoints")) {
            var n2 = e4.data("cyedgebendeditingDistances"), o2 = e4.data("cyedgebendeditingWeights");
            t4.data("cyedgebendeditingDistances", n2), t4.data("cyedgebendeditingWeights", o2), t4.addClass("edgebendediting-hasbendpoints");
          } else
            e4.hasClass("edgecontrolediting-hascontrolpoints") && (n2 = e4.data("cyedgecontroleditingDistances"), o2 = e4.data("cyedgecontroleditingWeights"), t4.data("cyedgecontroleditingDistances", n2), t4.data("cyedgecontroleditingWeights", o2), t4.addClass("edgecontrolediting-hascontrolpoints"));
          e4.hasClass("edgebendediting-hasmultiplebendpoints") ? t4.addClass("edgebendediting-hasmultiplebendpoints") : e4.hasClass("edgecontrolediting-hasmultiplecontrolpoints") && t4.addClass("edgecontrolediting-hasmultiplecontrolpoints");
        } };
      }, 961: (e3) => {
        e3.exports = function(e4, t4, n2) {
          if (null != e4.undoRedo) {
            var o2 = e4.undoRedo({ defaultActions: false, isDebug: true });
            o2.action("changeAnchorPoints", i2, i2), o2.action("moveAnchorPoints", s2, s2), o2.action("reconnectEdge", d2, d2), o2.action("removeReconnectedEdge", a2, a2);
          }
          function i2(n3) {
            var o3, i3, s3, d4, a3 = e4.getElementById(n3.edge.id()), r2 = "none" !== n3.type ? n3.type : t4.getEdgeType(a3);
            "none" !== n3.type || n3.set ? (s3 = t4.syntax[r2].weight, d4 = t4.syntax[r2].distance, o3 = n3.set ? a3.data(s3) : n3.weights, i3 = n3.set ? a3.data(d4) : n3.distances) : (o3 = [], i3 = []);
            var c2 = { edge: a3, type: r2, weights: o3, distances: i3, set: true };
            if (n3.set) {
              var l2 = n3.weights && n3.weights.length > 0, g2 = l2 && n3.weights.length > 1;
              l2 && (a3.data(s3, n3.weights), a3.data(d4, n3.distances));
              var h2 = t4.syntax[r2].class, u2 = t4.syntax[r2].multiClass;
              l2 || g2 ? l2 && !g2 ? (a3.addClass(h2), a3.removeClass(u2)) : a3.addClass(h2 + " " + u2) : a3.removeClass(h2 + " " + u2), l2 || (a3.data(s3, []), a3.data(d4, [])), a3.selected() ? (a3.unselect(), a3.select()) : a3.select();
            }
            return a3.trigger("cyedgeediting.changeAnchorPoints"), c2;
          }
          function s2(e5) {
            if (e5.firstTime)
              return delete e5.firstTime, e5;
            var o3 = e5.edges, i3 = e5.positionDiff, s3 = { edges: o3, positionDiff: { x: -i3.x, y: -i3.y } };
            return function(e6, o4) {
              o4.forEach(function(o5) {
                var i4 = t4.getEdgeType(o5), s4 = t4.getAnchorsAsArray(o5), d4 = [];
                if (null != s4) {
                  for (var a3 = 0; a3 < s4.length; a3 += 2)
                    d4.push({ x: s4[a3] + e6.x, y: s4[a3 + 1] + e6.y });
                  "bend" === i4 ? n2.bendPointPositionsSetterFunction(o5, d4) : "control" === i4 && n2.controlPointPositionsSetterFunction(o5, d4);
                }
              }), t4.initAnchorPoints(n2.bendPositionsFunction, n2.controlPositionsFunction, o4);
            }(i3, o3), s3;
          }
          function d2(e5) {
            var t5 = e5.edge, n3 = e5.location, o3 = e5.oldLoc, i3 = { edge: t5 = t5.move(n3)[0], location: o3, oldLoc: n3 };
            return t5.unselect(), i3;
          }
          function a2(t5) {
            var n3 = t5.oldEdge;
            (o3 = e4.getElementById(n3.data("id"))) && o3.length > 0 && (n3 = o3);
            var o3, i3 = t5.newEdge;
            return (o3 = e4.getElementById(i3.data("id"))) && o3.length > 0 && (i3 = o3), n3.inside() && (n3 = n3.remove()[0]), i3.removed() && (i3 = i3.restore()).unselect(), { oldEdge: i3, newEdge: n3 };
          }
        };
      } }, t3 = {};
      return function n2(o2) {
        var i2 = t3[o2];
        if (void 0 !== i2)
          return i2.exports;
        var s2 = t3[o2] = { exports: {} };
        return e2[o2](s2, s2.exports, n2), s2.exports;
      }(579);
    })();
  });
})(cytoscapeEdgeEditing);
var cytoscapeEdgeEditingExports = cytoscapeEdgeEditing.exports;
const edgeEditing = /* @__PURE__ */ getDefaultExportFromCjs(cytoscapeEdgeEditingExports);
function instance$2($$self) {
  edgeEditing(cytoscape$2, window.$, Konva$1);
  let cy2 = get_store_value(cyStore);
  onMount(() => {
    cy2.edgeEditing({
      undoable: true,
      bendRemovalSensitivity: 16,
      enableMultipleAnchorRemovalOption: true,
      initAnchorsAutomatically: false,
      useTrailingDividersAfterContextMenuOptions: false,
      enableCreateAnchorOnDrag: true,
      anchorShapeSizeFactor: 4
    });
    cy2.style().update();
  });
  return [];
}
class BendEdges extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$2, null, safe_not_equal, {});
  }
}
const App_svelte_svelte_type_style_lang = "";
function create_if_block(ctx) {
  let t0;
  let init_1;
  let t1;
  let div;
  let current_block_type_index;
  let if_block1;
  let t22;
  let maincontainer;
  let t3;
  let t4;
  let debug_1;
  let t5;
  let fromr;
  let t6;
  let ducktapefixes;
  let current;
  let if_block0 = (
    /*$appState*/
    ctx[0].full && create_if_block_4()
  );
  init_1 = new Init({});
  const if_block_creators = [create_if_block_3, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$appState*/
      ctx2[0].full
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  maincontainer = new MainContainer({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  let if_block2 = (
    /*$appState*/
    ctx[0].full && create_if_block_1()
  );
  debug_1 = new Debug({});
  fromr = new FromR({});
  ducktapefixes = new DuckTapeFixes({});
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      create_component(init_1.$$.fragment);
      t1 = space();
      div = element$1("div");
      if_block1.c();
      t22 = space();
      create_component(maincontainer.$$.fragment);
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      create_component(debug_1.$$.fragment);
      t5 = space();
      create_component(fromr.$$.fragment);
      t6 = space();
      create_component(ducktapefixes.$$.fragment);
      attr(div, "class", "svelte-15ghafl");
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      mount_component(init_1, target, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      append(div, t22);
      mount_component(maincontainer, div, null);
      append(div, t3);
      if (if_block2)
        if_block2.m(div, null);
      insert(target, t4, anchor);
      mount_component(debug_1, target, anchor);
      insert(target, t5, anchor);
      mount_component(fromr, target, anchor);
      insert(target, t6, anchor);
      mount_component(ducktapefixes, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$appState*/
        ctx2[0].full
      ) {
        if (if_block0) {
          if (dirty & /*$appState*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4();
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        }
        transition_in(if_block1, 1);
        if_block1.m(div, t22);
      }
      const maincontainer_changes = {};
      if (dirty & /*$$scope, $appState*/
      3) {
        maincontainer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      maincontainer.$set(maincontainer_changes);
      if (
        /*$appState*/
        ctx2[0].full
      ) {
        if (if_block2) {
          if (dirty & /*$appState*/
          1) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(init_1.$$.fragment, local);
      transition_in(if_block1);
      transition_in(maincontainer.$$.fragment, local);
      transition_in(if_block2);
      transition_in(debug_1.$$.fragment, local);
      transition_in(fromr.$$.fragment, local);
      transition_in(ducktapefixes.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(init_1.$$.fragment, local);
      transition_out(if_block1);
      transition_out(maincontainer.$$.fragment, local);
      transition_out(if_block2);
      transition_out(debug_1.$$.fragment, local);
      transition_out(fromr.$$.fragment, local);
      transition_out(ducktapefixes.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t0);
      destroy_component(init_1, detaching);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      destroy_component(maincontainer);
      if (if_block2)
        if_block2.d();
      if (detaching)
        detach(t4);
      destroy_component(debug_1, detaching);
      if (detaching)
        detach(t5);
      destroy_component(fromr, detaching);
      if (detaching)
        detach(t6);
      destroy_component(ducktapefixes, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let estimationwait;
  let current;
  estimationwait = new EstimationWait({});
  return {
    c() {
      create_component(estimationwait.$$.fragment);
    },
    m(target, anchor) {
      mount_component(estimationwait, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(estimationwait.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(estimationwait.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(estimationwait, detaching);
    }
  };
}
function create_else_block(ctx) {
  let mincontextmenu;
  let current;
  mincontextmenu = new MinContextMenu({
    props: {
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(mincontextmenu.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mincontextmenu, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(mincontextmenu.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mincontextmenu.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mincontextmenu, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let menutop;
  let current;
  menutop = new MenuTop({});
  return {
    c() {
      create_component(menutop.$$.fragment);
    },
    m(target, anchor) {
      mount_component(menutop, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(menutop.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menutop.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(menutop, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let filemenu;
  let t0;
  let viewmenu;
  let t1;
  let layouts;
  let t22;
  let gridoptions;
  let current;
  filemenu = new FileMenu({ props: { full: false } });
  viewmenu = new ViewMenu({ props: { minimal: true } });
  layouts = new Layouts({ props: { minimal: true } });
  gridoptions = new GridOptions({ props: { minimal: true } });
  return {
    c() {
      create_component(filemenu.$$.fragment);
      t0 = space();
      create_component(viewmenu.$$.fragment);
      t1 = space();
      create_component(layouts.$$.fragment);
      t22 = space();
      create_component(gridoptions.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filemenu, target, anchor);
      insert(target, t0, anchor);
      mount_component(viewmenu, target, anchor);
      insert(target, t1, anchor);
      mount_component(layouts, target, anchor);
      insert(target, t22, anchor);
      mount_component(gridoptions, target, anchor);
      current = true;
    },
    p: noop$2,
    i(local) {
      if (current)
        return;
      transition_in(filemenu.$$.fragment, local);
      transition_in(viewmenu.$$.fragment, local);
      transition_in(layouts.$$.fragment, local);
      transition_in(gridoptions.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filemenu.$$.fragment, local);
      transition_out(viewmenu.$$.fragment, local);
      transition_out(layouts.$$.fragment, local);
      transition_out(gridoptions.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filemenu, detaching);
      if (detaching)
        detach(t0);
      destroy_component(viewmenu, detaching);
      if (detaching)
        detach(t1);
      destroy_component(layouts, detaching);
      if (detaching)
        detach(t22);
      destroy_component(gridoptions, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let results;
  let current;
  results = new Results({});
  return {
    c() {
      create_component(results.$$.fragment);
    },
    m(target, anchor) {
      mount_component(results, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(results.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(results.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(results, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let graph2;
  let t0;
  let undoredo;
  let t1;
  let extendcyto;
  let t22;
  let gridguides;
  let t3;
  let automove2;
  let t4;
  let nodeediting;
  let t5;
  let zoom2;
  let t6;
  let contextmenus;
  let t7;
  let onevents;
  let t8;
  let viewupdater;
  let t9;
  let bendedges;
  let t10;
  let if_block_anchor;
  let current;
  graph2 = new MountGraph({});
  undoredo = new UndoRedo({});
  extendcyto = new ExtendCyto({});
  gridguides = new GridGuides({});
  automove2 = new AutoMove({});
  nodeediting = new NodeEditing({});
  zoom2 = new Zoom({});
  contextmenus = new ContextMenus({});
  onevents = new OnEvents({});
  viewupdater = new ViewUpdater({});
  bendedges = new BendEdges({});
  let if_block = (
    /*$appState*/
    ctx[0].full && create_if_block_2()
  );
  return {
    c() {
      create_component(graph2.$$.fragment);
      t0 = space();
      create_component(undoredo.$$.fragment);
      t1 = space();
      create_component(extendcyto.$$.fragment);
      t22 = space();
      create_component(gridguides.$$.fragment);
      t3 = space();
      create_component(automove2.$$.fragment);
      t4 = space();
      create_component(nodeediting.$$.fragment);
      t5 = space();
      create_component(zoom2.$$.fragment);
      t6 = space();
      create_component(contextmenus.$$.fragment);
      t7 = space();
      create_component(onevents.$$.fragment);
      t8 = space();
      create_component(viewupdater.$$.fragment);
      t9 = space();
      create_component(bendedges.$$.fragment);
      t10 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(graph2, target, anchor);
      insert(target, t0, anchor);
      mount_component(undoredo, target, anchor);
      insert(target, t1, anchor);
      mount_component(extendcyto, target, anchor);
      insert(target, t22, anchor);
      mount_component(gridguides, target, anchor);
      insert(target, t3, anchor);
      mount_component(automove2, target, anchor);
      insert(target, t4, anchor);
      mount_component(nodeediting, target, anchor);
      insert(target, t5, anchor);
      mount_component(zoom2, target, anchor);
      insert(target, t6, anchor);
      mount_component(contextmenus, target, anchor);
      insert(target, t7, anchor);
      mount_component(onevents, target, anchor);
      insert(target, t8, anchor);
      mount_component(viewupdater, target, anchor);
      insert(target, t9, anchor);
      mount_component(bendedges, target, anchor);
      insert(target, t10, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$appState*/
        ctx2[0].full
      ) {
        if (if_block) {
          if (dirty & /*$appState*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(graph2.$$.fragment, local);
      transition_in(undoredo.$$.fragment, local);
      transition_in(extendcyto.$$.fragment, local);
      transition_in(gridguides.$$.fragment, local);
      transition_in(automove2.$$.fragment, local);
      transition_in(nodeediting.$$.fragment, local);
      transition_in(zoom2.$$.fragment, local);
      transition_in(contextmenus.$$.fragment, local);
      transition_in(onevents.$$.fragment, local);
      transition_in(viewupdater.$$.fragment, local);
      transition_in(bendedges.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(graph2.$$.fragment, local);
      transition_out(undoredo.$$.fragment, local);
      transition_out(extendcyto.$$.fragment, local);
      transition_out(gridguides.$$.fragment, local);
      transition_out(automove2.$$.fragment, local);
      transition_out(nodeediting.$$.fragment, local);
      transition_out(zoom2.$$.fragment, local);
      transition_out(contextmenus.$$.fragment, local);
      transition_out(onevents.$$.fragment, local);
      transition_out(viewupdater.$$.fragment, local);
      transition_out(bendedges.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(graph2, detaching);
      if (detaching)
        detach(t0);
      destroy_component(undoredo, detaching);
      if (detaching)
        detach(t1);
      destroy_component(extendcyto, detaching);
      if (detaching)
        detach(t22);
      destroy_component(gridguides, detaching);
      if (detaching)
        detach(t3);
      destroy_component(automove2, detaching);
      if (detaching)
        detach(t4);
      destroy_component(nodeediting, detaching);
      if (detaching)
        detach(t5);
      destroy_component(zoom2, detaching);
      if (detaching)
        detach(t6);
      destroy_component(contextmenus, detaching);
      if (detaching)
        detach(t7);
      destroy_component(onevents, detaching);
      if (detaching)
        detach(t8);
      destroy_component(viewupdater, detaching);
      if (detaching)
        detach(t9);
      destroy_component(bendedges, detaching);
      if (detaching)
        detach(t10);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_1(ctx) {
  let alert2;
  let t0;
  let toolbarbelow;
  let t1;
  let reactive;
  let current;
  alert2 = new Alert({});
  toolbarbelow = new ToolbarBelow({});
  reactive = new Reactive({});
  return {
    c() {
      create_component(alert2.$$.fragment);
      t0 = space();
      create_component(toolbarbelow.$$.fragment);
      t1 = space();
      create_component(reactive.$$.fragment);
    },
    m(target, anchor) {
      mount_component(alert2, target, anchor);
      insert(target, t0, anchor);
      mount_component(toolbarbelow, target, anchor);
      insert(target, t1, anchor);
      mount_component(reactive, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(alert2.$$.fragment, local);
      transition_in(toolbarbelow.$$.fragment, local);
      transition_in(reactive.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(alert2.$$.fragment, local);
      transition_out(toolbarbelow.$$.fragment, local);
      transition_out(reactive.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(alert2, detaching);
      if (detaching)
        detach(t0);
      destroy_component(toolbarbelow, detaching);
      if (detaching)
        detach(t1);
      destroy_component(reactive, detaching);
    }
  };
}
function create_fragment(ctx) {
  let appready;
  let t0;
  let t1;
  let datainput;
  let t22;
  let errors;
  let current;
  appready = new AppReady({});
  let if_block = (
    /*$appState*/
    ctx[0].ready && create_if_block(ctx)
  );
  datainput = new DataInput({});
  errors = new Errors({});
  return {
    c() {
      create_component(appready.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(datainput.$$.fragment);
      t22 = space();
      create_component(errors.$$.fragment);
    },
    m(target, anchor) {
      mount_component(appready, target, anchor);
      insert(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t1, anchor);
      mount_component(datainput, target, anchor);
      insert(target, t22, anchor);
      mount_component(errors, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*$appState*/
        ctx2[0].ready
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$appState*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(appready.$$.fragment, local);
      transition_in(if_block);
      transition_in(datainput.$$.fragment, local);
      transition_in(errors.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(appready.$$.fragment, local);
      transition_out(if_block);
      transition_out(datainput.$$.fragment, local);
      transition_out(errors.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(appready, detaching);
      if (detaching)
        detach(t0);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t1);
      destroy_component(datainput, detaching);
      if (detaching)
        detach(t22);
      destroy_component(errors, detaching);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let $appState;
  component_subscribe($$self, appState, ($$value) => $$invalidate(0, $appState = $$value));
  return [$appState];
}
class App extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance$1, create_fragment, safe_not_equal, {});
  }
}
new App({
  target: document.getElementById("app")
});
export {
  _typeof as _,
  commonjsGlobal as c,
  getDefaultExportFromCjs as g
};
//# sourceMappingURL=index-9203af2b.js.map
